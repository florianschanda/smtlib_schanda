(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy1 (Array Int natural))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__with_iterable__container__content (Array Int natural))))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int natural) (rec__with_iterable__container__content a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__with_iterable__container__content (us_split_fields1 a)) 1 100 (rec__with_iterable__container__content (us_split_fields1 b)) 1 100) true) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const with_iterable__container__content__first__bit Int)
(declare-const with_iterable__container__content__last__bit Int)
(declare-const with_iterable__container__content__position Int)
(assert (<= 0 with_iterable__container__content__first__bit))
(assert (< with_iterable__container__content__first__bit with_iterable__container__content__last__bit))
(assert (<= 0 with_iterable__container__content__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((container__ref (mk_container__ref (container__content us_rep)))))
(define-fun container__ref___projection ((a container__ref)) us_rep (container__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__with_iterable__cursor__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__with_iterable__cursor__c a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__with_iterable__cursor__i natural)))))
(define-fun us_split_fields_I__projection ((a us_split_fields2)) natural (rec__with_iterable__cursor__i a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 a))) (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 b)))) (= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 a))) (to_rep (rec__with_iterable__cursor__i (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const with_iterable__cursor__c__first__bit Int)
(declare-const with_iterable__cursor__c__last__bit Int)
(declare-const with_iterable__cursor__c__position Int)
(assert (<= 0 with_iterable__cursor__c__first__bit))
(assert (< with_iterable__cursor__c__first__bit with_iterable__cursor__c__last__bit))
(assert (<= 0 with_iterable__cursor__c__position))
(declare-const with_iterable__cursor__i__first__bit Int)
(declare-const with_iterable__cursor__i__last__bit Int)
(declare-const with_iterable__cursor__i__position Int)
(assert (<= 0 with_iterable__cursor__i__first__bit))
(assert (< with_iterable__cursor__i__first__bit with_iterable__cursor__i__last__bit))
(assert (<= 0 with_iterable__cursor__i__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content a))
(define-fun in_range1 ((rec__with_iterable__cursor__c1 Int) (a us_rep1)) Bool (= rec__with_iterable__cursor__c1 (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const with_iterable__cursor__c__first__bit1 Int)
(declare-const with_iterable__cursor__c__last__bit1 Int)
(declare-const with_iterable__cursor__c__position1 Int)
(assert (<= 0 with_iterable__cursor__c__first__bit1))
(assert (< with_iterable__cursor__c__first__bit1 with_iterable__cursor__c__last__bit1))
(assert (<= 0 with_iterable__cursor__c__position1))
(declare-const with_iterable__cursor__i__first__bit1 Int)
(declare-const with_iterable__cursor__i__last__bit1 Int)
(declare-const with_iterable__cursor__i__position1 Int)
(assert (<= 0 with_iterable__cursor__i__first__bit1))
(assert (< with_iterable__cursor__i__first__bit1 with_iterable__cursor__i__last__bit1))
(assert (<= 0 with_iterable__cursor__i__position1))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((cursor_2__ref (mk_cursor_2__ref (cursor_2__content us_rep1)))))
(define-fun cursor_2__ref___projection ((a cursor_2__ref)) us_rep1 (cursor_2__content a))
(define-fun dynamic_invariant ((temp___expr_191 us_rep1) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool) (temp___do_typ_inv_190 Bool)) Bool (and (=> (not (= temp___skip_constant_188 true)) (in_range1 101 temp___expr_191)) (=> (= temp___do_toplevel_189 true) (=> (= temp___is_init_187 true) (and (<= 1 (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___expr_191)))) (<= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___expr_191))) (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 temp___expr_191)))))))))
(define-fun default_initial_assumption ((temp___expr_195 us_rep1) (temp___skip_top_level_196 Bool)) Bool (= (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 temp___expr_195))) 101))
(define-fun dynamic_predicate ((temp___199 us_rep1)) Bool (and (<= 1 (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___199)))) (<= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___199))) (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 temp___199))))))
(declare-fun has_element (us_rep us_rep1) Bool)
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(assert true)
(assert (forall ((a us_rep)) (forall ((cu us_rep1)) (! (= (= (has_element a cu) true) (and (<= 1 (to_rep (rec__with_iterable__cursor__i (us_split_fields3 cu)))) (<= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 cu))) 100))) :pattern ((has_element a cu))))))
(declare-fun contains_0 (us_rep) Bool)
(declare-fun contains_0__function_guard (Bool us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(assert true)
(assert (forall ((a us_rep)) (! (= (= (contains_0 a) true) (exists ((cu us_rep1)) (and (and (dynamic_invariant cu true false true true) (= (has_element a cu) true)) (= (get a (to_rep (rec__with_iterable__cursor__i (us_split_fields3 cu)))) 0)))) :pattern ((contains_0 a)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range2 ((rec__with_iterable__cursor__c1 Int) (a us_rep1)) Bool (= rec__with_iterable__cursor__c1 (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const with_iterable__cursor__c__first__bit2 Int)
(declare-const with_iterable__cursor__c__last__bit2 Int)
(declare-const with_iterable__cursor__c__position2 Int)
(assert (<= 0 with_iterable__cursor__c__first__bit2))
(assert (< with_iterable__cursor__c__first__bit2 with_iterable__cursor__c__last__bit2))
(assert (<= 0 with_iterable__cursor__c__position2))
(declare-const with_iterable__cursor__i__first__bit2 Int)
(declare-const with_iterable__cursor__i__last__bit2 Int)
(declare-const with_iterable__cursor__i__position2 Int)
(assert (<= 0 with_iterable__cursor__i__first__bit2))
(assert (< with_iterable__cursor__i__first__bit2 with_iterable__cursor__i__last__bit2))
(assert (<= 0 with_iterable__cursor__i__position2))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep1)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep1 (t1b__content a))
(define-fun dynamic_predicate1 ((temp___228 us_rep1)) Bool (and (<= 1 (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___228)))) (<= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___228))) (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 temp___228))))))
(declare-const first__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_180 us_rep1) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (= temp___do_toplevel_178 true) (=> (= temp___is_init_176 true) (and (<= 1 (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___expr_180)))) (<= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___expr_180))) (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 temp___expr_180))))))))
(define-fun dynamic_predicate2 ((temp___183 us_rep1)) Bool (and (<= 1 (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___183)))) (<= (to_rep (rec__with_iterable__cursor__i (us_split_fields3 temp___183))) (to_rep (rec__with_iterable__cursor__c (us_split_discrs1 temp___183))))))
(assert (forall ((a us_rep)) (forall ((i Int)) (! (=> (and (dynamic_invariant1 i true true true true) (and (<= 1 i) (<= i 100))) (dynamic_invariant1 (get a i) true false true true)) :pattern ((get a i))))))
(assert (forall ((a us_rep)) (forall ((i Int)) (! (=> (dynamic_invariant1 i true true true true) (= (get a i) (to_rep (let ((temp___207 (rec__with_iterable__container__content (us_split_fields1 a)))) (select temp___207 i))))) :pattern ((get a i))))))
(declare-const a__split_fields (Array Int natural))
(declare-const first__split_fields natural)
(declare-const o natural)
(declare-const o1 natural)
(declare-const o2 natural)
(declare-const o3 natural)
(declare-const temp___247 natural)
(declare-const temp___2471 natural)
(declare-const o4 natural)
(declare-const o5 natural)
(declare-const o6 natural)
(declare-const o7 natural)
(declare-const o8 natural)
(declare-const o9 natural)
(declare-const temp___248 natural)
(declare-const temp___2481 natural)
(declare-const with_iterable__set_to_0__first__assume us_rep1)
(declare-const o10 natural)
(declare-const o11 (Array Int natural))
(declare-const o12 us_split_fields)
(declare-const temp___251 us_rep)
(declare-const result us_split_fields__ref1)
(declare-const first__split_fields1 us_split_fields2)
(declare-const result1 us_split_fields__ref)
(declare-const a__split_fields1 us_split_fields)
(define-fun temp___2482 () us_rep1 (mk___rep1 (mk___split_discrs temp___248) (mk___split_fields1 temp___2481)))
(define-fun o13 () us_rep1 (mk___rep1 (mk___split_discrs o8) (mk___split_fields1 o9)))
(define-fun o14 () us_rep1 (mk___rep1 (mk___split_discrs o6) (mk___split_fields1 o7)))
(define-fun o15 () us_rep1 (mk___rep1 (mk___split_discrs o4) (mk___split_fields1 o5)))
(define-fun temp___2472 () us_rep1 (mk___rep1 (mk___split_discrs temp___247) (mk___split_fields1 temp___2471)))
(assert (= (to_rep o1) 1))
(assert (= o1 o2))
(assert (= (to_rep o) 101))
(assert (= o o3))
(assert (= temp___247 o3))
(assert (= temp___2471 o2))
(assert (dynamic_predicate1 temp___2472))
(assert (= o15 temp___2472))
(assert (= o14 o15))
(assert (= o13 o14))
(assert (= temp___2482 o13))
(assert (dynamic_predicate temp___2482))
(assert (= with_iterable__set_to_0__first__assume temp___2482))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 first__split_fields))))
(assert (= first__split_fields1 (us_split_fields3 with_iterable__set_to_0__first__assume)))
(assert (= first__split_discrs (us_split_discrs1 with_iterable__set_to_0__first__assume)))
(assert (dynamic_invariant (mk___rep1 first__split_discrs first__split_fields1) true false true true))
(assert (= (to_rep o10) 0))
(assert (= o11 (store a__split_fields 1 o10)))
(assert (= o12 (mk___split_fields o11)))
(assert (= temp___251 (mk___rep o12)))
(assert (= result1 (mk___split_fields__ref (mk___split_fields a__split_fields))))
(assert (= a__split_fields1 (us_split_fields1 temp___251)))
(assert (not (= (has_element (mk___rep a__split_fields1) (mk___rep1 first__split_discrs first__split_fields1)) true)))
(check-sat)
(exit)
