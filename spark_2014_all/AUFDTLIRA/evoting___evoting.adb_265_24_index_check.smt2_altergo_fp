(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type program_phase_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : program_phase_t, program_phase_t -> bool

logic dummy : program_phase_t

type program_phase_t__ref = { program_phase_t__content : program_phase_t
}

function program_phase_t__ref___projection(a: program_phase_t__ref) : program_phase_t =
  (a).program_phase_t__content

type counter_range_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : counter_range_t, counter_range_t -> bool

logic dummy1 : counter_range_t

type counter_range_t__ref = { counter_range_t__content : counter_range_t
}

function counter_range_t__ref___projection(a: counter_range_t__ref) : counter_range_t =
  (a).counter_range_t__content

logic to_rep : counter_range_t -> int

logic of_rep : int -> counter_range_t

axiom inversion_axiom :
  (forall x:counter_range_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:counter_range_t [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type tcandidate_number_tB

predicate in_range3(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tcandidate_number_tB, tcandidate_number_tB -> bool

logic dummy2 : tcandidate_number_tB

type tcandidate_number_tB__ref = { tcandidate_number_tB__content :
tcandidate_number_tB
}

function tcandidate_number_tB__ref___projection(a: tcandidate_number_tB__ref) : tcandidate_number_tB =
  (a).tcandidate_number_tB__content

type candidate_number_t

predicate in_range4(x: int) = ((0 <= x) and (x <= 20))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : candidate_number_t, candidate_number_t -> bool

logic dummy3 : candidate_number_t

type candidate_number_t__ref = { candidate_number_t__content :
candidate_number_t
}

function candidate_number_t__ref___projection(a: candidate_number_t__ref) : candidate_number_t =
  (a).candidate_number_t__content

type map__ref = { map__content : (int,counter_range_t) farray
}

logic slide : (int,counter_range_t) farray, int,
  int -> (int,counter_range_t) farray

axiom slide_eq :
  (forall a:(int,counter_range_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,counter_range_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> (int,counter_range_t) farray

axiom concat_def :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : counter_range_t, int -> (int,counter_range_t) farray

axiom singleton_def :
  (forall v:counter_range_t.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,counter_range_t) farray. forall a__first:int.
  forall a__last:int. forall b:(int,counter_range_t) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and
  (to_rep((a[temp___idx_153])) = to_rep((b[((b__first - a__first) + temp___idx_153)])))) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep((a[temp___idx_153])) = to_rep((b[((b__first - a__first) + temp___idx_153)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep((a[temp___idx_153])) = to_rep((b[((b__first - a__first) + temp___idx_153)])))))))))

logic compare : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type map__ref1 = { map__content1 : (int,bool) farray
}

logic slide1 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq1 :
  (forall a:(int,bool) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : bool, int -> (int,bool) farray

axiom singleton_def1 :
  (forall v:bool.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)]))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)])))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)]))))))))

logic compare1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic program_phase : int

logic attr__ATTRIBUTE_ADDRESS : int

logic last_candidate : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic counters : (int,counter_range_t) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic to_rep1 : tcandidate_number_tB -> int

logic of_rep1 : int -> tcandidate_number_tB

axiom inversion_axiom1 :
  (forall x:tcandidate_number_tB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:tcandidate_number_tB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tcandidate_number_tB, tcandidate_number_tB -> bool

logic dummy4 : tcandidate_number_tB

type t59b__ref = { t59b__content : tcandidate_number_tB
}

function t59b__ref___projection(a: t59b__ref) : tcandidate_number_tB =
  (a).t59b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : tcandidate_number_tB, tcandidate_number_tB -> bool

logic dummy5 : tcandidate_number_tB

type t68b__ref = { t68b__content : tcandidate_number_tB
}

function t68b__ref___projection(a: t68b__ref) : tcandidate_number_tB =
  (a).t68b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : tcandidate_number_tB, tcandidate_number_tB -> bool

logic dummy6 : tcandidate_number_tB

type t73b__ref = { t73b__content : tcandidate_number_tB
}

function t73b__ref___projection(a: t73b__ref) : tcandidate_number_tB =
  (a).t73b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

logic winners : (int,bool) farray

logic latest_highest_score : int

logic i : int

logic j : int

logic i1 : int

logic temp___706 : (int,bool) farray

logic temp___705 : int

logic temp___704 : int

logic j1 : int

logic o : int

logic j2 : int

logic temp___700 : (int,bool) farray

logic temp___699 : int

logic k : int

logic o1 : int

logic o2 : (int,bool) farray

logic temp___711 : (int,bool) farray

logic temp___713 : (int,bool) farray

logic temp___710 : int

logic j3 : int

logic o3 : int

logic o4 : bool

logic o5 : int

logic j4 : int

logic o6 : int

logic o7 : bool

logic i2 : int

logic winner : int

logic i3 : int

logic o8 : int

logic o9 : bool

logic o10 : int

logic o11 : bool

logic o12 : bool

logic o13 : int

logic o14 : counter_range_t

logic o15 : int

logic j5 : int

logic result : (int,bool) farray

logic winners1 : (int,bool) farray

logic result1 : int

logic latest_highest_score1 : int

logic result2 : (int,bool) farray

logic winners2 : (int,bool) farray

logic result3 : int

logic i4 : int

logic winners3 : (int,bool) farray

logic latest_highest_score2 : int

logic i5 : int

logic j6 : int

logic result4 : bool

logic result5 : bool

logic result6 : int

logic j7 : int

logic winners4 : (int,bool) farray

logic j8 : int

logic result7 : (int,bool) farray

logic winners5 : (int,bool) farray

logic result8 : int

logic j9 : int

logic winners6 : (int,bool) farray

logic j10 : int

logic winners7 : (int,bool) farray

logic j11 : int

logic winners8 : (int,bool) farray

logic j12 : int

logic winners9 : (int,bool) farray

logic j13 : int

logic winners10 : (int,bool) farray

logic j14 : int

logic winners11 : (int,bool) farray

logic j15 : int

logic result9 : (int,bool) farray

logic winners12 : (int,bool) farray

logic result10 : int

logic latest_highest_score3 : int

logic result11 : (int,bool) farray

logic winners13 : (int,bool) farray

logic result12 : int

logic latest_highest_score4 : int

logic result13 : (int,bool) farray

logic winners14 : (int,bool) farray

logic winners15 : (int,bool) farray

logic latest_highest_score5 : int

logic j16 : int

logic winners16 : (int,bool) farray

logic latest_highest_score6 : int

logic j17 : int

logic result14 : int

logic i6 : int

logic winners17 : (int,bool) farray

logic latest_highest_score7 : int

logic i7 : int

logic j18 : int

logic winners18 : (int,bool) farray

logic latest_highest_score8 : int

logic i8 : int

logic j19 : int

logic winners19 : (int,bool) farray

logic latest_highest_score9 : int

logic i9 : int

logic j20 : int

logic winners20 : (int,bool) farray

logic latest_highest_score10 : int

logic i10 : int

logic j21 : int

logic winners21 : (int,bool) farray

logic latest_highest_score11 : int

logic i11 : int

logic j22 : int

logic winners22 : (int,bool) farray

logic latest_highest_score12 : int

logic i12 : int

logic j23 : int

logic winners23 : (int,bool) farray

logic latest_highest_score13 : int

logic i13 : int

logic j24 : int

logic winners24 : (int,bool) farray

logic latest_highest_score14 : int

logic i14 : int

logic j25 : int

logic result15 : int

logic i15 : int

logic winners25 : (int,bool) farray

logic i16 : int

logic result16 : bool

logic result17 : bool

logic result18 : (int,bool) farray

logic winners26 : (int,bool) farray

logic result19 : int

logic i17 : int

logic winners27 : (int,bool) farray

logic i18 : int

logic winners28 : (int,bool) farray

logic i19 : int

logic winners29 : (int,bool) farray

logic i20 : int

logic winners30 : (int,bool) farray

logic i21 : int

logic winners31 : (int,bool) farray

logic i22 : int

logic winners32 : (int,bool) farray

logic i23 : int

logic winners33 : (int,bool) farray

logic i24 : int

logic winners34 : (int,bool) farray

logic i25 : int

logic winners35 : (int,bool) farray

logic latest_highest_score15 : int

logic i26 : int

logic j26 : int

logic i27 : int

logic winners36 : (int,bool) farray

logic latest_highest_score16 : int

logic i28 : int

logic j27 : int

logic i29 : int

logic result20 : bool

logic result21 : bool

logic result22 : bool

logic result23 : bool

axiom H : in_range1(program_phase)

axiom H1 : in_range4(last_candidate)

axiom H2 : (program_phase = 2)

axiom H3 : ((0 <= 20) -> in_range4(latest_highest_score))

axiom H4 : true

axiom H5 : (result = winners)

axiom H6 : (winners1 = (winners[0 <- of_int(0)]))

axiom H7 : (result1 = latest_highest_score)

axiom H8 : (latest_highest_score1 = 1)

axiom H9 : (winners1 = result2)

axiom H10 : (winners2 = (winners1[latest_highest_score1 <- of_int(1)]))

axiom H11 : (result3 = i)

axiom H12 : (i4 = 2)

axiom H13 : (((2 <= i4) and (i4 <= last_candidate)) ->
  (((temp___706 = winners2) and ((temp___705 = latest_highest_score1) and
  ((temp___704 = i4) and ((((((not ((winners3[0]) = true)) and
  (latest_highest_score2 <  i5)) and
  ((winners3[latest_highest_score2]) = true)) and
  (forall j28:int. (((1 <= j28) and (j28 <= (i5 - 1))) ->
  ((latest_highest_score2 <  j28) ->
  (to_rep((counters[j28])) <  to_rep((counters[latest_highest_score2]))))))) and
  (forall j28:int. (((1 <= j28) and (j28 <= (i5 - 1))) ->
  ((((winners3[j28]) = true) ->
  (to_rep((counters[latest_highest_score2])) = to_rep((counters[j28])))) and
  ((not ((winners3[j28]) = true)) ->
  (to_rep((counters[j28])) <  to_rep((counters[latest_highest_score2])))))))) and
  (((((2 <= last_candidate) -> dynamic_property(2, last_candidate, i5)) and
  ((0 <= 20) -> in_range4(latest_highest_score2))) and ((2 <= i5) and
  (i5 <= last_candidate))) and
  ((((to_rep((counters[latest_highest_score2])) <  to_rep((counters[i5]))) ->
  (((((j6 = result6) and (j7 = 0)) and ((((0 <= j7) and (j7 <= (i5 - 1))) ->
  ((((temp___700 = winners3) and ((temp___699 = j7) and
  ((forall k1:int. (((0 <= k1) and (k1 <= (j8 - 1))) ->
   (not ((winners4[k1]) = true)))) and (((((0 <= (i5 - 1)) ->
  dynamic_property1(0, (i5 - 1), j8)) and
  (forall temp___701:int. (((0 <= temp___701) and (temp___701 <= 20)) ->
  ((j8 <= temp___701) ->
  ((winners4[temp___701]) = (temp___700[temp___701])))))) and ((0 <= j8) and
  (j8 <= (i5 - 1)))) and ((((((0 <= j8) and (j8 <= 20)) and (o1 = j8)) and
  (o2 = (winners4[o1 <- of_int(0)]))) and ((winners4 = result7) and
  (winners5 = o2))) and (j8 = (i5 - 1))))))) and (((j8 = j12) and
  (winners5 = winners8)) and ((j13 = j8) and (winners9 = winners5)))) and
  (((j14 = j12) and (winners10 = winners8)) and ((j15 = j13) and
  (winners11 = winners9))))) and ((not ((0 <= j7) and (j7 <= (i5 - 1)))) ->
  (((j7 = j14) and (winners3 = winners10)) and ((j15 = j7) and
  (winners11 = winners3)))))) and (((result9 = winners10) and
  (winners12 = (winners10[i5 <- of_int(1)]))) and
  ((latest_highest_score2 = result10) and (latest_highest_score3 = i5)))) and
  (((j16 = j14) and ((latest_highest_score5 = latest_highest_score3) and
  (winners15 = winners12))) and ((j17 = j15) and
  ((latest_highest_score6 = latest_highest_score3) and
  (winners16 = winners12)))))) and
  ((not (to_rep((counters[latest_highest_score2])) <  to_rep((counters[i5])))) ->
  ((((to_rep((counters[i5])) = to_rep((counters[latest_highest_score2]))) ->
  (((winners3 = result11) and (winners13 = (winners3[i5 <- of_int(1)]))) and
  ((result12 = latest_highest_score2) and (latest_highest_score4 = i5)))) and
  ((not (to_rep((counters[i5])) = to_rep((counters[latest_highest_score2])))) ->
  (((result13 = winners3) and (winners14 = (winners3[i5 <- of_int(0)]))) and
  ((latest_highest_score4 = latest_highest_score2) and
  (winners13 = winners14))))) and (((j16 = j6) and
  ((latest_highest_score5 = latest_highest_score4) and
  (winners15 = winners13))) and ((j17 = j6) and
  ((latest_highest_score6 = latest_highest_score4) and
  (winners16 = winners13))))))) and (i5 = last_candidate))))))) and
  (((j22 = j16) and ((i11 = i5) and
  ((latest_highest_score11 = latest_highest_score5) and
  (winners21 = winners15)))) and ((j23 = j17) and ((i12 = i5) and
  ((latest_highest_score12 = latest_highest_score6) and
  (winners22 = winners16)))))))

axiom H14 : (((2 <= i4) and (i4 <= last_candidate)) -> (j24 = j22))

axiom H15 : (((2 <= i4) and (i4 <= last_candidate)) -> (i13 = i11))

axiom H16 : (((2 <= i4) and (i4 <= last_candidate)) ->
  (latest_highest_score13 = latest_highest_score11))

axiom H17 : (((2 <= i4) and (i4 <= last_candidate)) ->
  (winners23 = winners21))

axiom H18 : (((2 <= i4) and (i4 <= last_candidate)) -> (j25 = j23))

axiom H19 : (((2 <= i4) and (i4 <= last_candidate)) -> (i14 = i12))

axiom H20 : (((2 <= i4) and (i4 <= last_candidate)) ->
  (latest_highest_score14 = latest_highest_score12))

axiom H21 : (((2 <= i4) and (i4 <= last_candidate)) ->
  (winners24 = winners22))

axiom H22 : ((not ((2 <= i4) and (i4 <= last_candidate))) -> (j24 = j))

axiom H23 : ((not ((2 <= i4) and (i4 <= last_candidate))) -> (i13 = i4))

axiom H24 : ((not ((2 <= i4) and (i4 <= last_candidate))) ->
  (latest_highest_score13 = latest_highest_score1))

axiom H25 : ((not ((2 <= i4) and (i4 <= last_candidate))) ->
  (winners23 = winners2))

axiom H26 : ((not ((2 <= i4) and (i4 <= last_candidate))) -> (j25 = j5))

axiom H27 : ((not ((2 <= i4) and (i4 <= last_candidate))) -> (i14 = i4))

axiom H28 : ((not ((2 <= i4) and (i4 <= last_candidate))) ->
  (latest_highest_score14 = latest_highest_score1))

axiom H29 : ((not ((2 <= i4) and (i4 <= last_candidate))) ->
  (winners24 = winners2))

axiom H30 : (result15 = i1)

axiom H31 : (i15 = (last_candidate + 1))

axiom H32 : ((last_candidate + 1) <= i15)

axiom H33 : (i15 <= 20)

axiom H34 :
  ((forall j28:int. ((((last_candidate + 1) <= j28) and
   (j28 <= (i16 - 1))) -> (not ((winners25[j28]) = true)))) and
  (forall j28:int. (((0 <= j28) and (j28 <= last_candidate)) ->
  (((winners25[j28]) = true) <-> ((winners23[j28]) = true)))))

axiom H35 : (((((last_candidate + 1) <= 20) ->
  dynamic_property2((last_candidate + 1), 20, i16)) and
  (forall temp___712:int. (((0 <= temp___712) and (temp___712 <= 20)) ->
  ((i16 <= temp___712) ->
  ((winners25[temp___712]) = (winners23[temp___712])))))) and
  (((last_candidate + 1) <= i16) and (i16 <= 20)))

axiom H36 : ((o6 = (i16 - 1)) and in_range3((i16 - 1)))

axiom H37 : (((j4 <= o6) -> (o7 = true)) and ((not (j4 <= o6)) ->
  (o7 = false)))

axiom H38 : ((((last_candidate + 1) <= j4) -> (result17 = o7)) and
  ((not ((last_candidate + 1) <= j4)) -> (result17 = false)))

axiom H39 : ((result16 = true) <->
  (forall j28:int. ((((last_candidate + 1) <= j28) and (j28 <= (i16 - 1))) ->
  (not ((winners25[j28]) = true)))))

axiom H40 : (result16 = true)

axiom H41 : (0 <= j3)

axiom H42 : (j3 <= last_candidate)

axiom H43 : ((0 <= j3) and (j3 <= 20))

axiom H44 : (o3 = j3)

axiom H45 : (o4 = (winners23[o3]))

axiom H46 : (o5 = to_int(o4))

 (* File "evoting.ads", line 48, characters 0-0 *)
goal WP_parameter_def : (0 <= j3)
