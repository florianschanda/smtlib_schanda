(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort algorithmt 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (algorithmt algorithmt) Bool)
(declare-const dummy algorithmt)
(declare-datatypes () ((algorithmt__ref (mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt (algorithmt__content a))
(declare-fun to_rep (algorithmt) Int)
(declare-fun of_rep (Int) algorithmt)
(assert (forall ((x algorithmt)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x algorithmt)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort namecountt 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 40)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (namecountt namecountt) Bool)
(declare-const dummy1 namecountt)
(declare-datatypes () ((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt (namecountt__content a))
(declare-fun to_rep1 (namecountt) Int)
(declare-fun of_rep1 (Int) namecountt)
(assert (forall ((x namecountt)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x namecountt)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep2 (character) Int)
(declare-fun of_rep2 (Int) character)
(assert (forall ((x character)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep2 (select a temp___idx_78)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep2 (select a temp___idx_78)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy3 (Array Int character))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int character) (Array Int character)) Bool)
(declare-sort issueridt 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (issueridt issueridt) Bool)
(declare-const dummy4 issueridt)
(declare-datatypes () ((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt (issueridt__content a))
(declare-fun to_rep3 (issueridt) Int)
(declare-fun of_rep3 (Int) issueridt)
(assert (forall ((x issueridt)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x issueridt)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__cryptotypes__issuert__id issueridt) (rec__cryptotypes__issuert__namelength namecountt) (rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt (rec__cryptotypes__issuert__id a))
(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt (rec__cryptotypes__issuert__namelength a))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) (rec__cryptotypes__issuert__name a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep3 (rec__cryptotypes__issuert__id (us_split_fields1 a))) (to_rep3 (rec__cryptotypes__issuert__id (us_split_fields1 b)))) (= (to_rep1 (rec__cryptotypes__issuert__namelength (us_split_fields1 a))) (to_rep1 (rec__cryptotypes__issuert__namelength (us_split_fields1 b))))) (= (bool_eq (rec__cryptotypes__issuert__name (us_split_fields1 a)) 1 40 (rec__cryptotypes__issuert__name (us_split_fields1 b)) 1 40) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const cryptotypes__issuert__id__first__bit Int)
(declare-const cryptotypes__issuert__id__last__bit Int)
(declare-const cryptotypes__issuert__id__position Int)
(assert (<= 0 cryptotypes__issuert__id__first__bit))
(assert (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))
(assert (<= 0 cryptotypes__issuert__id__position))
(declare-const cryptotypes__issuert__namelength__first__bit Int)
(declare-const cryptotypes__issuert__namelength__last__bit Int)
(declare-const cryptotypes__issuert__namelength__position Int)
(assert (<= 0 cryptotypes__issuert__namelength__first__bit))
(assert (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))
(assert (<= 0 cryptotypes__issuert__namelength__position))
(declare-const cryptotypes__issuert__name__first__bit Int)
(declare-const cryptotypes__issuert__name__last__bit Int)
(declare-const cryptotypes__issuert__name__position Int)
(assert (<= 0 cryptotypes__issuert__name__first__bit))
(assert (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))
(assert (<= 0 cryptotypes__issuert__name__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((issuert__ref (mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content a))
(declare-sort serialnumbert 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (serialnumbert serialnumbert) Bool)
(declare-const dummy6 serialnumbert)
(declare-datatypes () ((serialnumbert__ref (mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert (serialnumbert__content a))
(declare-fun to_rep4 (serialnumbert) Int)
(declare-fun of_rep4 (Int) serialnumbert)
(assert (forall ((x serialnumbert)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x serialnumbert)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__certtypes__idt__issuer us_rep) (rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields2)) us_rep (rec__certtypes__idt__issuer a))
(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields2)) serialnumbert (rec__certtypes__idt__serialnumber a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq1 (rec__certtypes__idt__issuer (us_split_fields3 a)) (rec__certtypes__idt__issuer (us_split_fields3 b))) true) (= (to_rep4 (rec__certtypes__idt__serialnumber (us_split_fields3 a))) (to_rep4 (rec__certtypes__idt__serialnumber (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const certtypes__idt__issuer__first__bit Int)
(declare-const certtypes__idt__issuer__last__bit Int)
(declare-const certtypes__idt__issuer__position Int)
(assert (<= 0 certtypes__idt__issuer__first__bit))
(assert (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))
(assert (<= 0 certtypes__idt__issuer__position))
(declare-const certtypes__idt__serialnumber__first__bit Int)
(declare-const certtypes__idt__serialnumber__last__bit Int)
(declare-const certtypes__idt__serialnumber__position Int)
(assert (<= 0 certtypes__idt__serialnumber__first__bit))
(assert (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))
(assert (<= 0 certtypes__idt__serialnumber__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((idt__ref (mk_idt__ref (idt__content us_rep1)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep1 (idt__content a))
(declare-const nullid us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort privileget 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (privileget privileget) Bool)
(declare-const dummy8 privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep5 (privileget) Int)
(declare-fun of_rep5 (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x privileget)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-sort classt 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (classt classt) Bool)
(declare-const dummy9 classt)
(declare-datatypes () ((classt__ref (mk_classt__ref (classt__content classt)))))
(define-fun classt__ref___projection ((a classt__ref)) classt (classt__content a))
(declare-fun to_rep6 (classt) Int)
(declare-fun of_rep6 (Int) classt)
(assert (forall ((x classt)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x classt)) (! (in_range6 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__privtypes__clearancet__class classt)))))
(define-fun us_split_fields_Class__projection ((a us_split_fields4)) classt (rec__privtypes__clearancet__class a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___7__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep6 (rec__privtypes__clearancet__class (us_split_fields5 a))) (to_rep6 (rec__privtypes__clearancet__class (us_split_fields5 b)))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const privtypes__clearancet__class__first__bit Int)
(declare-const privtypes__clearancet__class__last__bit Int)
(declare-const privtypes__clearancet__class__position Int)
(assert (<= 0 privtypes__clearancet__class__first__bit))
(assert (< privtypes__clearancet__class__first__bit privtypes__clearancet__class__last__bit))
(assert (<= 0 privtypes__clearancet__class__position))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((clearancet__ref (mk_clearancet__ref (clearancet__content us_rep2)))))
(define-fun clearancet__ref___projection ((a clearancet__ref)) us_rep2 (clearancet__content a))
(declare-sort yearst 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (yearst yearst) Bool)
(declare-const dummy11 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep7 (yearst) Int)
(declare-fun of_rep7 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)))))
(assert (forall ((x yearst)) (! (in_range7 (to_rep7 x)) :pattern ((to_rep7 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7 (of_rep7 x))))))
(declare-sort monthst 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (monthst monthst) Bool)
(declare-const dummy12 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep8 (monthst) Int)
(declare-fun of_rep8 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)))))
(assert (forall ((x monthst)) (! (in_range8 (to_rep8 x)) :pattern ((to_rep8 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8 (of_rep8 x))))))
(declare-sort dayst 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq13 (dayst dayst) Bool)
(declare-const dummy13 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep9 (dayst) Int)
(declare-fun of_rep9 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)))))
(assert (forall ((x dayst)) (! (in_range9 (to_rep9 x)) :pattern ((to_rep9 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9 (of_rep9 x))))))
(declare-sort millisecst 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq14 (millisecst millisecst) Bool)
(declare-const dummy14 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep10 (millisecst) Int)
(declare-fun of_rep10 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)))))
(assert (forall ((x millisecst)) (! (in_range10 (to_rep10 x)) :pattern ((to_rep10 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10 (of_rep10 x))))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__2__projection ((a us_split_fields6)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__2__projection ((a us_split_fields6)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__2__projection ((a us_split_fields6)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields6)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___16__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___16__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (= (to_rep7 (rec__clock__timet__year (us_split_fields7 a))) (to_rep7 (rec__clock__timet__year (us_split_fields7 b)))) (= (to_rep8 (rec__clock__timet__month (us_split_fields7 a))) (to_rep8 (rec__clock__timet__month (us_split_fields7 b))))) (= (to_rep9 (rec__clock__timet__day (us_split_fields7 a))) (to_rep9 (rec__clock__timet__day (us_split_fields7 b))))) (= (to_rep10 (rec__clock__timet__millisec (us_split_fields7 a))) (to_rep10 (rec__clock__timet__millisec (us_split_fields7 b))))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep3) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep3) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq15 (us_rep3 us_rep3) Bool)
(declare-const dummy15 us_rep3)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep3)))))
(define-fun timet__ref___2__projection ((a timet__ref)) us_rep3 (timet__content a))
(declare-const zerotime us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__cert__attr__auth__contentst__id us_rep1) (rec__cert__attr__auth__contentst__notbefore us_rep3) (rec__cert__attr__auth__contentst__notafter us_rep3) (rec__cert__attr__auth__contentst__mechanism algorithmt) (rec__cert__attr__auth__contentst__basecertid us_rep1) (rec__cert__attr__auth__contentst__role privileget) (rec__cert__attr__auth__contentst__clearance us_rep2)))))
(define-fun us_split_fields_ID__5__projection ((a us_split_fields8)) us_rep1 (rec__cert__attr__auth__contentst__id a))
(define-fun us_split_fields_NotBefore__4__projection ((a us_split_fields8)) us_rep3 (rec__cert__attr__auth__contentst__notbefore a))
(define-fun us_split_fields_NotAfter__4__projection ((a us_split_fields8)) us_rep3 (rec__cert__attr__auth__contentst__notafter a))
(define-fun us_split_fields_Mechanism__3__projection ((a us_split_fields8)) algorithmt (rec__cert__attr__auth__contentst__mechanism a))
(define-fun us_split_fields_BaseCertID__2__projection ((a us_split_fields8)) us_rep1 (rec__cert__attr__auth__contentst__basecertid a))
(define-fun us_split_fields_Role__2__projection ((a us_split_fields8)) privileget (rec__cert__attr__auth__contentst__role a))
(define-fun us_split_fields_Clearance__projection ((a us_split_fields8)) us_rep2 (rec__cert__attr__auth__contentst__clearance a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___23__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___24__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq5 ((a us_rep4) (b us_rep4)) Bool (ite (and (and (and (and (and (and (= (bool_eq2 (rec__cert__attr__auth__contentst__id (us_split_fields9 a)) (rec__cert__attr__auth__contentst__id (us_split_fields9 b))) true) (= (bool_eq4 (rec__cert__attr__auth__contentst__notbefore (us_split_fields9 a)) (rec__cert__attr__auth__contentst__notbefore (us_split_fields9 b))) true)) (= (bool_eq4 (rec__cert__attr__auth__contentst__notafter (us_split_fields9 a)) (rec__cert__attr__auth__contentst__notafter (us_split_fields9 b))) true)) (= (to_rep (rec__cert__attr__auth__contentst__mechanism (us_split_fields9 a))) (to_rep (rec__cert__attr__auth__contentst__mechanism (us_split_fields9 b))))) (= (bool_eq2 (rec__cert__attr__auth__contentst__basecertid (us_split_fields9 a)) (rec__cert__attr__auth__contentst__basecertid (us_split_fields9 b))) true)) (= (to_rep5 (rec__cert__attr__auth__contentst__role (us_split_fields9 a))) (to_rep5 (rec__cert__attr__auth__contentst__role (us_split_fields9 b))))) (= (bool_eq3 (rec__cert__attr__auth__contentst__clearance (us_split_fields9 a)) (rec__cert__attr__auth__contentst__clearance (us_split_fields9 b))) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep4) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep4) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))
(declare-const cert__attr__auth__contentst__id__first__bit Int)
(declare-const cert__attr__auth__contentst__id__last__bit Int)
(declare-const cert__attr__auth__contentst__id__position Int)
(assert (<= 0 cert__attr__auth__contentst__id__first__bit))
(assert (< cert__attr__auth__contentst__id__first__bit cert__attr__auth__contentst__id__last__bit))
(assert (<= 0 cert__attr__auth__contentst__id__position))
(declare-const cert__attr__auth__contentst__notbefore__first__bit Int)
(declare-const cert__attr__auth__contentst__notbefore__last__bit Int)
(declare-const cert__attr__auth__contentst__notbefore__position Int)
(assert (<= 0 cert__attr__auth__contentst__notbefore__first__bit))
(assert (< cert__attr__auth__contentst__notbefore__first__bit cert__attr__auth__contentst__notbefore__last__bit))
(assert (<= 0 cert__attr__auth__contentst__notbefore__position))
(declare-const cert__attr__auth__contentst__notafter__first__bit Int)
(declare-const cert__attr__auth__contentst__notafter__last__bit Int)
(declare-const cert__attr__auth__contentst__notafter__position Int)
(assert (<= 0 cert__attr__auth__contentst__notafter__first__bit))
(assert (< cert__attr__auth__contentst__notafter__first__bit cert__attr__auth__contentst__notafter__last__bit))
(assert (<= 0 cert__attr__auth__contentst__notafter__position))
(declare-const cert__attr__auth__contentst__mechanism__first__bit Int)
(declare-const cert__attr__auth__contentst__mechanism__last__bit Int)
(declare-const cert__attr__auth__contentst__mechanism__position Int)
(assert (<= 0 cert__attr__auth__contentst__mechanism__first__bit))
(assert (< cert__attr__auth__contentst__mechanism__first__bit cert__attr__auth__contentst__mechanism__last__bit))
(assert (<= 0 cert__attr__auth__contentst__mechanism__position))
(declare-const cert__attr__auth__contentst__basecertid__first__bit Int)
(declare-const cert__attr__auth__contentst__basecertid__last__bit Int)
(declare-const cert__attr__auth__contentst__basecertid__position Int)
(assert (<= 0 cert__attr__auth__contentst__basecertid__first__bit))
(assert (< cert__attr__auth__contentst__basecertid__first__bit cert__attr__auth__contentst__basecertid__last__bit))
(assert (<= 0 cert__attr__auth__contentst__basecertid__position))
(declare-const cert__attr__auth__contentst__role__first__bit Int)
(declare-const cert__attr__auth__contentst__role__last__bit Int)
(declare-const cert__attr__auth__contentst__role__position Int)
(assert (<= 0 cert__attr__auth__contentst__role__first__bit))
(assert (< cert__attr__auth__contentst__role__first__bit cert__attr__auth__contentst__role__last__bit))
(assert (<= 0 cert__attr__auth__contentst__role__position))
(declare-const cert__attr__auth__contentst__clearance__first__bit Int)
(declare-const cert__attr__auth__contentst__clearance__last__bit Int)
(declare-const cert__attr__auth__contentst__clearance__position Int)
(assert (<= 0 cert__attr__auth__contentst__clearance__first__bit))
(assert (< cert__attr__auth__contentst__clearance__first__bit cert__attr__auth__contentst__clearance__last__bit))
(assert (<= 0 cert__attr__auth__contentst__clearance__position))
(declare-fun user_eq16 (us_rep4 us_rep4) Bool)
(declare-const dummy16 us_rep4)
(declare-datatypes () ((contentst__ref (mk_contentst__ref (contentst__content us_rep4)))))
(define-fun contentst__ref___3__projection ((a contentst__ref)) us_rep4 (contentst__content a))
(declare-fun therole (us_rep4) Int)
(declare-fun therole__function_guard (Int us_rep4) Bool)
(define-fun dynamic_invariant ((temp___expr_545 Int) (temp___is_init_542 Bool) (temp___skip_constant_543 Bool) (temp___do_toplevel_544 Bool)) Bool (=> (or (= temp___is_init_542 true) (<= 0 3)) (in_range5 temp___expr_545)))
(assert (forall ((contents us_rep4)) (! (dynamic_invariant (therole contents) true false true) :pattern ((therole contents)))))
(assert (forall ((contents us_rep4)) (! (= (therole contents) (to_rep5 (rec__cert__attr__auth__contentst__role (us_split_fields9 contents)))) :pattern ((therole contents)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const nullcontents us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range2 temp___expr_63)))
(assert (= nullcontents (mk___rep4 (mk___split_fields4 nullid zerotime zerotime (of_rep 0) nullid (of_rep5 0) (mk___rep2 (mk___split_fields2 (of_rep6 0)))))))
(define-fun dynamic_invariant2 ((temp___expr_807 Int) (temp___is_init_804 Bool) (temp___skip_constant_805 Bool) (temp___do_toplevel_806 Bool)) Bool (=> (or (= temp___is_init_804 true) (<= 1901 2099)) (in_range7 temp___expr_807)))
(define-fun dynamic_invariant3 ((temp___expr_813 Int) (temp___is_init_810 Bool) (temp___skip_constant_811 Bool) (temp___do_toplevel_812 Bool)) Bool (=> (or (= temp___is_init_810 true) (<= 1 12)) (in_range8 temp___expr_813)))
(define-fun dynamic_invariant4 ((temp___expr_819 Int) (temp___is_init_816 Bool) (temp___skip_constant_817 Bool) (temp___do_toplevel_818 Bool)) Bool (=> (or (= temp___is_init_816 true) (<= 1 31)) (in_range9 temp___expr_819)))
(define-fun dynamic_invariant5 ((temp___expr_843 Int) (temp___is_init_840 Bool) (temp___skip_constant_841 Bool) (temp___do_toplevel_842 Bool)) Bool (=> (or (= temp___is_init_840 true) (<= 0 86399999)) (in_range10 temp___expr_843)))
(assert (= zerotime (mk___rep3 (mk___split_fields3 (of_rep7 1901) (of_rep8 1) (of_rep9 1) (of_rep10 0)))))
(define-fun dynamic_invariant6 ((temp___expr_319 Int) (temp___is_init_316 Bool) (temp___skip_constant_317 Bool) (temp___do_toplevel_318 Bool)) Bool (=> (or (= temp___is_init_316 true) (<= 0 40)) (in_range1 temp___expr_319)))
(declare-const blankname (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun cryptotypes__blankname__aggregate_def (Int) (Array Int character))
(assert (forall ((temp___134 Int)) (forall ((temp___135 Int)) (= (select (cryptotypes__blankname__aggregate_def temp___134) temp___135) (of_rep2 temp___134)))))
(assert (= blankname (cryptotypes__blankname__aggregate_def 32)))
(define-fun dynamic_invariant7 ((temp___expr_340 Int) (temp___is_init_337 Bool) (temp___skip_constant_338 Bool) (temp___do_toplevel_339 Bool)) Bool (=> (or (= temp___is_init_337 true) (<= 0 4294967295)) (in_range3 temp___expr_340)))
(declare-const nullissuer us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert (= nullissuer (mk___rep (mk___split_fields (of_rep3 0) (of_rep1 0) blankname))))
(define-fun dynamic_invariant8 ((temp___expr_362 Int) (temp___is_init_359 Bool) (temp___skip_constant_360 Bool) (temp___do_toplevel_361 Bool)) Bool (=> (or (= temp___is_init_359 true) (<= 0 10)) (in_range temp___expr_362)))
(define-fun dynamic_invariant9 ((temp___expr_557 Int) (temp___is_init_554 Bool) (temp___skip_constant_555 Bool) (temp___do_toplevel_556 Bool)) Bool (=> (or (= temp___is_init_554 true) (<= 0 5)) (in_range6 temp___expr_557)))
(define-fun dynamic_invariant10 ((temp___expr_453 Int) (temp___is_init_450 Bool) (temp___skip_constant_451 Bool) (temp___do_toplevel_452 Bool)) Bool (=> (or (= temp___is_init_450 true) (<= 0 4294967295)) (in_range4 temp___expr_453)))
(assert (= nullid (mk___rep1 (mk___split_fields1 nullissuer (of_rep4 0)))))
(declare-const contents__split_fields us_split_fields__ref4)
(declare-const o classt)
(declare-const o1 classt)
(declare-const o2 classt)
(declare-const o3 privileget)
(declare-const o4 algorithmt)
(declare-const o5 us_split_fields8)
(declare-const temp___1899 us_rep4)
(declare-const result us_split_fields__ref4)
(declare-const contents__split_fields1 us_split_fields8)
(declare-const contents__split_fields2 us_split_fields__ref4)
(declare-const contents__split_fields3 us_split_fields8)
(assert (= (to_rep6 o) 0))
(assert (= o o1))
(assert (= o2 o1))
(assert (= (to_rep5 o3) 0))
(assert (= (to_rep o4) 0))
(assert (= o5 (mk___split_fields4 nullid zerotime zerotime o4 nullid o3 (mk___rep2 (mk___split_fields2 o2)))))
(assert (= temp___1899 (mk___rep4 o5)))
(assert (= temp___1899 nullcontents))
(assert (= result contents__split_fields))
(assert (= (let ((subject contents__split_fields)) contents__split_fields1) (us_split_fields9 nullcontents)))
(assert (= contents__split_fields2 (let ((subject contents__split_fields)) (mk___split_fields__ref4 contents__split_fields1))))
(assert (= contents__split_fields3 contents__split_fields1))
(assert (not (= (therole (mk___rep4 (us_split_fields__content4 contents__split_fields2))) 0)))
(check-sat)
(exit)
