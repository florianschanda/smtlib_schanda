(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p__dot__x integer) (rec__p__dot__y integer)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer (rec__p__dot__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer (rec__p__dot__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__p__dot__x (us_split_fields1 a))) (to_rep (rec__p__dot__x (us_split_fields1 b)))) (= (to_rep (rec__p__dot__y (us_split_fields1 a))) (to_rep (rec__p__dot__y (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const p__dot__x__first__bit Int)
(declare-const p__dot__x__last__bit Int)
(declare-const p__dot__x__position Int)
(assert (<= 0 p__dot__x__first__bit))
(assert (< p__dot__x__first__bit p__dot__x__last__bit))
(assert (<= 0 p__dot__x__position))
(declare-const p__dot__y__first__bit Int)
(declare-const p__dot__y__last__bit Int)
(declare-const p__dot__y__position Int)
(assert (<= 0 p__dot__y__first__bit))
(assert (< p__dot__y__first__bit p__dot__y__last__bit))
(assert (<= 0 p__dot__y__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((dot__ref (mk_dot__ref (dot__content us_rep)))))
(define-fun dot__ref___projection ((a dot__ref)) us_rep (dot__content a))
(declare-sort color 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (color color) Bool)
(declare-const dummy2 color)
(declare-datatypes () ((color__ref (mk_color__ref (color__content color)))))
(define-fun color__ref___projection ((a color__ref)) color (color__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const dummy3 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__p__painting__plain (Array Int us_rep)) (rec__p__painting__shadow (Array Int us_rep))))))
(define-fun us_split_fields_Plain__projection ((a us_split_fields2)) (Array Int us_rep) (rec__p__painting__plain a))
(define-fun us_split_fields_Shadow__projection ((a us_split_fields2)) (Array Int us_rep) (rec__p__painting__shadow a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq1 (rec__p__painting__plain (us_split_fields3 a)) 0 2 (rec__p__painting__plain (us_split_fields3 b)) 0 2) true) (= (bool_eq1 (rec__p__painting__shadow (us_split_fields3 a)) 0 2 (rec__p__painting__shadow (us_split_fields3 b)) 0 2) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const p__painting__plain__first__bit Int)
(declare-const p__painting__plain__last__bit Int)
(declare-const p__painting__plain__position Int)
(assert (<= 0 p__painting__plain__first__bit))
(assert (< p__painting__plain__first__bit p__painting__plain__last__bit))
(assert (<= 0 p__painting__plain__position))
(declare-const p__painting__shadow__first__bit Int)
(declare-const p__painting__shadow__last__bit Int)
(declare-const p__painting__shadow__position Int)
(assert (<= 0 p__painting__shadow__first__bit))
(assert (< p__painting__shadow__first__bit p__painting__shadow__last__bit))
(assert (<= 0 p__painting__shadow__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((painting__ref (mk_painting__ref (painting__content us_rep1)))))
(define-fun painting__ref___projection ((a painting__ref)) us_rep1 (painting__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const d us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_168 Int) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool (=> (or (= temp___is_init_164 true) (<= 0 2)) (in_range2 temp___expr_168)))
(declare-const p__split_fields (Array Int us_rep))
(declare-const p__split_fields1 (Array Int us_rep))
(declare-const c Int)
(declare-const result Int)
(declare-const c1 Int)
(declare-const p__split_fields2 (Array Int us_rep))
(declare-const p__split_fields3 (Array Int us_rep))
(declare-const c2 Int)
(declare-const result1 (Array Int us_rep))
(declare-const result2 (Array Int us_rep))
(declare-const p__split_fields4 (Array Int us_rep))
(declare-const p__split_fields5 (Array Int us_rep))
(declare-const result3 Int)
(declare-const c3 Int)
(assert (exists ((c4 Int)) (and (and (<= 0 c4) (<= c4 2)) (= (bool_eq (select p__split_fields c4) d) true))))
(assert (= (mk_int__ref result) (mk_int__ref c)))
(assert (= c1 0))
(assert (<= 0 c1))
(assert (<= c1 2))
(assert (and (= (bool_eq1 p__split_fields2 0 2 p__split_fields 0 2) true) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- c2 1))) (=> (= (bool_eq (select p__split_fields2 j) d) true) (= (bool_eq (select p__split_fields3 j) d) true))))))
(assert (and (and (and (= p__split_fields2 p__split_fields) (forall ((temp___236 Int)) (=> (and (<= 0 temp___236) (<= temp___236 2)) (=> (or (< 2 temp___236) (or (< temp___236 0) (<= c2 temp___236))) (= (select p__split_fields3 temp___236) (select p__split_fields1 temp___236)))))) (=> (<= 0 2) (in_range2 c2))) (and (<= 0 c2) (<= c2 2))))
(assert (=> (= (bool_eq (select p__split_fields2 c2) d) true) (= result1 p__split_fields2)))
(assert (=> (= (bool_eq (select p__split_fields2 c2) d) true) (= result2 p__split_fields3)))
(assert (=> (= (bool_eq (select p__split_fields2 c2) d) true) (= p__split_fields2 p__split_fields4)))
(assert (=> (= (bool_eq (select p__split_fields2 c2) d) true) (= (store p__split_fields3 c2 d) p__split_fields5)))
(assert (=> (not (= (bool_eq (select p__split_fields2 c2) d) true)) (= (mk___split_fields1 p__split_fields4 p__split_fields5) (mk___split_fields1 p__split_fields2 p__split_fields3))))
(assert (not (= c2 2)))
(assert (= result3 c2))
(assert (= c3 (+ c2 1)))
(declare-const j Int)
(assert (<= 0 j))
(assert (<= j (- c3 1)))
(assert (= (bool_eq (select p__split_fields4 j) d) true))
(assert (not (= (bool_eq (select p__split_fields5 j) d) true)))
(check-sat)
(exit)
