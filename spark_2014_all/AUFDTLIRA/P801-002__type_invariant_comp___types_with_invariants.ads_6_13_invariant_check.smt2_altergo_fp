(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type us_split_fields = { rec__types_with_invariants__my_integer__sign : bool;
rec__types_with_invariants__my_integer__val : natural
}

function us_split_fields_Sign__projection(a: us_split_fields) : bool =
  (a).rec__types_with_invariants__my_integer__sign

function us_split_fields_Val__projection(a: us_split_fields) : natural =
  (a).rec__types_with_invariants__my_integer__val

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_fields1).rec__types_with_invariants__my_integer__sign = ((b).us_split_fields1).rec__types_with_invariants__my_integer__sign) and
  (to_rep(((a).us_split_fields1).rec__types_with_invariants__my_integer__val) = to_rep(((b).us_split_fields1).rec__types_with_invariants__my_integer__val))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_fields1).rec__types_with_invariants__my_integer__sign = ((b).us_split_fields1).rec__types_with_invariants__my_integer__sign) and
  (to_rep(((a).us_split_fields1).rec__types_with_invariants__my_integer__val) = to_rep(((b).us_split_fields1).rec__types_with_invariants__my_integer__val)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:natural. (0 <= object__size({ us_split_fields1 =
  { rec__types_with_invariants__my_integer__sign = a;
  rec__types_with_invariants__my_integer__val = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:natural. (0 <= object__alignment({
  us_split_fields1 = { rec__types_with_invariants__my_integer__sign = a;
  rec__types_with_invariants__my_integer__val = a1 } })))

logic types_with_invariants__my_integer__sign__first__bit : int

logic types_with_invariants__my_integer__sign__last__bit : int

logic types_with_invariants__my_integer__sign__position : int

axiom types_with_invariants__my_integer__sign__first__bit_axiom :
  (0 <= types_with_invariants__my_integer__sign__first__bit)

axiom types_with_invariants__my_integer__sign__last__bit_axiom :
  (types_with_invariants__my_integer__sign__first__bit <  types_with_invariants__my_integer__sign__last__bit)

axiom types_with_invariants__my_integer__sign__position_axiom :
  (0 <= types_with_invariants__my_integer__sign__position)

logic types_with_invariants__my_integer__val__first__bit : int

logic types_with_invariants__my_integer__val__last__bit : int

logic types_with_invariants__my_integer__val__position : int

axiom types_with_invariants__my_integer__val__first__bit_axiom :
  (0 <= types_with_invariants__my_integer__val__first__bit)

axiom types_with_invariants__my_integer__val__last__bit_axiom :
  (types_with_invariants__my_integer__val__first__bit <  types_with_invariants__my_integer__val__last__bit)

axiom types_with_invariants__my_integer__val__position_axiom :
  (0 <= types_with_invariants__my_integer__val__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : bool

logic dummy3 : natural

type my_integer__ref = { my_integer__content : us_rep
}

function my_integer__ref___projection(a: my_integer__ref) : us_rep =
  (a).my_integer__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq4 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:bool. forall v1:natural.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__types_with_invariants__my_integer__sign = v;
  rec__types_with_invariants__my_integer__val = v1 } }, i)[i])].
  ((singleton({ us_split_fields1 = {
  rec__types_with_invariants__my_integer__sign = v;
  rec__types_with_invariants__my_integer__val = v1 } }, i)[i]) = {
  us_split_fields1 = { rec__types_with_invariants__my_integer__sign = v;
  rec__types_with_invariants__my_integer__val = v1 } })))

logic bool_eq5 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq5(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t7s__ref = { t7s__content : integer
}

function t7s__ref___projection(a: t7s__ref) : integer = (a).t7s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy6 : (int,us_rep) farray

logic dummy7 : t

type t8s__ref = { t8s__content : us_t
}

function t8s__ref___projection(a: t8s__ref) : us_t = (a).t8s__content

type us_split_discrs = { rec__types_with_invariants__container__c : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__types_with_invariants__container__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__types_with_invariants__container__content :
us_t
}

function us_split_fields_Content__projection(a: us_split_fields2) : us_t =
  (a).rec__types_with_invariants__container__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__types_with_invariants__container__c) = to_rep(((b).us_split_discrs1).rec__types_with_invariants__container__c)) and
  (bool_eq8(((a).us_split_fields3).rec__types_with_invariants__container__content,
  ((b).us_split_fields3).rec__types_with_invariants__container__content) = true)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__types_with_invariants__container__c) = to_rep(((b).us_split_discrs1).rec__types_with_invariants__container__c)) and
  (bool_eq8(((a).us_split_fields3).rec__types_with_invariants__container__content,
  ((b).us_split_fields3).rec__types_with_invariants__container__content) = true))) ->
  (bool_eq9(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__types_with_invariants__container__c = a }; us_split_fields3 = {
  rec__types_with_invariants__container__content = { elts = a1; rt = a2 } }
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:(int,us_rep) farray. forall a2:t.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__types_with_invariants__container__c = a }; us_split_fields3 = {
  rec__types_with_invariants__container__content = { elts = a1; rt = a2 } }
  })))

logic types_with_invariants__container__c__first__bit : int

logic types_with_invariants__container__c__last__bit : int

logic types_with_invariants__container__c__position : int

axiom types_with_invariants__container__c__first__bit_axiom :
  (0 <= types_with_invariants__container__c__first__bit)

axiom types_with_invariants__container__c__last__bit_axiom :
  (types_with_invariants__container__c__first__bit <  types_with_invariants__container__c__last__bit)

axiom types_with_invariants__container__c__position_axiom :
  (0 <= types_with_invariants__container__c__position)

logic types_with_invariants__container__content__first__bit : int

logic types_with_invariants__container__content__last__bit : int

logic types_with_invariants__container__content__position : int

axiom types_with_invariants__container__content__first__bit_axiom :
  (0 <= types_with_invariants__container__content__first__bit)

axiom types_with_invariants__container__content__last__bit_axiom :
  (types_with_invariants__container__content__first__bit <  types_with_invariants__container__content__last__bit)

axiom types_with_invariants__container__content__position_axiom :
  (0 <= types_with_invariants__container__content__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy8 : natural

logic dummy9 : (int,us_rep) farray

logic dummy10 : t

type container__ref = { container__content : us_rep1
}

function container__ref___projection(a: container__ref) : us_rep1 =
  (a).container__content

logic c : natural

logic c1 : (int,us_rep) farray

logic c2 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic types_with_invariants__get__result : bool

logic types_with_invariants__get__result1 : natural

logic o : int

logic o1 : bool

logic o2 : natural

logic result : bool

logic result1 : natural

logic types_with_invariants__get__result2 : bool

logic types_with_invariants__get__result3 : natural

logic types_with_invariants__get__result4 : bool

logic types_with_invariants__get__result5 : natural

logic types_with_invariants__get__result6 : bool

logic types_with_invariants__get__result7 : natural

logic types_with_invariants__get__result8 : bool

logic types_with_invariants__get__result9 : natural

logic types_with_invariants__get__result10 : bool

logic types_with_invariants__get__result11 : natural

axiom H : (dynamic_property1(1, to_rep(c), to_rep1(first(c2)),
  to_rep1(last(c2))) and ((to_rep1(first(c2)) = 1) and
  (to_rep1(last(c2)) = to_rep(c))))

axiom H1 : in_range1(i)

axiom H2 :
  (forall temp___256:int. (((to_rep1(first(c2)) <= temp___256) and
  (temp___256 <= to_rep1(last(c2)))) ->
  ((to_rep((((c1[temp___256])).us_split_fields1).rec__types_with_invariants__my_integer__val) = 0) ->
  ((((c1[temp___256])).us_split_fields1).rec__types_with_invariants__my_integer__sign = true))))

axiom H3 : (i <= to_rep(c))

axiom H4 :
  (types_with_invariants__get__result4 = types_with_invariants__get__result2)

axiom H5 :
  (types_with_invariants__get__result5 = types_with_invariants__get__result3)

axiom H6 :
  ((types_with_invariants__get__result6 = types_with_invariants__get__result2) and
  (types_with_invariants__get__result7 = types_with_invariants__get__result3))

axiom H7 : ((to_rep1(first(c2)) <= i) and (i <= to_rep1(last(c2))))

axiom H8 : (o = i)

axiom H9 : ({ us_split_fields1 = {
  rec__types_with_invariants__my_integer__sign = o1;
  rec__types_with_invariants__my_integer__val = o2 } } = (c1[o]))

axiom H10 : (result = types_with_invariants__get__result)

axiom H11 : (result1 = types_with_invariants__get__result1)

axiom H12 : ((types_with_invariants__get__result2 = o1) and
  (types_with_invariants__get__result3 = o2))

axiom H13 :
  ((types_with_invariants__get__result8 = types_with_invariants__get__result4) and
  (types_with_invariants__get__result9 = types_with_invariants__get__result5))

axiom H14 :
  (types_with_invariants__get__result10 = types_with_invariants__get__result6)

axiom H15 :
  (types_with_invariants__get__result11 = types_with_invariants__get__result7)

axiom H16 : (to_rep(types_with_invariants__get__result9) = 0)

 (* File "types_with_invariants.ads", line 23, characters 0-0 *)
goal WP_parameter_def : (types_with_invariants__get__result8 = true)
