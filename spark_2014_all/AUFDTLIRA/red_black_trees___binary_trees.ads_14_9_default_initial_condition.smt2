(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort index_type 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort extended_index_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (extended_index_type extended_index_type) Bool)
(declare-const dummy1 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(declare-fun to_rep (extended_index_type) Int)
(declare-fun of_rep (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x extended_index_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort position_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (position_type position_type) Bool)
(declare-const dummy2 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep1 (position_type) Int)
(declare-fun of_rep1 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x position_type)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 a))) (to_rep (rec__binary_trees__cell__left (us_split_fields1 b)))) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 a))) (to_rep (rec__binary_trees__cell__right (us_split_fields1 b))))) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 a))) (to_rep (rec__binary_trees__cell__parent (us_split_fields1 b))))) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 a))) (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(define-fun default_initial_assumption ((temp___expr_307 (Array Int us_rep)) (temp___skip_top_level_308 Bool)) Bool (forall ((temp___309 Int)) (=> (and (<= 1 temp___309) (<= temp___309 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (select temp___expr_307 temp___309)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (select temp___expr_307 temp___309)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (select temp___expr_307 temp___309)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (select temp___expr_307 temp___309)))) 2)))))
(declare-const dummy4 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep))))))
(define-fun us_split_fields_S__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields2)) (Array Int us_rep) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields3 a))) (to_rep (rec__binary_trees__forest__s (us_split_fields3 b)))) (= (bool_eq1 (rec__binary_trees__forest__c (us_split_fields3 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields3 b)) 1 100) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep1)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep1 (forest__content a))
(declare-fun size (us_rep1) Int)
(declare-fun size__function_guard (Int us_rep1) Bool)
(declare-fun tree_structure (us_rep1) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep1) Bool)
(define-fun default_initial_assumption1 ((temp___expr_317 us_rep1) (temp___skip_top_level_318 Bool)) Bool (and (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields3 temp___expr_317))) 0) (forall ((temp___320 Int)) (=> (and (<= 1 temp___320) (<= temp___320 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_317)) temp___320)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_317)) temp___320)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_317)) temp___320)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_317)) temp___320)))) 2))))) (=> (not (= temp___skip_top_level_318 true)) (= (size temp___expr_317) 0))))
(define-fun type_invariant ((temp___323 us_rep1)) Bool (= (tree_structure temp___323) true))
(define-fun dynamic_invariant ((temp___expr_182 Int) (temp___is_init_178 Bool) (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool) (temp___do_typ_inv_181 Bool)) Bool (=> (or (= temp___is_init_178 true) (<= 0 100)) (in_range1 temp___expr_182)))
(assert (forall ((f us_rep1)) (! (=> (type_invariant f) (dynamic_invariant (size f) true false true true)) :pattern ((size f)))))
(assert (forall ((f us_rep1)) (! (= (size f) (to_rep (rec__binary_trees__forest__s (us_split_fields3 f)))) :pattern ((size f)))))
(define-fun default_initial_assumption2 ((temp___expr_299 us_rep) (temp___skip_top_level_300 Bool)) Bool (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 temp___expr_299))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 temp___expr_299))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 temp___expr_299))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 temp___expr_299))) 2)))
(assert true)
(assert (forall ((f us_rep1)) (! (= (= (tree_structure f) true) (and (and (and (and (and (and (and (and (forall ((i Int)) (=> (and (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields3 f))) 1) i) (<= i 100)) (= (bool_eq (let ((temp___439 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___439 i)) (mk___rep (mk___split_fields (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___440 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___440 i)))))) (<= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___440 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___440 i))))) (to_rep (rec__binary_trees__forest__s (us_split_fields3 f)))))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__left (us_split_fields1 (let ((temp___441 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___441 i)))))) (<= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (let ((temp___441 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___441 i))))) (to_rep (rec__binary_trees__forest__s (us_split_fields3 f)))))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__right (us_split_fields1 (let ((temp___442 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___442 i)))))) (<= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (let ((temp___442 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___442 i))))) (to_rep (rec__binary_trees__forest__s (us_split_fields3 f)))))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (let ((temp___444 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___444 i))))) 2) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___443 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___443 i))))) 0))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (let ((temp___449 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___449 i))))) 0)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (let ((temp___445 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___445 (to_rep (rec__binary_trees__cell__left (us_split_fields1 (let ((temp___446 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___446 i)))))))))) 0) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___447 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___447 (to_rep (rec__binary_trees__cell__left (us_split_fields1 (let ((temp___448 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___448 i)))))))))) i)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (let ((temp___454 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___454 i))))) 0)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (let ((temp___450 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___450 (to_rep (rec__binary_trees__cell__right (us_split_fields1 (let ((temp___451 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___451 i)))))))))) 1) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___452 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___452 (to_rep (rec__binary_trees__cell__right (us_split_fields1 (let ((temp___453 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___453 i)))))))))) i)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___457 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___457 i))))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (let ((temp___458 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___458 i))))) 0)) (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (let ((temp___455 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___455 (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___456 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___456 i)))))))))) i))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___461 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___461 i))))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (let ((temp___462 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___462 i))))) 1)) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (let ((temp___459 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___459 (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (let ((temp___460 (rec__binary_trees__forest__c (us_split_fields3 f)))) (select temp___460 i)))))))))) i)))))) :pattern ((tree_structure f)))))
(define-fun dynamic_invariant1 ((temp___expr_175 Int) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (or (= temp___is_init_171 true) (<= 1 100)) (in_range temp___expr_175)))
(define-fun dynamic_invariant2 ((temp___expr_189 Int) (temp___is_init_185 Bool) (temp___skip_constant_186 Bool) (temp___do_toplevel_187 Bool) (temp___do_typ_inv_188 Bool)) Bool (=> (or (= temp___is_init_185 true) (<= 0 2)) (in_range2 temp___expr_189)))
(declare-const temp___620 extended_index_type)
(declare-const temp___6201 (Array Int us_rep))
(assert (and (= (to_rep temp___620) 0) (default_initial_assumption temp___6201 false)))
(assert (not (= (size (mk___rep1 (mk___split_fields1 temp___620 temp___6201))) 0)))
(check-sat)
(exit)
