(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1023)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const values (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 1023)) (in_range2 temp___expr_159)))
(declare-const index Int)
(declare-const utility__search_for_zero__result Int)
(declare-const temp___175 Int)
(declare-const temp___176 Int)
(declare-const temp___174 Int)
(declare-const utility__search_for_zero__result1 Int)
(declare-const result Int)
(declare-const index1 Int)
(declare-const result1 Int)
(declare-const utility__search_for_zero__result2 Int)
(declare-const index2 Int)
(declare-const utility__search_for_zero__result3 Int)
(declare-const result2 Int)
(declare-const index3 Int)
(declare-const result3 Int)
(declare-const utility__search_for_zero__result4 Int)
(declare-const index4 Int)
(declare-const utility__search_for_zero__result5 Int)
(declare-const index5 Int)
(declare-const utility__search_for_zero__result6 Int)
(declare-const index6 Int)
(declare-const utility__search_for_zero__result7 Int)
(declare-const index7 Int)
(declare-const utility__search_for_zero__result8 Int)
(declare-const index8 Int)
(declare-const utility__search_for_zero__result9 Int)
(declare-const index9 Int)
(declare-const utility__search_for_zero__result10 Int)
(define-fun utility__search_for_zero__result11 () int__ref (mk_int__ref utility__search_for_zero__result7))
(declare-const result4 Int)
(assert (exists ((index10 Int)) (and (and (<= 0 index10) (<= index10 1023)) (= (to_rep (select values index10)) 0))))
(assert (= utility__search_for_zero__result11 (mk_int__ref utility__search_for_zero__result5)))
(assert (= (mk_int__ref index6) (mk_int__ref index4)))
(assert (= utility__search_for_zero__result8 utility__search_for_zero__result6))
(assert (= index7 index5))
(assert (= temp___175 0))
(assert (= temp___176 1023))
(assert (= (mk_int__ref result) (mk_int__ref index)))
(assert (= index1 temp___175))
(assert (<= temp___175 index1))
(assert (<= index1 temp___176))
(assert (= temp___174 index1))
(assert (or (and (and (and (= utility__search_for_zero__result2 utility__search_for_zero__result5) (= index1 index4)) (and (= utility__search_for_zero__result6 utility__search_for_zero__result2) (= index5 index1))) (and (= (to_rep (select values index1)) 0) (and (= result1 utility__search_for_zero__result) (= utility__search_for_zero__result2 index1)))) (and (and (not (= (to_rep (select values index1)) 0)) (and (= utility__search_for_zero__result2 utility__search_for_zero__result) (= utility__search_for_zero__result2 utility__search_for_zero__result1))) (and (and (and (= utility__search_for_zero__result4 utility__search_for_zero__result5) (= index3 index4)) (and (= utility__search_for_zero__result6 utility__search_for_zero__result4) (= index5 index3))) (and (exists ((j Int)) (and (and (<= (+ index2 1) j) (<= j 1023)) (= (to_rep (select values j)) 0))) (and (and (=> (<= 0 1023) (in_range2 index2)) (and (<= 0 index2) (<= index2 1023))) (and (not (= index2 temp___176)) (and (and (= index2 result2) (= index3 (+ index2 1))) (and (= (to_rep (select values index3)) 0) (and (= result3 utility__search_for_zero__result3) (= utility__search_for_zero__result4 index3)))))))))))
(assert (= (mk_int__ref utility__search_for_zero__result9) utility__search_for_zero__result11))
(assert (= index8 index6))
(assert (= utility__search_for_zero__result10 utility__search_for_zero__result8))
(assert (= index9 index7))
(assert (= result4 utility__search_for_zero__result9))
(assert (not (= (to_rep (select values utility__search_for_zero__result9)) 0)))
(check-sat)
(exit)
