(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort track_id 0)
(declare-fun track_idqtint (track_id) Int)
(assert (forall ((i track_id)) (and (<= 1 (track_idqtint i)) (<= (track_idqtint i) 8))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (track_id track_id) Bool)
(declare-const dummy track_id)
(declare-datatypes () ((track_id__ref (mk_track_id__ref (track_id__content track_id)))))
(define-fun track_id__ref___projection ((a track_id__ref)) track_id (track_id__content a))
(define-fun to_rep ((x track_id)) Int (track_idqtint x))
(declare-fun of_rep (Int) track_id)
(assert (forall ((x track_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x track_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort train_id 0)
(declare-fun train_idqtint (train_id) Int)
(assert (forall ((i train_id)) (and (<= 1 (train_idqtint i)) (<= (train_idqtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (train_id train_id) Bool)
(declare-const dummy1 train_id)
(declare-datatypes () ((train_id__ref (mk_train_id__ref (train_id__content train_id)))))
(define-fun train_id__ref___projection ((a train_id__ref)) train_id (train_id__content a))
(define-fun dynamic_invariant ((temp___expr_260 Int) (temp___is_init_256 Bool) (temp___skip_constant_257 Bool) (temp___do_toplevel_258 Bool) (temp___do_typ_inv_259 Bool)) Bool (=> (or (= temp___is_init_256 true) (<= 1 10)) (in_range2 temp___expr_260)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep1 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__trains__train_position__track_begin track_id) (rec__trains__train_position__pos_begin natural) (rec__trains__train_position__track_end track_id)))))
(define-fun us_split_fields_Track_Begin__projection ((a us_split_fields)) track_id (rec__trains__train_position__track_begin a))
(define-fun us_split_fields_Pos_Begin__projection ((a us_split_fields)) natural (rec__trains__train_position__pos_begin a))
(define-fun us_split_fields_Track_End__projection ((a us_split_fields)) track_id (rec__trains__train_position__track_end a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__trains__train_position__track_begin (us_split_fields1 a))) (to_rep (rec__trains__train_position__track_begin (us_split_fields1 b)))) (= (to_rep1 (rec__trains__train_position__pos_begin (us_split_fields1 a))) (to_rep1 (rec__trains__train_position__pos_begin (us_split_fields1 b))))) (= (to_rep (rec__trains__train_position__track_end (us_split_fields1 a))) (to_rep (rec__trains__train_position__track_end (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const trains__train_position__track_begin__first__bit Int)
(declare-const trains__train_position__track_begin__last__bit Int)
(declare-const trains__train_position__track_begin__position Int)
(assert (<= 0 trains__train_position__track_begin__first__bit))
(assert (< trains__train_position__track_begin__first__bit trains__train_position__track_begin__last__bit))
(assert (<= 0 trains__train_position__track_begin__position))
(declare-const trains__train_position__pos_begin__first__bit Int)
(declare-const trains__train_position__pos_begin__last__bit Int)
(declare-const trains__train_position__pos_begin__position Int)
(assert (<= 0 trains__train_position__pos_begin__first__bit))
(assert (< trains__train_position__pos_begin__first__bit trains__train_position__pos_begin__last__bit))
(assert (<= 0 trains__train_position__pos_begin__position))
(declare-const trains__train_position__track_end__first__bit Int)
(declare-const trains__train_position__track_end__last__bit Int)
(declare-const trains__train_position__track_end__position Int)
(assert (<= 0 trains__train_position__track_end__first__bit))
(assert (< trains__train_position__track_end__first__bit trains__train_position__track_end__last__bit))
(assert (<= 0 trains__train_position__track_end__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((train_position__ref (mk_train_position__ref (train_position__content us_rep)))))
(define-fun train_position__ref___projection ((a train_position__ref)) us_rep (train_position__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_204 Int)) (=> (and (<= a__first temp___idx_204) (<= temp___idx_204 a__last)) (= (bool_eq (select a temp___idx_204) (select b (+ (- b__first a__first) temp___idx_204))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_204 Int)) (=> (and (<= a__first temp___idx_204) (<= temp___idx_204 a__last)) (= (bool_eq (select a temp___idx_204) (select b (+ (- b__first a__first) temp___idx_204))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_234 Int) (temp___is_init_230 Bool) (temp___skip_constant_231 Bool) (temp___do_toplevel_232 Bool) (temp___do_typ_inv_233 Bool)) Bool (=> (or (= temp___is_init_230 true) (<= 1 8)) (in_range1 temp___expr_234)))
(declare-const cur_num_trains Int)
(declare-const trains (Array Int us_rep))
(declare-const train Int)
(declare-const other_train Int)
(declare-const o Int)
(declare-const o1 track_id)
(declare-const o2 natural)
(declare-const o3 track_id)
(declare-const o4 track_id)
(declare-const o5 natural)
(declare-const o6 track_id)
(declare-const o7 track_id)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 track_id)
(declare-const o11 natural)
(declare-const o12 track_id)
(declare-const o13 track_id)
(declare-const o14 natural)
(declare-const o15 track_id)
(declare-const o16 track_id)
(declare-const o17 Int)
(declare-const o18 track_id)
(declare-const o19 natural)
(declare-const o20 track_id)
(declare-const o21 us_split_fields)
(declare-const o22 track_id)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Bool)
(declare-const result Bool)
(assert (in_range2 cur_num_trains))
(assert (<= 1 train))
(assert (<= train cur_num_trains))
(assert (<= 1 other_train))
(assert (<= other_train cur_num_trains))
(assert (not (= other_train train)))
(assert (and (<= 1 other_train) (<= other_train 10)))
(assert (= o17 other_train))
(assert (= (mk___rep (mk___split_fields o18 o19 o20)) (select trains o17)))
(assert (= o21 (mk___split_fields o18 o19 o20)))
(assert (= o22 (rec__trains__train_position__track_begin o21)))
(assert (= o23 (to_rep o22)))
(assert (and (<= 1 train) (<= train 10)))
(assert (= o9 train))
(assert (= (mk___rep (mk___split_fields o10 o11 o12)) (select trains o9)))
(assert (= o10 o13))
(assert (= o11 o14))
(assert (= o12 o15))
(assert (= o16 o13))
(assert (= o24 (to_rep o16)))
(assert (= o25 (ite (= o24 o23) true false)))
(assert (= result (ite (not (= o25 true)) true false)))
(assert (= result true))
(assert (and (<= 1 other_train) (<= other_train 10)))
(assert (= o other_train))
(assert (= (mk___rep (mk___split_fields o1 o2 o3)) (select trains o)))
(assert (= o1 o4))
(assert (= o2 o5))
(assert (= o3 o6))
(assert (= o7 o6))
(assert (= o8 (to_rep o7)))
(assert (not (<= train 10)))
(check-sat)
(exit)
