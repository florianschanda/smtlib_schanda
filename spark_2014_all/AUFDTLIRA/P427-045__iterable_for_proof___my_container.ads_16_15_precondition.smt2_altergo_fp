(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type my_index

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : my_index, my_index -> bool

logic dummy1 : my_index

type my_index__ref = { my_index__content : my_index
}

function my_index__ref___projection(a: my_index__ref) : my_index =
  (a).my_index__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type us_split_fields = { rec__my_container__cursor__index : natural
}

function us_split_fields_Index__projection(a: us_split_fields) : natural =
  (a).rec__my_container__cursor__index

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((to_rep(((a).us_split_fields1).rec__my_container__cursor__index) = to_rep(((b).us_split_fields1).rec__my_container__cursor__index)) ->
  (bool_eq5(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__my_container__cursor__index) = to_rep(((b).us_split_fields1).rec__my_container__cursor__index))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. (0 <= object__size({ us_split_fields1 = {
  rec__my_container__cursor__index = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. (0 <= object__alignment({ us_split_fields1 = {
  rec__my_container__cursor__index = a } })))

logic my_container__cursor__index__first__bit : int

logic my_container__cursor__index__last__bit : int

logic my_container__cursor__index__position : int

axiom my_container__cursor__index__first__bit_axiom :
  (0 <= my_container__cursor__index__first__bit)

axiom my_container__cursor__index__last__bit_axiom :
  (my_container__cursor__index__first__bit <  my_container__cursor__index__last__bit)

axiom my_container__cursor__index__position_axiom :
  (0 <= my_container__cursor__index__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : natural

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref___projection(a: cursor__ref) : us_rep =
  (a).cursor__content

logic valid : int -> bool

logic valid__function_guard : bool, int -> prop

axiom valid__post_axiom : true

axiom valid__def_axiom :
  (forall e:int [valid(e)]. ((valid(e) = true) <-> (0 <  e)))

logic attr__ATTRIBUTE_ADDRESS : int

logic has_element : (int,natural) farray, us_rep -> bool

logic has_element__function_guard : bool, (int,natural) farray,
  us_rep -> prop

axiom has_element__post_axiom : true

axiom has_element__def_axiom :
  (forall c:(int,natural) farray.
  (forall p:natural [has_element(c, { us_split_fields1 = {
  rec__my_container__cursor__index = p } })]. ((has_element(c, {
  us_split_fields1 = { rec__my_container__cursor__index = p } }) = true) <->
  ((1 <= to_rep(p)) and (to_rep(p) <= 100)))))

logic element : (int,natural) farray, us_rep -> int

logic element__function_guard : int, (int,natural) farray, us_rep -> prop

axiom element__post_axiom :
  (forall c:(int,natural) farray.
  (forall p:natural [element(c, { us_split_fields1 = {
  rec__my_container__cursor__index = p } })]. ((has_element(c, {
  us_split_fields1 = { rec__my_container__cursor__index = p } }) = true) ->
  in_range1(element(c, { us_split_fields1 = {
  rec__my_container__cursor__index = p } })))))

axiom element__def_axiom :
  (forall c:(int,natural) farray.
  (forall p:natural [element(c, { us_split_fields1 = {
  rec__my_container__cursor__index = p } })]. (element(c, {
  us_split_fields1 = { rec__my_container__cursor__index = p }
  }) = to_rep((c[to_rep(p)])))))

type t2b

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : t2b, t2b -> bool

logic dummy3 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref___projection(a: t2b__ref) : t2b = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall c:(int,natural) farray. forall i:int. forall temp___199:int.
  forall temp___197:(int,natural) farray. forall o:natural.
  forall o1:(int,natural) farray. forall temp___203:natural. forall o2:bool.
  forall o3:bool. forall c1:(int,natural) farray. forall result:int.
  forall i1:int. forall result1:(int,natural) farray.
  forall c2:(int,natural) farray. forall c3:(int,natural) farray.
  forall i2:int. forall c4:(int,natural) farray. forall i3:int.
  forall c5:(int,natural) farray. forall i4:int.
  forall c6:(int,natural) farray. forall i5:int.
  forall c7:(int,natural) farray. forall i6:int.
  forall c8:(int,natural) farray. forall i7:int.
  forall c9:(int,natural) farray. forall i8:int. forall result2:bool. ((((({
  int__content = result } = { int__content = i }) and (i1 = 1)) and
  ((((1 <= i1) and (i1 <= 100)) and ((((temp___199 = i1) and
  ((temp___197 = c) and ((((to_rep((c[i1])) = 0) and (((to_rep(o) = 1) and
  (o1 = (c[i1 <- o]))) and (({ map__content = result1 } = { map__content = c
  }) and (c2 = o1)))) or ((not (to_rep((c[i1])) = 0)) and ((c2 = c) and
  (c2 = c1)))) and
  ((forall j:int. (((1 <= j) and (j <= i2)) ->
   (valid(to_rep((c3[j]))) = true))) and
  ((((forall temp___198:int. (((1 <= temp___198) and (temp___198 <= 100)) ->
     ((i2 <  temp___198) -> ((c3[temp___198]) = (temp___197[temp___198]))))) and
  ((1 <= 100) -> in_range3(i2))) and ((1 <= i2) and (i2 <= 100))) and
  (i2 = 100)))))) and (((i2 = i3) and (c3 = c4)) and ((i4 = i2) and
  (c5 = c3)))) and ((({ int__content = i5 } = { int__content = i3 }) and ({
  map__content = c6 } = { map__content = c4 })) and ((i6 = i4) and
  (c7 = c5))))) or ((not ((1 <= i1) and (i1 <= 100))) and (((i1 = i5) and ({
  map__content = c6 } = { map__content = c })) and ((i6 = i1) and
  (c7 = c1)))))) and ((({ int__content = i7 } = { int__content = i5 }) and ({
  map__content = c8 } = { map__content = c6 })) and ((i8 = i6) and
  (c9 = c7)))) -> ((((o2 = has_element(c8, { us_split_fields1 = {
  rec__my_container__cursor__index = temp___203 } })) and ((o2 = true) <->
  ((1 <= to_rep(temp___203)) and (to_rep(temp___203) <= 100)))) and
  ((o3 = true) and (result2 = match_bool(o3, o2, false)))) ->
  ((result2 = true) -> (has_element(c8, { us_split_fields1 = {
  rec__my_container__cursor__index = temp___203 } }) = true)))))
