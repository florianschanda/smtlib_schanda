(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type track_id

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : track_id, track_id -> bool

logic dummy : track_id

type track_id__ref = { track_id__content : track_id
}

function track_id__ref___projection(a: track_id__ref) : track_id =
  (a).track_id__content

logic to_rep : track_id -> int

logic of_rep : int -> track_id

axiom inversion_axiom :
  (forall x:track_id [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:track_id [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type train_id

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : train_id, train_id -> bool

logic dummy1 : train_id

type train_id__ref = { train_id__content : train_id
}

function train_id__ref___projection(a: train_id__ref) : train_id =
  (a).train_id__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__trains__train_position__track_begin : track_id;
rec__trains__train_position__pos_begin : natural;
rec__trains__train_position__track_end : track_id
}

function us_split_fields_Track_Begin__projection(a: us_split_fields) : track_id =
  (a).rec__trains__train_position__track_begin

function us_split_fields_Pos_Begin__projection(a: us_split_fields) : natural =
  (a).rec__trains__train_position__pos_begin

function us_split_fields_Track_End__projection(a: us_split_fields) : track_id =
  (a).rec__trains__train_position__track_end

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__trains__train_position__track_begin) = to_rep(((b).us_split_fields1).rec__trains__train_position__track_begin)) and
  (to_rep1(((a).us_split_fields1).rec__trains__train_position__pos_begin) = to_rep1(((b).us_split_fields1).rec__trains__train_position__pos_begin))) and
  (to_rep(((a).us_split_fields1).rec__trains__train_position__track_end) = to_rep(((b).us_split_fields1).rec__trains__train_position__track_end))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__trains__train_position__track_begin) = to_rep(((b).us_split_fields1).rec__trains__train_position__track_begin)) and
  (to_rep1(((a).us_split_fields1).rec__trains__train_position__pos_begin) = to_rep1(((b).us_split_fields1).rec__trains__train_position__pos_begin))) and
  (to_rep(((a).us_split_fields1).rec__trains__train_position__track_end) = to_rep(((b).us_split_fields1).rec__trains__train_position__track_end)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:track_id. forall a1:natural. forall a2:track_id.
  (0 <= object__size({ us_split_fields1 = {
  rec__trains__train_position__track_begin = a;
  rec__trains__train_position__pos_begin = a1;
  rec__trains__train_position__track_end = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:track_id. forall a1:natural. forall a2:track_id.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__trains__train_position__track_begin = a;
  rec__trains__train_position__pos_begin = a1;
  rec__trains__train_position__track_end = a2 } })))

logic trains__train_position__track_begin__first__bit : int

logic trains__train_position__track_begin__last__bit : int

logic trains__train_position__track_begin__position : int

axiom trains__train_position__track_begin__first__bit_axiom :
  (0 <= trains__train_position__track_begin__first__bit)

axiom trains__train_position__track_begin__last__bit_axiom :
  (trains__train_position__track_begin__first__bit <  trains__train_position__track_begin__last__bit)

axiom trains__train_position__track_begin__position_axiom :
  (0 <= trains__train_position__track_begin__position)

logic trains__train_position__pos_begin__first__bit : int

logic trains__train_position__pos_begin__last__bit : int

logic trains__train_position__pos_begin__position : int

axiom trains__train_position__pos_begin__first__bit_axiom :
  (0 <= trains__train_position__pos_begin__first__bit)

axiom trains__train_position__pos_begin__last__bit_axiom :
  (trains__train_position__pos_begin__first__bit <  trains__train_position__pos_begin__last__bit)

axiom trains__train_position__pos_begin__position_axiom :
  (0 <= trains__train_position__pos_begin__position)

logic trains__train_position__track_end__first__bit : int

logic trains__train_position__track_end__last__bit : int

logic trains__train_position__track_end__position : int

axiom trains__train_position__track_end__first__bit_axiom :
  (0 <= trains__train_position__track_end__first__bit)

axiom trains__train_position__track_end__last__bit_axiom :
  (trains__train_position__track_end__first__bit <  trains__train_position__track_end__last__bit)

axiom trains__train_position__track_end__position_axiom :
  (0 <= trains__train_position__track_end__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : track_id

logic dummy4 : natural

logic dummy5 : track_id

type train_position__ref = { train_position__content : us_rep
}

function train_position__ref___projection(a: train_position__ref) : us_rep =
  (a).train_position__content

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:track_id. forall v1:natural. forall v2:track_id.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__trains__train_position__track_begin = v;
  rec__trains__train_position__pos_begin = v1;
  rec__trains__train_position__track_end = v2 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__trains__train_position__track_begin = v;
  rec__trains__train_position__pos_begin = v1;
  rec__trains__train_position__track_end = v2 } }, i)[i]) = {
  us_split_fields1 = { rec__trains__train_position__track_begin = v;
  rec__trains__train_position__pos_begin = v1;
  rec__trains__train_position__track_end = v2 } })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_182:int. ((((a__first <= temp___idx_182) and
  (temp___idx_182 <= a__last)) and (bool_eq5((a[temp___idx_182]),
  (b[((b__first - a__first) + temp___idx_182)])) = true)) or
  (not ((a__first <= temp___idx_182) and (temp___idx_182 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_182:int. (((a__first <= temp___idx_182) and
  (temp___idx_182 <= a__last)) -> (bool_eq5((a[temp___idx_182]),
  (b[((b__first - a__first) + temp___idx_182)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_182:int. (((a__first <= temp___idx_182) and
  (temp___idx_182 <= a__last)) -> (bool_eq5((a[temp___idx_182]),
  (b[((b__first - a__first) + temp___idx_182)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic cur_num_trains : int

logic trains : (int,us_rep) farray

logic train : int

logic other_train : int

logic o : int

logic o1 : track_id

logic o2 : natural

logic o3 : track_id

logic o4 : track_id

logic o5 : natural

logic o6 : track_id

logic o7 : track_id

logic o8 : int

logic o9 : int

logic o10 : track_id

logic o11 : natural

logic o12 : track_id

logic o13 : track_id

logic o14 : natural

logic o15 : track_id

logic o16 : track_id

logic o17 : int

logic o18 : track_id

logic o19 : natural

logic o20 : track_id

logic o21 : track_id

logic o22 : natural

logic o23 : track_id

logic o24 : track_id

logic o25 : int

logic o26 : int

logic o27 : bool

logic o28 : int

logic o29 : track_id

logic o30 : natural

logic o31 : track_id

logic o32 : track_id

logic o33 : natural

logic o34 : track_id

logic o35 : track_id

logic o36 : int

logic o37 : track_id

logic o38 : natural

logic o39 : track_id

logic o40 : track_id

logic o41 : natural

logic o42 : track_id

logic o43 : track_id

logic o44 : int

logic o45 : int

logic o46 : bool

logic o47 : int

logic o48 : track_id

logic o49 : natural

logic o50 : track_id

logic o51 : track_id

logic o52 : natural

logic o53 : track_id

logic o54 : track_id

logic o55 : int

logic o56 : track_id

logic o57 : natural

logic o58 : track_id

logic o59 : track_id

logic o60 : natural

logic o61 : track_id

logic o62 : track_id

logic o63 : int

logic o64 : int

logic o65 : bool

logic result : bool

logic result1 : bool

logic result2 : bool

axiom H : in_range2(cur_num_trains)

axiom H1 : (1 <= train)

axiom H2 : (train <= cur_num_trains)

axiom H3 : (1 <= other_train)

axiom H4 : (other_train <= cur_num_trains)

axiom H5 : (not (other_train = train))

axiom H6 : ((1 <= other_train) and (other_train <= 10))

axiom H7 : (o55 = other_train)

axiom H8 : ({ us_split_fields1 = { rec__trains__train_position__track_begin =
  o56; rec__trains__train_position__pos_begin = o57;
  rec__trains__train_position__track_end = o58 } } = (trains[o55]))

axiom H9 : ((o59 = o56) and ((o60 = o57) and (o61 = o58)))

axiom H10 : (o62 = o59)

axiom H11 : (o63 = to_rep(o62))

axiom H12 : ((1 <= train) and (train <= 10))

axiom H13 : (o47 = train)

axiom H14 : ({ us_split_fields1 = {
  rec__trains__train_position__track_begin = o48;
  rec__trains__train_position__pos_begin = o49;
  rec__trains__train_position__track_end = o50 } } = (trains[o47]))

axiom H15 : (o48 = o51)

axiom H16 : (o49 = o52)

axiom H17 : (o50 = o53)

axiom H18 : (o54 = o51)

axiom H19 : (o64 = to_rep(o54))

axiom H20 : (((o64 = o63) -> (o65 = true)) and ((not (o64 = o63)) ->
  (o65 = false)))

axiom H21 : (((not (o65 = true)) -> (result2 = true)) and ((o65 = true) ->
  (result2 = false)))

axiom H22 : ((result2 = true) -> ((1 <= other_train) and
  (other_train <= 10)))

axiom H23 : ((result2 = true) -> (o36 = other_train))

axiom H24 : ((result2 = true) -> ({ us_split_fields1 = {
  rec__trains__train_position__track_begin = o37;
  rec__trains__train_position__pos_begin = o38;
  rec__trains__train_position__track_end = o39 } } = (trains[o36])))

axiom H25 : ((result2 = true) -> (o37 = o40))

axiom H26 : ((result2 = true) -> (o38 = o41))

axiom H27 : ((result2 = true) -> (o39 = o42))

axiom H28 : ((result2 = true) -> (o43 = o42))

axiom H29 : ((result2 = true) -> (o44 = to_rep(o43)))

axiom H30 : ((result2 = true) -> ((1 <= train) and (train <= 10)))

axiom H31 : ((result2 = true) -> (o28 = train))

axiom H32 : ((result2 = true) -> ({ us_split_fields1 = {
  rec__trains__train_position__track_begin = o29;
  rec__trains__train_position__pos_begin = o30;
  rec__trains__train_position__track_end = o31 } } = (trains[o28])))

axiom H33 : ((result2 = true) -> (o29 = o32))

axiom H34 : ((result2 = true) -> (o30 = o33))

axiom H35 : ((result2 = true) -> (o31 = o34))

axiom H36 : ((result2 = true) -> (o35 = o32))

axiom H37 : ((result2 = true) -> (o45 = to_rep(o35)))

axiom H38 : ((result2 = true) -> (((o45 = o44) -> (o46 = true)) and
  ((not (o45 = o44)) -> (o46 = false))))

axiom H39 : ((result2 = true) -> (((not (o46 = true)) ->
  (result1 = true)) and ((o46 = true) -> (result1 = false))))

axiom H40 : ((not (result2 = true)) -> (result1 = false))

axiom H41 : (result1 = true)

 (* File "trains.ads", line 91, characters 0-0 *)
goal WP_parameter_def : (1 <= other_train)
