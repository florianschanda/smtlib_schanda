(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq7 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___2__projection(a: file_type__ref) : us_rep =
  (a).file_type__content

type file_status

predicate in_range4(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : file_status, file_status -> bool

logic dummy6 : file_status

type file_status__ref = { file_status__content : file_status
}

function file_status__ref___2__projection(a: file_status__ref) : file_status =
  (a).file_status__content

logic to_rep2 : file_status -> int

logic of_rep2 : int -> file_status

axiom inversion_axiom2 :
  (forall x:file_status [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:file_status [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__spark__text_io__character_result__status :
file_status
}

function us_split_discrs___2__projection(a: us_split_discrs) : file_status =
  (a).rec__spark__text_io__character_result__status

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__spark__text_io__character_result__item :
character
}

function us_split_fields_Item__projection(a: us_split_fields) : character =
  (a).rec__spark__text_io__character_result__item

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___6__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___7__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep___8__projection(a: us_rep1) : bool = (a).attr__constrained

predicate spark__text_io__character_result__item__pred(a: us_rep1) =
  (to_rep2(((a).us_split_discrs1).rec__spark__text_io__character_result__status) = 1)

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((to_rep2(((a).us_split_discrs1).rec__spark__text_io__character_result__status) = to_rep2(((b).us_split_discrs1).rec__spark__text_io__character_result__status)) and
  (spark__text_io__character_result__item__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__spark__text_io__character_result__item) = to_rep(((b).us_split_fields1).rec__spark__text_io__character_result__item)))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs1).rec__spark__text_io__character_result__status) = to_rep2(((b).us_split_discrs1).rec__spark__text_io__character_result__status)) and
  (spark__text_io__character_result__item__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__spark__text_io__character_result__item) = to_rep(((b).us_split_fields1).rec__spark__text_io__character_result__item))))) ->
  (bool_eq9(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:file_status. forall a1:character. forall a2:bool.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__spark__text_io__character_result__status = a }; us_split_fields1 = {
  rec__spark__text_io__character_result__item = a1 }; attr__constrained = a2
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:file_status. forall a1:character. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__spark__text_io__character_result__status = a }; us_split_fields1 = {
  rec__spark__text_io__character_result__item = a1 }; attr__constrained = a2
  })))

logic spark__text_io__character_result__status__first__bit : int

logic spark__text_io__character_result__status__last__bit : int

logic spark__text_io__character_result__status__position : int

axiom spark__text_io__character_result__status__first__bit_axiom :
  (0 <= spark__text_io__character_result__status__first__bit)

axiom spark__text_io__character_result__status__last__bit_axiom :
  (spark__text_io__character_result__status__first__bit <  spark__text_io__character_result__status__last__bit)

axiom spark__text_io__character_result__status__position_axiom :
  (0 <= spark__text_io__character_result__status__position)

logic spark__text_io__character_result__item__first__bit : int

logic spark__text_io__character_result__item__last__bit : int

logic spark__text_io__character_result__item__position : int

axiom spark__text_io__character_result__item__first__bit_axiom :
  (0 <= spark__text_io__character_result__item__first__bit)

axiom spark__text_io__character_result__item__last__bit_axiom :
  (spark__text_io__character_result__item__first__bit <  spark__text_io__character_result__item__last__bit)

axiom spark__text_io__character_result__item__position_axiom :
  (0 <= spark__text_io__character_result__item__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy7 : file_status

logic dummy8 : character

logic dummy9 : bool

type character_result__ref = { character_result__content : us_rep1
}

function character_result__ref___projection(a: character_result__ref) : us_rep1 =
  (a).character_result__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic status : us_rep -> int

logic status__function_guard : int, us_rep -> prop

logic is_readable : us_rep -> bool

logic is_readable__function_guard : bool, us_rep -> prop

logic is_open : us_rep -> bool

logic is_open__function_guard : bool, us_rep -> prop

logic mode__2 : us_rep -> int

logic mode__2__function_guard : int, us_rep -> prop

axiom is_readable__def_axiom :
  (forall file:us_rep [is_readable(file)]. ((is_readable(file) = true) <->
  ((is_open(file) = true) and (mode__2(file) = 0))))

logic is_writable : us_rep -> bool

logic is_writable__function_guard : bool, us_rep -> prop

axiom is_writable__def_axiom :
  (forall file:us_rep [is_writable(file)]. ((is_writable(file) = true) <->
  ((is_open(file) = true) and ((mode__2(file) = 1) or (mode__2(file) = 2)))))

logic end_of_file : us_rep -> bool

logic end_of_file__function_guard : bool, us_rep -> prop

logic is_standard_file : us_rep -> bool

logic is_standard_file__function_guard : bool, us_rep -> prop

logic name : us_rep -> us_t

logic name__function_guard : us_t, us_rep -> prop

logic form : us_rep -> us_t

logic form__function_guard : us_t, us_rep -> prop

logic line_length__2 : us_rep -> int

logic line_length__2__function_guard : int, us_rep -> prop

logic page_length__2 : us_rep -> int

logic page_length__2__function_guard : int, us_rep -> prop

logic c__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___String_Literal_811 : unit -> (int,character) farray

axiom temp___String_Literal_811__def_axiom :
  (((((((((((((((((((((((to_rep((temp___String_Literal_811(void)[1])) = 69) and
  (to_rep((temp___String_Literal_811(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_811(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_811(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_811(void)[5])) = 114)) and
  (to_rep((temp___String_Literal_811(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_811(void)[7])) = 111)) and
  (to_rep((temp___String_Literal_811(void)[8])) = 110)) and
  (to_rep((temp___String_Literal_811(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_811(void)[10])) = 83)) and
  (to_rep((temp___String_Literal_811(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_811(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_811(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_811(void)[14])) = 100)) and
  (to_rep((temp___String_Literal_811(void)[15])) = 97)) and
  (to_rep((temp___String_Literal_811(void)[16])) = 114)) and
  (to_rep((temp___String_Literal_811(void)[17])) = 100)) and
  (to_rep((temp___String_Literal_811(void)[18])) = 95)) and
  (to_rep((temp___String_Literal_811(void)[19])) = 73)) and
  (to_rep((temp___String_Literal_811(void)[20])) = 110)) and
  (to_rep((temp___String_Literal_811(void)[21])) = 112)) and
  (to_rep((temp___String_Literal_811(void)[22])) = 117)) and
  (to_rep((temp___String_Literal_811(void)[23])) = 116))

logic temp___String_Literal_812 : unit -> (int,character) farray

axiom temp___String_Literal_812__def_axiom :
  ((((((((((((((((((((((((to_rep((temp___String_Literal_812(void)[1])) = 69) and
  (to_rep((temp___String_Literal_812(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_812(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_812(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_812(void)[5])) = 114)) and
  (to_rep((temp___String_Literal_812(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_812(void)[7])) = 111)) and
  (to_rep((temp___String_Literal_812(void)[8])) = 110)) and
  (to_rep((temp___String_Literal_812(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_812(void)[10])) = 83)) and
  (to_rep((temp___String_Literal_812(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_812(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_812(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_812(void)[14])) = 100)) and
  (to_rep((temp___String_Literal_812(void)[15])) = 97)) and
  (to_rep((temp___String_Literal_812(void)[16])) = 114)) and
  (to_rep((temp___String_Literal_812(void)[17])) = 100)) and
  (to_rep((temp___String_Literal_812(void)[18])) = 95)) and
  (to_rep((temp___String_Literal_812(void)[19])) = 79)) and
  (to_rep((temp___String_Literal_812(void)[20])) = 117)) and
  (to_rep((temp___String_Literal_812(void)[21])) = 116)) and
  (to_rep((temp___String_Literal_812(void)[22])) = 112)) and
  (to_rep((temp___String_Literal_812(void)[23])) = 117)) and
  (to_rep((temp___String_Literal_812(void)[24])) = 116))

type file_mode

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : file_mode, file_mode -> bool

logic dummy10 : file_mode

type file_mode__ref = { file_mode__content : file_mode
}

function file_mode__ref___3__projection(a: file_mode__ref) : file_mode =
  (a).file_mode__content

type count

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : count, count -> bool

logic dummy11 : count

type count__ref = { count__content : count
}

function count__ref___2__projection(a: count__ref) : count =
  (a).count__content

logic is_standard_input : us_rep -> bool

logic is_standard_input__function_guard : bool, us_rep -> prop

logic is_standard_output : us_rep -> bool

logic is_standard_output__function_guard : bool, us_rep -> prop

logic is_standard_error : us_rep -> bool

logic is_standard_error__function_guard : bool, us_rep -> prop

axiom is_standard_file__def_axiom :
  (forall file:us_rep [is_standard_file(file)].
  ((is_standard_file(file) = true) <-> (((is_standard_input(file) = true) or
  (is_standard_output(file) = true)) or (is_standard_error(file) = true))))

 (* File "spark-text_io.ads", line 80, characters 0-0 *)
goal WP_parameter_def :
  (forall standard_input:us_rep. forall standard_output:us_rep.
  forall standard_error:us_rep. forall c__split_discrs:file_status.
  forall o:bool. forall o1:int. forall result:bool.
  forall standard_input1:us_rep. forall standard_output1:us_rep.
  forall standard_error1:us_rep. forall standard_input2:us_rep.
  forall c__split_discrs1:file_status. forall result1:bool.
  (((((((is_readable(standard_input) = true) and
  (is_writable(standard_output) = true)) and
  (is_writable(standard_error) = true)) and (status(standard_input) = 1)) and
  (status(standard_output) = 1)) and (status(standard_error) = 1)) ->
  ((((is_readable(standard_input) = true) and
  (is_writable(standard_output) = true)) and
  (is_writable(standard_error) = true)) ->
  (((c__attr__constrained = false) and (to_rep2(c__split_discrs) = 3)) ->
  (((o = end_of_file(standard_input)) and (((not (o = true)) and
  (result = true)) or ((o = true) and (result = false)))) ->
  ((result = true) -> ((((is_writable(standard_error1) = true) and
  (is_writable(standard_output1) = true)) and
  (is_readable(standard_input1) = true)) ->
  (((((is_readable(standard_input2) = true) and
  (bool_eq5((name(standard_input2)).elts,
  to_rep1(first((name(standard_input2)).rt)),
  to_rep1(last((name(standard_input2)).rt)), (name(standard_input1)).elts,
  to_rep1(first((name(standard_input1)).rt)),
  to_rep1(last((name(standard_input1)).rt))) = true)) and
  (bool_eq5((form(standard_input2)).elts,
  to_rep1(first((form(standard_input2)).rt)),
  to_rep1(last((form(standard_input2)).rt)), (form(standard_input1)).elts,
  to_rep1(first((form(standard_input1)).rt)),
  to_rep1(last((form(standard_input1)).rt))) = true)) and
  ((is_standard_file(standard_input2) = true) <->
  (is_standard_file(standard_input1) = true))) ->
  ((not (to_rep2(c__split_discrs1) = 1)) ->
  ((((o1 = status(standard_error1)) and in_range4(o1)) and (((o1 = 1) and
  (result1 = true)) or ((not (o1 = 1)) and (result1 = false)))) ->
  ((result1 = true) -> (is_writable(standard_error1) = true))))))))))))
