(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-sort language_level 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (language_level language_level) Bool)
(declare-const dummy4 language_level)
(declare-datatypes () ((language_level__ref (mk_language_level__ref (language_level__content language_level)))))
(define-fun language_level__ref___projection ((a language_level__ref)) language_level (language_level__content a))
(define-fun dynamic_invariant1 ((temp___expr_552 Int) (temp___is_init_549 Bool) (temp___skip_constant_550 Bool) (temp___do_toplevel_551 Bool)) Bool (=> (or (= temp___is_init_549 true) (<= 0 1)) (in_range3 temp___expr_552)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const who us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun to_caml_char2 (us_t us_t Int) Bool)
(declare-fun to_caml_char2__function_guard (Bool us_t us_t Int) Bool)
(declare-fun to_camel_case (us_t) us_t)
(declare-fun to_camel_case__function_guard (us_t us_t) Bool)
(assert (forall ((str us_t)) (! (=> (dynamic_invariant str true true true) (let ((result (to_camel_case str))) (and (and (= (first1 result) (first1 str)) (and (= (last1 result) (last1 str)) (= (to_caml_char2 str result (last1 str)) true))) (dynamic_invariant result true false true)))) :pattern ((to_camel_case str)))))
(declare-const hello us_t)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp___String_Literal_151 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_151 us_void_param) 1)) 72) (= (to_rep (select (temp___String_Literal_151 us_void_param) 2)) 101)) (= (to_rep (select (temp___String_Literal_151 us_void_param) 3)) 108)) (= (to_rep (select (temp___String_Literal_151 us_void_param) 4)) 108)) (= (to_rep (select (temp___String_Literal_151 us_void_param) 5)) 111)) :pattern ((temp___String_Literal_151 us_void_param)))))
(declare-fun temp___String_Literal_152 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_152 us_void_param) 1)) 72) (= (to_rep (select (temp___String_Literal_152 us_void_param) 2)) 105)) :pattern ((temp___String_Literal_152 us_void_param)))))
(declare-const prefix us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp___String_Literal_153 (tuple0) (Array Int character))
(assert true)
(declare-fun temp___String_Literal_154 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_154 us_void_param) 1)) 32) :pattern ((temp___String_Literal_154 us_void_param)))))
(declare-fun temp___String_Literal_585 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_585 us_void_param) 1)) 33) :pattern ((temp___String_Literal_585 us_void_param)))))
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range2 temp___expr_63)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range4 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Bool)
(declare-fun to_lower (Int) Int)
(declare-fun to_lower__function_guard (Int Int) Bool)
(declare-fun to_upper (Int) Int)
(declare-fun to_upper__function_guard (Int Int) Bool)
(assert true)
(assert (forall ((str us_t) (res us_t)) (forall ((last2 Int)) (! (= (= (to_caml_char2 str res last2) true) (forall ((j Int)) (=> (and (<= (first1 str) j) (<= j last2)) (ite (= j (first1 str)) (= (to_rep (select (to_array res) j)) (to_upper (to_rep (select (to_array str) j)))) (ite (and (= (not (and (ite (<= 97 (to_rep (select (to_array str) (- j 1)))) true false) (ite (<= (to_rep (select (to_array str) (- j 1))) 122) true false))) true) (= (not (and (ite (<= 65 (to_rep (select (to_array str) (- j 1)))) true false) (ite (<= (to_rep (select (to_array str) (- j 1))) 90) true false))) true)) (= (to_rep (select (to_array res) j)) (to_upper (to_rep (select (to_array str) j)))) (= (to_rep (select (to_array res) j)) (to_lower (to_rep (select (to_array str) j))))))))) :pattern ((to_caml_char2 str res last2))))))
(assert (= prefix (ite (= (length who) 0) (of_array (temp___String_Literal_153 Tuple0) 1 0) (of_array (temp___String_Literal_154 Tuple0) 1 1))))
(assert (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true) (dynamic_invariant4 (to_lower item) true false true)) :pattern ((to_lower item)))))
(assert (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true) (dynamic_invariant4 (to_upper item) true false true)) :pattern ((to_upper item)))))
(declare-const g_lang_level Int)
(declare-const hello__say_hello__hello__assume (Array Int character))
(declare-const hello__say_hello__hello__assume1 t)
(declare-const hello__say_hello__prefix__assume (Array Int character))
(declare-const hello__say_hello__prefix__assume1 t)
(declare-const temp___584 (Array Int character))
(declare-const temp___5841 t)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const temp___583 (Array Int character))
(declare-const temp___5831 t)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const temp___586 (Array Int character))
(declare-const temp___5861 t)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(define-fun temp___5842 () us_t (mk___t temp___584 temp___5841))
(assert (in_range3 g_lang_level))
(assert (dynamic_invariant who true false true))
(assert (=> (= g_lang_level 0) (= (temp___String_Literal_151 Tuple0) hello__say_hello__hello__assume)))
(assert (=> (= g_lang_level 0) (= (mk 1 5) hello__say_hello__hello__assume1)))
(assert (=> (not (= g_lang_level 0)) (= (temp___String_Literal_152 Tuple0) hello__say_hello__hello__assume)))
(assert (=> (not (= g_lang_level 0)) (= (mk 1 2) hello__say_hello__hello__assume1)))
(assert (= (mk___t hello__say_hello__hello__assume hello__say_hello__hello__assume1) hello))
(assert (dynamic_invariant hello true false true))
(assert (=> (= (length who) 0) (= (temp___String_Literal_153 Tuple0) hello__say_hello__prefix__assume)))
(assert (=> (= (length who) 0) (= (mk 1 0) hello__say_hello__prefix__assume1)))
(assert (=> (not (= (length who) 0)) (= (temp___String_Literal_154 Tuple0) hello__say_hello__prefix__assume)))
(assert (=> (not (= (length who) 0)) (= (mk 1 1) hello__say_hello__prefix__assume1)))
(assert (= (mk___t hello__say_hello__prefix__assume hello__say_hello__prefix__assume1) prefix))
(assert (dynamic_invariant prefix true false true))
(assert (and (= temp___5842 (to_camel_case who)) (and (dynamic_invariant temp___5842 true false true) (and (= (to_rep1 (first temp___5841)) (to_rep1 (first (rt who)))) (and (= (to_rep1 (last temp___5841)) (to_rep1 (last (rt who)))) (= (to_caml_char2 who temp___5842 (to_rep1 (last (rt who)))) true))))))
(assert (=> (= (length hello) 0) (= (elts prefix) temp___583)))
(assert (=> (= (length hello) 0) (= (mk (to_rep1 (first (rt prefix))) (to_rep1 (last (rt prefix)))) temp___5831)))
(assert (=> (not (= (length hello) 0)) (=> (<= (to_rep1 (first (rt prefix))) (to_rep1 (last (rt prefix)))) (= o (+ (- (to_rep1 (last (rt prefix))) (to_rep1 (first (rt prefix)))) 1)))))
(assert (=> (not (= (length hello) 0)) (=> (not (<= (to_rep1 (first (rt prefix))) (to_rep1 (last (rt prefix))))) (= o 0))))
(assert (=> (not (= (length hello) 0)) (=> (<= (to_rep1 (first (rt hello))) (to_rep1 (last (rt hello)))) (= o1 (+ (- (to_rep1 (last (rt hello))) (to_rep1 (first (rt hello)))) 1)))))
(assert (=> (not (= (length hello) 0)) (=> (not (<= (to_rep1 (first (rt hello))) (to_rep1 (last (rt hello))))) (= o1 0))))
(assert (=> (not (= (length hello) 0)) (= o2 (+ o1 o))))
(assert (=> (not (= (length hello) 0)) (= o3 (+ (to_rep1 (first (rt hello))) o2))))
(assert (=> (not (= (length hello) 0)) (= o4 (- o3 1))))
(assert (=> (not (= (length hello) 0)) (and (= o5 o4) (in_range1 o4))))
(assert (=> (not (= (length hello) 0)) (= (concat1 (elts hello) (to_rep1 (first (rt hello))) (to_rep1 (last (rt hello))) (elts prefix) (to_rep1 (first (rt prefix))) (to_rep1 (last (rt prefix)))) temp___583)))
(assert (=> (not (= (length hello) 0)) (= (mk (to_rep1 (first (rt hello))) o5) temp___5831)))
(assert (=> (= (length (mk___t temp___583 temp___5831)) 0) (= temp___584 temp___586)))
(assert (=> (= (length (mk___t temp___583 temp___5831)) 0) (= (mk (to_rep1 (first temp___5841)) (to_rep1 (last temp___5841))) temp___5861)))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (=> (<= (to_rep1 (first temp___5841)) (to_rep1 (last temp___5841))) (= o6 (+ (- (to_rep1 (last temp___5841)) (to_rep1 (first temp___5841))) 1)))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (=> (not (<= (to_rep1 (first temp___5841)) (to_rep1 (last temp___5841)))) (= o6 0))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (=> (<= (to_rep1 (first temp___5831)) (to_rep1 (last temp___5831))) (= o7 (+ (- (to_rep1 (last temp___5831)) (to_rep1 (first temp___5831))) 1)))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (=> (not (<= (to_rep1 (first temp___5831)) (to_rep1 (last temp___5831)))) (= o7 0))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (= o8 (+ o7 o6))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (= o9 (+ (to_rep1 (first temp___5831)) o8))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (= o10 (- o9 1))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (and (= o11 o10) (in_range1 o10))))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (= (concat1 temp___583 (to_rep1 (first temp___5831)) (to_rep1 (last temp___5831)) temp___584 (to_rep1 (first temp___5841)) (to_rep1 (last temp___5841))) temp___586)))
(assert (=> (not (= (length (mk___t temp___583 temp___5831)) 0)) (= (mk (to_rep1 (first temp___5831)) o11) temp___5861)))
(assert (not (= (length (mk___t temp___586 temp___5861)) 0)))
(assert (=> (<= 1 1) (= o12 (+ (- 1 1) 1))))
(assert (=> (not (<= 1 1)) (= o12 0)))
(assert (=> (<= (to_rep1 (first temp___5861)) (to_rep1 (last temp___5861))) (= o13 (+ (- (to_rep1 (last temp___5861)) (to_rep1 (first temp___5861))) 1))))
(assert (=> (not (<= (to_rep1 (first temp___5861)) (to_rep1 (last temp___5861)))) (= o13 0)))
(assert (= o14 (+ o13 o12)))
(assert (= o15 (+ (to_rep1 (first temp___5861)) o14)))
(assert (= o16 (- o15 1)))
(assert (not (in_range1 o16)))
(check-sat)
(exit)
