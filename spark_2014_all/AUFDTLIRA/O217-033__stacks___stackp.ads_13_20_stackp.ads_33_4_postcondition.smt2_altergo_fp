(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type less_than_max

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : less_than_max, less_than_max -> bool

logic dummy1 : less_than_max

type less_than_max__ref = { less_than_max__content : less_than_max
}

function less_than_max__ref___projection(a: less_than_max__ref) : less_than_max =
  (a).less_than_max__content

logic to_rep : less_than_max -> int

logic of_rep : int -> less_than_max

axiom inversion_axiom :
  (forall x:less_than_max [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:less_than_max [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type telement_arrayD1

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : telement_arrayD1, telement_arrayD1 -> bool

logic dummy2 : telement_arrayD1

type telement_arrayD1__ref = { telement_arrayD1__content : telement_arrayD1
}

function telement_arrayD1__ref___projection(a: telement_arrayD1__ref) : telement_arrayD1 =
  (a).telement_arrayD1__content

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type element

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : element, element -> bool

logic dummy4 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

logic to_rep2 : element -> int

logic of_rep2 : int -> element

axiom inversion_axiom2 :
  (forall x:element [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:element [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,element) farray, int, int, (int,element) farray, int,
  int -> (int,element) farray

axiom concat_def :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : element, int -> (int,element) farray

axiom singleton_def :
  (forall v:element.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,element) farray, int, int, (int,element) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,element) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep2((a[temp___idx_132])) = to_rep2((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,element) farray, int, int, (int,element) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : (int,element) farray; rt : t
}

function to_array(a: us_t) : (int,element) farray = (a).elts

function of_array(a: (int,element) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,element) farray -> int

logic value__component__size : int

logic object__component__size : (int,element) farray -> int

logic value__alignment : int

logic object__alignment : (int,element) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,element) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,element) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,element) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,element) farray

logic dummy6 : t

type model____ref = { model____content : us_t
}

function model____ref___projection(a: model____ref) : us_t =
  (a).model____content

logic dummy7 : (int,element) farray

logic value__size1 : int

logic object__size1 : (int,element) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,element) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,element) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,element) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,element) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,element) farray. (0 <= object__alignment1(a)))

logic user_eq6 : (int,element) farray, (int,element) farray -> bool

type us_split_fields = { rec__stackp__stack_root__content :
(int,element) farray; rec__stackp__stack_root__length : less_than_max;
rec__ext__ : us_private
}

function us_split_fields_Content__projection(a: us_split_fields) : (int,element) farray =
  (a).rec__stackp__stack_root__content

function us_split_fields_Length__projection(a: us_split_fields) : less_than_max =
  (a).rec__stackp__stack_root__length

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((bool_eq6(((a).us_split_fields1).rec__stackp__stack_root__content, 1,
  100, ((b).us_split_fields1).rec__stackp__stack_root__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__stackp__stack_root__length) = to_rep(((b).us_split_fields1).rec__stackp__stack_root__length))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((bool_eq6(((a).us_split_fields1).rec__stackp__stack_root__content,
  1, 100, ((b).us_split_fields1).rec__stackp__stack_root__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__stackp__stack_root__length) = to_rep(((b).us_split_fields1).rec__stackp__stack_root__length)))) ->
  (bool_eq8(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,element) farray. forall a1:less_than_max.
  forall a2:us_private. forall a3:int. (0 <= object__size2({
  us_split_fields1 = { rec__stackp__stack_root__content = a;
  rec__stackp__stack_root__length = a1; rec__ext__ = a2 }; attr__tag = a3
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,element) farray. forall a1:less_than_max.
  forall a2:us_private. forall a3:int. (0 <= object__alignment2({
  us_split_fields1 = { rec__stackp__stack_root__content = a;
  rec__stackp__stack_root__length = a1; rec__ext__ = a2 }; attr__tag = a3
  })))

logic stackp__stack_root__content__first__bit : int

logic stackp__stack_root__content__last__bit : int

logic stackp__stack_root__content__position : int

axiom stackp__stack_root__content__first__bit_axiom :
  (0 <= stackp__stack_root__content__first__bit)

axiom stackp__stack_root__content__last__bit_axiom :
  (stackp__stack_root__content__first__bit <  stackp__stack_root__content__last__bit)

axiom stackp__stack_root__content__position_axiom :
  (0 <= stackp__stack_root__content__position)

logic stackp__stack_root__length__first__bit : int

logic stackp__stack_root__length__last__bit : int

logic stackp__stack_root__length__position : int

axiom stackp__stack_root__length__first__bit_axiom :
  (0 <= stackp__stack_root__length__first__bit)

axiom stackp__stack_root__length__last__bit_axiom :
  (stackp__stack_root__length__first__bit <  stackp__stack_root__length__last__bit)

axiom stackp__stack_root__length__position_axiom :
  (0 <= stackp__stack_root__length__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy8 : (int,element) farray

logic dummy9 : less_than_max

logic dummy10 : us_private

logic dummy11 : int

type stack_root__ref = { stack_root__content : us_rep
}

function stack_root__ref___projection(a: stack_root__ref) : us_rep =
  (a).stack_root__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,element) farray. forall a1:less_than_max.
  forall a2:us_private. forall a3:int. (0 <= object__size3({
  us_split_fields1 = { rec__stackp__stack_root__content = a;
  rec__stackp__stack_root__length = a1; rec__ext__ = a2 }; attr__tag = a3
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,element) farray. forall a1:less_than_max.
  forall a2:us_private. forall a3:int. (0 <= object__alignment3({
  us_split_fields1 = { rec__stackp__stack_root__content = a;
  rec__stackp__stack_root__length = a1; rec__ext__ = a2 }; attr__tag = a3
  })))

logic stackp__stack_root__content__first__bit1 : int

logic stackp__stack_root__content__last__bit1 : int

logic stackp__stack_root__content__position1 : int

axiom stackp__stack_root__content__first__bit_axiom1 :
  (0 <= stackp__stack_root__content__first__bit1)

axiom stackp__stack_root__content__last__bit_axiom1 :
  (stackp__stack_root__content__first__bit1 <  stackp__stack_root__content__last__bit1)

axiom stackp__stack_root__content__position_axiom1 :
  (0 <= stackp__stack_root__content__position1)

logic stackp__stack_root__length__first__bit1 : int

logic stackp__stack_root__length__last__bit1 : int

logic stackp__stack_root__length__position1 : int

axiom stackp__stack_root__length__first__bit_axiom1 :
  (0 <= stackp__stack_root__length__first__bit1)

axiom stackp__stack_root__length__last__bit_axiom1 :
  (stackp__stack_root__length__first__bit1 <  stackp__stack_root__length__last__bit1)

axiom stackp__stack_root__length__position_axiom1 :
  (0 <= stackp__stack_root__length__position1)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy12 : (int,element) farray

logic dummy13 : less_than_max

logic dummy14 : us_private

logic dummy15 : int

type stack__ref = { stack__content : us_rep
}

function stack__ref___projection(a: stack__ref) : us_rep = (a).stack__content

logic s : (int,element) farray

logic s1 : less_than_max

logic s2 : us_private

logic s3 : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy16 : integer

type t49s__ref = { t49s__content : integer
}

function t49s__ref___projection(a: t49s__ref) : integer = (a).t49s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,element) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,element) farray = (a).elts1

function of_array1(a: (int,element) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,element) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,element) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,element) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,element) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,element) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,element) farray. (0 <= object__alignment4(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq10 : us_t1, us_t1 -> bool

logic dummy17 : (int,element) farray

logic dummy18 : t1

type t50s__ref = { t50s__content : us_t1
}

function t50s__ref___projection(a: t50s__ref) : us_t1 = (a).t50s__content

axiom size__post_axiom :
  (forall s4:(int,element) farray. forall s5:less_than_max.
  forall s6:us_private. forall s7:int [size({ us_split_fields1 = {
  rec__stackp__stack_root__content = s4; rec__stackp__stack_root__length =
  s5; rec__ext__ = s6 }; attr__tag = s7 })]. in_range1(size({
  us_split_fields1 = { rec__stackp__stack_root__content = s4;
  rec__stackp__stack_root__length = s5; rec__ext__ = s6 }; attr__tag = s7
  })))

axiom size__def_axiom :
  (forall s4:(int,element) farray. forall s5:less_than_max.
  forall s6:us_private. forall s7:int [size({ us_split_fields1 = {
  rec__stackp__stack_root__content = s4; rec__stackp__stack_root__length =
  s5; rec__ext__ = s6 }; attr__tag = s7 })]. (size({ us_split_fields1 = {
  rec__stackp__stack_root__content = s4; rec__stackp__stack_root__length =
  s5; rec__ext__ = s6 }; attr__tag = s7 }) = to_rep(s5)))

logic stackp__get_model__2__result : (int,element) farray

logic stackp__get_model__2__result1 : t

logic o : (int,element) farray

logic temp___478 : (int,element) farray

logic temp___4781 : t1

logic o1 : (int,element) farray

logic o2 : t

logic result : (int,element) farray

logic result1 : t

logic stackp__get_model__2__result2 : (int,element) farray

logic stackp__get_model__2__result3 : t

logic stackp__get_model__2__result4 : (int,element) farray

logic stackp__get_model__2__result5 : t

logic stackp__get_model__2__result6 : (int,element) farray

logic stackp__get_model__2__result7 : t

logic stackp__get_model__2__result8 : (int,element) farray

logic stackp__get_model__2__result9 : t

logic stackp__get_model__2__result10 : (int,element) farray

logic stackp__get_model__2__result11 : t

logic result2 : (int,element) farray

logic result3 : t

axiom H : (stackp__get_model__2__result4 = stackp__get_model__2__result2)

axiom H1 : (stackp__get_model__2__result5 = stackp__get_model__2__result3)

axiom H2 :
  ((stackp__get_model__2__result6 = stackp__get_model__2__result2) and
  (stackp__get_model__2__result7 = stackp__get_model__2__result3))

axiom H3 : ((1 <= to_rep(s1)) -> (((1 <= 1) and (1 <= 100)) and
  ((1 <= to_rep(s1)) and (to_rep(s1) <= 100))))

axiom H4 : (o = s)

axiom H5 : (o = temp___478)

axiom H6 : (mk1(1, to_rep(s1)) = temp___4781)

axiom H7 : dynamic_property(1, 2147483647, to_rep1(first2(temp___4781)),
  to_rep1(last2(temp___4781)))

axiom H8 : (temp___478 = o1)

axiom H9 : (mk(to_rep1(first2(temp___4781)),
  to_rep1(last2(temp___4781))) = o2)

axiom H10 : (result = stackp__get_model__2__result)

axiom H11 : (result1 = stackp__get_model__2__result1)

axiom H12 : ((stackp__get_model__2__result2 = o1) and
  (stackp__get_model__2__result3 = o2))

axiom H13 :
  ((stackp__get_model__2__result8 = stackp__get_model__2__result4) and
  (stackp__get_model__2__result9 = stackp__get_model__2__result5))

axiom H14 : (stackp__get_model__2__result10 = stackp__get_model__2__result6)

axiom H15 : (stackp__get_model__2__result11 = stackp__get_model__2__result7)

axiom H16 : (result2 = stackp__get_model__2__result8)

axiom H17 : (result3 = stackp__get_model__2__result9)

 (* File "stackp.ads", line 9, characters 0-0 *)
goal WP_parameter_def : (length({ elts = stackp__get_model__2__result8; rt =
  stackp__get_model__2__result9 }) = size({ us_split_fields1 = {
  rec__stackp__stack_root__content = s; rec__stackp__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 }))
