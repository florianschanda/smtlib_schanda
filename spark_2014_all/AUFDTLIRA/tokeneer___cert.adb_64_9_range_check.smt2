(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int character)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))
(define-fun of_array1 ((a (Array Int character)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int character)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq4 (us_t1 us_t1) Bool)
(declare-const dummy4 us_t1)
(declare-datatypes () ((stringf1l1000__ref (mk_stringf1l1000__ref (stringf1l1000__content us_t1)))))
(define-fun stringf1l1000__ref___projection ((a stringf1l1000__ref)) us_t1 (stringf1l1000__content a))
(declare-sort issueridt 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (issueridt issueridt) Bool)
(declare-const dummy5 issueridt)
(declare-datatypes () ((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt (issueridt__content a))
(declare-fun to_rep2 (issueridt) Int)
(declare-fun of_rep2 (Int) issueridt)
(assert (forall ((x issueridt)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x issueridt)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first4 (mk2 f l))) f) (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int character)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int character) (elts2 a))
(define-fun of_array2 ((a (Array Int character)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a)) (+ (- (last5 a) (first5 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int character)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int character)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int character)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x))) (to_rep1 (last4 (rt2 x))) (elts2 y) (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))
(declare-fun user_eq6 (us_t2 us_t2) Bool)
(declare-const dummy6 us_t2)
(declare-datatypes () ((stringf1__ref (mk_stringf1__ref (stringf1__content us_t2)))))
(define-fun stringf1__ref___projection ((a stringf1__ref)) us_t2 (stringf1__content a))
(define-fun dynamic_invariant ((temp___expr_285 us_t1) (temp___is_init_282 Bool) (temp___skip_constant_283 Bool) (temp___do_toplevel_284 Bool)) Bool (and (=> (not (= temp___skip_constant_283 true)) (dynamic_property1 1 2147483647 (first3 temp___expr_285) (last3 temp___expr_285))) (=> (= temp___do_toplevel_284 true) (=> (= temp___is_init_282 true) (and (= (first5 (of_array2 (to_array1 temp___expr_285) (first3 temp___expr_285) (last3 temp___expr_285))) 1) (<= (last3 temp___expr_285) 1000))))))
(define-fun dynamic_predicate ((temp___289 us_t1)) Bool (and (= (first5 (of_array2 (to_array1 temp___289) (first3 temp___289) (last3 temp___289))) 1) (<= (last3 temp___289) 1000)))
(define-fun dynamic_invariant1 ((temp___expr_340 Int) (temp___is_init_337 Bool) (temp___skip_constant_338 Bool) (temp___do_toplevel_339 Bool)) Bool (=> (or (= temp___is_init_337 true) (<= 0 4294967295)) (in_range3 temp___expr_340)))
(declare-fun issueridt_image (Int) us_t1)
(declare-fun issueridt_image__function_guard (us_t1 Int) Bool)
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true) (dynamic_invariant (issueridt_image x) true false true)) :pattern ((issueridt_image x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true) (= (issueridt_image x) (let ((temp___346 (to_string (attr__ATTRIBUTE_IMAGE3 x)))) (of_array1 (to_array temp___346) (first1 temp___346) (last1 temp___346))))) :pattern ((issueridt_image x)))))
(declare-sort namecountt 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 40)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (namecountt namecountt) Bool)
(declare-const dummy7 namecountt)
(declare-datatypes () ((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt (namecountt__content a))
(declare-fun to_rep3 (namecountt) Int)
(declare-fun of_rep3 (Int) namecountt)
(assert (forall ((x namecountt)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x namecountt)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-const dummy8 (Array Int character))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int character)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int character)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int character)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__cryptotypes__issuert__id issueridt) (rec__cryptotypes__issuert__namelength namecountt) (rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt (rec__cryptotypes__issuert__id a))
(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt (rec__cryptotypes__issuert__namelength a))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) (rec__cryptotypes__issuert__name a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq4 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep2 (rec__cryptotypes__issuert__id (us_split_fields1 a))) (to_rep2 (rec__cryptotypes__issuert__id (us_split_fields1 b)))) (= (to_rep3 (rec__cryptotypes__issuert__namelength (us_split_fields1 a))) (to_rep3 (rec__cryptotypes__issuert__namelength (us_split_fields1 b))))) (= (bool_eq (rec__cryptotypes__issuert__name (us_split_fields1 a)) 1 40 (rec__cryptotypes__issuert__name (us_split_fields1 b)) 1 40) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const cryptotypes__issuert__id__first__bit Int)
(declare-const cryptotypes__issuert__id__last__bit Int)
(declare-const cryptotypes__issuert__id__position Int)
(assert (<= 0 cryptotypes__issuert__id__first__bit))
(assert (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))
(assert (<= 0 cryptotypes__issuert__id__position))
(declare-const cryptotypes__issuert__namelength__first__bit Int)
(declare-const cryptotypes__issuert__namelength__last__bit Int)
(declare-const cryptotypes__issuert__namelength__position Int)
(assert (<= 0 cryptotypes__issuert__namelength__first__bit))
(assert (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))
(assert (<= 0 cryptotypes__issuert__namelength__position))
(declare-const cryptotypes__issuert__name__first__bit Int)
(declare-const cryptotypes__issuert__name__last__bit Int)
(declare-const cryptotypes__issuert__name__position Int)
(assert (<= 0 cryptotypes__issuert__name__first__bit))
(assert (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))
(assert (<= 0 cryptotypes__issuert__name__position))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((issuert__ref (mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content a))
(declare-sort serialnumbert 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq10 (serialnumbert serialnumbert) Bool)
(declare-const dummy10 serialnumbert)
(declare-datatypes () ((serialnumbert__ref (mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert (serialnumbert__content a))
(declare-fun to_rep4 (serialnumbert) Int)
(declare-fun of_rep4 (Int) serialnumbert)
(assert (forall ((x serialnumbert)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x serialnumbert)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun dynamic_invariant2 ((temp___expr_453 Int) (temp___is_init_450 Bool) (temp___skip_constant_451 Bool) (temp___do_toplevel_452 Bool)) Bool (=> (or (= temp___is_init_450 true) (<= 0 4294967295)) (in_range5 temp___expr_453)))
(declare-fun serialnumbert_image (Int) us_t1)
(declare-fun serialnumbert_image__function_guard (us_t1 Int) Bool)
(assert (forall ((x Int)) (! (=> (dynamic_invariant2 x true true true) (dynamic_invariant (serialnumbert_image x) true false true)) :pattern ((serialnumbert_image x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant2 x true true true) (= (serialnumbert_image x) (let ((temp___459 (to_string (attr__ATTRIBUTE_IMAGE5 x)))) (of_array1 (to_array temp___459) (first1 temp___459) (last1 temp___459))))) :pattern ((serialnumbert_image x)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__certtypes__idt__issuer us_rep) (rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields2)) us_rep (rec__certtypes__idt__issuer a))
(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields2)) serialnumbert (rec__certtypes__idt__serialnumber a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq5 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq4 (rec__certtypes__idt__issuer (us_split_fields3 a)) (rec__certtypes__idt__issuer (us_split_fields3 b))) true) (= (to_rep4 (rec__certtypes__idt__serialnumber (us_split_fields3 a))) (to_rep4 (rec__certtypes__idt__serialnumber (us_split_fields3 b))))) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep1) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep1) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep1)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment5 a))))
(declare-const certtypes__idt__issuer__first__bit Int)
(declare-const certtypes__idt__issuer__last__bit Int)
(declare-const certtypes__idt__issuer__position Int)
(assert (<= 0 certtypes__idt__issuer__first__bit))
(assert (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))
(assert (<= 0 certtypes__idt__issuer__position))
(declare-const certtypes__idt__serialnumber__first__bit Int)
(declare-const certtypes__idt__serialnumber__last__bit Int)
(declare-const certtypes__idt__serialnumber__position Int)
(assert (<= 0 certtypes__idt__serialnumber__first__bit))
(assert (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))
(assert (<= 0 certtypes__idt__serialnumber__position))
(declare-fun user_eq11 (us_rep1 us_rep1) Bool)
(declare-const dummy11 us_rep1)
(declare-datatypes () ((idt__ref (mk_idt__ref (idt__content us_rep1)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep1 (idt__content a))
(declare-sort usertexti 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq12 (usertexti usertexti) Bool)
(declare-const dummy12 usertexti)
(declare-datatypes () ((usertexti__ref (mk_usertexti__ref (usertexti__content usertexti)))))
(define-fun usertexti__ref___projection ((a usertexti__ref)) usertexti (usertexti__content a))
(declare-sort algorithmt 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq13 (algorithmt algorithmt) Bool)
(declare-const dummy13 algorithmt)
(declare-datatypes () ((algorithmt__ref (mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt (algorithmt__content a))
(declare-fun to_rep5 (algorithmt) Int)
(declare-fun of_rep5 (Int) algorithmt)
(assert (forall ((x algorithmt)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x algorithmt)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-sort yearst 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq14 (yearst yearst) Bool)
(declare-const dummy14 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep6 (yearst) Int)
(declare-fun of_rep6 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x yearst)) (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-sort monthst 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq15 (monthst monthst) Bool)
(declare-const dummy15 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep7 (monthst) Int)
(declare-fun of_rep7 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)))))
(assert (forall ((x monthst)) (! (in_range9 (to_rep7 x)) :pattern ((to_rep7 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7 (of_rep7 x))))))
(declare-sort dayst 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq16 (dayst dayst) Bool)
(declare-const dummy16 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep8 (dayst) Int)
(declare-fun of_rep8 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)))))
(assert (forall ((x dayst)) (! (in_range10 (to_rep8 x)) :pattern ((to_rep8 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8 (of_rep8 x))))))
(declare-sort millisecst 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq17 (millisecst millisecst) Bool)
(declare-const dummy17 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep9 (millisecst) Int)
(declare-fun of_rep9 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)))))
(assert (forall ((x millisecst)) (! (in_range11 (to_rep9 x)) :pattern ((to_rep9 x)))))
(assert (forall ((x Int)) (! (=> (in_range11 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9 (of_rep9 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__2__projection ((a us_split_fields4)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__2__projection ((a us_split_fields4)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__2__projection ((a us_split_fields4)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields4)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___16__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___16__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq6 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (= (to_rep6 (rec__clock__timet__year (us_split_fields5 a))) (to_rep6 (rec__clock__timet__year (us_split_fields5 b)))) (= (to_rep7 (rec__clock__timet__month (us_split_fields5 a))) (to_rep7 (rec__clock__timet__month (us_split_fields5 b))))) (= (to_rep8 (rec__clock__timet__day (us_split_fields5 a))) (to_rep8 (rec__clock__timet__day (us_split_fields5 b))))) (= (to_rep9 (rec__clock__timet__millisec (us_split_fields5 a))) (to_rep9 (rec__clock__timet__millisec (us_split_fields5 b))))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq18 (us_rep2 us_rep2) Bool)
(declare-const dummy18 us_rep2)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep2)))))
(define-fun timet__ref___2__projection ((a timet__ref)) us_rep2 (timet__content a))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__cert__contentst__id us_rep1) (rec__cert__contentst__notbefore us_rep2) (rec__cert__contentst__notafter us_rep2) (rec__cert__contentst__mechanism algorithmt)))))
(define-fun us_split_fields_ID__3__projection ((a us_split_fields6)) us_rep1 (rec__cert__contentst__id a))
(define-fun us_split_fields_NotBefore__2__projection ((a us_split_fields6)) us_rep2 (rec__cert__contentst__notbefore a))
(define-fun us_split_fields_NotAfter__2__projection ((a us_split_fields6)) us_rep2 (rec__cert__contentst__notafter a))
(define-fun us_split_fields_Mechanism__projection ((a us_split_fields6)) algorithmt (rec__cert__contentst__mechanism a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___21__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___22__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq7 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (= (bool_eq5 (rec__cert__contentst__id (us_split_fields7 a)) (rec__cert__contentst__id (us_split_fields7 b))) true) (= (bool_eq6 (rec__cert__contentst__notbefore (us_split_fields7 a)) (rec__cert__contentst__notbefore (us_split_fields7 b))) true)) (= (bool_eq6 (rec__cert__contentst__notafter (us_split_fields7 a)) (rec__cert__contentst__notafter (us_split_fields7 b))) true)) (= (to_rep5 (rec__cert__contentst__mechanism (us_split_fields7 a))) (to_rep5 (rec__cert__contentst__mechanism (us_split_fields7 b))))) true false))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep3) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep3) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep3)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment7 a))))
(declare-const cert__contentst__id__first__bit Int)
(declare-const cert__contentst__id__last__bit Int)
(declare-const cert__contentst__id__position Int)
(assert (<= 0 cert__contentst__id__first__bit))
(assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))
(assert (<= 0 cert__contentst__id__position))
(declare-const cert__contentst__notbefore__first__bit Int)
(declare-const cert__contentst__notbefore__last__bit Int)
(declare-const cert__contentst__notbefore__position Int)
(assert (<= 0 cert__contentst__notbefore__first__bit))
(assert (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))
(assert (<= 0 cert__contentst__notbefore__position))
(declare-const cert__contentst__notafter__first__bit Int)
(declare-const cert__contentst__notafter__last__bit Int)
(declare-const cert__contentst__notafter__position Int)
(assert (<= 0 cert__contentst__notafter__first__bit))
(assert (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))
(assert (<= 0 cert__contentst__notafter__position))
(declare-const cert__contentst__mechanism__first__bit Int)
(declare-const cert__contentst__mechanism__last__bit Int)
(declare-const cert__contentst__mechanism__position Int)
(assert (<= 0 cert__contentst__mechanism__first__bit))
(assert (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))
(assert (<= 0 cert__contentst__mechanism__position))
(declare-fun user_eq19 (us_rep3 us_rep3) Bool)
(declare-const dummy19 us_rep3)
(declare-datatypes () ((contentst__ref (mk_contentst__ref (contentst__content us_rep3)))))
(define-fun contentst__ref___projection ((a contentst__ref)) us_rep3 (contentst__content a))
(declare-const contents us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const fullstring__first integer)
(declare-const fullstring__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq20 (integer integer) Bool)
(declare-const dummy20 integer)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content integer)))))
(define-fun t5b__ref___projection ((a t5b__ref)) integer (t5b__content a))
(declare-sort t3 0)
(declare-fun first6 (t3) integer)
(declare-fun last6 (t3) integer)
(declare-fun mk3 (Int Int) t3)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first6 (mk3 f l))) f) (= (to_rep1 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array Int character)) (rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int character) (elts3 a))
(define-fun of_array3 ((a (Array Int character)) (f Int) (l Int)) us_t3 (mk___t3 a (mk3 f l)))
(define-fun first7 ((a us_t3)) Int (to_rep1 (first6 (rt3 a))))
(define-fun last7 ((a us_t3)) Int (to_rep1 (last6 (rt3 a))))
(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a)) (+ (- (last7 a) (first7 a)) 1) 0))
(declare-const value__size8 Int)
(declare-fun object__size8 ((Array Int character)) Int)
(declare-const value__component__size4 Int)
(declare-fun object__component__size4 ((Array Int character)) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 ((Array Int character)) Int)
(assert (<= 0 value__size8))
(assert (forall ((a (Array Int character))) (<= 0 (object__size8 a))))
(assert (<= 0 value__component__size4))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size4 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment8 a))))
(define-fun bool_eq8 ((x us_t3) (y us_t3)) Bool (bool_eq (elts3 x) (to_rep1 (first6 (rt3 x))) (to_rep1 (last6 (rt3 x))) (elts3 y) (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))
(declare-fun user_eq21 (us_t3 us_t3) Bool)
(declare-const dummy21 us_t3)
(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content us_t3)))))
(define-fun t6b__ref___projection ((a t6b__ref)) us_t3 (t6b__content a))
(declare-fun temp___String_Literal_1670 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1670 us_void_param) 1)) 78) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 3)) 85)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 4)) 115)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 12)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 13)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 14)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 16)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 17)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 18)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 19)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 20)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 21)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 22)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 23)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 24)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 25)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 26)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 27)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 28)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 29)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 30)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 31)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 32)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 33)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 34)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 35)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 36)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 37)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 38)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 39)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 40)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 41)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 42)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 43)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 44)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 45)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 46)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 47)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 48)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 49)) 32)) (= (to_rep (select (temp___String_Literal_1670 us_void_param) 50)) 32)) :pattern ((temp___String_Literal_1670 us_void_param)))))
(declare-fun temp___String_Literal_1671 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1671 us_void_param) 1)) 73) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 2)) 115)) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 3)) 115)) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 4)) 117)) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 7)) 58)) (= (to_rep (select (temp___String_Literal_1671 us_void_param) 8)) 32)) :pattern ((temp___String_Literal_1671 us_void_param)))))
(declare-fun temp___String_Literal_1674 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1674 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 2)) 83)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 3)) 101)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 4)) 114)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 5)) 105)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 6)) 97)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 7)) 108)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 8)) 78)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 9)) 111)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 10)) 58)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_1674 us_void_param) 12)) 32)) :pattern ((temp___String_Literal_1674 us_void_param)))))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range2 temp___expr_63)))
(define-fun dynamic_invariant5 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(define-fun dynamic_invariant6 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant7 ((temp___expr_924 Int) (temp___is_init_921 Bool) (temp___skip_constant_922 Bool) (temp___do_toplevel_923 Bool)) Bool (=> (or (= temp___is_init_921 true) (<= 1 50)) (in_range6 temp___expr_924)))
(define-fun dynamic_invariant8 ((temp___expr_263 us_t2) (temp___is_init_260 Bool) (temp___skip_constant_261 Bool) (temp___do_toplevel_262 Bool)) Bool (and (=> (not (= temp___skip_constant_261 true)) (dynamic_property2 1 2147483647 (first5 temp___expr_263) (last5 temp___expr_263))) (=> (= temp___do_toplevel_262 true) (=> (= temp___is_init_260 true) (= (first5 temp___expr_263) 1)))))
(define-fun dynamic_predicate1 ((temp___266 us_t2)) Bool (= (first5 temp___266) 1))
(define-fun dynamic_invariant9 ((temp___expr_807 Int) (temp___is_init_804 Bool) (temp___skip_constant_805 Bool) (temp___do_toplevel_806 Bool)) Bool (=> (or (= temp___is_init_804 true) (<= 1901 2099)) (in_range8 temp___expr_807)))
(define-fun dynamic_invariant10 ((temp___expr_813 Int) (temp___is_init_810 Bool) (temp___skip_constant_811 Bool) (temp___do_toplevel_812 Bool)) Bool (=> (or (= temp___is_init_810 true) (<= 1 12)) (in_range9 temp___expr_813)))
(define-fun dynamic_invariant11 ((temp___expr_819 Int) (temp___is_init_816 Bool) (temp___skip_constant_817 Bool) (temp___do_toplevel_818 Bool)) Bool (=> (or (= temp___is_init_816 true) (<= 1 31)) (in_range10 temp___expr_819)))
(define-fun dynamic_invariant12 ((temp___expr_843 Int) (temp___is_init_840 Bool) (temp___skip_constant_841 Bool) (temp___do_toplevel_842 Bool)) Bool (=> (or (= temp___is_init_840 true) (<= 0 86399999)) (in_range11 temp___expr_843)))
(define-fun dynamic_invariant13 ((temp___expr_319 Int) (temp___is_init_316 Bool) (temp___skip_constant_317 Bool) (temp___do_toplevel_318 Bool)) Bool (=> (or (= temp___is_init_316 true) (<= 0 40)) (in_range4 temp___expr_319)))
(define-fun dynamic_invariant14 ((temp___expr_362 Int) (temp___is_init_359 Bool) (temp___skip_constant_360 Bool) (temp___do_toplevel_361 Bool)) Bool (=> (or (= temp___is_init_359 true) (<= 0 10)) (in_range7 temp___expr_362)))
(declare-const localuser (Array Int character))
(declare-const fullstring (Array Int character))
(declare-const temp___1678 (Array Int character))
(declare-const temp___16781 t1)
(declare-const temp___1673 (Array Int character))
(declare-const temp___16731 t1)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const temp___1675 (Array Int character))
(declare-const temp___16751 t)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const temp___1677 (Array Int character))
(declare-const temp___16771 t)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const cert__extractuser__fullstring__assume (Array Int character))
(declare-const cert__extractuser__fullstring__assume1 t)
(declare-const temp___1683 (Array Int character))
(declare-const temp___16831 t3)
(declare-const o18 (Array Int character))
(declare-const temp___1686 (Array Int character))
(declare-const temp___16861 t3)
(declare-const result (Array Int character))
(declare-const localuser1 (Array Int character))
(declare-const result1 (Array Int character))
(declare-const fullstring1 (Array Int character))
(assert (= result localuser))
(assert (= localuser1 (temp___String_Literal_1670 Tuple0)))
(assert (and (= (mk___t1 temp___1678 temp___16781) (serialnumbert_image (to_rep4 (rec__certtypes__idt__serialnumber (us_split_fields3 (rec__cert__contentst__id (us_split_fields7 contents))))))) (and (dynamic_invariant (mk___t1 temp___1678 temp___16781) true false true) (= (mk___t1 temp___1678 temp___16781) (let ((temp___457 (to_string (attr__ATTRIBUTE_IMAGE5 (to_rep4 (rec__certtypes__idt__serialnumber (us_split_fields3 (rec__cert__contentst__id (us_split_fields7 contents))))))))) (mk___t1 (elts temp___457) (mk1 (to_rep1 (first (rt temp___457))) (to_rep1 (last (rt temp___457))))))))))
(assert (and (= (mk___t1 temp___1673 temp___16731) (issueridt_image (to_rep2 (rec__cryptotypes__issuert__id (us_split_fields1 (rec__certtypes__idt__issuer (us_split_fields3 (rec__cert__contentst__id (us_split_fields7 contents))))))))) (and (dynamic_invariant (mk___t1 temp___1673 temp___16731) true false true) (= (mk___t1 temp___1673 temp___16731) (let ((temp___344 (to_string (attr__ATTRIBUTE_IMAGE3 (to_rep2 (rec__cryptotypes__issuert__id (us_split_fields1 (rec__certtypes__idt__issuer (us_split_fields3 (rec__cert__contentst__id (us_split_fields7 contents))))))))))) (mk___t1 (elts temp___344) (mk1 (to_rep1 (first (rt temp___344))) (to_rep1 (last (rt temp___344))))))))))
(assert (=> (<= (to_rep1 (first2 temp___16731)) (to_rep1 (last2 temp___16731))) (= o (+ (- (to_rep1 (last2 temp___16731)) (to_rep1 (first2 temp___16731))) 1))))
(assert (=> (not (<= (to_rep1 (first2 temp___16731)) (to_rep1 (last2 temp___16731)))) (= o 0)))
(assert (=> (<= 1 8) (= o1 (+ (- 8 1) 1))))
(assert (=> (not (<= 1 8)) (= o1 0)))
(assert (= o2 (+ o1 o)))
(assert (= o3 (+ 1 o2)))
(assert (= o4 (- o3 1)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (= (concat1 (temp___String_Literal_1671 Tuple0) 1 8 temp___1673 (to_rep1 (first2 temp___16731)) (to_rep1 (last2 temp___16731))) temp___1675))
(assert (= (mk 1 o5) temp___16751))
(assert (not (= (length (mk___t temp___1675 temp___16751)) 0)))
(assert (=> (<= 1 12) (= o6 (+ (- 12 1) 1))))
(assert (=> (not (<= 1 12)) (= o6 0)))
(assert (=> (<= (to_rep1 (first temp___16751)) (to_rep1 (last temp___16751))) (= o7 (+ (- (to_rep1 (last temp___16751)) (to_rep1 (first temp___16751))) 1))))
(assert (=> (not (<= (to_rep1 (first temp___16751)) (to_rep1 (last temp___16751)))) (= o7 0)))
(assert (= o8 (+ o7 o6)))
(assert (= o9 (+ (to_rep1 (first temp___16751)) o8)))
(assert (= o10 (- o9 1)))
(assert (not (in_range1 o10)))
(check-sat)
(exit)
