(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type index

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,integer) farray

logic dummy4 : t

type text__ref = { text__content : us_t
}

function text__ref___projection(a: text__ref) : us_t = (a).text__content

logic a : (int,integer) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic l : int

logic j : int

logic lcp__result : int

logic o : int

logic o1 : integer

logic o2 : int

logic temp___160 : int

logic temp___158 : int

logic o3 : int

logic o4 : integer

logic temp___159 : int

logic o5 : int

logic o6 : integer

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : bool

logic o12 : int

logic temp___1581 : int

logic o13 : int

logic o14 : integer

logic temp___1591 : int

logic o15 : int

logic o16 : integer

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : bool

logic o22 : int

logic temp___1582 : int

logic o23 : int

logic o24 : integer

logic temp___1592 : int

logic o25 : int

logic o26 : integer

logic o27 : int

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : bool

logic o32 : int

logic temp___1583 : int

logic o33 : int

logic o34 : integer

logic temp___1593 : int

logic o35 : int

logic o36 : integer

logic o37 : int

logic o38 : int

logic o39 : int

logic o40 : int

logic o41 : bool

logic o42 : int

logic temp___1584 : int

logic o43 : int

logic o44 : integer

logic temp___1594 : int

logic o45 : int

logic o46 : integer

logic o47 : int

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : bool

logic o52 : int

logic temp___1585 : int

logic o53 : int

logic o54 : integer

logic temp___1595 : int

logic o55 : int

logic o56 : integer

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : bool

logic o62 : int

logic temp___1586 : int

logic o63 : int

logic o64 : integer

logic temp___1596 : int

logic o65 : int

logic o66 : integer

logic o67 : int

logic o68 : int

logic o69 : int

logic o70 : int

logic o71 : bool

logic o72 : int

logic temp___1587 : int

logic o73 : int

logic o74 : integer

logic temp___1597 : int

logic o75 : int

logic o76 : integer

logic o77 : int

logic o78 : int

logic o79 : int

logic o80 : int

logic o81 : bool

logic o82 : int

logic temp___1588 : int

logic o83 : int

logic o84 : integer

logic temp___1598 : int

logic o85 : int

logic o86 : integer

logic o87 : int

logic o88 : int

logic o89 : int

logic o90 : int

logic o91 : bool

logic o92 : int

logic temp___1589 : int

logic o93 : int

logic o94 : integer

logic temp___1599 : int

logic o95 : int

logic o96 : integer

logic o97 : int

logic o98 : int

logic o99 : int

logic o100 : int

logic o101 : bool

logic o102 : int

logic temp___163 : int

logic temp___164 : int

logic o103 : int

logic o104 : integer

logic o105 : int

logic o106 : int

logic o107 : int

logic o108 : int

logic o109 : int

logic k : int

logic temp___165 : int

logic temp___166 : int

logic o110 : int

logic o111 : integer

logic o112 : int

logic o113 : int

logic o114 : int

logic o115 : int

logic result : int

logic l1 : int

logic result1 : int

logic j1 : int

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : int

logic l2 : int

logic result6 : int

logic j2 : int

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic result10 : int

logic l3 : int

logic result11 : int

logic j3 : int

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic result15 : int

logic l4 : int

logic result16 : int

logic j4 : int

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic result20 : int

logic l5 : int

logic result21 : int

logic j5 : int

logic result22 : bool

logic result23 : bool

logic result24 : bool

logic result25 : int

logic l6 : int

logic result26 : int

logic j6 : int

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic result30 : int

logic l7 : int

logic result31 : int

logic j7 : int

logic result32 : bool

logic result33 : bool

logic result34 : bool

logic result35 : int

logic l8 : int

logic result36 : int

logic j8 : int

logic result37 : bool

logic result38 : bool

logic result39 : bool

logic result40 : int

logic l9 : int

logic result41 : int

logic j9 : int

logic result42 : bool

logic result43 : bool

logic result44 : bool

logic result45 : int

logic l10 : int

logic result46 : int

logic j10 : int

logic result47 : bool

logic result48 : bool

logic result49 : bool

logic result50 : int

logic l11 : int

logic l12 : int

logic j11 : int

logic l13 : int

logic j12 : int

logic l14 : int

logic j13 : int

logic l15 : int

logic j14 : int

logic l16 : int

logic j15 : int

logic l17 : int

logic j16 : int

logic l18 : int

logic j17 : int

logic l19 : int

logic j18 : int

logic l20 : int

logic j19 : int

logic l21 : int

logic j20 : int

logic l22 : int

logic j21 : int

logic l23 : int

logic j22 : int

logic l24 : int

logic j23 : int

logic l25 : int

logic j24 : int

logic l26 : int

logic j25 : int

logic l27 : int

logic j26 : int

logic l28 : int

logic j27 : int

logic l29 : int

logic j28 : int

logic l30 : int

logic j29 : int

logic l31 : int

logic j30 : int

logic result51 : int

logic lcp__result1 : int

logic lcp__result2 : int

logic lcp__result3 : int

logic l32 : int

logic j31 : int

logic lcp__result4 : int

logic l33 : int

logic j32 : int

logic lcp__result5 : int

logic result52 : bool

logic result53 : bool

logic result54 : bool

axiom H : dynamic_property(1, 10, to_rep(first(a1)), to_rep(last(a1)))

axiom H1 : in_range1(x)

axiom H2 : in_range1(y)

axiom H3 : (((to_rep(first(a1)) <= x) and (x <= to_rep(last(a1)))) and
  ((to_rep(first(a1)) <= y) and (y <= to_rep(last(a1)))))

axiom H4 : ((0 <= 2147483647) -> in_range2(l))

axiom H5 : (result = l)

axiom H6 : (l1 = 0)

axiom H7 : (result1 = j)

axiom H8 : (j1 = 1)

axiom H9 : ((o10 = (x + l1)) and in_range1((x + l1)))

axiom H10 : (((o10 <= to_rep(last(a1))) -> (result4 = true)) and
  ((not (o10 <= to_rep(last(a1)))) -> (result4 = false)))

axiom H11 : ((result4 = true) -> ((o9 = (y + l1)) and in_range1((y + l1))))

axiom H12 : ((result4 = true) -> (((o9 <= to_rep(last(a1))) ->
  (result3 = true)) and ((not (o9 <= to_rep(last(a1)))) ->
  (result3 = false))))

axiom H13 : ((not (result4 = true)) -> (result3 = false))

axiom H14 : (result3 = true)

axiom H15 : ((temp___159 = (y + l1)) and in_range1((y + l1)))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (to_rep(first(a1)) <= temp___159)
