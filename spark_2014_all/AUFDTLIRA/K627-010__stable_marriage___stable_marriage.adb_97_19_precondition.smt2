(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort group2_id 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (group2_id group2_id) Bool)
(declare-const dummy group2_id)
(declare-datatypes () ((group2_id__ref (mk_group2_id__ref (group2_id__content group2_id)))))
(define-fun group2_id__ref___projection ((a group2_id__ref)) group2_id (group2_id__content a))
(define-fun dynamic_invariant ((temp___expr_149 Int) (temp___is_init_146 Bool) (temp___skip_constant_147 Bool) (temp___do_toplevel_148 Bool)) Bool (=> (or (= temp___is_init_146 true) (<= 1 64)) (in_range1 temp___expr_149)))
(declare-sort ranking 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ranking ranking) Bool)
(declare-const dummy1 ranking)
(declare-datatypes () ((ranking__ref (mk_ranking__ref (ranking__content ranking)))))
(define-fun ranking__ref___projection ((a ranking__ref)) ranking (ranking__content a))
(declare-fun to_rep (ranking) Int)
(declare-fun of_rep (Int) ranking)
(assert (forall ((x ranking)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x ranking)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (group2_id) Int)
(declare-fun of_rep1 (Int) group2_id)
(assert (forall ((x group2_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x group2_id)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int group2_id))))))
(declare-fun slide ((Array Int group2_id) Int Int) (Array Int group2_id))
(assert (forall ((a (Array Int group2_id))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int group2_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int group2_id) Int Int (Array Int group2_id) Int Int) (Array Int group2_id))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (group2_id Int) (Array Int group2_id))
(assert (forall ((v group2_id)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int group2_id)) (a__first Int) (a__last Int) (b (Array Int group2_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array Int group2_id) Int Int (Array Int group2_id) Int Int) Int)
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun is_permutation_2 ((Array Int group2_id)) Bool)
(declare-fun is_permutation_2__function_guard (Bool (Array Int group2_id)) Bool)
(assert (forall ((r2 (Array Int group2_id))) (! (= (= (is_permutation_2 r2) true) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (exists ((rank Int)) (and (and (<= 1 rank) (<= rank 64)) (= (to_rep1 (select r2 rank)) g2)))))) :pattern ((is_permutation_2 r2)))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int ranking))))))
(declare-fun slide1 ((Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int ranking))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int ranking) Int Int (Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (ranking Int) (Array Int ranking))
(assert (forall ((v ranking)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int ranking)) (a__first Int) (a__last Int) (b (Array Int ranking)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_136 Int)) (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last)) (= (to_rep (select a temp___idx_136)) (to_rep (select b (+ (- b__first a__first) temp___idx_136))))))) true false))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_136 Int)) (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last)) (= (to_rep (select a temp___idx_136)) (to_rep (select b (+ (- b__first a__first) temp___idx_136)))))))))))
(declare-fun compare1 ((Array Int ranking) Int Int (Array Int ranking) Int Int) Int)
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-fun invert_2 ((Array Int group2_id)) (Array Int ranking))
(declare-fun invert_2__function_guard ((Array Int ranking) (Array Int group2_id)) Bool)
(assert (forall ((r2 (Array Int group2_id))) (! (=> (= (is_permutation_2 r2) true) (let ((result (invert_2 r2))) (and (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank 64)) (= (to_rep (select result (to_rep1 (select r2 rank)))) rank))) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (to_rep1 (select r2 (to_rep (select result g2)))) g2)))))) :pattern ((invert_2 r2)))))
(declare-const g2_a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const g2_b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const r2 (Array Int group2_id))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_155 Int) (temp___is_init_152 Bool) (temp___skip_constant_153 Bool) (temp___do_toplevel_154 Bool)) Bool (=> (or (= temp___is_init_152 true) (<= 1 64)) (in_range2 temp___expr_155)))
(declare-const inverted (Array Int ranking))
(declare-const stable_marriage__is_preferred_2__result Bool)
(declare-const o (Array Int ranking))
(declare-const temp___476 (Array Int ranking))
(declare-const temp___477 (Array Int ranking))
(declare-const o1 ranking)
(declare-const o2 Int)
(declare-const result (Array Int ranking))
(declare-const inverted1 (Array Int ranking))
(declare-const result1 Bool)
(declare-const stable_marriage__is_preferred_2__result1 Bool)
(declare-const stable_marriage__is_preferred_2__result2 Bool)
(declare-const stable_marriage__is_preferred_2__result3 Bool)
(declare-const inverted2 (Array Int ranking))
(declare-const stable_marriage__is_preferred_2__result4 Bool)
(declare-const inverted3 (Array Int ranking))
(declare-const stable_marriage__is_preferred_2__result5 Bool)
(assert (in_range1 g2_a))
(assert (in_range1 g2_b))
(assert (= (is_permutation_2 r2) true))
(assert (not (= (is_permutation_2 r2) true)))
(check-sat)
(exit)
