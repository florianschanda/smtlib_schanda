(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq1(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_159:int. ((((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) and
  ((a[temp___idx_159]) = (b[((b__first - a__first) + temp___idx_159)]))) or
  (not ((a__first <= temp___idx_159) and (temp___idx_159 <= a__last)))))) ->
  (bool_eq1(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  ((a[temp___idx_159]) = (b[((b__first - a__first) + temp___idx_159)])))))) ->
  (bool_eq1(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  ((a[temp___idx_159]) = (b[((b__first - a__first) + temp___idx_159)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___450 : bool, bool, bool, bool, bool -> (int,bool) farray

axiom def_axiom :
  (forall temp___452:bool. forall temp___453:bool. forall temp___454:bool.
  forall temp___455:bool. forall temp___456:bool.
  (forall temp___457:int. ((((temp___457 = 76) or ((67 <= temp___457) and
  (temp___457 <= 69))) -> ((temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456)[temp___457]) = temp___455)) and
  ((not ((temp___457 = 76) or ((67 <= temp___457) and
  (temp___457 <= 69)))) -> ((((temp___457 = 78) or (temp___457 = 70)) ->
  ((temp___450(temp___452, temp___453, temp___454, temp___455,
  temp___456)[temp___457]) = temp___454)) and ((not ((temp___457 = 78) or
  (temp___457 = 70))) -> (((temp___457 = 65) -> ((temp___450(temp___452,
  temp___453, temp___454, temp___455,
  temp___456)[temp___457]) = temp___453)) and ((not (temp___457 = 65)) ->
  ((((97 <= temp___457) and (temp___457 <= 122)) -> ((temp___450(temp___452,
  temp___453, temp___454, temp___455,
  temp___456)[temp___457]) = temp___452)) and ((not ((97 <= temp___457) and
  (temp___457 <= 122))) -> ((temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456)[temp___457]) = temp___456)))))))))))

 (* File "array_aggregates.adb", line 62, characters 0-0 *)
goal WP_parameter_def :
  (forall m:(int,bool) farray. forall result:(int,bool) farray.
  forall m1:(int,bool) farray. (((result = m) and (m1 = temp___450(of_int(1),
  of_int(1), of_int(1), of_int(1), of_int(0)))) -> ((m1[97]) = true)))
