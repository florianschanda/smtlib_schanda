(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type account_num

predicate in_range3(x: int) = ((1 <= x) and (x <= 200000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : account_num, account_num -> bool

logic dummy2 : account_num

type account_num__ref = { account_num__content : account_num
}

function account_num__ref___projection(a: account_num__ref) : account_num =
  (a).account_num__content

type ext_account_num

predicate in_range4(x: int) = ((0 <= x) and (x <= 200000))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : ext_account_num, ext_account_num -> bool

logic dummy3 : ext_account_num

type ext_account_num__ref = { ext_account_num__content : ext_account_num
}

function ext_account_num__ref___projection(a: ext_account_num__ref) : ext_account_num =
  (a).ext_account_num__content

logic to_rep : ext_account_num -> int

logic of_rep : int -> ext_account_num

axiom inversion_axiom :
  (forall x:ext_account_num [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:ext_account_num [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__database__availability__account_link__available
: bool; rec__database__availability__account_link__prev : ext_account_num;
rec__database__availability__account_link__next : ext_account_num
}

function us_split_fields_Available__projection(a: us_split_fields) : bool =
  (a).rec__database__availability__account_link__available

function us_split_fields_Prev__projection(a: us_split_fields) : ext_account_num =
  (a).rec__database__availability__account_link__prev

function us_split_fields_Next__projection(a: us_split_fields) : ext_account_num =
  (a).rec__database__availability__account_link__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((((a).us_split_fields1).rec__database__availability__account_link__available = ((b).us_split_fields1).rec__database__availability__account_link__available) and
  (to_rep(((a).us_split_fields1).rec__database__availability__account_link__prev) = to_rep(((b).us_split_fields1).rec__database__availability__account_link__prev))) and
  (to_rep(((a).us_split_fields1).rec__database__availability__account_link__next) = to_rep(((b).us_split_fields1).rec__database__availability__account_link__next))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((((a).us_split_fields1).rec__database__availability__account_link__available = ((b).us_split_fields1).rec__database__availability__account_link__available) and
  (to_rep(((a).us_split_fields1).rec__database__availability__account_link__prev) = to_rep(((b).us_split_fields1).rec__database__availability__account_link__prev))) and
  (to_rep(((a).us_split_fields1).rec__database__availability__account_link__next) = to_rep(((b).us_split_fields1).rec__database__availability__account_link__next)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:ext_account_num. forall a2:ext_account_num.
  (0 <= object__size({ us_split_fields1 = {
  rec__database__availability__account_link__available = a;
  rec__database__availability__account_link__prev = a1;
  rec__database__availability__account_link__next = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:ext_account_num. forall a2:ext_account_num.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__database__availability__account_link__available = a;
  rec__database__availability__account_link__prev = a1;
  rec__database__availability__account_link__next = a2 } })))

logic database__availability__account_link__available__first__bit : int

logic database__availability__account_link__available__last__bit : int

logic database__availability__account_link__available__position : int

axiom database__availability__account_link__available__first__bit_axiom :
  (0 <= database__availability__account_link__available__first__bit)

axiom database__availability__account_link__available__last__bit_axiom :
  (database__availability__account_link__available__first__bit <  database__availability__account_link__available__last__bit)

axiom database__availability__account_link__available__position_axiom :
  (0 <= database__availability__account_link__available__position)

logic database__availability__account_link__prev__first__bit : int

logic database__availability__account_link__prev__last__bit : int

logic database__availability__account_link__prev__position : int

axiom database__availability__account_link__prev__first__bit_axiom :
  (0 <= database__availability__account_link__prev__first__bit)

axiom database__availability__account_link__prev__last__bit_axiom :
  (database__availability__account_link__prev__first__bit <  database__availability__account_link__prev__last__bit)

axiom database__availability__account_link__prev__position_axiom :
  (0 <= database__availability__account_link__prev__position)

logic database__availability__account_link__next__first__bit : int

logic database__availability__account_link__next__last__bit : int

logic database__availability__account_link__next__position : int

axiom database__availability__account_link__next__first__bit_axiom :
  (0 <= database__availability__account_link__next__first__bit)

axiom database__availability__account_link__next__last__bit_axiom :
  (database__availability__account_link__next__first__bit <  database__availability__account_link__next__last__bit)

axiom database__availability__account_link__next__position_axiom :
  (0 <= database__availability__account_link__next__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : bool

logic dummy5 : ext_account_num

logic dummy6 : ext_account_num

type account_link__ref = { account_link__content : us_rep
}

function account_link__ref___projection(a: account_link__ref) : us_rep =
  (a).account_link__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:bool. forall v1:ext_account_num. forall v2:ext_account_num.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__database__availability__account_link__available = v;
  rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } }, i)[i])].
  ((singleton({ us_split_fields1 = {
  rec__database__availability__account_link__available = v;
  rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } }, i)[i]) = {
  us_split_fields1 = { rec__database__availability__account_link__available =
  v; rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } })))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_141:int. ((((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) and (bool_eq6((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)) or
  (not ((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq6((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq6((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic is_available : int, (int,us_rep) farray -> bool

logic is_available__function_guard : bool, int, (int,us_rep) farray -> prop

axiom is_available__post_axiom : true

axiom is_available__def_axiom :
  (forall account:int.
  (forall database__availability__links:(int,us_rep) farray
  [is_available(account, database__availability__links)].
  ((is_available(account, database__availability__links) = true) <->
  ((((database__availability__links[account])).us_split_fields1).rec__database__availability__account_link__available = true))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall links:(int,us_rep) farray. forall count:int. forall i:int.
  forall o:int. forall result:int. forall count1:int. forall result1:int.
  forall i1:int. forall count2:int. forall i2:int. forall result2:bool.
  forall result3:int. forall count3:int. forall result4:int. forall i3:int.
  (((result = count) and (count1 = 0)) -> (in_range2(count1) ->
  (((result1 = i) and (i1 = 1)) -> (((1 <= i1) and (i1 <= 200000)) ->
  ((count2 <  i2) -> ((((((0 <= 2147483647) -> in_range2(count2)) and
  ((1 <= 200000) -> in_range3(i2))) and ((1 <= i2) and (i2 <= 200000))) and
  ((((result2 = is_available(i2, links)) and ((result2 = true) <->
  ((((links[i2])).us_split_fields1).rec__database__availability__account_link__available = true))) and
  (((result2 = true) and (((o = (count2 + 1)) and
  in_range1((count2 + 1))) and ((result3 = count2) and (count3 = o)))) or
  ((not (result2 = true)) and (count3 = count2)))) and
  ((not (i2 = 200000)) and ((result4 = i2) and (i3 = (i2 + 1)))))) ->
  (count3 <  i3))))))))
