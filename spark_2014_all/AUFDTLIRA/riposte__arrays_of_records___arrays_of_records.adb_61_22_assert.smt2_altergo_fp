(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type value

predicate in_range1(x: int) = (((- 23) <= x) and (x <= 69))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value, value -> bool

logic dummy : value

type value__ref = { value__content : value
}

function value__ref___projection(a: value__ref) : value = (a).value__content

logic to_rep : value -> int

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__arrays_of_records__basic_record__flag : bool;
rec__arrays_of_records__basic_record__first_value : value;
rec__arrays_of_records__basic_record__second_value : value
}

function us_split_fields_Flag__projection(a: us_split_fields) : bool =
  (a).rec__arrays_of_records__basic_record__flag

function us_split_fields_First_Value__projection(a: us_split_fields) : value =
  (a).rec__arrays_of_records__basic_record__first_value

function us_split_fields_Second_Value__projection(a: us_split_fields) : value =
  (a).rec__arrays_of_records__basic_record__second_value

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((((a).us_split_fields1).rec__arrays_of_records__basic_record__flag = ((b).us_split_fields1).rec__arrays_of_records__basic_record__flag) and
  (to_rep(((a).us_split_fields1).rec__arrays_of_records__basic_record__first_value) = to_rep(((b).us_split_fields1).rec__arrays_of_records__basic_record__first_value))) and
  (to_rep(((a).us_split_fields1).rec__arrays_of_records__basic_record__second_value) = to_rep(((b).us_split_fields1).rec__arrays_of_records__basic_record__second_value))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((((a).us_split_fields1).rec__arrays_of_records__basic_record__flag = ((b).us_split_fields1).rec__arrays_of_records__basic_record__flag) and
  (to_rep(((a).us_split_fields1).rec__arrays_of_records__basic_record__first_value) = to_rep(((b).us_split_fields1).rec__arrays_of_records__basic_record__first_value))) and
  (to_rep(((a).us_split_fields1).rec__arrays_of_records__basic_record__second_value) = to_rep(((b).us_split_fields1).rec__arrays_of_records__basic_record__second_value)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:value. forall a2:value. (0 <= object__size({
  us_split_fields1 = { rec__arrays_of_records__basic_record__flag = a;
  rec__arrays_of_records__basic_record__first_value = a1;
  rec__arrays_of_records__basic_record__second_value = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:value. forall a2:value. (0 <= object__alignment({
  us_split_fields1 = { rec__arrays_of_records__basic_record__flag = a;
  rec__arrays_of_records__basic_record__first_value = a1;
  rec__arrays_of_records__basic_record__second_value = a2 } })))

logic arrays_of_records__basic_record__flag__first__bit : int

logic arrays_of_records__basic_record__flag__last__bit : int

logic arrays_of_records__basic_record__flag__position : int

axiom arrays_of_records__basic_record__flag__first__bit_axiom :
  (0 <= arrays_of_records__basic_record__flag__first__bit)

axiom arrays_of_records__basic_record__flag__last__bit_axiom :
  (arrays_of_records__basic_record__flag__first__bit <  arrays_of_records__basic_record__flag__last__bit)

axiom arrays_of_records__basic_record__flag__position_axiom :
  (0 <= arrays_of_records__basic_record__flag__position)

logic arrays_of_records__basic_record__first_value__first__bit : int

logic arrays_of_records__basic_record__first_value__last__bit : int

logic arrays_of_records__basic_record__first_value__position : int

axiom arrays_of_records__basic_record__first_value__first__bit_axiom :
  (0 <= arrays_of_records__basic_record__first_value__first__bit)

axiom arrays_of_records__basic_record__first_value__last__bit_axiom :
  (arrays_of_records__basic_record__first_value__first__bit <  arrays_of_records__basic_record__first_value__last__bit)

axiom arrays_of_records__basic_record__first_value__position_axiom :
  (0 <= arrays_of_records__basic_record__first_value__position)

logic arrays_of_records__basic_record__second_value__first__bit : int

logic arrays_of_records__basic_record__second_value__last__bit : int

logic arrays_of_records__basic_record__second_value__position : int

axiom arrays_of_records__basic_record__second_value__first__bit_axiom :
  (0 <= arrays_of_records__basic_record__second_value__first__bit)

axiom arrays_of_records__basic_record__second_value__last__bit_axiom :
  (arrays_of_records__basic_record__second_value__first__bit <  arrays_of_records__basic_record__second_value__last__bit)

axiom arrays_of_records__basic_record__second_value__position_axiom :
  (0 <= arrays_of_records__basic_record__second_value__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : value

logic dummy3 : value

type basic_record__ref = { basic_record__content : us_rep
}

function basic_record__ref___projection(a: basic_record__ref) : us_rep =
  (a).basic_record__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "arrays_of_records.adb", line 42, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,us_rep) farray. forall o:value. forall o1:bool.
  forall o2:value. forall o3:value. forall o4:bool. forall o5:value.
  forall o6:value. forall o7:(int,us_rep) farray. forall o8:value.
  forall o9:bool. forall o10:value. forall o11:value. forall o12:bool.
  forall o13:value. forall o14:value. forall o15:(int,us_rep) farray.
  forall result:(int,us_rep) farray. forall a1:(int,us_rep) farray.
  forall result1:(int,us_rep) farray. forall a2:(int,us_rep) farray.
  forall result2:(int,us_rep) farray. forall a3:(int,us_rep) farray. ((({
  map__content = result } = { map__content = a }) and (a1 = (a[17 <- {
  us_split_fields1 = { rec__arrays_of_records__basic_record__flag =
  of_int(1); rec__arrays_of_records__basic_record__first_value =
  (((a[17])).us_split_fields1).rec__arrays_of_records__basic_record__first_value;
  rec__arrays_of_records__basic_record__second_value =
  (((a[17])).us_split_fields1).rec__arrays_of_records__basic_record__second_value
  } }]))) -> ((((((to_rep(o) = 42) and
  (((((a1[17])).us_split_fields1).rec__arrays_of_records__basic_record__flag = o1) and
  ((o = o2) and
  ((((a1[17])).us_split_fields1).rec__arrays_of_records__basic_record__second_value = o3)))) and
  ((o4 = o1) and ((o5 = o2) and (o6 = o3)))) and (o7 = (a1[17 <- {
  us_split_fields1 = { rec__arrays_of_records__basic_record__flag = o4;
  rec__arrays_of_records__basic_record__first_value = o5;
  rec__arrays_of_records__basic_record__second_value = o6 } }]))) and
  ((a1 = result1) and (a2 = o7))) -> ((((((to_rep(o8) = 23) and
  (((((a2[101])).us_split_fields1).rec__arrays_of_records__basic_record__flag = o9) and
  (((((a2[101])).us_split_fields1).rec__arrays_of_records__basic_record__first_value = o10) and
  (o8 = o11)))) and ((o12 = o9) and ((o13 = o10) and (o14 = o11)))) and
  (o15 = (a2[101 <- { us_split_fields1 = {
  rec__arrays_of_records__basic_record__flag = o12;
  rec__arrays_of_records__basic_record__first_value = o13;
  rec__arrays_of_records__basic_record__second_value = o14 } }]))) and
  ((a2 = result2) and (a3 = o15))) ->
  (to_rep((((a3[101])).us_split_fields1).rec__arrays_of_records__basic_record__second_value) = 23)))))
