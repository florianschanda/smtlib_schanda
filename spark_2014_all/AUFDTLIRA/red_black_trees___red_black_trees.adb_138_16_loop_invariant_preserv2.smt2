(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant ((temp___expr_170 Int) (temp___is_init_166 Bool) (temp___skip_constant_167 Bool) (temp___do_toplevel_168 Bool) (temp___do_typ_inv_169 Bool)) Bool (=> (or (= temp___is_init_166 true) (<= 0 2147483647)) (in_range1 temp___expr_170)))
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)))))
(define-fun default_initial_assumption ((temp___expr_234 us_rep) (temp___skip_top_level_235 Bool)) Bool (=> (not (= temp___skip_top_level_235 true)) (= (length temp___expr_234) 0)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(declare-sort extended_index_type 0)
(declare-fun extended_index_typeqtint (extended_index_type) Int)
(assert (forall ((i extended_index_type)) (and (<= 0 (extended_index_typeqtint i)) (<= (extended_index_typeqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (extended_index_type extended_index_type) Bool)
(declare-const dummy2 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(define-fun to_rep ((x extended_index_type)) Int (extended_index_typeqtint x))
(declare-fun of_rep (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x extended_index_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort position_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (position_type position_type) Bool)
(declare-const dummy3 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep1 (position_type) Int)
(declare-fun of_rep1 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x position_type)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 a))) (to_rep (rec__binary_trees__cell__left (us_split_fields1 b)))) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 a))) (to_rep (rec__binary_trees__cell__right (us_split_fields1 b))))) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 a))) (to_rep (rec__binary_trees__cell__parent (us_split_fields1 b))))) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 a))) (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep1)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep1 (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq1 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq1 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-const dummy5 (Array Int us_rep1))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int us_rep1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep1)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int us_rep1)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep1))))))
(define-fun us_split_fields_S__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields2)) (Array Int us_rep1) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields3 a))) (to_rep (rec__binary_trees__forest__s (us_split_fields3 b)))) (= (bool_eq2 (rec__binary_trees__forest__c (us_split_fields3 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields3 b)) 1 100) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep2)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep2 (forest__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (natural natural) Bool)
(declare-const dummy7 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep2 (select a temp___idx_156)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep2 (select a temp___idx_156)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-const dummy8 (Array Int natural))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int natural)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq8 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__search_trees__search_tree__root extended_index_type) (rec__search_trees__search_tree__struct us_rep2) (rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields4)) extended_index_type (rec__search_trees__search_tree__root a))
(define-fun us_split_fields_Struct__projection ((a us_split_fields4)) us_rep2 (rec__search_trees__search_tree__struct a))
(define-fun us_split_fields_Values__projection ((a us_split_fields4)) (Array Int natural) (rec__search_trees__search_tree__values a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___4__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 a))) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 b)))) (= (bool_eq3 (rec__search_trees__search_tree__struct (us_split_fields5 a)) (rec__search_trees__search_tree__struct (us_split_fields5 b))) true)) (= (bool_eq4 (rec__search_trees__search_tree__values (us_split_fields5 a)) 1 100 (rec__search_trees__search_tree__values (us_split_fields5 b)) 1 100) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep3) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep3) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))
(declare-const search_trees__search_tree__root__first__bit Int)
(declare-const search_trees__search_tree__root__last__bit Int)
(declare-const search_trees__search_tree__root__position Int)
(assert (<= 0 search_trees__search_tree__root__first__bit))
(assert (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))
(assert (<= 0 search_trees__search_tree__root__position))
(declare-const search_trees__search_tree__struct__first__bit Int)
(declare-const search_trees__search_tree__struct__last__bit Int)
(declare-const search_trees__search_tree__struct__position Int)
(assert (<= 0 search_trees__search_tree__struct__first__bit))
(assert (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))
(assert (<= 0 search_trees__search_tree__struct__position))
(declare-const search_trees__search_tree__values__first__bit Int)
(declare-const search_trees__search_tree__values__last__bit Int)
(declare-const search_trees__search_tree__values__position Int)
(assert (<= 0 search_trees__search_tree__values__first__bit))
(assert (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))
(assert (<= 0 search_trees__search_tree__values__position))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep3)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep3 (search_tree__content a))
(declare-fun size (us_rep3) Int)
(declare-fun size__function_guard (Int us_rep3) Bool)
(declare-fun size1 (us_rep2) Int)
(declare-fun size__function_guard1 (Int us_rep2) Bool)
(define-fun dynamic_invariant1 ((temp___expr_184 Int) (temp___is_init_180 Bool) (temp___skip_constant_181 Bool) (temp___do_toplevel_182 Bool) (temp___do_typ_inv_183 Bool)) Bool (=> (or (= temp___is_init_180 true) (<= 0 100)) (in_range2 temp___expr_184)))
(declare-fun valid_root (us_rep2 Int) Bool)
(declare-fun valid_root__function_guard (Bool us_rep2 Int) Bool)
(declare-fun tree_structure (us_rep2) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep2) Bool)
(declare-fun ordered_leafs (us_rep2 Int (Array Int natural)) Bool)
(declare-fun ordered_leafs__function_guard (Bool us_rep2 Int (Array Int natural)) Bool)
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq10 (index_type index_type) Bool)
(declare-const dummy10 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-fun temp_____aggregate_def_434 (Int) (Array Int natural))
(define-fun dynamic_invariant2 ((temp___expr_422 us_rep3) (temp___is_init_418 Bool) (temp___skip_constant_419 Bool) (temp___do_toplevel_420 Bool) (temp___do_typ_inv_421 Bool)) Bool (and (=> (= temp___do_typ_inv_421 true) (ite (= (size1 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_422))) 0) (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___expr_422))) 0) (and (and (not (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___expr_422))) 0)) (= (valid_root (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_422)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___expr_422)))) true)) (= (ordered_leafs (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_422)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___expr_422))) (rec__search_trees__search_tree__values (us_split_fields5 temp___expr_422))) true)))) (=> (= temp___do_typ_inv_421 true) (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_422))) true))))
(define-fun default_initial_assumption1 ((temp___expr_427 us_rep3) (temp___skip_top_level_428 Bool)) Bool (and (and (and (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___expr_427))) 0) (and (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_427))))) 0) (forall ((temp___431 Int)) (=> (and (<= 1 temp___431) (<= temp___431 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_427)))) temp___431)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_427)))) temp___431)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_427)))) temp___431)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_427)))) temp___431)))) 2))))) (= (size1 (rec__search_trees__search_tree__struct (us_split_fields5 temp___expr_427))) 0))) (= (rec__search_trees__search_tree__values (us_split_fields5 temp___expr_427)) (temp_____aggregate_def_434 0))) (=> (not (= temp___skip_top_level_428 true)) (= (size temp___expr_427) 0))))
(define-fun type_invariant ((temp___439 us_rep3)) Bool (ite (= (size1 (rec__search_trees__search_tree__struct (us_split_fields5 temp___439))) 0) (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___439))) 0) (and (and (not (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___439))) 0)) (= (valid_root (rec__search_trees__search_tree__struct (us_split_fields5 temp___439)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___439)))) true)) (= (ordered_leafs (rec__search_trees__search_tree__struct (us_split_fields5 temp___439)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___439))) (rec__search_trees__search_tree__values (us_split_fields5 temp___439))) true))))
(assert (forall ((t us_rep3)) (! (=> (dynamic_invariant2 t true true true true) (dynamic_invariant1 (size t) true false true true)) :pattern ((size t)))))
(assert (forall ((t us_rep3)) (! (=> (dynamic_invariant2 t true true true true) (= (size t) (size1 (rec__search_trees__search_tree__struct (us_split_fields5 t))))) :pattern ((size t)))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__tree_model__path_type__a us_rep) (rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields6)) us_rep (rec__tree_model__path_type__a a))
(define-fun us_split_fields_K__projection ((a us_split_fields6)) Bool (rec__tree_model__path_type__k a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep4 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___projection ((a us_rep4)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq6 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (user_eq (rec__tree_model__path_type__a (us_split_fields7 a)) (rec__tree_model__path_type__a (us_split_fields7 b))) true) (= (rec__tree_model__path_type__k (us_split_fields7 a)) (rec__tree_model__path_type__k (us_split_fields7 b)))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep4) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep4) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))
(declare-const tree_model__path_type__a__first__bit Int)
(declare-const tree_model__path_type__a__last__bit Int)
(declare-const tree_model__path_type__a__position Int)
(assert (<= 0 tree_model__path_type__a__first__bit))
(assert (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))
(assert (<= 0 tree_model__path_type__a__position))
(declare-const tree_model__path_type__k__first__bit Int)
(declare-const tree_model__path_type__k__last__bit Int)
(declare-const tree_model__path_type__k__position Int)
(assert (<= 0 tree_model__path_type__k__first__bit))
(assert (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))
(assert (<= 0 tree_model__path_type__k__position))
(declare-fun user_eq11 (us_rep4 us_rep4) Bool)
(declare-const dummy11 us_rep4)
(declare-datatypes () ((path_type__ref (mk_path_type__ref (path_type__content us_rep4)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep4 (path_type__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep4))))))
(declare-fun slide2 ((Array Int us_rep4) Int Int) (Array Int us_rep4))
(assert (forall ((a (Array Int us_rep4))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int us_rep4))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int us_rep4)) (a__first Int) (a__last Int) (b (Array Int us_rep4)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq6 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep4)) (b (Array Int us_rep4))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq6 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-fun model__ (us_rep3) (Array Int us_rep4))
(declare-fun model____function_guard ((Array Int us_rep4) us_rep3) Bool)
(declare-fun model__1 (us_rep2 Int) (Array Int us_rep4))
(declare-fun model____function_guard1 ((Array Int us_rep4) us_rep2 Int) Bool)
(define-fun dynamic_invariant3 ((temp___expr_253 (Array Int us_rep4)) (temp___is_init_249 Bool) (temp___skip_constant_250 Bool) (temp___do_toplevel_251 Bool) (temp___do_typ_inv_252 Bool)) Bool (forall ((temp___254 Int)) (=> (and (<= 1 temp___254) (<= temp___254 100)) (=> (= temp___is_init_249 true) (< (length (rec__tree_model__path_type__a (us_split_fields7 (select temp___expr_253 temp___254)))) 100)))))
(define-fun default_initial_assumption2 ((temp___expr_256 (Array Int us_rep4)) (temp___skip_top_level_257 Bool)) Bool (forall ((temp___258 Int)) (=> (and (<= 1 temp___258) (<= temp___258 100)) (and (= (length (rec__tree_model__path_type__a (us_split_fields7 (select temp___expr_256 temp___258)))) 0) (= (rec__tree_model__path_type__k (us_split_fields7 (select temp___expr_256 temp___258))) (distinct 0 0))))))
(assert (forall ((t us_rep3)) (! (=> (and (dynamic_invariant2 t true true true true) (not (= (size t) 0))) (dynamic_invariant3 (model__ t) true false true true)) :pattern ((model__ t)))))
(assert (forall ((t us_rep3)) (! (=> (dynamic_invariant2 t true true true true) (= (model__ t) (model__1 (rec__search_trees__search_tree__struct (us_split_fields5 t)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 t)))))) :pattern ((model__ t)))))
(declare-fun peek (us_rep3 Int Int) Int)
(declare-fun peek__function_guard (Int us_rep3 Int Int) Bool)
(declare-fun peek1 (us_rep2 Int Int) Int)
(declare-fun peek__function_guard1 (Int us_rep2 Int Int) Bool)
(define-fun dynamic_invariant4 ((temp___expr_177 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool) (temp___do_typ_inv_176 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 1 100)) (in_range5 temp___expr_177)))
(declare-sort direction 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq12 (direction direction) Bool)
(declare-const dummy12 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(define-fun dynamic_invariant5 ((temp___expr_198 Int) (temp___is_init_194 Bool) (temp___skip_constant_195 Bool) (temp___do_toplevel_196 Bool) (temp___do_typ_inv_197 Bool)) Bool (=> (or (= temp___is_init_194 true) (<= 0 1)) (in_range6 temp___expr_198)))
(assert (forall ((t us_rep3)) (forall ((i Int) (d Int)) (! (=> (and (and (and (dynamic_invariant2 t true true true true) (dynamic_invariant4 i true true true true)) (dynamic_invariant5 d true true true true)) (and (not (= (size t) 0)) (= (rec__tree_model__path_type__k (us_split_fields7 (let ((temp___466 (model__ t))) (select temp___466 i)))) true))) (dynamic_invariant1 (peek t i d) true false true true)) :pattern ((peek t i d))))))
(assert (forall ((t us_rep3)) (forall ((i Int) (d Int)) (! (=> (and (and (dynamic_invariant2 t true true true true) (dynamic_invariant4 i true true true true)) (dynamic_invariant5 d true true true true)) (= (peek t i d) (peek1 (rec__search_trees__search_tree__struct (us_split_fields5 t)) i d))) :pattern ((peek t i d))))))
(declare-sort tcount_typeB 0)
(declare-fun tcount_typeBqtint (tcount_typeB) Int)
(assert (forall ((i tcount_typeB)) (and (<= (- 2147483648) (tcount_typeBqtint i)) (<= (tcount_typeBqtint i) 2147483647))))
(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq13 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy13 tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort color_type 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq14 (color_type color_type) Bool)
(declare-const dummy14 color_type)
(declare-datatypes () ((color_type__ref (mk_color_type__ref (color_type__content color_type)))))
(define-fun color_type__ref___projection ((a color_type__ref)) color_type (color_type__content a))
(declare-fun to_rep3 (color_type) Int)
(declare-fun of_rep3 (Int) color_type)
(assert (forall ((x color_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x color_type)) (! (in_range8 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int color_type))))))
(declare-fun slide3 ((Array Int color_type) Int Int) (Array Int color_type))
(assert (forall ((a (Array Int color_type))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int color_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq8 ((a (Array Int color_type)) (a__first Int) (a__last Int) (b (Array Int color_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (to_rep3 (select a temp___idx_157)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_157))))))) true false))
(assert (forall ((a (Array Int color_type)) (b (Array Int color_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq8 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (to_rep3 (select a temp___idx_157)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_157)))))))))))
(declare-const dummy15 (Array Int color_type))
(declare-const value__size7 Int)
(declare-fun object__size7 ((Array Int color_type)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int color_type)) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 ((Array Int color_type)) Int)
(assert (<= 0 value__size7))
(assert (forall ((a (Array Int color_type))) (<= 0 (object__size7 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int color_type))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a (Array Int color_type))) (<= 0 (object__alignment7 a))))
(declare-fun user_eq15 ((Array Int color_type) (Array Int color_type)) Bool)
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__red_black_trees__rbt__struct us_rep3) (rec__red_black_trees__rbt__color (Array Int color_type))))))
(define-fun us_split_fields_Struct__2__projection ((a us_split_fields8)) us_rep3 (rec__red_black_trees__rbt__struct a))
(define-fun us_split_fields_Color__projection ((a us_split_fields8)) (Array Int color_type) (rec__red_black_trees__rbt__color a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep5 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___5__projection ((a us_rep5)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq9 ((a us_rep5) (b us_rep5)) Bool (ite (and (= (bool_eq5 (rec__red_black_trees__rbt__struct (us_split_fields9 a)) (rec__red_black_trees__rbt__struct (us_split_fields9 b))) true) (= (bool_eq8 (rec__red_black_trees__rbt__color (us_split_fields9 a)) 1 100 (rec__red_black_trees__rbt__color (us_split_fields9 b)) 1 100) true)) true false))
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep5) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep5) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep5)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment8 a))))
(declare-const red_black_trees__rbt__struct__first__bit Int)
(declare-const red_black_trees__rbt__struct__last__bit Int)
(declare-const red_black_trees__rbt__struct__position Int)
(assert (<= 0 red_black_trees__rbt__struct__first__bit))
(assert (< red_black_trees__rbt__struct__first__bit red_black_trees__rbt__struct__last__bit))
(assert (<= 0 red_black_trees__rbt__struct__position))
(declare-const red_black_trees__rbt__color__first__bit Int)
(declare-const red_black_trees__rbt__color__last__bit Int)
(declare-const red_black_trees__rbt__color__position Int)
(assert (<= 0 red_black_trees__rbt__color__first__bit))
(assert (< red_black_trees__rbt__color__first__bit red_black_trees__rbt__color__last__bit))
(assert (<= 0 red_black_trees__rbt__color__position))
(declare-fun user_eq16 (us_rep5 us_rep5) Bool)
(declare-const dummy16 us_rep5)
(declare-datatypes () ((rbt__ref (mk_rbt__ref (rbt__content us_rep5)))))
(define-fun rbt__ref___projection ((a rbt__ref)) us_rep5 (rbt__content a))
(declare-fun invariant__ (us_rep5) Bool)
(declare-fun invariant____function_guard (Bool us_rep5) Bool)
(declare-fun temp_____aggregate_def_549 (Int) (Array Int color_type))
(define-fun dynamic_invariant6 ((temp___expr_534 us_rep5) (temp___is_init_530 Bool) (temp___skip_constant_531 Bool) (temp___do_toplevel_532 Bool) (temp___do_typ_inv_533 Bool)) Bool (and (=> (= temp___do_typ_inv_533 true) (let ((temp___535 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_534)))) (ite (= (size1 (rec__search_trees__search_tree__struct (us_split_fields5 temp___535))) 0) (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___535))) 0) (and (and (not (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___535))) 0)) (= (valid_root (rec__search_trees__search_tree__struct (us_split_fields5 temp___535)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___535)))) true)) (= (ordered_leafs (rec__search_trees__search_tree__struct (us_split_fields5 temp___535)) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 temp___535))) (rec__search_trees__search_tree__values (us_split_fields5 temp___535))) true))))) (=> (= temp___do_typ_inv_533 true) (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_534))))) true))))
(define-fun default_initial_assumption3 ((temp___expr_540 us_rep5) (temp___skip_top_level_541 Bool)) Bool (and (and (and (and (= (to_rep (rec__search_trees__search_tree__root (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540))))) 0) (and (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540))))))) 0) (forall ((temp___545 Int)) (=> (and (<= 1 temp___545) (<= temp___545 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540)))))) temp___545)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540)))))) temp___545)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540)))))) temp___545)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540)))))) temp___545)))) 2))))) (= (size1 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540))))) 0))) (= (rec__search_trees__search_tree__values (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540)))) (temp_____aggregate_def_434 0))) (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 temp___expr_540))) 0)) (= (rec__red_black_trees__rbt__color (us_split_fields9 temp___expr_540)) (temp_____aggregate_def_549 0))))
(define-fun type_invariant1 ((temp___554 us_rep5)) Bool (= (invariant__ temp___554) true))
(declare-datatypes () ((us_split_fields10 (mk___split_fields5 (rec__red_black_trees__black_count__status Bool) (rec__red_black_trees__black_count__depth extended_index_type) (rec__red_black_trees__black_count__count extended_index_type)))))
(define-fun us_split_fields_Status__projection ((a us_split_fields10)) Bool (rec__red_black_trees__black_count__status a))
(define-fun us_split_fields_Depth__projection ((a us_split_fields10)) extended_index_type (rec__red_black_trees__black_count__depth a))
(define-fun us_split_fields_Count__projection ((a us_split_fields10)) extended_index_type (rec__red_black_trees__black_count__count a))
(declare-datatypes () ((us_split_fields__ref5 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref5)) us_split_fields10 (us_split_fields__content5 a))
(declare-datatypes () ((us_rep6 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___6__projection ((a us_rep6)) us_split_fields10 (us_split_fields11 a))
(define-fun bool_eq10 ((a us_rep6) (b us_rep6)) Bool (ite (and (and (= (rec__red_black_trees__black_count__status (us_split_fields11 a)) (rec__red_black_trees__black_count__status (us_split_fields11 b))) (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 a))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 b))))) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 a))) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 b))))) true false))
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep6) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep6) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep6)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment9 a))))
(declare-const red_black_trees__black_count__status__first__bit Int)
(declare-const red_black_trees__black_count__status__last__bit Int)
(declare-const red_black_trees__black_count__status__position Int)
(assert (<= 0 red_black_trees__black_count__status__first__bit))
(assert (< red_black_trees__black_count__status__first__bit red_black_trees__black_count__status__last__bit))
(assert (<= 0 red_black_trees__black_count__status__position))
(declare-const red_black_trees__black_count__depth__first__bit Int)
(declare-const red_black_trees__black_count__depth__last__bit Int)
(declare-const red_black_trees__black_count__depth__position Int)
(assert (<= 0 red_black_trees__black_count__depth__first__bit))
(assert (< red_black_trees__black_count__depth__first__bit red_black_trees__black_count__depth__last__bit))
(assert (<= 0 red_black_trees__black_count__depth__position))
(declare-const red_black_trees__black_count__count__first__bit Int)
(declare-const red_black_trees__black_count__count__last__bit Int)
(declare-const red_black_trees__black_count__count__position Int)
(assert (<= 0 red_black_trees__black_count__count__first__bit))
(assert (< red_black_trees__black_count__count__first__bit red_black_trees__black_count__count__last__bit))
(assert (<= 0 red_black_trees__black_count__count__position))
(declare-fun user_eq17 (us_rep6 us_rep6) Bool)
(declare-const dummy17 us_rep6)
(declare-datatypes () ((black_count__ref (mk_black_count__ref (black_count__content us_rep6)))))
(define-fun black_count__ref___projection ((a black_count__ref)) us_rep6 (black_count__content a))
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int us_rep6))))))
(declare-fun slide4 ((Array Int us_rep6) Int Int) (Array Int us_rep6))
(assert (forall ((a (Array Int us_rep6))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int us_rep6))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq11 ((a (Array Int us_rep6)) (a__first Int) (a__last Int) (b (Array Int us_rep6)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (bool_eq10 (select a temp___idx_158) (select b (+ (- b__first a__first) temp___idx_158))) true)))) true false))
(assert (forall ((a (Array Int us_rep6)) (b (Array Int us_rep6))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq11 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (bool_eq10 (select a temp___idx_158) (select b (+ (- b__first a__first) temp___idx_158))) true))))))))
(declare-const t us_rep5)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const m (Array Int us_rep4))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort t8b 0)
(declare-fun t8bqtint (t8b) Int)
(assert (forall ((i t8b)) (and (<= 0 (t8bqtint i)) (<= (t8bqtint i) 99))))
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq18 (t8b t8b) Bool)
(declare-const dummy18 t8b)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content t8b)))))
(define-fun t8b__ref___projection ((a t8b__ref)) t8b (t8b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const count_r us_rep6)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const count_l us_rep6)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun red_black_trees__nb_blacks__res__aggregate_def (us_rep6 us_rep6) (Array Int us_rep6))
(define-fun dynamic_invariant7 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(declare-fun nb_blacks (us_rep5) (Array Int us_rep6))
(declare-fun nb_blacks__function_guard ((Array Int us_rep6) us_rep5) Bool)
(declare-const rliteral extended_index_type)
(assert (= (extended_index_typeqtint rliteral) 0))
(assert (forall ((t1 us_rep5)) (! (=> (and (dynamic_invariant6 t1 true true true true) (not (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 t1))) 0))) (let ((result (nb_blacks t1))) (and (= (bool_eq10 (select result 0) (mk___rep5 (mk___split_fields5 (distinct 1 0) rliteral rliteral))) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields7 (let ((temp___616 (model__ (rec__red_black_trees__rbt__struct (us_split_fields9 t1))))) (select temp___616 i)))) true) (and (and (= (= (rec__red_black_trees__black_count__status (us_split_fields11 (select result i))) true) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 0))))) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 1))))))) (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select result i)))) (+ 1 (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 0))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 1)))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 1))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 0))))))))) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select result i)))) (+ (ite (= (to_rep3 (let ((temp___615 (rec__red_black_trees__rbt__color (us_split_fields9 t1)))) (select temp___615 i))) 0) 1 0) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select result (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i 0)))))))))))))) :pattern ((nb_blacks t1)))))
(assert (forall ((temp___1044 us_rep6) (temp___1045 us_rep6)) (let ((temp___1043 (red_black_trees__nb_blacks__res__aggregate_def temp___1044 temp___1045))) (forall ((temp___1046 Int)) (ite (= temp___1046 0) (= (select temp___1043 temp___1046) temp___1044) (= (select temp___1043 temp___1046) temp___1045))))))
(assert (= m (model__ (rec__red_black_trees__rbt__struct (us_split_fields9 t)))))
(define-fun dynamic_invariant8 ((temp___expr_517 Int) (temp___is_init_513 Bool) (temp___skip_constant_514 Bool) (temp___do_toplevel_515 Bool) (temp___do_typ_inv_516 Bool)) Bool (=> (or (= temp___is_init_513 true) (<= 0 1)) (in_range8 temp___expr_517)))
(assert (forall ((temp___551 Int)) (=> (dynamic_invariant8 temp___551 true true true true) (forall ((temp___552 Int)) (= (to_rep3 (select (temp_____aggregate_def_549 temp___551) temp___552)) temp___551)))))
(declare-fun same_nb_blacks (us_rep5) Bool)
(declare-fun same_nb_blacks__function_guard (Bool us_rep5) Bool)
(assert true)
(assert (forall ((t1 us_rep5)) (! (= (= (same_nb_blacks t1) true) (or (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 t1))) 0) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields7 (let ((temp___585 (model__ (rec__red_black_trees__rbt__struct (us_split_fields9 t1))))) (select temp___585 i)))) true) (= (rec__red_black_trees__black_count__status (us_split_fields11 (let ((temp___584 (nb_blacks t1))) (select temp___584 i)))) true)))))) :pattern ((same_nb_blacks t1)))))
(declare-fun parent (us_rep3 Int) Int)
(declare-fun parent__function_guard (Int us_rep3 Int) Bool)
(assert true)
(assert (forall ((t1 us_rep5)) (! (= (= (invariant__ t1) true) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (or (= (parent (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i) 0) (= (to_rep3 (let ((temp___589 (rec__red_black_trees__rbt__color (us_split_fields9 t1)))) (select temp___589 (parent (rec__red_black_trees__rbt__struct (us_split_fields9 t1)) i)))) 1)) (= (to_rep3 (let ((temp___588 (rec__red_black_trees__rbt__color (us_split_fields9 t1)))) (select temp___588 i))) 0)))) (= (same_nb_blacks t1) true))) :pattern ((invariant__ t1)))))
(define-fun dynamic_invariant9 ((temp___expr_191 Int) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool) (temp___do_typ_inv_190 Bool)) Bool (=> (or (= temp___is_init_187 true) (<= 0 2)) (in_range3 temp___expr_191)))
(define-fun dynamic_invariant10 ((temp___expr_241 us_rep4) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool (=> (= temp___do_toplevel_239 true) (=> (= temp___is_init_237 true) (< (length (rec__tree_model__path_type__a (us_split_fields7 temp___expr_241))) 100))))
(define-fun default_initial_assumption4 ((temp___expr_243 us_rep4) (temp___skip_top_level_244 Bool)) Bool (and (= (length (rec__tree_model__path_type__a (us_split_fields7 temp___expr_243))) 0) (= (rec__tree_model__path_type__k (us_split_fields7 temp___expr_243)) (distinct 0 0))))
(define-fun dynamic_predicate ((temp___247 us_rep4)) Bool (< (length (rec__tree_model__path_type__a (us_split_fields7 temp___247))) 100))
(define-fun olt ((left us_rep) (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (forall ((d Int)) (! (= (= (is_add s1 d s2) true) (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true)) (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2))))))
(declare-fun parent1 (us_rep2 Int) Int)
(declare-fun parent__function_guard1 (Int us_rep2 Int) Bool)
(assert (forall ((t1 us_rep3)) (forall ((i Int)) (! (=> (and (dynamic_invariant2 t1 true true true true) (dynamic_invariant4 i true true true true)) (let ((result (parent t1 i))) (and (=> (= (size t1) 0) (= result 0)) (dynamic_invariant1 result true false true true)))) :pattern ((parent t1 i))))))
(assert (forall ((t1 us_rep3)) (forall ((i Int)) (! (=> (and (dynamic_invariant2 t1 true true true true) (dynamic_invariant4 i true true true true)) (= (parent t1 i) (parent1 (rec__search_trees__search_tree__struct (us_split_fields5 t1)) i))) :pattern ((parent t1 i))))))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 0))
(assert (forall ((temp___436 Int)) (=> (dynamic_invariant7 temp___436 true true true true) (forall ((temp___437 Int)) (= (select (temp_____aggregate_def_434 temp___436) temp___437) rliteral1)))))
(define-fun dynamic_invariant11 ((temp___expr_317 us_rep2) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool) (temp___do_typ_inv_316 Bool)) Bool (=> (= temp___do_typ_inv_316 true) (= (tree_structure temp___expr_317) true)))
(define-fun default_initial_assumption5 ((temp___expr_320 us_rep2) (temp___skip_top_level_321 Bool)) Bool (and (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields3 temp___expr_320))) 0) (forall ((temp___323 Int)) (=> (and (<= 1 temp___323) (<= temp___323 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_320)) temp___323)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_320)) temp___323)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_320)) temp___323)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (select (rec__binary_trees__forest__c (us_split_fields3 temp___expr_320)) temp___323)))) 2))))) (=> (not (= temp___skip_top_level_321 true)) (= (size1 temp___expr_320) 0))))
(define-fun type_invariant2 ((temp___326 us_rep2)) Bool (= (tree_structure temp___326) true))
(assert true)
(assert (forall ((f us_rep2)) (! (=> (dynamic_invariant11 f true true true true) (dynamic_invariant1 (size1 f) true false true true)) :pattern ((size1 f)))))
(assert (forall ((f us_rep2)) (forall ((i Int)) (! (=> (and (dynamic_invariant11 f true true true true) (dynamic_invariant4 i true true true true)) (=> (< (size1 f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root f i))))))
(assert (forall ((f us_rep2)) (forall ((i Int)) (! (=> (and (dynamic_invariant11 f true true true true) (dynamic_invariant4 i true true true true)) (let ((result (parent1 f i))) (and (and (=> (= (valid_root f i) true) (= result 0)) (=> (= (size1 f) 0) (= result 0))) (dynamic_invariant1 result true false true true)))) :pattern ((parent1 f i))))))
(declare-fun position (us_rep2 Int) Int)
(declare-fun position__function_guard (Int us_rep2 Int) Bool)
(assert (forall ((f us_rep2)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant11 f true true true true) (dynamic_invariant4 i true true true true)) (not (= (parent1 f i) 0))) (dynamic_invariant5 (position f i) true false true true)) :pattern ((position f i))))))
(assert (forall ((f us_rep2)) (forall ((i Int) (d Int)) (! (=> (and (and (dynamic_invariant11 f true true true true) (dynamic_invariant4 i true true true true)) (dynamic_invariant5 d true true true true)) (let ((result (peek1 f i d))) (and (and (ite (not (= result 0)) (and (= (position f result) d) (= (parent1 f result) i)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (= (parent1 f j) i) (not (= (position f j) d)))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (parent1 f j) i) (= (position f j) d)) (= result j))))) (dynamic_invariant1 result true false true true)))) :pattern ((peek1 f i d))))))
(assert (forall ((f us_rep2)) (forall ((root Int)) (! (=> (and (and (dynamic_invariant11 f true true true true) (dynamic_invariant4 root true true true true)) (= (valid_root f root) true)) (let ((result (model__1 f root))) (and (and (= (rec__tree_model__path_type__k (us_split_fields7 (select result root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields7 (select result root)))) 0) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= i root)) (ite (and (not (= (parent1 f i) 0)) (= (rec__tree_model__path_type__k (us_split_fields7 (select result (parent1 f i)))) true)) (= (rec__tree_model__path_type__k (us_split_fields7 (select result i))) true) (not (= (rec__tree_model__path_type__k (us_split_fields7 (select result i))) true)))))) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields7 (select result i))) true) (not (= i root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields7 (select result (parent1 f i)))) (position f i) (rec__tree_model__path_type__a (us_split_fields7 (select result i)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields7 (select result i)))) 0)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select result i))) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields7 (select result j))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields7 (select result i))) (rec__tree_model__path_type__a (us_split_fields7 (select result j)))) true)) (= j i))))))))))) (dynamic_invariant3 result true false true true)))) :pattern ((model__1 f root))))))
(define-fun default_initial_assumption6 ((temp___expr_301 us_rep1) (temp___skip_top_level_302 Bool)) Bool (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 temp___expr_301))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 temp___expr_301))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 temp___expr_301))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 temp___expr_301))) 2)))
(define-fun default_initial_assumption7 ((temp___expr_309 (Array Int us_rep1)) (temp___skip_top_level_310 Bool)) Bool (forall ((temp___311 Int)) (=> (and (<= 1 temp___311) (<= temp___311 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 (select temp___expr_309 temp___311)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields1 (select temp___expr_309 temp___311)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields1 (select temp___expr_309 temp___311)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields1 (select temp___expr_309 temp___311)))) 2)))))
(assert true)
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq19 (extended_index extended_index) Bool)
(declare-const dummy19 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant12 ((temp___expr_226 Int) (temp___is_init_222 Bool) (temp___skip_constant_223 Bool) (temp___do_toplevel_224 Bool) (temp___do_typ_inv_225 Bool)) Bool (=> (or (= temp___is_init_222 true) (<= 0 2147483647)) (in_range10 temp___expr_226)))
(declare-sort element_type 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq20 (element_type element_type) Bool)
(declare-const dummy20 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant13 ((temp___expr_219 Int) (temp___is_init_215 Bool) (temp___skip_constant_216 Bool) (temp___do_toplevel_217 Bool) (temp___do_typ_inv_218 Bool)) Bool (=> (or (= temp___is_init_215 true) (<= 0 1)) (in_range11 temp___expr_219)))
(assert (forall ((container us_rep)) (forall ((position1 Int)) (! (=> (and (dynamic_invariant12 position1 true true true true) (and (<= 1 position1) (<= position1 (last container)))) (dynamic_invariant13 (get container position1) true false true true)) :pattern ((get container position1))))))
(declare-const rliteral2 extended_index_type)
(assert (= (extended_index_typeqtint rliteral2) 100))
(declare-const res (Array Int us_rep6))
(declare-const n Int)
(declare-const red_black_trees__nb_blacks__m__assume (Array Int us_rep4))
(declare-const o Int)
(declare-const red_black_trees__nb_blacks__B_3__count_r__assume us_rep6)
(declare-const o1 Int)
(declare-const red_black_trees__nb_blacks__B_3__count_l__assume us_rep6)
(declare-const o2 extended_index_type)
(declare-const o3 us_split_fields10)
(declare-const o4 us_rep6)
(declare-const o5 (Array Int us_rep6))
(declare-const o6 Int)
(declare-const o7 extended_index_type)
(declare-const o8 us_split_fields10)
(declare-const o9 us_rep6)
(declare-const o10 (Array Int us_rep6))
(declare-const o11 extended_index_type)
(declare-const o12 us_split_fields10)
(declare-const o13 us_rep6)
(declare-const o14 (Array Int us_rep6))
(declare-const result map__ref4)
(declare-const res1 (Array Int us_rep6))
(declare-const result1 int__ref)
(declare-const n1 Int)
(declare-const res2 (Array Int us_rep6))
(declare-const n2 Int)
(declare-const i Int)
(declare-const result2 int__ref)
(declare-const i1 Int)
(declare-const res3 (Array Int us_rep6))
(declare-const i2 Int)
(declare-const result3 map__ref4)
(declare-const res4 (Array Int us_rep6))
(declare-const result4 map__ref4)
(declare-const res5 (Array Int us_rep6))
(declare-const result5 map__ref4)
(declare-const res6 (Array Int us_rep6))
(declare-const result6 map__ref4)
(declare-const res7 (Array Int us_rep6))
(declare-const result7 int__ref)
(declare-const i3 Int)
(assert (dynamic_invariant6 t true false true true))
(assert (not (= (size (rec__red_black_trees__rbt__struct (us_split_fields9 t))) 0)))
(assert (= result (mk_map__ref4 res)))
(assert (= res1 (red_black_trees__nb_blacks__res__aggregate_def (mk___rep5 (mk___split_fields5 (distinct 1 0) rliteral rliteral)) (mk___rep5 (mk___split_fields5 (distinct 0 0) rliteral2 rliteral2)))))
(assert (and (= red_black_trees__nb_blacks__m__assume (model__ (rec__red_black_trees__rbt__struct (us_split_fields9 t)))) (and (dynamic_invariant3 red_black_trees__nb_blacks__m__assume true false true true) (= red_black_trees__nb_blacks__m__assume (model__1 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 t)))) (to_rep (rec__search_trees__search_tree__root (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 t))))))))))
(assert (= red_black_trees__nb_blacks__m__assume m))
(assert (dynamic_invariant3 m true false true true))
(assert (= result1 (mk_int__ref n)))
(assert (= n1 0))
(assert (<= 0 n1))
(assert (<= n1 99))
(assert (= (bool_eq10 (select res2 0) (mk___rep5 (mk___split_fields5 (distinct 1 0) rliteral rliteral))) true))
(assert (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (<= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res2 i4)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 i4))))))))
(assert (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (or (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 i4)))) 100) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 i4)))) n2)))))
(assert (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m i4))) true) (< n2 (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 i4)))))) (< (length (rec__tree_model__path_type__a (us_split_fields7 (select m i4)))) (- 100 n2)) (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i4))) true) (and (and (and (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 i4)))) n2) (= (= (rec__red_black_trees__black_count__status (us_split_fields11 (select res2 i4))) true) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 0))))) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 1)))))))) (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 i4)))) (+ 1 (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 0))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 1)))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 1))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 0))))))))) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res2 i4)))) (+ (ite (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i4)) 0) 1 0) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i4 0)))))))))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true) (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))) n2)) (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1))))) n2)) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res2 j)))) n2)))))
(assert (and (=> (<= 0 99) (in_range9 n2)) (and (<= 0 n2) (<= n2 99))))
(assert (= result2 (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 100))
(assert (= (bool_eq10 (select res3 0) (mk___rep5 (mk___split_fields5 (distinct 1 0) rliteral rliteral))) true))
(assert (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (<= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res3 i4)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 i4))))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (or (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) 100) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) (+ n2 1))))))
(assert (forall ((j Int)) (=> (and (<= i2 j) (<= j 100)) (or (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) 100) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) n2)))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true) (< n2 (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))))) (< (length (rec__tree_model__path_type__a (us_split_fields7 (select m j)))) (- 100 n2))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (=> (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true) (< (+ n2 1) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))))) (< (length (rec__tree_model__path_type__a (us_split_fields7 (select m j)))) (- 100 (+ n2 1)))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true) (or (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) n2) (and (< j i2) (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) (+ n2 1))))) (and (and (= (= (rec__red_black_trees__black_count__status (us_split_fields11 (select res3 j))) true) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1))))))) (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) (+ 1 (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1)))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1))))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))))))) (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res3 j)))) (+ (ite (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) j)) 0) 1 0) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))))))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true) (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))) n2)) (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1))))) n2)) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) n2)))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))) n2)) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1))))) n2)) (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res3 j)))) (+ n2 1))))))
(assert (and (and (forall ((temp___1057 Int)) (=> (and (<= 0 temp___1057) (<= temp___1057 100)) (=> (or (< 100 temp___1057) (or (< temp___1057 1) (<= i2 temp___1057))) (= (select res3 temp___1057) (select res2 temp___1057))))) (=> (<= 1 100) (in_range5 i2))) (and (<= 1 i2) (<= i2 100))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (and (= o (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i2 1)) (and (in_range2 o) (= o (peek1 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 t)))) i2 1))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (= red_black_trees__nb_blacks__B_3__count_r__assume (select res3 o))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (= red_black_trees__nb_blacks__B_3__count_r__assume count_r)))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (and (= o1 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) i2 0)) (and (in_range2 o1) (= o1 (peek1 (rec__search_trees__search_tree__struct (us_split_fields5 (rec__red_black_trees__rbt__struct (us_split_fields9 t)))) i2 0))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (= red_black_trees__nb_blacks__B_3__count_l__assume (select res3 o1))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (= red_black_trees__nb_blacks__B_3__count_l__assume count_l)))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= (to_rep o2) (+ n2 1)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= o3 (mk___split_fields5 (rec__red_black_trees__black_count__status (us_split_fields11 (select res3 i2))) o2 (rec__red_black_trees__black_count__count (us_split_fields11 (select res3 i2))))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= o4 (mk___rep5 o3)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= o5 (store res3 i2 o4)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= result3 (mk_map__ref4 res3)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= res4 o5))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= result4 (mk_map__ref4 res4)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (= res5 (store res4 i2 (mk___rep5 (mk___split_fields5 (ite (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 count_l)))) true false) (rec__red_black_trees__black_count__depth (us_split_fields11 (select res4 i2))) (rec__red_black_trees__black_count__count (us_split_fields11 (select res4 i2))))))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (and (= o6 (+ (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 count_l))) 1)) (in_range2 (+ (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 count_l))) 1)))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (= (to_rep o7) o6)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (= o8 (mk___split_fields5 (rec__red_black_trees__black_count__status (us_split_fields11 (select res5 i2))) (rec__red_black_trees__black_count__depth (us_split_fields11 (select res5 i2))) o7))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (= o9 (mk___rep5 o8))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (= o10 (store res5 i2 o9))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (= result5 (mk_map__ref4 res5))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0) (= res6 o10)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= (to_rep o11) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 count_l))))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= o12 (mk___split_fields5 (rec__red_black_trees__black_count__status (us_split_fields11 (select res5 i2))) (rec__red_black_trees__black_count__depth (us_split_fields11 (select res5 i2))) o11))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= o13 (mk___rep5 o12))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= o14 (store res5 i2 o13))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= result6 (mk_map__ref4 res5))))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= res7 o14)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2) (=> (not (= (to_rep3 (select (rec__red_black_trees__rbt__color (us_split_fields9 t)) i2)) 0)) (= res6 res7)))))
(assert (=> (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true) (=> (not (= (ite (< (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l)))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_l))) (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 count_r)))) n2)) (= res6 res3))))
(assert (=> (not (= (rec__tree_model__path_type__k (us_split_fields7 (select m i2))) true)) (= res6 res3)))
(assert (not (= i2 100)))
(assert (= result7 (mk_int__ref i2)))
(assert (= i3 (+ i2 1)))
(declare-const j Int)
(assert (<= 1 j))
(assert (<= j 100))
(assert (= (rec__tree_model__path_type__k (us_split_fields7 (select m j))) true))
(assert (or (<= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res6 j)))) n2) (and (< j i3) (= (to_rep (rec__red_black_trees__black_count__depth (us_split_fields11 (select res6 j)))) (+ n2 1)))))
(assert (= (rec__red_black_trees__black_count__status (us_split_fields11 (select res6 j))) true))
(assert (not (= (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res6 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 0))))) (to_rep (rec__red_black_trees__black_count__count (us_split_fields11 (select res6 (peek (rec__red_black_trees__rbt__struct (us_split_fields9 t)) j 1))))))))
(check-sat)
(exit)
