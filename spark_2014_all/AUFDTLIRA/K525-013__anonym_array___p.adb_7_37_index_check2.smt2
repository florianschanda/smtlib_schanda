(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort txD1 0)
(declare-fun txD1qtint (txD1) Int)
(assert (forall ((i txD1)) (and (<= 1 (txD1qtint i)) (<= (txD1qtint i) 20))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (txD1 txD1) Bool)
(declare-const dummy1 txD1)
(declare-datatypes () ((txD1__ref (mk_txD1__ref (txD1__content txD1)))))
(define-fun txD1__ref___projection ((a1 txD1__ref)) txD1 (txD1__content a1))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a1 (Array Int integer))) (forall ((first Int)) (! (= (slide a1 first first) a1) :pattern ((slide a1 first first))))))
(assert (forall ((a1 (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a1 old_first new_first) i) (select a1 (- i (- new_first old_first)))) :pattern ((select (slide a1 old_first new_first) i))))))))
(define-fun bool_eq ((a1 (Array Int integer)) (a__first Int) (a__last Int) (b1 (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a1 temp___idx_154)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b1 b__first b__last a1 a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a1 temp___idx_154)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun p__x__aggregate_def (Int) (Array Int integer))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) (- 123)))
(assert (forall ((temp___156 Int)) (=> (dynamic_invariant temp___156 true true true true) (forall ((temp___157 Int)) (= (select (p__x__aggregate_def temp___156) temp___157) rliteral)))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 2))
(declare-const x (Array Int integer))
(declare-const o Int)
(declare-const o1 (Array Int integer))
(declare-const o2 Int)
(declare-const o3 (Array Int integer))
(declare-const result (Array Int integer))
(declare-const x1 (Array Int integer))
(declare-const result1 (Array Int integer))
(declare-const x2 (Array Int integer))
(declare-const result2 (Array Int integer))
(declare-const x3 (Array Int integer))
(assert (in_range1 a))
(assert (in_range1 b))
(assert (and (and (<= 1 a) (<= a 20)) (and (<= 1 b) (<= b 20))))
(assert (and (and (<= 1 a) (<= a 20)) (and (<= 1 b) (<= b 20))))
(assert (= result x))
(assert (= x1 (p__x__aggregate_def (- 123))))
(assert (and (<= 1 a) (<= a 20)))
(assert (= o a))
(assert (= o1 (store x1 o rliteral1)))
(assert (= result1 x1))
(assert (= x2 o1))
(assert (and (<= 1 b) (<= b 20)))
(assert (= o2 b))
(assert (= o3 (store x2 o2 rliteral2)))
(assert (= result2 x2))
(assert (= x3 o3))
(assert (not (= a b)))
(assert (not (<= 1 a)))
(check-sat)
(exit)
