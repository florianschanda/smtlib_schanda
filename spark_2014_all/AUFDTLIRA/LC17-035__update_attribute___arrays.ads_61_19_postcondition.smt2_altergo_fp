(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___340 : (int,integer) farray, int, int, int, int,
  int -> (int,integer) farray

logic temp___349 : int -> (int,integer) farray

logic temp___476 : int -> (int,integer) farray

logic temp___480 : (int,integer) farray, int, int, int, int,
  int -> (int,integer) farray

axiom def_axiom :
  (forall temp___478:int. (in_range(temp___478) ->
  (forall temp___479:int.
  (to_rep((temp___476(temp___478)[temp___479])) = temp___478))))

axiom def_axiom1 :
  (forall temp___482:(int,integer) farray.
  (forall temp___483:int. forall temp___484:int. forall temp___485:int.
  forall temp___486:int. forall temp___487:int.
  (((((in_range1(temp___483) and in_range(temp___484)) and
  in_range1(temp___485)) and in_range1(temp___486)) and
  in_range(temp___487)) ->
  (forall temp___488:int. ((((temp___485 <= temp___488) and
  (temp___488 <= temp___486)) -> (to_rep((temp___480(temp___482, temp___483,
  temp___484, temp___485, temp___486,
  temp___487)[temp___488])) = temp___487)) and
  ((not ((temp___485 <= temp___488) and (temp___488 <= temp___486))) ->
  (((temp___488 = temp___483) -> (to_rep((temp___480(temp___482, temp___483,
  temp___484, temp___485, temp___486,
  temp___487)[temp___488])) = temp___484)) and
  ((not (temp___488 = temp___483)) -> ((temp___480(temp___482, temp___483,
  temp___484, temp___485, temp___486,
  temp___487)[temp___488]) = (temp___482[temp___488]))))))))))

axiom def_axiom2 :
  (forall temp___351:int. (in_range(temp___351) ->
  (forall temp___352:int.
  (to_rep((temp___349(temp___351)[temp___352])) = temp___351))))

axiom def_axiom3 :
  (forall temp___342:(int,integer) farray.
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  forall temp___346:int. forall temp___347:int.
  (((((in_range1(temp___343) and in_range(temp___344)) and
  in_range1(temp___345)) and in_range1(temp___346)) and
  in_range(temp___347)) ->
  (forall temp___348:int. ((((temp___345 <= temp___348) and
  (temp___348 <= temp___346)) -> (to_rep((temp___340(temp___342, temp___343,
  temp___344, temp___345, temp___346,
  temp___347)[temp___348])) = temp___347)) and
  ((not ((temp___345 <= temp___348) and (temp___348 <= temp___346))) ->
  (((temp___348 = temp___343) -> (to_rep((temp___340(temp___342, temp___343,
  temp___344, temp___345, temp___346,
  temp___347)[temp___348])) = temp___344)) and
  ((not (temp___348 = temp___343)) -> ((temp___340(temp___342, temp___343,
  temp___344, temp___345, temp___346,
  temp___347)[temp___348]) = (temp___342[temp___348]))))))))))

 (* File "arrays.adb", line 69, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall a:(int,integer) farray.
  forall result:(int,integer) farray. forall a1:(int,integer) farray.
  forall result1:(int,integer) farray. forall a2:(int,integer) farray.
  forall a3:(int,integer) farray. forall a4:(int,integer) farray.
  ((in_range(x) and (in_range1(i) and ((((result = a) and
  (a1 = temp___476(1))) and ((result1 = a1) and (a2 = temp___480(a1, i, 2, 4,
  5, x)))) and ((a2 = a3) and (a4 = a2))))) -> (bool_eq3(a3, 1, 8,
  temp___340(temp___349(1), i, 2, 4, 5, x), 1, 8) = true)))
