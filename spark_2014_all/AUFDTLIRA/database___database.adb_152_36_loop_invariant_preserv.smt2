(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-sort account_num 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 200000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (account_num account_num) Bool)
(declare-const dummy2 account_num)
(declare-datatypes () ((account_num__ref (mk_account_num__ref (account_num__content account_num)))))
(define-fun account_num__ref___projection ((a account_num__ref)) account_num (account_num__content a))
(declare-sort ext_account_num 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 200000)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (ext_account_num ext_account_num) Bool)
(declare-const dummy3 ext_account_num)
(declare-datatypes () ((ext_account_num__ref (mk_ext_account_num__ref (ext_account_num__content ext_account_num)))))
(define-fun ext_account_num__ref___projection ((a ext_account_num__ref)) ext_account_num (ext_account_num__content a))
(declare-fun to_rep (ext_account_num) Int)
(declare-fun of_rep (Int) ext_account_num)
(assert (forall ((x ext_account_num)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x ext_account_num)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__database__availability__account_link__available Bool) (rec__database__availability__account_link__prev ext_account_num) (rec__database__availability__account_link__next ext_account_num)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) Bool (rec__database__availability__account_link__available a))
(define-fun us_split_fields_Prev__projection ((a us_split_fields)) ext_account_num (rec__database__availability__account_link__prev a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) ext_account_num (rec__database__availability__account_link__next a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (rec__database__availability__account_link__available (us_split_fields1 a)) (rec__database__availability__account_link__available (us_split_fields1 b))) (= (to_rep (rec__database__availability__account_link__prev (us_split_fields1 a))) (to_rep (rec__database__availability__account_link__prev (us_split_fields1 b))))) (= (to_rep (rec__database__availability__account_link__next (us_split_fields1 a))) (to_rep (rec__database__availability__account_link__next (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const database__availability__account_link__available__first__bit Int)
(declare-const database__availability__account_link__available__last__bit Int)
(declare-const database__availability__account_link__available__position Int)
(assert (<= 0 database__availability__account_link__available__first__bit))
(assert (< database__availability__account_link__available__first__bit database__availability__account_link__available__last__bit))
(assert (<= 0 database__availability__account_link__available__position))
(declare-const database__availability__account_link__prev__first__bit Int)
(declare-const database__availability__account_link__prev__last__bit Int)
(declare-const database__availability__account_link__prev__position Int)
(assert (<= 0 database__availability__account_link__prev__first__bit))
(assert (< database__availability__account_link__prev__first__bit database__availability__account_link__prev__last__bit))
(assert (<= 0 database__availability__account_link__prev__position))
(declare-const database__availability__account_link__next__first__bit Int)
(declare-const database__availability__account_link__next__last__bit Int)
(declare-const database__availability__account_link__next__position Int)
(assert (<= 0 database__availability__account_link__next__first__bit))
(assert (< database__availability__account_link__next__first__bit database__availability__account_link__next__last__bit))
(assert (<= 0 database__availability__account_link__next__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((account_link__ref (mk_account_link__ref (account_link__content us_rep)))))
(define-fun account_link__ref___projection ((a account_link__ref)) us_rep (account_link__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep Int) (Array Int us_rep))
(assert (forall ((v us_rep)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_141 Int)) (=> (and (<= a__first temp___idx_141) (<= temp___idx_141 a__last)) (= (bool_eq (select a temp___idx_141) (select b (+ (- b__first a__first) temp___idx_141))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_141 Int)) (=> (and (<= a__first temp___idx_141) (<= temp___idx_141 a__last)) (= (bool_eq (select a temp___idx_141) (select b (+ (- b__first a__first) temp___idx_141))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant1 ((temp___expr_215 Int) (temp___is_init_212 Bool) (temp___skip_constant_213 Bool) (temp___do_toplevel_214 Bool)) Bool (=> (or (= temp___is_init_212 true) (<= 1 200000)) (in_range3 temp___expr_215)))
(declare-fun is_available (Int (Array Int us_rep)) Bool)
(declare-fun is_available__function_guard (Bool Int (Array Int us_rep)) Bool)
(assert true)
(assert (forall ((account Int)) (forall ((database__availability__links (Array Int us_rep))) (! (= (= (is_available account database__availability__links) true) (= (rec__database__availability__account_link__available (us_split_fields1 (select database__availability__links account))) true)) :pattern ((is_available account database__availability__links))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant3 ((temp___expr_209 Int) (temp___is_init_206 Bool) (temp___skip_constant_207 Bool) (temp___do_toplevel_208 Bool)) Bool (=> (or (= temp___is_init_206 true) (<= 0 200000)) (in_range4 temp___expr_209)))
(declare-const links (Array Int us_rep))
(declare-const count Int)
(declare-const i Int)
(declare-const o Int)
(declare-const result Int)
(declare-const count1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const count2 Int)
(declare-const i2 Int)
(declare-const result2 Bool)
(declare-const result3 Int)
(declare-const count3 Int)
(declare-const result4 Int)
(declare-const i3 Int)
(assert (= result count))
(assert (= count1 0))
(assert (in_range2 count1))
(assert (= result1 i))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 200000))
(assert (< count2 i2))
(assert (and (and (=> (<= 0 2147483647) (in_range2 count2)) (=> (<= 1 200000) (in_range3 i2))) (and (<= 1 i2) (<= i2 200000))))
(assert (and (= result2 (is_available i2 links)) (= (= result2 true) (= (rec__database__availability__account_link__available (us_split_fields1 (select links i2))) true))))
(assert (=> (= result2 true) (and (= o (+ count2 1)) (in_range1 (+ count2 1)))))
(assert (=> (= result2 true) (= result3 count2)))
(assert (=> (= result2 true) (= count3 o)))
(assert (=> (not (= result2 true)) (= count3 count2)))
(assert (not (= i2 200000)))
(assert (= result4 i2))
(assert (= i3 (+ i2 1)))
(assert (not (< count3 i3)))
(check-sat)
(exit)
