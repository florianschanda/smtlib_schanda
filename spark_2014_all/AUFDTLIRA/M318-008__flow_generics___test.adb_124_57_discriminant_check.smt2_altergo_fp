(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type item_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 9))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : item_t, item_t -> bool

logic dummy1 : item_t

type item_t__ref = { item_t__content : item_t
}

function item_t__ref___4__projection(a: item_t__ref) : item_t =
  (a).item_t__content

logic to_rep1 : item_t -> int

logic of_rep1 : int -> item_t

axiom inversion_axiom1 :
  (forall x:item_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:item_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,item_t) farray
}

logic slide : (int,item_t) farray, int, int -> (int,item_t) farray

axiom slide_eq :
  (forall a:(int,item_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,item_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,item_t) farray, int, int, (int,item_t) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,item_t) farray. forall a__first:int. forall a__last:int.
  forall b:(int,item_t) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,item_t) farray. forall b:(int,item_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))))))))

logic dummy2 : (int,item_t) farray

logic value__size : int

logic object__size : (int,item_t) farray -> int

logic value__component__size : int

logic object__component__size : (int,item_t) farray -> int

logic value__alignment : int

logic object__alignment : (int,item_t) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,item_t) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,item_t) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,item_t) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,item_t) farray, (int,item_t) farray -> bool

type us_split_discrs = { rec__test__fruit_rec__record_t__d : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__test__fruit_rec__record_t__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test__fruit_rec__record_t__single_item :
item_t; rec__test__fruit_rec__record_t__a : item_t;
rec__test__fruit_rec__record_t__b : item_t;
rec__test__fruit_rec__record_t__arr : (int,item_t) farray
}

function us_split_fields_Single_Item__projection(a: us_split_fields) : item_t =
  (a).rec__test__fruit_rec__record_t__single_item

function us_split_fields_A__projection(a: us_split_fields) : item_t =
  (a).rec__test__fruit_rec__record_t__a

function us_split_fields_B__projection(a: us_split_fields) : item_t =
  (a).rec__test__fruit_rec__record_t__b

function us_split_fields_Arr__projection(a: us_split_fields) : (int,item_t) farray =
  (a).rec__test__fruit_rec__record_t__arr

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate test__fruit_rec__record_t__single_item__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = 1)

predicate test__fruit_rec__record_t__a__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = 2)

predicate test__fruit_rec__record_t__b__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = 2)

predicate test__fruit_rec__record_t__arr__pred(a: us_rep) =
  ((not (to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = 1)) and
  (not (to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = 2)))

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = to_rep(((b).us_split_discrs1).rec__test__fruit_rec__record_t__d)) and
  ((((test__fruit_rec__record_t__single_item__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__fruit_rec__record_t__single_item) = to_rep1(((b).us_split_fields1).rec__test__fruit_rec__record_t__single_item))) and
  (test__fruit_rec__record_t__a__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__fruit_rec__record_t__a) = to_rep1(((b).us_split_fields1).rec__test__fruit_rec__record_t__a)))) and
  (test__fruit_rec__record_t__b__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__fruit_rec__record_t__b) = to_rep1(((b).us_split_fields1).rec__test__fruit_rec__record_t__b)))) and
  (test__fruit_rec__record_t__arr__pred(a) ->
  (bool_eq4(((a).us_split_fields1).rec__test__fruit_rec__record_t__arr, 1, 5,
  ((b).us_split_fields1).rec__test__fruit_rec__record_t__arr, 1,
  5) = true)))) -> (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d) = to_rep(((b).us_split_discrs1).rec__test__fruit_rec__record_t__d)) and
  ((((test__fruit_rec__record_t__single_item__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__fruit_rec__record_t__single_item) = to_rep1(((b).us_split_fields1).rec__test__fruit_rec__record_t__single_item))) and
  (test__fruit_rec__record_t__a__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__fruit_rec__record_t__a) = to_rep1(((b).us_split_fields1).rec__test__fruit_rec__record_t__a)))) and
  (test__fruit_rec__record_t__b__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__fruit_rec__record_t__b) = to_rep1(((b).us_split_fields1).rec__test__fruit_rec__record_t__b)))) and
  (test__fruit_rec__record_t__arr__pred(a) ->
  (bool_eq4(((a).us_split_fields1).rec__test__fruit_rec__record_t__arr, 1, 5,
  ((b).us_split_fields1).rec__test__fruit_rec__record_t__arr, 1,
  5) = true))))) -> (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:item_t. forall a2:item_t. forall a3:item_t.
  forall a4:(int,item_t) farray. forall a5:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__test__fruit_rec__record_t__d = a };
  us_split_fields1 = { rec__test__fruit_rec__record_t__single_item = a1;
  rec__test__fruit_rec__record_t__a = a2; rec__test__fruit_rec__record_t__b =
  a3; rec__test__fruit_rec__record_t__arr = a4 }; attr__constrained = a5 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:item_t. forall a2:item_t. forall a3:item_t.
  forall a4:(int,item_t) farray. forall a5:bool. (0 <= object__alignment1({
  us_split_discrs1 = { rec__test__fruit_rec__record_t__d = a };
  us_split_fields1 = { rec__test__fruit_rec__record_t__single_item = a1;
  rec__test__fruit_rec__record_t__a = a2; rec__test__fruit_rec__record_t__b =
  a3; rec__test__fruit_rec__record_t__arr = a4 }; attr__constrained = a5 })))

logic test__fruit_rec__record_t__d__first__bit : int

logic test__fruit_rec__record_t__d__last__bit : int

logic test__fruit_rec__record_t__d__position : int

axiom test__fruit_rec__record_t__d__first__bit_axiom :
  (0 <= test__fruit_rec__record_t__d__first__bit)

axiom test__fruit_rec__record_t__d__last__bit_axiom :
  (test__fruit_rec__record_t__d__first__bit <  test__fruit_rec__record_t__d__last__bit)

axiom test__fruit_rec__record_t__d__position_axiom :
  (0 <= test__fruit_rec__record_t__d__position)

logic test__fruit_rec__record_t__single_item__first__bit : int

logic test__fruit_rec__record_t__single_item__last__bit : int

logic test__fruit_rec__record_t__single_item__position : int

axiom test__fruit_rec__record_t__single_item__first__bit_axiom :
  (0 <= test__fruit_rec__record_t__single_item__first__bit)

axiom test__fruit_rec__record_t__single_item__last__bit_axiom :
  (test__fruit_rec__record_t__single_item__first__bit <  test__fruit_rec__record_t__single_item__last__bit)

axiom test__fruit_rec__record_t__single_item__position_axiom :
  (0 <= test__fruit_rec__record_t__single_item__position)

logic test__fruit_rec__record_t__a__first__bit : int

logic test__fruit_rec__record_t__a__last__bit : int

logic test__fruit_rec__record_t__a__position : int

axiom test__fruit_rec__record_t__a__first__bit_axiom :
  (0 <= test__fruit_rec__record_t__a__first__bit)

axiom test__fruit_rec__record_t__a__last__bit_axiom :
  (test__fruit_rec__record_t__a__first__bit <  test__fruit_rec__record_t__a__last__bit)

axiom test__fruit_rec__record_t__a__position_axiom :
  (0 <= test__fruit_rec__record_t__a__position)

logic test__fruit_rec__record_t__b__first__bit : int

logic test__fruit_rec__record_t__b__last__bit : int

logic test__fruit_rec__record_t__b__position : int

axiom test__fruit_rec__record_t__b__first__bit_axiom :
  (0 <= test__fruit_rec__record_t__b__first__bit)

axiom test__fruit_rec__record_t__b__last__bit_axiom :
  (test__fruit_rec__record_t__b__first__bit <  test__fruit_rec__record_t__b__last__bit)

axiom test__fruit_rec__record_t__b__position_axiom :
  (0 <= test__fruit_rec__record_t__b__position)

logic test__fruit_rec__record_t__arr__first__bit : int

logic test__fruit_rec__record_t__arr__last__bit : int

logic test__fruit_rec__record_t__arr__position : int

axiom test__fruit_rec__record_t__arr__first__bit_axiom :
  (0 <= test__fruit_rec__record_t__arr__first__bit)

axiom test__fruit_rec__record_t__arr__last__bit_axiom :
  (test__fruit_rec__record_t__arr__first__bit <  test__fruit_rec__record_t__arr__last__bit)

axiom test__fruit_rec__record_t__arr__position_axiom :
  (0 <= test__fruit_rec__record_t__arr__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : natural

logic dummy4 : item_t

logic dummy5 : item_t

logic dummy6 : item_t

logic dummy7 : (int,item_t) farray

logic dummy8 : bool

type record_t__ref = { record_t__content : us_rep
}

function record_t__ref___projection(a: record_t__ref) : us_rep =
  (a).record_t__content

predicate in_range3(rec__test__fruit_rec__record_t__d1: int, a: us_rep) =
  (rec__test__fruit_rec__record_t__d1 = to_rep(((a).us_split_discrs1).rec__test__fruit_rec__record_t__d))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:item_t. forall a2:item_t. forall a3:item_t.
  forall a4:(int,item_t) farray. forall a5:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__test__fruit_rec__record_t__d = a };
  us_split_fields1 = { rec__test__fruit_rec__record_t__single_item = a1;
  rec__test__fruit_rec__record_t__a = a2; rec__test__fruit_rec__record_t__b =
  a3; rec__test__fruit_rec__record_t__arr = a4 }; attr__constrained = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:item_t. forall a2:item_t. forall a3:item_t.
  forall a4:(int,item_t) farray. forall a5:bool. (0 <= object__alignment2({
  us_split_discrs1 = { rec__test__fruit_rec__record_t__d = a };
  us_split_fields1 = { rec__test__fruit_rec__record_t__single_item = a1;
  rec__test__fruit_rec__record_t__a = a2; rec__test__fruit_rec__record_t__b =
  a3; rec__test__fruit_rec__record_t__arr = a4 }; attr__constrained = a5 })))

logic test__fruit_rec__record_t__d__first__bit1 : int

logic test__fruit_rec__record_t__d__last__bit1 : int

logic test__fruit_rec__record_t__d__position1 : int

axiom test__fruit_rec__record_t__d__first__bit_axiom1 :
  (0 <= test__fruit_rec__record_t__d__first__bit1)

axiom test__fruit_rec__record_t__d__last__bit_axiom1 :
  (test__fruit_rec__record_t__d__first__bit1 <  test__fruit_rec__record_t__d__last__bit1)

axiom test__fruit_rec__record_t__d__position_axiom1 :
  (0 <= test__fruit_rec__record_t__d__position1)

logic test__fruit_rec__record_t__single_item__first__bit1 : int

logic test__fruit_rec__record_t__single_item__last__bit1 : int

logic test__fruit_rec__record_t__single_item__position1 : int

axiom test__fruit_rec__record_t__single_item__first__bit_axiom1 :
  (0 <= test__fruit_rec__record_t__single_item__first__bit1)

axiom test__fruit_rec__record_t__single_item__last__bit_axiom1 :
  (test__fruit_rec__record_t__single_item__first__bit1 <  test__fruit_rec__record_t__single_item__last__bit1)

axiom test__fruit_rec__record_t__single_item__position_axiom1 :
  (0 <= test__fruit_rec__record_t__single_item__position1)

logic test__fruit_rec__record_t__a__first__bit1 : int

logic test__fruit_rec__record_t__a__last__bit1 : int

logic test__fruit_rec__record_t__a__position1 : int

axiom test__fruit_rec__record_t__a__first__bit_axiom1 :
  (0 <= test__fruit_rec__record_t__a__first__bit1)

axiom test__fruit_rec__record_t__a__last__bit_axiom1 :
  (test__fruit_rec__record_t__a__first__bit1 <  test__fruit_rec__record_t__a__last__bit1)

axiom test__fruit_rec__record_t__a__position_axiom1 :
  (0 <= test__fruit_rec__record_t__a__position1)

logic test__fruit_rec__record_t__b__first__bit1 : int

logic test__fruit_rec__record_t__b__last__bit1 : int

logic test__fruit_rec__record_t__b__position1 : int

axiom test__fruit_rec__record_t__b__first__bit_axiom1 :
  (0 <= test__fruit_rec__record_t__b__first__bit1)

axiom test__fruit_rec__record_t__b__last__bit_axiom1 :
  (test__fruit_rec__record_t__b__first__bit1 <  test__fruit_rec__record_t__b__last__bit1)

axiom test__fruit_rec__record_t__b__position_axiom1 :
  (0 <= test__fruit_rec__record_t__b__position1)

logic test__fruit_rec__record_t__arr__first__bit1 : int

logic test__fruit_rec__record_t__arr__last__bit1 : int

logic test__fruit_rec__record_t__arr__position1 : int

axiom test__fruit_rec__record_t__arr__first__bit_axiom1 :
  (0 <= test__fruit_rec__record_t__arr__first__bit1)

axiom test__fruit_rec__record_t__arr__last__bit_axiom1 :
  (test__fruit_rec__record_t__arr__first__bit1 <  test__fruit_rec__record_t__arr__last__bit1)

axiom test__fruit_rec__record_t__arr__position_axiom1 :
  (0 <= test__fruit_rec__record_t__arr__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy9 : natural

logic dummy10 : item_t

logic dummy11 : item_t

logic dummy12 : item_t

logic dummy13 : (int,item_t) farray

logic dummy14 : bool

type tapple_basketS__ref = { tapple_basketS__content : us_rep
}

function tapple_basketS__ref___projection(a: tapple_basketS__ref) : us_rep =
  (a).tapple_basketS__content

logic apple_basket__split_discrs : natural

logic apple_basket__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic mixed_basket__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "test.adb", line 71, characters 0-0 *)
goal WP_parameter_def :
  (forall has_apple:bool. forall mixed_basket__split_discrs:natural.
  forall result:bool. forall has_apple1:bool.
  (((0 = to_rep(apple_basket__split_discrs)) and
  (apple_basket__attr__constrained = true)) ->
  ((mixed_basket__attr__constrained = false) -> (((result = has_apple) and
  (has_apple1 = of_int(0))) ->
  ((not (to_rep(mixed_basket__split_discrs) = 1)) ->
  ((to_rep(mixed_basket__split_discrs) = 2) ->
  (to_rep(mixed_basket__split_discrs) = 2)))))))
