(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range1(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : et1, et1 -> bool

logic dummy2 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy3 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> (int,(int,et1) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,et1) farray, int -> (int,(int,et1) farray) farray

axiom singleton_def1 :
  (forall v:(int,et1) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq5 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq4((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq4((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq4((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___967 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom :
  (forall temp___969:(int,(int,et1) farray) farray.
  (forall temp___970:int. forall temp___972:int.
  (forall temp___971:(int,et1) farray. forall temp___973:(int,et1) farray.
  (forall temp___974:int. (((temp___974 = temp___972) ->
  ((temp___967(temp___969, temp___970, temp___971, temp___972,
  temp___973)[temp___974]) = temp___973)) and
  ((not (temp___974 = temp___972)) -> (((temp___974 = temp___970) ->
  ((temp___967(temp___969, temp___970, temp___971, temp___972,
  temp___973)[temp___974]) = temp___971)) and
  ((not (temp___974 = temp___970)) -> ((temp___967(temp___969, temp___970,
  temp___971, temp___972,
  temp___973)[temp___974]) = (temp___969[temp___974]))))))))))

logic temp___975 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom1 :
  (forall temp___977:(int,et1) farray.
  (forall temp___978:int. forall temp___979:int.
  (forall temp___980:int. (((temp___980 = temp___978) ->
  ((temp___975(temp___977, temp___978,
  temp___979)[temp___980]) = of_rep(temp___979))) and
  ((not (temp___980 = temp___978)) -> ((temp___975(temp___977, temp___978,
  temp___979)[temp___980]) = (temp___977[temp___980])))))))

logic temp___982 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom2 :
  (forall temp___984:(int,et1) farray.
  (forall temp___985:int. forall temp___986:int.
  (forall temp___987:int. (((temp___987 = temp___985) ->
  ((temp___982(temp___984, temp___985,
  temp___986)[temp___987]) = of_rep(temp___986))) and
  ((not (temp___987 = temp___985)) -> ((temp___982(temp___984, temp___985,
  temp___986)[temp___987]) = (temp___984[temp___987])))))))

logic temp___990 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom3 :
  (forall temp___992:(int,(int,et1) farray) farray.
  (forall temp___993:int. forall temp___995:int.
  (forall temp___994:(int,et1) farray. forall temp___996:(int,et1) farray.
  (forall temp___997:int. (((temp___997 = temp___995) ->
  ((temp___990(temp___992, temp___993, temp___994, temp___995,
  temp___996)[temp___997]) = temp___996)) and
  ((not (temp___997 = temp___995)) -> (((temp___997 = temp___993) ->
  ((temp___990(temp___992, temp___993, temp___994, temp___995,
  temp___996)[temp___997]) = temp___994)) and
  ((not (temp___997 = temp___993)) -> ((temp___990(temp___992, temp___993,
  temp___994, temp___995,
  temp___996)[temp___997]) = (temp___992[temp___997]))))))))))

logic temp___998 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom4 :
  (forall temp___1000:(int,et1) farray.
  (forall temp___1001:int. forall temp___1002:int.
  (forall temp___1003:int. (((temp___1003 = temp___1001) ->
  ((temp___998(temp___1000, temp___1001,
  temp___1002)[temp___1003]) = of_rep(temp___1002))) and
  ((not (temp___1003 = temp___1001)) -> ((temp___998(temp___1000,
  temp___1001, temp___1002)[temp___1003]) = (temp___1000[temp___1003])))))))

logic temp___1005 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom5 :
  (forall temp___1007:(int,et1) farray.
  (forall temp___1008:int. forall temp___1009:int.
  (forall temp___1010:int. (((temp___1010 = temp___1008) ->
  ((temp___1005(temp___1007, temp___1008,
  temp___1009)[temp___1010]) = of_rep(temp___1009))) and
  ((not (temp___1010 = temp___1008)) -> ((temp___1005(temp___1007,
  temp___1008, temp___1009)[temp___1010]) = (temp___1007[temp___1010])))))))

logic temp___1013 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom6 :
  (forall temp___1015:(int,(int,et1) farray) farray.
  (forall temp___1016:int. forall temp___1018:int.
  (forall temp___1017:(int,et1) farray. forall temp___1019:(int,et1) farray.
  (forall temp___1020:int. (((temp___1020 = temp___1018) ->
  ((temp___1013(temp___1015, temp___1016, temp___1017, temp___1018,
  temp___1019)[temp___1020]) = temp___1019)) and
  ((not (temp___1020 = temp___1018)) -> (((temp___1020 = temp___1016) ->
  ((temp___1013(temp___1015, temp___1016, temp___1017, temp___1018,
  temp___1019)[temp___1020]) = temp___1017)) and
  ((not (temp___1020 = temp___1016)) -> ((temp___1013(temp___1015,
  temp___1016, temp___1017, temp___1018,
  temp___1019)[temp___1020]) = (temp___1015[temp___1020]))))))))))

logic temp___1021 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom7 :
  (forall temp___1023:(int,et1) farray.
  (forall temp___1024:int. forall temp___1025:int.
  (forall temp___1026:int. (((temp___1026 = temp___1024) ->
  ((temp___1021(temp___1023, temp___1024,
  temp___1025)[temp___1026]) = of_rep(temp___1025))) and
  ((not (temp___1026 = temp___1024)) -> ((temp___1021(temp___1023,
  temp___1024, temp___1025)[temp___1026]) = (temp___1023[temp___1026])))))))

logic temp___1028 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom8 :
  (forall temp___1030:(int,et1) farray.
  (forall temp___1031:int. forall temp___1032:int.
  (forall temp___1033:int. (((temp___1033 = temp___1031) ->
  ((temp___1028(temp___1030, temp___1031,
  temp___1032)[temp___1033]) = of_rep(temp___1032))) and
  ((not (temp___1033 = temp___1031)) -> ((temp___1028(temp___1030,
  temp___1031, temp___1032)[temp___1033]) = (temp___1030[temp___1033])))))))

logic temp___1036 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom9 :
  (forall temp___1038:(int,(int,et1) farray) farray.
  (forall temp___1039:int. forall temp___1041:int.
  (forall temp___1040:(int,et1) farray. forall temp___1042:(int,et1) farray.
  (forall temp___1043:int. (((temp___1043 = temp___1041) ->
  ((temp___1036(temp___1038, temp___1039, temp___1040, temp___1041,
  temp___1042)[temp___1043]) = temp___1042)) and
  ((not (temp___1043 = temp___1041)) -> (((temp___1043 = temp___1039) ->
  ((temp___1036(temp___1038, temp___1039, temp___1040, temp___1041,
  temp___1042)[temp___1043]) = temp___1040)) and
  ((not (temp___1043 = temp___1039)) -> ((temp___1036(temp___1038,
  temp___1039, temp___1040, temp___1041,
  temp___1042)[temp___1043]) = (temp___1038[temp___1043]))))))))))

logic temp___1044 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom10 :
  (forall temp___1046:(int,et1) farray.
  (forall temp___1047:int. forall temp___1048:int.
  (forall temp___1049:int. (((temp___1049 = temp___1047) ->
  ((temp___1044(temp___1046, temp___1047,
  temp___1048)[temp___1049]) = of_rep(temp___1048))) and
  ((not (temp___1049 = temp___1047)) -> ((temp___1044(temp___1046,
  temp___1047, temp___1048)[temp___1049]) = (temp___1046[temp___1049])))))))

logic temp___1051 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom11 :
  (forall temp___1053:(int,et1) farray.
  (forall temp___1054:int. forall temp___1055:int.
  (forall temp___1056:int. (((temp___1056 = temp___1054) ->
  ((temp___1051(temp___1053, temp___1054,
  temp___1055)[temp___1056]) = of_rep(temp___1055))) and
  ((not (temp___1056 = temp___1054)) -> ((temp___1051(temp___1053,
  temp___1054, temp___1055)[temp___1056]) = (temp___1053[temp___1056])))))))

logic temp___4639 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom12 :
  (forall temp___4641:(int,(int,et1) farray) farray.
  (forall temp___4642:int.
  (forall temp___4643:(int,et1) farray.
  (forall temp___4644:int. (((temp___4644 = temp___4642) ->
  ((temp___4639(temp___4641, temp___4642,
  temp___4643)[temp___4644]) = temp___4643)) and
  ((not (temp___4644 = temp___4642)) -> ((temp___4639(temp___4641,
  temp___4642, temp___4643)[temp___4644]) = (temp___4641[temp___4644]))))))))

logic temp___4645 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom13 :
  (forall temp___4647:(int,et1) farray.
  (forall temp___4648:int. forall temp___4649:int.
  (forall temp___4650:int. (((temp___4650 = temp___4648) ->
  ((temp___4645(temp___4647, temp___4648,
  temp___4649)[temp___4650]) = of_rep(temp___4649))) and
  ((not (temp___4650 = temp___4648)) -> ((temp___4645(temp___4647,
  temp___4648, temp___4649)[temp___4650]) = (temp___4647[temp___4650])))))))

logic a : (int,(int,et1) farray) farray

logic j_next : int

logic f : int

logic t : (int,(int,et1) farray) farray

logic o : et1

logic o1 : (int,et1) farray

logic o2 : (int,(int,et1) farray) farray

logic o3 : int

logic o4 : int

logic o5 : et1

logic o6 : (int,et1) farray

logic o7 : (int,(int,et1) farray) farray

logic o8 : int

logic o9 : int

logic o10 : (int,et1) farray

logic o11 : (int,et1) farray

logic o12 : int

logic temp___4667 : (int,(int,et1) farray) farray

logic o13 : int

logic o14 : int

logic o15 : (int,et1) farray

logic o16 : (int,et1) farray

logic o17 : int

logic temp___4662 : (int,(int,et1) farray) farray

logic result : (int,(int,et1) farray) farray

logic t1 : (int,(int,et1) farray) farray

logic result1 : (int,(int,et1) farray) farray

logic a1 : (int,(int,et1) farray) farray

logic result2 : int

logic j_next1 : int

logic result3 : int

logic j_next2 : int

logic result4 : int

logic f1 : int

logic result5 : int

logic f2 : int

logic result6 : (int,(int,et1) farray) farray

logic a2 : (int,(int,et1) farray) farray

logic a3 : (int,(int,et1) farray) farray

logic j_next3 : int

logic f3 : int

logic t2 : (int,(int,et1) farray) farray

logic a4 : (int,(int,et1) farray) farray

logic j_next4 : int

logic f4 : int

logic t3 : (int,(int,et1) farray) farray

logic result7 : bool

logic result8 : bool

axiom H : in_range(i)

axiom H1 : in_range1(j)

axiom H2 : in_range2(e)

axiom H3 : ((5 <= 50) -> in_range1(j_next))

axiom H4 : ((0 <= 99) -> in_range2(f))

axiom H5 : (bool_eq5(a1, 5, 50, temp___4639(t1, j, temp___4645((t1[j]), i,
  e)), 5, 50) = true)

axiom H6 : (not (j = 50))

 (* File "ar.ads", line 329, characters 0-0 *)
goal WP_parameter_def : in_range1((j + 1))
