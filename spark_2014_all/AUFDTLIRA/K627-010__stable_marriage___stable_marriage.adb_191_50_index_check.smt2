(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort group1_id 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (group1_id group1_id) Bool)
(declare-const dummy group1_id)
(declare-datatypes () ((group1_id__ref (mk_group1_id__ref (group1_id__content group1_id)))))
(define-fun group1_id__ref___projection ((a group1_id__ref)) group1_id (group1_id__content a))
(declare-fun to_rep (group1_id) Int)
(declare-fun of_rep (Int) group1_id)
(assert (forall ((x group1_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x group1_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int group1_id))))))
(declare-fun slide ((Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int group1_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int group1_id) Int Int (Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (group1_id Int) (Array Int group1_id))
(assert (forall ((v group1_id)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int group1_id)) (a__first Int) (a__last Int) (b (Array Int group1_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int group1_id) Int Int (Array Int group1_id) Int Int) Int)
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort count 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count count) Bool)
(declare-const dummy1 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___projection ((a count__ref)) count (count__content a))
(declare-fun to_rep1 (count) Int)
(declare-fun of_rep1 (Int) count)
(assert (forall ((x count)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x count)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-const dummy3 (Array Int group1_id))
(declare-const value__size Int)
(declare-fun object__size ((Array Int group1_id)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int group1_id)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int group1_id)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stable_marriage__matching__group1_set__elements (Array Int group1_id)) (rec__stable_marriage__matching__group1_set__cardinality count)))))
(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int group1_id) (rec__stable_marriage__matching__group1_set__elements a))
(define-fun us_split_fields_Cardinality__projection ((a us_split_fields)) count (rec__stable_marriage__matching__group1_set__cardinality a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 a)) 1 64 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 b)) 1 64) true) (= (to_rep1 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 a))) (to_rep1 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stable_marriage__matching__group1_set__elements__first__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__last__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__elements__first__bit))
(assert (< stable_marriage__matching__group1_set__elements__first__bit stable_marriage__matching__group1_set__elements__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__elements__position))
(declare-const stable_marriage__matching__group1_set__cardinality__first__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__last__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__first__bit))
(assert (< stable_marriage__matching__group1_set__cardinality__first__bit stable_marriage__matching__group1_set__cardinality__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((group1_set__ref (mk_group1_set__ref (group1_set__content us_rep)))))
(define-fun group1_set__ref___projection ((a group1_set__ref)) us_rep (group1_set__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_306 Int) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool)) Bool (=> (or (= temp___is_init_303 true) (<= 0 64)) (in_range2 temp___expr_306)))
(define-fun dynamic_invariant1 ((temp___expr_312 Int) (temp___is_init_309 Bool) (temp___skip_constant_310 Bool) (temp___do_toplevel_311 Bool)) Bool (=> (or (= temp___is_init_309 true) (<= 1 64)) (in_range3 temp___expr_312)))
(define-fun dynamic_invariant2 ((temp___expr_143 Int) (temp___is_init_140 Bool) (temp___skip_constant_141 Bool) (temp___do_toplevel_142 Bool)) Bool (=> (or (= temp___is_init_140 true) (<= 1 64)) (in_range1 temp___expr_143)))
(declare-const unmatched_g1_set__split_fields (Array Int group1_id))
(declare-const unmatched_g1_set__split_fields1 count)
(declare-const idx_1 Int)
(declare-const idx_2 Int)
(declare-const o Int)
(declare-const o1 group1_id)
(declare-const o2 Int)
(assert (<= 1 idx_1))
(assert (<= idx_1 (to_rep1 unmatched_g1_set__split_fields1)))
(assert (<= 1 idx_2))
(assert (<= idx_2 (to_rep1 unmatched_g1_set__split_fields1)))
(assert (not (= idx_1 idx_2)))
(assert (and (<= 1 idx_2) (<= idx_2 64)))
(assert (= o idx_2))
(assert (= o1 (select unmatched_g1_set__split_fields o)))
(assert (= o2 (to_rep o1)))
(assert (not (<= 1 idx_1)))
(check-sat)
(exit)
