(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range4 temp___expr_33)))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-const s us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const len Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((tTresultSP1__ref (mk_tTresultSP1__ref (tTresultSP1__content integer)))))
(define-fun tTresultSP1__ref___projection ((a tTresultSP1__ref)) integer (tTresultSP1__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int character)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))
(define-fun of_array1 ((a (Array Int character)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int character)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq6 (us_t1 us_t1) Bool)
(declare-const dummy6 us_t1)
(declare-datatypes () ((tresultS__ref (mk_tresultS__ref (tresultS__content us_t1)))))
(define-fun tresultS__ref___projection ((a tresultS__ref)) us_t1 (tresultS__content a))
(define-fun dynamic_invariant3 ((temp___expr_148 us_t1) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (and (dynamic_property2 1 len (first3 temp___expr_148) (last3 temp___expr_148)) (and (= (first3 temp___expr_148) 1) (= (last3 temp___expr_148) len)))))
(declare-const result____first integer)
(declare-const result____last integer)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const count_bs Int)
(declare-const i Int)
(declare-const result__ (Array Int character))
(declare-const ti Int)
(declare-const i1 Int)
(declare-const escape__backslash_escape__result (Array Int character))
(declare-const escape__backslash_escape__result1 t)
(declare-const temp___154 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const escape__backslash_escape__B_2__len__assume Int)
(declare-const temp___160 Int)
(declare-const temp___158 (Array Int character))
(declare-const o4 character)
(declare-const o5 Int)
(declare-const o6 (Array Int character))
(declare-const o7 Int)
(declare-const o8 character)
(declare-const o9 Int)
(declare-const o10 (Array Int character))
(declare-const o11 Int)
(declare-const result__1 (Array Int character))
(declare-const result Int)
(declare-const count_bs1 Int)
(declare-const result1 Int)
(declare-const i2 Int)
(declare-const count_bs2 Int)
(declare-const i3 Int)
(declare-const result2 Int)
(declare-const count_bs3 Int)
(declare-const count_bs4 Int)
(declare-const i4 Int)
(declare-const count_bs5 Int)
(declare-const i5 Int)
(declare-const count_bs6 Int)
(declare-const i6 Int)
(declare-const count_bs7 Int)
(declare-const i7 Int)
(declare-const result3 Int)
(declare-const ti1 Int)
(declare-const result4 Int)
(declare-const i8 Int)
(declare-const result__2 (Array Int character))
(declare-const ti2 Int)
(declare-const i9 Int)
(declare-const result5 (Array Int character))
(declare-const result__3 (Array Int character))
(declare-const result6 Int)
(declare-const ti3 Int)
(declare-const result7 (Array Int character))
(declare-const result__4 (Array Int character))
(declare-const result8 int__ref)
(declare-const ti4 Int)
(declare-const result__5 map__ref)
(declare-const ti5 int__ref)
(declare-const result__6 (Array Int character))
(declare-const ti6 Int)
(declare-const result__7 map__ref)
(declare-const ti7 int__ref)
(declare-const i10 int__ref)
(declare-const result__8 (Array Int character))
(declare-const ti8 Int)
(declare-const i11 Int)
(declare-const result__9 map__ref)
(declare-const ti9 int__ref)
(declare-const i12 int__ref)
(declare-const result__10 (Array Int character))
(declare-const ti10 Int)
(declare-const i13 Int)
(declare-const result9 string__ref)
(declare-const escape__backslash_escape__result2 us_t)
(declare-const result__11 map__ref)
(declare-const ti11 int__ref)
(declare-const i14 int__ref)
(declare-const escape__backslash_escape__result3 string__ref)
(declare-const result__12 (Array Int character))
(declare-const ti12 Int)
(declare-const i15 Int)
(declare-const escape__backslash_escape__result4 us_t)
(declare-const count_bs8 int__ref)
(declare-const i16 int__ref)
(declare-const result__13 map__ref)
(declare-const ti13 int__ref)
(declare-const i17 int__ref)
(declare-const escape__backslash_escape__result5 string__ref)
(declare-const count_bs9 Int)
(declare-const i18 Int)
(declare-const result__14 (Array Int character))
(declare-const ti14 Int)
(declare-const i19 Int)
(declare-const escape__backslash_escape__result6 us_t)
(assert (dynamic_invariant2 s true false true))
(assert (= (mk_int__ref result) (mk_int__ref count_bs)))
(assert (= count_bs1 0))
(assert (in_range4 count_bs1))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i2 (to_rep1 (first (rt s)))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= temp___154 count_bs1)))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (and (=> (<= 0 2147483647) (in_range4 count_bs2)) (and (<= (to_rep1 (first (rt s))) i3) (<= i3 (to_rep1 (last (rt s))))))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (=> (= (to_rep (select (elts s) i3)) 92) (and (= o (+ count_bs2 1)) (in_range1 (+ count_bs2 1))))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (=> (= (to_rep (select (elts s) i3)) 92) (= count_bs2 result2))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (=> (= (to_rep (select (elts s) i3)) 92) (= count_bs3 o))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (=> (not (= (to_rep (select (elts s) i3)) 92)) (= count_bs3 count_bs2))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= i3 (to_rep1 (last (rt s))))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= i3 i4)))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= count_bs3 count_bs4)))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= i5 i3)))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= count_bs5 count_bs3)))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= (mk_int__ref i6) (mk_int__ref i4))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= (mk_int__ref count_bs6) (mk_int__ref count_bs4))))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= i7 i5)))
(assert (=> (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s))))) (= count_bs7 count_bs5)))
(assert (=> (not (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s)))))) (= i2 i6)))
(assert (=> (not (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s)))))) (= count_bs1 count_bs6)))
(assert (=> (not (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s)))))) (= i7 i2)))
(assert (=> (not (and (<= (to_rep1 (first (rt s))) i2) (<= i2 (to_rep1 (last (rt s)))))) (= count_bs7 count_bs1)))
(assert (and (= o1 (length s)) (in_range1 (length s))))
(assert (= o2 (+ o1 count_bs6)))
(assert (and (= o3 o2) (in_range1 o2)))
(assert (and (= escape__backslash_escape__B_2__len__assume o3) (in_range4 o3)))
(assert (= escape__backslash_escape__B_2__len__assume len))
(assert (in_range4 len))
(assert (and (dynamic_property2 1 len (to_rep1 result____first) (to_rep1 result____last)) (and (= (to_rep1 result____first) 1) (= (to_rep1 result____last) len))))
(assert (= (mk_int__ref result3) (mk_int__ref ti)))
(assert (= ti1 1))
(assert (in_range2 ti1))
(assert (= (mk_int__ref result4) (mk_int__ref i1)))
(assert (= i8 (to_rep1 (first (rt s)))))
(assert (<= (to_rep1 (first (rt s))) i8))
(assert (<= i8 (to_rep1 (last (rt s)))))
(assert (and (=> (<= 1 2147483647) (in_range2 ti2)) (and (<= (to_rep1 (first (rt s))) i9) (<= i9 (to_rep1 (last (rt s)))))))
(assert (= (to_rep o4) (to_rep (select (elts s) i9))))
(assert (and (<= (to_rep1 result____first) ti2) (<= ti2 (to_rep1 result____last))))
(assert (= o5 ti2))
(assert (= o6 (store result__2 o5 o4)))
(assert (= result__2 result5))
(assert (= result__3 o6))
(assert (and (= o7 (+ ti2 1)) (in_range1 (+ ti2 1))))
(assert (= ti2 result6))
(assert (= ti3 o7))
(assert (= (to_rep (select (elts s) i9)) 92))
(assert (= (to_rep o8) 92))
(assert (and (<= (to_rep1 result____first) ti3) (<= ti3 (to_rep1 result____last))))
(assert (= o9 ti3))
(assert (= o10 (store result__3 o9 o8)))
(assert (= result__3 result7))
(assert (= result__4 o10))
(assert (not (in_range1 (+ ti3 1))))
(check-sat)
(exit)
