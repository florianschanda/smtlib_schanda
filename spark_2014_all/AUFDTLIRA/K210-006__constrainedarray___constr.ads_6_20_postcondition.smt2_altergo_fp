(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq2 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "constr.ads", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,integer) farray. forall i:int. forall o:int.
  forall o1:integer. forall o2:(int,integer) farray. forall o3:int.
  forall o4:integer. forall o5:(int,integer) farray. forall o6:int.
  forall o7:integer. forall o8:(int,integer) farray. forall o9:int.
  forall o10:integer. forall o11:(int,integer) farray. forall o12:int.
  forall o13:integer. forall o14:(int,integer) farray. forall o15:int.
  forall o16:integer. forall o17:(int,integer) farray. forall o18:int.
  forall o19:integer. forall o20:(int,integer) farray. forall o21:int.
  forall o22:integer. forall o23:(int,integer) farray. forall o24:int.
  forall o25:integer. forall o26:(int,integer) farray. forall o27:int.
  forall o28:integer. forall o29:(int,integer) farray. forall result:int.
  forall i1:int. forall result1:(int,integer) farray.
  forall x1:(int,integer) farray. forall result2:int. forall i2:int.
  forall result3:(int,integer) farray. forall x2:(int,integer) farray.
  forall result4:int. forall i3:int. forall result5:(int,integer) farray.
  forall x3:(int,integer) farray. forall result6:int. forall i4:int.
  forall result7:(int,integer) farray. forall x4:(int,integer) farray.
  forall result8:int. forall i5:int. forall result9:(int,integer) farray.
  forall x5:(int,integer) farray. forall result10:int. forall i6:int.
  forall result11:(int,integer) farray. forall x6:(int,integer) farray.
  forall result12:int. forall i7:int. forall result13:(int,integer) farray.
  forall x7:(int,integer) farray. forall result14:int. forall i8:int.
  forall result15:(int,integer) farray. forall x8:(int,integer) farray.
  forall result16:int. forall i9:int. forall result17:(int,integer) farray.
  forall x9:(int,integer) farray. forall result18:int. forall i10:int.
  forall result19:(int,integer) farray. forall x10:(int,integer) farray.
  forall x11:(int,integer) farray. forall i11:int.
  forall x12:(int,integer) farray. forall i12:int. (((to_rep((x[1])) = 0) and
  (((({ int__content = result } = { int__content = i }) and (i1 = 1)) and
  ((((((o = (to_rep((x[i1])) + 1)) and in_range((to_rep((x[i1])) + 1))) and
  (to_rep(o1) = o)) and (o2 = (x[i1 <- o1]))) and (({ map__content = result1
  } = { map__content = x }) and (x1 = o2))) and (((i1 = result2) and
  (i2 = 2)) and ((((((o3 = (to_rep((x1[i2])) + 1)) and
  in_range((to_rep((x1[i2])) + 1))) and (to_rep(o4) = o3)) and
  (o5 = (x1[i2 <- o4]))) and ((x1 = result3) and (x2 = o5))) and
  (((i2 = result4) and (i3 = 3)) and ((((((o6 = (to_rep((x2[i3])) + 1)) and
  in_range((to_rep((x2[i3])) + 1))) and (to_rep(o7) = o6)) and
  (o8 = (x2[i3 <- o7]))) and ((x2 = result5) and (x3 = o8))) and
  (((i3 = result6) and (i4 = 4)) and ((((((o9 = (to_rep((x3[i4])) + 1)) and
  in_range((to_rep((x3[i4])) + 1))) and (to_rep(o10) = o9)) and
  (o11 = (x3[i4 <- o10]))) and ((x3 = result7) and (x4 = o11))) and
  (((i4 = result8) and (i5 = 5)) and ((((((o12 = (to_rep((x4[i5])) + 1)) and
  in_range((to_rep((x4[i5])) + 1))) and (to_rep(o13) = o12)) and
  (o14 = (x4[i5 <- o13]))) and ((x4 = result9) and (x5 = o14))) and
  (((i5 = result10) and (i6 = 6)) and ((((((o15 = (to_rep((x5[i6])) + 1)) and
  in_range((to_rep((x5[i6])) + 1))) and (to_rep(o16) = o15)) and
  (o17 = (x5[i6 <- o16]))) and ((x5 = result11) and (x6 = o17))) and
  (((i6 = result12) and (i7 = 7)) and ((((((o18 = (to_rep((x6[i7])) + 1)) and
  in_range((to_rep((x6[i7])) + 1))) and (to_rep(o19) = o18)) and
  (o20 = (x6[i7 <- o19]))) and ((x6 = result13) and (x7 = o20))) and
  (((i7 = result14) and (i8 = 8)) and ((((((o21 = (to_rep((x7[i8])) + 1)) and
  in_range((to_rep((x7[i8])) + 1))) and (to_rep(o22) = o21)) and
  (o23 = (x7[i8 <- o22]))) and ((x7 = result15) and (x8 = o23))) and
  (((i8 = result16) and (i9 = 9)) and ((((((o24 = (to_rep((x8[i9])) + 1)) and
  in_range((to_rep((x8[i9])) + 1))) and (to_rep(o25) = o24)) and
  (o26 = (x8[i9 <- o25]))) and ((x8 = result17) and (x9 = o26))) and
  (((i9 = result18) and (i10 = 10)) and
  (((((o27 = (to_rep((x9[i10])) + 1)) and
  in_range((to_rep((x9[i10])) + 1))) and (to_rep(o28) = o27)) and
  (o29 = (x9[i10 <- o28]))) and ((result19 = x9) and
  (x10 = o29)))))))))))))))))))))) and (((i11 = i10) and (x10 = x11)) and
  ((i12 = i10) and (x12 = x10))))) -> (to_rep((x11[1])) = 1)))
