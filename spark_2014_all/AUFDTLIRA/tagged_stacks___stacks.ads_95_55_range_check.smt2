(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort less_than_max 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (less_than_max less_than_max) Bool)
(declare-const dummy less_than_max)
(declare-datatypes () ((less_than_max__ref (mk_less_than_max__ref (less_than_max__content less_than_max)))))
(define-fun less_than_max__ref___projection ((a less_than_max__ref)) less_than_max (less_than_max__content a))
(declare-fun to_rep (less_than_max) Int)
(declare-fun of_rep (Int) less_than_max)
(assert (forall ((x less_than_max)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x less_than_max)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive_less_than_max 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive_less_than_max positive_less_than_max) Bool)
(declare-const dummy1 positive_less_than_max)
(declare-datatypes () ((positive_less_than_max__ref (mk_positive_less_than_max__ref (positive_less_than_max__content positive_less_than_max)))))
(define-fun positive_less_than_max__ref___projection ((a positive_less_than_max__ref)) positive_less_than_max (positive_less_than_max__content a))
(declare-fun to_rep1 (positive_less_than_max) Int)
(declare-fun of_rep1 (Int) positive_less_than_max)
(assert (forall ((x positive_less_than_max)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive_less_than_max)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort element 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (element element) Bool)
(declare-const dummy2 element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(declare-fun to_rep2 (element) Int)
(declare-fun of_rep2 (Int) element)
(assert (forall ((x element)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x element)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))
(assert (forall ((a (Array Int element))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int) (b (Array Int element)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int element))
(declare-const value__size Int)
(declare-fun object__size ((Array Int element)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int element)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int element)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int element))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int element))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int element))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int element) (Array Int element)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stacks__stack_root__content (Array Int element)) (rec__stacks__stack_root__length less_than_max) (rec__ext__ us_private)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int element) (rec__stacks__stack_root__content a))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) less_than_max (rec__stacks__stack_root__length a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stacks__stack_root__content (us_split_fields1 a)) 1 100 (rec__stacks__stack_root__content (us_split_fields1 b)) 1 100) true) (= (to_rep (rec__stacks__stack_root__length (us_split_fields1 a))) (to_rep (rec__stacks__stack_root__length (us_split_fields1 b))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stacks__stack_root__content__first__bit Int)
(declare-const stacks__stack_root__content__last__bit Int)
(declare-const stacks__stack_root__content__position Int)
(assert (<= 0 stacks__stack_root__content__first__bit))
(assert (< stacks__stack_root__content__first__bit stacks__stack_root__content__last__bit))
(assert (<= 0 stacks__stack_root__content__position))
(declare-const stacks__stack_root__length__first__bit Int)
(declare-const stacks__stack_root__length__last__bit Int)
(declare-const stacks__stack_root__length__position Int)
(assert (<= 0 stacks__stack_root__length__first__bit))
(assert (< stacks__stack_root__length__first__bit stacks__stack_root__length__last__bit))
(assert (<= 0 stacks__stack_root__length__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((stack_root__ref (mk_stack_root__ref (stack_root__content us_rep)))))
(define-fun stack_root__ref___projection ((a stack_root__ref)) us_rep (stack_root__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__stacks__buffer__first positive_less_than_max) (rec__stacks__stack_root__content1 (Array Int element)) (rec__stacks__stack_root__length1 less_than_max) (rec__ext__1 us_private)))))
(define-fun us_split_fields_First__projection ((a us_split_fields2)) positive_less_than_max (rec__stacks__buffer__first a))
(define-fun us_split_fields_Content__2__projection ((a us_split_fields2)) (Array Int element) (rec__stacks__stack_root__content1 a))
(define-fun us_split_fields_Length__2__projection ((a us_split_fields2)) less_than_max (rec__stacks__stack_root__length1 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (positive_less_than_max us_private) us_private)
(declare-fun extract__first (us_private) positive_less_than_max)
(assert (forall ((first positive_less_than_max)) (forall ((rec__ext__2 us_private)) (= (extract__first (hide_ext__ first rec__ext__2)) first))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__stacks__stack_root__content1 (us_split_fields3 a)) (rec__stacks__stack_root__length1 (us_split_fields3 a)) (hide_ext__ (rec__stacks__buffer__first (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__first (rec__ext__ (us_split_fields1 r))) (rec__stacks__stack_root__content (us_split_fields1 r)) (rec__stacks__stack_root__length (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep1 (rec__stacks__buffer__first (us_split_fields3 a))) (to_rep1 (rec__stacks__buffer__first (us_split_fields3 b)))) (= (bool_eq (rec__stacks__stack_root__content1 (us_split_fields3 a)) 1 100 (rec__stacks__stack_root__content1 (us_split_fields3 b)) 1 100) true)) (= (to_rep (rec__stacks__stack_root__length1 (us_split_fields3 a))) (to_rep (rec__stacks__stack_root__length1 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const stacks__buffer__first__first__bit Int)
(declare-const stacks__buffer__first__last__bit Int)
(declare-const stacks__buffer__first__position Int)
(assert (<= 0 stacks__buffer__first__first__bit))
(assert (< stacks__buffer__first__first__bit stacks__buffer__first__last__bit))
(assert (<= 0 stacks__buffer__first__position))
(declare-const stacks__stack_root__content__first__bit1 Int)
(declare-const stacks__stack_root__content__last__bit1 Int)
(declare-const stacks__stack_root__content__position1 Int)
(assert (<= 0 stacks__stack_root__content__first__bit1))
(assert (< stacks__stack_root__content__first__bit1 stacks__stack_root__content__last__bit1))
(assert (<= 0 stacks__stack_root__content__position1))
(declare-const stacks__stack_root__length__first__bit1 Int)
(declare-const stacks__stack_root__length__last__bit1 Int)
(declare-const stacks__stack_root__length__position1 Int)
(assert (<= 0 stacks__stack_root__length__first__bit1))
(assert (< stacks__stack_root__length__first__bit1 stacks__stack_root__length__last__bit1))
(assert (<= 0 stacks__stack_root__length__position1))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((buffer__ref (mk_buffer__ref (buffer__content us_rep1)))))
(define-fun buffer__ref___projection ((a buffer__ref)) us_rep1 (buffer__content a))
(declare-fun size (us_rep) Int)
(declare-fun size__function_guard (Int us_rep) Bool)
(declare-fun temp___187 (Int) (Array Int element))
(define-fun default_initial_assumption ((temp___expr_382 us_rep1) (temp___skip_top_level_383 Bool)) Bool (and (and (= (attr__tag1 temp___expr_382) us_tag1) (and (and (= (to_rep1 (rec__stacks__buffer__first (us_split_fields3 temp___expr_382))) 1) (= (rec__stacks__stack_root__content1 (us_split_fields3 temp___expr_382)) (temp___187 0))) (= (to_rep (rec__stacks__stack_root__length1 (us_split_fields3 temp___expr_382))) 0))) (=> (not (= temp___skip_top_level_383 true)) (= (size (to_base temp___expr_382)) 0))))
(define-fun in_range3 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)
(declare-fun wraps_around (us_rep1) Bool)
(declare-fun wraps_around__function_guard (Bool us_rep1) Bool)
(declare-fun wraps_around1 (Int us_rep1) Bool)
(declare-fun wraps_around__function_guard1 (Bool Int us_rep1) Bool)
(assert true)
(assert true)
(assert (forall ((s us_rep1)) (! (= (ite (wraps_around s) 1 0) (ite (wraps_around1 us_tag1 s) 1 0)) :pattern ((wraps_around1 us_tag1 s)))))
(assert (forall ((s us_rep1)) (! (= (= (wraps_around s) true) (< 100 (- (+ (to_rep1 (rec__stacks__buffer__first (us_split_fields3 s))) (to_rep (rec__stacks__stack_root__length1 (us_split_fields3 s)))) 1))) :pattern ((wraps_around s)))))
(declare-const s us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 100)) (in_range temp___expr_159)))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range2 temp___expr_166)))
(define-fun default_initial_assumption1 ((temp___expr_185 us_rep) (temp___skip_top_level_186 Bool)) Bool (and (and (= (attr__tag temp___expr_185) us_tag) (and (= (rec__stacks__stack_root__content (us_split_fields1 temp___expr_185)) (temp___187 0)) (= (to_rep (rec__stacks__stack_root__length (us_split_fields1 temp___expr_185))) 0))) (=> (not (= temp___skip_top_level_186 true)) (= (size temp___expr_185) 0))))
(assert (forall ((s1 us_rep)) (! (dynamic_invariant (size s1) true false true true) :pattern ((size s1)))))
(assert (forall ((s1 us_rep)) (! (= (size s1) (to_rep (rec__stacks__stack_root__length (us_split_fields1 s1)))) :pattern ((size s1)))))
(assert (forall ((temp___189 Int)) (=> (dynamic_invariant1 temp___189 true true true true) (forall ((temp___190 Int)) (= (to_rep2 (select (temp___187 temp___189) temp___190)) temp___189)))))
(define-fun dynamic_invariant2 ((temp___expr_373 Int) (temp___is_init_369 Bool) (temp___skip_constant_370 Bool) (temp___do_toplevel_371 Bool) (temp___do_typ_inv_372 Bool)) Bool (=> (or (= temp___is_init_369 true) (<= 1 100)) (in_range1 temp___expr_373)))
(declare-const o Bool)
(declare-const result Bool)
(assert (and (= o (wraps_around s)) (= (= o true) (< 100 (- (+ (to_rep1 (rec__stacks__buffer__first (us_split_fields3 s))) (to_rep (rec__stacks__stack_root__length1 (us_split_fields3 s)))) 1)))))
(assert (= result (ite (not (= o true)) true false)))
(assert (= result true))
(assert (not (in_range (- (+ (to_rep1 (rec__stacks__buffer__first (us_split_fields3 s))) (to_rep (rec__stacks__stack_root__length1 (us_split_fields3 s)))) 1))))
(check-sat)
(exit)
