(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort resource 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (resource resource) Bool)
(declare-const dummy resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 10000)) (in_range temp___expr_173)))
(declare-fun to_rep (resource) Int)
(declare-fun of_rep (Int) resource)
(assert (forall ((x resource)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x resource)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort valid_resource 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (valid_resource valid_resource) Bool)
(declare-const dummy1 valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(declare-sort status 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (status status) Bool)
(declare-const dummy2 status)
(declare-datatypes () ((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content a))
(declare-fun to_rep1 (status) Int)
(declare-fun of_rep1 (Int) status)
(assert (forall ((x status)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x status)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_allocator__cell__stat status) (rec__list_allocator__cell__next resource)))))
(define-fun us_split_fields_Stat__projection ((a us_split_fields)) status (rec__list_allocator__cell__stat a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) resource (rec__list_allocator__cell__next a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields1 a))) (to_rep1 (rec__list_allocator__cell__stat (us_split_fields1 b)))) (= (to_rep (rec__list_allocator__cell__next (us_split_fields1 a))) (to_rep (rec__list_allocator__cell__next (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const list_allocator__cell__stat__first__bit Int)
(declare-const list_allocator__cell__stat__last__bit Int)
(declare-const list_allocator__cell__stat__position Int)
(assert (<= 0 list_allocator__cell__stat__first__bit))
(assert (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))
(assert (<= 0 list_allocator__cell__stat__position))
(declare-const list_allocator__cell__next__first__bit Int)
(declare-const list_allocator__cell__next__last__bit Int)
(declare-const list_allocator__cell__next__position Int)
(assert (<= 0 list_allocator__cell__next__first__bit))
(assert (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))
(assert (<= 0 list_allocator__cell__next__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq2 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-sort index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (index_type index_type) Bool)
(declare-const dummy5 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_193 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 1 2147483647)) (in_range3 temp___expr_193)))
(declare-sort element_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (element_type element_type) Bool)
(declare-const dummy6 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_200 Int) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (or (= temp___is_init_196 true) (<= 0 10000)) (in_range4 temp___expr_200)))
(declare-fun length (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(define-fun in_range5 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption ((temp___expr_215 us_rep1) (temp___skip_top_level_216 Bool)) Bool (=> (not (= temp___skip_top_level_216 true)) (= (length temp___expr_215) 0)))
(define-fun range_equal ((left us_rep1) (right us_rep1) (fst Int) (lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right i)))) true false))
(declare-fun range_equal__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)
(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right (+ i offset))))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (get left (- i offset)) (get right i)))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int Int) Bool)
(declare-fun add__2 (us_rep1 Int Int) us_rep1)
(declare-fun add__2__function_guard (us_rep1 us_rep1 Int Int) Bool)
(assert (forall ((container us_rep1)) (forall ((position Int) (new_item Int)) (! (=> (and (and (dynamic_invariant1 position true true true true) (dynamic_invariant2 new_item true true true true)) (and (< (length container) 2147483647) (and (< (last container) 2147483647) (<= position (+ (last container) 1))))) (let ((result (add__2 container position new_item))) (and (= (length result) (+ (length container) 1)) (and (= (get result position) new_item) (and (= (range_equal container result 1 (- position 1)) true) (= (range_shifted container result position (last container) 1) true)))))) :pattern ((add__2 container position new_item))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))
(declare-fun contains (us_rep2 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)
(declare-sort element_type1 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (element_type1 element_type1) Bool)
(declare-const dummy8 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant3 ((temp___expr_222 Int) (temp___is_init_218 Bool) (temp___skip_constant_219 Bool) (temp___do_toplevel_220 Bool) (temp___do_typ_inv_221 Bool)) Bool (=> (or (= temp___is_init_218 true) (<= 0 10000)) (in_range6 temp___expr_222)))
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption1 ((temp___expr_230 us_rep2) (temp___skip_top_level_231 Bool)) Bool (=> (not (= temp___skip_top_level_231 true)) (= (is_empty temp___expr_230) true)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant3 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range6 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(declare-fun ole (us_rep2 us_rep2) Bool)
(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun included_except (us_rep2 us_rep2 Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun remove (us_rep2 Int) us_rep2)
(declare-fun remove__function_guard (us_rep2 us_rep2 Int) Bool)
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (and (dynamic_invariant3 item true true true true) (= (contains container item) true)) (let ((result (remove container item))) (and (and (and (= (length1 result) (- (length1 container) 1)) (not (= (contains result item) true))) (= (ole result container) true)) (= (included_except container result item) true)))) :pattern ((remove container item))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list_allocator__m__t__available us_rep1) (rec__list_allocator__m__t__allocated us_rep2)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields2)) us_rep1 (rec__list_allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields2)) us_rep2 (rec__list_allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (user_eq4 (rec__list_allocator__m__t__available (us_split_fields3 a)) (rec__list_allocator__m__t__available (us_split_fields3 b))) true) (= (bool_eq3 (rec__list_allocator__m__t__allocated (us_split_fields3 a)) (rec__list_allocator__m__t__allocated (us_split_fields3 b))) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const list_allocator__m__t__available__first__bit Int)
(declare-const list_allocator__m__t__available__last__bit Int)
(declare-const list_allocator__m__t__available__position Int)
(assert (<= 0 list_allocator__m__t__available__first__bit))
(assert (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))
(assert (<= 0 list_allocator__m__t__available__position))
(declare-const list_allocator__m__t__allocated__first__bit Int)
(declare-const list_allocator__m__t__allocated__last__bit Int)
(declare-const list_allocator__m__t__allocated__position Int)
(assert (<= 0 list_allocator__m__t__allocated__first__bit))
(assert (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))
(assert (<= 0 list_allocator__m__t__allocated__position))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep3)))))
(define-fun t__ref___projection ((a t__ref)) us_rep3 (t__content a))
(declare-fun oeq1 (us_rep3 us_rep3) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq9 a b) (oeq1 a b)) :pattern ((user_eq9 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_245 us_rep3) (temp___skip_top_level_246 Bool)) Bool (and (= (length (rec__list_allocator__m__t__available (us_split_fields3 temp___expr_245))) 0) (= (is_empty (rec__list_allocator__m__t__allocated (us_split_fields3 temp___expr_245))) true)))
(declare-fun is_prepend (us_rep1 Int us_rep1) Bool)
(declare-fun is_prepend__function_guard (Bool us_rep1 Int us_rep1) Bool)
(assert true)
(assert (forall ((s us_rep1) (result__ us_rep1)) (forall ((e Int)) (! (= (= (is_prepend s e result__) true) (and (and (and (< (length s) 2147483647) (= (length result__) (+ (length s) 1))) (= (get result__ 1) e)) (= (range_shifted s result__ 1 (last s) 1) true))) :pattern ((is_prepend s e result__))))))
(declare-fun is_add (us_rep2 Int us_rep2) Bool)
(declare-fun is_add__function_guard (Bool us_rep2 Int us_rep2) Bool)
(assert true)
(assert (forall ((s us_rep2) (result__ us_rep2)) (forall ((e Int)) (! (= (= (is_add s e result__) true) (and (and (and (not (= (contains s e) true)) (= (contains result__ e) true)) (= (included_except result__ s e) true)) (= (ole s result__) true))) :pattern ((is_add s e result__))))))
(declare-fun oeq2 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)
(assert true)
(assert (forall ((x us_rep3) (y us_rep3)) (! (= (= (oeq1 x y) true) (and (= (oeq (rec__list_allocator__m__t__available (us_split_fields3 x)) (rec__list_allocator__m__t__available (us_split_fields3 y))) true) (= (oeq2 (rec__list_allocator__m__t__allocated (us_split_fields3 x)) (rec__list_allocator__m__t__allocated (us_split_fields3 y))) true))) :pattern ((oeq1 x y)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun is_valid ((Array Int us_rep) Int us_split_fields2) Bool)
(declare-fun is_valid__function_guard (Bool (Array Int us_rep) Int us_split_fields2) Bool)
(declare-fun contains1 (us_rep1 Int) Bool)
(declare-fun contains__function_guard1 (Bool us_rep1 Int) Bool)
(assert true)
(assert (forall ((list_allocator__data (Array Int us_rep))) (forall ((list_allocator__first_available Int)) (forall ((list_allocator__m__model__fields us_split_fields2)) (! (= (= (is_valid list_allocator__data list_allocator__first_available list_allocator__m__model__fields) true) (and (and (and (and (and (and (<= (length (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))) 10000) (<= (length1 (rec__list_allocator__m__t__allocated (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))) 10000)) (= (+ (length (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))) (length1 (rec__list_allocator__m__t__allocated (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))) 10000)) (ite (not (= list_allocator__first_available 0)) (and (< 0 (length (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))) (= (get (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) 1) list_allocator__first_available)) (= (length (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))) 0))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields)))))) (and (and (in_range1 (get (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields1 (select list_allocator__data (get (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j))))) (ite (< j (length (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))))) (get (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) (+ j 1)) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (- j 1))) (not (= (get (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) j) (get (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) k))))))))) (forall ((e Int)) (=> (and (in_range6 e) (= (contains (rec__list_allocator__m__t__allocated (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) e) true)) (in_range1 e)))) (forall ((r Int)) (=> (and (<= 1 r) (<= r 10000)) (ite (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields1 (select list_allocator__data r)))) 0) (and (= (contains1 (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true) (not (= (contains (rec__list_allocator__m__t__allocated (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true))) (and (not (= (contains1 (rec__list_allocator__m__t__available (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true)) (= (contains (rec__list_allocator__m__t__allocated (us_split_fields3 (mk___rep1 list_allocator__m__model__fields))) r) true))))))) :pattern ((is_valid list_allocator__data list_allocator__first_available list_allocator__m__model__fields)))))))
(declare-const res Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant4 ((temp___expr_263 Int) (temp___is_init_259 Bool) (temp___skip_constant_260 Bool) (temp___do_toplevel_261 Bool) (temp___do_typ_inv_262 Bool)) Bool (=> (or (= temp___is_init_259 true) (<= 0 1)) (in_range2 temp___expr_263)))
(define-fun dynamic_invariant5 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 10000)) (in_range1 temp___expr_180)))
(assert true)
(assert (forall ((s us_rep1)) (forall ((e Int)) (! (= (= (contains1 s e) true) (exists ((i Int)) (and (and (<= 1 i) (<= i (length s))) (= (get s i) e)))) :pattern ((contains1 s e))))))
(declare-sort count_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq10 (count_type count_type) Bool)
(declare-const dummy10 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant6 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range7 temp___expr_166)))
(declare-sort extended_index 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq11 (extended_index extended_index) Bool)
(declare-const dummy11 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant7 ((temp___expr_207 Int) (temp___is_init_203 Bool) (temp___skip_constant_204 Bool) (temp___do_toplevel_205 Bool) (temp___do_typ_inv_206 Bool)) Bool (=> (or (= temp___is_init_203 true) (<= 0 2147483647)) (in_range8 temp___expr_207)))
(assert (forall ((container us_rep1)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false true true))) :pattern ((length container)))))
(assert (forall ((container us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant7 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant2 (get container position) true false true true)) :pattern ((get container position))))))
(assert (forall ((container us_rep2)) (! (dynamic_invariant6 (length1 container) true false true true) :pattern ((length1 container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range6 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (oeq2 left right) true) (and (= (ole left right) true) (= (ole right left) true))) :pattern ((oeq2 left right)))))
(assert (forall ((container us_rep2)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range6 item) (= (contains container item) true))))) (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant3 item true true true true) (= (= (included_except left right item) true) (forall ((e Int)) (=> (and (in_range6 e) (= (contains left e) true)) (or (= (contains right e) true) (= e item)))))) :pattern ((included_except left right item))))))
(declare-const model____split_fields us_rep1)
(declare-const model____split_fields1 us_rep2)
(declare-const data (Array Int us_rep))
(declare-const first_available Int)
(declare-const o Int)
(declare-const o1 status)
(declare-const o2 resource)
(declare-const o3 status)
(declare-const o4 resource)
(declare-const o5 status)
(declare-const o6 Int)
(declare-const o7 resource)
(declare-const o8 status)
(declare-const o9 status)
(declare-const o10 resource)
(declare-const o11 status)
(declare-const o12 resource)
(declare-const o13 Int)
(declare-const o14 (Array Int us_rep))
(declare-const result Bool)
(declare-const result1 (Array Int us_rep))
(declare-const data1 (Array Int us_rep))
(declare-const result2 Int)
(declare-const first_available1 Int)
(assert (in_range first_available))
(assert (in_range res))
(assert (= (is_valid data first_available (mk___split_fields1 model____split_fields model____split_fields1)) true))
(assert (=> (not (= res 0)) (and (<= 1 res) (<= res 10000))))
(assert (=> (not (= res 0)) (= o res)))
(assert (=> (not (= res 0)) (= (mk___rep (mk___split_fields o1 o2)) (select data o))))
(assert (=> (not (= res 0)) (= o1 o3)))
(assert (=> (not (= res 0)) (= o2 o4)))
(assert (=> (not (= res 0)) (= o5 o3)))
(assert (=> (not (= res 0)) (= o6 (to_rep1 o5))))
(assert (=> (not (= res 0)) (= result (ite (= o6 1) true false))))
(assert (=> (not (not (= res 0))) (= result false)))
(assert (= result true))
(assert (= (to_rep o7) first_available))
(assert (= (to_rep1 o8) 0))
(assert (= o8 o9))
(assert (= o7 o10))
(assert (= o11 o9))
(assert (= o12 o10))
(assert (and (<= 1 res) (<= res 10000)))
(assert (= o13 res))
(assert (= o14 (store data o13 (mk___rep (mk___split_fields o11 o12)))))
(assert (= (mk_map__ref result1) (mk_map__ref data)))
(assert (= data1 o14))
(assert (= (mk_int__ref result2) (mk_int__ref first_available)))
(assert (= first_available1 res))
(assert (not (= (contains model____split_fields1 res) true)))
(check-sat)
(exit)
