(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type tindexB

predicate in_range1(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tindexB, tindexB -> bool

logic dummy1 : tindexB

type tindexB__ref = { tindexB__content : tindexB
}

function tindexB__ref___projection(a: tindexB__ref) : tindexB =
  (a).tindexB__content

logic to_rep : tindexB -> int

logic of_rep : int -> tindexB

axiom inversion_axiom :
  (forall x:tindexB [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:tindexB [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

type t

logic first : t -> tindexB

logic last : t -> tindexB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,integer) farray

logic dummy4 : t

type array_u__ref = { array_u__content : us_t
}

function array_u__ref___projection(a: array_u__ref) : us_t =
  (a).array_u__content

logic a__first : tindexB

logic a__last : tindexB

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic new_val : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tindexB, tindexB -> bool

logic dummy5 : tindexB

type tS4bP1__ref = { tS4bP1__content : tindexB
}

function tS4bP1__ref___projection(a: tS4bP1__ref) : tindexB =
  (a).tS4bP1__content

logic temp___245 : us_t, int, int, int, int, int, int, int -> us_t

axiom def_axiom :
  (forall temp___247:(int,integer) farray. forall temp___2471:t.
  (forall temp___248:int. forall temp___249:int. forall temp___250:int.
  forall temp___251:int. forall temp___252:int. forall temp___253:int.
  forall temp___254:int. (((to_rep(first((temp___245({ elts = temp___247;
  rt = temp___2471 }, temp___248, temp___249, temp___250, temp___251,
  temp___252, temp___253, temp___254)).rt)) = to_rep(first(temp___2471))) and
  (to_rep(last((temp___245({ elts = temp___247; rt = temp___2471 },
  temp___248, temp___249, temp___250, temp___251, temp___252, temp___253,
  temp___254)).rt)) = to_rep(last(temp___2471)))) and
  (forall temp___255:int. (((((temp___251 <= temp___255) and
  (temp___255 <= temp___252)) or (temp___255 = temp___253)) ->
  (((temp___245({ elts = temp___247; rt = temp___2471 }, temp___248,
  temp___249, temp___250, temp___251, temp___252, temp___253,
  temp___254)).elts[temp___255]) = of_rep1(temp___254))) and
  ((not (((temp___251 <= temp___255) and (temp___255 <= temp___252)) or
  (temp___255 = temp___253))) -> ((((temp___248 <= temp___255) and
  (temp___255 <= temp___249)) -> (((temp___245({ elts = temp___247; rt =
  temp___2471 }, temp___248, temp___249, temp___250, temp___251, temp___252,
  temp___253, temp___254)).elts[temp___255]) = of_rep1(temp___250))) and
  ((not ((temp___248 <= temp___255) and (temp___255 <= temp___249))) ->
  (((temp___245({ elts = temp___247; rt = temp___2471 }, temp___248,
  temp___249, temp___250, temp___251, temp___252, temp___253,
  temp___254)).elts[temp___255]) = (temp___247[temp___255]))))))))))

logic temp___422 : us_t, int, int, int, int, int, int, int -> us_t

axiom def_axiom1 :
  (forall temp___424:(int,integer) farray. forall temp___4241:t.
  (forall temp___425:int. forall temp___426:int. forall temp___427:int.
  forall temp___428:int. forall temp___429:int. forall temp___430:int.
  forall temp___431:int. (((to_rep(first((temp___422({ elts = temp___424;
  rt = temp___4241 }, temp___425, temp___426, temp___427, temp___428,
  temp___429, temp___430, temp___431)).rt)) = to_rep(first(temp___4241))) and
  (to_rep(last((temp___422({ elts = temp___424; rt = temp___4241 },
  temp___425, temp___426, temp___427, temp___428, temp___429, temp___430,
  temp___431)).rt)) = to_rep(last(temp___4241)))) and
  (forall temp___432:int. (((((temp___428 <= temp___432) and
  (temp___432 <= temp___429)) or (temp___432 = temp___430)) ->
  (((temp___422({ elts = temp___424; rt = temp___4241 }, temp___425,
  temp___426, temp___427, temp___428, temp___429, temp___430,
  temp___431)).elts[temp___432]) = of_rep1(temp___431))) and
  ((not (((temp___428 <= temp___432) and (temp___432 <= temp___429)) or
  (temp___432 = temp___430))) -> ((((temp___425 <= temp___432) and
  (temp___432 <= temp___426)) -> (((temp___422({ elts = temp___424; rt =
  temp___4241 }, temp___425, temp___426, temp___427, temp___428, temp___429,
  temp___430, temp___431)).elts[temp___432]) = of_rep1(temp___427))) and
  ((not ((temp___425 <= temp___432) and (temp___432 <= temp___426))) ->
  (((temp___422({ elts = temp___424; rt = temp___4241 }, temp___425,
  temp___426, temp___427, temp___428, temp___429, temp___430,
  temp___431)).elts[temp___432]) = (temp___424[temp___432]))))))))))

logic a : (int,integer) farray

logic us : int

logic us1 : int

logic us2 : int

logic us3 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic temp___433 : (int,integer) farray

logic temp___4331 : t

logic temp___434 : (int,integer) farray

logic temp___4341 : t

logic o4 : (int,integer) farray

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic result : (int,integer) farray

logic a1 : (int,integer) farray

logic a2 : (int,integer) farray

logic a3 : (int,integer) farray

axiom H : dynamic_property(1, 8, to_rep(a__first), to_rep(a__last))

axiom H1 : in_range2(i)

axiom H2 : in_range2(j)

axiom H3 : in_range2(k)

axiom H4 : in_range2(l)

axiom H5 : in_range(new_val)

axiom H6 : ((us3 = l) and dynamic_property1(to_rep(a__first),
  to_rep(a__last), l))

axiom H7 : (o = l)

axiom H8 : ((us2 = k) and dynamic_property1(to_rep(a__first),
  to_rep(a__last), k))

axiom H9 : (o1 = k)

axiom H10 : ((us1 = j) and dynamic_property1(to_rep(a__first),
  to_rep(a__last), j))

axiom H11 : (o2 = j)

axiom H12 : ((us = i) and dynamic_property1(to_rep(a__first),
  to_rep(a__last), i))

axiom H13 : (o3 = i)

axiom H14 : ({ elts = temp___433; rt = temp___4331 } = temp___422({ elts = a;
  rt = mk(to_rep(a__first), to_rep(a__last)) }, 1, o3, 0, o2, o1, o,
  new_val))

axiom H15 : (((to_rep(first(temp___4331)) <= to_rep(last(temp___4331))) ->
  (((to_rep(a__first) <= to_rep(a__last)) ->
  (((to_rep(last(temp___4331)) - to_rep(first(temp___4331))) + 1) = ((to_rep(a__last) - to_rep(a__first)) + 1))) and
  ((not (to_rep(a__first) <= to_rep(a__last))) ->
  (((to_rep(last(temp___4331)) - to_rep(first(temp___4331))) + 1) = 0)))) and
  ((not (to_rep(first(temp___4331)) <= to_rep(last(temp___4331)))) ->
  ((to_rep(a__first) <= to_rep(a__last)) ->
  (0 = ((to_rep(a__last) - to_rep(a__first)) + 1)))))

axiom H16 : ((temp___434 = temp___433) and (temp___4341 = temp___4331))

axiom H17 : (o4 = slide(temp___434, to_rep(first(temp___4341)),
  to_rep(a__first)))

axiom H18 : (result = a)

axiom H19 : (a1 = o4)

axiom H20 : (a1 = a2)

axiom H21 : (a3 = a1)

axiom H22 : ((o5 = l) and in_range2(l))

axiom H23 : ((o6 = k) and in_range2(k))

axiom H24 : ((o7 = j) and in_range2(j))

 (* File "update_checks_1.ads", line 12, characters 0-0 *)
goal WP_parameter_def : in_range2(i)
