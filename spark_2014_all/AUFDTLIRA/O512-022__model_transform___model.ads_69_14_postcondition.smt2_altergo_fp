(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type uml_transition_access

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : uml_transition_access, uml_transition_access -> bool

logic dummy : uml_transition_access

type uml_transition_access__ref = { uml_transition_access__content :
uml_transition_access
}

function uml_transition_access__ref___projection(a: uml_transition_access__ref) : uml_transition_access =
  (a).uml_transition_access__content

type uml_state_access

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : uml_state_access, uml_state_access -> bool

logic dummy1 : uml_state_access

type uml_state_access__ref = { uml_state_access__content : uml_state_access
}

function uml_state_access__ref___projection(a: uml_state_access__ref) : uml_state_access =
  (a).uml_state_access__content

logic to_rep : uml_state_access -> int

logic of_rep : int -> uml_state_access

axiom inversion_axiom :
  (forall x:uml_state_access [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:uml_state_access [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__model__uml_transition__from_data :
uml_state_access; rec__model__uml_transition__to_data : uml_state_access
}

function us_split_fields_From_Data__projection(a: us_split_fields) : uml_state_access =
  (a).rec__model__uml_transition__from_data

function us_split_fields_To_Data__projection(a: us_split_fields) : uml_state_access =
  (a).rec__model__uml_transition__to_data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__model__uml_transition__from_data) = to_rep(((b).us_split_fields1).rec__model__uml_transition__from_data)) and
  (to_rep(((a).us_split_fields1).rec__model__uml_transition__to_data) = to_rep(((b).us_split_fields1).rec__model__uml_transition__to_data))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__model__uml_transition__from_data) = to_rep(((b).us_split_fields1).rec__model__uml_transition__from_data)) and
  (to_rep(((a).us_split_fields1).rec__model__uml_transition__to_data) = to_rep(((b).us_split_fields1).rec__model__uml_transition__to_data)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:uml_state_access. forall a1:uml_state_access.
  (0 <= object__size({ us_split_fields1 = {
  rec__model__uml_transition__from_data = a;
  rec__model__uml_transition__to_data = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:uml_state_access. forall a1:uml_state_access.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__model__uml_transition__from_data = a;
  rec__model__uml_transition__to_data = a1 } })))

logic model__uml_transition__from_data__first__bit : int

logic model__uml_transition__from_data__last__bit : int

logic model__uml_transition__from_data__position : int

axiom model__uml_transition__from_data__first__bit_axiom :
  (0 <= model__uml_transition__from_data__first__bit)

axiom model__uml_transition__from_data__last__bit_axiom :
  (model__uml_transition__from_data__first__bit <  model__uml_transition__from_data__last__bit)

axiom model__uml_transition__from_data__position_axiom :
  (0 <= model__uml_transition__from_data__position)

logic model__uml_transition__to_data__first__bit : int

logic model__uml_transition__to_data__last__bit : int

logic model__uml_transition__to_data__position : int

axiom model__uml_transition__to_data__first__bit_axiom :
  (0 <= model__uml_transition__to_data__first__bit)

axiom model__uml_transition__to_data__last__bit_axiom :
  (model__uml_transition__to_data__first__bit <  model__uml_transition__to_data__last__bit)

axiom model__uml_transition__to_data__position_axiom :
  (0 <= model__uml_transition__to_data__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : uml_state_access

logic dummy3 : uml_state_access

type uml_transition__ref = { uml_transition__content : us_rep
}

function uml_transition__ref___projection(a: uml_transition__ref) : us_rep =
  (a).uml_transition__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq3((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))))))

type name_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : name_t, name_t -> bool

logic dummy4 : name_t

type name_t__ref = { name_t__content : name_t
}

function name_t__ref___projection(a: name_t__ref) : name_t =
  (a).name_t__content

logic to_rep1 : name_t -> int

logic of_rep1 : int -> name_t

axiom inversion_axiom1 :
  (forall x:name_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:name_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__model__uml_state__name_data : name_t
}

function us_split_fields_Name_Data__projection(a: us_split_fields2) : name_t =
  (a).rec__model__uml_state__name_data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((to_rep1(((a).us_split_fields3).rec__model__uml_state__name_data) = to_rep1(((b).us_split_fields3).rec__model__uml_state__name_data)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields3).rec__model__uml_state__name_data) = to_rep1(((b).us_split_fields3).rec__model__uml_state__name_data))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:name_t. (0 <= object__size1({ us_split_fields3 = {
  rec__model__uml_state__name_data = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:name_t. (0 <= object__alignment1({ us_split_fields3 = {
  rec__model__uml_state__name_data = a } })))

logic model__uml_state__name_data__first__bit : int

logic model__uml_state__name_data__last__bit : int

logic model__uml_state__name_data__position : int

axiom model__uml_state__name_data__first__bit_axiom :
  (0 <= model__uml_state__name_data__first__bit)

axiom model__uml_state__name_data__last__bit_axiom :
  (model__uml_state__name_data__first__bit <  model__uml_state__name_data__last__bit)

axiom model__uml_state__name_data__position_axiom :
  (0 <= model__uml_state__name_data__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : name_t

type uml_state__ref = { uml_state__content : us_rep1
}

function uml_state__ref___projection(a: uml_state__ref) : us_rep1 =
  (a).uml_state__content

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic dummy6 : (int,us_rep1) farray

logic value__size2 : int

logic object__size2 : (int,us_rep1) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep1) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,us_rep1) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,us_rep1) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,us_rep1) farray. (0 <= object__alignment2(a)))

logic user_eq5 : (int,us_rep1) farray, (int,us_rep1) farray -> bool

logic dummy7 : (int,us_rep) farray

logic value__size3 : int

logic object__size3 : (int,us_rep) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,us_rep) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment3(a)))

logic user_eq6 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields4 = { rec__model__uml_state_machine__owned_state_data :
(int,us_rep1) farray; rec__model__uml_state_machine__owned_transition_data :
(int,us_rep) farray
}

function us_split_fields_Owned_State_Data__projection(a: us_split_fields4) : (int,us_rep1) farray =
  (a).rec__model__uml_state_machine__owned_state_data

function us_split_fields_Owned_Transition_Data__projection(a: us_split_fields4) : (int,us_rep) farray =
  (a).rec__model__uml_state_machine__owned_transition_data

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq8 : us_rep2, us_rep2 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq8(a, b)].
  ((((bool_eq7(((a).us_split_fields5).rec__model__uml_state_machine__owned_state_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_state_data, 0,
  100) = true) and
  (bool_eq4(((a).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100) = true)) -> (bool_eq8(a, b) = true)) and
  ((not ((bool_eq7(((a).us_split_fields5).rec__model__uml_state_machine__owned_state_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_state_data, 0,
  100) = true) and
  (bool_eq4(((a).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100) = true))) -> (bool_eq8(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,us_rep1) farray. forall a1:(int,us_rep) farray.
  (0 <= object__size4({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = a;
  rec__model__uml_state_machine__owned_transition_data = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,us_rep1) farray. forall a1:(int,us_rep) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = a;
  rec__model__uml_state_machine__owned_transition_data = a1 } })))

logic model__uml_state_machine__owned_state_data__first__bit : int

logic model__uml_state_machine__owned_state_data__last__bit : int

logic model__uml_state_machine__owned_state_data__position : int

axiom model__uml_state_machine__owned_state_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_state_data__first__bit)

axiom model__uml_state_machine__owned_state_data__last__bit_axiom :
  (model__uml_state_machine__owned_state_data__first__bit <  model__uml_state_machine__owned_state_data__last__bit)

axiom model__uml_state_machine__owned_state_data__position_axiom :
  (0 <= model__uml_state_machine__owned_state_data__position)

logic model__uml_state_machine__owned_transition_data__first__bit : int

logic model__uml_state_machine__owned_transition_data__last__bit : int

logic model__uml_state_machine__owned_transition_data__position : int

axiom model__uml_state_machine__owned_transition_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__first__bit)

axiom model__uml_state_machine__owned_transition_data__last__bit_axiom :
  (model__uml_state_machine__owned_transition_data__first__bit <  model__uml_state_machine__owned_transition_data__last__bit)

axiom model__uml_state_machine__owned_transition_data__position_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : (int,us_rep1) farray

logic dummy9 : (int,us_rep) farray

type uml_state_machine__ref = { uml_state_machine__content : us_rep2
}

function uml_state_machine__ref___projection(a: uml_state_machine__ref) : us_rep2 =
  (a).uml_state_machine__content

logic owned_transition : us_rep2 -> (int,us_rep) farray

logic owned_transition__function_guard : (int,us_rep) farray, us_rep2 -> prop

axiom owned_transition__post_axiom : true

axiom owned_transition__def_axiom :
  (forall self:(int,us_rep1) farray. forall self1:(int,us_rep) farray
  [owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self;
  rec__model__uml_state_machine__owned_transition_data = self1 } })].
  (owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self;
  rec__model__uml_state_machine__owned_transition_data = self1 } }) = self1))

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "model.ads", line 62, characters 0-0 *)
goal WP_parameter_def :
  (forall self__split_fields:(int,us_rep1) farray.
  forall self__split_fields1:(int,us_rep) farray.
  forall result:(int,us_rep1) farray. forall result1:(int,us_rep) farray.
  forall self__split_fields2:(int,us_rep1) farray.
  forall self__split_fields3:(int,us_rep) farray.
  forall self__split_fields4:(int,us_rep1) farray.
  forall self__split_fields5:(int,us_rep) farray.
  forall self__split_fields6:(int,us_rep1) farray.
  forall self__split_fields7:(int,us_rep) farray.
  (((((result = self__split_fields) and (result1 = self__split_fields1)) and
  ((self__split_fields = self__split_fields2) and
  (val__ = self__split_fields3))) and
  (((self__split_fields4 = self__split_fields2) and
  (self__split_fields5 = self__split_fields3)) and
  ((self__split_fields6 = self__split_fields2) and
  (self__split_fields7 = self__split_fields3)))) ->
  (bool_eq4(owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self__split_fields4;
  rec__model__uml_state_machine__owned_transition_data = self__split_fields5
  } }), 0, 100, val__, 0, 100) = true)))
