(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type intarray__ref = { intarray__content : us_t
}

function intarray__ref___projection(a: intarray__ref) : us_t =
  (a).intarray__content

logic table : (int,integer) farray

logic table1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic value1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic found1 : bool

logic found2 : bool

logic index1 : int

logic index2 : int

logic found : int

logic i : int

logic temp___163 : int

logic temp___162 : int

logic temp___161 : bool

logic temp___160 : bool

logic temp___159 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : integer

logic o4 : int

logic result : int

logic found3 : int

logic result1 : bool

logic found11 : bool

logic result2 : int

logic index11 : int

logic result3 : bool

logic found21 : bool

logic result4 : int

logic index21 : int

logic result5 : int

logic i1 : int

logic found12 : bool

logic found22 : bool

logic index12 : int

logic index22 : int

logic found4 : int

logic i2 : int

logic result6 : bool

logic found13 : bool

logic result7 : int

logic index13 : int

logic result8 : int

logic found5 : int

logic result9 : bool

logic found23 : bool

logic result10 : int

logic index23 : int

logic result11 : int

logic found6 : int

logic found14 : bool

logic found24 : bool

logic index14 : int

logic index24 : int

logic found7 : int

logic i3 : int

logic found15 : bool

logic found25 : bool

logic index15 : int

logic index25 : int

logic found8 : int

logic i4 : int

logic found16 : bool

logic found26 : bool

logic index16 : int

logic index26 : int

logic found9 : int

logic i5 : int

logic found17 : bool

logic found27 : bool

logic index17 : int

logic index27 : int

logic found10 : int

logic i6 : int

logic found18 : bool

logic found28 : bool

logic index18 : int

logic index28 : int

logic found19 : int

logic i7 : int

logic found110 : bool

logic found29 : bool

logic index19 : int

logic index29 : int

logic found20 : int

logic i8 : int

logic result12 : bool

axiom H : dynamic_property((- 2147483648), 2147483647, to_rep(first(table1)),
  to_rep(last(table1)))

axiom H1 : in_range1(value1)

axiom H2 : in_range1(value2)

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(index1))

axiom H4 : (((- 2147483648) <= 2147483647) -> in_range1(index2))

axiom H5 : (result = found)

axiom H6 : (found3 = 0)

axiom H7 : in_range2(found3)

axiom H8 : (result1 = found1)

axiom H9 : (found11 = of_int(0))

axiom H10 : (result2 = index1)

axiom H11 : (index11 = 0)

axiom H12 : (result3 = found2)

axiom H13 : (found21 = of_int(0))

axiom H14 : (result4 = index2)

axiom H15 : (index21 = 0)

axiom H16 : (result5 = i)

axiom H17 : (i1 = to_rep(first(table1)))

axiom H18 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (temp___163 = index21))

axiom H19 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (temp___162 = index11))

axiom H20 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (temp___161 = found21))

axiom H21 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (temp___160 = found11))

axiom H22 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (temp___159 = found3))

axiom H23 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((((0 <= 2147483647) ->
  in_range2(found4)) and (((- 2147483648) <= 2147483647) ->
  in_range1(index12))) and (((- 2147483648) <= 2147483647) ->
  in_range1(index22))) and ((to_rep(first(table1)) <= i2) and
  (i2 <= to_rep(last(table1))))))

axiom H24 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((((found4 = 0) and
  (not (found12 = true))) and (not (found22 = true))) or ((found4 = 1) and
  ((found12 = true) or (found22 = true)))) or (((found4 = 2) and
  (found12 = true)) and (found22 = true))))

axiom H25 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not (found12 = true)) or
  (not (found22 = true))))

axiom H26 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not (found12 = true)) or
  (to_rep((table[index12])) = value1)))

axiom H27 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not (found22 = true)) or
  (to_rep((table[index22])) = value2)))

axiom H28 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found4 <  2))

axiom H29 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (found12 = result6)))

axiom H30 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (found13 = of_int(1))))

axiom H31 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (index12 = result7)))

axiom H32 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (index13 = i2)))

axiom H33 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> ((o = (found4 + 1)) and
  in_range1((found4 + 1)))))

axiom H34 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (found4 = result8)))

axiom H35 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (found5 = o)))

axiom H36 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> ((found13 = true) and (index13 = i2))))

axiom H37 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found12 = true)) and
  (to_rep((table[i2])) = value1)) -> (found5 <= 2)))

axiom H38 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not ((not (found12 = true)) and
  (to_rep((table[i2])) = value1))) -> (found5 = found4)))

axiom H39 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not ((not (found12 = true)) and
  (to_rep((table[i2])) = value1))) -> (index13 = index12)))

axiom H40 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not ((not (found12 = true)) and
  (to_rep((table[i2])) = value1))) -> (found13 = found12)))

axiom H41 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (found22 = result9)))

axiom H42 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (found23 = of_int(1))))

axiom H43 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (index22 = result10)))

axiom H44 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (index23 = i2)))

axiom H45 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> ((o1 = (found5 + 1)) and
  in_range1((found5 + 1)))))

axiom H46 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (found5 = result11)))

axiom H47 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (found6 = o1)))

axiom H48 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> ((found23 = true) and (index23 = i2))))

axiom H49 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (((not (found22 = true)) and
  (to_rep((table[i2])) = value2)) -> (found6 <= 2)))

axiom H50 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not ((not (found22 = true)) and
  (to_rep((table[i2])) = value2))) -> (found6 = found5)))

axiom H51 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not ((not (found22 = true)) and
  (to_rep((table[i2])) = value2))) -> (index23 = index22)))

axiom H52 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((not ((not (found22 = true)) and
  (to_rep((table[i2])) = value2))) -> (found23 = found22)))

axiom H53 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> ((found6 = 2) or ((not (found6 = 2)) and
  (i2 = to_rep(last(table1))))))

axiom H54 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (i3 = i2))

axiom H55 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found7 = found6))

axiom H56 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index24 = index23))

axiom H57 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index14 = index13))

axiom H58 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found24 = found23))

axiom H59 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found14 = found13))

axiom H60 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (i4 = i2))

axiom H61 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found8 = found6))

axiom H62 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index25 = index23))

axiom H63 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index15 = index13))

axiom H64 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found25 = found23))

axiom H65 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found15 = found13))

axiom H66 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (i5 = i3))

axiom H67 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found9 = found7))

axiom H68 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index26 = index24))

axiom H69 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index16 = index14))

axiom H70 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found26 = found24))

axiom H71 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found16 = found14))

axiom H72 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (i6 = i4))

axiom H73 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found10 = found8))

axiom H74 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index27 = index25))

axiom H75 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (index17 = index15))

axiom H76 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found27 = found25))

axiom H77 : (((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1)))) -> (found17 = found15))

axiom H78 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (i5 = i1))

axiom H79 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (found9 = found3))

axiom H80 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (index26 = index21))

axiom H81 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (index16 = index11))

axiom H82 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (found26 = found21))

axiom H83 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (found16 = found11))

axiom H84 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (i6 = i1))

axiom H85 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (found10 = found3))

axiom H86 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (index27 = index21))

axiom H87 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (index17 = index11))

axiom H88 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (found27 = found21))

axiom H89 : ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) -> (found17 = found11))

axiom H90 : (i7 = i5)

axiom H91 : (found19 = found9)

axiom H92 : (index28 = index26)

axiom H93 : (index18 = index16)

axiom H94 : (found28 = found26)

axiom H95 : (found18 = found16)

axiom H96 : (i8 = i6)

axiom H97 : (found20 = found10)

axiom H98 : (index29 = index27)

axiom H99 : (index19 = index17)

axiom H100 : (found29 = found27)

axiom H101 : (found110 = found17)

axiom H102 : (found18 = true)

 (* File "search.ads", line 19, characters 0-0 *)
goal WP_parameter_def : (to_rep(first(table1)) <= index18)
