(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type r1

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : r1, r1 -> bool

logic dummy2 : r1

type r1__ref = { r1__content : r1
}

function r1__ref___projection(a: r1__ref) : r1 = (a).r1__content

logic to_rep1 : r1 -> int

logic of_rep1 : int -> r1

axiom inversion_axiom1 :
  (forall x:r1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:r1 [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type r2

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : r2, r2 -> bool

logic dummy3 : r2

type r2__ref = { r2__content : r2
}

function r2__ref___projection(a: r2__ref) : r2 = (a).r2__content

logic dummy4 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq4 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__stack__stack__top : r1;
rec__stack__stack__content : (int,integer) farray
}

function us_split_fields_Top__projection(a: us_split_fields) : r1 =
  (a).rec__stack__stack__top

function us_split_fields_Content__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__stack__stack__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__stack__stack__top) = to_rep1(((b).us_split_fields1).rec__stack__stack__top)) and
  (bool_eq4(((a).us_split_fields1).rec__stack__stack__content, 1, 100,
  ((b).us_split_fields1).rec__stack__stack__content, 1, 100) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__stack__stack__top) = to_rep1(((b).us_split_fields1).rec__stack__stack__top)) and
  (bool_eq4(((a).us_split_fields1).rec__stack__stack__content, 1, 100,
  ((b).us_split_fields1).rec__stack__stack__content, 1, 100) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:r1. forall a1:(int,integer) farray. (0 <= object__size1({
  us_split_fields1 = { rec__stack__stack__top = a;
  rec__stack__stack__content = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:r1. forall a1:(int,integer) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__stack__stack__top = a;
  rec__stack__stack__content = a1 } })))

logic stack__stack__top__first__bit : int

logic stack__stack__top__last__bit : int

logic stack__stack__top__position : int

axiom stack__stack__top__first__bit_axiom :
  (0 <= stack__stack__top__first__bit)

axiom stack__stack__top__last__bit_axiom :
  (stack__stack__top__first__bit <  stack__stack__top__last__bit)

axiom stack__stack__top__position_axiom : (0 <= stack__stack__top__position)

logic stack__stack__content__first__bit : int

logic stack__stack__content__last__bit : int

logic stack__stack__content__position : int

axiom stack__stack__content__first__bit_axiom :
  (0 <= stack__stack__content__first__bit)

axiom stack__stack__content__last__bit_axiom :
  (stack__stack__content__first__bit <  stack__stack__content__last__bit)

axiom stack__stack__content__position_axiom :
  (0 <= stack__stack__content__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : r1

logic dummy6 : (int,integer) farray

type stack__ref = { stack__content : us_rep
}

function stack__ref___projection(a: stack__ref) : us_rep = (a).stack__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy7 : (int,integer) farray

logic dummy8 : t

type m__ref = { m__content : us_t
}

function m__ref___projection(a: m__ref) : us_t = (a).m__content

logic to__ : us_rep -> us_t

logic to____function_guard : us_t, us_rep -> prop

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy9 : integer

type t4b__ref = { t4b__content : integer
}

function t4b__ref___projection(a: t4b__ref) : integer = (a).t4b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy10 : (int,integer) farray

logic dummy11 : t1

type t5b__ref = { t5b__content : us_t1
}

function t5b__ref___projection(a: t5b__ref) : us_t1 = (a).t5b__content

axiom to____post_axiom :
  (forall s:r1. forall s1:(int,integer) farray [to__({ us_split_fields1 = {
  rec__stack__stack__top = s; rec__stack__stack__content = s1 } })].
  (((to_rep(first((to__({ us_split_fields1 = { rec__stack__stack__top = s;
  rec__stack__stack__content = s1 } })).rt)) = 1) and
  (0 <= to_rep(last((to__({ us_split_fields1 = { rec__stack__stack__top = s;
  rec__stack__stack__content = s1 } })).rt)))) and dynamic_property(1,
  2147483647, to_rep(first((to__({ us_split_fields1 = {
  rec__stack__stack__top = s; rec__stack__stack__content = s1 } })).rt)),
  to_rep(last((to__({ us_split_fields1 = { rec__stack__stack__top = s;
  rec__stack__stack__content = s1 } })).rt)))))

axiom to____def_axiom :
  (forall s:r1. forall s1:(int,integer) farray [to__({ us_split_fields1 = {
  rec__stack__stack__top = s; rec__stack__stack__content = s1 } })]. (to__({
  us_split_fields1 = { rec__stack__stack__top = s;
  rec__stack__stack__content = s1 } }) = { elts = s1; rt =
  mk(to_rep(first2(mk1(1, to_rep1(s)))), to_rep(last2(mk1(1, to_rep1(s)))))
  }))

logic is_full : us_rep -> bool

logic is_full__function_guard : bool, us_rep -> prop

axiom is_full__post_axiom : true

axiom is_full__def_axiom :
  (forall s:r1. forall s1:(int,integer) farray [is_full({ us_split_fields1 =
  { rec__stack__stack__top = s; rec__stack__stack__content = s1 } })].
  ((is_full({ us_split_fields1 = { rec__stack__stack__top = s;
  rec__stack__stack__content = s1 } }) = true) <->
  (100 <= to_rep(last((to__({ us_split_fields1 = { rec__stack__stack__top =
  s; rec__stack__stack__content = s1 } })).rt)))))

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t12s

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 1))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x1:int. forall y:int [bool_eq10(x1, y)]. (((x1 = y) ->
  (bool_eq10(x1, y) = true)) and ((not (x1 = y)) -> (bool_eq10(x1,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : t12s, t12s -> bool

logic dummy12 : t12s

type t12s__ref = { t12s__content : t12s
}

function t12s__ref___projection(a: t12s__ref) : t12s = (a).t12s__content

logic temp___190 : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___192:int. ((temp___190(temp___192)[1]) = of_rep(temp___192)))

logic s__split_fields : r1

logic s__split_fields1 : (int,integer) farray

logic o : int

logic o1 : r1

logic o2 : r1

logic o3 : (int,integer) farray

logic temp___234 : r1

logic temp___2341 : (int,integer) farray

logic o4 : integer

logic o5 : int

logic o6 : (int,integer) farray

logic o7 : r1

logic o8 : (int,integer) farray

logic temp___238 : r1

logic temp___2381 : (int,integer) farray

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic result : r1

logic result1 : (int,integer) farray

logic s__split_fields2 : r1

logic s__split_fields3 : (int,integer) farray

logic result2 : r1

logic result3 : (int,integer) farray

logic s__split_fields4 : r1

logic s__split_fields5 : (int,integer) farray

logic s__split_fields6 : r1

logic s__split_fields7 : (int,integer) farray

logic s__split_fields8 : r1

logic s__split_fields9 : (int,integer) farray

axiom H : in_range(x)

axiom H1 : (not (is_full({ us_split_fields1 = { rec__stack__stack__top =
  s__split_fields; rec__stack__stack__content = s__split_fields1 }
  }) = true))

axiom H2 : ((o = (to_rep1(s__split_fields) + 1)) and
  in_range2((to_rep1(s__split_fields) + 1)))

axiom H3 : (to_rep1(o1) = o)

axiom H4 : (o1 = o2)

axiom H5 : (s__split_fields1 = o3)

axiom H6 : (temp___234 = o2)

axiom H7 : (temp___2341 = o3)

axiom H8 : ((result = s__split_fields) and (result1 = s__split_fields1))

axiom H9 : (temp___234 = s__split_fields2)

axiom H10 : (temp___2341 = s__split_fields3)

axiom H11 : (to_rep(o4) = x)

axiom H12 : ((1 <= to_rep1(s__split_fields2)) and
  (to_rep1(s__split_fields2) <= 100))

axiom H13 : (o5 = to_rep1(s__split_fields2))

axiom H14 : (o6 = (s__split_fields3[o5 <- o4]))

axiom H15 : (s__split_fields2 = o7)

axiom H16 : (o6 = o8)

axiom H17 : (temp___238 = o7)

axiom H18 : (temp___2381 = o8)

axiom H19 : (result2 = s__split_fields2)

axiom H20 : (result3 = s__split_fields3)

axiom H21 : (temp___238 = s__split_fields4)

axiom H22 : (temp___2381 = s__split_fields5)

axiom H23 : (s__split_fields6 = s__split_fields4)

axiom H24 : (s__split_fields7 = s__split_fields5)

axiom H25 : ((s__split_fields8 = s__split_fields4) and
  (s__split_fields9 = s__split_fields5))

axiom H26 : (not (length(to__({ us_split_fields1 = { rec__stack__stack__top =
  s__split_fields; rec__stack__stack__content = s__split_fields1 } })) = 0))

axiom H27 : ((1 <= 1) -> (o9 = ((1 - 1) + 1)))

axiom H28 : ((not (1 <= 1)) -> (o9 = 0))

axiom H29 : ((to_rep(first((to__({ us_split_fields1 = {
  rec__stack__stack__top = s__split_fields; rec__stack__stack__content =
  s__split_fields1 } })).rt)) <= to_rep(last((to__({ us_split_fields1 = {
  rec__stack__stack__top = s__split_fields; rec__stack__stack__content =
  s__split_fields1 } })).rt))) -> (o10 = ((to_rep(last((to__({
  us_split_fields1 = { rec__stack__stack__top = s__split_fields;
  rec__stack__stack__content = s__split_fields1 }
  })).rt)) - to_rep(first((to__({ us_split_fields1 = {
  rec__stack__stack__top = s__split_fields; rec__stack__stack__content =
  s__split_fields1 } })).rt))) + 1)))

axiom H30 : ((not (to_rep(first((to__({ us_split_fields1 = {
  rec__stack__stack__top = s__split_fields; rec__stack__stack__content =
  s__split_fields1 } })).rt)) <= to_rep(last((to__({ us_split_fields1 = {
  rec__stack__stack__top = s__split_fields; rec__stack__stack__content =
  s__split_fields1 } })).rt)))) -> (o10 = 0))

axiom H31 : (o11 = (o10 + o9))

axiom H32 : (o12 = (to_rep(first((to__({ us_split_fields1 = {
  rec__stack__stack__top = s__split_fields; rec__stack__stack__content =
  s__split_fields1 } })).rt)) + o11))

axiom H33 : (o13 = (o12 - 1))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1(o13)
