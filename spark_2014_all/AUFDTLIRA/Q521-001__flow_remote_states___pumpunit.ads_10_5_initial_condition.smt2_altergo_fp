(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type nat_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : nat_type, nat_type -> bool

logic dummy1 : nat_type

type nat_type__ref = { nat_type__content : nat_type
}

function nat_type__ref___projection(a: nat_type__ref) : nat_type =
  (a).nat_type__content

logic to_rep : nat_type -> int

logic of_rep : int -> nat_type

axiom inversion_axiom :
  (forall x:nat_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:nat_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic dummy3 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__pump__pump_record__name :
(int,character) farray; rec__pump__pump_record__resevoir : nat_type;
rec__pump__pump_record__price : nat_type; rec__pump__pump_record__remaining :
nat_type
}

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__pump__pump_record__name

function us_split_fields_Resevoir__projection(a: us_split_fields) : nat_type =
  (a).rec__pump__pump_record__resevoir

function us_split_fields_Price__projection(a: us_split_fields) : nat_type =
  (a).rec__pump__pump_record__price

function us_split_fields_Remaining__projection(a: us_split_fields) : nat_type =
  (a).rec__pump__pump_record__remaining

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((((bool_eq4(((a).us_split_fields1).rec__pump__pump_record__name, 1, 10,
  ((b).us_split_fields1).rec__pump__pump_record__name, 1, 10) = true) and
  (to_rep(((a).us_split_fields1).rec__pump__pump_record__resevoir) = to_rep(((b).us_split_fields1).rec__pump__pump_record__resevoir))) and
  (to_rep(((a).us_split_fields1).rec__pump__pump_record__price) = to_rep(((b).us_split_fields1).rec__pump__pump_record__price))) and
  (to_rep(((a).us_split_fields1).rec__pump__pump_record__remaining) = to_rep(((b).us_split_fields1).rec__pump__pump_record__remaining))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((((bool_eq4(((a).us_split_fields1).rec__pump__pump_record__name, 1,
  10, ((b).us_split_fields1).rec__pump__pump_record__name, 1, 10) = true) and
  (to_rep(((a).us_split_fields1).rec__pump__pump_record__resevoir) = to_rep(((b).us_split_fields1).rec__pump__pump_record__resevoir))) and
  (to_rep(((a).us_split_fields1).rec__pump__pump_record__price) = to_rep(((b).us_split_fields1).rec__pump__pump_record__price))) and
  (to_rep(((a).us_split_fields1).rec__pump__pump_record__remaining) = to_rep(((b).us_split_fields1).rec__pump__pump_record__remaining)))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. forall a1:nat_type. forall a2:nat_type.
  forall a3:nat_type. (0 <= object__size1({ us_split_fields1 = {
  rec__pump__pump_record__name = a; rec__pump__pump_record__resevoir = a1;
  rec__pump__pump_record__price = a2; rec__pump__pump_record__remaining = a3
  } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. forall a1:nat_type. forall a2:nat_type.
  forall a3:nat_type. (0 <= object__alignment1({ us_split_fields1 = {
  rec__pump__pump_record__name = a; rec__pump__pump_record__resevoir = a1;
  rec__pump__pump_record__price = a2; rec__pump__pump_record__remaining = a3
  } })))

logic pump__pump_record__name__first__bit : int

logic pump__pump_record__name__last__bit : int

logic pump__pump_record__name__position : int

axiom pump__pump_record__name__first__bit_axiom :
  (0 <= pump__pump_record__name__first__bit)

axiom pump__pump_record__name__last__bit_axiom :
  (pump__pump_record__name__first__bit <  pump__pump_record__name__last__bit)

axiom pump__pump_record__name__position_axiom :
  (0 <= pump__pump_record__name__position)

logic pump__pump_record__resevoir__first__bit : int

logic pump__pump_record__resevoir__last__bit : int

logic pump__pump_record__resevoir__position : int

axiom pump__pump_record__resevoir__first__bit_axiom :
  (0 <= pump__pump_record__resevoir__first__bit)

axiom pump__pump_record__resevoir__last__bit_axiom :
  (pump__pump_record__resevoir__first__bit <  pump__pump_record__resevoir__last__bit)

axiom pump__pump_record__resevoir__position_axiom :
  (0 <= pump__pump_record__resevoir__position)

logic pump__pump_record__price__first__bit : int

logic pump__pump_record__price__last__bit : int

logic pump__pump_record__price__position : int

axiom pump__pump_record__price__first__bit_axiom :
  (0 <= pump__pump_record__price__first__bit)

axiom pump__pump_record__price__last__bit_axiom :
  (pump__pump_record__price__first__bit <  pump__pump_record__price__last__bit)

axiom pump__pump_record__price__position_axiom :
  (0 <= pump__pump_record__price__position)

logic pump__pump_record__remaining__first__bit : int

logic pump__pump_record__remaining__last__bit : int

logic pump__pump_record__remaining__position : int

axiom pump__pump_record__remaining__first__bit_axiom :
  (0 <= pump__pump_record__remaining__first__bit)

axiom pump__pump_record__remaining__last__bit_axiom :
  (pump__pump_record__remaining__first__bit <  pump__pump_record__remaining__last__bit)

axiom pump__pump_record__remaining__position_axiom :
  (0 <= pump__pump_record__remaining__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : (int,character) farray

logic dummy5 : nat_type

logic dummy6 : nat_type

logic dummy7 : nat_type

type pump_record__ref = { pump_record__content : us_rep
}

function pump_record__ref___projection(a: pump_record__ref) : us_rep =
  (a).pump_record__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic is_base : int -> bool

logic is_base__function_guard : bool, int -> prop

type internal_state

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : internal_state, internal_state -> bool

logic dummy8 : internal_state

type internal_state__ref = { internal_state__content : internal_state
}

function internal_state__ref___projection(a: internal_state__ref) : internal_state =
  (a).internal_state__content

axiom is_base__post_axiom : true

axiom is_base__def_axiom :
  (forall pumpunit__cur_state:int [is_base(pumpunit__cur_state)].
  ((is_base(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 3)))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic cur_state : int

logic total_pay : int

logic outstanding : int

logic invariant_value : int

logic result : int

logic cur_state1 : int

logic result1 : bool

axiom H : (result = cur_state)

axiom H1 : (cur_state1 = 3)

axiom H2 : in_range3(cur_state1)

axiom H3 : ((0 <= 2147483647) -> in_range(total_pay))

axiom H4 : ((0 <= 2147483647) -> in_range(outstanding))

axiom H5 : ((0 <= 2147483647) -> in_range(invariant_value))

axiom H6 : ((result1 = is_base(cur_state1)) and ((result1 = true) <->
  (cur_state1 = 3)))

 (* File "pumpunit.adb", line 54, characters 0-0 *)
goal WP_parameter_def : (is_base(cur_state1) = true)
