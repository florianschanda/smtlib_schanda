(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort idx 0)
(declare-fun idxqtint (idx) Int)
(assert (forall ((i idx)) (and (<= 0 (idxqtint i)) (<= (idxqtint i) 5))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (idx idx) Bool)
(declare-const dummy idx)
(declare-datatypes () ((idx__ref (mk_idx__ref (idx__content idx)))))
(define-fun idx__ref___projection ((a idx__ref)) idx (idx__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 5)) (in_range1 temp___expr_159)))
(declare-sort valid_idx 0)
(declare-fun valid_idxqtint (valid_idx) Int)
(assert (forall ((i valid_idx)) (and (<= 1 (valid_idxqtint i)) (<= (valid_idxqtint i) 5))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (valid_idx valid_idx) Bool)
(declare-const dummy1 valid_idx)
(declare-datatypes () ((valid_idx__ref (mk_valid_idx__ref (valid_idx__content valid_idx)))))
(define-fun valid_idx__ref___projection ((a valid_idx__ref)) valid_idx (valid_idx__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 5)) (in_range2 temp___expr_166)))
(declare-const a (Array Int Bool))
(declare-const v Int)
(declare-const x Int)
(declare-const loopframe__get__result Int)
(declare-const temp___183 Int)
(declare-const result Int)
(declare-const v1 Int)
(declare-const result1 Int)
(declare-const x1 Int)
(declare-const result2 Int)
(declare-const v2 Int)
(declare-const result3 Int)
(declare-const x2 Int)
(declare-const result4 Int)
(declare-const v3 Int)
(declare-const result5 Int)
(declare-const x3 Int)
(declare-const result6 Int)
(declare-const v4 Int)
(declare-const result7 Int)
(declare-const x4 Int)
(declare-const result8 Int)
(declare-const v5 Int)
(declare-const result9 Int)
(declare-const x5 Int)
(declare-const result10 Int)
(declare-const v6 Int)
(declare-const v7 Int)
(declare-const x6 Int)
(declare-const v8 Int)
(declare-const x7 Int)
(declare-const v9 Int)
(declare-const x8 Int)
(declare-const v10 Int)
(declare-const x9 Int)
(declare-const v11 Int)
(declare-const x10 Int)
(declare-const v12 Int)
(declare-const x11 Int)
(declare-const v13 int__ref)
(declare-const x12 int__ref)
(declare-const v14 Int)
(declare-const x13 Int)
(declare-const v15 int__ref)
(declare-const x14 int__ref)
(declare-const v16 Int)
(declare-const x15 Int)
(declare-const result11 int__ref)
(declare-const loopframe__get__result1 Int)
(declare-const loopframe__get__result2 int__ref)
(declare-const loopframe__get__result3 Int)
(declare-const v17 int__ref)
(declare-const x16 int__ref)
(declare-const loopframe__get__result4 int__ref)
(declare-const v18 Int)
(declare-const x17 Int)
(declare-const loopframe__get__result5 Int)
(define-fun x18 () int__ref (mk_int__ref x10))
(define-fun v19 () int__ref (mk_int__ref v11))
(define-fun x19 () int__ref (mk_int__ref x8))
(define-fun v20 () int__ref (mk_int__ref v9))
(define-fun result12 () int__ref (mk_int__ref result1))
(define-fun x20 () int__ref (mk_int__ref x))
(declare-const result13 Int)
(assert (= (mk_int__ref result) (mk_int__ref v)))
(assert (= v1 0))
(assert (in_range1 v1))
(assert (or (and (and (and (= result12 x20) (= x1 1)) (and (and (not (= (select a x1) true)) (= v2 v1)) (and (and (= x1 result3) (= x2 2)) (and (and (not (= (select a x2) true)) (= v3 v2)) (and (and (= x2 result5) (= x3 3)) (and (and (not (= (select a x3) true)) (= v4 v3)) (and (and (= x3 result7) (= x4 4)) (and (and (not (= (select a x4) true)) (= v5 v4)) (and (and (= x4 result9) (= x5 5)) (and (not (= (select a x5) true)) (= v6 v5))))))))))) (and (and (= x14 (mk_int__ref x5)) (= v15 (mk_int__ref v6))) (and (= x15 x5) (= v16 v6)))) (and (and (= temp___183 v1) (and (and (= result12 x20) (= x1 1)) (or (and (and (and (= x12 (mk_int__ref x1)) (= v13 (mk_int__ref v2))) (and (= x13 x1) (= v14 v2))) (and (= (select a x1) true) (and (= v1 result2) (= v2 x1)))) (and (and (not (= (select a x1) true)) (= v2 v1)) (and (and (and (= x12 x18) (= v13 v19)) (and (= x13 x11) (= v14 v12))) (and (and (= x1 result3) (= x2 2)) (or (and (and (and (= x2 x10) (= v3 v11)) (and (= x11 x2) (= v12 v3))) (and (= (select a x2) true) (and (= v2 result4) (= v3 x2)))) (and (and (not (= (select a x2) true)) (= v3 v2)) (and (and (and (= x18 x19) (= v19 v20)) (and (= x11 x9) (= v12 v10))) (and (and (= x2 result5) (= x3 3)) (or (and (and (and (= x3 x8) (= v4 v9)) (and (= x9 x3) (= v10 v4))) (and (= (select a x3) true) (and (= v3 result6) (= v4 x3)))) (and (and (not (= (select a x3) true)) (= v4 v3)) (and (and (and (= x19 (mk_int__ref x6)) (= v20 (mk_int__ref v7))) (and (= x9 x7) (= v10 v8))) (and (and (= x3 result7) (= x4 4)) (or (and (and (and (= x4 x6) (= v5 v7)) (and (= x7 x4) (= v8 v5))) (and (= (select a x4) true) (and (= v4 result8) (= v5 x4)))) (and (and (not (= (select a x4) true)) (= v5 v4)) (and (and (and (= x5 x6) (= v6 v7)) (and (= x7 x5) (= v8 v6))) (and (and (= x4 result9) (= x5 5)) (and (= (select a x5) true) (and (= v5 result10) (= v6 x5))))))))))))))))))))) (and (and (= x14 x12) (= v15 v13)) (and (= x15 x13) (= v16 v14))))))
(assert (= loopframe__get__result2 (mk_int__ref loopframe__get__result1)))
(assert (= loopframe__get__result3 loopframe__get__result1))
(assert (= result11 (mk_int__ref loopframe__get__result)))
(assert (= loopframe__get__result1 (int__content v15)))
(assert (= loopframe__get__result4 loopframe__get__result2))
(assert (= x16 x14))
(assert (= v17 v15))
(assert (= loopframe__get__result5 loopframe__get__result3))
(assert (= x17 x15))
(assert (= v18 v16))
(assert (= result13 (int__content loopframe__get__result4)))
(assert (not (= (int__content loopframe__get__result4) 0)))
(assert (not (= (select a (int__content loopframe__get__result4)) true)))
(check-sat)
(exit)
