(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((0 <= x) and (x <= 1000000))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bool, int -> (int,bool) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)])))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,bool) farray; rt : t
}

function to_array(a: us_t) : (int,bool) farray = (a).elts

function of_array(a: (int,bool) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,bool) farray -> int

logic value__component__size : int

logic object__component__size : (int,bool) farray -> int

logic value__alignment : int

logic object__alignment : (int,bool) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,bool) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,bool) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,bool) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,bool) farray

logic dummy3 : t

type arr__ref = { arr__content : us_t
}

function arr__ref___projection(a: arr__ref) : us_t = (a).arr__content

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic a : (int,bool) farray

logic i : int

logic j : int

logic o : int

logic o1 : int

logic temp___170 : int

logic temp___169 : int

logic temp___168 : (int,bool) farray

logic temp___171 : int

logic k : int

logic k1 : int

logic o2 : int

logic o3 : bool

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic k2 : int

logic j1 : int

logic o9 : int

logic o10 : bool

logic j2 : int

logic a1 : (int,bool) farray

logic i1 : int

logic j3 : int

logic result : int

logic i2 : int

logic result1 : int

logic j4 : int

logic a2 : (int,bool) farray

logic i3 : int

logic j5 : int

logic temp___1711 : int

logic result2 : bool

logic result3 : bool

logic result4 : int

logic temp___1712 : int

logic result5 : bool

logic result6 : int

logic i4 : int

logic result7 : bool

logic result8 : int

logic j6 : int

logic a3 : (int,bool) farray

logic result9 : int

logic i5 : int

logic result10 : int

logic j7 : int

logic a4 : (int,bool) farray

logic i6 : int

logic j8 : int

logic temp___1713 : int

logic a5 : (int,bool) farray

logic i7 : int

logic j9 : int

logic temp___1714 : int

logic a6 : (int,bool) farray

logic i8 : int

logic j10 : int

logic a7 : (int,bool) farray

logic i9 : int

logic j11 : int

logic a8 : (int,bool) farray

logic i10 : int

logic j12 : int

logic a9 : (int,bool) farray

logic i11 : int

logic j13 : int

logic a10 : (int,bool) farray

logic i12 : int

logic j14 : int

logic a11 : (int,bool) farray

logic i13 : int

logic j15 : int

logic a12 : (int,bool) farray

logic i14 : int

logic j16 : int

logic a13 : (int,bool) farray

logic i15 : int

logic j17 : int

logic result11 : bool

logic result12 : bool

axiom H : dynamic_property(0, 1000000, to_rep(a__first), to_rep(a__last))

axiom H1 : ((0 <= 1000000) -> in_range2(i))

axiom H2 : ((0 <= 1000000) -> in_range2(j))

axiom H3 : (not (to_rep(a__last) <  to_rep(a__first)))

axiom H4 : ((o = to_rep(a__first)) and in_range2(to_rep(a__first)))

axiom H5 : (result = i)

axiom H6 : (i2 = o)

axiom H7 : ((o1 = to_rep(a__last)) and in_range2(to_rep(a__last)))

axiom H8 : (result1 = j)

axiom H9 : (j4 = o1)

axiom H10 : (i2 <= j4)

axiom H11 : (((((to_rep(a__first) <= i3) and (i3 <= to_rep(a__last))) and
  ((to_rep(a__first) <= j5) and (j5 <= to_rep(a__last)))) and
  (forall k3:int. (((to_rep(a__first) <= k3) and (k3 <= (i3 - 1))) ->
  (not ((a2[k3]) = true))))) and
  (forall k3:int. ((((j5 + 1) <= k3) and (k3 <= to_rep(a__last))) ->
  ((a2[k3]) = true))))

axiom H12 : ((((0 <= 1000000) -> in_range2(i3)) and ((0 <= 1000000) ->
  in_range2(j5))) and (i3 <= j5))

axiom H13 : (temp___1711 = result4)

axiom H14 : (temp___1712 = (j5 - i3))

axiom H15 : ((to_rep(a__first) <= i3) and (i3 <= to_rep(a__last)))

axiom H16 : (o2 = i3)

axiom H17 : (o3 = (a2[o2]))

axiom H18 : (((not (o3 = true)) -> (result5 = true)) and ((o3 = true) ->
  (result5 = false)))

axiom H19 : ((result5 = true) -> ((o4 = (i3 + 1)) and in_range2((i3 + 1))))

axiom H20 : ((result5 = true) -> (i3 = result6))

axiom H21 : ((result5 = true) -> (i4 = o4))

axiom H22 : ((result5 = true) -> (j6 = j5))

axiom H23 : ((result5 = true) -> (a3 = a2))

axiom H24 : ((not (result5 = true)) -> ((to_rep(a__first) <= j5) and
  (j5 <= to_rep(a__last))))

axiom H25 : ((not (result5 = true)) -> (o5 = j5))

axiom H26 : ((not (result5 = true)) -> (result7 = (a2[o5])))

axiom H27 : ((not (result5 = true)) -> ((result7 = true) ->
  ((o6 = (j5 - 1)) and in_range2((j5 - 1)))))

axiom H28 : ((not (result5 = true)) -> ((result7 = true) -> (j5 = result8)))

axiom H29 : ((not (result5 = true)) -> ((result7 = true) -> (j6 = o6)))

axiom H30 : ((not (result5 = true)) -> ((result7 = true) -> (i5 = i3)))

axiom H31 : ((not (result5 = true)) -> ((result7 = true) -> (a3 = a2)))

axiom H32 : ((not (result5 = true)) -> ((not (result7 = true)) ->
  (((((a3[i3]) = true) <-> ((a2[j5]) = true)) and (((a3[j5]) = true) <->
  ((a2[i3]) = true))) and
  (forall k3:int. (((to_rep(a__first) <= k3) and (k3 <= to_rep(a__last))) ->
  (((not (k3 = i3)) and (not (k3 = j5))) -> (((a3[k3]) = true) <->
  ((a2[k3]) = true))))))))

axiom H33 : ((not (result5 = true)) -> ((not (result7 = true)) ->
  ((o7 = (i3 + 1)) and in_range2((i3 + 1)))))

axiom H34 : ((not (result5 = true)) -> ((not (result7 = true)) ->
  (i3 = result9)))

axiom H35 : ((not (result5 = true)) -> ((not (result7 = true)) -> (i5 = o7)))

axiom H36 : ((not (result5 = true)) -> ((not (result7 = true)) ->
  ((o8 = (j5 - 1)) and in_range2((j5 - 1)))))

axiom H37 : ((not (result5 = true)) -> ((not (result7 = true)) ->
  (j5 = result10)))

axiom H38 : ((not (result5 = true)) -> ((not (result7 = true)) -> (j7 = o8)))

axiom H39 : ((not (result5 = true)) -> ((not (result7 = true)) -> (j6 = j7)))

axiom H40 : ((not (result5 = true)) -> (i4 = i5))

axiom H41 : (i4 <= j6)

 (* File "p1.adb", line 2, characters 0-0 *)
goal WP_parameter_def : (to_rep(a__first) <= i4)
