(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort cur 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (cur cur) Bool)
(declare-const dummy cur)
(declare-datatypes () ((cur__ref (mk_cur__ref (cur__content cur)))))
(define-fun cur__ref___projection ((a cur__ref)) cur (cur__content a))
(declare-fun to_rep (cur) Int)
(declare-fun of_rep (Int) cur)
(assert (forall ((x cur)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x cur)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort raw_amount 0)
(declare-fun raw_amountqtint (raw_amount) Int)
(assert (forall ((i raw_amount)) (and (<= 0 (raw_amountqtint i)) (<= (raw_amountqtint i) 1000000))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1000000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (raw_amount raw_amount) Bool)
(declare-const dummy1 raw_amount)
(declare-datatypes () ((raw_amount__ref (mk_raw_amount__ref (raw_amount__content raw_amount)))))
(define-fun raw_amount__ref___projection ((a raw_amount__ref)) raw_amount (raw_amount__content a))
(define-fun to_rep1 ((x raw_amount)) Int (raw_amountqtint x))
(declare-fun of_rep1 (Int) raw_amount)
(assert (forall ((x raw_amount)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x raw_amount)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__money__amount__currency cur) (rec__money__amount__raw raw_amount)))))
(define-fun us_split_fields_Currency__projection ((a us_split_fields)) cur (rec__money__amount__currency a))
(define-fun us_split_fields_Raw__projection ((a us_split_fields)) raw_amount (rec__money__amount__raw a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__money__amount__currency (us_split_fields1 a))) (to_rep (rec__money__amount__currency (us_split_fields1 b)))) (= (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1 (rec__money__amount__raw (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const money__amount__currency__first__bit Int)
(declare-const money__amount__currency__last__bit Int)
(declare-const money__amount__currency__position Int)
(assert (<= 0 money__amount__currency__first__bit))
(assert (< money__amount__currency__first__bit money__amount__currency__last__bit))
(assert (<= 0 money__amount__currency__position))
(declare-const money__amount__raw__first__bit Int)
(declare-const money__amount__raw__last__bit Int)
(declare-const money__amount__raw__position Int)
(assert (<= 0 money__amount__raw__first__bit))
(assert (< money__amount__raw__first__bit money__amount__raw__last__bit))
(assert (<= 0 money__amount__raw__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((amount__ref (mk_amount__ref (amount__content us_rep)))))
(define-fun amount__ref___projection ((a amount__ref)) us_rep (amount__content a))
(declare-fun oadd (us_rep us_rep) us_rep)
(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (=> (and (= (to_rep (rec__money__amount__currency (us_split_fields1 a))) (to_rep (rec__money__amount__currency (us_split_fields1 b)))) (<= (+ (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1 (rec__money__amount__raw (us_split_fields1 b)))) 1000000)) (= (bool_eq (oadd a b) (mk___rep (mk___split_fields (rec__money__amount__currency (us_split_fields1 a)) (of_rep1 (+ (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1 (rec__money__amount__raw (us_split_fields1 b)))))))) true)) :pattern ((oadd a b)))))
(declare-sort ext_account_num 0)
(declare-fun ext_account_numqtint (ext_account_num) Int)
(assert (forall ((i ext_account_num)) (and (<= 0 (ext_account_numqtint i)) (<= (ext_account_numqtint i) 200000))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 200000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (ext_account_num ext_account_num) Bool)
(declare-const dummy3 ext_account_num)
(declare-datatypes () ((ext_account_num__ref (mk_ext_account_num__ref (ext_account_num__content ext_account_num)))))
(define-fun ext_account_num__ref___projection ((a ext_account_num__ref)) ext_account_num (ext_account_num__content a))
(define-fun to_rep2 ((x ext_account_num)) Int (ext_account_numqtint x))
(declare-fun of_rep2 (Int) ext_account_num)
(assert (forall ((x ext_account_num)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x ext_account_num)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__database__availability__account_link__available Bool) (rec__database__availability__account_link__prev ext_account_num) (rec__database__availability__account_link__next ext_account_num)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields2)) Bool (rec__database__availability__account_link__available a))
(define-fun us_split_fields_Prev__projection ((a us_split_fields2)) ext_account_num (rec__database__availability__account_link__prev a))
(define-fun us_split_fields_Next__projection ((a us_split_fields2)) ext_account_num (rec__database__availability__account_link__next a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (rec__database__availability__account_link__available (us_split_fields3 a)) (rec__database__availability__account_link__available (us_split_fields3 b))) (= (to_rep2 (rec__database__availability__account_link__prev (us_split_fields3 a))) (to_rep2 (rec__database__availability__account_link__prev (us_split_fields3 b))))) (= (to_rep2 (rec__database__availability__account_link__next (us_split_fields3 a))) (to_rep2 (rec__database__availability__account_link__next (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const database__availability__account_link__available__first__bit Int)
(declare-const database__availability__account_link__available__last__bit Int)
(declare-const database__availability__account_link__available__position Int)
(assert (<= 0 database__availability__account_link__available__first__bit))
(assert (< database__availability__account_link__available__first__bit database__availability__account_link__available__last__bit))
(assert (<= 0 database__availability__account_link__available__position))
(declare-const database__availability__account_link__prev__first__bit Int)
(declare-const database__availability__account_link__prev__last__bit Int)
(declare-const database__availability__account_link__prev__position Int)
(assert (<= 0 database__availability__account_link__prev__first__bit))
(assert (< database__availability__account_link__prev__first__bit database__availability__account_link__prev__last__bit))
(assert (<= 0 database__availability__account_link__prev__position))
(declare-const database__availability__account_link__next__first__bit Int)
(declare-const database__availability__account_link__next__last__bit Int)
(declare-const database__availability__account_link__next__position Int)
(assert (<= 0 database__availability__account_link__next__first__bit))
(assert (< database__availability__account_link__next__first__bit database__availability__account_link__next__last__bit))
(assert (<= 0 database__availability__account_link__next__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((account_link__ref (mk_account_link__ref (account_link__content us_rep1)))))
(define-fun account_link__ref___projection ((a account_link__ref)) us_rep1 (account_link__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_163 Int)) (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (= (bool_eq1 (select a temp___idx_163) (select b (+ (- b__first a__first) temp___idx_163))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_163 Int)) (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (= (bool_eq1 (select a temp___idx_163) (select b (+ (- b__first a__first) temp___idx_163))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun existing (Int (Array Int us_rep1)) Bool)
(declare-fun existing__function_guard (Bool Int (Array Int us_rep1)) Bool)
(declare-fun is_available (Int (Array Int us_rep1)) Bool)
(declare-fun is_available__function_guard (Bool Int (Array Int us_rep1)) Bool)
(declare-sort account_num 0)
(declare-fun account_numqtint (account_num) Int)
(assert (forall ((i account_num)) (and (<= 1 (account_numqtint i)) (<= (account_numqtint i) 200000))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 200000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (account_num account_num) Bool)
(declare-const dummy5 account_num)
(declare-datatypes () ((account_num__ref (mk_account_num__ref (account_num__content account_num)))))
(define-fun account_num__ref___projection ((a account_num__ref)) account_num (account_num__content a))
(define-fun dynamic_invariant ((temp___expr_248 Int) (temp___is_init_244 Bool) (temp___skip_constant_245 Bool) (temp___do_toplevel_246 Bool) (temp___do_typ_inv_247 Bool)) Bool (=> (or (= temp___is_init_244 true) (<= 1 200000)) (in_range3 temp___expr_248)))
(assert true)
(assert (forall ((account Int)) (forall ((database__availability__links (Array Int us_rep1))) (! (= (= (existing account database__availability__links) true) (not (= (is_available account database__availability__links) true))) :pattern ((existing account database__availability__links))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__database__account_balance__value us_rep) (rec__database__account_balance__account ext_account_num)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields4)) us_rep (rec__database__account_balance__value a))
(define-fun us_split_fields_Account__2__projection ((a us_split_fields4)) ext_account_num (rec__database__account_balance__account a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (bool_eq (rec__database__account_balance__value (us_split_fields5 a)) (rec__database__account_balance__value (us_split_fields5 b))) true) (= (to_rep2 (rec__database__account_balance__account (us_split_fields5 a))) (to_rep2 (rec__database__account_balance__account (us_split_fields5 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const database__account_balance__value__first__bit Int)
(declare-const database__account_balance__value__last__bit Int)
(declare-const database__account_balance__value__position Int)
(assert (<= 0 database__account_balance__value__first__bit))
(assert (< database__account_balance__value__first__bit database__account_balance__value__last__bit))
(assert (<= 0 database__account_balance__value__position))
(declare-const database__account_balance__account__first__bit Int)
(declare-const database__account_balance__account__last__bit Int)
(declare-const database__account_balance__account__position Int)
(assert (<= 0 database__account_balance__account__first__bit))
(assert (< database__account_balance__account__first__bit database__account_balance__account__last__bit))
(assert (<= 0 database__account_balance__account__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((account_balance__ref (mk_account_balance__ref (account_balance__content us_rep2)))))
(define-fun account_balance__ref___projection ((a account_balance__ref)) us_rep2 (account_balance__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_165 Int)) (=> (and (<= a__first temp___idx_165) (<= temp___idx_165 a__last)) (= (bool_eq3 (select a temp___idx_165) (select b (+ (- b__first a__first) temp___idx_165))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_165 Int)) (=> (and (<= a__first temp___idx_165) (<= temp___idx_165 a__last)) (= (bool_eq3 (select a temp___idx_165) (select b (+ (- b__first a__first) temp___idx_165))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun currency (Int (Array Int us_rep2)) Int)
(declare-fun currency__function_guard (Int Int (Array Int us_rep2)) Bool)
(define-fun dynamic_invariant1 ((temp___expr_211 Int) (temp___is_init_207 Bool) (temp___skip_constant_208 Bool) (temp___do_toplevel_209 Bool) (temp___do_typ_inv_210 Bool)) Bool (=> (or (= temp___is_init_207 true) (<= 0 6)) (in_range temp___expr_211)))
(assert (forall ((account Int)) (forall ((database__accounts_balance (Array Int us_rep2))) (! (=> (dynamic_invariant account true true true true) (dynamic_invariant1 (currency account database__accounts_balance) true false true true)) :pattern ((currency account database__accounts_balance))))))
(assert (forall ((account Int)) (forall ((database__accounts_balance (Array Int us_rep2))) (! (=> (dynamic_invariant account true true true true) (= (currency account database__accounts_balance) (to_rep (rec__money__amount__currency (us_split_fields1 (rec__database__account_balance__value (us_split_fields5 (select database__accounts_balance account)))))))) :pattern ((currency account database__accounts_balance))))))
(declare-fun balance (Int (Array Int us_rep1) (Array Int us_rep2)) us_rep)
(declare-fun balance__function_guard (us_rep Int (Array Int us_rep1) (Array Int us_rep2)) Bool)
(assert true)
(assert (forall ((account Int)) (forall ((database__availability__links (Array Int us_rep1))) (forall ((database__accounts_balance (Array Int us_rep2))) (! (=> (dynamic_invariant account true true true true) (= (balance account database__availability__links database__accounts_balance) (rec__database__account_balance__value (us_split_fields5 (select database__accounts_balance account))))) :pattern ((balance account database__availability__links database__accounts_balance)))))))
(declare-const account Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const sum us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(assert true)
(assert (forall ((account1 Int)) (forall ((database__availability__links (Array Int us_rep1))) (! (= (= (is_available account1 database__availability__links) true) (= (rec__database__availability__account_link__available (us_split_fields3 (select database__availability__links account1))) true)) :pattern ((is_available account1 database__availability__links))))))
(define-fun dynamic_invariant2 ((temp___expr_241 Int) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool (=> (or (= temp___is_init_237 true) (<= 0 200000)) (in_range2 temp___expr_241)))
(define-fun dynamic_invariant3 ((temp___expr_225 Int) (temp___is_init_221 Bool) (temp___skip_constant_222 Bool) (temp___do_toplevel_223 Bool) (temp___do_typ_inv_224 Bool)) Bool (=> (or (= temp___is_init_221 true) (<= 0 1000000)) (in_range1 temp___expr_225)))
(declare-const links (Array Int us_rep1))
(declare-const accounts_balance (Array Int us_rep2))
(declare-const o cur)
(declare-const o1 raw_amount)
(declare-const o2 cur)
(declare-const o3 raw_amount)
(declare-const o4 raw_amount)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Bool)
(declare-const o9 cur)
(declare-const o10 raw_amount)
(declare-const o11 cur)
(declare-const o12 raw_amount)
(declare-const o13 ext_account_num)
(declare-const o14 cur)
(declare-const o15 raw_amount)
(declare-const o16 ext_account_num)
(declare-const o17 (Array Int us_rep2))
(declare-const accounts_balance1 (Array Int us_rep2))
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 map__ref1)
(declare-const accounts_balance2 (Array Int us_rep2))
(declare-const accounts_balance3 map__ref1)
(declare-const accounts_balance4 (Array Int us_rep2))
(declare-const accounts_balance5 map__ref1)
(declare-const accounts_balance6 (Array Int us_rep2))
(define-fun o18 () us_rep (mk___rep (mk___split_fields o9 o10)))
(define-fun o19 () us_rep (mk___rep (mk___split_fields o o1)))
(define-fun accounts_balance7 () map__ref1 (mk_map__ref1 accounts_balance))
(assert (in_range3 account))
(assert (and (= (existing account links) true) (and (= (currency account accounts_balance) (to_rep (rec__money__amount__currency (us_split_fields1 sum)))) (<= (+ (to_rep1 (rec__money__amount__raw (us_split_fields1 (balance account links accounts_balance)))) (to_rep1 (rec__money__amount__raw (us_split_fields1 sum)))) 1000000))))
(assert (or (and (and (= accounts_balance3 accounts_balance7) (= accounts_balance4 accounts_balance1)) (and (and (and (and (and (= o7 (currency account accounts_balance)) (and (in_range o7) (= o7 (to_rep (rec__money__amount__currency (us_split_fields1 (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account))))))))) (= o8 (ite (= o7 (to_rep (rec__money__amount__currency (us_split_fields1 sum)))) true false))) (= result1 (ite (not (= o8 true)) true false))) (ite (= result1 true) (= result true) (and (and (and (and (and (and (= o19 (balance account links accounts_balance)) (= o19 (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account))))) (and (= o o2) (= o1 o3))) (= o4 o3)) (= o5 (to_rep1 o4))) (= o6 (+ o5 (to_rep1 (rec__money__amount__raw (us_split_fields1 sum)))))) (= result (ite (< 1000000 o6) true false))))) (= result true))) (and (and (and (and (and (and (= o7 (currency account accounts_balance)) (and (in_range o7) (= o7 (to_rep (rec__money__amount__currency (us_split_fields1 (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account))))))))) (= o8 (ite (= o7 (to_rep (rec__money__amount__currency (us_split_fields1 sum)))) true false))) (= result1 (ite (not (= o8 true)) true false))) (ite (= result1 true) (= result true) (and (and (and (and (and (and (= o19 (balance account links accounts_balance)) (= o19 (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account))))) (and (= o o2) (= o1 o3))) (= o4 o3)) (= o5 (to_rep1 o4))) (= o6 (+ o5 (to_rep1 (rec__money__amount__raw (us_split_fields1 sum)))))) (= result (ite (< 1000000 o6) true false))))) (not (= result true))) (and (and (= accounts_balance3 (mk_map__ref1 accounts_balance2)) (= accounts_balance4 accounts_balance2)) (and (and (and (and (and (= o18 (oadd (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account))) sum)) (= (bool_eq o18 (mk___rep (mk___split_fields (rec__money__amount__currency (us_split_fields1 (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account))))) (of_rep1 (+ (to_rep1 (rec__money__amount__raw (us_split_fields1 (rec__database__account_balance__value (us_split_fields5 (select accounts_balance account)))))) (to_rep1 (rec__money__amount__raw (us_split_fields1 sum)))))))) true)) (and (and (= o11 o9) (= o12 o10)) (= (rec__database__account_balance__account (us_split_fields5 (select accounts_balance account))) o13))) (and (and (= o14 o11) (= o15 o12)) (= o16 o13))) (= o17 (store accounts_balance account (mk___rep2 (mk___split_fields2 (mk___rep (mk___split_fields o14 o15)) o16))))) (and (= result2 accounts_balance7) (= accounts_balance2 o17)))))))
(assert (= accounts_balance5 accounts_balance3))
(assert (= accounts_balance6 accounts_balance4))
(assert (not (= (to_rep (rec__money__amount__currency (us_split_fields1 (balance account links accounts_balance)))) (to_rep (rec__money__amount__currency (us_split_fields1 sum))))))
(check-sat)
(exit)
