(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq2 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__use_unchecked_union__small_record__field1 :
integer; rec__use_unchecked_union__small_record__field2 :
(int,integer) farray
}

function us_split_fields_field1__projection(a: us_split_fields) : integer =
  (a).rec__use_unchecked_union__small_record__field1

function us_split_fields_field2__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__use_unchecked_union__small_record__field2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__use_unchecked_union__small_record__field1) = to_rep(((b).us_split_fields1).rec__use_unchecked_union__small_record__field1)) and
  (bool_eq2(((a).us_split_fields1).rec__use_unchecked_union__small_record__field2,
  0, 2,
  ((b).us_split_fields1).rec__use_unchecked_union__small_record__field2, 0,
  2) = true)) -> (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__use_unchecked_union__small_record__field1) = to_rep(((b).us_split_fields1).rec__use_unchecked_union__small_record__field1)) and
  (bool_eq2(((a).us_split_fields1).rec__use_unchecked_union__small_record__field2,
  0, 2,
  ((b).us_split_fields1).rec__use_unchecked_union__small_record__field2, 0,
  2) = true))) -> (bool_eq3(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:(int,integer) farray. (0 <= object__size1({
  us_split_fields1 = { rec__use_unchecked_union__small_record__field1 = a;
  rec__use_unchecked_union__small_record__field2 = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:(int,integer) farray.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__use_unchecked_union__small_record__field1 = a;
  rec__use_unchecked_union__small_record__field2 = a1 } })))

logic use_unchecked_union__small_record__field1__first__bit : int

logic use_unchecked_union__small_record__field1__last__bit : int

logic use_unchecked_union__small_record__field1__position : int

axiom use_unchecked_union__small_record__field1__first__bit_axiom :
  (0 <= use_unchecked_union__small_record__field1__first__bit)

axiom use_unchecked_union__small_record__field1__last__bit_axiom :
  (use_unchecked_union__small_record__field1__first__bit <  use_unchecked_union__small_record__field1__last__bit)

axiom use_unchecked_union__small_record__field1__position_axiom :
  (0 <= use_unchecked_union__small_record__field1__position)

logic use_unchecked_union__small_record__field2__first__bit : int

logic use_unchecked_union__small_record__field2__last__bit : int

logic use_unchecked_union__small_record__field2__position : int

axiom use_unchecked_union__small_record__field2__first__bit_axiom :
  (0 <= use_unchecked_union__small_record__field2__first__bit)

axiom use_unchecked_union__small_record__field2__last__bit_axiom :
  (use_unchecked_union__small_record__field2__first__bit <  use_unchecked_union__small_record__field2__last__bit)

axiom use_unchecked_union__small_record__field2__position_axiom :
  (0 <= use_unchecked_union__small_record__field2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : integer

logic dummy3 : (int,integer) farray

type small_record__ref = { small_record__content : us_rep
}

function small_record__ref___projection(a: small_record__ref) : us_rep =
  (a).small_record__content

logic dummy4 : (int,integer) farray

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields2 = { rec__use_unchecked_union__big_record__field1 :
integer; rec__use_unchecked_union__big_record__field2 : (int,integer) farray
}

function us_split_fields_field1__2__projection(a: us_split_fields2) : integer =
  (a).rec__use_unchecked_union__big_record__field1

function us_split_fields_field2__2__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__use_unchecked_union__big_record__field2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__use_unchecked_union__big_record__field1) = to_rep(((b).us_split_fields3).rec__use_unchecked_union__big_record__field1)) and
  (bool_eq2(((a).us_split_fields3).rec__use_unchecked_union__big_record__field2,
  0, 3, ((b).us_split_fields3).rec__use_unchecked_union__big_record__field2,
  0, 3) = true)) -> (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__use_unchecked_union__big_record__field1) = to_rep(((b).us_split_fields3).rec__use_unchecked_union__big_record__field1)) and
  (bool_eq2(((a).us_split_fields3).rec__use_unchecked_union__big_record__field2,
  0, 3, ((b).us_split_fields3).rec__use_unchecked_union__big_record__field2,
  0, 3) = true))) -> (bool_eq4(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:integer. forall a1:(int,integer) farray. (0 <= object__size3({
  us_split_fields3 = { rec__use_unchecked_union__big_record__field1 = a;
  rec__use_unchecked_union__big_record__field2 = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:integer. forall a1:(int,integer) farray.
  (0 <= object__alignment3({ us_split_fields3 = {
  rec__use_unchecked_union__big_record__field1 = a;
  rec__use_unchecked_union__big_record__field2 = a1 } })))

logic use_unchecked_union__big_record__field1__first__bit : int

logic use_unchecked_union__big_record__field1__last__bit : int

logic use_unchecked_union__big_record__field1__position : int

axiom use_unchecked_union__big_record__field1__first__bit_axiom :
  (0 <= use_unchecked_union__big_record__field1__first__bit)

axiom use_unchecked_union__big_record__field1__last__bit_axiom :
  (use_unchecked_union__big_record__field1__first__bit <  use_unchecked_union__big_record__field1__last__bit)

axiom use_unchecked_union__big_record__field1__position_axiom :
  (0 <= use_unchecked_union__big_record__field1__position)

logic use_unchecked_union__big_record__field2__first__bit : int

logic use_unchecked_union__big_record__field2__last__bit : int

logic use_unchecked_union__big_record__field2__position : int

axiom use_unchecked_union__big_record__field2__first__bit_axiom :
  (0 <= use_unchecked_union__big_record__field2__first__bit)

axiom use_unchecked_union__big_record__field2__last__bit_axiom :
  (use_unchecked_union__big_record__field2__first__bit <  use_unchecked_union__big_record__field2__last__bit)

axiom use_unchecked_union__big_record__field2__position_axiom :
  (0 <= use_unchecked_union__big_record__field2__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : integer

logic dummy6 : (int,integer) farray

type big_record__ref = { big_record__content : us_rep1
}

function big_record__ref___projection(a: big_record__ref) : us_rep1 =
  (a).big_record__content

type us_split_discrs = { rec__use_unchecked_union__myunion__discr : integer
}

function us_split_discrs___projection(a: us_split_discrs) : integer =
  (a).rec__use_unchecked_union__myunion__discr

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields4 = { rec__use_unchecked_union__myunion__record1 :
us_rep; rec__use_unchecked_union__myunion__record2 : us_rep1
}

function us_split_fields_record1__projection(a: us_split_fields4) : us_rep =
  (a).rec__use_unchecked_union__myunion__record1

function us_split_fields_record2__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__use_unchecked_union__myunion__record2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs1 : us_split_discrs; us_split_fields5 :
us_split_fields4; attr__constrained : bool
}

function us_rep___3__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___5__projection(a: us_rep2) : bool = (a).attr__constrained

predicate use_unchecked_union__myunion__record1__pred(a: us_rep2) =
  (to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = 0)

predicate use_unchecked_union__myunion__record2__pred(a: us_rep2) =
  (not (to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = 0))

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = to_rep(((b).us_split_discrs1).rec__use_unchecked_union__myunion__discr)) and
  ((use_unchecked_union__myunion__record1__pred(a) ->
  (bool_eq3(((a).us_split_fields5).rec__use_unchecked_union__myunion__record1,
  ((b).us_split_fields5).rec__use_unchecked_union__myunion__record1) = true)) and
  (use_unchecked_union__myunion__record2__pred(a) ->
  (bool_eq4(((a).us_split_fields5).rec__use_unchecked_union__myunion__record2,
  ((b).us_split_fields5).rec__use_unchecked_union__myunion__record2) = true)))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = to_rep(((b).us_split_discrs1).rec__use_unchecked_union__myunion__discr)) and
  ((use_unchecked_union__myunion__record1__pred(a) ->
  (bool_eq3(((a).us_split_fields5).rec__use_unchecked_union__myunion__record1,
  ((b).us_split_fields5).rec__use_unchecked_union__myunion__record1) = true)) and
  (use_unchecked_union__myunion__record2__pred(a) ->
  (bool_eq4(((a).us_split_fields5).rec__use_unchecked_union__myunion__record2,
  ((b).us_split_fields5).rec__use_unchecked_union__myunion__record2) = true))))) ->
  (bool_eq5(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:integer. forall a1:integer. forall a2:(int,integer) farray.
  forall a3:integer. forall a4:(int,integer) farray. forall a5:bool.
  (0 <= object__size4({ us_split_discrs1 = {
  rec__use_unchecked_union__myunion__discr = a }; us_split_fields5 = {
  rec__use_unchecked_union__myunion__record1 = { us_split_fields1 = {
  rec__use_unchecked_union__small_record__field1 = a1;
  rec__use_unchecked_union__small_record__field2 = a2 } };
  rec__use_unchecked_union__myunion__record2 = { us_split_fields3 = {
  rec__use_unchecked_union__big_record__field1 = a3;
  rec__use_unchecked_union__big_record__field2 = a4 } } };
  attr__constrained = a5 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:integer. forall a1:integer. forall a2:(int,integer) farray.
  forall a3:integer. forall a4:(int,integer) farray. forall a5:bool.
  (0 <= object__alignment4({ us_split_discrs1 = {
  rec__use_unchecked_union__myunion__discr = a }; us_split_fields5 = {
  rec__use_unchecked_union__myunion__record1 = { us_split_fields1 = {
  rec__use_unchecked_union__small_record__field1 = a1;
  rec__use_unchecked_union__small_record__field2 = a2 } };
  rec__use_unchecked_union__myunion__record2 = { us_split_fields3 = {
  rec__use_unchecked_union__big_record__field1 = a3;
  rec__use_unchecked_union__big_record__field2 = a4 } } };
  attr__constrained = a5 })))

logic use_unchecked_union__myunion__discr__first__bit : int

logic use_unchecked_union__myunion__discr__last__bit : int

logic use_unchecked_union__myunion__discr__position : int

axiom use_unchecked_union__myunion__discr__first__bit_axiom :
  (0 <= use_unchecked_union__myunion__discr__first__bit)

axiom use_unchecked_union__myunion__discr__last__bit_axiom :
  (use_unchecked_union__myunion__discr__first__bit <  use_unchecked_union__myunion__discr__last__bit)

axiom use_unchecked_union__myunion__discr__position_axiom :
  (0 <= use_unchecked_union__myunion__discr__position)

logic use_unchecked_union__myunion__record1__first__bit : int

logic use_unchecked_union__myunion__record1__last__bit : int

logic use_unchecked_union__myunion__record1__position : int

axiom use_unchecked_union__myunion__record1__first__bit_axiom :
  (0 <= use_unchecked_union__myunion__record1__first__bit)

axiom use_unchecked_union__myunion__record1__last__bit_axiom :
  (use_unchecked_union__myunion__record1__first__bit <  use_unchecked_union__myunion__record1__last__bit)

axiom use_unchecked_union__myunion__record1__position_axiom :
  (0 <= use_unchecked_union__myunion__record1__position)

logic use_unchecked_union__myunion__record2__first__bit : int

logic use_unchecked_union__myunion__record2__last__bit : int

logic use_unchecked_union__myunion__record2__position : int

axiom use_unchecked_union__myunion__record2__first__bit_axiom :
  (0 <= use_unchecked_union__myunion__record2__first__bit)

axiom use_unchecked_union__myunion__record2__last__bit_axiom :
  (use_unchecked_union__myunion__record2__first__bit <  use_unchecked_union__myunion__record2__last__bit)

axiom use_unchecked_union__myunion__record2__position_axiom :
  (0 <= use_unchecked_union__myunion__record2__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : (int,integer) farray

logic dummy10 : integer

logic dummy11 : (int,integer) farray

logic dummy12 : bool

type myunion__ref = { myunion__content : us_rep2
}

function myunion__ref___projection(a: myunion__ref) : us_rep2 =
  (a).myunion__content

logic temp___183 : int, int, int -> (int,integer) farray

logic temp___197 : int, int, int, int -> (int,integer) farray

logic output__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic num : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___259 : int, int, int -> (int,integer) farray

logic temp___271 : int, int, int, int -> (int,integer) farray

logic temp___284 : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___261:int. forall temp___262:int. forall temp___263:int.
  (((in_range(temp___261) and in_range(temp___262)) and
  in_range(temp___263)) -> (((to_rep((temp___259(temp___261, temp___262,
  temp___263)[0])) = temp___261) and (to_rep((temp___259(temp___261,
  temp___262, temp___263)[1])) = temp___262)) and
  (to_rep((temp___259(temp___261, temp___262,
  temp___263)[2])) = temp___263))))

axiom def_axiom1 :
  (forall temp___273:int. forall temp___274:int. forall temp___275:int.
  forall temp___276:int. ((((in_range(temp___273) and
  in_range(temp___274)) and in_range(temp___275)) and
  in_range(temp___276)) -> ((((to_rep((temp___271(temp___273, temp___274,
  temp___275, temp___276)[0])) = temp___273) and
  (to_rep((temp___271(temp___273, temp___274, temp___275,
  temp___276)[1])) = temp___274)) and (to_rep((temp___271(temp___273,
  temp___274, temp___275, temp___276)[2])) = temp___275)) and
  (to_rep((temp___271(temp___273, temp___274, temp___275,
  temp___276)[3])) = temp___276))))

axiom def_axiom2 :
  (forall temp___286:int. (in_range(temp___286) ->
  (forall temp___287:int.
  (to_rep((temp___284(temp___286)[temp___287])) = temp___286))))

axiom def_axiom3 :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  (((in_range(temp___185) and in_range(temp___186)) and
  in_range(temp___187)) -> (((to_rep((temp___183(temp___185, temp___186,
  temp___187)[0])) = temp___185) and (to_rep((temp___183(temp___185,
  temp___186, temp___187)[1])) = temp___186)) and
  (to_rep((temp___183(temp___185, temp___186,
  temp___187)[2])) = temp___187))))

axiom def_axiom4 :
  (forall temp___199:int. forall temp___200:int. forall temp___201:int.
  forall temp___202:int. ((((in_range(temp___199) and
  in_range(temp___200)) and in_range(temp___201)) and
  in_range(temp___202)) -> ((((to_rep((temp___197(temp___199, temp___200,
  temp___201, temp___202)[0])) = temp___199) and
  (to_rep((temp___197(temp___199, temp___200, temp___201,
  temp___202)[1])) = temp___200)) and (to_rep((temp___197(temp___199,
  temp___200, temp___201, temp___202)[2])) = temp___201)) and
  (to_rep((temp___197(temp___199, temp___200, temp___201,
  temp___202)[3])) = temp___202))))

 (* File "use_unchecked_union.adb", line 39, characters 0-0 *)
goal WP_parameter_def :
  (forall output__split_discrs:integer. (in_range(num) -> ((not (num = 0)) ->
  ((num = 1) -> (not (to_rep(output__split_discrs) = 0))))))
