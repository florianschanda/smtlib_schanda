(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type rritemtype

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : rritemtype, rritemtype -> bool

logic dummy2 : rritemtype

type rritemtype__ref = { rritemtype__content : rritemtype
}

function rritemtype__ref___projection(a: rritemtype__ref) : rritemtype =
  (a).rritemtype__content

type linelengthindex

predicate in_range4(x: int) = ((1 <= x) and (x <= 256))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : linelengthindex, linelengthindex -> bool

logic dummy3 : linelengthindex

type linelengthindex__ref = { linelengthindex__content : linelengthindex
}

function linelengthindex__ref___projection(a: linelengthindex__ref) : linelengthindex =
  (a).linelengthindex__content

type domainnamestringtypeindex

predicate in_range5(x: int) = ((1 <= x) and (x <= 128))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : domainnamestringtypeindex, domainnamestringtypeindex -> bool

logic dummy4 : domainnamestringtypeindex

type domainnamestringtypeindex__ref = { domainnamestringtypeindex__content :
domainnamestringtypeindex
}

function domainnamestringtypeindex__ref___projection(a: domainnamestringtypeindex__ref) : domainnamestringtypeindex =
  (a).domainnamestringtypeindex__content

logic blankdomainname : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic rr_type__blankdomainname__aggregate_def : int -> (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic zonefileline : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic zlength : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic r97b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r98b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type t99b__ref = { t99b__content : integer
}

function t99b__ref___projection(a: t99b__ref) : integer = (a).t99b__content

logic attr__ATTRIBUTE_ADDRESS12 : int

logic r100b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type t101b__ref = { t101b__content : integer
}

function t101b__ref___projection(a: t101b__ref) : integer =
  (a).t101b__content

logic attr__ATTRIBUTE_ADDRESS14 : int

logic r102b : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic r103b : int

logic attr__ATTRIBUTE_ADDRESS16 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy7 : integer

type t104b__ref = { t104b__content : integer
}

function t104b__ref___projection(a: t104b__ref) : integer =
  (a).t104b__content

logic attr__ATTRIBUTE_ADDRESS17 : int

logic r105b : int

logic attr__ATTRIBUTE_ADDRESS18 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy8 : integer

type t106b__ref = { t106b__content : integer
}

function t106b__ref___projection(a: t106b__ref) : integer =
  (a).t106b__content

logic attr__ATTRIBUTE_ADDRESS19 : int

axiom blankdomainname__def_axiom :
  (blankdomainname = rr_type__blankdomainname__aggregate_def(32))

axiom def_axiom :
  (forall temp___158:int. (in_range2(temp___158) ->
  (forall temp___159:int.
  (to_rep((rr_type__blankdomainname__aggregate_def(temp___158)[temp___159])) = temp___158))))

 (* File "zone_file_parser.adb", line 1186, characters 0-0 *)
goal WP_parameter_def :
  (forall newnameserver:(int,character) farray.
  forall newemail:(int,character) farray. forall success:bool.
  forall begidx:int. forall endidx:int. forall foundtype:int.
  forall lengthoftoken:int. forall i:int. forall i1:int. forall i2:int.
  forall temp___1790:int. forall temp___1789:int. forall temp___1788:int.
  forall o:int. forall o1:int. forall o2:int. forall temp___1795:int.
  forall temp___1793:(int,character) farray. forall temp___1792:int.
  forall o3:int. forall o4:int. forall temp___1791:int. forall o5:character.
  forall o6:int. forall o7:(int,character) farray.
  forall temp___1799:(int,character) farray. forall temp___1798:int.
  forall o8:character. forall o9:(int,character) farray. forall o10:int.
  forall o11:int. forall o12:int. forall o13:int. forall o14:character.
  forall success1:bool. forall lengthoftoken1:int. forall i3:int.
  forall i4:int. forall result:int. forall begidx1:int.
  forall result1:(int,character) farray.
  forall newnameserver1:(int,character) farray.
  forall result2:(int,character) farray.
  forall newemail1:(int,character) farray. forall begidx2:int.
  forall endidx1:int. forall foundtype1:int. forall begidx3:int.
  forall endidx2:int. forall foundtype2:int. forall result3:int.
  forall begidx4:int. forall begidx5:int. forall endidx3:int.
  forall foundtype3:int. forall begidx6:int. forall endidx4:int.
  forall foundtype4:int. forall begidx7:int. forall endidx5:int.
  forall foundtype5:int. forall begidx8:int. forall endidx6:int.
  forall foundtype6:int. forall begidx9:int. forall endidx7:int.
  forall foundtype7:int. forall result4:bool. forall success2:bool.
  forall result5:int. forall begidx10:int. forall begidx11:int.
  forall endidx8:int. forall foundtype8:int. forall result6:int.
  forall lengthoftoken2:int. forall result7:bool. forall success3:bool.
  forall result8:bool. forall success4:bool. forall result9:int.
  forall i5:int. forall newnameserver2:(int,character) farray. forall i6:int.
  forall result10:(int,character) farray.
  forall newnameserver3:(int,character) farray.
  forall newnameserver4:(int,character) farray. forall i7:int.
  forall newnameserver5:(int,character) farray. forall i8:int.
  forall newnameserver6:(int,character) farray. forall i9:int.
  forall newnameserver7:(int,character) farray. forall i10:int.
  forall result11:int. forall i11:int.
  forall newnameserver8:(int,character) farray. forall i12:int.
  forall result12:(int,character) farray.
  forall newnameserver9:(int,character) farray.
  forall newnameserver10:map__ref. forall i13:int__ref.
  forall newnameserver11:(int,character) farray. forall i14:int.
  forall newnameserver12:map__ref. forall i15:int__ref.
  forall newnameserver13:(int,character) farray. forall i16:int.
  forall newnameserver14:map__ref. forall success5:bool__ref.
  forall i17:int__ref. forall i18:int__ref.
  forall newnameserver15:(int,character) farray. forall success6:bool.
  forall i19:int. forall i20:int. forall newnameserver16:map__ref.
  forall success7:bool__ref. forall i21:int__ref. forall i22:int__ref.
  forall newnameserver17:(int,character) farray. forall success8:bool.
  forall i23:int. forall i24:int. forall newnameserver18:map__ref.
  forall success9:bool__ref. forall begidx12:int__ref.
  forall endidx9:int__ref. forall foundtype9:int__ref.
  forall lengthoftoken3:int__ref. forall i25:int__ref. forall i26:int__ref.
  forall newnameserver19:(int,character) farray. forall success10:bool.
  forall begidx13:int. forall endidx10:int. forall foundtype10:int.
  forall lengthoftoken4:int. forall i27:int. forall i28:int.
  forall result13:int__ref. forall begidx14:int. forall begidx15:int.
  forall endidx11:int. forall foundtype11:int. forall result14:int__ref.
  forall lengthoftoken5:int. forall result15:int__ref. forall i29:int.
  forall i30:int.
  ((rr_type__blankdomainname__aggregate_def(32) = blankdomainname) ->
  (in_range4(zlength) -> (((result = begidx) and (begidx1 = 1)) ->
  (in_range4(begidx1) -> (((1 <= 256) -> in_range4(endidx)) -> (((0 <= 10) ->
  in_range3(foundtype)) -> (((1 <= 256) -> in_range4(lengthoftoken)) ->
  (((result1 = newnameserver) and (newnameserver1 = blankdomainname)) ->
  (((result2 = newemail) and (newemail1 = blankdomainname)) ->
  ((((((begidx2 <= endidx1) and (begidx2 <= zlength)) and
  (endidx1 <= zlength)) and ((foundtype1 = 1) ->
  (forall i31:int. (((begidx2 <= i31) and (i31 <= endidx1)) ->
  ((48 <= to_rep((zonefileline[i31]))) and
  (to_rep((zonefileline[i31])) <= 57)))))) and ((in_range4(begidx2) and
  in_range4(endidx1)) and in_range3(foundtype1))) ->
  (((((not (foundtype1 = 3)) and (endidx1 <  zlength)) and
  ((((temp___1790 = foundtype1) and ((temp___1789 = endidx1) and
  ((temp___1788 = begidx2) and ((endidx2 <  zlength) and ((((((1 <= 256) ->
  in_range4(begidx3)) and ((1 <= 256) -> in_range4(endidx2))) and
  ((0 <= 10) -> in_range3(foundtype2))) and ((not (foundtype2 = 3)) and
  (endidx2 <  zlength))) and ((((o = (endidx2 + 1)) and
  in_range4((endidx2 + 1))) and ((begidx3 = result3) and (begidx4 = o))) and
  ((((((begidx5 <= endidx3) and (begidx5 <= zlength)) and
  (endidx3 <= zlength)) and ((foundtype3 = 1) ->
  (forall i31:int. (((begidx5 <= i31) and (i31 <= endidx3)) ->
  ((48 <= to_rep((zonefileline[i31]))) and
  (to_rep((zonefileline[i31])) <= 57)))))) and ((in_range4(begidx5) and
  in_range4(endidx3)) and in_range3(foundtype3))) and
  (not ((not (foundtype3 = 3)) and (endidx3 <  zlength)))))))))) and
  (((foundtype3 = foundtype4) and ((endidx3 = endidx4) and
  (begidx5 = begidx6))) and ((foundtype5 = foundtype3) and
  ((endidx5 = endidx3) and (begidx7 = begidx5))))) and ((({ int__content =
  foundtype6 } = { int__content = foundtype4 }) and (({ int__content =
  endidx6 } = { int__content = endidx4 }) and ({ int__content = begidx8 } = {
  int__content = begidx6 }))) and ((foundtype7 = foundtype5) and
  ((endidx7 = endidx5) and (begidx9 = begidx7)))))) or
  ((not ((not (foundtype1 = 3)) and (endidx1 <  zlength))) and
  (((foundtype1 = foundtype6) and ((endidx1 = endidx6) and
  (begidx2 = begidx8))) and ((foundtype7 = foundtype1) and
  ((endidx7 = endidx1) and (begidx9 = begidx2)))))) ->
  ((((zlength <= endidx6) and (((result4 = success) and
  (success2 = of_int(0))) and (((i26 = { int__content = i1 }) and ((i25 = {
  int__content = i }) and ((lengthoftoken3 = { int__content = lengthoftoken
  }) and ((foundtype9 = { int__content = foundtype6 }) and ((endidx9 = {
  int__content = endidx6 }) and ((begidx12 = { int__content = begidx8 }) and
  ((success9 = { bool__content = success2 }) and (newnameserver18 = {
  map__content = newnameserver1 })))))))) and ((i28 = i4) and ((i27 = i3) and
  ((lengthoftoken4 = lengthoftoken1) and ((foundtype10 = foundtype7) and
  ((endidx10 = endidx7) and ((begidx13 = begidx9) and
  ((success10 = success2) and (newnameserver19 = newnameserver1))))))))))) or
  ((not (zlength <= endidx6)) and (((((o1 = (endidx6 + 1)) and
  in_range4((endidx6 + 1))) and ((result5 = begidx8) and
  (begidx10 = o1))) and ((((((begidx11 <= endidx8) and
  (begidx11 <= zlength)) and (endidx8 <= zlength)) and ((foundtype8 = 1) ->
  (forall i31:int. (((begidx11 <= i31) and (i31 <= endidx8)) ->
  ((48 <= to_rep((zonefileline[i31]))) and
  (to_rep((zonefileline[i31])) <= 57)))))) and ((in_range4(begidx11) and
  in_range4(endidx8)) and in_range3(foundtype8))) and
  ((((o2 = ((endidx8 - begidx11) + 1)) and
  in_range4(((endidx8 - begidx11) + 1))) and ((result6 = lengthoftoken) and
  (lengthoftoken2 = o2))) and (((not (foundtype8 = 0)) and
  (((result7 = success) and (success3 = of_int(0))) and (((i22 = {
  int__content = i1 }) and ((i21 = { int__content = i }) and ((success7 = {
  bool__content = success3 }) and (newnameserver16 = { map__content =
  newnameserver1 })))) and ((i24 = i4) and ((i23 = i3) and
  ((success8 = success3) and (newnameserver17 = newnameserver1))))))) or
  ((foundtype8 = 0) and ((((128 <  lengthoftoken2) and
  (((result8 = success) and (success4 = of_int(0))) and (((i18 = {
  int__content = i1 }) and ((i17 = { int__content = i }) and ((success5 = {
  bool__content = success4 }) and (newnameserver14 = { map__content =
  newnameserver1 })))) and ((i20 = i4) and ((i19 = i3) and
  ((success6 = success4) and (newnameserver15 = newnameserver1))))))) or
  ((not (128 <  lengthoftoken2)) and ((((begidx11 = r97b) and
  in_range4(r97b)) and (((endidx8 = r98b) and in_range4(r98b)) and
  ((((result9 = i) and (i5 = r97b)) and ((((r97b <= i5) and (i5 <= r98b)) and
  ((((temp___1795 = endidx8) and ((temp___1793 = newnameserver1) and
  ((temp___1792 = i5) and ((((1 <= begidx11) and
  (((endidx8 - begidx11) + 1) <= 128)) and (endidx8 = temp___1795)) and
  ((((r97b <= r98b) -> dynamic_property(r97b, r98b, i6)) and
  ((r97b <= i6) and (i6 <= r98b))) and
  ((((to_rep(o5) = to_rep((zonefileline[i6]))) and ((((((o3 = (i6 + 1)) and
  in_range1((i6 + 1))) and (o4 = (o3 - begidx11))) and
  ((temp___1791 = o4) and in_range1(o4))) and (((1 <= temp___1791) and
  (temp___1791 <= 128)) and (o6 = temp___1791))) and
  (o7 = (newnameserver2[o6 <- o5])))) and ((result10 = newnameserver2) and
  (newnameserver3 = o7))) and (i6 = r98b))))))) and (((i6 = i7) and
  (newnameserver3 = newnameserver4)) and ((i8 = i6) and
  (newnameserver5 = newnameserver3)))) and ((({ int__content = i9 } = {
  int__content = i7 }) and ({ map__content = newnameserver6 } = {
  map__content = newnameserver4 })) and ((i10 = i8) and
  (newnameserver7 = newnameserver5))))) or ((not ((r97b <= i5) and
  (i5 <= r98b))) and (((i5 = i9) and (newnameserver1 = newnameserver6)) and
  ((i10 = i5) and (newnameserver7 = newnameserver1)))))) and
  ((((endidx8 + 1) = r100b) and in_range1(r100b)) and (((result11 = i1) and
  (i11 = r100b)) and ((((r100b <= i11) and (i11 <= 128)) and
  ((((temp___1799 = newnameserver6) and ((temp___1798 = i11) and
  ((1 <= endidx8) and (((((r100b <= 128) -> dynamic_property1(r100b, 128,
  i12)) and
  (forall temp___1800:int. (((1 <= temp___1800) and (temp___1800 <= 128)) ->
  ((i12 <= temp___1800) ->
  ((newnameserver8[temp___1800]) = (temp___1799[temp___1800])))))) and
  ((r100b <= i12) and (i12 <= 128))) and ((((to_rep(o8) = 32) and
  (o9 = (newnameserver8[i12 <- o8]))) and ((result12 = newnameserver8) and
  (newnameserver9 = o9))) and (i12 = 128)))))) and (((i13 = { int__content =
  i12 }) and (newnameserver10 = { map__content = newnameserver9 })) and
  ((i14 = i12) and (newnameserver11 = newnameserver9)))) and
  (((i15 = i13) and (newnameserver12 = newnameserver10)) and ((i16 = i14) and
  (newnameserver13 = newnameserver11))))) or ((not ((r100b <= i11) and
  (i11 <= 128))) and (((i15 = { int__content = i11 }) and
  (newnameserver12 = { map__content = newnameserver6 })) and ((i16 = i11) and
  (newnameserver13 = newnameserver7)))))))))) and (((i18 = i15) and ((i17 = {
  int__content = i9 }) and ((success5 = { bool__content = success }) and
  (newnameserver14 = newnameserver12)))) and ((i20 = i16) and
  ((i19 = i10) and ((success6 = success1) and
  (newnameserver15 = newnameserver13)))))))) and (((i22 = i18) and
  ((i21 = i17) and ((success7 = success5) and
  (newnameserver16 = newnameserver14)))) and ((i24 = i20) and
  ((i23 = i19) and ((success8 = success6) and
  (newnameserver17 = newnameserver15))))))))))) and (((i26 = i22) and
  ((i25 = i21) and ((lengthoftoken3 = { int__content = lengthoftoken2 }) and
  ((foundtype9 = { int__content = foundtype8 }) and ((endidx9 = {
  int__content = endidx8 }) and ((begidx12 = { int__content = begidx11 }) and
  ((success9 = success7) and (newnameserver18 = newnameserver16)))))))) and
  ((i28 = i24) and ((i27 = i23) and ((lengthoftoken4 = lengthoftoken2) and
  ((foundtype10 = foundtype8) and ((endidx10 = endidx8) and
  ((begidx13 = begidx11) and ((success10 = success8) and
  (newnameserver19 = newnameserver17)))))))))))) ->
  ((not (zlength <= (endidx9).int__content)) ->
  ((((o10 = ((endidx9).int__content + 1)) and
  in_range4(((endidx9).int__content + 1))) and ((result13 = begidx12) and
  (begidx14 = o10))) -> ((((((begidx15 <= endidx11) and
  (begidx15 <= zlength)) and (endidx11 <= zlength)) and ((foundtype11 = 1) ->
  (forall i31:int. (((begidx15 <= i31) and (i31 <= endidx11)) ->
  ((48 <= to_rep((zonefileline[i31]))) and
  (to_rep((zonefileline[i31])) <= 57)))))) and ((in_range4(begidx15) and
  in_range4(endidx11)) and in_range3(foundtype11))) ->
  ((((o11 = ((endidx11 - begidx15) + 1)) and
  in_range4(((endidx11 - begidx15) + 1))) and
  ((result14 = lengthoftoken3) and (lengthoftoken5 = o11))) ->
  ((foundtype11 = 0) -> ((not (128 <  lengthoftoken5)) ->
  (((begidx15 = r102b) and in_range4(r102b)) -> (((endidx11 = r103b) and
  in_range4(r103b)) -> (((result15 = { int__content = i2 }) and
  (i29 = r102b)) -> (((r102b <= i29) and (i29 <= r103b)) ->
  (((1 <= begidx15) and (((endidx11 - begidx15) + 1) <= 128)) ->
  ((((r102b <= r103b) -> dynamic_property2(r102b, r103b, i30)) and
  ((r102b <= i30) and (i30 <= r103b))) ->
  ((to_rep(o14) = to_rep((zonefileline[i30]))) -> ((((o12 = (i30 + 1)) and
  in_range1((i30 + 1))) and (o13 = (o12 - begidx15))) ->
  in_range1(o13))))))))))))))))))))))))))))
