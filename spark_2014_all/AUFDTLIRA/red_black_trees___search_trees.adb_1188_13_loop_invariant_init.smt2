(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tcount_typeB 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy1 tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index_type index_type) Bool)
(declare-const dummy2 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort extended_index_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (extended_index_type extended_index_type) Bool)
(declare-const dummy3 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_182 Int) (temp___is_init_178 Bool) (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool) (temp___do_typ_inv_181 Bool)) Bool (=> (or (= temp___is_init_178 true) (<= 0 100)) (in_range4 temp___expr_182)))
(declare-fun to_rep1 (extended_index_type) Int)
(declare-fun of_rep1 (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x extended_index_type)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort direction 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (direction direction) Bool)
(declare-const dummy4 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(define-fun dynamic_invariant2 ((temp___expr_196 Int) (temp___is_init_192 Bool) (temp___skip_constant_193 Bool) (temp___do_toplevel_194 Bool) (temp___do_typ_inv_195 Bool)) Bool (=> (or (= temp___is_init_192 true) (<= 0 1)) (in_range5 temp___expr_196)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (count_type count_type) Bool)
(declare-const dummy6 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_168 Int) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool (=> (or (= temp___is_init_164 true) (<= 0 2147483647)) (in_range6 temp___expr_168)))
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption ((temp___expr_232 us_rep) (temp___skip_top_level_233 Bool)) Bool (=> (not (= temp___skip_top_level_233 true)) (= (length temp___expr_232) 0)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant3 result true false true true))) :pattern ((length container)))))
(declare-sort element_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (element_type element_type) Bool)
(declare-const dummy7 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_217 Int) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool) (temp___do_typ_inv_216 Bool)) Bool (=> (or (= temp___is_init_213 true) (<= 0 1)) (in_range7 temp___expr_217)))
(declare-sort extended_index 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (extended_index extended_index) Bool)
(declare-const dummy8 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant5 ((temp___expr_224 Int) (temp___is_init_220 Bool) (temp___skip_constant_221 Bool) (temp___do_toplevel_222 Bool) (temp___do_typ_inv_223 Bool)) Bool (=> (or (= temp___is_init_220 true) (<= 0 2147483647)) (in_range8 temp___expr_224)))
(assert (forall ((container us_rep)) (forall ((position Int)) (! (=> (and (dynamic_invariant5 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant4 (get container position) true false true true)) :pattern ((get container position))))))
(define-fun olt ((left us_rep) (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tree_model__path_type__a us_rep) (rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep (rec__tree_model__path_type__a a))
(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool (rec__tree_model__path_type__k a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq5 (rec__tree_model__path_type__a (us_split_fields1 a)) (rec__tree_model__path_type__a (us_split_fields1 b))) true) (= (rec__tree_model__path_type__k (us_split_fields1 a)) (rec__tree_model__path_type__k (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const tree_model__path_type__a__first__bit Int)
(declare-const tree_model__path_type__a__last__bit Int)
(declare-const tree_model__path_type__a__position Int)
(assert (<= 0 tree_model__path_type__a__first__bit))
(assert (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))
(assert (<= 0 tree_model__path_type__a__position))
(declare-const tree_model__path_type__k__first__bit Int)
(declare-const tree_model__path_type__k__last__bit Int)
(declare-const tree_model__path_type__k__position Int)
(assert (<= 0 tree_model__path_type__k__first__bit))
(assert (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))
(assert (<= 0 tree_model__path_type__k__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 (path_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))
(declare-fun contains (us_rep2 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)
(declare-sort element_type1 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq11 (element_type1 element_type1) Bool)
(declare-const dummy11 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant6 ((temp___expr_268 Int) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool) (temp___do_typ_inv_267 Bool)) Bool (=> (or (= temp___is_init_264 true) (<= 0 2147483647)) (in_range9 temp___expr_268)))
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption1 ((temp___expr_276 us_rep2) (temp___skip_top_level_277 Bool)) Bool (=> (not (= temp___skip_top_level_277 true)) (= (is_empty temp___expr_276) true)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant6 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range9 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-datatypes () ((value_set__ref (mk_value_set__ref (value_set__content us_rep2)))))
(define-fun value_set__ref___projection ((a value_set__ref)) us_rep2 (value_set__content a))
(declare-sort position_type 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq12 (position_type position_type) Bool)
(declare-const dummy12 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep2 (position_type) Int)
(declare-fun of_rep2 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x position_type)) (! (in_range10 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 b)))) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 b))))) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 b))))) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 a))) (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq13 (us_rep3 us_rep3) Bool)
(declare-const dummy13 us_rep3)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep3)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep3 (cell__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq4 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq4 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-const dummy14 (Array Int us_rep3))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int us_rep3)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep3)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int us_rep3)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq14 ((Array Int us_rep3) (Array Int us_rep3)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep3))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep3) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep4)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq6 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 a))) (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 b)))) (= (bool_eq5 (rec__binary_trees__forest__c (us_split_fields5 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields5 b)) 1 100) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep4) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep4) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq15 (us_rep4 us_rep4) Bool)
(declare-const dummy15 us_rep4)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep4)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep4 (forest__content a))
(declare-fun size (us_rep4) Int)
(declare-fun size__function_guard (Int us_rep4) Bool)
(declare-fun tree_structure (us_rep4) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep4) Bool)
(define-fun dynamic_invariant7 ((temp___expr_315 us_rep4) (temp___is_init_311 Bool) (temp___skip_constant_312 Bool) (temp___do_toplevel_313 Bool) (temp___do_typ_inv_314 Bool)) Bool (=> (= temp___do_typ_inv_314 true) (= (tree_structure temp___expr_315) true)))
(define-fun default_initial_assumption2 ((temp___expr_318 us_rep4) (temp___skip_top_level_319 Bool)) Bool (and (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 temp___expr_318))) 0) (forall ((temp___321 Int)) (=> (and (<= 1 temp___321) (<= temp___321 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_318)) temp___321)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_318)) temp___321)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_318)) temp___321)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_318)) temp___321)))) 2))))) (=> (not (= temp___skip_top_level_319 true)) (= (size temp___expr_318) 0))))
(define-fun type_invariant ((temp___324 us_rep4)) Bool (= (tree_structure temp___324) true))
(assert (forall ((f us_rep4)) (! (=> (dynamic_invariant7 f true true true true) (dynamic_invariant1 (size f) true false true true)) :pattern ((size f)))))
(define-fun dynamic_invariant8 ((temp___expr_175 Int) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (or (= temp___is_init_171 true) (<= 1 100)) (in_range3 temp___expr_175)))
(declare-fun parent (us_rep4 Int) Int)
(declare-fun parent__function_guard (Int us_rep4 Int) Bool)
(declare-fun position (us_rep4 Int) Int)
(declare-fun position__function_guard (Int us_rep4 Int) Bool)
(declare-fun peek (us_rep4 Int Int) Int)
(declare-fun peek__function_guard (Int us_rep4 Int Int) Bool)
(assert (forall ((f us_rep4)) (forall ((i Int) (d Int)) (! (=> (and (and (dynamic_invariant7 f true true true true) (dynamic_invariant8 i true true true true)) (dynamic_invariant2 d true true true true)) (let ((result (peek f i d))) (and (and (ite (not (= result 0)) (and (= (position f result) d) (= (parent f result) i)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (= (parent f j) i) (not (= (position f j) d)))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (parent f j) i) (= (position f j) d)) (= result j))))) (dynamic_invariant1 result true false true true)))) :pattern ((peek f i d))))))
(declare-fun model__ (us_rep4 Int) (Array Int us_rep1))
(declare-fun model____function_guard ((Array Int us_rep1) us_rep4 Int) Bool)
(define-fun dynamic_invariant9 ((temp___expr_251 (Array Int us_rep1)) (temp___is_init_247 Bool) (temp___skip_constant_248 Bool) (temp___do_toplevel_249 Bool) (temp___do_typ_inv_250 Bool)) Bool (forall ((temp___252 Int)) (=> (and (<= 1 temp___252) (<= temp___252 100)) (=> (= temp___is_init_247 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_251 temp___252)))) 100)))))
(define-fun default_initial_assumption3 ((temp___expr_254 (Array Int us_rep1)) (temp___skip_top_level_255 Bool)) Bool (forall ((temp___256 Int)) (=> (and (<= 1 temp___256) (<= temp___256 100)) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_254 temp___256)))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___expr_254 temp___256))) (distinct 0 0))))))
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(declare-fun valid_root (us_rep4 Int) Bool)
(declare-fun valid_root__function_guard (Bool us_rep4 Int) Bool)
(assert (forall ((f us_rep4)) (forall ((root Int)) (! (=> (and (and (dynamic_invariant7 f true true true true) (dynamic_invariant8 root true true true true)) (= (valid_root f root) true)) (let ((result (model__ f root))) (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result root)))) 0) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= i root)) (ite (and (not (= (parent f i) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result (parent f i)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)))))) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= i root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select result (parent f i)))) (position f i) (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select result i))) (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true)) (= j i))))))))))) (dynamic_invariant9 result true false true true)))) :pattern ((model__ f root))))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep (select a temp___idx_156)) (to_rep (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep (select a temp___idx_156)) (to_rep (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-const dummy16 (Array Int natural))
(declare-const value__size6 Int)
(declare-fun object__size6 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 ((Array Int natural)) Int)
(assert (<= 0 value__size6))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size6 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment6 a))))
(declare-fun user_eq16 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__search_trees__search_tree__root extended_index_type) (rec__search_trees__search_tree__struct us_rep4) (rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields6)) extended_index_type (rec__search_trees__search_tree__root a))
(define-fun us_split_fields_Struct__projection ((a us_split_fields6)) us_rep4 (rec__search_trees__search_tree__struct a))
(define-fun us_split_fields_Values__projection ((a us_split_fields6)) (Array Int natural) (rec__search_trees__search_tree__values a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep5 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep5)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq8 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 a))) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 b)))) (= (bool_eq6 (rec__search_trees__search_tree__struct (us_split_fields7 a)) (rec__search_trees__search_tree__struct (us_split_fields7 b))) true)) (= (bool_eq7 (rec__search_trees__search_tree__values (us_split_fields7 a)) 1 100 (rec__search_trees__search_tree__values (us_split_fields7 b)) 1 100) true)) true false))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep5) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep5) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))
(declare-const search_trees__search_tree__root__first__bit Int)
(declare-const search_trees__search_tree__root__last__bit Int)
(declare-const search_trees__search_tree__root__position Int)
(assert (<= 0 search_trees__search_tree__root__first__bit))
(assert (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))
(assert (<= 0 search_trees__search_tree__root__position))
(declare-const search_trees__search_tree__struct__first__bit Int)
(declare-const search_trees__search_tree__struct__last__bit Int)
(declare-const search_trees__search_tree__struct__position Int)
(assert (<= 0 search_trees__search_tree__struct__first__bit))
(assert (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))
(assert (<= 0 search_trees__search_tree__struct__position))
(declare-const search_trees__search_tree__values__first__bit Int)
(declare-const search_trees__search_tree__values__last__bit Int)
(declare-const search_trees__search_tree__values__position Int)
(assert (<= 0 search_trees__search_tree__values__first__bit))
(assert (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))
(assert (<= 0 search_trees__search_tree__values__position))
(declare-fun user_eq17 (us_rep5 us_rep5) Bool)
(declare-const dummy17 us_rep5)
(declare-datatypes () ((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep5)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep5 (search_tree__content a))
(declare-fun size1 (us_rep5) Int)
(declare-fun size__function_guard1 (Int us_rep5) Bool)
(declare-fun ordered_leafs (us_rep4 Int (Array Int natural)) Bool)
(declare-fun ordered_leafs__function_guard (Bool us_rep4 Int (Array Int natural)) Bool)
(declare-fun temp___431 (Int) (Array Int natural))
(define-fun dynamic_invariant10 ((temp___expr_420 us_rep5) (temp___is_init_416 Bool) (temp___skip_constant_417 Bool) (temp___do_toplevel_418 Bool) (temp___do_typ_inv_419 Bool)) Bool (=> (= temp___do_typ_inv_419 true) (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_420))) true)))
(define-fun default_initial_assumption4 ((temp___expr_424 us_rep5) (temp___skip_top_level_425 Bool)) Bool (and (and (and (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___expr_424))) 0) (and (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_424))))) 0) (forall ((temp___428 Int)) (=> (and (<= 1 temp___428) (<= temp___428 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_424)))) temp___428)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_424)))) temp___428)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_424)))) temp___428)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_424)))) temp___428)))) 2))))) (= (size (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_424))) 0))) (= (rec__search_trees__search_tree__values (us_split_fields7 temp___expr_424)) (temp___431 0))) (=> (not (= temp___skip_top_level_425 true)) (= (size1 temp___expr_424) 0))))
(define-fun type_invariant1 ((temp___436 us_rep5)) Bool (ite (= (size (rec__search_trees__search_tree__struct (us_split_fields7 temp___436))) 0) (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___436))) 0) (and (and (not (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___436))) 0)) (= (valid_root (rec__search_trees__search_tree__struct (us_split_fields7 temp___436)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___436)))) true)) (= (ordered_leafs (rec__search_trees__search_tree__struct (us_split_fields7 temp___436)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___436))) (rec__search_trees__search_tree__values (us_split_fields7 temp___436))) true))))
(declare-fun values (us_rep5) us_rep2)
(declare-fun values__function_guard (us_rep2 us_rep5) Bool)
(declare-fun values1 (us_rep5) us_rep2)
(declare-fun values__function_guard1 (us_rep2 us_rep5) Bool)
(define-fun default_initial_assumption5 ((temp___expr_291 us_rep2) (temp___skip_top_level_292 Bool)) Bool (=> (not (= temp___skip_top_level_292 true)) (= (is_empty temp___expr_291) true)))
(assert (forall ((t us_rep5)) (! (=> (and (dynamic_invariant10 t true true true true) (type_invariant1 t)) (=> (= (size1 t) 0) (= (is_empty (values t)) true))) :pattern ((values t)))))
(assert (forall ((t us_rep5)) (! (=> (and (dynamic_invariant10 t true true true true) (type_invariant1 t)) (let ((result (values1 t))) (ite (= (size (rec__search_trees__search_tree__struct (us_split_fields7 t))) 0) (= (is_empty result) true) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___473 (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))) (select temp___473 i)))) true) (= (contains result (to_rep (let ((temp___472 (rec__search_trees__search_tree__values (us_split_fields7 t)))) (select temp___472 i)))) true)))) (forall ((v Int)) (=> (and (<= 0 v) (<= v 2147483647)) (=> (= (contains result v) true) (exists ((i Int)) (and (and (<= 1 i) (<= i 100)) (and (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___474 (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))) (select temp___474 i)))) true) (= (to_rep (let ((temp___475 (rec__search_trees__search_tree__values (us_split_fields7 t)))) (select temp___475 i))) v))))))))))) :pattern ((values1 t)))))
(declare-const t us_rep5)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const v Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(assert (forall ((t1 us_rep5)) (! (=> (and (dynamic_invariant10 t1 true true true true) (type_invariant1 t1)) (dynamic_invariant1 (size1 t1) true false true true)) :pattern ((size1 t1)))))
(assert (forall ((t1 us_rep5)) (! (=> (dynamic_invariant10 t1 true true true true) (= (size1 t1) (size (rec__search_trees__search_tree__struct (us_split_fields7 t1))))) :pattern ((size1 t1)))))
(assert (forall ((temp___433 Int)) (=> (dynamic_invariant temp___433 true true true true) (forall ((temp___434 Int)) (= (to_rep (select (temp___431 temp___433) temp___434)) temp___433)))))
(assert true)
(assert (forall ((f us_rep4)) (forall ((root Int)) (forall ((values2 (Array Int natural))) (! (= (= (ordered_leafs f root values2) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___526 (model__ f root))) (select temp___526 i)))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___527 (model__ f root))) (select temp___527 j)))) true)) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___528 (model__ f root))) (select temp___528 i)))) (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___529 (model__ f root))) (select temp___529 j))))) true)) (ite (= (get (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___524 (model__ f root))) (select temp___524 j)))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___525 (model__ f root))) (select temp___525 i))))) 1)) 0) (< (to_rep (select values2 j)) (to_rep (select values2 i))) (< (to_rep (select values2 i)) (to_rep (select values2 j)))))))))) :pattern ((ordered_leafs f root values2)))))))
(define-fun dynamic_invariant11 ((temp___expr_189 Int) (temp___is_init_185 Bool) (temp___skip_constant_186 Bool) (temp___do_toplevel_187 Bool) (temp___do_typ_inv_188 Bool)) Bool (=> (or (= temp___is_init_185 true) (<= 0 2)) (in_range10 temp___expr_189)))
(define-fun dynamic_invariant12 ((temp___expr_239 us_rep1) (temp___is_init_235 Bool) (temp___skip_constant_236 Bool) (temp___do_toplevel_237 Bool) (temp___do_typ_inv_238 Bool)) Bool (=> (= temp___do_toplevel_237 true) (=> (= temp___is_init_235 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_239))) 100))))
(define-fun default_initial_assumption6 ((temp___expr_241 us_rep1) (temp___skip_top_level_242 Bool)) Bool (and (= (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_241))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 temp___expr_241)) (distinct 0 0))))
(define-fun dynamic_predicate ((temp___245 us_rep1)) Bool (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___245))) 100))
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (forall ((d Int)) (! (= (= (is_add s1 d s2) true) (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true)) (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2))))))
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (dynamic_invariant7 f true true true true) (dynamic_invariant8 i true true true true)) (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root f i))))))
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (dynamic_invariant7 f true true true true) (dynamic_invariant8 i true true true true)) (let ((result (parent f i))) (and (and (=> (= (valid_root f i) true) (= result 0)) (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false true true)))) :pattern ((parent f i))))))
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant7 f true true true true) (dynamic_invariant8 i true true true true)) (not (= (parent f i) 0))) (dynamic_invariant2 (position f i) true false true true)) :pattern ((position f i))))))
(define-fun default_initial_assumption7 ((temp___expr_299 us_rep3) (temp___skip_top_level_300 Bool)) Bool (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 temp___expr_299))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 temp___expr_299))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 temp___expr_299))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 temp___expr_299))) 2)))
(define-fun default_initial_assumption8 ((temp___expr_307 (Array Int us_rep3)) (temp___skip_top_level_308 Bool)) Bool (forall ((temp___309 Int)) (=> (and (<= 1 temp___309) (<= temp___309 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select temp___expr_307 temp___309)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select temp___expr_307 temp___309)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select temp___expr_307 temp___309)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select temp___expr_307 temp___309)))) 2)))))
(assert true)
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(assert (forall ((container us_rep2)) (! (dynamic_invariant3 (length1 container) true false true true) :pattern ((length1 container)))))
(assert (forall ((container us_rep2)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range9 item) (= (contains container item) true))))) (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty container)))))
(declare-const current Int)
(declare-const previous Int)
(declare-const d Int)
(declare-const result Int)
(declare-const current1 Int)
(declare-const result1 int__ref)
(declare-const previous1 Int)
(declare-const result2 int__ref)
(declare-const d1 Int)
(assert (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields7 t))) true))
(assert (in_range1 v))
(assert (type_invariant1 t))
(assert (= (mk_int__ref result) (mk_int__ref current)))
(assert (= current1 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))
(assert (in_range4 current1))
(assert (= result1 (mk_int__ref previous)))
(assert (= previous1 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))
(assert (in_range4 previous1))
(assert (= result2 (mk_int__ref d)))
(assert (= d1 0))
(assert (in_range5 d1))
(assert (not (= current1 0)))
(declare-const i Int)
(assert (<= 1 i))
(assert (<= i 100))
(assert (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) i))) true))
(assert (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) i))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) current1)))) true))
(assert (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) current1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) i)))) 1)) 0))
(assert (not (< v (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) i)))))
(check-sat)
(exit)
