(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort group1_id 0)
(declare-fun group1_idqtint (group1_id) Int)
(assert (forall ((i group1_id)) (and (<= 1 (group1_idqtint i)) (<= (group1_idqtint i) 64))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (group1_id group1_id) Bool)
(declare-const dummy group1_id)
(declare-datatypes () ((group1_id__ref (mk_group1_id__ref (group1_id__content group1_id)))))
(define-fun group1_id__ref___projection ((a group1_id__ref)) group1_id (group1_id__content a))
(define-fun to_rep ((x group1_id)) Int (group1_idqtint x))
(declare-fun of_rep (Int) group1_id)
(assert (forall ((x group1_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x group1_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int group1_id))))))
(declare-fun slide ((Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int group1_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int group1_id)) (a__first Int) (a__last Int) (b (Array Int group1_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun is_permutation_1 ((Array Int group1_id)) Bool)
(declare-fun is_permutation_1__function_guard (Bool (Array Int group1_id)) Bool)
(assert (forall ((r1 (Array Int group1_id))) (! (= (= (is_permutation_1 r1) true) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (exists ((rank Int)) (and (and (<= 1 rank) (<= rank 64)) (= (to_rep (select r1 rank)) g1)))))) :pattern ((is_permutation_1 r1)))))
(declare-sort group2_id 0)
(declare-fun group2_idqtint (group2_id) Int)
(assert (forall ((i group2_id)) (and (<= 1 (group2_idqtint i)) (<= (group2_idqtint i) 64))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (group2_id group2_id) Bool)
(declare-const dummy1 group2_id)
(declare-datatypes () ((group2_id__ref (mk_group2_id__ref (group2_id__content group2_id)))))
(define-fun group2_id__ref___projection ((a group2_id__ref)) group2_id (group2_id__content a))
(define-fun to_rep1 ((x group2_id)) Int (group2_idqtint x))
(declare-fun of_rep1 (Int) group2_id)
(assert (forall ((x group2_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x group2_id)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int group2_id))))))
(declare-fun slide1 ((Array Int group2_id) Int Int) (Array Int group2_id))
(assert (forall ((a (Array Int group2_id))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int group2_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int group2_id)) (a__first Int) (a__last Int) (b (Array Int group2_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep1 (select a temp___idx_155)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep1 (select a temp___idx_155)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-fun is_permutation_2 ((Array Int group2_id)) Bool)
(declare-fun is_permutation_2__function_guard (Bool (Array Int group2_id)) Bool)
(assert (forall ((r2 (Array Int group2_id))) (! (= (= (is_permutation_2 r2) true) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (exists ((rank Int)) (and (and (<= 1 rank) (<= rank 64)) (= (to_rep1 (select r2 rank)) g2)))))) :pattern ((is_permutation_2 r2)))))
(declare-fun invert_map ((Array Int group1_id)) (Array Int group2_id))
(declare-fun invert_map__function_guard ((Array Int group2_id) (Array Int group1_id)) Bool)
(assert (forall ((g2_to_g1 (Array Int group1_id))) (! (=> (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (exists ((g2 Int)) (and (and (<= 1 g2) (<= g2 64)) (= (to_rep (select g2_to_g1 g2)) g1))))) (let ((result (invert_map g2_to_g1))) (and (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (= (to_rep (select g2_to_g1 (to_rep1 (select result g1)))) g1))) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (to_rep1 (select result (to_rep (select g2_to_g1 g2)))) g2)))))) :pattern ((invert_map g2_to_g1)))))
(declare-fun is_preferred_1 (Int Int (Array Int group1_id)) Bool)
(declare-fun is_preferred_1__function_guard (Bool Int Int (Array Int group1_id)) Bool)
(declare-sort ranking 0)
(declare-fun rankingqtint (ranking) Int)
(assert (forall ((i ranking)) (and (<= 1 (rankingqtint i)) (<= (rankingqtint i) 64))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (ranking ranking) Bool)
(declare-const dummy2 ranking)
(declare-datatypes () ((ranking__ref (mk_ranking__ref (ranking__content ranking)))))
(define-fun ranking__ref___projection ((a ranking__ref)) ranking (ranking__content a))
(define-fun to_rep2 ((x ranking)) Int (rankingqtint x))
(declare-fun of_rep2 (Int) ranking)
(assert (forall ((x ranking)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x ranking)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int ranking))))))
(declare-fun slide2 ((Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int ranking))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int ranking)) (a__first Int) (a__last Int) (b (Array Int ranking)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (to_rep2 (select a temp___idx_158)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_158))))))) true false))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (to_rep2 (select a temp___idx_158)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_158)))))))))))
(declare-fun invert_1 ((Array Int group1_id)) (Array Int ranking))
(declare-fun invert_1__function_guard ((Array Int ranking) (Array Int group1_id)) Bool)
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 64)) (in_range1 temp___expr_166)))
(assert (forall ((g1_a Int) (g1_b Int)) (forall ((r1 (Array Int group1_id))) (! (=> (and (and (dynamic_invariant g1_a true true true true) (dynamic_invariant g1_b true true true true)) (= (is_permutation_1 r1) true)) (= (= (is_preferred_1 g1_a g1_b r1) true) (<= (to_rep2 (let ((temp___291 (invert_1 r1))) (select temp___291 g1_a))) (to_rep2 (let ((temp___292 (invert_1 r1))) (select temp___292 g1_b)))))) :pattern ((is_preferred_1 g1_a g1_b r1))))))
(declare-fun is_preferred_2 (Int Int (Array Int group2_id)) Bool)
(declare-fun is_preferred_2__function_guard (Bool Int Int (Array Int group2_id)) Bool)
(declare-fun invert_2 ((Array Int group2_id)) (Array Int ranking))
(declare-fun invert_2__function_guard ((Array Int ranking) (Array Int group2_id)) Bool)
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 1 64)) (in_range2 temp___expr_173)))
(assert (forall ((g2_a Int) (g2_b Int)) (forall ((r2 (Array Int group2_id))) (! (=> (and (and (dynamic_invariant1 g2_a true true true true) (dynamic_invariant1 g2_b true true true true)) (= (is_permutation_2 r2) true)) (= (= (is_preferred_2 g2_a g2_b r2) true) (<= (to_rep2 (let ((temp___297 (invert_2 r2))) (select temp___297 g2_a))) (to_rep2 (let ((temp___298 (invert_2 r2))) (select temp___298 g2_b)))))) :pattern ((is_preferred_2 g2_a g2_b r2))))))
(declare-const dummy3 (Array Int ranking))
(declare-const value__size Int)
(declare-fun object__size ((Array Int ranking)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int ranking)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int ranking)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int ranking) (Array Int ranking)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int ranking)))))))
(declare-fun slide3 ((Array Int (Array Int ranking)) Int Int) (Array Int (Array Int ranking)))
(assert (forall ((a (Array Int (Array Int ranking)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int ranking)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int ranking))) (a__first Int) (a__last Int) (b (Array Int (Array Int ranking))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq2 (select a temp___idx_160) 1 64 (select b (+ (- b__first a__first) temp___idx_160)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int ranking))) (b (Array Int (Array Int ranking)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq2 (select a temp___idx_160) 1 64 (select b (+ (- b__first a__first) temp___idx_160)) 1 64) true))))))))
(declare-const dummy4 (Array Int group1_id))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int group1_id)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int group1_id)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int group1_id)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int group1_id)))))))
(declare-fun slide4 ((Array Int (Array Int group1_id)) Int Int) (Array Int (Array Int group1_id)))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int (Array Int group1_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group1_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq (select a temp___idx_157) 1 64 (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group1_id))) (b (Array Int (Array Int group1_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq (select a temp___idx_157) 1 64 (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true))))))))
(declare-fun invert ((Array Int (Array Int group1_id))) (Array Int (Array Int ranking)))
(declare-fun invert__function_guard ((Array Int (Array Int ranking)) (Array Int (Array Int group1_id))) Bool)
(assert (forall ((r2 (Array Int (Array Int group1_id)))) (! (=> (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (is_permutation_1 (select r2 g2)) true))) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (let ((temp___398 (invert_1 (select r2 g2)))) (let ((temp___397 (select (invert r2) g2))) (bool_eq2 temp___397 1 64 temp___398 1 64))) true)))) :pattern ((invert r2)))))
(declare-sort count 0)
(declare-fun countqtint (count) Int)
(assert (forall ((i count)) (and (<= 0 (countqtint i)) (<= (countqtint i) 64))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (count count) Bool)
(declare-const dummy5 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___projection ((a count__ref)) count (count__content a))
(define-fun to_rep3 ((x count)) Int (countqtint x))
(declare-fun of_rep3 (Int) count)
(assert (forall ((x count)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x count)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-const dummy6 (Array Int group1_id))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int group1_id)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int group1_id)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int group1_id)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stable_marriage__matching__group1_set__elements (Array Int group1_id)) (rec__stable_marriage__matching__group1_set__cardinality count)))))
(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int group1_id) (rec__stable_marriage__matching__group1_set__elements a))
(define-fun us_split_fields_Cardinality__projection ((a us_split_fields)) count (rec__stable_marriage__matching__group1_set__cardinality a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq5 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 a)) 1 64 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 b)) 1 64) true) (= (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 a))) (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const stable_marriage__matching__group1_set__elements__first__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__last__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__elements__first__bit))
(assert (< stable_marriage__matching__group1_set__elements__first__bit stable_marriage__matching__group1_set__elements__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__elements__position))
(declare-const stable_marriage__matching__group1_set__cardinality__first__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__last__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__first__bit))
(assert (< stable_marriage__matching__group1_set__cardinality__first__bit stable_marriage__matching__group1_set__cardinality__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__position))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((group1_set__ref (mk_group1_set__ref (group1_set__content us_rep)))))
(define-fun group1_set__ref___projection ((a group1_set__ref)) us_rep (group1_set__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun all_unmatched_g1_set_elements_distinct (us_split_fields) Bool)
(declare-fun all_unmatched_g1_set_elements_distinct__function_guard (Bool us_split_fields) Bool)
(assert true)
(assert (forall ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields)) (! (= (= (all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields) true) (forall ((idx_1 Int)) (=> (and (<= 1 idx_1) (<= idx_1 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (forall ((idx_2 Int)) (=> (and (<= 1 idx_2) (<= idx_2 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (=> (not (= idx_1 idx_2)) (not (= (to_rep (let ((temp___403 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___403 idx_1))) (to_rep (let ((temp___404 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___404 idx_2))))))))))) :pattern ((all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields)))))
(declare-datatypes () ((map__ref5 (mk_map__ref5 (map__content5 (Array Int Bool))))))
(declare-fun slide5 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide5 a first first) a) :pattern ((slide5 a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide5 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-datatypes () ((map__ref6 (mk_map__ref6 (map__content6 (Array Int count))))))
(declare-fun slide6 ((Array Int count) Int Int) (Array Int count))
(assert (forall ((a (Array Int count))) (forall ((first Int)) (! (= (slide6 a first first) a) :pattern ((slide6 a first first))))))
(assert (forall ((a (Array Int count))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide6 a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int count)) (a__first Int) (a__last Int) (b (Array Int count)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (to_rep3 (select a temp___idx_161)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_161))))))) true false))
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (to_rep3 (select a temp___idx_161)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_161)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun invariant_holds (us_split_fields (Array Int count) (Array Int group1_id) (Array Int Bool)) Bool)
(declare-fun invariant_holds__function_guard (Bool us_split_fields (Array Int count) (Array Int group1_id) (Array Int Bool)) Bool)
(declare-const dummy8 (Array Int group2_id))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int group2_id)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int group2_id)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int group2_id)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq8 ((Array Int group2_id) (Array Int group2_id)) Bool)
(declare-datatypes () ((map__ref7 (mk_map__ref7 (map__content7 (Array Int (Array Int group2_id)))))))
(declare-fun slide7 ((Array Int (Array Int group2_id)) Int Int) (Array Int (Array Int group2_id)))
(assert (forall ((a (Array Int (Array Int group2_id)))) (forall ((first Int)) (! (= (slide7 a first first) a) :pattern ((slide7 a first first))))))
(assert (forall ((a (Array Int (Array Int group2_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide7 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide7 a old_first new_first) i))))))))
(define-fun bool_eq8 ((a (Array Int (Array Int group2_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group2_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 1 64 (select b (+ (- b__first a__first) temp___idx_156)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group2_id))) (b (Array Int (Array Int group2_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq8 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 1 64 (select b (+ (- b__first a__first) temp___idx_156)) 1 64) true))))))))
(declare-const ranking_1 (Array Int (Array Int group2_id)))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const ranking_2 (Array Int (Array Int group1_id)))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert true)
(assert (forall ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields)) (forall ((stable_marriage__matching__proposals_made (Array Int count))) (forall ((stable_marriage__matching__result (Array Int group1_id))) (forall ((stable_marriage__matching__unmatched_g2_set (Array Int Bool))) (! (= (= (invariant_holds stable_marriage__matching__unmatched_g1_set__fields stable_marriage__matching__proposals_made stable_marriage__matching__result stable_marriage__matching__unmatched_g2_set) true) (and (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (is_permutation_1 (select ranking_2 g2)) true))) (and (and (and (and (and (= (all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields) true) (forall ((g2_id Int)) (=> (and (<= 1 g2_id) (<= g2_id 64)) (=> (not (= (select stable_marriage__matching__unmatched_g2_set g2_id) true)) (forall ((idx Int)) (=> (and (<= 1 idx) (<= idx (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (not (= (to_rep (let ((temp___421 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___421 idx))) (to_rep (select stable_marriage__matching__result g2_id)))))))))) (forall ((g21_id Int)) (=> (and (<= 1 g21_id) (<= g21_id 64)) (forall ((g22_id Int)) (=> (and (<= 1 g22_id) (<= g22_id 64)) (=> (and (and (not (= (select stable_marriage__matching__unmatched_g2_set g21_id) true)) (not (= (select stable_marriage__matching__unmatched_g2_set g22_id) true))) (not (= g21_id g22_id))) (not (= (to_rep (select stable_marriage__matching__result g21_id)) (to_rep (select stable_marriage__matching__result g22_id)))))))))) (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank (to_rep3 (select stable_marriage__matching__proposals_made g1_id)))) (and (not (= (select stable_marriage__matching__unmatched_g2_set (to_rep1 (let ((temp___422 (select ranking_1 g1_id))) (select temp___422 rank)))) true)) (=> (not (= (to_rep (select stable_marriage__matching__result (to_rep1 (let ((temp___425 (select ranking_1 g1_id))) (select temp___425 rank))))) g1_id)) (not (= (is_preferred_1 g1_id (to_rep (select stable_marriage__matching__result (to_rep1 (let ((temp___423 (select ranking_1 g1_id))) (select temp___423 rank))))) (select ranking_2 (to_rep1 (let ((temp___424 (select ranking_1 g1_id))) (select temp___424 rank))))) true))))))))) (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (=> (= (to_rep3 (select stable_marriage__matching__proposals_made g1_id)) 0) (exists ((idx Int)) (and (and (<= 1 idx) (<= idx (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (= (to_rep (let ((temp___426 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___426 idx))) g1_id))))))) (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (=> (forall ((idx Int)) (=> (and (<= 1 idx) (<= idx (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (not (= (to_rep (let ((temp___428 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___428 idx))) g1_id)))) (and (< 0 (to_rep3 (select stable_marriage__matching__proposals_made g1_id))) (= (to_rep (select stable_marriage__matching__result (to_rep1 (let ((temp___427 (select ranking_1 g1_id))) (select temp___427 (to_rep3 (select stable_marriage__matching__proposals_made g1_id))))))) g1_id)))))))) :pattern ((invariant_holds stable_marriage__matching__unmatched_g1_set__fields stable_marriage__matching__proposals_made stable_marriage__matching__result stable_marriage__matching__unmatched_g2_set))))))))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 64))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (index index) Bool)
(declare-const dummy9 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const c175b Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-fun stable_marriage__matching__proposals_made__aggregate_def (Int) (Array Int count))
(declare-fun temp_____aggregate_def_526 (Int) (Array Int group1_id))
(declare-fun stable_marriage__matching__unmatched_g2_set__aggregate_def (Bool) (Array Int Bool))
(declare-fun stable_marriage__matching__result__aggregate_def (Int) (Array Int group1_id))
(define-fun dynamic_invariant2 ((temp___expr_343 Int) (temp___is_init_339 Bool) (temp___skip_constant_340 Bool) (temp___do_toplevel_341 Bool) (temp___do_typ_inv_342 Bool)) Bool (=> (or (= temp___is_init_339 true) (<= 0 64)) (in_range4 temp___expr_343)))
(define-fun dynamic_invariant3 ((temp___expr_350 Int) (temp___is_init_346 Bool) (temp___skip_constant_347 Bool) (temp___do_toplevel_348 Bool) (temp___do_typ_inv_349 Bool)) Bool (=> (or (= temp___is_init_346 true) (<= 1 64)) (in_range5 temp___expr_350)))
(declare-const rliteral count)
(assert (= (countqtint rliteral) 0))
(assert (forall ((temp___524 Int)) (=> (dynamic_invariant2 temp___524 true true true true) (forall ((temp___525 Int)) (= (select (stable_marriage__matching__proposals_made__aggregate_def temp___524) temp___525) rliteral)))))
(declare-const rliteral1 group1_id)
(assert (= (group1_idqtint rliteral1) 64))
(assert (forall ((temp___528 Int)) (=> (dynamic_invariant temp___528 true true true true) (forall ((temp___529 Int)) (= (select (temp_____aggregate_def_526 temp___528) temp___529) rliteral1)))))
(assert (forall ((temp___531 Bool)) (forall ((temp___532 Int)) (= (select (stable_marriage__matching__unmatched_g2_set__aggregate_def temp___531) temp___532) temp___531))))
(assert (forall ((temp___534 Int)) (=> (dynamic_invariant temp___534 true true true true) (forall ((temp___535 Int)) (= (select (stable_marriage__matching__result__aggregate_def temp___534) temp___535) rliteral1)))))
(define-fun dynamic_invariant4 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 64)) (in_range3 temp___expr_180)))
(assert (forall ((r1 (Array Int group1_id))) (! (=> (= (is_permutation_1 r1) true) (let ((result (invert_1 r1))) (and (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank 64)) (= (to_rep2 (select result (to_rep (select r1 rank)))) rank))) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (= (to_rep (select r1 (to_rep2 (select result g1)))) g1)))))) :pattern ((invert_1 r1)))))
(assert (forall ((r2 (Array Int group2_id))) (! (=> (= (is_permutation_2 r2) true) (let ((result (invert_2 r2))) (and (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank 64)) (= (to_rep2 (select result (to_rep1 (select r2 rank)))) rank))) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (to_rep1 (select r2 (to_rep2 (select result g2)))) g2)))))) :pattern ((invert_2 r2)))))
(declare-const ranking_2_inverted (Array Int (Array Int ranking)))
(declare-const proposals_made (Array Int count))
(declare-const unmatched_g1_set__split_fields (Array Int group1_id))
(declare-const unmatched_g1_set__split_fields1 count)
(declare-const unmatched_g2_set (Array Int Bool))
(declare-const result__ (Array Int group1_id))
(declare-const g1 Int)
(declare-const stable_marriage__matching__result (Array Int group1_id))
(declare-const o (Array Int (Array Int ranking)))
(declare-const temp___545 (Array Int group1_id))
(declare-const temp___5451 count)
(declare-const temp___544 Int)
(declare-const o1 Int)
(declare-const o2 count)
(declare-const o3 (Array Int group1_id))
(declare-const o4 count)
(declare-const temp___539 (Array Int group1_id))
(declare-const temp___5391 count)
(declare-const o5 group1_id)
(declare-const o6 Int)
(declare-const o7 (Array Int group1_id))
(declare-const o8 (Array Int group1_id))
(declare-const o9 count)
(declare-const temp___543 (Array Int group1_id))
(declare-const temp___5431 count)
(declare-const temp___556 (Array Int group1_id))
(declare-const temp___5561 count)
(declare-const temp___554 (Array Int count))
(declare-const temp___555 (Array Int group1_id))
(declare-const temp___553 (Array Int Bool))
(declare-const result (Array Int count))
(declare-const proposals_made1 (Array Int count))
(declare-const result1 (Array Int group1_id))
(declare-const result2 count)
(declare-const unmatched_g1_set__split_fields2 us_split_fields)
(declare-const result3 map__ref5)
(declare-const unmatched_g2_set1 (Array Int Bool))
(declare-const result4 map__ref)
(declare-const result__1 (Array Int group1_id))
(declare-const result5 map__ref3)
(declare-const ranking_2_inverted1 (Array Int (Array Int ranking)))
(declare-const result6 int__ref)
(declare-const g11 Int)
(declare-const unmatched_g1_set__split_fields3 us_split_fields)
(declare-const g12 Int)
(declare-const result7 us_split_fields__ref)
(declare-const unmatched_g1_set__split_fields4 us_split_fields)
(declare-const result8 us_split_fields__ref)
(declare-const unmatched_g1_set__split_fields5 us_split_fields)
(declare-const unmatched_g1_set__split_fields6 us_split_fields__ref)
(declare-const g13 int__ref)
(declare-const unmatched_g1_set__split_fields7 us_split_fields)
(declare-const g14 Int)
(declare-const unmatched_g1_set__split_fields8 us_split_fields__ref)
(declare-const g15 int__ref)
(declare-const unmatched_g1_set__split_fields9 us_split_fields)
(declare-const g16 Int)
(declare-const proposals_made2 (Array Int count))
(declare-const unmatched_g1_set__split_fields10 us_split_fields)
(declare-const unmatched_g2_set2 (Array Int Bool))
(declare-const result__2 (Array Int group1_id))
(declare-const proposals_made3 (Array Int count))
(declare-const unmatched_g1_set__split_fields11 us_split_fields)
(declare-const unmatched_g2_set3 (Array Int Bool))
(declare-const result__3 (Array Int group1_id))
(declare-const proposals_made4 map__ref6)
(declare-const unmatched_g1_set__split_fields12 us_split_fields__ref)
(declare-const unmatched_g2_set4 map__ref5)
(declare-const result__4 map__ref)
(declare-const proposals_made5 (Array Int count))
(declare-const unmatched_g1_set__split_fields13 us_split_fields)
(declare-const unmatched_g2_set5 (Array Int Bool))
(declare-const result__5 (Array Int group1_id))
(declare-const proposals_made6 map__ref6)
(declare-const unmatched_g1_set__split_fields14 us_split_fields__ref)
(declare-const unmatched_g2_set6 map__ref5)
(declare-const result__6 map__ref)
(declare-const proposals_made7 (Array Int count))
(declare-const unmatched_g1_set__split_fields15 us_split_fields)
(declare-const unmatched_g2_set7 (Array Int Bool))
(declare-const result__7 (Array Int group1_id))
(declare-const result9 map__ref)
(declare-const stable_marriage__matching__result1 (Array Int group1_id))
(declare-const stable_marriage__matching__result2 map__ref)
(declare-const stable_marriage__matching__result3 (Array Int group1_id))
(declare-const ranking_2_inverted2 map__ref3)
(declare-const proposals_made8 map__ref6)
(declare-const unmatched_g1_set__split_fields16 us_split_fields__ref)
(declare-const unmatched_g2_set8 map__ref5)
(declare-const result__8 map__ref)
(declare-const g17 int__ref)
(declare-const stable_marriage__matching__result4 map__ref)
(declare-const ranking_2_inverted3 (Array Int (Array Int ranking)))
(declare-const proposals_made9 (Array Int count))
(declare-const unmatched_g1_set__split_fields17 us_split_fields)
(declare-const unmatched_g2_set9 (Array Int Bool))
(declare-const result__9 (Array Int group1_id))
(declare-const g18 Int)
(declare-const stable_marriage__matching__result5 (Array Int group1_id))
(declare-const result10 (Array Int group1_id))
(assert (and (forall ((g19 Int)) (=> (and (<= 1 g19) (<= g19 64)) (= (is_permutation_2 (select ranking_1 g19)) true))) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (is_permutation_1 (select ranking_2 g2)) true)))))
(assert (= (mk_map__ref6 result) (mk_map__ref6 proposals_made)))
(assert (= proposals_made1 (stable_marriage__matching__proposals_made__aggregate_def 0)))
(assert (= (mk___split_fields__ref (mk___split_fields result1 result2)) (mk___split_fields__ref (mk___split_fields unmatched_g1_set__split_fields unmatched_g1_set__split_fields1))))
(assert (= unmatched_g1_set__split_fields2 (mk___split_fields (temp_____aggregate_def_526 64) rliteral)))
(assert (= result3 (mk_map__ref5 unmatched_g2_set)))
(assert (= unmatched_g2_set1 (stable_marriage__matching__unmatched_g2_set__aggregate_def (distinct 1 0))))
(assert (= result4 (mk_map__ref result__)))
(assert (= result__1 (stable_marriage__matching__result__aggregate_def 64)))
(assert (and (= o (invert ranking_2)) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (bool_eq2 (select o g2) 1 64 (invert_1 (select ranking_2 g2)) 1 64) true)))))
(assert (= result5 (mk_map__ref3 ranking_2_inverted)))
(assert (= ranking_2_inverted1 o))
(assert (= result6 (mk_int__ref g1)))
(assert (= g11 1))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields2 (mk___split_fields temp___545 temp___5451))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= temp___544 g11)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields3)) (- g12 1))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= (all_unmatched_g1_set_elements_distinct unmatched_g1_set__split_fields3) true)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (forall ((prev Int)) (=> (and (<= 1 prev) (<= prev (- g12 1))) (= (to_rep (select (rec__stable_marriage__matching__group1_set__elements unmatched_g1_set__split_fields3) prev)) prev)))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (and (=> (<= 1 64) (in_range1 g12)) (and (<= 1 g12) (<= g12 64)))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= g12 c175b)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (in_range1 c175b)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (and (= o1 (+ (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields3)) 1)) (in_range4 (+ (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields3)) 1)))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= (to_rep3 o2) o1)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= (rec__stable_marriage__matching__group1_set__elements unmatched_g1_set__split_fields3) o3)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= o2 o4)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= temp___539 o3)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= temp___5391 o4)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= result7 (mk___split_fields__ref unmatched_g1_set__split_fields3))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields4 (mk___split_fields temp___539 temp___5391))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= (to_rep o5) c175b)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (and (<= 1 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields4))) (<= (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields4)) 64))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= o6 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields4)))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= o7 (store (rec__stable_marriage__matching__group1_set__elements unmatched_g1_set__split_fields4) o6 o5))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= o7 o8)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields4) o9)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= temp___543 o8)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= temp___5431 o9)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= result8 (mk___split_fields__ref unmatched_g1_set__split_fields4))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields5 (mk___split_fields temp___543 temp___5431))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= g12 64)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= g13 (mk_int__ref g12))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields6 (mk___split_fields__ref unmatched_g1_set__split_fields5))))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= g14 g12)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields7 unmatched_g1_set__split_fields5)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= g15 g13)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields8 unmatched_g1_set__split_fields6)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= g16 g14)))
(assert (=> (and (<= 1 g11) (<= g11 64)) (= unmatched_g1_set__split_fields9 unmatched_g1_set__split_fields7)))
(assert (=> (not (and (<= 1 g11) (<= g11 64))) (= g15 (mk_int__ref g11))))
(assert (=> (not (and (<= 1 g11) (<= g11 64))) (= unmatched_g1_set__split_fields8 (mk___split_fields__ref unmatched_g1_set__split_fields2))))
(assert (=> (not (and (<= 1 g11) (<= g11 64))) (= g16 g11)))
(assert (=> (not (and (<= 1 g11) (<= g11 64))) (= unmatched_g1_set__split_fields9 unmatched_g1_set__split_fields2)))
(assert (= (all_unmatched_g1_set_elements_distinct (us_split_fields__content unmatched_g1_set__split_fields8)) true))
(assert (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (and (= (to_rep3 (select proposals_made1 g1_id)) 0) (= (to_rep (select (rec__stable_marriage__matching__group1_set__elements (us_split_fields__content unmatched_g1_set__split_fields8)) g1_id)) g1_id)))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= (us_split_fields__content unmatched_g1_set__split_fields8) (mk___split_fields temp___556 temp___5561))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= temp___554 proposals_made1)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= temp___555 result__1)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= temp___553 unmatched_g2_set1)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= (invariant_holds unmatched_g1_set__split_fields10 proposals_made2 result__2 unmatched_g2_set2) true)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields10)))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= (invariant_holds unmatched_g1_set__split_fields11 proposals_made3 result__3 unmatched_g2_set3) true)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality unmatched_g1_set__split_fields11))))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= result__4 (mk_map__ref result__3))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g2_set4 (mk_map__ref5 unmatched_g2_set3))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g1_set__split_fields12 (mk___split_fields__ref unmatched_g1_set__split_fields11))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= proposals_made4 (mk_map__ref6 proposals_made3))))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= result__5 result__3)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g2_set5 unmatched_g2_set3)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g1_set__split_fields13 unmatched_g1_set__split_fields11)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= proposals_made5 proposals_made3)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= result__6 result__4)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g2_set6 unmatched_g2_set4)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g1_set__split_fields14 unmatched_g1_set__split_fields12)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= proposals_made6 proposals_made4)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= result__7 result__5)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g2_set7 unmatched_g2_set5)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= unmatched_g1_set__split_fields15 unmatched_g1_set__split_fields13)))
(assert (=> (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8)))) (= proposals_made7 proposals_made5)))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= result__6 (mk_map__ref result__1))))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= unmatched_g2_set6 (mk_map__ref5 unmatched_g2_set1))))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= unmatched_g1_set__split_fields14 unmatched_g1_set__split_fields8)))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= proposals_made6 (mk_map__ref6 proposals_made1))))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= result__7 result__1)))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= unmatched_g2_set7 unmatched_g2_set1)))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= unmatched_g1_set__split_fields15 unmatched_g1_set__split_fields9)))
(assert (=> (not (< 0 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields__content unmatched_g1_set__split_fields8))))) (= proposals_made7 proposals_made1)))
(assert (= stable_marriage__matching__result2 (mk_map__ref stable_marriage__matching__result1)))
(assert (= stable_marriage__matching__result3 stable_marriage__matching__result1))
(assert (= result9 (mk_map__ref stable_marriage__matching__result)))
(assert (= stable_marriage__matching__result1 (map__content result__6)))
(assert (= stable_marriage__matching__result4 stable_marriage__matching__result2))
(assert (= g17 g15))
(assert (= result__8 result__6))
(assert (= unmatched_g2_set8 unmatched_g2_set6))
(assert (= unmatched_g1_set__split_fields16 unmatched_g1_set__split_fields14))
(assert (= proposals_made8 proposals_made6))
(assert (= ranking_2_inverted2 (mk_map__ref3 ranking_2_inverted1)))
(assert (= stable_marriage__matching__result5 stable_marriage__matching__result3))
(assert (= g18 g16))
(assert (= result__9 result__7))
(assert (= unmatched_g2_set9 unmatched_g2_set7))
(assert (= unmatched_g1_set__split_fields17 unmatched_g1_set__split_fields15))
(assert (= proposals_made9 proposals_made7))
(assert (= ranking_2_inverted3 ranking_2_inverted1))
(assert (= result10 (map__content stable_marriage__matching__result4)))
(declare-const g19 Int)
(assert (<= 1 g19))
(assert (<= g19 64))
(declare-const g2 Int)
(assert (<= 1 g2))
(assert (<= g2 64))
(assert (not (or (= (is_preferred_2 (to_rep1 (select (invert_map (map__content stable_marriage__matching__result4)) g19)) g2 (select ranking_1 g19)) true) (= (is_preferred_1 (to_rep (select (map__content stable_marriage__matching__result4) g2)) g19 (select ranking_2 g2)) true))))
(check-sat)
(exit)
