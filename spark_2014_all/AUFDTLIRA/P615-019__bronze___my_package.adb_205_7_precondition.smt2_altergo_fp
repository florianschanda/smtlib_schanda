(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields = { rec__my_package__t__f1 : integer;
rec__my_package__t__f2 : integer
}

function us_split_fields_F1__projection(a: us_split_fields) : integer =
  (a).rec__my_package__t__f1

function us_split_fields_F2__projection(a: us_split_fields) : integer =
  (a).rec__my_package__t__f2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__my_package__t__f1) = to_rep(((b).us_split_fields1).rec__my_package__t__f1)) and
  (to_rep(((a).us_split_fields1).rec__my_package__t__f2) = to_rep(((b).us_split_fields1).rec__my_package__t__f2))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__my_package__t__f1) = to_rep(((b).us_split_fields1).rec__my_package__t__f1)) and
  (to_rep(((a).us_split_fields1).rec__my_package__t__f2) = to_rep(((b).us_split_fields1).rec__my_package__t__f2)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__my_package__t__f1 = a; rec__my_package__t__f2 =
  a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__my_package__t__f1 = a; rec__my_package__t__f2 =
  a1 } })))

logic my_package__t__f1__first__bit : int

logic my_package__t__f1__last__bit : int

logic my_package__t__f1__position : int

axiom my_package__t__f1__first__bit_axiom :
  (0 <= my_package__t__f1__first__bit)

axiom my_package__t__f1__last__bit_axiom :
  (my_package__t__f1__first__bit <  my_package__t__f1__last__bit)

axiom my_package__t__f1__position_axiom : (0 <= my_package__t__f1__position)

logic my_package__t__f2__first__bit : int

logic my_package__t__f2__last__bit : int

logic my_package__t__f2__position : int

axiom my_package__t__f2__first__bit_axiom :
  (0 <= my_package__t__f2__first__bit)

axiom my_package__t__f2__last__bit_axiom :
  (my_package__t__f2__first__bit <  my_package__t__f2__last__bit)

axiom my_package__t__f2__position_axiom : (0 <= my_package__t__f2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : integer

logic dummy3 : integer

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTaSP1

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : tTaSP1, tTaSP1 -> bool

logic dummy4 : tTaSP1

type tTaSP1__ref = { tTaSP1__content : tTaSP1
}

function tTaSP1__ref___2__projection(a: tTaSP1__ref) : tTaSP1 =
  (a).tTaSP1__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic my_package__bad_aliasing__a__aggregate_def : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___193:int.
  (forall temp___194:int.
  ((my_package__bad_aliasing__a__aggregate_def(temp___193)[temp___194]) = of_rep1(temp___193))))

logic x : int

logic y : int

logic xx__split_fields : integer

logic xx__split_fields1 : integer

logic z__split_fields : integer

logic z__split_fields1 : integer

logic a : (int,natural) farray

logic i : int

logic o : integer

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic my_package__bad_aliasing__z__assume : integer

logic my_package__bad_aliasing__z__assume1 : integer

logic o4 : integer

logic o5 : integer

logic o6 : integer

logic temp___198 : integer

logic temp___1981 : integer

logic o7 : int

logic o8 : natural

logic o9 : int

logic o10 : int

logic my_package__swap__y : int

logic o11 : int

logic my_package__swap__x : int

logic o12 : int

logic o13 : natural

logic o14 : (int,natural) farray

logic o15 : int

logic o16 : natural

logic result : integer

logic result1 : integer

logic z__split_fields2 : integer

logic z__split_fields3 : integer

logic result2 : (int,natural) farray

logic a1 : (int,natural) farray

logic result3 : int

logic i1 : int

logic y1 : int

logic my_package__swap_with_y__x : int

logic result4 : int

logic y2 : int

logic my_package__move_x_to_y__y__fields : integer

logic my_package__move_x_to_y__y__fields1 : integer

logic result5 : integer

logic result6 : integer

logic z__split_fields4 : integer

logic z__split_fields5 : integer

logic y3 : int

logic y4 : int

logic my_package__move_x_to_y2__y__fields : integer

logic my_package__move_x_to_y2__y__fields1 : integer

logic result7 : integer

logic result8 : integer

logic xx__split_fields2 : integer

logic xx__split_fields3 : integer

logic my_package__move_x_to_y2__2__y : int

logic result9 : int

logic x1 : int

logic my_package__only_read_f2_of_x__y : int

logic result10 : integer

logic result11 : integer

logic xx__split_fields4 : integer

logic xx__split_fields5 : integer

logic my_package__swap__y1 : int

logic my_package__swap__x1 : int

logic result12 : (int,natural) farray

logic a2 : (int,natural) farray

axiom H : in_range(x)

axiom H1 : in_range(y)

axiom H2 : (to_rep(o) = 0)

axiom H3 : (to_rep(o1) = 0)

axiom H4 : (o1 = o2)

axiom H5 : (o = o3)

axiom H6 : (my_package__bad_aliasing__z__assume = o2)

axiom H7 : (my_package__bad_aliasing__z__assume1 = o3)

axiom H8 : (result = z__split_fields)

axiom H9 : (result1 = z__split_fields1)

axiom H10 : (my_package__bad_aliasing__z__assume = z__split_fields2)

axiom H11 : (my_package__bad_aliasing__z__assume1 = z__split_fields3)

axiom H12 : (result2 = a)

axiom H13 : (a1 = my_package__bad_aliasing__a__aggregate_def(0))

axiom H14 : (result3 = i)

axiom H15 : (i1 = 2)

axiom H16 : in_range(i1)

 (* File "my_package.adb", line 195, characters 0-0 *)
goal WP_parameter_def : true
