(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,character) farray

logic dummy6 : t1

type stringf1l3to1000__ref = { stringf1l3to1000__content : us_t1
}

function stringf1l3to1000__ref___projection(a: stringf1l3to1000__ref) : us_t1 =
  (a).stringf1l3to1000__content

type durationt

predicate in_range4(x: int) = ((0 <= x) and (x <= 2000))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : durationt, durationt -> bool

logic dummy7 : durationt

type durationt__ref = { durationt__content : durationt
}

function durationt__ref___2__projection(a: durationt__ref) : durationt =
  (a).durationt__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq9(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq6 : us_t2, us_t2 -> bool

logic dummy8 : (int,character) farray

logic dummy9 : t2

type stringf1__ref = { stringf1__content : us_t2
}

function stringf1__ref___projection(a: stringf1__ref) : us_t2 =
  (a).stringf1__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq7 : us_t3, us_t3 -> bool

logic dummy10 : (int,character) farray

logic dummy11 : t3

type stringf1l1000__ref = { stringf1l1000__content : us_t3
}

function stringf1l1000__ref___projection(a: stringf1l1000__ref) : us_t3 =
  (a).stringf1l1000__content

logic durationt_image : int -> us_t1

logic durationt_image__function_guard : us_t1, int -> prop

axiom durationt_image__post_axiom :
  (forall x:int [durationt_image(x)]. (in_range4(x) -> (dynamic_property1(1,
  2147483647, to_rep1(first2((durationt_image(x)).rt1)),
  to_rep1(last2((durationt_image(x)).rt1))) and
  ((((to_rep1(first4(mk2(to_rep1(first6(mk3(to_rep1(first2((durationt_image(x)).rt1)),
  to_rep1(last2((durationt_image(x)).rt1))))),
  to_rep1(last6(mk3(to_rep1(first2((durationt_image(x)).rt1)),
  to_rep1(last2((durationt_image(x)).rt1)))))))) = 1) and
  (0 <= to_rep1(last4(mk2(to_rep1(first6(mk3(to_rep1(first2((durationt_image(x)).rt1)),
  to_rep1(last2((durationt_image(x)).rt1))))),
  to_rep1(last6(mk3(to_rep1(first2((durationt_image(x)).rt1)),
  to_rep1(last2((durationt_image(x)).rt1)))))))))) and
  (to_rep1(last6(mk3(to_rep1(first2((durationt_image(x)).rt1)),
  to_rep1(last2((durationt_image(x)).rt1))))) <= 1000)) and
  (3 <= length1(durationt_image(x)))))))

axiom durationt_image__def_axiom :
  (forall x:int [durationt_image(x)]. (in_range4(x) ->
  (durationt_image(x) = { elts1 =
  (to_string(attr__ATTRIBUTE_IMAGE4(x))).elts; rt1 =
  mk1(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE4(x))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE4(x))).rt))) })))

type secondsstringi

predicate in_range5(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : secondsstringi, secondsstringi -> bool

logic dummy12 : secondsstringi

type secondsstringi__ref = { secondsstringi__content : secondsstringi
}

function secondsstringi__ref___projection(a: secondsstringi__ref) : secondsstringi =
  (a).secondsstringi__content

logic value : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic valuestr__first : integer

logic valuestr__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy13 : integer

type t45b__ref = { t45b__content : integer
}

function t45b__ref___projection(a: t45b__ref) : integer = (a).t45b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq13(x: us_t4, y: us_t4) : bool = bool_eq5((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq10 : us_t4, us_t4 -> bool

logic dummy14 : (int,character) farray

logic dummy15 : t4

type t46b__ref = { t46b__content : us_t4
}

function t46b__ref___projection(a: t46b__ref) : us_t4 = (a).t46b__content

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy16 : integer

type t48b__ref = { t48b__content : integer
}

function t48b__ref___projection(a: t48b__ref) : integer = (a).t48b__content

type t5

logic first10 : t5 -> integer

logic last10 : t5 -> integer

logic mk5 : int, int -> t5

axiom mk_def5 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first10(mk5(f, l))) = f) and (to_rep1(last10(mk5(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t5 = { elts5 : (int,character) farray; rt5 : t5
}

function to_array5(a: us_t5) : (int,character) farray = (a).elts5

function of_array5(a: (int,character) farray, f: int, l: int) : us_t5 = {
  elts5 = a; rt5 = mk5(f, l) }

function first11(a: us_t5) : int = to_rep1(first10((a).rt5))

function last11(a: us_t5) : int = to_rep1(last10((a).rt5))

logic length5 : us_t5 -> int

axiom length_def5 :
  (forall a:us_t5 [length5(a)]. (((first11(a) <= last11(a)) ->
  (length5(a) = ((last11(a) - first11(a)) + 1))) and
  ((not (first11(a) <= last11(a))) -> (length5(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq15(x: us_t5, y: us_t5) : bool = bool_eq5((x).elts5,
  to_rep1(first10((x).rt5)), to_rep1(last10((x).rt5)), (y).elts5,
  to_rep1(first10((y).rt5)), to_rep1(last10((y).rt5)))

logic user_eq12 : us_t5, us_t5 -> bool

logic dummy17 : (int,character) farray

logic dummy18 : t5

type t49b__ref = { t49b__content : us_t5
}

function t49b__ref___projection(a: t49b__ref) : us_t5 = (a).t49b__content

logic temp___String_Literal_1980 : unit -> (int,character) farray

axiom temp___String_Literal_1980__def_axiom :
  (((((((to_rep((temp___String_Literal_1980(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1980(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_1980(void)[3])) = 48)) and
  (to_rep((temp___String_Literal_1980(void)[4])) = 46)) and
  (to_rep((temp___String_Literal_1980(void)[5])) = 48)) and
  (to_rep((temp___String_Literal_1980(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_1980(void)[7])) = 115))

 (* File "screen.adb", line 92, characters 0-0 *)
goal WP_parameter_def :
  (forall str:(int,character) farray. forall valuestr:(int,character) farray.
  forall temp___1981:(int,character) farray. forall temp___19811:t1.
  forall screen__writeconfigdata__secondsstring__valuestr__assume:(int,character) farray.
  forall screen__writeconfigdata__secondsstring__valuestr__assume1:t.
  forall o:int. forall o1:character. forall o2:int. forall o3:character.
  forall o4:(int,character) farray. forall temp___1985:int.
  forall o5:(int,character) farray.
  forall temp___1986:(int,character) farray. forall temp___19861:t5.
  forall temp___1987:(int,character) farray. forall temp___19871:t4.
  forall temp___1988:int. forall o6:(int,character) farray.
  forall temp___1990:(int,character) farray. forall temp___19901:t4.
  forall result:(int,character) farray. forall str1:(int,character) farray.
  forall result1:(int,character) farray.
  forall valuestr1:(int,character) farray.
  forall result2:(int,character) farray. forall str2:(int,character) farray.
  (in_range4(value) -> (((result = str) and
  (str1 = temp___String_Literal_1980(void))) -> ((((({ elts1 = temp___1981;
  rt1 = temp___19811 } = durationt_image(value)) and ((dynamic_property1(1,
  2147483647, to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811))) and
  ((((to_rep1(first4(mk2(to_rep1(first6(mk3(to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811))))),
  to_rep1(last6(mk3(to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811)))))))) = 1) and
  (0 <= to_rep1(last4(mk2(to_rep1(first6(mk3(to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811))))),
  to_rep1(last6(mk3(to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811)))))))))) and
  (to_rep1(last6(mk3(to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811))))) <= 1000)) and (3 <= length1({ elts1 =
  temp___1981; rt1 = temp___19811 })))) and ({ elts1 = temp___1981; rt1 =
  temp___19811 } = { elts1 = (to_string(attr__ATTRIBUTE_IMAGE4(value))).elts;
  rt1 = mk1(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE4(value))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE4(value))).rt))) }))) and
  ((temp___1981 = screen__writeconfigdata__secondsstring__valuestr__assume) and
  (mk(to_rep1(first2(temp___19811)),
  to_rep1(last2(temp___19811))) = screen__writeconfigdata__secondsstring__valuestr__assume1))) and
  (((result1 = valuestr) and
  (valuestr1 = screen__writeconfigdata__secondsstring__valuestr__assume)) and
  ((to_rep1(valuestr__first) = to_rep1(first(screen__writeconfigdata__secondsstring__valuestr__assume1))) and
  (to_rep1(valuestr__last) = to_rep1(last(screen__writeconfigdata__secondsstring__valuestr__assume1)))))) ->
  (dynamic_property(1, 2147483647, to_rep1(valuestr__first),
  to_rep1(valuestr__last)) ->
  (((((((((to_rep1(valuestr__first) <= to_rep1(valuestr__last)) and
  (to_rep1(valuestr__last) <= to_rep1(valuestr__last))) and
  (o = to_rep1(valuestr__last))) and (o1 = (valuestr1[o]))) and
  (o2 = to_rep(o1))) and (to_rep(o3) = o2)) and (o4 = (str1[5 <- o3]))) and
  ((result2 = str1) and (str2 = o4))) -> ((10 <= value) ->
  (((((to_rep1(valuestr__first) <= to_rep1(valuestr__last)) and
  (3 <= ((to_rep1(valuestr__last) - to_rep1(valuestr__first)) + 1))) or
  ((not (to_rep1(valuestr__first) <= to_rep1(valuestr__last))) and
  (3 <= 0))) and (((to_rep1(valuestr__first) <= to_rep1(valuestr__last)) and
  (((to_rep1(valuestr__last) - to_rep1(valuestr__first)) + 1) <= 5)) or
  ((not (to_rep1(valuestr__first) <= to_rep1(valuestr__last))) and
  (0 <= 5)))) -> (((((temp___1985 = (to_rep1(valuestr__last) - 1)) and
  in_range1((to_rep1(valuestr__last) - 1))) and ((((2 <= temp___1985) ->
  (((to_rep1(valuestr__first) <= 2) and (2 <= to_rep1(valuestr__last))) and
  ((to_rep1(valuestr__first) <= temp___1985) and
  (temp___1985 <= to_rep1(valuestr__last))))) and (o5 = valuestr1)) and
  ((o5 = temp___1986) and (mk5(2, temp___1985) = temp___19861)))) and
  ((((to_rep1(first10(temp___19861)) <= to_rep1(last10(temp___19861))) and
  ((((6 - to_rep1(valuestr__last)) <= 3) and
  (((to_rep1(last10(temp___19861)) - to_rep1(first10(temp___19861))) + 1) = ((3 - (6 - to_rep1(valuestr__last))) + 1))) or
  ((not ((6 - to_rep1(valuestr__last)) <= 3)) and
  (((to_rep1(last10(temp___19861)) - to_rep1(first10(temp___19861))) + 1) = 0)))) or
  ((not (to_rep1(first10(temp___19861)) <= to_rep1(last10(temp___19861)))) and
  ((((6 - to_rep1(valuestr__last)) <= 3) and
  (0 = ((3 - (6 - to_rep1(valuestr__last))) + 1))) or
  (not ((6 - to_rep1(valuestr__last)) <= 3))))) and ((slide(temp___1986,
  to_rep1(first10(temp___19861)),
  (6 - to_rep1(valuestr__last))) = temp___1987) and
  (mk4((6 - to_rep1(valuestr__last)), 3) = temp___19871)))) ->
  ((((temp___1988 = (6 - to_rep1(valuestr__last))) and
  in_range1((6 - to_rep1(valuestr__last)))) and ((((temp___1988 <= 3) ->
  (((1 <= temp___1988) and (temp___1988 <= 7)) and ((1 <= 3) and
  (3 <= 7)))) and (o6 = str2)) and ((o6 = temp___1990) and (mk4(temp___1988,
  3) = temp___19901)))) ->
  (((to_rep1(first8(temp___19871)) <= to_rep1(last8(temp___19871))) ->
  (((to_rep1(first8(temp___19901)) <= to_rep1(last8(temp___19901))) ->
  (((to_rep1(last8(temp___19871)) - to_rep1(first8(temp___19871))) + 1) = ((to_rep1(last8(temp___19901)) - to_rep1(first8(temp___19901))) + 1))) and
  ((not (to_rep1(first8(temp___19901)) <= to_rep1(last8(temp___19901)))) ->
  (((to_rep1(last8(temp___19871)) - to_rep1(first8(temp___19871))) + 1) = 0)))) and
  ((not (to_rep1(first8(temp___19871)) <= to_rep1(last8(temp___19871)))) ->
  ((to_rep1(first8(temp___19901)) <= to_rep1(last8(temp___19901))) ->
  (0 = ((to_rep1(last8(temp___19901)) - to_rep1(first8(temp___19901))) + 1)))))))))))))))
