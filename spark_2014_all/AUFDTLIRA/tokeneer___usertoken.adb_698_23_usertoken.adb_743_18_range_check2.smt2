(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort character 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (character character) Bool)
(declare-const dummy character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-sort yearst 0)
(declare-fun yearstqtint (yearst) Int)
(assert (forall ((i yearst)) (and (<= 1901 (yearstqtint i)) (<= (yearstqtint i) 2099))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (yearst yearst) Bool)
(declare-const dummy1 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(define-fun to_rep1 ((x yearst)) Int (yearstqtint x))
(declare-fun of_rep1 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x yearst)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort monthst 0)
(declare-fun monthstqtint (monthst) Int)
(assert (forall ((i monthst)) (and (<= 1 (monthstqtint i)) (<= (monthstqtint i) 12))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (monthst monthst) Bool)
(declare-const dummy2 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(define-fun to_rep2 ((x monthst)) Int (monthstqtint x))
(declare-fun of_rep2 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x monthst)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort dayst 0)
(declare-fun daystqtint (dayst) Int)
(assert (forall ((i dayst)) (and (<= 1 (daystqtint i)) (<= (daystqtint i) 31))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (dayst dayst) Bool)
(declare-const dummy3 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(define-fun to_rep3 ((x dayst)) Int (daystqtint x))
(declare-fun of_rep3 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x dayst)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort millisecst 0)
(declare-fun millisecstqtint (millisecst) Int)
(assert (forall ((i millisecst)) (and (<= 0 (millisecstqtint i)) (<= (millisecstqtint i) 86399999))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (millisecst millisecst) Bool)
(declare-const dummy4 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(define-fun to_rep4 ((x millisecst)) Int (millisecstqtint x))
(declare-fun of_rep4 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x millisecst)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep1 (rec__clock__timet__year (us_split_fields1 a))) (to_rep1 (rec__clock__timet__year (us_split_fields1 b)))) (= (to_rep2 (rec__clock__timet__month (us_split_fields1 a))) (to_rep2 (rec__clock__timet__month (us_split_fields1 b))))) (= (to_rep3 (rec__clock__timet__day (us_split_fields1 a))) (to_rep3 (rec__clock__timet__day (us_split_fields1 b))))) (= (to_rep4 (rec__clock__timet__millisec (us_split_fields1 a))) (to_rep4 (rec__clock__timet__millisec (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep (timet__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort namecountt 0)
(declare-fun namecounttqtint (namecountt) Int)
(assert (forall ((i namecountt)) (and (<= 0 (namecounttqtint i)) (<= (namecounttqtint i) 40))))
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 40)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (namecountt namecountt) Bool)
(declare-const dummy6 namecountt)
(declare-datatypes () ((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt (namecountt__content a))
(define-fun to_rep5 ((x namecountt)) Int (namecounttqtint x))
(declare-fun of_rep5 (Int) namecountt)
(assert (forall ((x namecountt)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x namecountt)) (! (in_range6 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-const dummy7 (Array Int character))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int character)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)
(declare-sort issueridt 0)
(declare-fun issueridtqtint (issueridt) Int)
(assert (forall ((i issueridt)) (and (<= 0 (issueridtqtint i)) (<= (issueridtqtint i) 4294967295))))
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (issueridt issueridt) Bool)
(declare-const dummy8 issueridt)
(declare-datatypes () ((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt (issueridt__content a))
(define-fun to_rep6 ((x issueridt)) Int (issueridtqtint x))
(declare-fun of_rep6 (Int) issueridt)
(assert (forall ((x issueridt)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x issueridt)) (! (in_range7 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__cryptotypes__issuert__id issueridt) (rec__cryptotypes__issuert__namelength namecountt) (rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields2)) issueridt (rec__cryptotypes__issuert__id a))
(define-fun us_split_fields_NameLength__projection ((a us_split_fields2)) namecountt (rec__cryptotypes__issuert__namelength a))
(define-fun us_split_fields_Name__projection ((a us_split_fields2)) (Array Int character) (rec__cryptotypes__issuert__name a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep6 (rec__cryptotypes__issuert__id (us_split_fields3 a))) (to_rep6 (rec__cryptotypes__issuert__id (us_split_fields3 b)))) (= (to_rep5 (rec__cryptotypes__issuert__namelength (us_split_fields3 a))) (to_rep5 (rec__cryptotypes__issuert__namelength (us_split_fields3 b))))) (= (bool_eq (rec__cryptotypes__issuert__name (us_split_fields3 a)) 1 40 (rec__cryptotypes__issuert__name (us_split_fields3 b)) 1 40) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const cryptotypes__issuert__id__first__bit Int)
(declare-const cryptotypes__issuert__id__last__bit Int)
(declare-const cryptotypes__issuert__id__position Int)
(assert (<= 0 cryptotypes__issuert__id__first__bit))
(assert (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))
(assert (<= 0 cryptotypes__issuert__id__position))
(declare-const cryptotypes__issuert__namelength__first__bit Int)
(declare-const cryptotypes__issuert__namelength__last__bit Int)
(declare-const cryptotypes__issuert__namelength__position Int)
(assert (<= 0 cryptotypes__issuert__namelength__first__bit))
(assert (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))
(assert (<= 0 cryptotypes__issuert__namelength__position))
(declare-const cryptotypes__issuert__name__first__bit Int)
(declare-const cryptotypes__issuert__name__last__bit Int)
(declare-const cryptotypes__issuert__name__position Int)
(assert (<= 0 cryptotypes__issuert__name__first__bit))
(assert (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))
(assert (<= 0 cryptotypes__issuert__name__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((issuert__ref (mk_issuert__ref (issuert__content us_rep1)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep1 (issuert__content a))
(declare-sort serialnumbert 0)
(declare-fun serialnumbertqtint (serialnumbert) Int)
(assert (forall ((i serialnumbert)) (and (<= 0 (serialnumbertqtint i)) (<= (serialnumbertqtint i) 4294967295))))
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq10 (serialnumbert serialnumbert) Bool)
(declare-const dummy10 serialnumbert)
(declare-datatypes () ((serialnumbert__ref (mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert (serialnumbert__content a))
(define-fun to_rep7 ((x serialnumbert)) Int (serialnumbertqtint x))
(declare-fun of_rep7 (Int) serialnumbert)
(assert (forall ((x serialnumbert)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)))))
(assert (forall ((x serialnumbert)) (! (in_range8 (to_rep7 x)) :pattern ((to_rep7 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7 (of_rep7 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__certtypes__idt__issuer us_rep1) (rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields4)) us_rep1 (rec__certtypes__idt__issuer a))
(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields4)) serialnumbert (rec__certtypes__idt__serialnumber a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (bool_eq2 (rec__certtypes__idt__issuer (us_split_fields5 a)) (rec__certtypes__idt__issuer (us_split_fields5 b))) true) (= (to_rep7 (rec__certtypes__idt__serialnumber (us_split_fields5 a))) (to_rep7 (rec__certtypes__idt__serialnumber (us_split_fields5 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const certtypes__idt__issuer__first__bit Int)
(declare-const certtypes__idt__issuer__last__bit Int)
(declare-const certtypes__idt__issuer__position Int)
(assert (<= 0 certtypes__idt__issuer__first__bit))
(assert (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))
(assert (<= 0 certtypes__idt__issuer__position))
(declare-const certtypes__idt__serialnumber__first__bit Int)
(declare-const certtypes__idt__serialnumber__last__bit Int)
(declare-const certtypes__idt__serialnumber__position Int)
(assert (<= 0 certtypes__idt__serialnumber__first__bit))
(assert (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))
(assert (<= 0 certtypes__idt__serialnumber__position))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((idt__ref (mk_idt__ref (idt__content us_rep2)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep2 (idt__content a))
(declare-sort algorithmt 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq12 (algorithmt algorithmt) Bool)
(declare-const dummy12 algorithmt)
(declare-datatypes () ((algorithmt__ref (mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt (algorithmt__content a))
(declare-fun to_rep8 (algorithmt) Int)
(declare-fun of_rep8 (Int) algorithmt)
(assert (forall ((x algorithmt)) (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)))))
(assert (forall ((x algorithmt)) (! (in_range9 (to_rep8 x)) :pattern ((to_rep8 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8 (of_rep8 x))))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__cert__contentst__id us_rep2) (rec__cert__contentst__notbefore us_rep) (rec__cert__contentst__notafter us_rep) (rec__cert__contentst__mechanism algorithmt)))))
(define-fun us_split_fields_ID__3__projection ((a us_split_fields6)) us_rep2 (rec__cert__contentst__id a))
(define-fun us_split_fields_NotBefore__projection ((a us_split_fields6)) us_rep (rec__cert__contentst__notbefore a))
(define-fun us_split_fields_NotAfter__projection ((a us_split_fields6)) us_rep (rec__cert__contentst__notafter a))
(define-fun us_split_fields_Mechanism__projection ((a us_split_fields6)) algorithmt (rec__cert__contentst__mechanism a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___13__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___14__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (= (bool_eq3 (rec__cert__contentst__id (us_split_fields7 a)) (rec__cert__contentst__id (us_split_fields7 b))) true) (= (bool_eq1 (rec__cert__contentst__notbefore (us_split_fields7 a)) (rec__cert__contentst__notbefore (us_split_fields7 b))) true)) (= (bool_eq1 (rec__cert__contentst__notafter (us_split_fields7 a)) (rec__cert__contentst__notafter (us_split_fields7 b))) true)) (= (to_rep8 (rec__cert__contentst__mechanism (us_split_fields7 a))) (to_rep8 (rec__cert__contentst__mechanism (us_split_fields7 b))))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep3) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep3) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))
(declare-const cert__contentst__id__first__bit Int)
(declare-const cert__contentst__id__last__bit Int)
(declare-const cert__contentst__id__position Int)
(assert (<= 0 cert__contentst__id__first__bit))
(assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))
(assert (<= 0 cert__contentst__id__position))
(declare-const cert__contentst__notbefore__first__bit Int)
(declare-const cert__contentst__notbefore__last__bit Int)
(declare-const cert__contentst__notbefore__position Int)
(assert (<= 0 cert__contentst__notbefore__first__bit))
(assert (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))
(assert (<= 0 cert__contentst__notbefore__position))
(declare-const cert__contentst__notafter__first__bit Int)
(declare-const cert__contentst__notafter__last__bit Int)
(declare-const cert__contentst__notafter__position Int)
(assert (<= 0 cert__contentst__notafter__first__bit))
(assert (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))
(assert (<= 0 cert__contentst__notafter__position))
(declare-const cert__contentst__mechanism__first__bit Int)
(declare-const cert__contentst__mechanism__last__bit Int)
(declare-const cert__contentst__mechanism__position Int)
(assert (<= 0 cert__contentst__mechanism__first__bit))
(assert (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))
(assert (<= 0 cert__contentst__mechanism__position))
(declare-fun user_eq13 (us_rep3 us_rep3) Bool)
(declare-const dummy13 us_rep3)
(declare-datatypes () ((contentst__ref (mk_contentst__ref (contentst__content us_rep3)))))
(define-fun contentst__ref___projection ((a contentst__ref)) us_rep3 (contentst__content a))
(declare-fun iscurrent (us_rep3 us_split_fields us_private) Bool)
(declare-fun iscurrent__function_guard (Bool us_rep3 us_split_fields us_private) Bool)
(assert true)
(declare-sort keyidt 0)
(declare-fun keyidtqtint (keyidt) Int)
(assert (forall ((i keyidt)) (and (<= 0 (keyidtqtint i)) (<= (keyidtqtint i) 4294967295))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq14 (keyidt keyidt) Bool)
(declare-const dummy14 keyidt)
(declare-datatypes () ((keyidt__ref (mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content a))
(define-fun to_rep9 ((x keyidt)) Int (keyidtqtint x))
(declare-fun of_rep9 (Int) keyidt)
(assert (forall ((x keyidt)) (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)))))
(assert (forall ((x keyidt)) (! (in_range10 (to_rep9 x)) :pattern ((to_rep9 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9 (of_rep9 x))))))
(declare-sort keylengtht 0)
(declare-fun keylengthtqtint (keylengtht) Int)
(assert (forall ((i keylengtht)) (and (<= 0 (keylengthtqtint i)) (<= (keylengthtqtint i) 128))))
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 128)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq15 (keylengtht keylengtht) Bool)
(declare-const dummy15 keylengtht)
(declare-datatypes () ((keylengtht__ref (mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht (keylengtht__content a))
(define-fun to_rep10 ((x keylengtht)) Int (keylengthtqtint x))
(declare-fun of_rep10 (Int) keylengtht)
(assert (forall ((x keylengtht)) (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)))))
(assert (forall ((x keylengtht)) (! (in_range11 (to_rep10 x)) :pattern ((to_rep10 x)))))
(assert (forall ((x Int)) (! (=> (in_range11 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10 (of_rep10 x))))))
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__cryptotypes__keypartt__algorithmid algorithmt) (rec__cryptotypes__keypartt__keyid keyidt) (rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields8)) algorithmt (rec__cryptotypes__keypartt__algorithmid a))
(define-fun us_split_fields_KeyID__projection ((a us_split_fields8)) keyidt (rec__cryptotypes__keypartt__keyid a))
(define-fun us_split_fields_KeyLength__projection ((a us_split_fields8)) keylengtht (rec__cryptotypes__keypartt__keylength a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___2__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq5 ((a us_rep4) (b us_rep4)) Bool (ite (and (and (= (to_rep8 (rec__cryptotypes__keypartt__algorithmid (us_split_fields9 a))) (to_rep8 (rec__cryptotypes__keypartt__algorithmid (us_split_fields9 b)))) (= (to_rep9 (rec__cryptotypes__keypartt__keyid (us_split_fields9 a))) (to_rep9 (rec__cryptotypes__keypartt__keyid (us_split_fields9 b))))) (= (to_rep10 (rec__cryptotypes__keypartt__keylength (us_split_fields9 a))) (to_rep10 (rec__cryptotypes__keypartt__keylength (us_split_fields9 b))))) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep4) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep4) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))
(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)
(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)
(declare-const cryptotypes__keypartt__algorithmid__position Int)
(assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))
(assert (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))
(assert (<= 0 cryptotypes__keypartt__algorithmid__position))
(declare-const cryptotypes__keypartt__keyid__first__bit Int)
(declare-const cryptotypes__keypartt__keyid__last__bit Int)
(declare-const cryptotypes__keypartt__keyid__position Int)
(assert (<= 0 cryptotypes__keypartt__keyid__first__bit))
(assert (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))
(assert (<= 0 cryptotypes__keypartt__keyid__position))
(declare-const cryptotypes__keypartt__keylength__first__bit Int)
(declare-const cryptotypes__keypartt__keylength__last__bit Int)
(declare-const cryptotypes__keypartt__keylength__position Int)
(assert (<= 0 cryptotypes__keypartt__keylength__first__bit))
(assert (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))
(assert (<= 0 cryptotypes__keypartt__keylength__position))
(declare-fun user_eq16 (us_rep4 us_rep4) Bool)
(declare-const dummy16 us_rep4)
(declare-datatypes () ((keypartt__ref (mk_keypartt__ref (keypartt__content us_rep4)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep4 (keypartt__content a))
(declare-datatypes () ((us_split_fields10 (mk___split_fields5 (rec__cert__id__contentst__id us_rep2) (rec__cert__id__contentst__notbefore us_rep) (rec__cert__id__contentst__notafter us_rep) (rec__cert__id__contentst__mechanism algorithmt) (rec__cert__id__contentst__subject us_rep1) (rec__cert__id__contentst__subjectpublickey us_rep4)))))
(define-fun us_split_fields_ID__4__projection ((a us_split_fields10)) us_rep2 (rec__cert__id__contentst__id a))
(define-fun us_split_fields_NotBefore__2__projection ((a us_split_fields10)) us_rep (rec__cert__id__contentst__notbefore a))
(define-fun us_split_fields_NotAfter__2__projection ((a us_split_fields10)) us_rep (rec__cert__id__contentst__notafter a))
(define-fun us_split_fields_Mechanism__2__projection ((a us_split_fields10)) algorithmt (rec__cert__id__contentst__mechanism a))
(define-fun us_split_fields_Subject__projection ((a us_split_fields10)) us_rep1 (rec__cert__id__contentst__subject a))
(define-fun us_split_fields_SubjectPublicKey__projection ((a us_split_fields10)) us_rep4 (rec__cert__id__contentst__subjectpublickey a))
(declare-datatypes () ((us_split_fields__ref5 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___14__projection ((a us_split_fields__ref5)) us_split_fields10 (us_split_fields__content5 a))
(declare-datatypes () ((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___15__projection ((a us_rep5)) us_split_fields10 (us_split_fields11 a))
(define-fun bool_eq6 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (and (and (and (= (bool_eq3 (rec__cert__id__contentst__id (us_split_fields11 a)) (rec__cert__id__contentst__id (us_split_fields11 b))) true) (= (bool_eq1 (rec__cert__id__contentst__notbefore (us_split_fields11 a)) (rec__cert__id__contentst__notbefore (us_split_fields11 b))) true)) (= (bool_eq1 (rec__cert__id__contentst__notafter (us_split_fields11 a)) (rec__cert__id__contentst__notafter (us_split_fields11 b))) true)) (= (to_rep8 (rec__cert__id__contentst__mechanism (us_split_fields11 a))) (to_rep8 (rec__cert__id__contentst__mechanism (us_split_fields11 b))))) (= (bool_eq2 (rec__cert__id__contentst__subject (us_split_fields11 a)) (rec__cert__id__contentst__subject (us_split_fields11 b))) true)) (= (bool_eq5 (rec__cert__id__contentst__subjectpublickey (us_split_fields11 a)) (rec__cert__id__contentst__subjectpublickey (us_split_fields11 b))) true)) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep5) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep5) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep5)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment6 a))))
(declare-const cert__id__contentst__id__first__bit Int)
(declare-const cert__id__contentst__id__last__bit Int)
(declare-const cert__id__contentst__id__position Int)
(assert (<= 0 cert__id__contentst__id__first__bit))
(assert (< cert__id__contentst__id__first__bit cert__id__contentst__id__last__bit))
(assert (<= 0 cert__id__contentst__id__position))
(declare-const cert__id__contentst__notbefore__first__bit Int)
(declare-const cert__id__contentst__notbefore__last__bit Int)
(declare-const cert__id__contentst__notbefore__position Int)
(assert (<= 0 cert__id__contentst__notbefore__first__bit))
(assert (< cert__id__contentst__notbefore__first__bit cert__id__contentst__notbefore__last__bit))
(assert (<= 0 cert__id__contentst__notbefore__position))
(declare-const cert__id__contentst__notafter__first__bit Int)
(declare-const cert__id__contentst__notafter__last__bit Int)
(declare-const cert__id__contentst__notafter__position Int)
(assert (<= 0 cert__id__contentst__notafter__first__bit))
(assert (< cert__id__contentst__notafter__first__bit cert__id__contentst__notafter__last__bit))
(assert (<= 0 cert__id__contentst__notafter__position))
(declare-const cert__id__contentst__mechanism__first__bit Int)
(declare-const cert__id__contentst__mechanism__last__bit Int)
(declare-const cert__id__contentst__mechanism__position Int)
(assert (<= 0 cert__id__contentst__mechanism__first__bit))
(assert (< cert__id__contentst__mechanism__first__bit cert__id__contentst__mechanism__last__bit))
(assert (<= 0 cert__id__contentst__mechanism__position))
(declare-const cert__id__contentst__subject__first__bit Int)
(declare-const cert__id__contentst__subject__last__bit Int)
(declare-const cert__id__contentst__subject__position Int)
(assert (<= 0 cert__id__contentst__subject__first__bit))
(assert (< cert__id__contentst__subject__first__bit cert__id__contentst__subject__last__bit))
(assert (<= 0 cert__id__contentst__subject__position))
(declare-const cert__id__contentst__subjectpublickey__first__bit Int)
(declare-const cert__id__contentst__subjectpublickey__last__bit Int)
(declare-const cert__id__contentst__subjectpublickey__position Int)
(assert (<= 0 cert__id__contentst__subjectpublickey__first__bit))
(assert (< cert__id__contentst__subjectpublickey__first__bit cert__id__contentst__subjectpublickey__last__bit))
(assert (<= 0 cert__id__contentst__subjectpublickey__position))
(declare-fun user_eq17 (us_rep5 us_rep5) Bool)
(declare-const dummy17 us_rep5)
(declare-datatypes () ((contentst__ref1 (mk_contentst__ref1 (contentst__content1 us_rep5)))))
(define-fun contentst__ref___2__projection ((a contentst__ref1)) us_rep5 (contentst__content1 a))
(declare-fun cert_id_to_cert (us_rep5) us_rep3)
(declare-fun cert_id_to_cert__function_guard (us_rep3 us_rep5) Bool)
(assert true)
(declare-sort descriptioni 0)
(declare-fun descriptioniqtint (descriptioni) Int)
(assert (forall ((i descriptioni)) (and (<= 1 (descriptioniqtint i)) (<= (descriptioniqtint i) 150))))
(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 150)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq18 (descriptioni descriptioni) Bool)
(declare-const dummy18 descriptioni)
(declare-datatypes () ((descriptioni__ref (mk_descriptioni__ref (descriptioni__content descriptioni)))))
(define-fun descriptioni__ref___projection ((a descriptioni__ref)) descriptioni (descriptioni__content a))
(declare-const nodescription (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))
(declare-sort certificatestatus 0)
(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq19 (certificatestatus certificatestatus) Bool)
(declare-const dummy19 certificatestatus)
(declare-datatypes () ((certificatestatus__ref (mk_certificatestatus__ref (certificatestatus__content certificatestatus)))))
(define-fun certificatestatus__ref___projection ((a certificatestatus__ref)) certificatestatus (certificatestatus__content a))
(declare-fun to_rep11 (certificatestatus) Int)
(declare-fun of_rep11 (Int) certificatestatus)
(assert (forall ((x certificatestatus)) (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)))))
(assert (forall ((x certificatestatus)) (! (in_range13 (to_rep11 x)) :pattern ((to_rep11 x)))))
(assert (forall ((x Int)) (! (=> (in_range13 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11 (of_rep11 x))))))
(declare-datatypes () ((us_split_fields12 (mk___split_fields6 (rec__usertoken__valididcertt__valid Bool) (rec__usertoken__valididcertt__idstatus certificatestatus) (rec__usertoken__valididcertt__contents us_rep5)))))
(define-fun us_split_fields_Valid__projection ((a us_split_fields12)) Bool (rec__usertoken__valididcertt__valid a))
(define-fun us_split_fields_IDStatus__projection ((a us_split_fields12)) certificatestatus (rec__usertoken__valididcertt__idstatus a))
(define-fun us_split_fields_Contents__projection ((a us_split_fields12)) us_rep5 (rec__usertoken__valididcertt__contents a))
(declare-datatypes () ((us_split_fields__ref6 (mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref___27__projection ((a us_split_fields__ref6)) us_split_fields12 (us_split_fields__content6 a))
(declare-datatypes () ((us_rep6 (mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep___28__projection ((a us_rep6)) us_split_fields12 (us_split_fields13 a))
(define-fun bool_eq7 ((a us_rep6) (b us_rep6)) Bool (ite (and (and (= (rec__usertoken__valididcertt__valid (us_split_fields13 a)) (rec__usertoken__valididcertt__valid (us_split_fields13 b))) (= (to_rep11 (rec__usertoken__valididcertt__idstatus (us_split_fields13 a))) (to_rep11 (rec__usertoken__valididcertt__idstatus (us_split_fields13 b))))) (= (bool_eq6 (rec__usertoken__valididcertt__contents (us_split_fields13 a)) (rec__usertoken__valididcertt__contents (us_split_fields13 b))) true)) true false))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep6) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep6) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))
(declare-const usertoken__valididcertt__valid__first__bit Int)
(declare-const usertoken__valididcertt__valid__last__bit Int)
(declare-const usertoken__valididcertt__valid__position Int)
(assert (<= 0 usertoken__valididcertt__valid__first__bit))
(assert (< usertoken__valididcertt__valid__first__bit usertoken__valididcertt__valid__last__bit))
(assert (<= 0 usertoken__valididcertt__valid__position))
(declare-const usertoken__valididcertt__idstatus__first__bit Int)
(declare-const usertoken__valididcertt__idstatus__last__bit Int)
(declare-const usertoken__valididcertt__idstatus__position Int)
(assert (<= 0 usertoken__valididcertt__idstatus__first__bit))
(assert (< usertoken__valididcertt__idstatus__first__bit usertoken__valididcertt__idstatus__last__bit))
(assert (<= 0 usertoken__valididcertt__idstatus__position))
(declare-const usertoken__valididcertt__contents__first__bit Int)
(declare-const usertoken__valididcertt__contents__last__bit Int)
(declare-const usertoken__valididcertt__contents__position Int)
(assert (<= 0 usertoken__valididcertt__contents__first__bit))
(assert (< usertoken__valididcertt__contents__first__bit usertoken__valididcertt__contents__last__bit))
(assert (<= 0 usertoken__valididcertt__contents__position))
(declare-fun user_eq20 (us_rep6 us_rep6) Bool)
(declare-const dummy20 us_rep6)
(declare-datatypes () ((valididcertt__ref (mk_valididcertt__ref (valididcertt__content us_rep6)))))
(define-fun valididcertt__ref___projection ((a valididcertt__ref)) us_rep6 (valididcertt__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const c16b (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const c24b (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const c32b (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-fun temp___String_Literal_2883 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_2883 us_void_param) 1)) 73) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 2)) 68)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 3)) 32)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 4)) 67)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 7)) 116)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 8)) 105)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 9)) 102)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 10)) 105)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 11)) 99)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 12)) 97)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 13)) 116)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 14)) 101)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 16)) 66)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 17)) 97)) (= (to_rep (select (temp___String_Literal_2883 us_void_param) 18)) 100)) :pattern ((temp___String_Literal_2883 us_void_param)))))
(declare-fun temp___String_Literal_2888 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_2888 us_void_param) 1)) 73) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 2)) 68)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 3)) 32)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 4)) 67)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 7)) 116)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 8)) 105)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 9)) 102)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 10)) 105)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 11)) 99)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 12)) 97)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 13)) 116)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 14)) 101)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 16)) 78)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 17)) 111)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 18)) 116)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 19)) 32)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 20)) 86)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 21)) 101)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 22)) 114)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 23)) 105)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 24)) 102)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 25)) 105)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 26)) 97)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 27)) 98)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 28)) 108)) (= (to_rep (select (temp___String_Literal_2888 us_void_param) 29)) 101)) :pattern ((temp___String_Literal_2888 us_void_param)))))
(declare-fun temp___String_Literal_2893 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_2893 us_void_param) 1)) 73) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 2)) 68)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 3)) 32)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 4)) 67)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 7)) 116)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 8)) 105)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 9)) 102)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 10)) 105)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 11)) 99)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 12)) 97)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 13)) 116)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 14)) 101)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 16)) 78)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 17)) 111)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 18)) 116)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 19)) 32)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 20)) 67)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 21)) 117)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 22)) 114)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 23)) 114)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 24)) 101)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 25)) 110)) (= (to_rep (select (temp___String_Literal_2893 us_void_param) 26)) 116)) :pattern ((temp___String_Literal_2893 us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range1 temp___expr_74)))
(define-fun dynamic_invariant1 ((temp___expr_2407 Int) (temp___is_init_2403 Bool) (temp___skip_constant_2404 Bool) (temp___do_toplevel_2405 Bool) (temp___do_typ_inv_2406 Bool)) Bool (=> (or (= temp___is_init_2403 true) (<= 0 3)) (in_range13 temp___expr_2407)))
(define-fun dynamic_invariant2 ((temp___expr_651 Int) (temp___is_init_647 Bool) (temp___skip_constant_648 Bool) (temp___do_toplevel_649 Bool) (temp___do_typ_inv_650 Bool)) Bool (=> (or (= temp___is_init_647 true) (<= 1 150)) (in_range12 temp___expr_651)))
(assert (= nodescription (audittypes__nodescription__aggregate_def 32)))
(assert (forall ((temp___162 Int)) (=> (dynamic_invariant temp___162 true true true true) (forall ((temp___163 Int)) (= (to_rep (select (audittypes__nodescription__aggregate_def temp___162) temp___163)) temp___162)))))
(define-fun dynamic_invariant3 ((temp___expr_703 Int) (temp___is_init_699 Bool) (temp___skip_constant_700 Bool) (temp___do_toplevel_701 Bool) (temp___do_typ_inv_702 Bool)) Bool (=> (or (= temp___is_init_699 true) (<= 1901 2099)) (in_range2 temp___expr_703)))
(define-fun dynamic_invariant4 ((temp___expr_710 Int) (temp___is_init_706 Bool) (temp___skip_constant_707 Bool) (temp___do_toplevel_708 Bool) (temp___do_typ_inv_709 Bool)) Bool (=> (or (= temp___is_init_706 true) (<= 1 12)) (in_range3 temp___expr_710)))
(define-fun dynamic_invariant5 ((temp___expr_717 Int) (temp___is_init_713 Bool) (temp___skip_constant_714 Bool) (temp___do_toplevel_715 Bool) (temp___do_typ_inv_716 Bool)) Bool (=> (or (= temp___is_init_713 true) (<= 1 31)) (in_range4 temp___expr_717)))
(define-fun dynamic_invariant6 ((temp___expr_749 Int) (temp___is_init_745 Bool) (temp___skip_constant_746 Bool) (temp___do_toplevel_747 Bool) (temp___do_typ_inv_748 Bool)) Bool (=> (or (= temp___is_init_745 true) (<= 0 86399999)) (in_range5 temp___expr_749)))
(define-fun dynamic_invariant7 ((temp___expr_402 Int) (temp___is_init_398 Bool) (temp___skip_constant_399 Bool) (temp___do_toplevel_400 Bool) (temp___do_typ_inv_401 Bool)) Bool (=> (or (= temp___is_init_398 true) (<= 0 40)) (in_range6 temp___expr_402)))
(define-fun dynamic_invariant8 ((temp___expr_426 Int) (temp___is_init_422 Bool) (temp___skip_constant_423 Bool) (temp___do_toplevel_424 Bool) (temp___do_typ_inv_425 Bool)) Bool (=> (or (= temp___is_init_422 true) (<= 0 4294967295)) (in_range7 temp___expr_426)))
(define-fun dynamic_invariant9 ((temp___expr_450 Int) (temp___is_init_446 Bool) (temp___skip_constant_447 Bool) (temp___do_toplevel_448 Bool) (temp___do_typ_inv_449 Bool)) Bool (=> (or (= temp___is_init_446 true) (<= 0 10)) (in_range9 temp___expr_450)))
(define-fun dynamic_invariant10 ((temp___expr_464 Int) (temp___is_init_460 Bool) (temp___skip_constant_461 Bool) (temp___do_toplevel_462 Bool) (temp___do_typ_inv_463 Bool)) Bool (=> (or (= temp___is_init_460 true) (<= 0 4294967295)) (in_range10 temp___expr_464)))
(define-fun dynamic_invariant11 ((temp___expr_471 Int) (temp___is_init_467 Bool) (temp___skip_constant_468 Bool) (temp___do_toplevel_469 Bool) (temp___do_typ_inv_470 Bool)) Bool (=> (or (= temp___is_init_467 true) (<= 0 128)) (in_range11 temp___expr_471)))
(define-fun dynamic_invariant12 ((temp___expr_567 Int) (temp___is_init_563 Bool) (temp___skip_constant_564 Bool) (temp___do_toplevel_565 Bool) (temp___do_typ_inv_566 Bool)) Bool (=> (or (= temp___is_init_563 true) (<= 0 4294967295)) (in_range8 temp___expr_567)))
(declare-const currenttimevar__split_fields yearst)
(declare-const currenttimevar__split_fields1 monthst)
(declare-const currenttimevar__split_fields2 dayst)
(declare-const currenttimevar__split_fields3 millisecst)
(declare-const idcert__split_fields us_split_fields__ref6)
(declare-const current Bool)
(declare-const idcertcontents__split_fields us_split_fields__ref5)
(declare-const result__ (Array Int character))
(declare-const currenttime us_private)
(declare-const o us_rep3)
(declare-const o1 Bool)
(declare-const o2 certificatestatus)
(declare-const o3 us_split_fields12)
(declare-const temp___2882 us_rep6)
(declare-const idcert__split_fields1 us_split_fields12)
(declare-const current1 Bool)
(declare-const idcertcontents__split_fields1 us_split_fields10)
(declare-const result us_split_fields__ref5)
(declare-const idcertcontents__split_fields2 us_split_fields10)
(declare-const result1 Bool)
(declare-const current2 Bool)
(declare-const result2 us_split_fields__ref6)
(declare-const idcert__split_fields2 us_split_fields12)
(declare-const result3 us_split_fields__ref6)
(declare-const idcert__split_fields3 us_split_fields12)
(declare-const result4 (Array Int character))
(declare-const result__1 (Array Int character))
(assert (= (audittypes__nodescription__aggregate_def 32) nodescription))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= result idcertcontents__split_fields)))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= (let ((subject idcertcontents__split_fields)) idcertcontents__split_fields2) (us_split_fields11 (rec__usertoken__valididcertt__contents (us_split_fields__content6 idcert__split_fields))))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= o (cert_id_to_cert (mk___rep5 (let ((subject idcertcontents__split_fields)) idcertcontents__split_fields2))))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= o1 (iscurrent o (mk___split_fields currenttimevar__split_fields currenttimevar__split_fields1 currenttimevar__split_fields2 currenttimevar__split_fields3) currenttime))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= result1 current)))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= current2 o1)))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= result2 idcert__split_fields)))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (= (let ((subject idcert__split_fields)) idcert__split_fields2) (mk___split_fields6 (ite (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) current2 false) (rec__usertoken__valididcertt__idstatus (us_split_fields__content6 idcert__split_fields)) (rec__usertoken__valididcertt__contents (us_split_fields__content6 idcert__split_fields))))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (= current2 true)) (= (to_rep11 o2) 2))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (= current2 true)) (= o3 (mk___split_fields6 (rec__usertoken__valididcertt__valid (let ((subject idcert__split_fields)) idcert__split_fields2)) o2 (rec__usertoken__valididcertt__contents (let ((subject idcert__split_fields)) idcert__split_fields2)))))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (= current2 true)) (= temp___2882 (mk___rep6 o3)))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (= current2 true)) (= result3 (let ((subject idcert__split_fields)) (mk___split_fields__ref6 idcert__split_fields2))))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (= current2 true)) (= (let ((subject idcert__split_fields)) idcert__split_fields3) (us_split_fields13 temp___2882)))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (not (= current2 true))) (= (let ((subject idcert__split_fields)) (mk___split_fields__ref6 idcert__split_fields3)) (let ((subject idcert__split_fields)) (mk___split_fields__ref6 idcert__split_fields2))))))
(assert (=> (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true) (=> (not (not (= current2 true))) (= idcert__split_fields3 idcert__split_fields2))))
(assert (=> (not (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true)) (= (let ((subject idcertcontents__split_fields)) (mk___split_fields__ref5 idcertcontents__split_fields2)) idcertcontents__split_fields)))
(assert (=> (not (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true)) (= current2 current)))
(assert (=> (not (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true)) (= (let ((subject idcert__split_fields)) (mk___split_fields__ref6 idcert__split_fields3)) idcert__split_fields)))
(assert (=> (not (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true)) (= idcertcontents__split_fields2 idcertcontents__split_fields1)))
(assert (=> (not (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true)) (= current2 current1)))
(assert (=> (not (= (rec__usertoken__valididcertt__valid (us_split_fields__content6 idcert__split_fields)) true)) (= idcert__split_fields3 idcert__split_fields1)))
(assert (not (= (to_rep11 (rec__usertoken__valididcertt__idstatus (let ((subject idcert__split_fields)) idcert__split_fields3))) 0)))
(assert (= (to_rep11 (rec__usertoken__valididcertt__idstatus (let ((subject idcert__split_fields)) idcert__split_fields3))) 1))
(assert (= result4 result__))
(assert (= result__1 nodescription))
(assert (not (= (distinct 1 0) true)))
(assert (<= 1 150))
(assert (not (<= 1 1)))
(check-sat)
(exit)
