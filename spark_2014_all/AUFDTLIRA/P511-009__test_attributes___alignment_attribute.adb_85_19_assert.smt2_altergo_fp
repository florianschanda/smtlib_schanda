(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type my_integer

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : my_integer, my_integer -> bool

logic dummy5 : my_integer

type my_integer__ref = { my_integer__content : my_integer
}

function my_integer__ref___projection(a: my_integer__ref) : my_integer =
  (a).my_integer__content

type r1

logic user_eq5 : r1, r1 -> bool

logic value__size1 : int

logic object__size1 : r1 -> int

logic value__alignment1 : int

logic object__alignment1 : r1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:r1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:r1. (0 <= object__alignment1(a)))

logic dummy6 : r1

type r1__ref = { r1__content : r1
}

function r1__ref___projection(a: r1__ref) : r1 = (a).r1__content

logic to_rep2 : my_integer -> int

logic of_rep2 : int -> my_integer

axiom inversion_axiom2 :
  (forall x:my_integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:my_integer [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__alignment_attribute__r2__d1 : my_integer
}

function us_split_discrs___projection(a: us_split_discrs) : my_integer =
  (a).rec__alignment_attribute__r2__d1

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__alignment_attribute__r2__d2 : bool
}

function us_split_fields_D2__projection(a: us_split_fields) : bool =
  (a).rec__alignment_attribute__r2__d2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate alignment_attribute__r2__d2__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__alignment_attribute__r2__d1) = 5)

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep2(((a).us_split_discrs1).rec__alignment_attribute__r2__d1) = to_rep2(((b).us_split_discrs1).rec__alignment_attribute__r2__d1)) and
  (alignment_attribute__r2__d2__pred(a) ->
  (((a).us_split_fields1).rec__alignment_attribute__r2__d2 = ((b).us_split_fields1).rec__alignment_attribute__r2__d2))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs1).rec__alignment_attribute__r2__d1) = to_rep2(((b).us_split_discrs1).rec__alignment_attribute__r2__d1)) and
  (alignment_attribute__r2__d2__pred(a) ->
  (((a).us_split_fields1).rec__alignment_attribute__r2__d2 = ((b).us_split_fields1).rec__alignment_attribute__r2__d2)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:my_integer. forall a1:bool. forall a2:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__alignment_attribute__r2__d1 = a };
  us_split_fields1 = { rec__alignment_attribute__r2__d2 = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:my_integer. forall a1:bool. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__alignment_attribute__r2__d1 = a }; us_split_fields1 = {
  rec__alignment_attribute__r2__d2 = a1 }; attr__constrained = a2 })))

logic alignment_attribute__r2__d1__first__bit : int

logic alignment_attribute__r2__d1__last__bit : int

logic alignment_attribute__r2__d1__position : int

axiom alignment_attribute__r2__d1__first__bit_axiom :
  (0 <= alignment_attribute__r2__d1__first__bit)

axiom alignment_attribute__r2__d1__last__bit_axiom :
  (alignment_attribute__r2__d1__first__bit <  alignment_attribute__r2__d1__last__bit)

axiom alignment_attribute__r2__d1__position_axiom :
  (0 <= alignment_attribute__r2__d1__position)

logic alignment_attribute__r2__d2__first__bit : int

logic alignment_attribute__r2__d2__last__bit : int

logic alignment_attribute__r2__d2__position : int

axiom alignment_attribute__r2__d2__first__bit_axiom :
  (0 <= alignment_attribute__r2__d2__first__bit)

axiom alignment_attribute__r2__d2__last__bit_axiom :
  (alignment_attribute__r2__d2__first__bit <  alignment_attribute__r2__d2__last__bit)

axiom alignment_attribute__r2__d2__position_axiom :
  (0 <= alignment_attribute__r2__d2__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : my_integer

logic dummy8 : bool

logic dummy9 : bool

type r2__ref = { r2__content : us_rep
}

function r2__ref___projection(a: r2__ref) : us_rep = (a).r2__content

predicate in_range5(rec__alignment_attribute__r2__d11: int, a: us_rep) =
  (rec__alignment_attribute__r2__d11 = to_rep2(((a).us_split_discrs1).rec__alignment_attribute__r2__d1))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:my_integer. forall a1:bool. forall a2:bool. (0 <= object__size3({
  us_split_discrs1 = { rec__alignment_attribute__r2__d1 = a };
  us_split_fields1 = { rec__alignment_attribute__r2__d2 = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:my_integer. forall a1:bool. forall a2:bool.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__alignment_attribute__r2__d1 = a }; us_split_fields1 = {
  rec__alignment_attribute__r2__d2 = a1 }; attr__constrained = a2 })))

logic alignment_attribute__r2__d1__first__bit1 : int

logic alignment_attribute__r2__d1__last__bit1 : int

logic alignment_attribute__r2__d1__position1 : int

axiom alignment_attribute__r2__d1__first__bit_axiom1 :
  (0 <= alignment_attribute__r2__d1__first__bit1)

axiom alignment_attribute__r2__d1__last__bit_axiom1 :
  (alignment_attribute__r2__d1__first__bit1 <  alignment_attribute__r2__d1__last__bit1)

axiom alignment_attribute__r2__d1__position_axiom1 :
  (0 <= alignment_attribute__r2__d1__position1)

logic alignment_attribute__r2__d2__first__bit1 : int

logic alignment_attribute__r2__d2__last__bit1 : int

logic alignment_attribute__r2__d2__position1 : int

axiom alignment_attribute__r2__d2__first__bit_axiom1 :
  (0 <= alignment_attribute__r2__d2__first__bit1)

axiom alignment_attribute__r2__d2__last__bit_axiom1 :
  (alignment_attribute__r2__d2__first__bit1 <  alignment_attribute__r2__d2__last__bit1)

axiom alignment_attribute__r2__d2__position_axiom1 :
  (0 <= alignment_attribute__r2__d2__position1)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy10 : my_integer

logic dummy11 : bool

logic dummy12 : bool

type sr2__ref = { sr2__content : us_rep
}

function sr2__ref___projection(a: sr2__ref) : us_rep = (a).sr2__content

type us_split_fields2 = { rec__alignment_attribute__r3__i : integer;
rec__ext__ : us_private
}

function us_split_fields_I__projection(a: us_split_fields2) : integer =
  (a).rec__alignment_attribute__r3__i

function us_split_fields___projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag : int
}

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___5__projection(a: us_rep1) : int = (a).attr__tag

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  (((to_rep1(((a).us_split_fields3).rec__alignment_attribute__r3__i) = to_rep1(((b).us_split_fields3).rec__alignment_attribute__r3__i)) ->
  (bool_eq9(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields3).rec__alignment_attribute__r3__i) = to_rep1(((b).us_split_fields3).rec__alignment_attribute__r3__i))) ->
  (bool_eq9(a, b) = false))))

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size4({ us_split_fields3 = {
  rec__alignment_attribute__r3__i = a; rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment4({ us_split_fields3 = {
  rec__alignment_attribute__r3__i = a; rec__ext__ = a1 }; attr__tag = a2 })))

logic alignment_attribute__r3__i__first__bit : int

logic alignment_attribute__r3__i__last__bit : int

logic alignment_attribute__r3__i__position : int

axiom alignment_attribute__r3__i__first__bit_axiom :
  (0 <= alignment_attribute__r3__i__first__bit)

axiom alignment_attribute__r3__i__last__bit_axiom :
  (alignment_attribute__r3__i__first__bit <  alignment_attribute__r3__i__last__bit)

axiom alignment_attribute__r3__i__position_axiom :
  (0 <= alignment_attribute__r3__i__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy13 : integer

logic dummy14 : us_private

logic dummy15 : int

type r3__ref = { r3__content : us_rep1
}

function r3__ref___projection(a: r3__ref) : us_rep1 = (a).r3__content

type us_split_fields4 = { rec__alignment_attribute__r4__j : integer;
rec__alignment_attribute__r3__i1 : integer; rec__ext__1 : us_private
}

function us_split_fields_J__projection(a: us_split_fields4) : integer =
  (a).rec__alignment_attribute__r4__j

function us_split_fields_I__2__projection(a: us_split_fields4) : integer =
  (a).rec__alignment_attribute__r3__i1

function us_split_fields___2__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag1 : int
}

function us_rep___6__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___7__projection(a: us_rep2) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__j : us_private -> integer

axiom extract__j__conv :
  (forall j:integer.
  (forall rec__ext__2:us_private. (extract__j(hide_ext__(j,
  rec__ext__2)) = j)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep2) : us_rep1 = { us_split_fields3 = {
  rec__alignment_attribute__r3__i =
  ((a).us_split_fields5).rec__alignment_attribute__r3__i1; rec__ext__ =
  hide_ext__(((a).us_split_fields5).rec__alignment_attribute__r4__j,
  ((a).us_split_fields5).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep1) : us_rep2 = { us_split_fields5 = {
  rec__alignment_attribute__r4__j =
  extract__j(((r).us_split_fields3).rec__ext__);
  rec__alignment_attribute__r3__i1 =
  ((r).us_split_fields3).rec__alignment_attribute__r3__i; rec__ext__1 =
  extract__ext__(((r).us_split_fields3).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((to_rep1(((a).us_split_fields5).rec__alignment_attribute__r4__j) = to_rep1(((b).us_split_fields5).rec__alignment_attribute__r4__j)) and
  (to_rep1(((a).us_split_fields5).rec__alignment_attribute__r3__i1) = to_rep1(((b).us_split_fields5).rec__alignment_attribute__r3__i1))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields5).rec__alignment_attribute__r4__j) = to_rep1(((b).us_split_fields5).rec__alignment_attribute__r4__j)) and
  (to_rep1(((a).us_split_fields5).rec__alignment_attribute__r3__i1) = to_rep1(((b).us_split_fields5).rec__alignment_attribute__r3__i1)))) ->
  (bool_eq10(a, b) = false))))

logic us_tag1 : int

logic value__size5 : int

logic object__size5 : us_rep2 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep2 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size5({ us_split_fields5 = {
  rec__alignment_attribute__r4__j = a; rec__alignment_attribute__r3__i1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment5({ us_split_fields5 = {
  rec__alignment_attribute__r4__j = a; rec__alignment_attribute__r3__i1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic alignment_attribute__r4__j__first__bit : int

logic alignment_attribute__r4__j__last__bit : int

logic alignment_attribute__r4__j__position : int

axiom alignment_attribute__r4__j__first__bit_axiom :
  (0 <= alignment_attribute__r4__j__first__bit)

axiom alignment_attribute__r4__j__last__bit_axiom :
  (alignment_attribute__r4__j__first__bit <  alignment_attribute__r4__j__last__bit)

axiom alignment_attribute__r4__j__position_axiom :
  (0 <= alignment_attribute__r4__j__position)

logic alignment_attribute__r3__i__first__bit1 : int

logic alignment_attribute__r3__i__last__bit1 : int

logic alignment_attribute__r3__i__position1 : int

axiom alignment_attribute__r3__i__first__bit_axiom1 :
  (0 <= alignment_attribute__r3__i__first__bit1)

axiom alignment_attribute__r3__i__last__bit_axiom1 :
  (alignment_attribute__r3__i__first__bit1 <  alignment_attribute__r3__i__last__bit1)

axiom alignment_attribute__r3__i__position_axiom1 :
  (0 <= alignment_attribute__r3__i__position1)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy16 : integer

logic dummy17 : integer

logic dummy18 : us_private

logic dummy19 : int

type r4__ref = { r4__content : us_rep2
}

function r4__ref___projection(a: r4__ref) : us_rep2 = (a).r4__content

logic to_rep3 : positive -> int

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range2(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range2(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,positive) farray
}

logic slide1 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq1 :
  (forall a:(int,positive) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq11 : (int,positive) farray, int, int, (int,positive) farray,
  int, int -> bool

axiom bool_eq_def9 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy20 : (int,positive) farray

logic value__size6 : int

logic object__size6 : (int,positive) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,positive) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,positive) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,positive) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,positive) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,positive) farray. (0 <= object__alignment6(a)))

logic user_eq10 : (int,positive) farray, (int,positive) farray -> bool

type natural

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : natural, natural -> bool

logic dummy21 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep4 : natural -> int

logic of_rep4 : int -> natural

axiom inversion_axiom4 :
  (forall x:natural [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:natural [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq13 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def11 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep4((a[temp___idx_155])) = to_rep4((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep4((a[temp___idx_155])) = to_rep4((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep4((a[temp___idx_155])) = to_rep4((b[((b__first - a__first) + temp___idx_155)])))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,natural) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,natural) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,natural) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,natural) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,natural) farray. (0 <= object__alignment7(a)))

function bool_eq14(x: us_t1, y: us_t1) : bool = bool_eq13((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq12 : us_t1, us_t1 -> bool

logic dummy22 : (int,natural) farray

logic dummy23 : t1

type unconstr_array__ref = { unconstr_array__content : us_t1
}

function unconstr_array__ref___projection(a: unconstr_array__ref) : us_t1 =
  (a).unconstr_array__content

logic attr__ATTRIBUTE_ADDRESS : int

logic int__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic s__first : integer

logic s__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range7(rec__alignment_attribute__r2__d11: int, a: us_rep) =
  (rec__alignment_attribute__r2__d11 = to_rep2(((a).us_split_discrs1).rec__alignment_attribute__r2__d1))

logic value__size8 : int

logic object__size8 : us_rep -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:my_integer. forall a1:bool. forall a2:bool. (0 <= object__size8({
  us_split_discrs1 = { rec__alignment_attribute__r2__d1 = a };
  us_split_fields1 = { rec__alignment_attribute__r2__d2 = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:my_integer. forall a1:bool. forall a2:bool.
  (0 <= object__alignment8({ us_split_discrs1 = {
  rec__alignment_attribute__r2__d1 = a }; us_split_fields1 = {
  rec__alignment_attribute__r2__d2 = a1 }; attr__constrained = a2 })))

logic alignment_attribute__r2__d1__first__bit2 : int

logic alignment_attribute__r2__d1__last__bit2 : int

logic alignment_attribute__r2__d1__position2 : int

axiom alignment_attribute__r2__d1__first__bit_axiom2 :
  (0 <= alignment_attribute__r2__d1__first__bit2)

axiom alignment_attribute__r2__d1__last__bit_axiom2 :
  (alignment_attribute__r2__d1__first__bit2 <  alignment_attribute__r2__d1__last__bit2)

axiom alignment_attribute__r2__d1__position_axiom2 :
  (0 <= alignment_attribute__r2__d1__position2)

logic alignment_attribute__r2__d2__first__bit2 : int

logic alignment_attribute__r2__d2__last__bit2 : int

logic alignment_attribute__r2__d2__position2 : int

axiom alignment_attribute__r2__d2__first__bit_axiom2 :
  (0 <= alignment_attribute__r2__d2__first__bit2)

axiom alignment_attribute__r2__d2__last__bit_axiom2 :
  (alignment_attribute__r2__d2__first__bit2 <  alignment_attribute__r2__d2__last__bit2)

axiom alignment_attribute__r2__d2__position_axiom2 :
  (0 <= alignment_attribute__r2__d2__position2)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy24 : my_integer

logic dummy25 : bool

logic dummy26 : bool

type trt2S__ref = { trt2S__content : us_rep
}

function trt2S__ref___projection(a: trt2S__ref) : us_rep = (a).trt2S__content

logic rt2__split_discrs : my_integer

logic rt2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

logic rst2__split_discrs : my_integer

logic rst2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS6 : int

logic rt3__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic rt4__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic alignment_attribute__ua__aggregate_def : int -> (int,natural) farray

logic alignment_attribute__ca__aggregate_def : int -> (int,positive) farray

logic temp___String_Literal_285 : unit -> (int,character) farray

axiom temp___String_Literal_285__def_axiom :
  ((((to_rep((temp___String_Literal_285(void)[1])) = 116) and
  (to_rep((temp___String_Literal_285(void)[2])) = 101)) and
  (to_rep((temp___String_Literal_285(void)[3])) = 115)) and
  (to_rep((temp___String_Literal_285(void)[4])) = 116))

axiom int____def_axiom : (int__ = 2)

axiom def_axiom :
  (forall temp___272:int. (in_range2(temp___272) ->
  (forall temp___273:int.
  (to_rep3((alignment_attribute__ca__aggregate_def(temp___272)[temp___273])) = temp___272))))

axiom def_axiom1 :
  (forall temp___269:int. (in_range6(temp___269) ->
  (forall temp___270:int.
  (to_rep4((alignment_attribute__ua__aggregate_def(temp___269)[temp___270])) = temp___269))))

 (* File "alignment_attribute.adb", line 44, characters 0-0 *)
goal WP_parameter_def :
  (forall b:bool. forall s:(int,character) farray. forall m:int.
  forall rt11:r1. forall rt2__split_fields:bool.
  forall ca:(int,positive) farray. forall ua:(int,natural) farray.
  forall us:int. forall us1:int. forall result:bool. forall b1:bool.
  forall result1:(int,character) farray. forall s1:(int,character) farray.
  forall result2:int. forall m1:int. forall result3:(int,positive) farray.
  forall ca1:(int,positive) farray. forall result4:(int,natural) farray.
  forall ua1:(int,natural) farray. (((us = 5) and in_range4(5)) ->
  (((result = b) and (b1 = of_int(1))) -> (in_range1(int__) ->
  ((((result1 = s) and (s1 = temp___String_Literal_285(void))) and
  ((to_rep1(s__first) = to_rep1(first(mk(1, 4)))) and
  (to_rep1(s__last) = to_rep1(last(mk(1, 4)))))) -> (dynamic_property(1,
  2147483647, to_rep1(s__first), to_rep1(s__last)) -> (((result2 = m) and
  (m1 = 10)) -> (in_range4(m1) -> (((us1 = 3) and in_range4(3)) ->
  (((rt2__attr__constrained = true) and (to_rep2(rt2__split_discrs) = 3)) ->
  (((3 = to_rep2(rt2__split_discrs)) and (rt2__attr__constrained = true)) ->
  (((rst2__attr__constrained = true) and
  (to_rep2(rst2__split_discrs) = 5)) ->
  (((5 = to_rep2(rst2__split_discrs)) and
  (rst2__attr__constrained = true)) -> ((rt3__attr__tag = us_tag) ->
  ((rt4__attr__tag = us_tag1) -> (((result3 = ca) and
  (ca1 = alignment_attribute__ca__aggregate_def(2))) -> (((result4 = ua) and
  (ua1 = alignment_attribute__ua__aggregate_def(1))) ->
  ((0 <= value__alignment1) -> ((0 <= value__alignment2) ->
  ((0 <= value__alignment3) -> ((0 <= value__alignment4) ->
  ((0 <= value__alignment5) -> ((0 <= value__alignment) ->
  ((0 <= value__alignment6) -> ((0 <= value__alignment7) -> ((0 <= 1) ->
  ((0 <= 4) -> ((0 <= 1) -> ((0 <= 4) -> ((0 <= object__alignment1(rt11)) ->
  (0 <= object__alignment8({ us_split_discrs1 = {
  rec__alignment_attribute__r2__d1 = rt2__split_discrs }; us_split_fields1 =
  { rec__alignment_attribute__r2__d2 = rt2__split_fields };
  attr__constrained = rt2__attr__constrained
  }))))))))))))))))))))))))))))))))
