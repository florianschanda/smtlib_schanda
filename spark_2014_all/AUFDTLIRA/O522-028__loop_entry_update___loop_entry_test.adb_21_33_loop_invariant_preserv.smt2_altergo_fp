(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_t

predicate in_range1(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_t, index_t -> bool

logic dummy : index_t

type index_t__ref = { index_t__content : index_t
}

function index_t__ref___projection(a: index_t__ref) : index_t =
  (a).index_t__content

type component_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : component_t, component_t -> bool

logic dummy1 : component_t

type component_t__ref = { component_t__content : component_t
}

function component_t__ref___projection(a: component_t__ref) : component_t =
  (a).component_t__content

logic to_rep : component_t -> int

logic of_rep : int -> component_t

axiom inversion_axiom :
  (forall x:component_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:component_t [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,component_t) farray
}

logic slide : (int,component_t) farray, int, int -> (int,component_t) farray

axiom slide_eq :
  (forall a:(int,component_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,component_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,component_t) farray, int, int,
  (int,component_t) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,component_t) farray. forall a__first:int.
  forall a__last:int. forall b:(int,component_t) farray. forall b__first:int.
  forall b__last:int [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,component_t) farray. forall b:(int,component_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic first : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic last : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref___projection(a: t2b__ref) : integer = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___599 : (int,component_t) farray, int, int,
  int -> (int,component_t) farray

logic temp___621 : (int,component_t) farray, int, int,
  int -> (int,component_t) farray

axiom def_axiom :
  (forall temp___623:(int,component_t) farray.
  (forall temp___624:int. forall temp___625:int. forall temp___626:int.
  (((in_range1(temp___624) and in_range1(temp___625)) and
  in_range2(temp___626)) ->
  (forall temp___627:int. ((((temp___624 <= temp___627) and
  (temp___627 <= temp___625)) -> (to_rep((temp___621(temp___623, temp___624,
  temp___625, temp___626)[temp___627])) = temp___626)) and
  ((not ((temp___624 <= temp___627) and (temp___627 <= temp___625))) ->
  ((temp___621(temp___623, temp___624, temp___625,
  temp___626)[temp___627]) = (temp___623[temp___627]))))))))

axiom def_axiom1 :
  (forall temp___601:(int,component_t) farray.
  (forall temp___602:int. forall temp___603:int. forall temp___604:int.
  (((in_range1(temp___602) and in_range1(temp___603)) and
  in_range2(temp___604)) ->
  (forall temp___605:int. ((((temp___602 <= temp___605) and
  (temp___605 <= temp___603)) -> (to_rep((temp___599(temp___601, temp___602,
  temp___603, temp___604)[temp___605])) = temp___604)) and
  ((not ((temp___602 <= temp___605) and (temp___605 <= temp___603))) ->
  ((temp___599(temp___601, temp___602, temp___603,
  temp___604)[temp___605]) = (temp___601[temp___605]))))))))

 (* File "loop_entry_test.adb", line 21, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,component_t) farray.
  forall a_loop_entry:(int,component_t) farray. forall j:int.
  forall o:component_t. forall o1:(int,component_t) farray.
  forall o2:component_t. forall o3:(int,component_t) farray.
  forall result:(int,component_t) farray.
  forall a_loop_entry1:(int,component_t) farray. forall result1:int.
  forall j1:int. forall result2:(int,component_t) farray.
  forall a1:(int,component_t) farray. forall a2:(int,component_t) farray.
  forall j2:int. forall result3:int. forall j3:int.
  forall result4:(int,component_t) farray.
  forall a3:(int,component_t) farray. (in_range1(first) ->
  (in_range1(last) -> ((({ map__content = result } = { map__content =
  a_loop_entry }) and (a_loop_entry1 = a)) -> ((({ int__content = result1
  } = { int__content = j }) and (j1 = first)) -> (((first <= j1) and
  (j1 <= last)) -> ((((to_rep(o) = 0) and (o1 = (a[j1 <- o]))) and (({
  map__content = result2 } = { map__content = a }) and (a1 = o1))) ->
  ((bool_eq4(a2, 1, 1000, temp___621(a_loop_entry1, first, j2, 0), 1,
  1000) = true) -> ((((((first <= last) -> dynamic_property(first, last,
  j2)) and
  (forall temp___620:int. (((1 <= temp___620) and (temp___620 <= 1000)) ->
  ((j2 <  temp___620) -> ((a2[temp___620]) = (a[temp___620])))))) and
  ((first <= j2) and (j2 <= last))) and ((not (j2 = last)) and
  (((result3 = j2) and (j3 = (j2 + 1))) and (((to_rep(o2) = 0) and
  (o3 = (a2[j3 <- o2]))) and ((result4 = a2) and (a3 = o3)))))) ->
  (bool_eq4(a3, 1, 1000, temp___621(a_loop_entry1, first, j3, 0), 1,
  1000) = true))))))))))
