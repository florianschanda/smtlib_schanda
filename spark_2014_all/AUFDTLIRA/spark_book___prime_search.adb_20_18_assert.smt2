(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 10))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index_type index_type) Bool)
(declare-const dummy2 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___2__projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_195 Int) (temp___is_init_191 Bool) (temp___skip_constant_192 Bool) (temp___do_toplevel_193 Bool) (temp___do_typ_inv_194 Bool)) Bool (=> (or (= temp___is_init_191 true) (<= 1 10)) (in_range3 temp___expr_195)))
(declare-const search_item Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort index_type1 0)
(declare-fun index_typeqtint1 (index_type1) Int)
(assert (forall ((i index_type1)) (and (<= 1 (index_typeqtint1 i)) (<= (index_typeqtint1 i) 10))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index_type1 index_type1) Bool)
(declare-const dummy3 index_type1)
(declare-datatypes () ((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref___projection ((a index_type__ref1)) index_type1 (index_type__content1 a))
(declare-const primes (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun prime_search__primes__aggregate_def (Int Int Int Int Int Int Int Int Int Int) (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_171 Int) (temp___is_init_167 Bool) (temp___skip_constant_168 Bool) (temp___do_toplevel_169 Bool) (temp___do_typ_inv_170 Bool)) Bool (=> (or (= temp___is_init_167 true) (<= 1 10)) (in_range4 temp___expr_171)))
(assert (= primes (prime_search__primes__aggregate_def 2 3 5 7 11 13 17 19 23 29)))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 2))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 3))
(declare-const rliteral2 natural)
(assert (= (naturalqtint rliteral2) 5))
(declare-const rliteral3 natural)
(assert (= (naturalqtint rliteral3) 7))
(declare-const rliteral4 natural)
(assert (= (naturalqtint rliteral4) 11))
(declare-const rliteral5 natural)
(assert (= (naturalqtint rliteral5) 13))
(declare-const rliteral6 natural)
(assert (= (naturalqtint rliteral6) 17))
(declare-const rliteral7 natural)
(assert (= (naturalqtint rliteral7) 19))
(declare-const rliteral8 natural)
(assert (= (naturalqtint rliteral8) 23))
(declare-const rliteral9 natural)
(assert (= (naturalqtint rliteral9) 29))
(assert (forall ((temp___156 Int) (temp___157 Int) (temp___158 Int) (temp___159 Int) (temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int) (temp___164 Int) (temp___165 Int)) (let ((temp___155 (prime_search__primes__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant temp___156 true true true true) (dynamic_invariant temp___157 true true true true)) (dynamic_invariant temp___158 true true true true)) (dynamic_invariant temp___159 true true true true)) (dynamic_invariant temp___160 true true true true)) (dynamic_invariant temp___161 true true true true)) (dynamic_invariant temp___162 true true true true)) (dynamic_invariant temp___163 true true true true)) (dynamic_invariant temp___164 true true true true)) (dynamic_invariant temp___165 true true true true)) (and (and (and (and (and (and (and (and (and (= (select temp___155 1) rliteral) (= (select temp___155 2) rliteral1)) (= (select temp___155 3) rliteral2)) (= (select temp___155 4) rliteral3)) (= (select temp___155 5) rliteral4)) (= (select temp___155 6) rliteral5)) (= (select temp___155 7) rliteral6)) (= (select temp___155 8) rliteral7)) (= (select temp___155 9) rliteral8)) (= (select temp___155 10) rliteral9))))))
(declare-const prime_index Int)
(declare-const position Int)
(assert (in_range1 search_item))
(assert (=> (<= 0 2147483647) (in_range1 prime_index)))
(assert (= (prime_search__primes__aggregate_def 2 3 5 7 11 13 17 19 23 29) primes))
(assert (=> (<= 1 2147483647) (in_range2 position)))
(declare-const i Int)
(assert (<= 1 i))
(assert (<= i 10))
(declare-const j Int)
(assert (<= (+ i 1) j))
(assert (<= j 10))
(assert (not (< (to_rep (select primes i)) (to_rep (select primes j)))))
(check-sat)
(exit)
