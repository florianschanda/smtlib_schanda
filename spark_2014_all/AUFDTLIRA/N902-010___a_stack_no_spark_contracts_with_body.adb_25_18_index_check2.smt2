(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun is_empty (Int) Bool)
(declare-fun is_empty__function_guard (Bool Int) Bool)
(declare-sort stack_pointer 0)
(declare-fun stack_pointerqtint (stack_pointer) Int)
(assert (forall ((i stack_pointer)) (and (<= 0 (stack_pointerqtint i)) (<= (stack_pointerqtint i) 100))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (stack_pointer stack_pointer) Bool)
(declare-const dummy stack_pointer)
(declare-datatypes () ((stack_pointer__ref (mk_stack_pointer__ref (stack_pointer__content stack_pointer)))))
(define-fun stack_pointer__ref___projection ((a stack_pointer__ref)) stack_pointer (stack_pointer__content a))
(define-fun dynamic_invariant ((temp___expr_171 Int) (temp___is_init_167 Bool) (temp___skip_constant_168 Bool) (temp___do_toplevel_169 Bool) (temp___do_typ_inv_170 Bool)) Bool (=> (or (= temp___is_init_167 true) (<= 0 100)) (in_range temp___expr_171)))
(assert true)
(assert (forall ((a_stack_no_spark_contracts_with_body__sp Int)) (! (= (= (is_empty a_stack_no_spark_contracts_with_body__sp) true) (= a_stack_no_spark_contracts_with_body__sp 0)) :pattern ((is_empty a_stack_no_spark_contracts_with_body__sp)))))
(declare-sort item 0)
(declare-fun itemqtint (item) Int)
(assert (forall ((i item)) (and (<= 0 (itemqtint i)) (<= (itemqtint i) 20))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (item item) Bool)
(declare-const dummy1 item)
(declare-datatypes () ((item__ref (mk_item__ref (item__content item)))))
(define-fun item__ref___projection ((a item__ref)) item (item__content a))
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 20)) (in_range1 temp___expr_159)))
(define-fun to_rep ((x item)) Int (itemqtint x))
(declare-fun of_rep (Int) item)
(assert (forall ((x item)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x item)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int item))))))
(declare-fun slide ((Array Int item) Int Int) (Array Int item))
(assert (forall ((a (Array Int item))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int item))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int item)) (a__first Int) (a__last Int) (b (Array Int item)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int item)) (b (Array Int item))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant2 ((temp___expr_178 Int) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool) (temp___do_typ_inv_177 Bool)) Bool (=> (or (= temp___is_init_174 true) (<= 1 100)) (in_range2 temp___expr_178)))
(declare-const it Int)
(declare-const sp Int)
(assert (in_range sp))
(assert (=> (<= 0 20) (in_range1 it)))
(assert (not (= (is_empty sp) true)))
(assert (not (<= 1 sp)))
(check-sat)
(exit)
