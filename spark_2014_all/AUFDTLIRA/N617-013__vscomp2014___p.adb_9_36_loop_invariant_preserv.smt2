(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun to_rep ((x index)) Int (indexqtint x))
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int index))))))
(declare-fun slide ((Array Int index) Int Int) (Array Int index))
(assert (forall ((a (Array Int index))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int index))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int index)) (a__first Int) (a__last Int) (b (Array Int index)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const saved (Array Int index))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 10)) (in_range1 temp___expr_159)))
(declare-const f (Array Int index))
(declare-const j Int)
(declare-const i Int)
(declare-const temp___180 Int)
(declare-const temp___178 (Array Int index))
(declare-const temp___181 (Array Int index))
(declare-const o index)
(declare-const o1 (Array Int index))
(declare-const o2 index)
(declare-const o3 (Array Int index))
(declare-const o4 index)
(declare-const o5 (Array Int index))
(declare-const f1 (Array Int index))
(declare-const result Int)
(declare-const j1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 (Array Int index))
(declare-const f2 (Array Int index))
(declare-const f3 (Array Int index))
(declare-const i2 Int)
(declare-const f4 (Array Int index))
(declare-const i3 Int)
(declare-const f5 (Array Int index))
(declare-const i4 Int)
(declare-const f6 (Array Int index))
(declare-const i5 Int)
(declare-const f7 (Array Int index))
(declare-const i6 Int)
(declare-const result3 Int)
(declare-const j2 Int)
(declare-const result4 Int)
(declare-const i7 Int)
(declare-const result5 (Array Int index))
(declare-const f8 (Array Int index))
(declare-const f9 (Array Int index))
(declare-const i8 Int)
(declare-const result6 Int)
(declare-const i9 Int)
(declare-const result7 (Array Int index))
(declare-const f10 (Array Int index))
(declare-const f11 (Array Int index))
(declare-const i10 Int)
(declare-const f12 (Array Int index))
(declare-const i11 Int)
(define-fun i12 () int__ref (mk_int__ref i5))
(define-fun f13 () map__ref (mk_map__ref f6))
(define-fun f14 () map__ref (mk_map__ref f))
(assert (= f saved))
(assert (= result j))
(assert (= j1 1))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___180 i1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___178 f)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___181 f)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (to_rep o) j1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= o1 (store f i1 o))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (mk_map__ref result2) f14)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= f2 o1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (bool_eq temp___181 1 10 saved 1 10) true)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (and (and (forall ((temp___179 Int)) (=> (and (<= 1 temp___179) (<= temp___179 10)) (=> (or (< 10 temp___179) (or (< temp___179 1) (< i2 temp___179))) (= (select f3 temp___179) (select temp___178 temp___179))))) (=> (<= 1 10) (in_range1 i2))) (and (<= 1 i2) (<= i2 10)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 10)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= f3 f4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= f5 f3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i12 (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= f13 (mk_map__ref f4))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= f7 f5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= f13 f14)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= f7 f1)))
(assert (= result3 j1))
(assert (= j2 2))
(assert (= (mk_int__ref result4) i12))
(assert (= i7 1))
(assert (<= 1 i7))
(assert (<= i7 10))
(assert (= (to_rep o2) j2))
(assert (= o3 (store f6 i7 o2)))
(assert (= (mk_map__ref result5) f13))
(assert (= f8 o3))
(assert (= (bool_eq f6 1 10 saved 1 10) true))
(assert (and (and (forall ((temp___179 Int)) (=> (and (<= 1 temp___179) (<= temp___179 10)) (=> (or (< 10 temp___179) (or (< temp___179 1) (< i8 temp___179))) (= (select f9 temp___179) (select f6 temp___179))))) (=> (<= 1 10) (in_range1 i8))) (and (<= 1 i8) (<= i8 10))))
(assert (not (= i8 10)))
(assert (= result6 i8))
(assert (= i9 (+ i8 1)))
(assert (= (to_rep o4) j2))
(assert (= o5 (store f9 i9 o4)))
(assert (= result7 f9))
(assert (= f10 o5))
(assert (= i10 i9))
(assert (= f11 f10))
(assert (= i11 i9))
(assert (= f12 f10))
(assert (not (= (bool_eq f6 1 10 saved 1 10) true)))
(check-sat)
(exit)
