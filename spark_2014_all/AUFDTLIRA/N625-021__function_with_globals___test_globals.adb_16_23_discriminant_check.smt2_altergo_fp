(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,natural) farray

logic dummy3 : t

type my_array__ref = { my_array__content : us_t
}

function my_array__ref___projection(a: my_array__ref) : us_t =
  (a).my_array__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type tmy_array_dynP1__ref = { tmy_array_dynP1__content : integer
}

function tmy_array_dynP1__ref___projection(a: tmy_array_dynP1__ref) : integer =
  (a).tmy_array_dynP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,natural) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,natural) farray

logic dummy6 : t1

type my_array_dyn__ref = { my_array_dyn__content : us_t1
}

function my_array_dyn__ref___projection(a: my_array_dyn__ref) : us_t1 =
  (a).my_array_dyn__content

type us_split_discrs = { rec__test_globals__my_rec__d : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__test_globals__my_rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test_globals__my_rec__f : natural
}

function us_split_fields_F__projection(a: us_split_fields) : natural =
  (a).rec__test_globals__my_rec__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d) = to_rep(((b).us_split_discrs1).rec__test_globals__my_rec__d)) and
  (to_rep(((a).us_split_fields1).rec__test_globals__my_rec__f) = to_rep(((b).us_split_fields1).rec__test_globals__my_rec__f))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d) = to_rep(((b).us_split_discrs1).rec__test_globals__my_rec__d)) and
  (to_rep(((a).us_split_fields1).rec__test_globals__my_rec__f) = to_rep(((b).us_split_fields1).rec__test_globals__my_rec__f)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:natural. (0 <= object__size2({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment2({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

logic test_globals__my_rec__d__first__bit : int

logic test_globals__my_rec__d__last__bit : int

logic test_globals__my_rec__d__position : int

axiom test_globals__my_rec__d__first__bit_axiom :
  (0 <= test_globals__my_rec__d__first__bit)

axiom test_globals__my_rec__d__last__bit_axiom :
  (test_globals__my_rec__d__first__bit <  test_globals__my_rec__d__last__bit)

axiom test_globals__my_rec__d__position_axiom :
  (0 <= test_globals__my_rec__d__position)

logic test_globals__my_rec__f__first__bit : int

logic test_globals__my_rec__f__last__bit : int

logic test_globals__my_rec__f__position : int

axiom test_globals__my_rec__f__first__bit_axiom :
  (0 <= test_globals__my_rec__f__first__bit)

axiom test_globals__my_rec__f__last__bit_axiom :
  (test_globals__my_rec__f__first__bit <  test_globals__my_rec__f__last__bit)

axiom test_globals__my_rec__f__position_axiom :
  (0 <= test_globals__my_rec__f__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy7 : natural

logic dummy8 : natural

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

predicate in_range3(rec__test_globals__my_rec__d1: int, a: us_rep) =
  (rec__test_globals__my_rec__d1 = to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:natural. (0 <= object__size3({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment3({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

logic test_globals__my_rec__d__first__bit1 : int

logic test_globals__my_rec__d__last__bit1 : int

logic test_globals__my_rec__d__position1 : int

axiom test_globals__my_rec__d__first__bit_axiom1 :
  (0 <= test_globals__my_rec__d__first__bit1)

axiom test_globals__my_rec__d__last__bit_axiom1 :
  (test_globals__my_rec__d__first__bit1 <  test_globals__my_rec__d__last__bit1)

axiom test_globals__my_rec__d__position_axiom1 :
  (0 <= test_globals__my_rec__d__position1)

logic test_globals__my_rec__f__first__bit1 : int

logic test_globals__my_rec__f__last__bit1 : int

logic test_globals__my_rec__f__position1 : int

axiom test_globals__my_rec__f__first__bit_axiom1 :
  (0 <= test_globals__my_rec__f__first__bit1)

axiom test_globals__my_rec__f__last__bit_axiom1 :
  (test_globals__my_rec__f__first__bit1 <  test_globals__my_rec__f__last__bit1)

axiom test_globals__my_rec__f__position_axiom1 :
  (0 <= test_globals__my_rec__f__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy9 : natural

logic dummy10 : natural

type my_rec_stat__ref = { my_rec_stat__content : us_rep
}

function my_rec_stat__ref___projection(a: my_rec_stat__ref) : us_rep =
  (a).my_rec_stat__content

predicate in_range4(rec__test_globals__my_rec__d1: int, a: us_rep) =
  (rec__test_globals__my_rec__d1 = to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:natural. (0 <= object__size4({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment4({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

logic test_globals__my_rec__d__first__bit2 : int

logic test_globals__my_rec__d__last__bit2 : int

logic test_globals__my_rec__d__position2 : int

axiom test_globals__my_rec__d__first__bit_axiom2 :
  (0 <= test_globals__my_rec__d__first__bit2)

axiom test_globals__my_rec__d__last__bit_axiom2 :
  (test_globals__my_rec__d__first__bit2 <  test_globals__my_rec__d__last__bit2)

axiom test_globals__my_rec__d__position_axiom2 :
  (0 <= test_globals__my_rec__d__position2)

logic test_globals__my_rec__f__first__bit2 : int

logic test_globals__my_rec__f__last__bit2 : int

logic test_globals__my_rec__f__position2 : int

axiom test_globals__my_rec__f__first__bit_axiom2 :
  (0 <= test_globals__my_rec__f__first__bit2)

axiom test_globals__my_rec__f__last__bit_axiom2 :
  (test_globals__my_rec__f__first__bit2 <  test_globals__my_rec__f__last__bit2)

axiom test_globals__my_rec__f__position_axiom2 :
  (0 <= test_globals__my_rec__f__position2)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy11 : natural

logic dummy12 : natural

type my_rec_dyn__ref = { my_rec_dyn__content : us_rep
}

function my_rec_dyn__ref___projection(a: my_rec_dyn__ref) : us_rep =
  (a).my_rec_dyn__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy13 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,natural) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,natural) farray = (a).elts2

function of_array2(a: (int,natural) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,natural) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,natural) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,natural) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,natural) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,natural) farray. (0 <= object__alignment5(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq9 : us_t2, us_t2 -> bool

logic dummy14 : (int,natural) farray

logic dummy15 : t2

type t4b__ref = { t4b__content : us_t2
}

function t4b__ref___projection(a: t4b__ref) : us_t2 = (a).t4b__content

logic au__first : integer

logic au__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy16 : integer

type t7b__ref = { t7b__content : integer
}

function t7b__ref___projection(a: t7b__ref) : integer = (a).t7b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,natural) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,natural) farray = (a).elts3

function of_array3(a: (int,natural) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,natural) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,natural) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,natural) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__alignment6(a)))

function bool_eq12(x: us_t3, y: us_t3) : bool = bool_eq4((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq11 : us_t3, us_t3 -> bool

logic dummy17 : (int,natural) farray

logic dummy18 : t3

type t8b__ref = { t8b__content : us_t3
}

function t8b__ref___projection(a: t8b__ref) : us_t3 = (a).t8b__content

logic ad__first : integer

logic ad__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range5(rec__test_globals__my_rec__d1: int, a: us_rep) =
  (rec__test_globals__my_rec__d1 = to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d))

logic value__size7 : int

logic object__size7 : us_rep -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:natural. forall a1:natural. (0 <= object__size7({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment7({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

logic test_globals__my_rec__d__first__bit3 : int

logic test_globals__my_rec__d__last__bit3 : int

logic test_globals__my_rec__d__position3 : int

axiom test_globals__my_rec__d__first__bit_axiom3 :
  (0 <= test_globals__my_rec__d__first__bit3)

axiom test_globals__my_rec__d__last__bit_axiom3 :
  (test_globals__my_rec__d__first__bit3 <  test_globals__my_rec__d__last__bit3)

axiom test_globals__my_rec__d__position_axiom3 :
  (0 <= test_globals__my_rec__d__position3)

logic test_globals__my_rec__f__first__bit3 : int

logic test_globals__my_rec__f__last__bit3 : int

logic test_globals__my_rec__f__position3 : int

axiom test_globals__my_rec__f__first__bit_axiom3 :
  (0 <= test_globals__my_rec__f__first__bit3)

axiom test_globals__my_rec__f__last__bit_axiom3 :
  (test_globals__my_rec__f__first__bit3 <  test_globals__my_rec__f__last__bit3)

axiom test_globals__my_rec__f__position_axiom3 :
  (0 <= test_globals__my_rec__f__position3)

logic user_eq12 : us_rep, us_rep -> bool

logic dummy19 : natural

logic dummy20 : natural

type t9b__ref = { t9b__content : us_rep
}

function t9b__ref___projection(a: t9b__ref) : us_rep = (a).t9b__content

logic ru__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range6(rec__test_globals__my_rec__d1: int, a: us_rep) =
  (rec__test_globals__my_rec__d1 = to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d))

logic value__size8 : int

logic object__size8 : us_rep -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:natural. forall a1:natural. (0 <= object__size8({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment8({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

logic test_globals__my_rec__d__first__bit4 : int

logic test_globals__my_rec__d__last__bit4 : int

logic test_globals__my_rec__d__position4 : int

axiom test_globals__my_rec__d__first__bit_axiom4 :
  (0 <= test_globals__my_rec__d__first__bit4)

axiom test_globals__my_rec__d__last__bit_axiom4 :
  (test_globals__my_rec__d__first__bit4 <  test_globals__my_rec__d__last__bit4)

axiom test_globals__my_rec__d__position_axiom4 :
  (0 <= test_globals__my_rec__d__position4)

logic test_globals__my_rec__f__first__bit4 : int

logic test_globals__my_rec__f__last__bit4 : int

logic test_globals__my_rec__f__position4 : int

axiom test_globals__my_rec__f__first__bit_axiom4 :
  (0 <= test_globals__my_rec__f__first__bit4)

axiom test_globals__my_rec__f__last__bit_axiom4 :
  (test_globals__my_rec__f__first__bit4 <  test_globals__my_rec__f__last__bit4)

axiom test_globals__my_rec__f__position_axiom4 :
  (0 <= test_globals__my_rec__f__position4)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy21 : natural

logic dummy22 : natural

type t10b__ref = { t10b__content : us_rep
}

function t10b__ref___projection(a: t10b__ref) : us_rep = (a).t10b__content

logic rs__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range7(rec__test_globals__my_rec__d1: int, a: us_rep) =
  (rec__test_globals__my_rec__d1 = to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d))

logic value__size9 : int

logic object__size9 : us_rep -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:natural. forall a1:natural. (0 <= object__size9({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment9({
  us_split_discrs1 = { rec__test_globals__my_rec__d = a }; us_split_fields1 =
  { rec__test_globals__my_rec__f = a1 } })))

logic test_globals__my_rec__d__first__bit5 : int

logic test_globals__my_rec__d__last__bit5 : int

logic test_globals__my_rec__d__position5 : int

axiom test_globals__my_rec__d__first__bit_axiom5 :
  (0 <= test_globals__my_rec__d__first__bit5)

axiom test_globals__my_rec__d__last__bit_axiom5 :
  (test_globals__my_rec__d__first__bit5 <  test_globals__my_rec__d__last__bit5)

axiom test_globals__my_rec__d__position_axiom5 :
  (0 <= test_globals__my_rec__d__position5)

logic test_globals__my_rec__f__first__bit5 : int

logic test_globals__my_rec__f__last__bit5 : int

logic test_globals__my_rec__f__position5 : int

axiom test_globals__my_rec__f__first__bit_axiom5 :
  (0 <= test_globals__my_rec__f__first__bit5)

axiom test_globals__my_rec__f__last__bit_axiom5 :
  (test_globals__my_rec__f__first__bit5 <  test_globals__my_rec__f__last__bit5)

axiom test_globals__my_rec__f__position_axiom5 :
  (0 <= test_globals__my_rec__f__position5)

logic user_eq14 : us_rep, us_rep -> bool

logic dummy23 : natural

logic dummy24 : natural

type t11b__ref = { t11b__content : us_rep
}

function t11b__ref___projection(a: t11b__ref) : us_rep = (a).t11b__content

logic rd__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS6 : int

logic nested_with_globals : (int,natural) farray, (int,natural) farray,
  (int,natural) farray, us_split_fields, us_split_fields,
  us_split_fields -> bool

logic nested_with_globals__function_guard : bool, (int,natural) farray,
  (int,natural) farray, (int,natural) farray, us_split_fields,
  us_split_fields, us_split_fields -> prop

axiom nested_with_globals__post_axiom : true

axiom nested_with_globals__def_axiom :
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__ru__fields:natural.
  (forall test_globals__rs__fields:natural.
  (forall test_globals__rd__fields:natural
  [nested_with_globals(test_globals__au, test_globals__as, test_globals__ad,
  { rec__test_globals__my_rec__f = test_globals__ru__fields }, {
  rec__test_globals__my_rec__f = test_globals__rs__fields }, {
  rec__test_globals__my_rec__f = test_globals__rd__fields })].
  (((nested_with_globals(test_globals__au, test_globals__as,
  test_globals__ad, { rec__test_globals__my_rec__f = test_globals__ru__fields
  }, { rec__test_globals__my_rec__f = test_globals__rs__fields }, {
  rec__test_globals__my_rec__f = test_globals__rd__fields }) = true) ->
  (((0 <  c) -> (((to_rep((test_globals__au[1])) = 0) and
  (to_rep((test_globals__as[1])) = 0)) and
  (to_rep((test_globals__ad[1])) = 0))) and ((not (0 <  c)) ->
  (((to_rep(test_globals__ru__fields) = 0) and
  (to_rep(test_globals__rs__fields) = 0)) and
  (to_rep(test_globals__rd__fields) = 0))))) and ((((0 <  c) and
  (((to_rep((test_globals__au[1])) = 0) and
  (to_rep((test_globals__as[1])) = 0)) and
  (to_rep((test_globals__ad[1])) = 0))) or ((not (0 <  c)) and
  (((to_rep(test_globals__ru__fields) = 0) and
  (to_rep(test_globals__rs__fields) = 0)) and
  (to_rep(test_globals__rd__fields) = 0)))) ->
  (nested_with_globals(test_globals__au, test_globals__as, test_globals__ad,
  { rec__test_globals__my_rec__f = test_globals__ru__fields }, {
  rec__test_globals__my_rec__f = test_globals__rs__fields }, {
  rec__test_globals__my_rec__f = test_globals__rd__fields }) = true)))))))

logic test_globals__au__aggregate_def : int, int, int -> us_t2

logic test_globals__as__aggregate_def : int -> (int,natural) farray

logic test_globals__ad__aggregate_def : int, int, int -> us_t3

axiom def_axiom :
  (forall temp___223:int. forall temp___224:int. forall temp___225:int.
  (in_range1(temp___223) -> ((dynamic_property(0, 2147483647, temp___224,
  temp___225) ->
  ((to_rep1(first4((test_globals__au__aggregate_def(temp___223, temp___224,
  temp___225)).rt2)) = temp___224) and
  (to_rep1(last4((test_globals__au__aggregate_def(temp___223, temp___224,
  temp___225)).rt2)) = temp___225))) and
  (forall temp___226:int.
  (to_rep(((test_globals__au__aggregate_def(temp___223, temp___224,
  temp___225)).elts2[temp___226])) = temp___223)))))

axiom def_axiom1 :
  (forall temp___231:int. (in_range1(temp___231) ->
  (forall temp___232:int.
  (to_rep((test_globals__as__aggregate_def(temp___231)[temp___232])) = temp___231))))

axiom def_axiom2 :
  (forall temp___234:int. forall temp___235:int. forall temp___236:int.
  (in_range1(temp___234) -> ((dynamic_property(0, 2147483647, temp___235,
  temp___236) ->
  ((to_rep1(first6((test_globals__ad__aggregate_def(temp___234, temp___235,
  temp___236)).rt3)) = temp___235) and
  (to_rep1(last6((test_globals__ad__aggregate_def(temp___234, temp___235,
  temp___236)).rt3)) = temp___236))) and
  (forall temp___237:int.
  (to_rep(((test_globals__ad__aggregate_def(temp___234, temp___235,
  temp___236)).elts3[temp___237])) = temp___234)))))

 (* File "test_globals.adb", line 13, characters 0-0 *)
goal WP_parameter_def :
  (forall au:(int,natural) farray. forall as__:(int,natural) farray.
  forall ad:(int,natural) farray. forall ru__split_fields:natural.
  forall rs__split_fields:natural. forall us:int. forall us1:int.
  forall temp___228:(int,natural) farray. forall temp___2281:t2.
  forall test_globals__au__assume:(int,natural) farray.
  forall test_globals__au__assume1:t. forall temp___239:(int,natural) farray.
  forall temp___2391:t3.
  forall test_globals__ad__assume:(int,natural) farray.
  forall test_globals__ad__assume1:t1. forall o:natural. forall o1:natural.
  forall o2:natural. forall o3:natural.
  forall test_globals__ru__assume:natural.
  forall test_globals__ru__assume1:natural. forall o4:natural.
  forall o5:natural. forall o6:natural. forall o7:natural. forall o8:natural.
  forall o9:natural. forall o10:natural. forall o11:natural.
  forall o12:natural. forall o13:natural.
  forall test_globals__rs__assume:natural.
  forall test_globals__rs__assume1:natural. forall o14:natural.
  forall o15:natural. forall o16:natural. forall o17:natural.
  forall o18:natural. forall o19:natural. forall o20:natural.
  forall o21:natural. forall result:map__ref.
  forall au1:(int,natural) farray. forall result1:map__ref.
  forall as__1:(int,natural) farray. forall result2:map__ref.
  forall ad1:(int,natural) farray. forall result3:us_split_fields__ref.
  forall ru__split_fields1:us_split_fields.
  forall result4:us_split_fields__ref.
  forall rs__split_fields1:us_split_fields. (in_range1(c) -> (((us = 100) and
  in_range1(100)) -> (((us1 = c) and in_range1(c)) ->
  (((((to_rep1(first4((test_globals__au__aggregate_def(0, 1,
  c)).rt2)) = 1) and ((to_rep1(last4((test_globals__au__aggregate_def(0, 1,
  c)).rt2)) = c) and ({ elts2 = temp___228; rt2 = temp___2281
  } = test_globals__au__aggregate_def(0, 1, c)))) and
  ((temp___228 = test_globals__au__assume) and
  (mk(to_rep1(first4(temp___2281)),
  to_rep1(last4(temp___2281))) = test_globals__au__assume1))) and
  (((result = { map__content = au }) and
  (au1 = test_globals__au__assume)) and
  ((to_rep1(au__first) = to_rep1(first(test_globals__au__assume1))) and
  (to_rep1(au__last) = to_rep1(last(test_globals__au__assume1)))))) ->
  (dynamic_property(0, 2147483647, to_rep1(au__first), to_rep1(au__last)) ->
  (((result1 = { map__content = as__ }) and
  (as__1 = test_globals__as__aggregate_def(0))) ->
  (((((to_rep1(first6((test_globals__ad__aggregate_def(0, 1,
  c)).rt3)) = 1) and ((to_rep1(last6((test_globals__ad__aggregate_def(0, 1,
  c)).rt3)) = c) and ({ elts3 = temp___239; rt3 = temp___2391
  } = test_globals__ad__aggregate_def(0, 1, c)))) and
  ((((to_rep1(first6(temp___2391)) <= to_rep1(last6(temp___2391))) and
  (((1 <= c) and
  (((to_rep1(last6(temp___2391)) - to_rep1(first6(temp___2391))) + 1) = ((c - 1) + 1))) or
  ((not (1 <= c)) and
  (((to_rep1(last6(temp___2391)) - to_rep1(first6(temp___2391))) + 1) = 0)))) or
  ((not (to_rep1(first6(temp___2391)) <= to_rep1(last6(temp___2391)))) and
  (((1 <= c) and (0 = ((c - 1) + 1))) or (not (1 <= c))))) and
  ((temp___239 = test_globals__ad__assume) and
  (mk1(to_rep1(first6(temp___2391)),
  to_rep1(last6(temp___2391))) = test_globals__ad__assume1)))) and
  (((result2 = { map__content = ad }) and
  (ad1 = test_globals__ad__assume)) and
  ((to_rep1(ad__first) = to_rep1(first2(test_globals__ad__assume1))) and
  (to_rep1(ad__last) = to_rep1(last2(test_globals__ad__assume1)))))) ->
  ((dynamic_property2(1, c, to_rep1(ad__first), to_rep1(ad__last)) and
  ((to_rep1(ad__first) = 1) and (to_rep1(ad__last) = c))) ->
  (((((to_rep(o1) = 0) and (o1 = o2)) and (((to_rep(o) = c) and (o = o3)) and
  ((test_globals__ru__assume = o3) and
  (test_globals__ru__assume1 = o2)))) and (((result3 = {
  us_split_fields__content = { rec__test_globals__my_rec__f =
  ru__split_fields } }) and (ru__split_fields1 = {
  rec__test_globals__my_rec__f = test_globals__ru__assume1 })) and
  (ru__split_discrs = test_globals__ru__assume))) ->
  ((((((((to_rep(o5) = 0) and (o5 = o6)) and (((to_rep(o4) = 100) and
  (o4 = o7)) and ((o8 = o7) and (o9 = o6)))) and ({ us_split_discrs1 = {
  rec__test_globals__my_rec__d = o10 }; us_split_fields1 = {
  rec__test_globals__my_rec__f = o11 } } = { us_split_discrs1 = {
  rec__test_globals__my_rec__d = o8 }; us_split_fields1 = {
  rec__test_globals__my_rec__f = o9 } })) and ({ us_split_discrs1 = {
  rec__test_globals__my_rec__d = o12 }; us_split_fields1 = {
  rec__test_globals__my_rec__f = o13 } } = { us_split_discrs1 = {
  rec__test_globals__my_rec__d = o10 }; us_split_fields1 = {
  rec__test_globals__my_rec__f = o11 } })) and ({ us_split_discrs1 = {
  rec__test_globals__my_rec__d = test_globals__rs__assume };
  us_split_fields1 = { rec__test_globals__my_rec__f =
  test_globals__rs__assume1 } } = { us_split_discrs1 = {
  rec__test_globals__my_rec__d = o12 }; us_split_fields1 = {
  rec__test_globals__my_rec__f = o13 } })) and (((result4 = {
  us_split_fields__content = { rec__test_globals__my_rec__f =
  rs__split_fields } }) and (rs__split_fields1 = {
  rec__test_globals__my_rec__f = test_globals__rs__assume1 })) and
  (rs__split_discrs = test_globals__rs__assume))) ->
  ((100 = to_rep(rs__split_discrs)) -> (((((to_rep(o15) = 0) and
  (o15 = o16)) and (((to_rep(o14) = c) and (o14 = o17)) and ((o18 = o17) and
  (o19 = o16)))) and ({ us_split_discrs1 = { rec__test_globals__my_rec__d =
  o20 }; us_split_fields1 = { rec__test_globals__my_rec__f = o21 } } = {
  us_split_discrs1 = { rec__test_globals__my_rec__d = o18 };
  us_split_fields1 = { rec__test_globals__my_rec__f = o19 } })) ->
  (c = to_rep(o20)))))))))))))))
