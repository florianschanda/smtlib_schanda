(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort value 0)
(declare-fun valueqtint (value) Int)
(assert (forall ((i value)) (and (<= (- 2147483648) (valueqtint i)) (<= (valueqtint i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (value value) Bool)
(declare-const dummy5 value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun to_rep3 ((x value)) Int (valueqtint x))
(declare-fun of_rep3 (Int) value)
(assert (forall ((x value)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x value)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int value))))))
(declare-fun slide1 ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep3 (select a temp___idx_154)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep3 (select a temp___idx_154)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___projection ((a t3s__ref)) integer (t3s__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int value)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int value) (elts1 a))
(define-fun of_array1 ((a (Array Int value)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int value)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int value)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int value)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int value))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq7 (us_t1 us_t1) Bool)
(declare-const dummy7 us_t1)
(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t1)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t1 (t4s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__simple_unc_arrays__table__last natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__simple_unc_arrays__table__last a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__simple_unc_arrays__table__v us_t1)))))
(define-fun us_split_fields_V__projection ((a us_split_fields)) us_t1 (rec__simple_unc_arrays__table__v a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq4 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 b)))) (= (bool_eq3 (rec__simple_unc_arrays__table__v (us_split_fields1 a)) (rec__simple_unc_arrays__table__v (us_split_fields1 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const simple_unc_arrays__table__last__first__bit Int)
(declare-const simple_unc_arrays__table__last__last__bit Int)
(declare-const simple_unc_arrays__table__last__position Int)
(assert (<= 0 simple_unc_arrays__table__last__first__bit))
(assert (< simple_unc_arrays__table__last__first__bit simple_unc_arrays__table__last__last__bit))
(assert (<= 0 simple_unc_arrays__table__last__position))
(declare-const simple_unc_arrays__table__v__first__bit Int)
(declare-const simple_unc_arrays__table__v__last__bit Int)
(declare-const simple_unc_arrays__table__v__position Int)
(assert (<= 0 simple_unc_arrays__table__v__first__bit))
(assert (< simple_unc_arrays__table__v__first__bit simple_unc_arrays__table__v__last__bit))
(assert (<= 0 simple_unc_arrays__table__v__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((table__ref (mk_table__ref (table__content us_rep)))))
(define-fun table__ref___projection ((a table__ref)) us_rep (table__content a))
(declare-fun same_range (us_rep us_rep) Bool)
(declare-fun same_range__function_guard (Bool us_rep us_rep) Bool)
(declare-fun add (us_rep us_rep) us_rep)
(declare-fun add__function_guard (us_rep us_rep us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_175 us_rep) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (let ((temp___176 (rec__simple_unc_arrays__table__last (us_split_discrs1 temp___expr_175)))) (and (dynamic_property2 1 (to_rep2 temp___176) (first3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_175))) (last3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_175)))) (and (= (first3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_175))) 1) (= (last3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_175))) (to_rep2 temp___176))))))
(assert (forall ((a us_rep) (b us_rep)) (! (=> (and (and (dynamic_invariant a true true true true) (dynamic_invariant b true true true true)) (= (same_range a b) true)) (let ((result (add a b))) (and (and (= (same_range result a) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))))) (= (to_rep3 (let ((temp___195 (rec__simple_unc_arrays__table__v (us_split_fields1 result)))) (select (to_array1 temp___195) j))) (+ (to_rep3 (let ((temp___196 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___196) j))) (to_rep3 (let ((temp___197 (rec__simple_unc_arrays__table__v (us_split_fields1 b)))) (select (to_array1 temp___197) j)))))))) (dynamic_invariant result true false true true)))) :pattern ((add a b)))))
(declare-fun empty (us_rep) Bool)
(declare-fun empty__function_guard (Bool us_rep) Bool)
(declare-fun min (us_rep) Int)
(declare-fun min__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_162 Int) (temp___is_init_158 Bool) (temp___skip_constant_159 Bool) (temp___do_toplevel_160 Bool) (temp___do_typ_inv_161 Bool)) Bool (=> (or (= temp___is_init_158 true) (<= (- 2147483648) 2147483647)) (in_range5 temp___expr_162)))
(assert (forall ((a us_rep)) (! (=> (and (dynamic_invariant a true true true true) (not (= (empty a) true))) (let ((result (min a))) (and (and (forall ((j Int)) (=> (and (<= 1 j) (<= j (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))))) (<= result (to_rep3 (let ((temp___219 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___219) j)))))) (exists ((j Int)) (and (and (<= 1 j) (<= j (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))))) (= result (to_rep3 (let ((temp___218 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___218) j))))))) (dynamic_invariant1 result true false true true)))) :pattern ((min a)))))
(declare-fun max (us_rep) Int)
(declare-fun max__function_guard (Int us_rep) Bool)
(assert (forall ((a us_rep)) (! (=> (and (dynamic_invariant a true true true true) (not (= (empty a) true))) (let ((result (max a))) (and (and (forall ((j Int)) (=> (and (<= 1 j) (<= j (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))))) (<= (to_rep3 (let ((temp___227 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___227) j))) result))) (exists ((j Int)) (and (and (<= 1 j) (<= j (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))))) (= result (to_rep3 (let ((temp___226 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___226) j))))))) (dynamic_invariant1 result true false true true)))) :pattern ((max a)))))
(declare-fun average (us_rep) Int)
(declare-fun average__function_guard (Int us_rep) Bool)
(assert (forall ((a us_rep)) (! (=> (and (dynamic_invariant a true true true true) (not (= (empty a) true))) (let ((result (average a))) (and (and (<= (min a) result) (<= result (max a))) (dynamic_invariant1 result true false true true)))) :pattern ((average a)))))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(declare-fun not_in (us_rep Int Int Int) Bool)
(declare-fun not_in__function_guard (Bool us_rep Int Int Int) Bool)
(declare-fun search (us_rep Int) Int)
(declare-fun search__function_guard (Int us_rep Int) Bool)
(assert (forall ((a us_rep)) (forall ((v Int)) (! (=> (and (dynamic_invariant a true true true true) (dynamic_invariant1 v true true true true)) (let ((result (search a v))) (and (or (and (= result 0) (= (not_in a v 1 (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))) true)) (and (= (to_rep3 (let ((temp___243 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___243) result))) v) (= (not_in a v 1 (- result 1)) true))) (dynamic_invariant2 result true false true true)))) :pattern ((search a v))))))
(declare-fun bubble_sort (us_rep) us_rep)
(declare-fun bubble_sort__function_guard (us_rep us_rep) Bool)
(declare-sort tT2bP1 0)
(declare-fun tT2bP1qtint (tT2bP1) Int)
(assert (forall ((i tT2bP1)) (and (<= 1 (tT2bP1qtint i)) (<= (tT2bP1qtint i) 10))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (tT2bP1 tT2bP1) Bool)
(declare-const dummy9 tT2bP1)
(declare-datatypes () ((tT2bP1__ref (mk_tT2bP1__ref (tT2bP1__content tT2bP1)))))
(define-fun tT2bP1__ref___projection ((a tT2bP1__ref)) tT2bP1 (tT2bP1__content a))
(declare-const dummy10 (Array Int value))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int value)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int value)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int value)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int value))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq10 ((Array Int value) (Array Int value)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__simple_unc_arrays__table__v1 (Array Int value))))))
(define-fun us_split_fields_V__2__projection ((a us_split_fields2)) (Array Int value) (rec__simple_unc_arrays__table__v1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (of_array1 (rec__simple_unc_arrays__table__v1 (us_split_fields3 a)) 1 10))))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (let ((temp___155 (rec__simple_unc_arrays__table__v (us_split_fields1 r)))) (to_array1 temp___155)))))
(define-fun bool_eq5 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs2 a))) (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs2 b)))) (= (bool_eq2 (rec__simple_unc_arrays__table__v1 (us_split_fields3 a)) 1 10 (rec__simple_unc_arrays__table__v1 (us_split_fields3 b)) 1 10) true)) true false))
(define-fun in_range7 ((rec__simple_unc_arrays__table__last1 Int) (a us_rep)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const simple_unc_arrays__table__last__first__bit1 Int)
(declare-const simple_unc_arrays__table__last__last__bit1 Int)
(declare-const simple_unc_arrays__table__last__position1 Int)
(assert (<= 0 simple_unc_arrays__table__last__first__bit1))
(assert (< simple_unc_arrays__table__last__first__bit1 simple_unc_arrays__table__last__last__bit1))
(assert (<= 0 simple_unc_arrays__table__last__position1))
(declare-const simple_unc_arrays__table__v__first__bit1 Int)
(declare-const simple_unc_arrays__table__v__last__bit1 Int)
(declare-const simple_unc_arrays__table__v__position1 Int)
(assert (<= 0 simple_unc_arrays__table__v__first__bit1))
(assert (< simple_unc_arrays__table__v__first__bit1 simple_unc_arrays__table__v__last__bit1))
(assert (<= 0 simple_unc_arrays__table__v__position1))
(declare-fun user_eq11 (us_rep1 us_rep1) Bool)
(declare-const dummy11 us_rep1)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep1)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep1 (t1b__content a))
(declare-const t1__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort tT6bP1 0)
(declare-fun tT6bP1qtint (tT6bP1) Int)
(assert (forall ((i tT6bP1)) (and (<= 1 (tT6bP1qtint i)) (<= (tT6bP1qtint i) 10))))
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (tT6bP1 tT6bP1) Bool)
(declare-const dummy12 tT6bP1)
(declare-datatypes () ((tT6bP1__ref (mk_tT6bP1__ref (tT6bP1__content tT6bP1)))))
(define-fun tT6bP1__ref___projection ((a tT6bP1__ref)) tT6bP1 (tT6bP1__content a))
(declare-const dummy13 (Array Int value))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array Int value)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int value)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array Int value)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array Int value))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment5 a))))
(declare-fun user_eq13 ((Array Int value) (Array Int value)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__simple_unc_arrays__table__v2 (Array Int value))))))
(define-fun us_split_fields_V__3__projection ((a us_split_fields4)) (Array Int value) (rec__simple_unc_arrays__table__v2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs3 us_split_discrs) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_discrs (us_split_discrs3 a))
(define-fun us_rep___6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a) (mk___split_fields (of_array1 (rec__simple_unc_arrays__table__v2 (us_split_fields5 a)) 1 10))))
(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r) (mk___split_fields2 (let ((temp___156 (rec__simple_unc_arrays__table__v (us_split_fields1 r)))) (to_array1 temp___156)))))
(define-fun bool_eq6 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs3 a))) (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs3 b)))) (= (bool_eq2 (rec__simple_unc_arrays__table__v2 (us_split_fields5 a)) 1 10 (rec__simple_unc_arrays__table__v2 (us_split_fields5 b)) 1 10) true)) true false))
(define-fun in_range9 ((rec__simple_unc_arrays__table__last1 Int) (a us_rep)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))
(declare-const simple_unc_arrays__table__last__first__bit2 Int)
(declare-const simple_unc_arrays__table__last__last__bit2 Int)
(declare-const simple_unc_arrays__table__last__position2 Int)
(assert (<= 0 simple_unc_arrays__table__last__first__bit2))
(assert (< simple_unc_arrays__table__last__first__bit2 simple_unc_arrays__table__last__last__bit2))
(assert (<= 0 simple_unc_arrays__table__last__position2))
(declare-const simple_unc_arrays__table__v__first__bit2 Int)
(declare-const simple_unc_arrays__table__v__last__bit2 Int)
(declare-const simple_unc_arrays__table__v__position2 Int)
(assert (<= 0 simple_unc_arrays__table__v__first__bit2))
(assert (< simple_unc_arrays__table__v__first__bit2 simple_unc_arrays__table__v__last__bit2))
(assert (<= 0 simple_unc_arrays__table__v__position2))
(declare-fun user_eq14 (us_rep2 us_rep2) Bool)
(declare-const dummy14 us_rep2)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content us_rep2)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_rep2 (t5b__content a))
(declare-const t2__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tT9bP1 0)
(declare-fun tT9bP1qtint (tT9bP1) Int)
(assert (forall ((i tT9bP1)) (and (<= 1 (tT9bP1qtint i)) (<= (tT9bP1qtint i) 10))))
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq15 (tT9bP1 tT9bP1) Bool)
(declare-const dummy15 tT9bP1)
(declare-datatypes () ((tT9bP1__ref (mk_tT9bP1__ref (tT9bP1__content tT9bP1)))))
(define-fun tT9bP1__ref___projection ((a tT9bP1__ref)) tT9bP1 (tT9bP1__content a))
(declare-const dummy16 (Array Int value))
(declare-const value__size7 Int)
(declare-fun object__size7 ((Array Int value)) Int)
(declare-const value__component__size4 Int)
(declare-fun object__component__size4 ((Array Int value)) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 ((Array Int value)) Int)
(assert (<= 0 value__size7))
(assert (forall ((a (Array Int value))) (<= 0 (object__size7 a))))
(assert (<= 0 value__component__size4))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size4 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment7 a))))
(declare-fun user_eq16 ((Array Int value) (Array Int value)) Bool)
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__simple_unc_arrays__table__v3 (Array Int value))))))
(define-fun us_split_fields_V__4__projection ((a us_split_fields6)) (Array Int value) (rec__simple_unc_arrays__table__v3 a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_discrs4 us_split_discrs) (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___7__projection ((a us_rep3)) us_split_discrs (us_split_discrs4 a))
(define-fun us_rep___8__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun to_base2 ((a us_rep3)) us_rep (mk___rep (us_split_discrs4 a) (mk___split_fields (of_array1 (rec__simple_unc_arrays__table__v3 (us_split_fields7 a)) 1 10))))
(define-fun of_base2 ((r us_rep)) us_rep3 (mk___rep3 (us_split_discrs1 r) (mk___split_fields3 (let ((temp___157 (rec__simple_unc_arrays__table__v (us_split_fields1 r)))) (to_array1 temp___157)))))
(define-fun bool_eq7 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs4 a))) (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs4 b)))) (= (bool_eq2 (rec__simple_unc_arrays__table__v3 (us_split_fields7 a)) 1 10 (rec__simple_unc_arrays__table__v3 (us_split_fields7 b)) 1 10) true)) true false))
(define-fun in_range11 ((rec__simple_unc_arrays__table__last1 Int) (a us_rep)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep3) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep3) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep3)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment8 a))))
(declare-const simple_unc_arrays__table__last__first__bit3 Int)
(declare-const simple_unc_arrays__table__last__last__bit3 Int)
(declare-const simple_unc_arrays__table__last__position3 Int)
(assert (<= 0 simple_unc_arrays__table__last__first__bit3))
(assert (< simple_unc_arrays__table__last__first__bit3 simple_unc_arrays__table__last__last__bit3))
(assert (<= 0 simple_unc_arrays__table__last__position3))
(declare-const simple_unc_arrays__table__v__first__bit3 Int)
(declare-const simple_unc_arrays__table__v__last__bit3 Int)
(declare-const simple_unc_arrays__table__v__position3 Int)
(assert (<= 0 simple_unc_arrays__table__v__first__bit3))
(assert (< simple_unc_arrays__table__v__first__bit3 simple_unc_arrays__table__v__last__bit3))
(assert (<= 0 simple_unc_arrays__table__v__position3))
(declare-fun user_eq17 (us_rep3 us_rep3) Bool)
(declare-const dummy17 us_rep3)
(declare-datatypes () ((tt3S__ref (mk_tt3S__ref (tt3S__content us_rep3)))))
(define-fun tt3S__ref___projection ((a tt3S__ref)) us_rep3 (tt3S__content a))
(define-fun dynamic_invariant3 ((temp___expr_315 us_rep3) (temp___is_init_311 Bool) (temp___skip_constant_312 Bool) (temp___do_toplevel_313 Bool) (temp___do_typ_inv_314 Bool)) Bool (=> (not (= temp___skip_constant_312 true)) (in_range11 10 (to_base2 temp___expr_315))))
(define-fun default_initial_assumption ((temp___expr_318 us_rep3) (temp___skip_top_level_319 Bool)) Bool (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs4 temp___expr_318))) 10))
(declare-const t3__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp_____aggregate_def_324 (Int Int Int Int Int Int Int Int Int Int) (Array Int value))
(declare-fun temp_____aggregate_def_337 (Int Int Int Int Int Int Int Int Int Int) (Array Int value))
(declare-fun temp___String_Literal_353 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (= (to_rep (select (temp___String_Literal_353 us_void_param) 1)) 77) (= (to_rep (select (temp___String_Literal_353 us_void_param) 2)) 97)) (= (to_rep (select (temp___String_Literal_353 us_void_param) 3)) 120)) (= (to_rep (select (temp___String_Literal_353 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_353 us_void_param) 5)) 61)) (= (to_rep (select (temp___String_Literal_353 us_void_param) 6)) 32)) :pattern ((temp___String_Literal_353 us_void_param)))))
(declare-fun temp___String_Literal_354 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (= (to_rep (select (temp___String_Literal_354 us_void_param) 1)) 77) (= (to_rep (select (temp___String_Literal_354 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_354 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_354 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_354 us_void_param) 5)) 61)) (= (to_rep (select (temp___String_Literal_354 us_void_param) 6)) 32)) :pattern ((temp___String_Literal_354 us_void_param)))))
(declare-fun temp___String_Literal_355 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_355 us_void_param) 1)) 65) (= (to_rep (select (temp___String_Literal_355 us_void_param) 2)) 118)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 3)) 101)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 4)) 114)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 5)) 97)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 6)) 103)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 9)) 61)) (= (to_rep (select (temp___String_Literal_355 us_void_param) 10)) 32)) :pattern ((temp___String_Literal_355 us_void_param)))))
(declare-fun temp___String_Literal_356 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_356 us_void_param) 1)) 70) (= (to_rep (select (temp___String_Literal_356 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 4)) 100)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 5)) 32)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 6)) 48)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 8)) 105)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 9)) 110)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 11)) 84)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 12)) 49)) (= (to_rep (select (temp___String_Literal_356 us_void_param) 13)) 32)) :pattern ((temp___String_Literal_356 us_void_param)))))
(declare-fun temp___String_Literal_357 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_357 us_void_param) 1)) 70) (= (to_rep (select (temp___String_Literal_357 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 4)) 100)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 5)) 32)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 6)) 57)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 8)) 105)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 9)) 110)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 11)) 84)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 12)) 50)) (= (to_rep (select (temp___String_Literal_357 us_void_param) 13)) 32)) :pattern ((temp___String_Literal_357 us_void_param)))))
(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant6 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(define-fun dynamic_invariant7 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert true)
(assert (forall ((a us_rep)) (! (= (= (empty a) true) (< (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) 1)) :pattern ((empty a)))))
(assert true)
(assert (forall ((a us_rep) (b us_rep)) (! (= (= (same_range a b) true) (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 b))))) :pattern ((same_range a b)))))
(assert true)
(assert (forall ((a us_rep)) (forall ((v Int) (low Int) (up Int)) (! (= (= (not_in a v low up) true) (or (< (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) up) (forall ((j Int)) (=> (and (<= low j) (<= j up)) (not (= (to_rep3 (let ((temp___239 (rec__simple_unc_arrays__table__v (us_split_fields1 a)))) (select (to_array1 temp___239) j))) v)))))) :pattern ((not_in a v low up))))))
(declare-const rliteral value)
(assert (= (valueqtint rliteral) 5))
(declare-const rliteral1 value)
(assert (= (valueqtint rliteral1) 1))
(declare-const rliteral2 value)
(assert (= (valueqtint rliteral2) 3))
(declare-const rliteral3 value)
(assert (= (valueqtint rliteral3) 0))
(declare-const rliteral4 value)
(assert (= (valueqtint rliteral4) 9))
(declare-const rliteral5 value)
(assert (= (valueqtint rliteral5) 8))
(declare-const rliteral6 value)
(assert (= (valueqtint rliteral6) 2))
(declare-const rliteral7 value)
(assert (= (valueqtint rliteral7) 7))
(declare-const rliteral8 value)
(assert (= (valueqtint rliteral8) 4))
(declare-const rliteral9 value)
(assert (= (valueqtint rliteral9) 6))
(assert (forall ((temp___326 Int) (temp___327 Int) (temp___328 Int) (temp___329 Int) (temp___330 Int) (temp___331 Int) (temp___332 Int) (temp___333 Int) (temp___334 Int) (temp___335 Int)) (let ((temp___325 (temp_____aggregate_def_324 temp___326 temp___327 temp___328 temp___329 temp___330 temp___331 temp___332 temp___333 temp___334 temp___335))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___326 true true true true) (dynamic_invariant1 temp___327 true true true true)) (dynamic_invariant1 temp___328 true true true true)) (dynamic_invariant1 temp___329 true true true true)) (dynamic_invariant1 temp___330 true true true true)) (dynamic_invariant1 temp___331 true true true true)) (dynamic_invariant1 temp___332 true true true true)) (dynamic_invariant1 temp___333 true true true true)) (dynamic_invariant1 temp___334 true true true true)) (dynamic_invariant1 temp___335 true true true true)) (and (and (and (and (and (and (and (and (and (= (select temp___325 1) rliteral) (= (select temp___325 2) rliteral1)) (= (select temp___325 3) rliteral2)) (= (select temp___325 4) rliteral3)) (= (select temp___325 5) rliteral4)) (= (select temp___325 6) rliteral5)) (= (select temp___325 7) rliteral6)) (= (select temp___325 8) rliteral7)) (= (select temp___325 9) rliteral8)) (= (select temp___325 10) rliteral9))))))
(assert (forall ((temp___339 Int) (temp___340 Int) (temp___341 Int) (temp___342 Int) (temp___343 Int) (temp___344 Int) (temp___345 Int) (temp___346 Int) (temp___347 Int) (temp___348 Int)) (let ((temp___338 (temp_____aggregate_def_337 temp___339 temp___340 temp___341 temp___342 temp___343 temp___344 temp___345 temp___346 temp___347 temp___348))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___339 true true true true) (dynamic_invariant1 temp___340 true true true true)) (dynamic_invariant1 temp___341 true true true true)) (dynamic_invariant1 temp___342 true true true true)) (dynamic_invariant1 temp___343 true true true true)) (dynamic_invariant1 temp___344 true true true true)) (dynamic_invariant1 temp___345 true true true true)) (dynamic_invariant1 temp___346 true true true true)) (dynamic_invariant1 temp___347 true true true true)) (dynamic_invariant1 temp___348 true true true true)) (and (and (and (and (and (and (and (and (and (= (select temp___338 1) rliteral8) (= (select temp___338 2) rliteral5)) (= (select temp___338 3) rliteral9)) (= (select temp___338 4) rliteral4)) (= (select temp___338 5) rliteral3)) (= (select temp___338 6) rliteral1)) (= (select temp___338 7) rliteral7)) (= (select temp___338 8) rliteral6)) (= (select temp___338 9) rliteral)) (= (select temp___338 10) rliteral2))))))
(declare-const rliteral10 natural)
(assert (= (naturalqtint rliteral10) 10))
(declare-const t1__split_fields (Array Int value))
(declare-const t1__split_fields1 t1)
(declare-const t2__split_fields (Array Int value))
(declare-const t2__split_fields1 t1)
(declare-const result us_split_fields__ref)
(declare-const t1__split_fields2 us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const t2__split_fields2 us_split_fields)
(assert (= result (mk___split_fields__ref (mk___split_fields (mk___t1 t1__split_fields t1__split_fields1)))))
(assert (= t1__split_fields2 (mk___split_fields (mk___t1 (temp_____aggregate_def_324 5 1 3 0 9 8 2 7 4 6) (mk1 1 10)))))
(assert (= t1__split_discrs (mk___split_discrs rliteral10)))
(assert (dynamic_invariant (mk___rep t1__split_discrs t1__split_fields2) true false true true))
(assert (= result1 (mk___split_fields__ref (mk___split_fields (mk___t1 t2__split_fields t2__split_fields1)))))
(assert (= t2__split_fields2 (mk___split_fields (mk___t1 (temp_____aggregate_def_337 4 8 6 9 0 1 7 2 5 3) (mk1 1 10)))))
(assert (= t2__split_discrs (mk___split_discrs rliteral10)))
(assert (dynamic_invariant (mk___rep t2__split_discrs t2__split_fields2) true false true true))
(assert (not (in_range4 10)))
(check-sat)
(exit)
