(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type index_type

predicate in_range(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : extended_index_type, extended_index_type -> bool

logic dummy1 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type position_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : position_type, position_type -> bool

logic dummy2 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__binary_trees__cell__left : extended_index_type;
rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((((to_rep(((a).us_split_fields1).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields1).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields1).rec__binary_trees__cell__position))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields1).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields1).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields1).rec__binary_trees__cell__position)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size({ us_split_fields1 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : extended_index_type

logic dummy4 : extended_index_type

logic dummy5 : extended_index_type

logic dummy6 : position_type

type cell__ref = { cell__content : us_rep
}

function cell__ref___projection(a: cell__ref) : us_rep = (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq4((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))) -> (bool_eq5(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))))))

logic dummy7 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep) farray
}

function us_split_fields_S__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields3).rec__binary_trees__forest__s)) and
  (bool_eq5(((a).us_split_fields3).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields3).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields3).rec__binary_trees__forest__s)) and
  (bool_eq5(((a).us_split_fields3).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields3).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:(int,us_rep) farray.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:(int,us_rep) farray.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy8 : extended_index_type

logic dummy9 : (int,us_rep) farray

type forest__ref = { forest__content : us_rep1
}

function forest__ref___projection(a: forest__ref) : us_rep1 =
  (a).forest__content

type direction

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : direction, direction -> bool

logic dummy10 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic size : us_rep1 -> int

logic size__function_guard : int, us_rep1 -> prop

logic tree_structure : us_rep1 -> bool

logic tree_structure__function_guard : bool, us_rep1 -> prop

logic parent : us_rep1, int -> int

logic parent__function_guard : int, us_rep1, int -> prop

logic position : us_rep1, int -> int

logic position__function_guard : int, us_rep1, int -> prop

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i:int [position({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((((tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range(i)) and (not (parent({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range3(position({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : natural, natural -> bool

logic dummy11 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)])))) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)])))))))))

logic dummy12 : (int,natural) farray

logic value__size3 : int

logic object__size3 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,natural) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields4 = { rec__search_trees__search_tree__root :
extended_index_type; rec__search_trees__search_tree__struct : us_rep1;
rec__search_trees__search_tree__values : (int,natural) farray
}

function us_split_fields_Root__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__search_trees__search_tree__root

function us_split_fields_Struct__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__search_trees__search_tree__struct

function us_split_fields_Values__projection(a: us_split_fields4) : (int,natural) farray =
  (a).rec__search_trees__search_tree__values

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  (((((to_rep(((a).us_split_fields5).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields5).rec__search_trees__search_tree__root)) and
  (bool_eq6(((a).us_split_fields5).rec__search_trees__search_tree__struct,
  ((b).us_split_fields5).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq9(((a).us_split_fields5).rec__search_trees__search_tree__values, 1,
  100, ((b).us_split_fields5).rec__search_trees__search_tree__values, 1,
  100) = true)) -> (bool_eq10(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields5).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields5).rec__search_trees__search_tree__root)) and
  (bool_eq6(((a).us_split_fields5).rec__search_trees__search_tree__struct,
  ((b).us_split_fields5).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq9(((a).us_split_fields5).rec__search_trees__search_tree__values, 1,
  100, ((b).us_split_fields5).rec__search_trees__search_tree__values, 1,
  100) = true))) -> (bool_eq10(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep) farray. forall a3:(int,natural) farray.
  (0 <= object__size4({ us_split_fields5 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep) farray. forall a3:(int,natural) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

logic search_trees__search_tree__root__first__bit : int

logic search_trees__search_tree__root__last__bit : int

logic search_trees__search_tree__root__position : int

axiom search_trees__search_tree__root__first__bit_axiom :
  (0 <= search_trees__search_tree__root__first__bit)

axiom search_trees__search_tree__root__last__bit_axiom :
  (search_trees__search_tree__root__first__bit <  search_trees__search_tree__root__last__bit)

axiom search_trees__search_tree__root__position_axiom :
  (0 <= search_trees__search_tree__root__position)

logic search_trees__search_tree__struct__first__bit : int

logic search_trees__search_tree__struct__last__bit : int

logic search_trees__search_tree__struct__position : int

axiom search_trees__search_tree__struct__first__bit_axiom :
  (0 <= search_trees__search_tree__struct__first__bit)

axiom search_trees__search_tree__struct__last__bit_axiom :
  (search_trees__search_tree__struct__first__bit <  search_trees__search_tree__struct__last__bit)

axiom search_trees__search_tree__struct__position_axiom :
  (0 <= search_trees__search_tree__struct__position)

logic search_trees__search_tree__values__first__bit : int

logic search_trees__search_tree__values__last__bit : int

logic search_trees__search_tree__values__position : int

axiom search_trees__search_tree__values__first__bit_axiom :
  (0 <= search_trees__search_tree__values__first__bit)

axiom search_trees__search_tree__values__last__bit_axiom :
  (search_trees__search_tree__values__first__bit <  search_trees__search_tree__values__last__bit)

axiom search_trees__search_tree__values__position_axiom :
  (0 <= search_trees__search_tree__values__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy13 : extended_index_type

logic dummy14 : extended_index_type

logic dummy15 : (int,us_rep) farray

logic dummy16 : (int,natural) farray

type search_tree__ref = { search_tree__content : us_rep2
}

function search_tree__ref___projection(a: search_tree__ref) : us_rep2 =
  (a).search_tree__content

logic valid_root : us_rep1, int -> bool

logic valid_root__function_guard : bool, us_rep1, int -> prop

logic size1 : us_rep2 -> int

logic size__function_guard1 : int, us_rep2 -> prop

logic ordered_leafs : us_rep1, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep1, int,
  (int,natural) farray -> prop

logic temp___431 : int -> (int,natural) farray

logic parent1 : us_rep2, int -> int

logic parent__function_guard1 : int, us_rep2, int -> prop

axiom parent__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep) farray. forall t3:(int,natural) farray.
  (forall i:int [parent1({ us_split_fields5 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and in_range(i)) and
  (((size({ us_split_fields3 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size({ us_split_fields3 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true))))) -> (((size1({ us_split_fields5 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (parent1({
  us_split_fields5 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0)) and
  in_range1(parent1({ us_split_fields5 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i))))))

axiom parent__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep) farray. forall t3:(int,natural) farray.
  (forall i:int [parent1({ us_split_fields5 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. (((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and in_range(i)) ->
  (parent1({ us_split_fields5 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = parent({
  us_split_fields3 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

logic t : extended_index_type

logic t1 : extended_index_type

logic t2 : (int,us_rep) farray

logic t3 : (int,natural) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom size__post_axiom :
  (forall t4:extended_index_type. forall t5:extended_index_type.
  forall t6:(int,us_rep) farray. forall t7:(int,natural) farray [size1({
  us_split_fields5 = { rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } })]. (((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = true) and (((size({
  us_split_fields3 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = 0) and (to_rep(t4) = 0)) or
  ((not (size({ us_split_fields3 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = 0)) and
  (((not (to_rep(t4) = 0)) and (valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } },
  to_rep(t4)) = true)) and (ordered_leafs({ us_split_fields3 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } },
  to_rep(t4), t7) = true))))) -> in_range1(size1({ us_split_fields5 = {
  rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } }))))

axiom size__def_axiom :
  (forall t4:extended_index_type. forall t5:extended_index_type.
  forall t6:(int,us_rep) farray. forall t7:(int,natural) farray [size1({
  us_split_fields5 = { rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } })]. ((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = true) -> (size1({
  us_split_fields5 = { rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields3 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } }) = size({
  us_split_fields3 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }))))

axiom def_axiom :
  (forall temp___433:int. (in_range4(temp___433) ->
  (forall temp___434:int.
  (to_rep2((temp___431(temp___433)[temp___434])) = temp___433))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep3

logic bool_eq11 : us_rep3, us_rep3 -> bool

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep3. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep3. (0 <= object__alignment5(a)))

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy17 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref___projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic length : us_rep3 -> int

logic length__function_guard : int, us_rep3 -> prop

logic get : us_rep3, int -> int

logic get__function_guard : int, us_rep3, int -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i1:int [of_int(i1)]. (((i1 = 0) -> (of_int(i1) = false)) and
  ((not (i1 = 0)) -> (of_int(i1) = true))))

logic bool_eq12 : bool, bool -> bool

axiom bool_eq_def10 :
  (forall x:bool. forall y:bool [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

predicate in_range5(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE5 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> bool

logic last__function_guard : int, us_rep3 -> prop

logic olt__function_guard : bool, us_rep3, us_rep3 -> prop

type us_split_fields6 = { rec__tree_model__path_type__a : us_rep3;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields6) : us_rep3 =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields6) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq13 : us_rep4, us_rep4 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq13(a, b)].
  ((((user_eq10(((a).us_split_fields7).rec__tree_model__path_type__a,
  ((b).us_split_fields7).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields7).rec__tree_model__path_type__k = ((b).us_split_fields7).rec__tree_model__path_type__k)) ->
  (bool_eq13(a, b) = true)) and
  ((not ((user_eq10(((a).us_split_fields7).rec__tree_model__path_type__a,
  ((b).us_split_fields7).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields7).rec__tree_model__path_type__k = ((b).us_split_fields7).rec__tree_model__path_type__k))) ->
  (bool_eq13(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:us_rep3. forall a1:bool. (0 <= object__size6({ us_split_fields7 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep3. forall a1:bool. (0 <= object__alignment6({
  us_split_fields7 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq11 : us_rep4, us_rep4 -> bool

logic dummy18 : us_rep3

logic dummy19 : bool

type path_type__ref = { path_type__content : us_rep4
}

function path_type__ref___projection(a: path_type__ref) : us_rep4 =
  (a).path_type__content

type map__ref2 = { map__content2 : (int,us_rep4) farray
}

logic slide2 : (int,us_rep4) farray, int, int -> (int,us_rep4) farray

axiom slide_eq2 :
  (forall a:(int,us_rep4) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep4) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i1:int [(slide2(a, old_first, new_first)[i1])]. ((slide2(a,
  old_first, new_first)[i1]) = (a[(i1 - (new_first - old_first))]))))))

logic bool_eq14 : (int,us_rep4) farray, int, int, (int,us_rep4) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,us_rep4) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep4) farray. forall b__first:int. forall b__last:int
  [bool_eq14(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq13((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq13((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq14(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq13((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic model__ : us_rep1, int -> (int,us_rep4) farray

logic model____function_guard : (int,us_rep4) farray, us_rep1, int -> prop

axiom ordered_leafs__post_axiom : true

axiom ordered_leafs__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall root:int.
  (forall values:(int,natural) farray [ordered_leafs({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values)]. (((ordered_leafs({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values) = true) ->
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true) and
  ((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__k = true)) and
  ((bool_lt(length((((model__({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep2((values[j])) <  to_rep2((values[i1])))) and
  ((not (get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep2((values[i1])) <  to_rep2((values[j]))))))))))) and
  ((forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
   (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields7).rec__tree_model__path_type__k = true)) and
   (((bool_lt(length((((model__({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields7).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields7).rec__tree_model__path_type__a, n))))) and
   (not (bool_lt(length((((model__({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields7).rec__tree_model__path_type__a)) = false)))) ->
   (((get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields7).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a) + 1)) = 0) and
   (to_rep2((values[j])) <  to_rep2((values[i1])))) or
   ((not (get((((model__({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields7).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a) + 1)) = 0)) and
   (to_rep2((values[i1])) <  to_rep2((values[j])))))))))) ->
  (ordered_leafs({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root, values) = true))))))

logic oeq__function_guard : bool, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep3. forall b:us_rep3 [user_eq10(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq10(a, b) = match_bool(bool_eq(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq10(a, b) = match_bool(bool_eq(length(a), length(b)), false,
  false)))))

logic is_add : us_rep3, int, us_rep3 -> bool

logic is_add__function_guard : bool, us_rep3, int, us_rep3 -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep3. forall s2:us_rep3.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type count_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : count_type, count_type -> bool

logic dummy20 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom size__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray [size({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range1(size({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i1:int [valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1)]. (((tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range(i1)) -> ((size({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i1) -> (not (valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1) = true))))))

axiom parent__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i1:int [parent({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1)]. (((tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range(i1)) -> ((((valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1) = true) -> (parent({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1) = 0)) and ((size({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1) = 0))) and in_range1(parent({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1))))))

axiom model____post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall root:int [model__({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. ((((tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range(root)) and (valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields7).rec__tree_model__path_type__k = true) and
  ((length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields7).rec__tree_model__path_type__a) = 0) and
  ((forall i1:int. (((1 <= i1) and (i1 <= 100)) -> ((not (i1 = root)) ->
   ((((not (parent({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i1) = 0)) and ((((model__({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i1)])).us_split_fields7).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields3 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i1) = 0)) and ((((model__({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i1)])).us_split_fields7).rec__tree_model__path_type__k = true))) ->
   (not ((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true))))))) and
  ((forall i1:int. (((1 <= i1) and (i1 <= 100)) -> (((((((model__({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true) and
   (not (i1 = root))) -> (is_add((((model__({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent({ us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i1)])).us_split_fields7).rec__tree_model__path_type__a, position({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i1), (((model__({
   us_split_fields3 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true) and
   (not (i1 = root)))) -> (length((((model__({ us_split_fields3 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i1])).us_split_fields7).rec__tree_model__path_type__a) = 0))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) -> (((((model__({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__k = true) and
  ((bool_eq(length((((model__({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i1])).us_split_fields7).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields7).rec__tree_model__path_type__a, n)))))) ->
  (j = i1))))))))))) and
  (forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
  (length((((model__({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[temp___252])).us_split_fields7).rec__tree_model__path_type__a) <  100)))))))

axiom tree_structure__post_axiom : true

type extended_index

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq13 : extended_index, extended_index -> bool

logic dummy21 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom length__post_axiom :
  (forall container:us_rep3 [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range6(length(container))))

type element_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : element_type, element_type -> bool

logic dummy22 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall position1:int [get(container, position1)].
  ((in_range7(position1) and ((1 <= position1) and
  (position1 <= (0 + length(container))))) -> in_range8(get(container,
  position1)))))

 (* File "tree_model.ads", line 19, characters 0-0 *)
goal WP_parameter_def : ((tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true) -> (in_range(i) -> ((((size({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0) and (to_rep(t) = 0)) or ((not (size({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0)) and (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) -> (((size({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0) -> (to_rep(t) = 0)) and ((not (size({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0)) -> (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields3 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))))))
