(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort et1 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (et1 et1) Bool)
(declare-const dummy et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (et1 Int) (Array Int et1))
(assert (forall ((v et1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b (Array Int et1))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 99)) (in_range temp___expr_176)))
(declare-const a (Array Int et1))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 et1)
(declare-const o3 (Array Int et1))
(declare-const o4 et1)
(declare-const o5 (Array Int et1))
(declare-const o6 et1)
(declare-const o7 (Array Int et1))
(declare-const o8 Int)
(declare-const o9 et1)
(declare-const o10 (Array Int et1))
(declare-const o11 et1)
(declare-const o12 (Array Int et1))
(declare-const o13 et1)
(declare-const o14 (Array Int et1))
(declare-const o15 et1)
(declare-const o16 (Array Int et1))
(declare-const o17 Int)
(declare-const o18 et1)
(declare-const o19 (Array Int et1))
(declare-const o20 et1)
(declare-const o21 (Array Int et1))
(declare-const o22 Int)
(declare-const o23 et1)
(declare-const o24 (Array Int et1))
(declare-const o25 et1)
(declare-const o26 (Array Int et1))
(declare-const result (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const result1 (Array Int et1))
(declare-const a2 (Array Int et1))
(declare-const result2 (Array Int et1))
(declare-const a3 (Array Int et1))
(declare-const result3 (Array Int et1))
(declare-const a4 (Array Int et1))
(declare-const result4 (Array Int et1))
(declare-const a5 (Array Int et1))
(declare-const result5 (Array Int et1))
(declare-const a6 (Array Int et1))
(declare-const result6 (Array Int et1))
(declare-const a7 (Array Int et1))
(declare-const result7 (Array Int et1))
(declare-const a8 (Array Int et1))
(declare-const result8 (Array Int et1))
(declare-const a9 (Array Int et1))
(declare-const result9 (Array Int et1))
(declare-const a10 (Array Int et1))
(declare-const result10 (Array Int et1))
(declare-const a11 (Array Int et1))
(declare-const result11 (Array Int et1))
(declare-const a12 (Array Int et1))
(declare-const result12 (Array Int et1))
(declare-const a13 (Array Int et1))
(declare-const a14 (Array Int et1))
(declare-const a15 (Array Int et1))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 b))
(assert (= (to_rep o) (to_rep (select b 4))))
(assert (= o1 (store a1 5 o)))
(assert (= a1 result1))
(assert (= a2 o1))
(assert (= (to_rep o2) (to_rep (select a2 6))))
(assert (= o3 (store a2 3 o2)))
(assert (= a2 result2))
(assert (= a3 o3))
(assert (= (to_rep o4) 0))
(assert (= o5 (store a3 6 o4)))
(assert (= a3 result3))
(assert (= a4 o5))
(assert (= (to_rep o6) (to_rep (select a4 6))))
(assert (= o7 (store a4 7 o6)))
(assert (= a4 result4))
(assert (= a5 o7))
(assert (and (= o8 (- (to_rep (select a5 5)) (to_rep (select a5 4)))) (in_range (- (to_rep (select a5 5)) (to_rep (select a5 4))))))
(assert (= (to_rep o9) o8))
(assert (= o10 (store a5 4 o9)))
(assert (= a5 result5))
(assert (= a6 o10))
(assert (= (to_rep o11) 0))
(assert (= o12 (store a6 5 o11)))
(assert (= a6 result6))
(assert (= a7 o12))
(assert (= (to_rep o13) 0))
(assert (= o14 (store a7 10 o13)))
(assert (= a7 result7))
(assert (= a8 o14))
(assert (= (to_rep o15) 0))
(assert (= o16 (store a8 9 o15)))
(assert (= a8 result8))
(assert (= a9 o16))
(assert (not (in_range (- (to_rep (select b 2)) (to_rep (select a9 2))))))
(check-sat)
(exit)
