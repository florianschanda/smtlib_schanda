(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y__first integer)
(declare-const y__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const z__first integer)
(declare-const z__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp___String_Literal_174 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_174 us_void_param) 1)) 49) (= (to_rep (select (temp___String_Literal_174 us_void_param) 2)) 50)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 3)) 51)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 4)) 52)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 5)) 53)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 6)) 54)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 7)) 55)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 8)) 56)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 9)) 57)) (= (to_rep (select (temp___String_Literal_174 us_void_param) 10)) 48)) :pattern ((temp___String_Literal_174 us_void_param)))))
(declare-fun temp___String_Literal_175 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_175 us_void_param) 1)) 49) (= (to_rep (select (temp___String_Literal_175 us_void_param) 2)) 50)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 3)) 51)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 4)) 52)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 5)) 53)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 6)) 54)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 7)) 55)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 8)) 56)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 9)) 57)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 10)) 48)) :pattern ((temp___String_Literal_175 us_void_param)))))
(declare-fun temp___String_Literal_177 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_177 us_void_param) 1)) 49) (= (to_rep (select (temp___String_Literal_177 us_void_param) 2)) 50)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 3)) 51)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 4)) 52)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 5)) 53)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 6)) 54)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 7)) 55)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 8)) 56)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 9)) 57)) (= (to_rep (select (temp___String_Literal_177 us_void_param) 10)) 97)) :pattern ((temp___String_Literal_177 us_void_param)))))
(declare-fun temp___String_Literal_179 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_179 us_void_param) 1)) 49) (= (to_rep (select (temp___String_Literal_179 us_void_param) 2)) 50)) (= (to_rep (select (temp___String_Literal_179 us_void_param) 3)) 51)) (= (to_rep (select (temp___String_Literal_179 us_void_param) 4)) 52)) (= (to_rep (select (temp___String_Literal_179 us_void_param) 5)) 53)) :pattern ((temp___String_Literal_179 us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-const x (Array Int character))
(declare-const y (Array Int character))
(declare-const z (Array Int character))
(declare-const f (Array Int character))
(declare-const strlit__dosome__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result (Array Int character))
(declare-const x1 (Array Int character))
(declare-const result1 (Array Int character))
(declare-const y1 (Array Int character))
(declare-const result2 (Array Int character))
(declare-const z1 (Array Int character))
(declare-const result3 (Array Int character))
(declare-const f1 (Array Int character))
(declare-const result4 Int)
(declare-const strlit__dosome__result1 Int)
(declare-const strlit__dosome__result2 Int)
(declare-const strlit__dosome__result3 Int)
(declare-const x2 (Array Int character))
(declare-const y2 (Array Int character))
(declare-const z2 (Array Int character))
(declare-const f2 (Array Int character))
(declare-const strlit__dosome__result4 Int)
(declare-const x3 (Array Int character))
(declare-const y3 (Array Int character))
(declare-const z3 (Array Int character))
(declare-const f3 (Array Int character))
(declare-const strlit__dosome__result5 Int)
(declare-const result5 Int)
(assert (= (mk_map__ref result) (mk_map__ref x)))
(assert (= x1 (temp___String_Literal_174 Tuple0)))
(assert (= (mk_map__ref result1) (mk_map__ref y)))
(assert (= y1 (temp___String_Literal_175 Tuple0)))
(assert (= (to_rep1 y__first) (to_rep1 (first (mk 1 10)))))
(assert (= (to_rep1 y__last) (to_rep1 (last (mk 1 10)))))
(assert (dynamic_property 1 2147483647 (to_rep1 y__first) (to_rep1 y__last)))
(assert (= (mk_map__ref result2) (mk_map__ref z)))
(assert (= z1 (temp___String_Literal_177 Tuple0)))
(assert (= (to_rep1 z__first) (to_rep1 (first (mk 1 10)))))
(assert (= (to_rep1 z__last) (to_rep1 (last (mk 1 10)))))
(assert (dynamic_property 1 2147483647 (to_rep1 z__first) (to_rep1 z__last)))
(assert (= (mk_map__ref result3) (mk_map__ref f)))
(assert (= f1 (temp___String_Literal_179 Tuple0)))
(assert (= strlit__dosome__result1 strlit__dosome__result2))
(assert (= strlit__dosome__result3 strlit__dosome__result1))
(assert (=> (<= (to_rep1 z__first) (to_rep1 z__last)) (= o (+ (- (to_rep1 z__last) (to_rep1 z__first)) 1))))
(assert (=> (not (<= (to_rep1 z__first) (to_rep1 z__last))) (= o 0)))
(assert (and (= o1 o) (in_range o)))
(assert (= result4 strlit__dosome__result))
(assert (= strlit__dosome__result1 o1))
(assert (= (mk_int__ref strlit__dosome__result4) (mk_int__ref strlit__dosome__result2)))
(assert (= f2 f1))
(assert (= z2 z1))
(assert (= y2 y1))
(assert (= x2 x1))
(assert (= strlit__dosome__result5 strlit__dosome__result3))
(assert (= f3 f1))
(assert (= z3 z1))
(assert (= y3 y1))
(assert (= x3 x1))
(assert (= result5 strlit__dosome__result4))
(assert (not (= strlit__dosome__result4 10)))
(check-sat)
(exit)
