(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type et1

predicate in_range1(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : et1, et1 -> bool

logic dummy : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,et1) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "ar.ads", line 62, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,et1) farray. forall o:et1. forall o1:(int,et1) farray.
  forall o2:et1. forall o3:(int,et1) farray. forall o4:et1.
  forall o5:(int,et1) farray. forall o6:et1. forall o7:(int,et1) farray.
  forall o8:et1. forall o9:(int,et1) farray. forall o10:et1.
  forall o11:(int,et1) farray. forall o12:et1. forall o13:(int,et1) farray.
  forall o14:et1. forall o15:(int,et1) farray. forall o16:et1.
  forall o17:(int,et1) farray. forall o18:et1. forall o19:(int,et1) farray.
  forall result:(int,et1) farray. forall a1:(int,et1) farray.
  forall result1:(int,et1) farray. forall a2:(int,et1) farray.
  forall result2:(int,et1) farray. forall a3:(int,et1) farray.
  forall result3:(int,et1) farray. forall a4:(int,et1) farray.
  forall result4:(int,et1) farray. forall a5:(int,et1) farray.
  forall result5:(int,et1) farray. forall a6:(int,et1) farray.
  forall result6:(int,et1) farray. forall a7:(int,et1) farray.
  forall result7:(int,et1) farray. forall a8:(int,et1) farray.
  forall result8:(int,et1) farray. forall a9:(int,et1) farray.
  forall result9:(int,et1) farray. forall a10:(int,et1) farray.
  forall result10:(int,et1) farray. forall a11:(int,et1) farray.
  forall a12:(int,et1) farray. forall a13:(int,et1) farray.
  (((((result = a) and (a1 = b)) and ((((to_rep(o) = to_rep((a1[1]))) and
  (o1 = (a1[10 <- o]))) and ((result1 = a1) and (a2 = o1))) and
  ((((to_rep(o2) = to_rep((a2[2]))) and (o3 = (a2[9 <- o2]))) and
  ((result2 = a2) and (a3 = o3))) and ((((to_rep(o4) = to_rep((a3[3]))) and
  (o5 = (a3[8 <- o4]))) and ((result3 = a3) and (a4 = o5))) and
  ((((to_rep(o6) = to_rep((a4[4]))) and (o7 = (a4[7 <- o6]))) and
  ((result4 = a4) and (a5 = o7))) and ((((to_rep(o8) = to_rep((b[10]))) and
  (o9 = (a5[1 <- o8]))) and ((result5 = a5) and (a6 = o9))) and
  ((((to_rep(o10) = to_rep((b[9]))) and (o11 = (a6[2 <- o10]))) and
  ((result6 = a6) and (a7 = o11))) and ((((to_rep(o12) = to_rep((b[8]))) and
  (o13 = (a7[3 <- o12]))) and ((result7 = a7) and (a8 = o13))) and
  ((((to_rep(o14) = to_rep((b[7]))) and (o15 = (a8[4 <- o14]))) and
  ((result8 = a8) and (a9 = o15))) and ((((to_rep(o16) = to_rep((a9[5]))) and
  (o17 = (a9[6 <- o16]))) and ((result9 = a9) and (a10 = o17))) and
  (((to_rep(o18) = to_rep((b[6]))) and (o19 = (a10[5 <- o18]))) and
  ((result10 = a10) and (a11 = o19))))))))))))) and ((a11 = a12) and
  (a13 = a11))) ->
  (forall n:int. (((1 <= n) and (n <= 10)) ->
  (to_rep((a12[n])) = to_rep((b[(11 - n)])))))))
