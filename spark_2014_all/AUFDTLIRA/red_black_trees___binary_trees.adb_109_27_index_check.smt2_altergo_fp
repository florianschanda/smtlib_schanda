(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and
  ((a[temp___idx_156]) = (b[((b__first - a__first) + temp___idx_156)]))) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  ((a[temp___idx_156]) = (b[((b__first - a__first) + temp___idx_156)])))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  ((a[temp___idx_156]) = (b[((b__first - a__first) + temp___idx_156)]))))))))

logic todo : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS : int

type t83b

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t83b, t83b -> bool

logic dummy1 : t83b

type t83b__ref = { t83b__content : t83b
}

function t83b__ref___projection(a: t83b__ref) : t83b = (a).t83b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "tree_model.ads", line 15, characters 0-0 *)
goal WP_parameter_def :
  (forall i:int. forall binary_trees__model__next__result:int.
  forall temp___1097:int. forall temp___1098:int. forall temp___1096:int.
  forall binary_trees__model__next__result1:int. forall result:int.
  forall i1:int. forall i2:int.
  forall binary_trees__model__next__result2:int. forall result1:int.
  forall binary_trees__model__next__result3:int. forall i3:int.
  forall binary_trees__model__next__result4:int. forall i4:int.
  forall binary_trees__model__next__result5:int. forall i5:int.
  forall binary_trees__model__next__result6:int. forall i6:int.
  forall binary_trees__model__next__result7:int. forall result2:int.
  forall binary_trees__model__next__result8:int.
  forall binary_trees__model__next__result9:int.
  forall binary_trees__model__next__result10:int. forall i7:int.
  forall binary_trees__model__next__result11:int. forall i8:int.
  forall binary_trees__model__next__result12:int. forall i9:int.
  forall binary_trees__model__next__result13:int. forall i10:int.
  forall binary_trees__model__next__result14:int.
  (((((((binary_trees__model__next__result3 = binary_trees__model__next__result11) and
  (i2 = i7)) and
  ((binary_trees__model__next__result12 = binary_trees__model__next__result3) and
  (i8 = i2))) and ((temp___1097 = 1) and ((temp___1098 = 100) and ((({
  int__content = result } = { int__content = i }) and (i1 = temp___1097)) and
  (((temp___1097 <= i1) and (i1 <= temp___1098)) and ((temp___1096 = i1) and
  ((forall j:int. (((1 <= j) and (j <= (i2 - 1))) ->
   (not ((todo[j]) = true)))) and
  ((((1 <= 100) -> in_range2(i2)) and ((1 <= i2) and (i2 <= 100))) and
  (((todo[i2]) = true) and
  ((binary_trees__model__next__result2 = result1) and
  (binary_trees__model__next__result3 = i2))))))))))) or (((({ int__content =
  result } = { int__content = i }) and (i1 = 1)) and ((((1 <= i1) and
  (i1 <= 100)) and ((((temp___1096 = i1) and
  ((forall j:int. (((1 <= j) and (j <= (i2 - 1))) ->
   (not ((todo[j]) = true)))) and
  ((((1 <= 100) -> in_range2(i2)) and ((1 <= i2) and (i2 <= 100))) and
  (((not ((todo[i2]) = true)) and
  (binary_trees__model__next__result3 = binary_trees__model__next__result2)) and
  (i2 = 100))))) and
  (((binary_trees__model__next__result3 = binary_trees__model__next__result4) and
  (i2 = i3)) and
  ((binary_trees__model__next__result5 = binary_trees__model__next__result3) and
  (i4 = i2)))) and ((({ int__content = binary_trees__model__next__result6
  } = { int__content = binary_trees__model__next__result4 }) and ({
  int__content = i5 } = { int__content = i3 })) and
  ((binary_trees__model__next__result7 = binary_trees__model__next__result5) and
  (i6 = i4))))) or ((not ((1 <= i1) and (i1 <= 100))) and ((({ int__content =
  binary_trees__model__next__result6 } = { int__content =
  binary_trees__model__next__result }) and (i1 = i5)) and
  ((binary_trees__model__next__result7 = binary_trees__model__next__result1) and
  (i6 = i1)))))) and (((({ int__content = binary_trees__model__next__result11
  } = { int__content = binary_trees__model__next__result9 }) and ({
  int__content = i7 } = { int__content = i5 })) and
  ((binary_trees__model__next__result12 = binary_trees__model__next__result10) and
  (i8 = i6))) and
  (((binary_trees__model__next__result8 = binary_trees__model__next__result9) and
  (binary_trees__model__next__result10 = binary_trees__model__next__result8)) and
  (({ int__content = result2 } = { int__content =
  binary_trees__model__next__result6 }) and
  (binary_trees__model__next__result8 = 0)))))) and ((({ int__content =
  binary_trees__model__next__result13 } = { int__content =
  binary_trees__model__next__result11 }) and ({ int__content = i9 } = {
  int__content = i7 })) and
  ((binary_trees__model__next__result14 = binary_trees__model__next__result12) and
  (i10 = i8)))) -> ((not (binary_trees__model__next__result13 = 0)) ->
  (1 <= binary_trees__model__next__result13))))
