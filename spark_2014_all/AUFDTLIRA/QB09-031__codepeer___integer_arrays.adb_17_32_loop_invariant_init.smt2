(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort element_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (element_type element_type) Bool)
(declare-const dummy2 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(declare-fun to_rep (element_type) Int)
(declare-fun of_rep (Int) element_type)
(assert (forall ((x element_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x element_type)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tarray_typeD1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tarray_typeD1 tarray_typeD1) Bool)
(declare-const dummy3 tarray_typeD1)
(declare-datatypes () ((tarray_typeD1__ref (mk_tarray_typeD1__ref (tarray_typeD1__content tarray_typeD1)))))
(define-fun tarray_typeD1__ref___projection ((a tarray_typeD1__ref)) tarray_typeD1 (tarray_typeD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element_type))))))
(declare-fun slide ((Array Int element_type) Int Int) (Array Int element_type))
(assert (forall ((a (Array Int element_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int element_type)) (a__first Int) (a__last Int) (b (Array Int element_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int element_type)) (b (Array Int element_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const arr (Array Int element_type))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort t3b 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (t3b t3b) Bool)
(declare-const dummy4 t3b)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content t3b)))))
(define-fun t3b__ref___projection ((a t3b__ref)) t3b (t3b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun integer_arrays__make_unique__result__aggregate_def (Int) (Array Int element_type))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_159)))
(assert (forall ((temp___174 Int)) (=> (dynamic_invariant2 temp___174 true true true true) (forall ((temp___175 Int)) (= (to_rep (select (integer_arrays__make_unique__result__aggregate_def temp___174) temp___175)) temp___174)))))
(declare-const result__ (Array Int element_type))
(declare-const result_index Int)
(declare-const i Int)
(declare-const o Int)
(declare-const o1 element_type)
(declare-const o2 Int)
(declare-const o3 (Array Int element_type))
(declare-const result (Array Int element_type))
(declare-const result__1 (Array Int element_type))
(declare-const result1 Int)
(declare-const result_index1 Int)
(declare-const result2 Int)
(declare-const i1 Int)
(declare-const result3 Bool)
(declare-const result4 Int)
(declare-const result_index2 Int)
(declare-const result5 (Array Int element_type))
(declare-const result__2 (Array Int element_type))
(assert (= result result__))
(assert (= result__1 (integer_arrays__make_unique__result__aggregate_def 0)))
(assert (= result1 result_index))
(assert (= result_index1 0))
(assert (in_range2 result_index1))
(assert (= result2 i))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 10))
(assert (= (= result3 true) (forall ((j Int)) (=> (and (<= 1 j) (<= j result_index1)) (not (= (to_rep (select result__1 j)) (to_rep (select arr i1))))))))
(assert (=> (= result3 true) (and (= o (+ result_index1 1)) (in_range1 (+ result_index1 1)))))
(assert (=> (= result3 true) (= result_index1 result4)))
(assert (=> (= result3 true) (= result_index2 o)))
(assert (=> (= result3 true) (and (<= 1 result_index2) (<= result_index2 10))))
(assert (=> (= result3 true) (= (to_rep o1) (to_rep (select arr i1)))))
(assert (=> (= result3 true) (and (<= 1 result_index2) (<= result_index2 10))))
(assert (=> (= result3 true) (= o2 result_index2)))
(assert (=> (= result3 true) (= o3 (store result__1 o2 o1))))
(assert (=> (= result3 true) (= result5 result__1)))
(assert (=> (= result3 true) (= result__2 o3)))
(assert (=> (not (= result3 true)) (= result_index2 result_index1)))
(assert (=> (not (= result3 true)) (= result__2 result__1)))
(assert (not (<= result_index2 i1)))
(check-sat)
(exit)
