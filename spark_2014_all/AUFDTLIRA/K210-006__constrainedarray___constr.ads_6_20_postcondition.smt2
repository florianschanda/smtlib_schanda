(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const x (Array Int integer))
(declare-const i Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 (Array Int integer))
(declare-const o3 Int)
(declare-const o4 integer)
(declare-const o5 (Array Int integer))
(declare-const o6 Int)
(declare-const o7 integer)
(declare-const o8 (Array Int integer))
(declare-const o9 Int)
(declare-const o10 integer)
(declare-const o11 (Array Int integer))
(declare-const o12 Int)
(declare-const o13 integer)
(declare-const o14 (Array Int integer))
(declare-const o15 Int)
(declare-const o16 integer)
(declare-const o17 (Array Int integer))
(declare-const o18 Int)
(declare-const o19 integer)
(declare-const o20 (Array Int integer))
(declare-const o21 Int)
(declare-const o22 integer)
(declare-const o23 (Array Int integer))
(declare-const o24 Int)
(declare-const o25 integer)
(declare-const o26 (Array Int integer))
(declare-const o27 Int)
(declare-const o28 integer)
(declare-const o29 (Array Int integer))
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 (Array Int integer))
(declare-const x1 (Array Int integer))
(declare-const result2 Int)
(declare-const i2 Int)
(declare-const result3 (Array Int integer))
(declare-const x2 (Array Int integer))
(declare-const result4 Int)
(declare-const i3 Int)
(declare-const result5 (Array Int integer))
(declare-const x3 (Array Int integer))
(declare-const result6 Int)
(declare-const i4 Int)
(declare-const result7 (Array Int integer))
(declare-const x4 (Array Int integer))
(declare-const result8 Int)
(declare-const i5 Int)
(declare-const result9 (Array Int integer))
(declare-const x5 (Array Int integer))
(declare-const result10 Int)
(declare-const i6 Int)
(declare-const result11 (Array Int integer))
(declare-const x6 (Array Int integer))
(declare-const result12 Int)
(declare-const i7 Int)
(declare-const result13 (Array Int integer))
(declare-const x7 (Array Int integer))
(declare-const result14 Int)
(declare-const i8 Int)
(declare-const result15 (Array Int integer))
(declare-const x8 (Array Int integer))
(declare-const result16 Int)
(declare-const i9 Int)
(declare-const result17 (Array Int integer))
(declare-const x9 (Array Int integer))
(declare-const result18 Int)
(declare-const i10 Int)
(declare-const result19 map__ref)
(declare-const x10 (Array Int integer))
(declare-const x11 map__ref)
(declare-const i11 int__ref)
(declare-const x12 (Array Int integer))
(declare-const i12 Int)
(assert (= (to_rep (select x 1)) 0))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (and (= o (+ (to_rep (select x i1)) 1)) (in_range (+ (to_rep (select x i1)) 1))))
(assert (= (to_rep o1) o))
(assert (= o2 (store x i1 o1)))
(assert (= (mk_map__ref result1) (mk_map__ref x)))
(assert (= x1 o2))
(assert (= i1 result2))
(assert (= i2 2))
(assert (and (= o3 (+ (to_rep (select x1 i2)) 1)) (in_range (+ (to_rep (select x1 i2)) 1))))
(assert (= (to_rep o4) o3))
(assert (= o5 (store x1 i2 o4)))
(assert (= x1 result3))
(assert (= x2 o5))
(assert (= i2 result4))
(assert (= i3 3))
(assert (and (= o6 (+ (to_rep (select x2 i3)) 1)) (in_range (+ (to_rep (select x2 i3)) 1))))
(assert (= (to_rep o7) o6))
(assert (= o8 (store x2 i3 o7)))
(assert (= x2 result5))
(assert (= x3 o8))
(assert (= i3 result6))
(assert (= i4 4))
(assert (and (= o9 (+ (to_rep (select x3 i4)) 1)) (in_range (+ (to_rep (select x3 i4)) 1))))
(assert (= (to_rep o10) o9))
(assert (= o11 (store x3 i4 o10)))
(assert (= x3 result7))
(assert (= x4 o11))
(assert (= i4 result8))
(assert (= i5 5))
(assert (and (= o12 (+ (to_rep (select x4 i5)) 1)) (in_range (+ (to_rep (select x4 i5)) 1))))
(assert (= (to_rep o13) o12))
(assert (= o14 (store x4 i5 o13)))
(assert (= x4 result9))
(assert (= x5 o14))
(assert (= i5 result10))
(assert (= i6 6))
(assert (and (= o15 (+ (to_rep (select x5 i6)) 1)) (in_range (+ (to_rep (select x5 i6)) 1))))
(assert (= (to_rep o16) o15))
(assert (= o17 (store x5 i6 o16)))
(assert (= x5 result11))
(assert (= x6 o17))
(assert (= i6 result12))
(assert (= i7 7))
(assert (and (= o18 (+ (to_rep (select x6 i7)) 1)) (in_range (+ (to_rep (select x6 i7)) 1))))
(assert (= (to_rep o19) o18))
(assert (= o20 (store x6 i7 o19)))
(assert (= x6 result13))
(assert (= x7 o20))
(assert (= i7 result14))
(assert (= i8 8))
(assert (and (= o21 (+ (to_rep (select x7 i8)) 1)) (in_range (+ (to_rep (select x7 i8)) 1))))
(assert (= (to_rep o22) o21))
(assert (= o23 (store x7 i8 o22)))
(assert (= x7 result15))
(assert (= x8 o23))
(assert (= i8 result16))
(assert (= i9 9))
(assert (and (= o24 (+ (to_rep (select x8 i9)) 1)) (in_range (+ (to_rep (select x8 i9)) 1))))
(assert (= (to_rep o25) o24))
(assert (= o26 (store x8 i9 o25)))
(assert (= x8 result17))
(assert (= x9 o26))
(assert (= i9 result18))
(assert (= i10 10))
(assert (and (= o27 (+ (to_rep (select x9 i10)) 1)) (in_range (+ (to_rep (select x9 i10)) 1))))
(assert (= (to_rep o28) o27))
(assert (= o29 (store x9 i10 o28)))
(assert (= result19 (mk_map__ref x9)))
(assert (= x10 o29))
(assert (= i11 (mk_int__ref i10)))
(assert (= x11 (mk_map__ref x10)))
(assert (= i12 i10))
(assert (= x12 x10))
(assert (not (= (to_rep (select (map__content x11) 1)) 1)))
(check-sat)
(exit)
