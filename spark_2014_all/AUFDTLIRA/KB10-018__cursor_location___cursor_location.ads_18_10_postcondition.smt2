(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort location 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (location location) Bool)
(declare-const dummy location)
(declare-datatypes () ((location__ref (mk_location__ref (location__content location)))))
(define-fun location__ref___projection ((a location__ref)) location (location__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 2)) (in_range1 temp___expr_166)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-fun change_side (Int) Int)
(declare-fun change_side__function_guard (Int Int) Bool)
(assert (forall ((side Int)) (! (=> (dynamic_invariant side true true true true) (dynamic_invariant (change_side side) true false true true)) :pattern ((change_side side)))))
(assert (forall ((side Int)) (! (=> (dynamic_invariant side true true true true) (= (change_side side) (ite (= side 1) 2 1))) :pattern ((change_side side)))))
(declare-const side Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const request (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const du_available (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const other_side Int)
(declare-const cursor_location__fulfill_condition__result Bool)
(declare-const o Int)
(declare-const result Int)
(declare-const other_side1 Int)
(declare-const result1 Bool)
(declare-const cursor_location__fulfill_condition__result1 Bool)
(declare-const cursor_location__fulfill_condition__result2 Bool)
(declare-const cursor_location__fulfill_condition__result3 Bool)
(declare-const other_side2 Int)
(declare-const cursor_location__fulfill_condition__result4 Bool)
(declare-const other_side3 Int)
(declare-const cursor_location__fulfill_condition__result5 Bool)
(declare-const result2 Bool)
(assert (in_range1 side))
(assert (=> (<= 1 2) (in_range1 other_side)))
(assert (and (= o (change_side side)) (and (in_range1 o) (= o (ite (= side 1) 2 1)))))
(assert (= result other_side))
(assert (= other_side1 o))
(assert (= cursor_location__fulfill_condition__result1 cursor_location__fulfill_condition__result2))
(assert (= cursor_location__fulfill_condition__result3 cursor_location__fulfill_condition__result1))
(assert (= result1 cursor_location__fulfill_condition__result))
(assert (= cursor_location__fulfill_condition__result1 (ite (and (= (select du_available side) true) (or (= (select request side) true) (not (= (select du_available other_side1) true)))) true false)))
(assert (= (mk_bool__ref cursor_location__fulfill_condition__result4) (mk_bool__ref cursor_location__fulfill_condition__result2)))
(assert (= other_side2 other_side1))
(assert (= cursor_location__fulfill_condition__result5 cursor_location__fulfill_condition__result3))
(assert (= other_side3 other_side1))
(assert (= result2 cursor_location__fulfill_condition__result4))
(assert (not (= (select du_available side) true)))
(check-sat)
(exit)
