(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tarD1 0)
(declare-fun tarD1qtint (tarD1) Int)
(assert (forall ((i tarD1)) (and (<= 1 (tarD1qtint i)) (<= (tarD1qtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (tarD1 tarD1) Bool)
(declare-const dummy1 tarD1)
(declare-datatypes () ((tarD1__ref (mk_tarD1__ref (tarD1__content tarD1)))))
(define-fun tarD1__ref___projection ((a tarD1__ref)) tarD1 (tarD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t11b 0)
(declare-fun t11bqtint (t11b) Int)
(assert (forall ((i t11b)) (and (<= 1 (t11bqtint i)) (<= (t11bqtint i) 10))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t11b t11b) Bool)
(declare-const dummy2 t11b)
(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun iter_array__x__aggregate_def (Int) (Array Int natural))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 0))
(assert (forall ((temp___208 Int)) (=> (dynamic_invariant temp___208 true true true true) (forall ((temp___209 Int)) (= (select (iter_array__x__aggregate_def temp___208) temp___209) rliteral)))))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 1))
(declare-const rliteral2 natural)
(assert (= (naturalqtint rliteral2) 2))
(declare-const x (Array Int natural))
(declare-const c8b Int)
(declare-const j Int)
(declare-const temp___224 Int)
(declare-const temp___222 (Array Int natural))
(declare-const result (Array Int natural))
(declare-const x1 (Array Int natural))
(declare-const result1 Int)
(declare-const c8b1 Int)
(declare-const result2 (Array Int natural))
(declare-const x2 (Array Int natural))
(declare-const result3 Int)
(declare-const c8b2 Int)
(declare-const result4 (Array Int natural))
(declare-const x3 (Array Int natural))
(declare-const result5 Int)
(declare-const c8b3 Int)
(declare-const result6 (Array Int natural))
(declare-const x4 (Array Int natural))
(declare-const result7 Int)
(declare-const c8b4 Int)
(declare-const result8 (Array Int natural))
(declare-const x5 (Array Int natural))
(declare-const result9 Int)
(declare-const c8b5 Int)
(declare-const result10 (Array Int natural))
(declare-const x6 (Array Int natural))
(declare-const result11 Int)
(declare-const c8b6 Int)
(declare-const result12 (Array Int natural))
(declare-const x7 (Array Int natural))
(declare-const result13 Int)
(declare-const c8b7 Int)
(declare-const result14 (Array Int natural))
(declare-const x8 (Array Int natural))
(declare-const result15 Int)
(declare-const c8b8 Int)
(declare-const result16 (Array Int natural))
(declare-const x9 (Array Int natural))
(declare-const result17 Int)
(declare-const c8b9 Int)
(declare-const result18 map__ref)
(declare-const x10 (Array Int natural))
(declare-const result19 int__ref)
(declare-const c8b10 Int)
(declare-const result20 map__ref)
(declare-const x11 (Array Int natural))
(declare-const result21 int__ref)
(declare-const j1 Int)
(declare-const result22 map__ref)
(declare-const x12 (Array Int natural))
(declare-const x13 (Array Int natural))
(declare-const j2 Int)
(declare-const x14 map__ref)
(declare-const j3 int__ref)
(declare-const x15 (Array Int natural))
(declare-const j4 Int)
(declare-const x16 map__ref)
(declare-const j5 int__ref)
(declare-const x17 (Array Int natural))
(declare-const j6 Int)
(assert (= result x))
(assert (= x1 (iter_array__x__aggregate_def 0)))
(assert (forall ((j7 Int)) (=> (and (<= 1 j7) (<= j7 10)) (= (to_rep (select x1 j7)) 0))))
(assert (forall ((temp___212 Int)) (=> (and (<= 1 temp___212) (<= temp___212 10)) (= (to_rep (select x1 temp___212)) 0))))
(assert (= result1 c8b))
(assert (= c8b1 1))
(assert (= result2 x1))
(assert (= x2 (store x1 c8b1 rliteral1)))
(assert (= result3 c8b1))
(assert (= c8b2 2))
(assert (= result4 x2))
(assert (= x3 (store x2 c8b2 rliteral1)))
(assert (= result5 c8b2))
(assert (= c8b3 3))
(assert (= result6 x3))
(assert (= x4 (store x3 c8b3 rliteral1)))
(assert (= result7 c8b3))
(assert (= c8b4 4))
(assert (= result8 x4))
(assert (= x5 (store x4 c8b4 rliteral1)))
(assert (= result9 c8b4))
(assert (= c8b5 5))
(assert (= result10 x5))
(assert (= x6 (store x5 c8b5 rliteral1)))
(assert (= result11 c8b5))
(assert (= c8b6 6))
(assert (= result12 x6))
(assert (= x7 (store x6 c8b6 rliteral1)))
(assert (= result13 c8b6))
(assert (= c8b7 7))
(assert (= result14 x7))
(assert (= x8 (store x7 c8b7 rliteral1)))
(assert (= result15 c8b7))
(assert (= c8b8 8))
(assert (= result16 x8))
(assert (= x9 (store x8 c8b8 rliteral1)))
(assert (= result17 c8b8))
(assert (= c8b9 9))
(assert (= result18 (mk_map__ref x9)))
(assert (= x10 (store x9 c8b9 rliteral1)))
(assert (= result19 (mk_int__ref c8b9)))
(assert (= c8b10 10))
(assert (= result20 (mk_map__ref x10)))
(assert (= x11 (store x10 c8b10 rliteral1)))
(assert (forall ((temp___219 Int)) (=> (and (<= 1 temp___219) (<= temp___219 10)) (= (to_rep (select x11 temp___219)) 1))))
(assert (= result21 (mk_int__ref j)))
(assert (= j1 1))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= temp___224 j1)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= temp___222 x11)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= result22 (mk_map__ref x11))))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= x12 (store x11 j1 rliteral2))))
(assert (=> (and (<= 1 j1) (<= j1 10)) (forall ((k Int)) (=> (and (<= 1 k) (<= k j2)) (= (to_rep (select x13 k)) 2)))))
(assert (=> (and (<= 1 j1) (<= j1 10)) (and (and (forall ((temp___223 Int)) (=> (and (<= 1 temp___223) (<= temp___223 10)) (=> (or (< 10 temp___223) (or (< temp___223 1) (< j2 temp___223))) (= (select x13 temp___223) (select temp___222 temp___223))))) (=> (<= 1 10) (in_range3 j2))) (and (<= 1 j2) (<= j2 10)))))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= j2 10)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= j3 (mk_int__ref j2))))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= x14 (mk_map__ref x13))))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= j4 j2)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= x15 x13)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= j5 j3)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= x16 x14)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= j6 j4)))
(assert (=> (and (<= 1 j1) (<= j1 10)) (= x17 x15)))
(assert (=> (not (and (<= 1 j1) (<= j1 10))) (= j5 (mk_int__ref j1))))
(assert (=> (not (and (<= 1 j1) (<= j1 10))) (= x16 (mk_map__ref x11))))
(assert (=> (not (and (<= 1 j1) (<= j1 10))) (= j6 j1)))
(assert (=> (not (and (<= 1 j1) (<= j1 10))) (= x17 x11)))
(declare-const temp___227 Int)
(assert (<= 1 temp___227))
(assert (<= temp___227 10))
(assert (not (= (to_rep (select (map__content x16) temp___227)) 2)))
(check-sat)
(exit)
