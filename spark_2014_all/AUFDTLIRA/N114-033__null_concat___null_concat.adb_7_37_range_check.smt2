(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (integer Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a integer)) (forall ((b (Array Int integer))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int integer) Int Int integer) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((b integer)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (integer Int integer) (Array Int integer))
(assert (forall ((a integer) (b integer)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq1 (us_t us_t) Bool)
(declare-const dummy1 us_t)
(declare-datatypes () ((my_arrays__ref (mk_my_arrays__ref (my_arrays__content us_t)))))
(define-fun my_arrays__ref___projection ((a my_arrays__ref)) us_t (my_arrays__content a))
(define-fun dynamic_invariant ((temp___expr_174 us_t) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool) (temp___do_typ_inv_173 Bool)) Bool (=> (not (= temp___skip_constant_171 true)) (dynamic_property (- 2147483648) 2147483647 (first1 temp___expr_174) (last1 temp___expr_174))))
(declare-const a1 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun null_concat__p_good__a1__aggregate_def (Int) (Array Int integer))
(declare-sort t3b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (t3b t3b) Bool)
(declare-const dummy2 t3b)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content t3b)))))
(define-fun t3b__ref___projection ((a t3b__ref)) t3b (t3b__content a))
(declare-const a2 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun null_concat__p_good__a2__aggregate_def (Int Int) (Array Int integer))
(declare-const a3 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const a4 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert (= a1 (of_array (null_concat__p_good__a1__aggregate_def 0) 1 (- 5))))
(assert (forall ((temp___156 Int)) (=> (dynamic_invariant1 temp___156 true true true true) (forall ((temp___157 Int)) (= (to_rep (select (null_concat__p_good__a1__aggregate_def temp___156) temp___157)) temp___156)))))
(assert (= a2 (of_array (null_concat__p_good__a2__aggregate_def 1 2) 1 10)))
(assert (forall ((temp___159 Int) (temp___160 Int)) (let ((temp___158 (null_concat__p_good__a2__aggregate_def temp___159 temp___160))) (=> (and (dynamic_invariant1 temp___159 true true true true) (dynamic_invariant1 temp___160 true true true true)) (forall ((temp___161 Int)) (ite (and (<= 6 temp___161) (<= temp___161 10)) (= (to_rep (select temp___158 temp___161)) temp___160) (=> (and (<= 1 temp___161) (<= temp___161 5)) (= (to_rep (select temp___158 temp___161)) temp___159))))))))
(assert (= a3 (ite (= (length a1) 0) (of_array (to_array a2) (first1 a2) (last1 a2)) (of_array (concat1 (to_array a1) (first1 a1) (last1 a1) (to_array a2) (first1 a2) (last1 a2)) (first1 a1) (- (+ (first1 a1) (+ (ite (<= (first1 a1) (last1 a1)) (+ (- (last1 a1) (first1 a1)) 1) 0) (ite (<= (first1 a2) (last1 a2)) (+ (- (last1 a2) (first1 a2)) 1) 0))) 1)))))
(assert (= a4 (let ((temp___162 2)) (ite (= (length a1) 0) (of_array (singleton1 (of_rep temp___162) (- 2147483648)) (- 2147483648) (- 2147483648)) (of_array (concat_singleton_right (to_array a1) (first1 a1) (last1 a1) (of_rep temp___162)) (first1 a1) (- (+ (first1 a1) (+ (ite (<= (first1 a1) (last1 a1)) (+ (- (last1 a1) (first1 a1)) 1) 0) 1)) 1))))))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(assert (= (mk___t (null_concat__p_good__a1__aggregate_def 0) (mk 1 (- 5))) a1))
(assert (dynamic_invariant a1 true false true true))
(assert (= (mk___t (null_concat__p_good__a2__aggregate_def 1 2) (mk 1 10)) a2))
(assert (dynamic_invariant a2 true false true true))
(assert (not (= (length a1) 0)))
(assert (=> (<= (to_rep (first (rt a2))) (to_rep (last (rt a2)))) (= o (+ (- (to_rep (last (rt a2))) (to_rep (first (rt a2)))) 1))))
(assert (=> (not (<= (to_rep (first (rt a2))) (to_rep (last (rt a2))))) (= o 0)))
(assert (=> (<= (to_rep (first (rt a1))) (to_rep (last (rt a1)))) (= o1 (+ (- (to_rep (last (rt a1))) (to_rep (first (rt a1)))) 1))))
(assert (=> (not (<= (to_rep (first (rt a1))) (to_rep (last (rt a1))))) (= o1 0)))
(assert (= o2 (+ o1 o)))
(assert (= o3 (+ (to_rep (first (rt a1))) o2)))
(assert (= o4 (- o3 1)))
(assert (not (in_range1 o4)))
(check-sat)
(exit)
