(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (character Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a character)) (forall ((b (Array Int character))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int character) Int Int character) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((b character)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (character Int character) (Array Int character))
(assert (forall ((a character) (b character)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-sort index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (index_type index_type) Bool)
(declare-const dummy4 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_579 Int) (temp___is_init_575 Bool) (temp___skip_constant_576 Bool) (temp___do_toplevel_577 Bool) (temp___do_typ_inv_578 Bool)) Bool (=> (or (= temp___is_init_575 true) (<= 1 10)) (in_range3 temp___expr_579)))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (natural natural) Bool)
(declare-const dummy5 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep2 (natural) Int)
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_164 Int)) (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last)) (= (to_rep2 (select a temp___idx_164)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_164))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_164 Int)) (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last)) (= (to_rep2 (select a temp___idx_164)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_164)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort index_type1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (index_type1 index_type1) Bool)
(declare-const dummy6 index_type1)
(declare-datatypes () ((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref___2__projection ((a index_type__ref1)) index_type1 (index_type__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_603 Int) (temp___is_init_599 Bool) (temp___skip_constant_600 Bool) (temp___do_toplevel_601 Bool) (temp___do_typ_inv_602 Bool)) Bool (=> (or (= temp___is_init_599 true) (<= 1 10)) (in_range5 temp___expr_603)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun search_demo__search_array__aggregate_def (Int Int Int Int Int Int Int Int Int Int) (Array Int natural))
(declare-fun temp___String_Literal_629 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_629 us_void_param) 1)) 84) (= (to_rep (select (temp___String_Literal_629 us_void_param) 2)) 104)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 3)) 101)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 5)) 118)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 6)) 97)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 7)) 108)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 8)) 117)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 9)) 101)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 11)) 49)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 12)) 48)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 13)) 32)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 14)) 119)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 15)) 97)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 16)) 115)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 17)) 32)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 18)) 102)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 19)) 111)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 20)) 117)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 21)) 110)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 22)) 100)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 23)) 32)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 24)) 97)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 25)) 116)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 26)) 32)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 27)) 105)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 28)) 110)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 29)) 100)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 30)) 101)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 31)) 120)) (= (to_rep (select (temp___String_Literal_629 us_void_param) 32)) 32)) :pattern ((temp___String_Literal_629 us_void_param)))))
(declare-fun temp___String_Literal_632 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_632 us_void_param) 1)) 84) (= (to_rep (select (temp___String_Literal_632 us_void_param) 2)) 104)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 3)) 101)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 5)) 118)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 6)) 97)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 7)) 108)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 8)) 117)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 9)) 101)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 11)) 49)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 12)) 48)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 13)) 32)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 14)) 119)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 15)) 97)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 16)) 115)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 17)) 32)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 18)) 110)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 19)) 111)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 20)) 116)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 21)) 32)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 22)) 102)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 23)) 111)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 24)) 117)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 25)) 110)) (= (to_rep (select (temp___String_Literal_632 us_void_param) 26)) 100)) :pattern ((temp___String_Literal_632 us_void_param)))))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant6 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(assert (forall ((temp___618 Int) (temp___619 Int) (temp___620 Int) (temp___621 Int) (temp___622 Int) (temp___623 Int) (temp___624 Int) (temp___625 Int) (temp___626 Int) (temp___627 Int)) (let ((temp___617 (search_demo__search_array__aggregate_def temp___618 temp___619 temp___620 temp___621 temp___622 temp___623 temp___624 temp___625 temp___626 temp___627))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant3 temp___618 true true true true) (dynamic_invariant3 temp___619 true true true true)) (dynamic_invariant3 temp___620 true true true true)) (dynamic_invariant3 temp___621 true true true true)) (dynamic_invariant3 temp___622 true true true true)) (dynamic_invariant3 temp___623 true true true true)) (dynamic_invariant3 temp___624 true true true true)) (dynamic_invariant3 temp___625 true true true true)) (dynamic_invariant3 temp___626 true true true true)) (dynamic_invariant3 temp___627 true true true true)) (and (and (and (and (and (and (and (and (and (= (to_rep2 (select temp___617 1)) temp___618) (= (to_rep2 (select temp___617 2)) temp___619)) (= (to_rep2 (select temp___617 3)) temp___620)) (= (to_rep2 (select temp___617 4)) temp___621)) (= (to_rep2 (select temp___617 5)) temp___622)) (= (to_rep2 (select temp___617 6)) temp___623)) (= (to_rep2 (select temp___617 7)) temp___624)) (= (to_rep2 (select temp___617 8)) temp___625)) (= (to_rep2 (select temp___617 9)) temp___626)) (= (to_rep2 (select temp___617 10)) temp___627))))))
(declare-const search_array (Array Int natural))
(declare-const result_index Int)
(declare-const result (Array Int natural))
(declare-const search_array1 (Array Int natural))
(assert (= result search_array))
(assert (= search_array1 (search_demo__search_array__aggregate_def 2 4 6 8 10 12 14 16 18 20)))
(assert (=> (<= 1 10) (in_range3 result_index)))
(declare-const j Int)
(assert (<= 1 j))
(assert (<= j 10))
(declare-const k Int)
(assert (<= (+ j 1) k))
(assert (<= k 10))
(assert (not (< (to_rep2 (select search_array1 j)) (to_rep2 (select search_array1 k)))))
(check-sat)
(exit)
