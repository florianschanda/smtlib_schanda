(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic to_lower : int -> int

logic to_lower__function_guard : int, int -> prop

axiom to_lower__post_axiom :
  (forall item:int [to_lower(item)]. (in_range3(item) ->
  in_range3(to_lower(item))))

logic to_upper : int -> int

logic to_upper__function_guard : int, int -> prop

axiom to_upper__post_axiom :
  (forall item:int [to_upper(item)]. (in_range3(item) ->
  in_range3(to_upper(item))))

logic to_caml_char2 : us_t, us_t, int -> bool

logic to_caml_char2__function_guard : bool, us_t, us_t, int -> prop

axiom to_caml_char2__post_axiom : true

axiom to_caml_char2__def_axiom :
  (forall str:(int,character) farray. forall str1:t.
  forall res:(int,character) farray. forall res1:t.
  (forall last2:int [to_caml_char2({ elts = str; rt = str1 }, { elts = res;
  rt = res1 }, last2)]. (((to_caml_char2({ elts = str; rt = str1 }, { elts =
  res; rt = res1 }, last2) = true) ->
  (forall j:int. (((to_rep1(first(str1)) <= j) and (j <= last2)) ->
  (((j = to_rep1(first(str1))) ->
  (to_rep((res[j])) = to_upper(to_rep((str[j]))))) and
  ((not (j = to_rep1(first(str1)))) -> (((((97 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 122))) and
  ((65 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 90)))) ->
  (to_rep((res[j])) = to_upper(to_rep((str[j]))))) and
  ((not (((97 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 122))) and
  ((65 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 90))))) ->
  (to_rep((res[j])) = to_lower(to_rep((str[j]))))))))))) and
  ((forall j:int. (((to_rep1(first(str1)) <= j) and (j <= last2)) ->
   (((j = to_rep1(first(str1))) and
   (to_rep((res[j])) = to_upper(to_rep((str[j]))))) or
   ((not (j = to_rep1(first(str1)))) and
   (((((97 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 122))) and
   ((65 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 90)))) and
   (to_rep((res[j])) = to_upper(to_rep((str[j]))))) or
   ((not (((97 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 122))) and
   ((65 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 90))))) and
   (to_rep((res[j])) = to_lower(to_rep((str[j])))))))))) ->
  (to_caml_char2({ elts = str; rt = str1 }, { elts = res; rt = res1 },
  last2) = true)))))

logic str : (int,character) farray

logic str1 : t

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type tTretSP1__ref = { tTretSP1__content : integer
}

function tTretSP1__ref___projection(a: tTretSP1__ref) : integer =
  (a).tTretSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,character) farray

logic dummy7 : t1

type tretS__ref = { tretS__content : us_t1
}

function tretS__ref___projection(a: tretS__ref) : us_t1 = (a).tretS__content

logic ret__first : integer

logic ret__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t9b__ref = { t9b__content : integer
}

function t9b__ref___projection(a: t9b__ref) : integer = (a).t9b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall ret:(int,character) farray. forall to_up:bool. forall idx:int.
  forall hello__to_camel_case__ret__assume:(int,character) farray.
  forall hello__to_camel_case__ret__assume1:t1. forall o:int.
  forall o1:character. forall o2:(int,character) farray. forall o3:int.
  forall o4:character. forall o5:(int,character) farray. forall j:int.
  forall o6:int. forall o7:character. forall o8:int.
  forall result:(int,character) farray. forall ret1:(int,character) farray.
  forall result1:bool. forall to_up1:bool. forall result2:int.
  forall idx1:int. forall result3:(int,character) farray.
  forall ret2:(int,character) farray. forall result4:(int,character) farray.
  forall ret3:(int,character) farray. forall ret4:(int,character) farray.
  forall idx2:int. (dynamic_property(1, 2147483647, to_rep1(first(str1)),
  to_rep1(last(str1))) -> ((((slide(str, to_rep1(first(str1)),
  to_rep1(first(str1))) = hello__to_camel_case__ret__assume) and
  (mk1(to_rep1(first(str1)),
  to_rep1(last(str1))) = hello__to_camel_case__ret__assume1)) and ((({
  map__content = result } = { map__content = ret }) and
  (ret1 = hello__to_camel_case__ret__assume)) and
  ((to_rep1(ret__first) = to_rep1(first2(hello__to_camel_case__ret__assume1))) and
  (to_rep1(ret__last) = to_rep1(last2(hello__to_camel_case__ret__assume1)))))) ->
  ((dynamic_property2(to_rep1(first(str1)), to_rep1(last(str1)),
  to_rep1(ret__first), to_rep1(ret__last)) and
  ((to_rep1(ret__first) = to_rep1(first(str1))) and
  (to_rep1(ret__last) = to_rep1(last(str1))))) -> ((({ bool__content =
  result1 } = { bool__content = to_up }) and (to_up1 = of_int(1))) -> ((({
  int__content = result2 } = { int__content = idx }) and
  (idx1 = to_rep1(first(str1)))) -> (((to_rep1(first(str1)) <= idx1) and
  (idx1 <= to_rep1(last(str1)))) -> ((((to_up1 = true) and
  (((((o = to_upper(to_rep((ret1[idx1])))) and in_range3(o)) and
  (to_rep(o1) = o)) and (o2 = (ret1[idx1 <- o1]))) and ((ret1 = result3) and
  (ret2 = o2)))) or ((not (to_up1 = true)) and
  ((((((o3 = to_lower(to_rep((ret1[idx1])))) and in_range3(o3)) and
  (to_rep(o4) = o3)) and (o5 = (ret1[idx1 <- o4]))) and ((ret1 = result4) and
  (ret3 = o5))) and (ret2 = ret3)))) -> (((to_rep1(first(str1)) <= idx1) and
  (idx1 <= to_rep1(last(str1)))) -> (((to_rep1(ret__first) <= idx1) and
  (idx1 <= to_rep1(ret__last))) -> (((to_caml_char2({ elts = str; rt = str1
  }, { elts = ret4; rt = mk(to_rep1(ret__first), to_rep1(ret__last)) },
  idx2) = true) and
  (forall j1:int. (((idx2 <= j1) and (j1 <= to_rep1(last(str1)))) ->
  ((idx2 <  j1) -> (to_rep((ret4[j1])) = to_rep((str[j1]))))))) ->
  ((((forall temp___596:int. (((to_rep1(ret__first) <= temp___596) and
     (temp___596 <= to_rep1(ret__last))) -> ((idx2 <  temp___596) ->
     ((ret4[temp___596]) = (ret1[temp___596]))))) and
  ((to_rep1(first(str1)) <= to_rep1(last(str1))) ->
  dynamic_property3(to_rep1(first(str1)), to_rep1(last(str1)), idx2))) and
  ((to_rep1(first(str1)) <= idx2) and (idx2 <= to_rep1(last(str1))))) ->
  (((idx2 <= j) and (j <= to_rep1(last(str1)))) -> ((idx2 <  j) ->
  ((((((to_rep1(first(str1)) <= j) and (j <= to_rep1(last(str1)))) and
  (o6 = j)) and (o7 = (str[o6]))) and (o8 = to_rep(o7))) ->
  (to_rep1(ret__first) <= j))))))))))))))))
