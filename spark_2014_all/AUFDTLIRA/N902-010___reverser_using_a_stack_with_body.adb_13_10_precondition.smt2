(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun is_empty (us_private) Bool)
(declare-fun is_empty__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun is_full (us_private) Bool)
(declare-fun is_full__function_guard (Bool us_private) Bool)
(assert true)
(declare-sort item 0)
(declare-fun itemqtint (item) Int)
(assert (forall ((i item)) (and (<= 0 (itemqtint i)) (<= (itemqtint i) 20))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (item item) Bool)
(declare-const dummy1 item)
(declare-datatypes () ((item__ref (mk_item__ref (item__content item)))))
(define-fun item__ref___projection ((a item__ref)) item (item__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 20)) (in_range2 temp___expr_159)))
(define-fun to_rep1 ((x item)) Int (itemqtint x))
(declare-fun of_rep1 (Int) item)
(assert (forall ((x item)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x item)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort array_range 0)
(declare-fun array_rangeqtint (array_range) Int)
(assert (forall ((i array_range)) (and (<= 1 (array_rangeqtint i)) (<= (array_rangeqtint i) 10000))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (array_range array_range) Bool)
(declare-const dummy2 array_range)
(declare-datatypes () ((array_range__ref (mk_array_range__ref (array_range__content array_range)))))
(define-fun array_range__ref___projection ((a array_range__ref)) array_range (array_range__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int item))))))
(declare-fun slide ((Array Int item) Int Int) (Array Int item))
(assert (forall ((a (Array Int item))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int item))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int item)) (a__first Int) (a__last Int) (b (Array Int item)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int item)) (b (Array Int item))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int item)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int item) (elts a))
(define-fun of_array ((a (Array Int item)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int item)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int item)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int item)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int item))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int item))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int item))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((array_of_items__ref (mk_array_of_items__ref (array_of_items__content us_t)))))
(define-fun array_of_items__ref___projection ((a array_of_items__ref)) us_t (array_of_items__content a))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 10000)) (in_range3 temp___expr_166)))
(define-fun dynamic_invariant3 ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property 1 10000 (first1 temp___expr_173) (last1 temp___expr_173))))
(declare-const a (Array Int item))
(declare-const i Int)
(declare-const j Int)
(declare-const sp us_private)
(declare-const vec us_private)
(declare-const sp1 us_private)
(declare-const vec1 us_private)
(declare-const result Int)
(declare-const i1 Int)
(declare-const i2 Int)
(declare-const sp2 us_private)
(declare-const vec2 us_private)
(declare-const result1 Bool)
(declare-const sp3 us_private)
(declare-const vec3 us_private)
(declare-const sp4 us_private)
(declare-const vec4 us_private)
(declare-const sp5 us_private)
(declare-const vec5 us_private)
(declare-const i3 Int)
(declare-const sp6 us_private)
(declare-const vec6 us_private)
(declare-const i4 Int)
(declare-const sp7 us_private)
(declare-const vec7 us_private)
(declare-const i5 Int)
(declare-const sp8 us_private)
(declare-const vec8 us_private)
(declare-const i6 Int)
(declare-const sp9 us_private)
(declare-const vec9 us_private)
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const a1 (Array Int item))
(declare-const j2 Int)
(declare-const sp10 us_private)
(declare-const result3 Bool)
(define-fun vec10 () us_private__ref (mk___private__ref vec8))
(define-fun sp11 () us_private__ref (mk___private__ref sp8))
(define-fun vec11 () us_private__ref (mk___private__ref vec6))
(define-fun sp12 () us_private__ref (mk___private__ref sp6))
(assert (dynamic_property 1 10000 (to_rep a__first) (to_rep a__last)))
(assert (and (< 0 (ite (<= (to_rep a__first) (to_rep a__last)) (+ (- (to_rep a__last) (to_rep a__first)) 1) 0)) (<= (ite (<= (to_rep a__first) (to_rep a__last)) (+ (- (to_rep a__last) (to_rep a__first)) 1) 0) 100)))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 (to_rep a__first)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (and (<= (to_rep a__first) i2) (<= i2 (to_rep a__last)))))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (or (and (and (and (= vec2 vec4) (= sp2 sp4)) (and (= vec5 vec2) (= sp5 sp2))) (and (= result1 (is_full sp2)) (= result1 true))) (and (and (= result1 (is_full sp2)) (not (= result1 true))) (and (and (and (= vec3 vec4) (= sp3 sp4)) (and (= vec5 vec3) (= sp5 sp3))) (= i2 (to_rep a__last)))))))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= vec11 (mk___private__ref vec4))))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= sp12 (mk___private__ref sp4))))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= i2 i3)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= vec7 vec5)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= sp7 sp5)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= i4 i2)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= vec10 vec11)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= sp11 sp12)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= vec9 vec7)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= sp9 sp7)))
(assert (=> (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last))) (= i6 i4)))
(assert (=> (not (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))) (= vec10 (mk___private__ref vec))))
(assert (=> (not (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))) (= sp11 (mk___private__ref sp))))
(assert (=> (not (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))) (= i1 i5)))
(assert (=> (not (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))) (= vec9 vec1)))
(assert (=> (not (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))) (= sp9 sp1)))
(assert (=> (not (and (<= (to_rep a__first) i1) (<= i1 (to_rep a__last)))) (= i6 i1)))
(assert (= result2 j))
(assert (= j1 (to_rep a__first)))
(assert (<= (to_rep a__first) j1))
(assert (<= j1 (to_rep a__last)))
(assert (and (forall ((temp___194 Int)) (=> (and (<= (to_rep a__first) temp___194) (<= temp___194 (to_rep a__last))) (=> (or (< (to_rep a__last) temp___194) (or (< temp___194 (to_rep a__first)) (<= j2 temp___194))) (= (select a1 temp___194) (select a temp___194))))) (and (<= (to_rep a__first) j2) (<= j2 (to_rep a__last)))))
(assert (= result3 (is_empty sp10)))
(assert (not (= result3 true)))
(assert (not (not (= (is_empty sp10) true))))
(check-sat)
(exit)
