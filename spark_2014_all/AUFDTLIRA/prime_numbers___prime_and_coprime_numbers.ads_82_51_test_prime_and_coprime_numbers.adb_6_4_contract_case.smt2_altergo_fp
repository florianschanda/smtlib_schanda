(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type value_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : value_type, value_type -> bool

logic dummy1 : value_type

type value_type__ref = { value_type__content : value_type
}

function value_type__ref___projection(a: value_type__ref) : value_type =
  (a).value_type__content

type tnumber_list_typeD1

predicate in_range3(x: int) = ((0 <= x) and (x <= 100000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tnumber_list_typeD1, tnumber_list_typeD1 -> bool

logic dummy2 : tnumber_list_typeD1

type tnumber_list_typeD1__ref = { tnumber_list_typeD1__content :
tnumber_list_typeD1
}

function tnumber_list_typeD1__ref___projection(a: tnumber_list_typeD1__ref) : tnumber_list_typeD1 =
  (a).tnumber_list_typeD1__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bool, int -> (int,bool) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)])))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

type nearest_mode

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : nearest_mode, nearest_mode -> bool

logic dummy3 : nearest_mode

type nearest_mode__ref = { nearest_mode__content : nearest_mode
}

function nearest_mode__ref___projection(a: nearest_mode__ref) : nearest_mode =
  (a).nearest_mode__content

logic has_true : (int,bool) farray, int, int -> bool

logic has_true__function_guard : bool, (int,bool) farray, int, int -> prop

axiom has_true__post_axiom : true

axiom has_true__def_axiom :
  (forall number_list:(int,bool) farray.
  (forall low:int. forall high:int [has_true(number_list, low, high)].
  ((has_true(number_list, low, high) = true) <->
  (exists v:int. (((low <= v) and (v <= high)) and
  ((number_list[v]) = true))))))

logic number_list : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic mode : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic right : int

logic left : int

logic right_is_out : bool

logic left_is_out : bool

logic test_prime_and_coprime_numbers__p__nearest_number__result : int

logic o : int

logic o1 : int

logic o2 : int

logic temp___236 : int

logic temp___235 : bool

logic o3 : int

logic o4 : int

logic v : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic temp___238 : bool

logic temp___237 : int

logic o10 : int

logic v1 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic o22 : int

logic o23 : int

logic v2 : int

logic v3 : int

logic o24 : int

logic o25 : bool

logic v4 : int

logic o26 : int

logic o27 : int

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : int

logic o32 : int

logic o33 : int

logic o34 : bool

logic v5 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic o39 : int

logic o40 : int

logic o41 : int

logic o42 : int

logic o43 : bool

logic right_is_out1 : bool

logic left_is_out1 : bool

logic test_prime_and_coprime_numbers__p__nearest_number__result1 : int

logic result : int

logic right1 : int

logic result1 : int

logic left1 : int

logic result2 : bool

logic result3 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result2 : int

logic result4 : int

logic right2 : int

logic result5 : bool

logic right_is_out2 : bool

logic result6 : bool

logic right3 : int

logic right_is_out3 : bool

logic result7 : int

logic right4 : int

logic result8 : bool

logic right_is_out4 : bool

logic result9 : bool

logic right_is_out5 : bool

logic right_is_out6 : bool

logic right5 : int

logic right_is_out7 : bool

logic right6 : int

logic right_is_out8 : bool

logic right7 : int

logic right_is_out9 : bool

logic right8 : int

logic right_is_out10 : bool

logic right9 : int

logic right_is_out11 : bool

logic right10 : int

logic right_is_out12 : bool

logic result10 : bool

logic right_is_out13 : bool

logic right11 : int

logic right_is_out14 : bool

logic right12 : int

logic right_is_out15 : bool

logic result11 : int

logic left2 : int

logic result12 : bool

logic left_is_out2 : bool

logic result13 : bool

logic left3 : int

logic left_is_out3 : bool

logic result14 : int

logic left4 : int

logic result15 : bool

logic left_is_out4 : bool

logic result16 : bool

logic left_is_out5 : bool

logic left_is_out6 : bool

logic left5 : int

logic left_is_out7 : bool

logic left6 : int

logic left_is_out8 : bool

logic left7 : int

logic left_is_out9 : bool

logic left8 : int

logic left_is_out10 : bool

logic left9 : int

logic left_is_out11 : bool

logic left10 : int

logic left_is_out12 : bool

logic left11 : int

logic left_is_out13 : bool

logic left12 : int

logic left_is_out14 : bool

logic result17 : bool

logic left_is_out15 : bool

logic left13 : int

logic left_is_out16 : bool

logic left14 : int

logic left_is_out17 : bool

logic result18 : bool

logic result19 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result3 : int

logic result20 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result4 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result5 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result6 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result7 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result8 : int

logic result21 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result9 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result10 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result11 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result12 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result13 : int

logic result22 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result14 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result15 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result16 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result17 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result18 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result19 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result20 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result21 : int

logic test_prime_and_coprime_numbers__p__nearest_number__result22 : int

logic right13 : int

logic left15 : int

logic right_is_out16 : bool

logic left_is_out18 : bool

logic test_prime_and_coprime_numbers__p__nearest_number__result23 : int

logic right14 : int

logic left16 : int

logic right_is_out17 : bool

logic left_is_out19 : bool

logic test_prime_and_coprime_numbers__p__nearest_number__result24 : int

logic right15 : int

logic left17 : int

logic right_is_out18 : bool

logic left_is_out20 : bool

logic test_prime_and_coprime_numbers__p__nearest_number__result25 : int

logic right16 : int

logic left18 : int

logic right_is_out19 : bool

logic left_is_out21 : bool

logic test_prime_and_coprime_numbers__p__nearest_number__result26 : int

logic result23 : bool

logic result24 : bool

logic result25 : bool

logic result26 : bool

axiom H : in_range4(mode)

axiom H1 : in_range2(value)

axiom H2 : (((0 <= value) and (value <= 100000)) and (((mode = 0) ->
  (has_true(number_list, value, 100000) = true)) and ((not (mode = 0)) ->
  (((mode = 1) -> (has_true(number_list, 0, value) = true)) and
  ((not (mode = 1)) -> (has_true(number_list, 0, 100000) = true))))))

axiom H3 : (result = right)

axiom H4 : (right1 = 0)

axiom H5 : in_range1(right1)

axiom H6 : (result1 = left)

axiom H7 : (left1 = 0)

axiom H8 : in_range1(left1)

axiom H9 :
  (((((test_prime_and_coprime_numbers__p__nearest_number__result23 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  ((left_is_out18 = left_is_out) and ((right_is_out16 = right_is_out) and
  ((left15 = left1) and (right13 = right1))))) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result24 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  ((left_is_out19 = left_is_out1) and ((right_is_out17 = right_is_out1) and
  ((left16 = left1) and (right14 = right1)))))) and (((((0 <= value) and
  (value <= 100000)) and (o = value)) and (result2 = (number_list[o]))) and
  ((result2 = true) and
  ((result3 = test_prime_and_coprime_numbers__p__nearest_number__result) and
  (test_prime_and_coprime_numbers__p__nearest_number__result2 = value))))) or
  ((((((0 <= value) and (value <= 100000)) and (o = value)) and
  (result2 = (number_list[o]))) and ((not (result2 = true)) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result2 = test_prime_and_coprime_numbers__p__nearest_number__result) and
  (test_prime_and_coprime_numbers__p__nearest_number__result2 = test_prime_and_coprime_numbers__p__nearest_number__result1)))) and
  ((((test_prime_and_coprime_numbers__p__nearest_number__result23 = test_prime_and_coprime_numbers__p__nearest_number__result21) and
  ((left_is_out18 = left_is_out16) and ((right_is_out16 = right_is_out14) and
  ((left15 = left13) and (right13 = right11))))) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result24 = test_prime_and_coprime_numbers__p__nearest_number__result22) and
  ((left_is_out19 = left_is_out17) and ((right_is_out17 = right_is_out15) and
  ((left16 = left14) and (right14 = right12)))))) and (((((mode = 0) or
  (mode = 2)) -> ((((((o1 = value) and (not (value = 2147483647))) and
  (o2 = (o1 + 1))) and ((right1 = result4) and (right2 = o2))) and
  ((((temp___236 = right2) and ((temp___235 = right_is_out) and
  (((result5 = right_is_out) and (((100000 <  right2) ->
  (right_is_out2 = true)) and ((not (100000 <  right2)) ->
  (right_is_out2 = false)))) and (((((right_is_out2 = right_is_out7) and
  (right2 = right5)) and ((right_is_out8 = right_is_out2) and
  (right6 = right2))) and ((((right_is_out2 = true) -> (result6 = true)) and
  ((not (right_is_out2 = true)) -> ((((0 <= right2) and
  (right2 <= 100000)) and (o3 = right2)) and
  (result6 = (number_list[o3]))))) and (result6 = true))) or
  (((((right_is_out2 = true) -> (result6 = true)) and
  ((not (right_is_out2 = true)) -> ((((0 <= right2) and
  (right2 <= 100000)) and (o3 = right2)) and
  (result6 = (number_list[o3]))))) and (not (result6 = true))) and
  ((((right_is_out7 = right_is_out5) and (right4 = right5)) and
  ((right_is_out8 = right_is_out6) and (right6 = right4))) and
  (((((value + 1) <= right3) and (right3 <= 100000)) and
  (forall v6:int. (((value <= v6) and (v6 <= right3)) ->
  (not ((number_list[v6]) = true))))) and ((((- 2147483648) <= 2147483647) ->
  in_range1(right3)) and (((((o5 = right3) and
  (not (right3 = 2147483647))) and (o6 = (o5 + 1))) and
  ((right3 = result7) and (right4 = o6))) and
  (((right_is_out4 = right_is_out5) and (right_is_out6 = right_is_out4)) and
  (((right_is_out3 = result8) and (((100000 <  right4) ->
  (right_is_out4 = true)) and ((not (100000 <  right4)) ->
  (right_is_out4 = false)))) and ((((right_is_out4 = true) ->
  (result9 = true)) and ((not (right_is_out4 = true)) -> ((((0 <= right4) and
  (right4 <= 100000)) and (o7 = right4)) and
  (result9 = (number_list[o7]))))) and (result9 = true))))))))))))) and
  (((right_is_out9 = right_is_out7) and (right7 = right5)) and
  ((right_is_out10 = right_is_out8) and (right8 = right6)))) and
  (((right_is_out11 = right_is_out9) and (right9 = right7)) and
  ((right_is_out12 = right_is_out10) and (right10 = right8))))) and
  (((right_is_out14 = right_is_out11) and (right11 = right9)) and
  ((right_is_out15 = right_is_out12) and (right12 = right10))))) and
  ((not ((mode = 0) or (mode = 2))) -> (((result10 = right_is_out) and
  (right_is_out13 = of_int(1))) and (((right_is_out14 = right_is_out13) and
  (right11 = right1)) and ((right_is_out15 = right_is_out13) and
  (right12 = right1)))))) and (((((mode = 1) or (mode = 2)) ->
  ((((((o8 = value) and (not (value = (- 2147483648)))) and
  (o9 = (o8 - 1))) and ((result11 = left1) and (left2 = o9))) and
  ((((temp___238 = left_is_out) and ((temp___237 = left2) and
  (((result12 = left_is_out) and (((left2 <  0) -> (left_is_out2 = true)) and
  ((not (left2 <  0)) -> (left_is_out2 = false)))) and
  (((((left_is_out9 = left_is_out2) and (left7 = left2)) and
  ((left_is_out10 = left_is_out2) and (left8 = left2))) and
  ((((left_is_out2 = true) -> (result13 = true)) and
  ((not (left_is_out2 = true)) -> ((((0 <= left2) and (left2 <= 100000)) and
  (o10 = left2)) and (result13 = (number_list[o10]))))) and
  (result13 = true))) or (((((left_is_out2 = true) -> (result13 = true)) and
  ((not (left_is_out2 = true)) -> ((((0 <= left2) and (left2 <= 100000)) and
  (o10 = left2)) and (result13 = (number_list[o10]))))) and
  (not (result13 = true))) and ((((left_is_out9 = left_is_out5) and
  (left7 = left4)) and ((left_is_out10 = left_is_out6) and
  (left8 = left4))) and ((((0 <= left3) and (left3 <= (value - 1))) and
  (forall v6:int. (((left3 <= v6) and (v6 <= value)) ->
  (not ((number_list[v6]) = true))))) and ((((- 2147483648) <= 2147483647) ->
  in_range1(left3)) and (((((o11 = left3) and
  (not (left3 = (- 2147483648)))) and (o12 = (o11 - 1))) and
  ((result14 = left3) and (left4 = o12))) and
  (((left_is_out5 = left_is_out4) and (left_is_out6 = left_is_out4)) and
  (((result15 = left_is_out3) and (((left4 <  0) ->
  (left_is_out4 = true)) and ((not (left4 <  0)) ->
  (left_is_out4 = false)))) and ((((left_is_out4 = true) ->
  (result16 = true)) and ((not (left_is_out4 = true)) -> ((((0 <= left4) and
  (left4 <= 100000)) and (o13 = left4)) and
  (result16 = (number_list[o13]))))) and (result16 = true))))))))))))) and
  (((left_is_out11 = left_is_out9) and (left9 = left7)) and
  ((left_is_out12 = left_is_out10) and (left10 = left8)))) and
  (((left_is_out13 = left_is_out11) and (left11 = left9)) and
  ((left_is_out14 = left_is_out12) and (left12 = left10))))) and
  (((left_is_out16 = left_is_out13) and (left13 = left11)) and
  ((left_is_out17 = left_is_out14) and (left14 = left12))))) and
  ((not ((mode = 1) or (mode = 2))) -> (((result17 = left_is_out) and
  (left_is_out15 = of_int(1))) and (((left_is_out16 = left_is_out15) and
  (left13 = left1)) and ((left_is_out17 = left_is_out15) and
  (left14 = left1)))))) and
  ((((test_prime_and_coprime_numbers__p__nearest_number__result21 = test_prime_and_coprime_numbers__p__nearest_number__result19) and
  (test_prime_and_coprime_numbers__p__nearest_number__result22 = test_prime_and_coprime_numbers__p__nearest_number__result20)) and
  (((not (right_is_out14 = true)) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result19 = test_prime_and_coprime_numbers__p__nearest_number__result12) and
  (test_prime_and_coprime_numbers__p__nearest_number__result20 = test_prime_and_coprime_numbers__p__nearest_number__result13)) and
  (((not (left_is_out16 = true)) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result12 = test_prime_and_coprime_numbers__p__nearest_number__result7) and
  (test_prime_and_coprime_numbers__p__nearest_number__result13 = test_prime_and_coprime_numbers__p__nearest_number__result8)) and
  ((((((o16 = (right11 - value)) and in_range1((right11 - value))) and
  (o17 = abs_int(o16))) and ((o18 = o17) and in_range1(o17))) and
  (((((o14 = (left13 - value)) and in_range1((left13 - value))) and
  (o15 = abs_int(o14))) and ((o19 = o15) and in_range1(o15))) and
  (((o19 <= o18) -> (result18 = true)) and ((not (o19 <= o18)) ->
  (result18 = false))))) and (((result18 = true) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result7 = test_prime_and_coprime_numbers__p__nearest_number__result3) and
  (test_prime_and_coprime_numbers__p__nearest_number__result8 = test_prime_and_coprime_numbers__p__nearest_number__result3)) and
  (((o20 = left13) and in_range2(left13)) and
  ((result19 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  (test_prime_and_coprime_numbers__p__nearest_number__result3 = o20))))) and
  ((not (result18 = true)) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result7 = test_prime_and_coprime_numbers__p__nearest_number__result4) and
  (test_prime_and_coprime_numbers__p__nearest_number__result8 = test_prime_and_coprime_numbers__p__nearest_number__result4)) and
  (((o21 = right11) and in_range2(right11)) and
  ((result20 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  (test_prime_and_coprime_numbers__p__nearest_number__result4 = o21))))))))) and
  ((left_is_out16 = true) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result12 = test_prime_and_coprime_numbers__p__nearest_number__result9) and
  (test_prime_and_coprime_numbers__p__nearest_number__result13 = test_prime_and_coprime_numbers__p__nearest_number__result9)) and
  (((o22 = right11) and in_range2(right11)) and
  ((result21 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  (test_prime_and_coprime_numbers__p__nearest_number__result9 = o22)))))))) and
  ((right_is_out14 = true) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result19 = test_prime_and_coprime_numbers__p__nearest_number__result14) and
  (test_prime_and_coprime_numbers__p__nearest_number__result20 = test_prime_and_coprime_numbers__p__nearest_number__result14)) and
  ((not (left_is_out16 = true)) and (((o23 = left13) and
  in_range2(left13)) and
  ((result22 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  (test_prime_and_coprime_numbers__p__nearest_number__result14 = o23)))))))) or
  (((right_is_out14 = true) and (not (right_is_out14 = true))) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result21 = test_prime_and_coprime_numbers__p__nearest_number__result17) and
  (test_prime_and_coprime_numbers__p__nearest_number__result22 = test_prime_and_coprime_numbers__p__nearest_number__result18)))))))))

axiom H10 :
  (test_prime_and_coprime_numbers__p__nearest_number__result25 = test_prime_and_coprime_numbers__p__nearest_number__result23)

axiom H11 : (left_is_out20 = left_is_out18)

axiom H12 : (right_is_out18 = right_is_out16)

axiom H13 : (left17 = left15)

axiom H14 : (right15 = right13)

axiom H15 :
  (test_prime_and_coprime_numbers__p__nearest_number__result26 = test_prime_and_coprime_numbers__p__nearest_number__result24)

axiom H16 : (left_is_out21 = left_is_out19)

axiom H17 : (right_is_out19 = right_is_out17)

axiom H18 : (left18 = left16)

axiom H19 : (right16 = right14)

axiom H20 : ((bool_eq(to_int((number_list[value])),
  to_int(of_int(1))) = true) ->
  (test_prime_and_coprime_numbers__p__nearest_number__result25 = value))

axiom H21 : (match_bool(bool_eq(to_int((number_list[value])),
  to_int(of_int(0))), bool_eq(mode, 0), false) = true)

 (* File "prime_and_coprime_numbers.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (value <  test_prime_and_coprime_numbers__p__nearest_number__result25)
