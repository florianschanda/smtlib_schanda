(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort scrabble_letter 0)
(define-fun in_range ((x Int)) Bool (and (<= 65 x) (<= x 90)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (scrabble_letter scrabble_letter) Bool)
(declare-const dummy scrabble_letter)
(declare-datatypes () ((scrabble_letter__ref (mk_scrabble_letter__ref (scrabble_letter__content scrabble_letter)))))
(define-fun scrabble_letter__ref___projection ((a scrabble_letter__ref)) scrabble_letter (scrabble_letter__content a))
(declare-sort scrabble_value 0)
(declare-fun scrabble_valueqtint (scrabble_value) Int)
(assert (forall ((i scrabble_value)) (and (<= 1 (scrabble_valueqtint i)) (<= (scrabble_valueqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (scrabble_value scrabble_value) Bool)
(declare-const dummy1 scrabble_value)
(declare-datatypes () ((scrabble_value__ref (mk_scrabble_value__ref (scrabble_value__content scrabble_value)))))
(define-fun scrabble_value__ref___projection ((a scrabble_value__ref)) scrabble_value (scrabble_value__content a))
(define-fun to_rep ((x scrabble_value)) Int (scrabble_valueqtint x))
(declare-fun of_rep (Int) scrabble_value)
(assert (forall ((x scrabble_value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x scrabble_value)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int scrabble_value))))))
(declare-fun slide ((Array Int scrabble_value) Int Int) (Array Int scrabble_value))
(assert (forall ((a (Array Int scrabble_value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int scrabble_value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int scrabble_value)) (a__first Int) (a__last Int) (b (Array Int scrabble_value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(define-fun dynamic_invariant ((temp___expr_220 (Array Int scrabble_value)) (temp___is_init_216 Bool) (temp___skip_constant_217 Bool) (temp___do_toplevel_218 Bool) (temp___do_typ_inv_219 Bool)) Bool (forall ((temp___221 Int)) (=> (and (<= 65 temp___221) (<= temp___221 90)) (=> (= temp___is_init_216 true) (let ((temp___223 (to_rep (select temp___expr_220 temp___221)))) (or (and (<= 1 temp___223) (<= temp___223 5)) (or (and (<= 8 temp___223) (<= temp___223 8)) (and (<= 10 temp___223) (<= temp___223 10)))))))))
(declare-const lookup_table (Array Int scrabble_value))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun scrabble__lookup_table__aggregate_def (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) (Array Int scrabble_value))
(assert (= lookup_table (scrabble__lookup_table__aggregate_def 1 3 3 2 1 4 2 4 1 8 5 1 3 1 1 3 10 1 1 1 1 4 4 8 4 10)))
(define-fun dynamic_invariant1 ((temp___expr_195 Int) (temp___is_init_191 Bool) (temp___skip_constant_192 Bool) (temp___do_toplevel_193 Bool) (temp___do_typ_inv_194 Bool)) Bool (and (=> (or (= temp___is_init_191 true) (<= 1 2147483647)) (in_range1 temp___expr_195)) (=> (= temp___do_toplevel_193 true) (=> (= temp___is_init_191 true) (or (and (<= 1 temp___expr_195) (<= temp___expr_195 5)) (or (and (<= 8 temp___expr_195) (<= temp___expr_195 8)) (and (<= 10 temp___expr_195) (<= temp___expr_195 10))))))))
(define-fun dynamic_predicate ((temp___199 Int)) Bool (or (and (<= 1 temp___199) (<= temp___199 5)) (or (and (<= 8 temp___199) (<= temp___199 8)) (and (<= 10 temp___199) (<= temp___199 10)))))
(declare-const rliteral scrabble_value)
(assert (= (scrabble_valueqtint rliteral) 1))
(declare-const rliteral1 scrabble_value)
(assert (= (scrabble_valueqtint rliteral1) 3))
(declare-const rliteral2 scrabble_value)
(assert (= (scrabble_valueqtint rliteral2) 2))
(declare-const rliteral3 scrabble_value)
(assert (= (scrabble_valueqtint rliteral3) 4))
(declare-const rliteral4 scrabble_value)
(assert (= (scrabble_valueqtint rliteral4) 8))
(declare-const rliteral5 scrabble_value)
(assert (= (scrabble_valueqtint rliteral5) 5))
(declare-const rliteral6 scrabble_value)
(assert (= (scrabble_valueqtint rliteral6) 10))
(assert (forall ((temp___157 Int) (temp___158 Int) (temp___159 Int) (temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int) (temp___164 Int) (temp___165 Int) (temp___166 Int) (temp___167 Int) (temp___168 Int) (temp___169 Int) (temp___170 Int) (temp___171 Int) (temp___172 Int) (temp___173 Int) (temp___174 Int) (temp___175 Int) (temp___176 Int) (temp___177 Int) (temp___178 Int) (temp___179 Int) (temp___180 Int) (temp___181 Int) (temp___182 Int)) (let ((temp___156 (scrabble__lookup_table__aggregate_def temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 temp___175 temp___176 temp___177 temp___178 temp___179 temp___180 temp___181 temp___182))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___157 true true true true) (dynamic_invariant1 temp___158 true true true true)) (dynamic_invariant1 temp___159 true true true true)) (dynamic_invariant1 temp___160 true true true true)) (dynamic_invariant1 temp___161 true true true true)) (dynamic_invariant1 temp___162 true true true true)) (dynamic_invariant1 temp___163 true true true true)) (dynamic_invariant1 temp___164 true true true true)) (dynamic_invariant1 temp___165 true true true true)) (dynamic_invariant1 temp___166 true true true true)) (dynamic_invariant1 temp___167 true true true true)) (dynamic_invariant1 temp___168 true true true true)) (dynamic_invariant1 temp___169 true true true true)) (dynamic_invariant1 temp___170 true true true true)) (dynamic_invariant1 temp___171 true true true true)) (dynamic_invariant1 temp___172 true true true true)) (dynamic_invariant1 temp___173 true true true true)) (dynamic_invariant1 temp___174 true true true true)) (dynamic_invariant1 temp___175 true true true true)) (dynamic_invariant1 temp___176 true true true true)) (dynamic_invariant1 temp___177 true true true true)) (dynamic_invariant1 temp___178 true true true true)) (dynamic_invariant1 temp___179 true true true true)) (dynamic_invariant1 temp___180 true true true true)) (dynamic_invariant1 temp___181 true true true true)) (dynamic_invariant1 temp___182 true true true true)) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (select temp___156 65) rliteral) (= (select temp___156 66) rliteral1)) (= (select temp___156 67) rliteral1)) (= (select temp___156 68) rliteral2)) (= (select temp___156 69) rliteral)) (= (select temp___156 70) rliteral3)) (= (select temp___156 71) rliteral2)) (= (select temp___156 72) rliteral3)) (= (select temp___156 73) rliteral)) (= (select temp___156 74) rliteral4)) (= (select temp___156 75) rliteral5)) (= (select temp___156 76) rliteral)) (= (select temp___156 77) rliteral1)) (= (select temp___156 78) rliteral)) (= (select temp___156 79) rliteral)) (= (select temp___156 80) rliteral1)) (= (select temp___156 81) rliteral6)) (= (select temp___156 82) rliteral)) (= (select temp___156 83) rliteral)) (= (select temp___156 84) rliteral)) (= (select temp___156 85) rliteral)) (= (select temp___156 86) rliteral3)) (= (select temp___156 87) rliteral3)) (= (select temp___156 88) rliteral4)) (= (select temp___156 89) rliteral3)) (= (select temp___156 90) rliteral6))))))
(define-fun dynamic_invariant2 ((temp___expr_188 Int) (temp___is_init_184 Bool) (temp___skip_constant_185 Bool) (temp___do_toplevel_186 Bool) (temp___do_typ_inv_187 Bool)) Bool (=> (or (= temp___is_init_184 true) (<= 65 90)) (in_range temp___expr_188)))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Int)
(assert (or (and (<= 1 10) (<= 10 5)) (or (and (<= 8 10) (<= 10 8)) (<= 10 10))))
(assert (= o 10))
(assert (or (and (<= 1 4) (<= 4 5)) (or (and (<= 8 4) (<= 4 8)) (and (<= 10 4) (<= 4 10)))))
(assert (= o1 4))
(assert (or (and (<= 1 8) (<= 8 5)) (or (<= 8 8) (and (<= 10 8) (<= 8 10)))))
(assert (= o2 8))
(assert (or (and (<= 1 4) (<= 4 5)) (or (and (<= 8 4) (<= 4 8)) (and (<= 10 4) (<= 4 10)))))
(assert (= o3 4))
(assert (or (and (<= 1 4) (<= 4 5)) (or (and (<= 8 4) (<= 4 8)) (and (<= 10 4) (<= 4 10)))))
(assert (= o4 4))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o5 1))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o6 1))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o7 1))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o8 1))
(assert (or (and (<= 1 10) (<= 10 5)) (or (and (<= 8 10) (<= 10 8)) (<= 10 10))))
(assert (= o9 10))
(assert (or (and (<= 1 3) (<= 3 5)) (or (and (<= 8 3) (<= 3 8)) (and (<= 10 3) (<= 3 10)))))
(assert (= o10 3))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o11 1))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o12 1))
(assert (or (and (<= 1 3) (<= 3 5)) (or (and (<= 8 3) (<= 3 8)) (and (<= 10 3) (<= 3 10)))))
(assert (= o13 3))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o14 1))
(assert (or (and (<= 1 5) (<= 5 5)) (or (and (<= 8 5) (<= 5 8)) (and (<= 10 5) (<= 5 10)))))
(assert (= o15 5))
(assert (or (and (<= 1 8) (<= 8 5)) (or (<= 8 8) (and (<= 10 8) (<= 8 10)))))
(assert (= o16 8))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o17 1))
(assert (or (and (<= 1 4) (<= 4 5)) (or (and (<= 8 4) (<= 4 8)) (and (<= 10 4) (<= 4 10)))))
(assert (= o18 4))
(assert (or (and (<= 1 2) (<= 2 5)) (or (and (<= 8 2) (<= 2 8)) (and (<= 10 2) (<= 2 10)))))
(assert (= o19 2))
(assert (or (and (<= 1 4) (<= 4 5)) (or (and (<= 8 4) (<= 4 8)) (and (<= 10 4) (<= 4 10)))))
(assert (= o20 4))
(assert (or (and (<= 1 1) (<= 1 5)) (or (and (<= 8 1) (<= 1 8)) (and (<= 10 1) (<= 1 10)))))
(assert (= o21 1))
(assert (not (or (and (<= 1 2) (<= 2 5)) (or (and (<= 8 2) (<= 2 8)) (and (<= 10 2) (<= 2 10))))))
(check-sat)
(exit)
