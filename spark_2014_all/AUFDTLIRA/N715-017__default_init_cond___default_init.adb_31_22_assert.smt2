(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__default_init__rec__f natural)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) natural (rec__default_init__rec__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__default_init__rec__f (us_split_fields1 a))) (to_rep (rec__default_init__rec__f (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const default_init__rec__f__first__bit Int)
(declare-const default_init__rec__f__last__bit Int)
(declare-const default_init__rec__f__position Int)
(assert (<= 0 default_init__rec__f__first__bit))
(assert (< default_init__rec__f__first__bit default_init__rec__f__last__bit))
(assert (<= 0 default_init__rec__f__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content a))
(declare-fun rec_ok (us_rep) Bool)
(declare-fun rec_ok__function_guard (Bool us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_185 us_rep) (temp___skip_top_level_186 Bool)) Bool (and (= (to_rep (rec__default_init__rec__f (us_split_fields1 temp___expr_185))) 0) (=> (not (= temp___skip_top_level_186 true)) (= (rec_ok temp___expr_185) true))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort tarrD1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (tarrD1 tarrD1) Bool)
(declare-const dummy2 tarrD1)
(declare-datatypes () ((tarrD1__ref (mk_tarrD1__ref (tarrD1__content tarrD1)))))
(define-fun tarrD1__ref___projection ((a tarrD1__ref)) tarrD1 (tarrD1__content a))
(declare-fun arr_ok ((Array Int natural)) Bool)
(declare-fun arr_ok__function_guard (Bool (Array Int natural)) Bool)
(define-fun default_initial_assumption1 ((temp___expr_194 (Array Int natural)) (temp___skip_top_level_195 Bool)) Bool (and (forall ((temp___196 Int)) (=> (and (<= 1 temp___196) (<= temp___196 3)) (= (to_rep (select temp___expr_194 temp___196)) 0))) (=> (not (= temp___skip_top_level_195 true)) (= (arr_ok temp___expr_194) true))))
(declare-sort nat 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (nat nat) Bool)
(declare-const dummy3 nat)
(declare-datatypes () ((nat__ref (mk_nat__ref (nat__content nat)))))
(define-fun nat__ref___projection ((a nat__ref)) nat (nat__content a))
(declare-fun nat_ok (Int) Bool)
(declare-fun nat_ok__function_guard (Bool Int) Bool)
(define-fun dynamic_invariant ((temp___expr_202 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool) (temp___do_typ_inv_201 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= 0 2147483647)) (in_range2 temp___expr_202)))
(define-fun default_initial_assumption2 ((temp___expr_203 Int) (temp___skip_top_level_204 Bool)) Bool (and (= temp___expr_203 0) (=> (not (= temp___skip_top_level_204 true)) (= (nat_ok temp___expr_203) true))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(assert true)
(assert (forall ((x us_rep)) (! (= (= (rec_ok x) true) (= (to_rep (rec__default_init__rec__f (us_split_fields1 x))) 0)) :pattern ((rec_ok x)))))
(assert true)
(assert (forall ((x (Array Int natural))) (! (= (= (arr_ok x) true) (= (to_rep (select x 1)) 0)) :pattern ((arr_ok x)))))
(assert true)
(assert (forall ((x Int)) (! (= (= (nat_ok x) true) (= x 0)) :pattern ((nat_ok x)))))
(declare-const r__split_fields natural)
(declare-const n Int)
(declare-const a (Array Int natural))
(assert (default_initial_assumption (mk___rep (mk___split_fields r__split_fields)) false))
(assert (default_initial_assumption2 n false))
(assert (=> (<= 0 2147483647) (in_range2 n)))
(assert (default_initial_assumption1 a false))
(assert (= (to_rep r__split_fields) 0))
(assert (= n 0))
(assert (not (= (to_rep (select a 1)) 0)))
(check-sat)
(exit)
