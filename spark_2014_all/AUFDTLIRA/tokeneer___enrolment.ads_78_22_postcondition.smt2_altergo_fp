(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq7 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic endoffile : us_rep -> bool

logic endoffile__function_guard : bool, us_rep -> prop

logic endofline : us_rep -> bool

logic endofline__function_guard : bool, us_rep -> prop

logic privatekeypresent : us_private -> bool

logic privatekeypresent__function_guard : bool, us_private -> prop

axiom privatekeypresent__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic makedescription : us_t, int -> (int,character) farray

logic makedescription__function_guard : (int,character) farray, us_t,
  int -> prop

axiom makedescription__post_axiom : true

logic temp___String_Literal_1046 : unit -> (int,character) farray

axiom temp___String_Literal_1046__def_axiom :
  (((((((((((((((((((((((((((((to_rep((temp___String_Literal_1046(void)[1])) = 84) and
  (to_rep((temp___String_Literal_1046(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_1046(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_1046(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_1046(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_1046(void)[6])) = 110)) and
  (to_rep((temp___String_Literal_1046(void)[7])) = 114)) and
  (to_rep((temp___String_Literal_1046(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_1046(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_1046(void)[10])) = 109)) and
  (to_rep((temp___String_Literal_1046(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_1046(void)[12])) = 110)) and
  (to_rep((temp___String_Literal_1046(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_1046(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_1046(void)[15])) = 102)) and
  (to_rep((temp___String_Literal_1046(void)[16])) = 105)) and
  (to_rep((temp___String_Literal_1046(void)[17])) = 108)) and
  (to_rep((temp___String_Literal_1046(void)[18])) = 101)) and
  (to_rep((temp___String_Literal_1046(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_1046(void)[20])) = 105)) and
  (to_rep((temp___String_Literal_1046(void)[21])) = 115)) and
  (to_rep((temp___String_Literal_1046(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_1046(void)[23])) = 99)) and
  (to_rep((temp___String_Literal_1046(void)[24])) = 111)) and
  (to_rep((temp___String_Literal_1046(void)[25])) = 114)) and
  (to_rep((temp___String_Literal_1046(void)[26])) = 114)) and
  (to_rep((temp___String_Literal_1046(void)[27])) = 117)) and
  (to_rep((temp___String_Literal_1046(void)[28])) = 112)) and
  (to_rep((temp___String_Literal_1046(void)[29])) = 116))

logic temp___String_Literal_1051 : unit -> (int,character) farray

axiom temp___String_Literal_1051__def_axiom :
  (((((((((((((((((((((((((((((to_rep((temp___String_Literal_1051(void)[1])) = 84) and
  (to_rep((temp___String_Literal_1051(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_1051(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_1051(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_1051(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_1051(void)[6])) = 110)) and
  (to_rep((temp___String_Literal_1051(void)[7])) = 114)) and
  (to_rep((temp___String_Literal_1051(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_1051(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_1051(void)[10])) = 109)) and
  (to_rep((temp___String_Literal_1051(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_1051(void)[12])) = 110)) and
  (to_rep((temp___String_Literal_1051(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_1051(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_1051(void)[15])) = 102)) and
  (to_rep((temp___String_Literal_1051(void)[16])) = 105)) and
  (to_rep((temp___String_Literal_1051(void)[17])) = 108)) and
  (to_rep((temp___String_Literal_1051(void)[18])) = 101)) and
  (to_rep((temp___String_Literal_1051(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_1051(void)[20])) = 105)) and
  (to_rep((temp___String_Literal_1051(void)[21])) = 115)) and
  (to_rep((temp___String_Literal_1051(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_1051(void)[23])) = 99)) and
  (to_rep((temp___String_Literal_1051(void)[24])) = 111)) and
  (to_rep((temp___String_Literal_1051(void)[25])) = 114)) and
  (to_rep((temp___String_Literal_1051(void)[26])) = 114)) and
  (to_rep((temp___String_Literal_1051(void)[27])) = 117)) and
  (to_rep((temp___String_Literal_1051(void)[28])) = 112)) and
  (to_rep((temp___String_Literal_1051(void)[29])) = 116))

 (* File "enrolment.adb", line 94, characters 0-0 *)
goal WP_parameter_def :
  (forall description:(int,character) farray. forall certno:int.
  forall state:us_private. forall filestate:us_private.
  forall state1:us_private. forall store1:us_private.
  forall o:(int,character) farray. forall o1:int. forall o2:bool.
  forall o3:bool. forall temp___1050:int.
  forall temp___1049:(int,character) farray. forall temp___1048:bool.
  forall temp___1047:us_rep. forall o4:bool. forall o5:int. forall o6:bool.
  forall o7:bool. forall o8:bool. forall o9:(int,character) farray.
  forall state2:us_private. forall filestate1:us_private.
  forall state3:us_private. forall store2:us_private. forall result:int.
  forall certno1:int. forall thefile:us_rep. forall dataok:bool.
  forall thefile1:us_rep. forall dataok1:bool.
  forall description1:(int,character) farray. forall state4:us_private.
  forall filestate2:us_private. forall state5:us_private.
  forall store3:us_private. forall result1:(int,character) farray.
  forall description2:(int,character) farray. forall result2:int.
  forall certno2:int. forall thefile2:us_rep. forall dataok2:bool.
  forall description3:(int,character) farray. forall state6:us_private.
  forall filestate3:us_private. forall state7:us_private.
  forall store4:us_private. forall result3:bool. forall thefile3:us_rep.
  forall dataok3:bool. forall description4:(int,character) farray.
  forall certno3:int. forall state8:us_private. forall filestate4:us_private.
  forall state9:us_private. forall store5:us_private. forall result4:bool.
  forall result5:int. forall certno4:int. forall thefile4:us_rep.
  forall dataok4:bool. forall description5:(int,character) farray.
  forall state10:us_private. forall filestate5:us_private.
  forall state11:us_private. forall store6:us_private.
  forall thefile5:us_rep. forall result6:bool. forall thefile6:us_rep.
  forall dataok5:bool. forall description6:(int,character) farray.
  forall certno5:int. forall state12:us_private.
  forall filestate6:us_private. forall state13:us_private.
  forall store7:us_private. forall thefile7:us_rep. forall dataok6:bool.
  forall description7:(int,character) farray. forall certno6:int.
  forall state14:us_private. forall filestate7:us_private.
  forall state15:us_private. forall store8:us_private.
  forall thefile8:us_rep. forall dataok7:bool.
  forall description8:(int,character) farray. forall certno7:int.
  forall state16:us_private. forall filestate8:us_private.
  forall state17:us_private. forall store9:us_private.
  forall thefile9:us_rep. forall dataok8:bool.
  forall description9:(int,character) farray. forall certno8:int.
  forall state18:us_private. forall filestate9:us_private.
  forall state19:us_private. forall store10:us_private.
  forall thefile10:us_rep. forall closedok:bool.
  forall result7:(int,character) farray.
  forall description10:(int,character) farray. forall result8:bool.
  forall dataok9:bool. forall dataok10:bool.
  forall description11:(int,character) farray. forall dataok11:bool.
  forall description12:(int,character) farray. forall state20:us_private.
  forall store11:us_private. forall state21:us_private.
  forall store12:us_private__ref. forall state22:us_private.
  forall store13:us_private. forall thefile11:t__ref.
  forall dataok12:bool__ref. forall description13:map__ref.
  forall certno9:int__ref. forall closedok1:bool__ref.
  forall state23:us_private__ref. forall filestate10:us_private__ref.
  forall state24:us_private__ref. forall store14:us_private__ref.
  forall thefile12:us_rep. forall dataok13:bool.
  forall description14:(int,character) farray. forall certno10:int.
  forall closedok2:bool. forall state25:us_private.
  forall filestate11:us_private. forall state26:us_private.
  forall store15:us_private. (((not (privatekeypresent(state1) = true)) and
  (((({ int__content = result } = { int__content = certno }) and
  (certno1 = 1)) and (in_range2(certno1) and ((((dataok = true) and
  ((to_int(match_bool(of_int(0), dataok1,
  false)) <= to_int(privatekeypresent(state5))) and
  (to_int(match_bool(match_bool(of_int(0), dataok1, false), false,
  true)) <= to_int(bool_eq1(to_int(privatekeypresent(state5)),
  to_int(privatekeypresent(state1))))))) or ((not (dataok = true)) and
  (((o = makedescription({ elts = temp___String_Literal_1046(void); rt =
  mk(1, 29) }, certno1)) and (({ map__content = result1 } = { map__content =
  description }) and (description2 = o))) and (((store3 = store1) and
  ((state5 = state1) and ((filestate2 = filestate) and ((state4 = state) and
  ((description1 = description2) and ((dataok1 = dataok) and
  (thefile1 = thefile))))))) and ((store3 = store2) and
  ((state5 = state3) and ((filestate2 = filestate1) and
  ((state4 = state2) and ((description1 = description2) and
  ((dataok1 = dataok) and (thefile1 = thefile))))))))))) and
  ((((dataok1 = true) and ((((o1 = (certno1 + 1)) and
  in_range1((certno1 + 1))) and ((certno1 = result2) and (certno2 = o1))) and
  ((to_int(match_bool(of_int(1), dataok2,
  false)) <= to_int(privatekeypresent(state7))) and
  (to_int(match_bool(match_bool(of_int(1), dataok2, false), false,
  true)) <= to_int(bool_eq1(to_int(privatekeypresent(state7)),
  to_int(privatekeypresent(state5)))))))) or ((not (dataok1 = true)) and
  ((store4 = store3) and ((state7 = state5) and
  ((filestate3 = filestate2) and ((state6 = state4) and
  ((certno2 = certno1) and ((description3 = description1) and
  ((dataok2 = dataok1) and (thefile2 = thefile1)))))))))) and
  (((((o2 = endoffile(thefile2)) and (((not (o2 = true)) and (o3 = true)) or
  ((o2 = true) and (o3 = false)))) and (result3 = match_bool(o3, dataok2,
  false))) and (((result3 = true) and ((((temp___1050 = certno2) and
  ((temp___1049 = description3) and ((temp___1048 = dataok2) and
  ((temp___1047 = thefile2) and ((((1 <= 2147483647) ->
  in_range2(certno3)) and ((not (endoffile(thefile3) = true)) and
  (dataok3 = true))) and ((((o4 = endofline(thefile3)) and
  (((not (o4 = true)) and (result4 = true)) or ((o4 = true) and
  (result4 = false)))) and (((result4 = true) and ((((o5 = (certno3 + 1)) and
  in_range1((certno3 + 1))) and ((result5 = certno3) and (certno4 = o5))) and
  ((to_int(match_bool(of_int(0), dataok4,
  false)) <= to_int(privatekeypresent(state11))) and
  (to_int(match_bool(match_bool(of_int(0), dataok4, false), false,
  true)) <= to_int(bool_eq1(to_int(privatekeypresent(state11)),
  to_int(privatekeypresent(state9)))))))) or ((not (result4 = true)) and
  ((store6 = store5) and ((state11 = state9) and
  ((filestate5 = filestate4) and ((state10 = state8) and
  ((certno4 = certno3) and ((description5 = description4) and
  ((dataok4 = dataok3) and (thefile4 = thefile5))))))))))) and
  (((((o6 = endoffile(thefile4)) and (((not (o6 = true)) and (o7 = true)) or
  ((o6 = true) and (o7 = false)))) and (o8 = match_bool(o7, dataok4,
  false))) and (((not (o8 = true)) and (result6 = true)) or ((o8 = true) and
  (result6 = false)))) and (result6 = true)))))))) and
  (((store6 = store7) and ((state11 = state13) and
  ((filestate5 = filestate6) and ((state10 = state12) and
  ((certno4 = certno5) and ((description5 = description6) and
  ((dataok4 = dataok5) and (thefile4 = thefile6)))))))) and
  ((store8 = store6) and ((state15 = state11) and
  ((filestate7 = filestate5) and ((state14 = state10) and
  ((certno6 = certno4) and ((description7 = description5) and
  ((dataok6 = dataok4) and (thefile7 = thefile4)))))))))) and ((({
  us_private__content = store9 } = { us_private__content = store7 }) and (({
  us_private__content = state17 } = { us_private__content = state13 }) and
  (({ us_private__content = filestate8 } = { us_private__content = filestate6
  }) and (({ us_private__content = state16 } = { us_private__content =
  state12 }) and (({ int__content = certno7 } = { int__content = certno5
  }) and (({ map__content = description8 } = { map__content = description6
  }) and (({ bool__content = dataok7 } = { bool__content = dataok5 }) and ({
  t__content = thefile8 } = { t__content = thefile6 })))))))) and
  ((store10 = store8) and ((state19 = state15) and
  ((filestate9 = filestate7) and ((state18 = state14) and
  ((certno8 = certno6) and ((description9 = description7) and
  ((dataok8 = dataok6) and (thefile9 = thefile7))))))))))) or
  ((not (result3 = true)) and (((store4 = store9) and ((state7 = state17) and
  ((filestate3 = filestate8) and ((state6 = state16) and
  ((certno2 = certno7) and ((description3 = description8) and
  ((dataok2 = dataok7) and (thefile2 = thefile8)))))))) and
  ((store10 = store4) and ((state19 = state7) and
  ((filestate9 = filestate3) and ((state18 = state6) and
  ((certno8 = certno2) and ((description9 = description3) and
  ((dataok8 = dataok2) and (thefile9 = thefile2)))))))))))) and
  ((((not (closedok = true)) and ((((o9 = makedescription({ elts =
  temp___String_Literal_1051(void); rt = mk(1, 29) }, certno7)) and
  ((result7 = description8) and (description10 = o9))) and
  ((result8 = dataok7) and (dataok9 = of_int(0)))) and
  (((description10 = description11) and (dataok9 = dataok10)) and
  ((description12 = description10) and (dataok11 = dataok9))))) or
  ((closedok = true) and ((({ map__content = description11 } = {
  map__content = description8 }) and ({ bool__content = dataok10 } = {
  bool__content = dataok7 })) and ((description12 = description9) and
  (dataok11 = dataok8))))) and (((not (dataok10 = true)) and
  ((not (privatekeypresent(state20) = true)) and (((store12 = {
  us_private__content = store11 }) and (state20 = state21)) and
  ((store13 = store11) and (state22 = state20))))) or ((dataok10 = true) and
  (((store12 = { us_private__content = store9 }) and ({ us_private__content =
  state21 } = { us_private__content = state17 })) and
  ((store13 = store10) and (state22 = state19))))))))))) and
  (((store14 = store12) and ((state24 = { us_private__content = state21
  }) and ((filestate10 = { us_private__content = filestate8 }) and
  ((state23 = { us_private__content = state16 }) and ((closedok1 = {
  bool__content = closedok }) and ((certno9 = { int__content = certno7 }) and
  ((description13 = { map__content = description11 }) and ((dataok12 = {
  bool__content = dataok10 }) and (thefile11 = { t__content = thefile10
  }))))))))) and ((store15 = store13) and ((state26 = state22) and
  ((filestate11 = filestate9) and ((state25 = state18) and
  ((closedok2 = closedok) and ((certno10 = certno8) and
  ((description14 = description12) and ((dataok13 = dataok11) and
  (thefile12 = thefile10)))))))))))) -> (((dataok12).bool__content = true) ->
  (privatekeypresent((state24).us_private__content) = true))))
