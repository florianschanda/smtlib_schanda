(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type namecountt

predicate in_range1(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : namecountt, namecountt -> bool

logic dummy : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep : namecountt -> int

logic of_rep : int -> namecountt

axiom inversion_axiom :
  (forall x:namecountt [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:namecountt [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic blankname : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

type issueridt

predicate in_range3(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : issueridt, issueridt -> bool

logic dummy2 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep2 : issueridt -> int

logic of_rep2 : int -> issueridt

axiom inversion_axiom2 :
  (forall x:issueridt [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:issueridt [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic dummy3 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep2(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq4(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep2(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq4(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size1({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : issueridt

logic dummy5 : namecountt

logic dummy6 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

logic nullissuer : issueridt

logic nullissuer1 : namecountt

logic nullissuer2 : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields2 = { rec__keystore__optionalprivatekeyt__ispresent :
bool; rec__keystore__optionalprivatekeyt__owner : us_rep
}

function us_split_fields_IsPresent__projection(a: us_split_fields2) : bool =
  (a).rec__keystore__optionalprivatekeyt__ispresent

function us_split_fields_Owner__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__keystore__optionalprivatekeyt__owner

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___12__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___13__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((((a).us_split_fields3).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields3).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq6(((a).us_split_fields3).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields3).rec__keystore__optionalprivatekeyt__owner) = true)) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((a).us_split_fields3).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields3).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq6(((a).us_split_fields3).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields3).rec__keystore__optionalprivatekeyt__owner) = true))) ->
  (bool_eq7(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__size2({ us_split_fields3 =
  { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__alignment2({
  us_split_fields3 = { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

logic keystore__optionalprivatekeyt__ispresent__first__bit : int

logic keystore__optionalprivatekeyt__ispresent__last__bit : int

logic keystore__optionalprivatekeyt__ispresent__position : int

axiom keystore__optionalprivatekeyt__ispresent__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__first__bit)

axiom keystore__optionalprivatekeyt__ispresent__last__bit_axiom :
  (keystore__optionalprivatekeyt__ispresent__first__bit <  keystore__optionalprivatekeyt__ispresent__last__bit)

axiom keystore__optionalprivatekeyt__ispresent__position_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__position)

logic keystore__optionalprivatekeyt__owner__first__bit : int

logic keystore__optionalprivatekeyt__owner__last__bit : int

logic keystore__optionalprivatekeyt__owner__position : int

axiom keystore__optionalprivatekeyt__owner__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__first__bit)

axiom keystore__optionalprivatekeyt__owner__last__bit_axiom :
  (keystore__optionalprivatekeyt__owner__first__bit <  keystore__optionalprivatekeyt__owner__last__bit)

axiom keystore__optionalprivatekeyt__owner__position_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy7 : bool

logic dummy8 : issueridt

logic dummy9 : namecountt

logic dummy10 : (int,character) farray

type optionalprivatekeyt__ref = { optionalprivatekeyt__content : us_rep1
}

function optionalprivatekeyt__ref___projection(a: optionalprivatekeyt__ref) : us_rep1 =
  (a).optionalprivatekeyt__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic privatekeypresent : us_split_fields2 -> bool

logic privatekeypresent__function_guard : bool, us_split_fields2 -> prop

axiom privatekeypresent__post_axiom : true

axiom privatekeypresent__def_axiom :
  (forall keystore__thistisinfo__fields:bool.
  forall keystore__thistisinfo__fields1:issueridt.
  forall keystore__thistisinfo__fields2:namecountt.
  forall keystore__thistisinfo__fields3:(int,character) farray
  [privatekeypresent({ rec__keystore__optionalprivatekeyt__ispresent =
  keystore__thistisinfo__fields; rec__keystore__optionalprivatekeyt__owner =
  { us_split_fields1 = { rec__cryptotypes__issuert__id =
  keystore__thistisinfo__fields1; rec__cryptotypes__issuert__namelength =
  keystore__thistisinfo__fields2; rec__cryptotypes__issuert__name =
  keystore__thistisinfo__fields3 } } })]. ((privatekeypresent({
  rec__keystore__optionalprivatekeyt__ispresent =
  keystore__thistisinfo__fields; rec__keystore__optionalprivatekeyt__owner =
  { us_split_fields1 = { rec__cryptotypes__issuert__id =
  keystore__thistisinfo__fields1; rec__cryptotypes__issuert__namelength =
  keystore__thistisinfo__fields2; rec__cryptotypes__issuert__name =
  keystore__thistisinfo__fields3 } } }) = true) <->
  (keystore__thistisinfo__fields = true)))

logic cryptotypes__blankname__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___139:int.
  (forall temp___140:int.
  ((cryptotypes__blankname__aggregate_def(temp___139)[temp___140]) = of_rep1(temp___139))))

axiom blankname__def_axiom :
  (blankname = cryptotypes__blankname__aggregate_def(32))

axiom nullissuer__def_axiom : ((nullissuer = of_rep2(0)) and
  ((nullissuer1 = of_rep(0)) and (nullissuer2 = blankname)))

 (* File "keystore.ads", line 100, characters 0-0 *)
goal WP_parameter_def :
  (forall thistisinfo__split_fields:bool.
  forall thistisinfo__split_fields1:issueridt.
  forall thistisinfo__split_fields2:namecountt.
  forall thistisinfo__split_fields3:(int,character) farray.
  forall o:namecountt. forall o1:issueridt. forall o2:issueridt.
  forall o3:namecountt. forall o4:(int,character) farray.
  forall temp___1209:issueridt. forall temp___12091:namecountt.
  forall temp___12092:(int,character) farray. forall store1:us_private.
  forall result:bool. forall result1:issueridt. forall result2:namecountt.
  forall result3:(int,character) farray.
  forall thistisinfo__split_fields4:bool.
  forall thistisinfo__split_fields5:issueridt.
  forall thistisinfo__split_fields6:namecountt.
  forall thistisinfo__split_fields7:(int,character) farray.
  forall thistisinfo__split_fields8:bool.
  forall thistisinfo__split_fields9:issueridt.
  forall thistisinfo__split_fields10:namecountt.
  forall thistisinfo__split_fields11:(int,character) farray.
  forall store2:us_private. forall thistisinfo__split_fields12:bool.
  forall thistisinfo__split_fields13:issueridt.
  forall thistisinfo__split_fields14:namecountt.
  forall thistisinfo__split_fields15:(int,character) farray.
  forall store3:us_private. ((((((to_rep(o) = 0) and ((to_rep2(o1) = 0) and
  ((o1 = o2) and ((o = o3) and (blankname = o4))))) and
  ((temp___1209 = o2) and ((temp___12091 = o3) and (temp___12092 = o4)))) and
  ((temp___1209 = nullissuer) and ((temp___12091 = nullissuer1) and
  (temp___12092 = nullissuer2)))) and
  ((((result = thistisinfo__split_fields) and
  ((result1 = thistisinfo__split_fields1) and
  ((result2 = thistisinfo__split_fields2) and
  (result3 = thistisinfo__split_fields3)))) and
  ((of_int(0) = thistisinfo__split_fields4) and
  ((nullissuer = thistisinfo__split_fields5) and
  ((nullissuer1 = thistisinfo__split_fields6) and
  (nullissuer2 = thistisinfo__split_fields7))))) and (((store2 = store1) and
  ((thistisinfo__split_fields8 = thistisinfo__split_fields4) and
  ((thistisinfo__split_fields9 = thistisinfo__split_fields5) and
  ((thistisinfo__split_fields10 = thistisinfo__split_fields6) and
  (thistisinfo__split_fields11 = thistisinfo__split_fields7))))) and
  ((store3 = store1) and
  ((thistisinfo__split_fields12 = thistisinfo__split_fields4) and
  ((thistisinfo__split_fields13 = thistisinfo__split_fields5) and
  ((thistisinfo__split_fields14 = thistisinfo__split_fields6) and
  (thistisinfo__split_fields15 = thistisinfo__split_fields7)))))))) ->
  (not (privatekeypresent({ rec__keystore__optionalprivatekeyt__ispresent =
  thistisinfo__split_fields8; rec__keystore__optionalprivatekeyt__owner = {
  us_split_fields1 = { rec__cryptotypes__issuert__id =
  thistisinfo__split_fields9; rec__cryptotypes__issuert__namelength =
  thistisinfo__split_fields10; rec__cryptotypes__issuert__name =
  thistisinfo__split_fields11 } } }) = true))))
