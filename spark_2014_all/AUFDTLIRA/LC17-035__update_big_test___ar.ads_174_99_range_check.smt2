(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_152 Int) (temp___is_init_149 Bool) (temp___skip_constant_150 Bool) (temp___do_toplevel_151 Bool)) Bool (=> (or (= temp___is_init_149 true) (<= 1 10)) (in_range temp___expr_152)))
(declare-sort et1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 99)) (in_range1 temp___expr_176)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (et1 Int) (Array Int et1))
(assert (forall ((v et1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___601 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___603 (Array Int et1))) (forall ((temp___604 Int) (temp___605 Int) (temp___606 Int) (temp___607 Int)) (let ((temp___602 (temp___601 temp___603 temp___604 temp___605 temp___606 temp___607))) (forall ((temp___608 Int)) (ite (= temp___608 temp___606) (= (select temp___602 temp___608) (of_rep temp___607)) (ite (= temp___608 temp___604) (= (select temp___602 temp___608) (of_rep temp___605)) (= (select temp___602 temp___608) (select temp___603 temp___608)))))))))
(declare-fun temp___610 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___612 (Array Int et1))) (forall ((temp___613 Int) (temp___614 Int) (temp___615 Int) (temp___616 Int)) (let ((temp___611 (temp___610 temp___612 temp___613 temp___614 temp___615 temp___616))) (forall ((temp___617 Int)) (ite (= temp___617 temp___615) (= (select temp___611 temp___617) (of_rep temp___616)) (ite (= temp___617 temp___613) (= (select temp___611 temp___617) (of_rep temp___614)) (= (select temp___611 temp___617) (select temp___612 temp___617)))))))))
(declare-fun temp___619 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___621 (Array Int et1))) (forall ((temp___622 Int) (temp___623 Int) (temp___624 Int) (temp___625 Int)) (let ((temp___620 (temp___619 temp___621 temp___622 temp___623 temp___624 temp___625))) (forall ((temp___626 Int)) (ite (= temp___626 temp___624) (= (select temp___620 temp___626) (of_rep temp___625)) (ite (= temp___626 temp___622) (= (select temp___620 temp___626) (of_rep temp___623)) (= (select temp___620 temp___626) (select temp___621 temp___626)))))))))
(declare-fun temp___628 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___630 (Array Int et1))) (forall ((temp___631 Int) (temp___632 Int) (temp___633 Int) (temp___634 Int)) (let ((temp___629 (temp___628 temp___630 temp___631 temp___632 temp___633 temp___634))) (forall ((temp___635 Int)) (ite (= temp___635 temp___633) (= (select temp___629 temp___635) (of_rep temp___634)) (ite (= temp___635 temp___631) (= (select temp___629 temp___635) (of_rep temp___632)) (= (select temp___629 temp___635) (select temp___630 temp___635)))))))))
(declare-const a (Array Int et1))
(declare-const j Int)
(declare-const f Int)
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 et1)
(declare-const o5 (Array Int et1))
(declare-const o6 Int)
(declare-const result (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 Int)
(declare-const j2 Int)
(declare-const result3 Int)
(declare-const f1 Int)
(declare-const result4 Int)
(declare-const f2 Int)
(declare-const result5 (Array Int et1))
(declare-const a2 (Array Int et1))
(declare-const a3 (Array Int et1))
(declare-const j3 Int)
(declare-const f3 Int)
(declare-const a4 (Array Int et1))
(declare-const j4 Int)
(declare-const f4 Int)
(define-fun f5 () int__ref (mk_int__ref f))
(define-fun j5 () int__ref (mk_int__ref j))
(assert (in_range i))
(assert (in_range1 e))
(assert (=> (<= 1 10) (in_range j)))
(assert (=> (<= 0 99) (in_range1 f)))
(assert (= (to_rep o) e))
(assert (= o1 (store a i o)))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 o1))
(assert (=> (= i 10) (= (mk_int__ref result1) j5)))
(assert (=> (= i 10) (= j1 1)))
(assert (=> (not (= i 10)) (and (= o2 (+ i 1)) (in_range (+ i 1)))))
(assert (=> (not (= i 10)) (= (mk_int__ref result2) j5)))
(assert (=> (not (= i 10)) (= j2 o2)))
(assert (=> (not (= i 10)) (= j1 j2)))
(assert (=> (= e 0) (= (mk_int__ref result3) f5)))
(assert (=> (= e 0) (= f1 99)))
(assert (=> (not (= e 0)) (and (= o3 (- e 1)) (in_range1 (- e 1)))))
(assert (=> (not (= e 0)) (= (mk_int__ref result4) f5)))
(assert (=> (not (= e 0)) (= f2 o3)))
(assert (=> (not (= e 0)) (= f1 f2)))
(assert (= (to_rep o4) f1))
(assert (= o5 (store a1 j1 o4)))
(assert (= a1 result5))
(assert (= a2 o5))
(assert (= f1 f3))
(assert (= j1 j3))
(assert (= a2 a3))
(assert (= f4 f1))
(assert (= j4 j1))
(assert (= a4 a2))
(assert (< i 10))
(assert (< 0 e))
(assert (and (= o6 (- e 1)) (in_range1 (- e 1))))
(assert (not (in_range (+ i 1))))
(check-sat)
(exit)
