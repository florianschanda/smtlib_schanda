(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic identity : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___String_Literal_160 : unit -> (int,character) farray

axiom temp___String_Literal_160__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_160(void)[0])) = 0) and
  (to_rep((temp___String_Literal_160(void)[1])) = 1)) and
  (to_rep((temp___String_Literal_160(void)[2])) = 2)) and
  (to_rep((temp___String_Literal_160(void)[3])) = 3)) and
  (to_rep((temp___String_Literal_160(void)[4])) = 4)) and
  (to_rep((temp___String_Literal_160(void)[5])) = 5)) and
  (to_rep((temp___String_Literal_160(void)[6])) = 6)) and
  (to_rep((temp___String_Literal_160(void)[7])) = 7)) and
  (to_rep((temp___String_Literal_160(void)[8])) = 8)) and
  (to_rep((temp___String_Literal_160(void)[9])) = 9)) and
  (to_rep((temp___String_Literal_160(void)[10])) = 10)) and
  (to_rep((temp___String_Literal_160(void)[11])) = 11)) and
  (to_rep((temp___String_Literal_160(void)[12])) = 12)) and
  (to_rep((temp___String_Literal_160(void)[13])) = 13)) and
  (to_rep((temp___String_Literal_160(void)[14])) = 14)) and
  (to_rep((temp___String_Literal_160(void)[15])) = 15)) and
  (to_rep((temp___String_Literal_160(void)[16])) = 16)) and
  (to_rep((temp___String_Literal_160(void)[17])) = 17)) and
  (to_rep((temp___String_Literal_160(void)[18])) = 18)) and
  (to_rep((temp___String_Literal_160(void)[19])) = 19)) and
  (to_rep((temp___String_Literal_160(void)[20])) = 20)) and
  (to_rep((temp___String_Literal_160(void)[21])) = 21)) and
  (to_rep((temp___String_Literal_160(void)[22])) = 22)) and
  (to_rep((temp___String_Literal_160(void)[23])) = 23)) and
  (to_rep((temp___String_Literal_160(void)[24])) = 24)) and
  (to_rep((temp___String_Literal_160(void)[25])) = 25)) and
  (to_rep((temp___String_Literal_160(void)[26])) = 26)) and
  (to_rep((temp___String_Literal_160(void)[27])) = 27)) and
  (to_rep((temp___String_Literal_160(void)[28])) = 28)) and
  (to_rep((temp___String_Literal_160(void)[29])) = 29)) and
  (to_rep((temp___String_Literal_160(void)[30])) = 30)) and
  (to_rep((temp___String_Literal_160(void)[31])) = 31)) and
  (to_rep((temp___String_Literal_160(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_160(void)[33])) = 33)) and
  (to_rep((temp___String_Literal_160(void)[34])) = 34)) and
  (to_rep((temp___String_Literal_160(void)[35])) = 35)) and
  (to_rep((temp___String_Literal_160(void)[36])) = 36)) and
  (to_rep((temp___String_Literal_160(void)[37])) = 37)) and
  (to_rep((temp___String_Literal_160(void)[38])) = 38)) and
  (to_rep((temp___String_Literal_160(void)[39])) = 39)) and
  (to_rep((temp___String_Literal_160(void)[40])) = 40)) and
  (to_rep((temp___String_Literal_160(void)[41])) = 41)) and
  (to_rep((temp___String_Literal_160(void)[42])) = 42)) and
  (to_rep((temp___String_Literal_160(void)[43])) = 43)) and
  (to_rep((temp___String_Literal_160(void)[44])) = 44)) and
  (to_rep((temp___String_Literal_160(void)[45])) = 45)) and
  (to_rep((temp___String_Literal_160(void)[46])) = 46)) and
  (to_rep((temp___String_Literal_160(void)[47])) = 47)) and
  (to_rep((temp___String_Literal_160(void)[48])) = 48)) and
  (to_rep((temp___String_Literal_160(void)[49])) = 49)) and
  (to_rep((temp___String_Literal_160(void)[50])) = 50)) and
  (to_rep((temp___String_Literal_160(void)[51])) = 51)) and
  (to_rep((temp___String_Literal_160(void)[52])) = 52)) and
  (to_rep((temp___String_Literal_160(void)[53])) = 53)) and
  (to_rep((temp___String_Literal_160(void)[54])) = 54)) and
  (to_rep((temp___String_Literal_160(void)[55])) = 55)) and
  (to_rep((temp___String_Literal_160(void)[56])) = 56)) and
  (to_rep((temp___String_Literal_160(void)[57])) = 57)) and
  (to_rep((temp___String_Literal_160(void)[58])) = 58)) and
  (to_rep((temp___String_Literal_160(void)[59])) = 59)) and
  (to_rep((temp___String_Literal_160(void)[60])) = 60)) and
  (to_rep((temp___String_Literal_160(void)[61])) = 61)) and
  (to_rep((temp___String_Literal_160(void)[62])) = 62)) and
  (to_rep((temp___String_Literal_160(void)[63])) = 63)) and
  (to_rep((temp___String_Literal_160(void)[64])) = 64)) and
  (to_rep((temp___String_Literal_160(void)[65])) = 65)) and
  (to_rep((temp___String_Literal_160(void)[66])) = 66)) and
  (to_rep((temp___String_Literal_160(void)[67])) = 67)) and
  (to_rep((temp___String_Literal_160(void)[68])) = 68)) and
  (to_rep((temp___String_Literal_160(void)[69])) = 69)) and
  (to_rep((temp___String_Literal_160(void)[70])) = 70)) and
  (to_rep((temp___String_Literal_160(void)[71])) = 71)) and
  (to_rep((temp___String_Literal_160(void)[72])) = 72)) and
  (to_rep((temp___String_Literal_160(void)[73])) = 73)) and
  (to_rep((temp___String_Literal_160(void)[74])) = 74)) and
  (to_rep((temp___String_Literal_160(void)[75])) = 75)) and
  (to_rep((temp___String_Literal_160(void)[76])) = 76)) and
  (to_rep((temp___String_Literal_160(void)[77])) = 77)) and
  (to_rep((temp___String_Literal_160(void)[78])) = 78)) and
  (to_rep((temp___String_Literal_160(void)[79])) = 79)) and
  (to_rep((temp___String_Literal_160(void)[80])) = 80)) and
  (to_rep((temp___String_Literal_160(void)[81])) = 81)) and
  (to_rep((temp___String_Literal_160(void)[82])) = 82)) and
  (to_rep((temp___String_Literal_160(void)[83])) = 83)) and
  (to_rep((temp___String_Literal_160(void)[84])) = 84)) and
  (to_rep((temp___String_Literal_160(void)[85])) = 85)) and
  (to_rep((temp___String_Literal_160(void)[86])) = 86)) and
  (to_rep((temp___String_Literal_160(void)[87])) = 87)) and
  (to_rep((temp___String_Literal_160(void)[88])) = 88)) and
  (to_rep((temp___String_Literal_160(void)[89])) = 89)) and
  (to_rep((temp___String_Literal_160(void)[90])) = 90)) and
  (to_rep((temp___String_Literal_160(void)[91])) = 91)) and
  (to_rep((temp___String_Literal_160(void)[92])) = 92)) and
  (to_rep((temp___String_Literal_160(void)[93])) = 93)) and
  (to_rep((temp___String_Literal_160(void)[94])) = 94)) and
  (to_rep((temp___String_Literal_160(void)[95])) = 95)) and
  (to_rep((temp___String_Literal_160(void)[96])) = 96)) and
  (to_rep((temp___String_Literal_160(void)[97])) = 97)) and
  (to_rep((temp___String_Literal_160(void)[98])) = 98)) and
  (to_rep((temp___String_Literal_160(void)[99])) = 99)) and
  (to_rep((temp___String_Literal_160(void)[100])) = 100)) and
  (to_rep((temp___String_Literal_160(void)[101])) = 101)) and
  (to_rep((temp___String_Literal_160(void)[102])) = 102)) and
  (to_rep((temp___String_Literal_160(void)[103])) = 103)) and
  (to_rep((temp___String_Literal_160(void)[104])) = 104)) and
  (to_rep((temp___String_Literal_160(void)[105])) = 105)) and
  (to_rep((temp___String_Literal_160(void)[106])) = 106)) and
  (to_rep((temp___String_Literal_160(void)[107])) = 107)) and
  (to_rep((temp___String_Literal_160(void)[108])) = 108)) and
  (to_rep((temp___String_Literal_160(void)[109])) = 109)) and
  (to_rep((temp___String_Literal_160(void)[110])) = 110)) and
  (to_rep((temp___String_Literal_160(void)[111])) = 111)) and
  (to_rep((temp___String_Literal_160(void)[112])) = 112)) and
  (to_rep((temp___String_Literal_160(void)[113])) = 113)) and
  (to_rep((temp___String_Literal_160(void)[114])) = 114)) and
  (to_rep((temp___String_Literal_160(void)[115])) = 115)) and
  (to_rep((temp___String_Literal_160(void)[116])) = 116)) and
  (to_rep((temp___String_Literal_160(void)[117])) = 117)) and
  (to_rep((temp___String_Literal_160(void)[118])) = 118)) and
  (to_rep((temp___String_Literal_160(void)[119])) = 119)) and
  (to_rep((temp___String_Literal_160(void)[120])) = 120)) and
  (to_rep((temp___String_Literal_160(void)[121])) = 121)) and
  (to_rep((temp___String_Literal_160(void)[122])) = 122)) and
  (to_rep((temp___String_Literal_160(void)[123])) = 123)) and
  (to_rep((temp___String_Literal_160(void)[124])) = 124)) and
  (to_rep((temp___String_Literal_160(void)[125])) = 125)) and
  (to_rep((temp___String_Literal_160(void)[126])) = 126)) and
  (to_rep((temp___String_Literal_160(void)[127])) = 127)) and
  (to_rep((temp___String_Literal_160(void)[128])) = 128)) and
  (to_rep((temp___String_Literal_160(void)[129])) = 129)) and
  (to_rep((temp___String_Literal_160(void)[130])) = 130)) and
  (to_rep((temp___String_Literal_160(void)[131])) = 131)) and
  (to_rep((temp___String_Literal_160(void)[132])) = 132)) and
  (to_rep((temp___String_Literal_160(void)[133])) = 133)) and
  (to_rep((temp___String_Literal_160(void)[134])) = 134)) and
  (to_rep((temp___String_Literal_160(void)[135])) = 135)) and
  (to_rep((temp___String_Literal_160(void)[136])) = 136)) and
  (to_rep((temp___String_Literal_160(void)[137])) = 137)) and
  (to_rep((temp___String_Literal_160(void)[138])) = 138)) and
  (to_rep((temp___String_Literal_160(void)[139])) = 139)) and
  (to_rep((temp___String_Literal_160(void)[140])) = 140)) and
  (to_rep((temp___String_Literal_160(void)[141])) = 141)) and
  (to_rep((temp___String_Literal_160(void)[142])) = 142)) and
  (to_rep((temp___String_Literal_160(void)[143])) = 143)) and
  (to_rep((temp___String_Literal_160(void)[144])) = 144)) and
  (to_rep((temp___String_Literal_160(void)[145])) = 145)) and
  (to_rep((temp___String_Literal_160(void)[146])) = 146)) and
  (to_rep((temp___String_Literal_160(void)[147])) = 147)) and
  (to_rep((temp___String_Literal_160(void)[148])) = 148)) and
  (to_rep((temp___String_Literal_160(void)[149])) = 149)) and
  (to_rep((temp___String_Literal_160(void)[150])) = 150)) and
  (to_rep((temp___String_Literal_160(void)[151])) = 151)) and
  (to_rep((temp___String_Literal_160(void)[152])) = 152)) and
  (to_rep((temp___String_Literal_160(void)[153])) = 153)) and
  (to_rep((temp___String_Literal_160(void)[154])) = 154)) and
  (to_rep((temp___String_Literal_160(void)[155])) = 155)) and
  (to_rep((temp___String_Literal_160(void)[156])) = 156)) and
  (to_rep((temp___String_Literal_160(void)[157])) = 157)) and
  (to_rep((temp___String_Literal_160(void)[158])) = 158)) and
  (to_rep((temp___String_Literal_160(void)[159])) = 159)) and
  (to_rep((temp___String_Literal_160(void)[160])) = 160)) and
  (to_rep((temp___String_Literal_160(void)[161])) = 161)) and
  (to_rep((temp___String_Literal_160(void)[162])) = 162)) and
  (to_rep((temp___String_Literal_160(void)[163])) = 163)) and
  (to_rep((temp___String_Literal_160(void)[164])) = 164)) and
  (to_rep((temp___String_Literal_160(void)[165])) = 165)) and
  (to_rep((temp___String_Literal_160(void)[166])) = 166)) and
  (to_rep((temp___String_Literal_160(void)[167])) = 167)) and
  (to_rep((temp___String_Literal_160(void)[168])) = 168)) and
  (to_rep((temp___String_Literal_160(void)[169])) = 169)) and
  (to_rep((temp___String_Literal_160(void)[170])) = 170)) and
  (to_rep((temp___String_Literal_160(void)[171])) = 171)) and
  (to_rep((temp___String_Literal_160(void)[172])) = 172)) and
  (to_rep((temp___String_Literal_160(void)[173])) = 173)) and
  (to_rep((temp___String_Literal_160(void)[174])) = 174)) and
  (to_rep((temp___String_Literal_160(void)[175])) = 175)) and
  (to_rep((temp___String_Literal_160(void)[176])) = 176)) and
  (to_rep((temp___String_Literal_160(void)[177])) = 177)) and
  (to_rep((temp___String_Literal_160(void)[178])) = 178)) and
  (to_rep((temp___String_Literal_160(void)[179])) = 179)) and
  (to_rep((temp___String_Literal_160(void)[180])) = 180)) and
  (to_rep((temp___String_Literal_160(void)[181])) = 181)) and
  (to_rep((temp___String_Literal_160(void)[182])) = 182)) and
  (to_rep((temp___String_Literal_160(void)[183])) = 183)) and
  (to_rep((temp___String_Literal_160(void)[184])) = 184)) and
  (to_rep((temp___String_Literal_160(void)[185])) = 185)) and
  (to_rep((temp___String_Literal_160(void)[186])) = 186)) and
  (to_rep((temp___String_Literal_160(void)[187])) = 187)) and
  (to_rep((temp___String_Literal_160(void)[188])) = 188)) and
  (to_rep((temp___String_Literal_160(void)[189])) = 189)) and
  (to_rep((temp___String_Literal_160(void)[190])) = 190)) and
  (to_rep((temp___String_Literal_160(void)[191])) = 191)) and
  (to_rep((temp___String_Literal_160(void)[192])) = 192)) and
  (to_rep((temp___String_Literal_160(void)[193])) = 193)) and
  (to_rep((temp___String_Literal_160(void)[194])) = 194)) and
  (to_rep((temp___String_Literal_160(void)[195])) = 195)) and
  (to_rep((temp___String_Literal_160(void)[196])) = 196)) and
  (to_rep((temp___String_Literal_160(void)[197])) = 197)) and
  (to_rep((temp___String_Literal_160(void)[198])) = 198)) and
  (to_rep((temp___String_Literal_160(void)[199])) = 199)) and
  (to_rep((temp___String_Literal_160(void)[200])) = 200)) and
  (to_rep((temp___String_Literal_160(void)[201])) = 201)) and
  (to_rep((temp___String_Literal_160(void)[202])) = 202)) and
  (to_rep((temp___String_Literal_160(void)[203])) = 203)) and
  (to_rep((temp___String_Literal_160(void)[204])) = 204)) and
  (to_rep((temp___String_Literal_160(void)[205])) = 205)) and
  (to_rep((temp___String_Literal_160(void)[206])) = 206)) and
  (to_rep((temp___String_Literal_160(void)[207])) = 207)) and
  (to_rep((temp___String_Literal_160(void)[208])) = 208)) and
  (to_rep((temp___String_Literal_160(void)[209])) = 209)) and
  (to_rep((temp___String_Literal_160(void)[210])) = 210)) and
  (to_rep((temp___String_Literal_160(void)[211])) = 211)) and
  (to_rep((temp___String_Literal_160(void)[212])) = 212)) and
  (to_rep((temp___String_Literal_160(void)[213])) = 213)) and
  (to_rep((temp___String_Literal_160(void)[214])) = 214)) and
  (to_rep((temp___String_Literal_160(void)[215])) = 215)) and
  (to_rep((temp___String_Literal_160(void)[216])) = 216)) and
  (to_rep((temp___String_Literal_160(void)[217])) = 217)) and
  (to_rep((temp___String_Literal_160(void)[218])) = 218)) and
  (to_rep((temp___String_Literal_160(void)[219])) = 219)) and
  (to_rep((temp___String_Literal_160(void)[220])) = 220)) and
  (to_rep((temp___String_Literal_160(void)[221])) = 221)) and
  (to_rep((temp___String_Literal_160(void)[222])) = 222)) and
  (to_rep((temp___String_Literal_160(void)[223])) = 223)) and
  (to_rep((temp___String_Literal_160(void)[224])) = 224)) and
  (to_rep((temp___String_Literal_160(void)[225])) = 225)) and
  (to_rep((temp___String_Literal_160(void)[226])) = 226)) and
  (to_rep((temp___String_Literal_160(void)[227])) = 227)) and
  (to_rep((temp___String_Literal_160(void)[228])) = 228)) and
  (to_rep((temp___String_Literal_160(void)[229])) = 229)) and
  (to_rep((temp___String_Literal_160(void)[230])) = 230)) and
  (to_rep((temp___String_Literal_160(void)[231])) = 231)) and
  (to_rep((temp___String_Literal_160(void)[232])) = 232)) and
  (to_rep((temp___String_Literal_160(void)[233])) = 233)) and
  (to_rep((temp___String_Literal_160(void)[234])) = 234)) and
  (to_rep((temp___String_Literal_160(void)[235])) = 235)) and
  (to_rep((temp___String_Literal_160(void)[236])) = 236)) and
  (to_rep((temp___String_Literal_160(void)[237])) = 237)) and
  (to_rep((temp___String_Literal_160(void)[238])) = 238)) and
  (to_rep((temp___String_Literal_160(void)[239])) = 239)) and
  (to_rep((temp___String_Literal_160(void)[240])) = 240)) and
  (to_rep((temp___String_Literal_160(void)[241])) = 241)) and
  (to_rep((temp___String_Literal_160(void)[242])) = 242)) and
  (to_rep((temp___String_Literal_160(void)[243])) = 243)) and
  (to_rep((temp___String_Literal_160(void)[244])) = 244)) and
  (to_rep((temp___String_Literal_160(void)[245])) = 245)) and
  (to_rep((temp___String_Literal_160(void)[246])) = 246)) and
  (to_rep((temp___String_Literal_160(void)[247])) = 247)) and
  (to_rep((temp___String_Literal_160(void)[248])) = 248)) and
  (to_rep((temp___String_Literal_160(void)[249])) = 249)) and
  (to_rep((temp___String_Literal_160(void)[250])) = 250)) and
  (to_rep((temp___String_Literal_160(void)[251])) = 251)) and
  (to_rep((temp___String_Literal_160(void)[252])) = 252)) and
  (to_rep((temp___String_Literal_160(void)[253])) = 253)) and
  (to_rep((temp___String_Literal_160(void)[254])) = 254)) and
  (to_rep((temp___String_Literal_160(void)[255])) = 255))

type direction

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : direction, direction -> bool

logic dummy6 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic index__4 : us_t, us_t, int, int, (int,character) farray -> int

logic index__4__function_guard : int, us_t, us_t, int, int,
  (int,character) farray -> prop

axiom index__4__post_axiom :
  (forall source:(int,character) farray. forall source1:t.
  forall pattern:(int,character) farray. forall pattern1:t.
  (forall from:int. forall going:int.
  (forall mapping:(int,character) farray [index__4({ elts = source; rt =
  source1 }, { elts = pattern; rt = pattern1 }, from, going, mapping)].
  ((in_range2(from) and in_range5(going)) -> in_range4(index__4({ elts =
  source; rt = source1 }, { elts = pattern; rt = pattern1 }, from, going,
  mapping))))))

logic s : (int,character) farray

logic s1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic ch : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type tTsearch_stringSP1

predicate in_range6(x: int) = ((1 <= x) and (x <= 1))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tTsearch_stringSP1, tTsearch_stringSP1 -> bool

logic dummy7 : tTsearch_stringSP1

type tTsearch_stringSP1__ref = { tTsearch_stringSP1__content :
tTsearch_stringSP1
}

function tTsearch_stringSP1__ref___projection(a: tTsearch_stringSP1__ref) : tTsearch_stringSP1 =
  (a).tTsearch_stringSP1__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic contains3__search_string__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___624:int. (in_range3(temp___624) ->
  (forall temp___625:int.
  (to_rep((contains3__search_string__aggregate_def(temp___624)[temp___625])) = temp___624))))

axiom identity__def_axiom : (identity = temp___String_Literal_160(void))

 (* File "contains3.adb", line 2, characters 0-0 *)
goal WP_parameter_def : true
