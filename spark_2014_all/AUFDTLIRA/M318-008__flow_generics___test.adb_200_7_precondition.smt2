(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort fruits 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (fruits fruits) Bool)
(declare-const dummy2 fruits)
(declare-datatypes () ((fruits__ref (mk_fruits__ref (fruits__content fruits)))))
(define-fun fruits__ref___projection ((a fruits__ref)) fruits (fruits__content a))
(declare-fun to_rep1 (fruits) Int)
(declare-fun of_rep1 (Int) fruits)
(assert (forall ((x fruits)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x fruits)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int fruits))))))
(declare-fun slide ((Array Int fruits) Int Int) (Array Int fruits))
(assert (forall ((a (Array Int fruits))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int fruits))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int fruits) Int Int (Array Int fruits) Int Int) (Array Int fruits))
(assert (forall ((a (Array Int fruits)) (b (Array Int fruits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (fruits Int) (Array Int fruits))
(assert (forall ((v fruits)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int fruits)) (a__first Int) (a__last Int) (b (Array Int fruits)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep1 (select a temp___idx_134)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int fruits)) (b (Array Int fruits))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep1 (select a temp___idx_134)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare ((Array Int fruits) Int Int (Array Int fruits) Int Int) Int)
(assert (forall ((a (Array Int fruits)) (b (Array Int fruits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int fruits)) (b (Array Int fruits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int fruits)) (b (Array Int fruits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int fruits)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int fruits) (elts a))
(define-fun of_array ((a (Array Int fruits)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int fruits)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int fruits)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int fruits)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((fruit_crate__ref (mk_fruit_crate__ref (fruit_crate__content us_t)))))
(define-fun fruit_crate__ref___projection ((a fruit_crate__ref)) us_t (fruit_crate__content a))
(declare-sort fruits_and_weapons 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (fruits_and_weapons fruits_and_weapons) Bool)
(declare-const dummy4 fruits_and_weapons)
(declare-datatypes () ((fruits_and_weapons__ref (mk_fruits_and_weapons__ref (fruits_and_weapons__content fruits_and_weapons)))))
(define-fun fruits_and_weapons__ref___projection ((a fruits_and_weapons__ref)) fruits_and_weapons (fruits_and_weapons__content a))
(declare-fun to_rep2 (fruits_and_weapons) Int)
(declare-fun of_rep2 (Int) fruits_and_weapons)
(assert (forall ((x fruits_and_weapons)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x fruits_and_weapons)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int fruits_and_weapons))))))
(declare-fun slide1 ((Array Int fruits_and_weapons) Int Int) (Array Int fruits_and_weapons))
(assert (forall ((a (Array Int fruits_and_weapons))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int fruits_and_weapons))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int fruits_and_weapons) Int Int (Array Int fruits_and_weapons) Int Int) (Array Int fruits_and_weapons))
(assert (forall ((a (Array Int fruits_and_weapons)) (b (Array Int fruits_and_weapons))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (fruits_and_weapons Int) (Array Int fruits_and_weapons))
(assert (forall ((v fruits_and_weapons)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq2 ((a (Array Int fruits_and_weapons)) (a__first Int) (a__last Int) (b (Array Int fruits_and_weapons)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_135 Int)) (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last)) (= (to_rep2 (select a temp___idx_135)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_135))))))) true false))
(assert (forall ((a (Array Int fruits_and_weapons)) (b (Array Int fruits_and_weapons))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_135 Int)) (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last)) (= (to_rep2 (select a temp___idx_135)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_135)))))))))))
(declare-fun compare1 ((Array Int fruits_and_weapons) Int Int (Array Int fruits_and_weapons) Int Int) Int)
(assert (forall ((a (Array Int fruits_and_weapons)) (b (Array Int fruits_and_weapons))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int fruits_and_weapons)) (b (Array Int fruits_and_weapons))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int fruits_and_weapons)) (b (Array Int fruits_and_weapons))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int fruits_and_weapons)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int fruits_and_weapons) (elts1 a))
(define-fun of_array1 ((a (Array Int fruits_and_weapons)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int fruits_and_weapons)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int fruits_and_weapons)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int fruits_and_weapons)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq5 (us_t1 us_t1) Bool)
(declare-const dummy5 us_t1)
(declare-datatypes () ((fruit_and_weapons_crate__ref (mk_fruit_and_weapons_crate__ref (fruit_and_weapons_crate__content us_t1)))))
(define-fun fruit_and_weapons_crate__ref___projection ((a fruit_and_weapons_crate__ref)) us_t1 (fruit_and_weapons_crate__content a))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int fruits)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int fruits) (elts2 a))
(define-fun of_array2 ((a (Array Int fruits)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a)) (+ (- (last5 a) (first5 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int fruits)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int fruits)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int fruits)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq4 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x))) (to_rep (last4 (rt2 x))) (elts2 y) (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))
(declare-fun user_eq6 (us_t2 us_t2) Bool)
(declare-const dummy6 us_t2)
(declare-datatypes () ((inventory_t__ref (mk_inventory_t__ref (inventory_t__content us_t2)))))
(define-fun inventory_t__ref___projection ((a inventory_t__ref)) us_t2 (inventory_t__content a))
(declare-fun found_none (Int) Bool)
(declare-fun found_none__function_guard (Bool Int) Bool)
(declare-const initial_crate__first integer)
(declare-const initial_crate__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const final_crate__first integer)
(declare-const final_crate__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t3 0)
(declare-fun first6 (t3) integer)
(declare-fun last6 (t3) integer)
(declare-fun mk3 (Int Int) t3)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array Int fruits_and_weapons)) (rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int fruits_and_weapons) (elts3 a))
(define-fun of_array3 ((a (Array Int fruits_and_weapons)) (f Int) (l Int)) us_t3 (mk___t3 a (mk3 f l)))
(define-fun first7 ((a us_t3)) Int (to_rep (first6 (rt3 a))))
(define-fun last7 ((a us_t3)) Int (to_rep (last6 (rt3 a))))
(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a)) (+ (- (last7 a) (first7 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int fruits_and_weapons)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int fruits_and_weapons)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int fruits_and_weapons)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int fruits_and_weapons))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq5 ((x us_t3) (y us_t3)) Bool (bool_eq2 (elts3 x) (to_rep (first6 (rt3 x))) (to_rep (last6 (rt3 x))) (elts3 y) (to_rep (first6 (rt3 y))) (to_rep (last6 (rt3 y)))))
(declare-fun user_eq7 (us_t3 us_t3) Bool)
(declare-const dummy7 us_t3)
(declare-datatypes () ((new_inventory_t__ref (mk_new_inventory_t__ref (new_inventory_t__content us_t3)))))
(define-fun new_inventory_t__ref___projection ((a new_inventory_t__ref)) us_t3 (new_inventory_t__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_227 Int) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool)) Bool (=> (or (= temp___is_init_224 true) (<= 0 12)) (in_range4 temp___expr_227)))
(define-fun dynamic_invariant3 ((temp___expr_233 Int) (temp___is_init_230 Bool) (temp___skip_constant_231 Bool) (temp___do_toplevel_232 Bool)) Bool (=> (or (= temp___is_init_230 true) (<= 0 9)) (in_range3 temp___expr_233)))
(assert true)
(assert (forall ((fruit Int)) (! (= (= (found_none fruit) true) (= fruit 0)) :pattern ((found_none fruit)))))
(define-fun dynamic_invariant4 ((temp___expr_311 us_t) (temp___is_init_308 Bool) (temp___skip_constant_309 Bool) (temp___do_toplevel_310 Bool)) Bool (=> (not (= temp___skip_constant_309 true)) (dynamic_property 1 2147483647 (first1 temp___expr_311) (last1 temp___expr_311))))
(define-fun dynamic_invariant5 ((temp___expr_316 us_t1) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool)) Bool (=> (not (= temp___skip_constant_314 true)) (dynamic_property1 1 2147483647 (first3 temp___expr_316) (last3 temp___expr_316))))
(define-fun dynamic_invariant6 ((temp___expr_327 us_t2) (temp___is_init_324 Bool) (temp___skip_constant_325 Bool) (temp___do_toplevel_326 Bool)) Bool (=> (not (= temp___skip_constant_325 true)) (dynamic_property2 1 2147483647 (first5 temp___expr_327) (last5 temp___expr_327))))
(define-fun dynamic_invariant7 ((temp___expr_370 us_t3) (temp___is_init_367 Bool) (temp___skip_constant_368 Bool) (temp___do_toplevel_369 Bool)) Bool (=> (not (= temp___skip_constant_368 true)) (dynamic_property3 1 2147483647 (first7 temp___expr_370) (last7 temp___expr_370))))
(declare-const o (Array Int fruits))
(declare-const o1 t2)
(declare-const initial_crate (Array Int fruits))
(assert (dynamic_property 1 2147483647 (to_rep initial_crate__first) (to_rep initial_crate__last)))
(assert (dynamic_property1 1 2147483647 (to_rep final_crate__first) (to_rep final_crate__last)))
(assert (and (= (to_rep initial_crate__first) (to_rep final_crate__first)) (= (to_rep initial_crate__last) (to_rep final_crate__last))))
(assert (not (< (to_rep initial_crate__first) (to_rep initial_crate__last))))
(check-sat)
(exit)
