(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort value 0)
(declare-fun valueqtint (value) Int)
(assert (forall ((i value)) (and (<= (- 2147483648) (valueqtint i)) (<= (valueqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (value value) Bool)
(declare-const dummy2 value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun to_rep2 ((x value)) Int (valueqtint x))
(declare-fun of_rep2 (Int) value)
(assert (forall ((x value)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x value)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep2 (select a temp___idx_173)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep2 (select a temp___idx_173)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___2__projection ((a t3s__ref)) integer (t3s__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int value)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int value) (elts a))
(define-fun of_array ((a (Array Int value)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int value)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int value)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int value)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int value))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t (t4s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__simple_unc_arrays__table__last natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__simple_unc_arrays__table__last a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__simple_unc_arrays__table__v us_t)))))
(define-fun us_split_fields_V__projection ((a us_split_fields)) us_t (rec__simple_unc_arrays__table__v a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 b)))) (= (bool_eq1 (rec__simple_unc_arrays__table__v (us_split_fields1 a)) (rec__simple_unc_arrays__table__v (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const simple_unc_arrays__table__last__first__bit Int)
(declare-const simple_unc_arrays__table__last__last__bit Int)
(declare-const simple_unc_arrays__table__last__position Int)
(assert (<= 0 simple_unc_arrays__table__last__first__bit))
(assert (< simple_unc_arrays__table__last__first__bit simple_unc_arrays__table__last__last__bit))
(assert (<= 0 simple_unc_arrays__table__last__position))
(declare-const simple_unc_arrays__table__v__first__bit Int)
(declare-const simple_unc_arrays__table__v__last__bit Int)
(declare-const simple_unc_arrays__table__v__position Int)
(assert (<= 0 simple_unc_arrays__table__v__first__bit))
(assert (< simple_unc_arrays__table__v__first__bit simple_unc_arrays__table__v__last__bit))
(assert (<= 0 simple_unc_arrays__table__v__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((table__ref (mk_table__ref (table__content us_rep)))))
(define-fun table__ref___projection ((a table__ref)) us_rep (table__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (positive positive) Bool)
(declare-const dummy6 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int value)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int value) (elts1 a))
(define-fun of_array1 ((a (Array Int value)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int value)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int value)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int value)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int value))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq7 (us_t1 us_t1) Bool)
(declare-const dummy7 us_t1)
(declare-datatypes () ((values__ref (mk_values__ref (values__content us_t1)))))
(define-fun values__ref___projection ((a values__ref)) us_t1 (values__content a))
(define-fun dynamic_invariant2 ((temp___expr_602 us_rep) (temp___is_init_598 Bool) (temp___skip_constant_599 Bool) (temp___do_toplevel_600 Bool) (temp___do_typ_inv_601 Bool)) Bool (let ((temp___603 (rec__simple_unc_arrays__table__last (us_split_discrs1 temp___expr_602)))) (and (dynamic_property1 1 (to_rep temp___603) (first1 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_602))) (last1 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_602)))) (and (= (first1 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_602))) 1) (= (last1 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_602))) (to_rep temp___603))))))
(declare-const a us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const res__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r56b Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const r59b Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (integer integer) Bool)
(declare-const dummy8 integer)
(declare-datatypes () ((tS58bP1__ref (mk_tS58bP1__ref (tS58bP1__content integer)))))
(define-fun tS58bP1__ref___projection ((a1 tS58bP1__ref)) integer (tS58bP1__content a1))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first4 (mk2 f l))) f) (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int value)) (rt2 t2)))))
(define-fun to_array2 ((a1 us_t2)) (Array Int value) (elts2 a1))
(define-fun of_array2 ((a1 (Array Int value)) (f Int) (l Int)) us_t2 (mk___t2 a1 (mk2 f l)))
(define-fun first5 ((a1 us_t2)) Int (to_rep1 (first4 (rt2 a1))))
(define-fun last5 ((a1 us_t2)) Int (to_rep1 (last4 (rt2 a1))))
(define-fun length2 ((a1 us_t2)) Int (ite (<= (first5 a1) (last5 a1)) (+ (- (last5 a1) (first5 a1)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int value)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int value)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int value)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a1 (Array Int value))) (<= 0 (object__size3 a1))))
(assert (<= 0 value__component__size2))
(assert (forall ((a1 (Array Int value))) (<= 0 (object__component__size2 a1))))
(assert (<= 0 value__alignment3))
(assert (forall ((a1 (Array Int value))) (<= 0 (object__alignment3 a1))))
(define-fun bool_eq4 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x))) (to_rep1 (last4 (rt2 x))) (elts2 y) (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))
(declare-fun user_eq9 (us_t2 us_t2) Bool)
(declare-const dummy9 us_t2)
(declare-datatypes () ((s58b__ref (mk_s58b__ref (s58b__content us_t2)))))
(define-fun s58b__ref___projection ((a1 s58b__ref)) us_t2 (s58b__content a1))
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range4 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_589 Int) (temp___is_init_585 Bool) (temp___skip_constant_586 Bool) (temp___do_toplevel_587 Bool) (temp___do_typ_inv_588 Bool)) Bool (=> (or (= temp___is_init_585 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_589)))
(define-fun dynamic_invariant5 ((temp___expr_596 us_t1) (temp___is_init_592 Bool) (temp___skip_constant_593 Bool) (temp___do_toplevel_594 Bool) (temp___do_typ_inv_595 Bool)) Bool (=> (not (= temp___skip_constant_593 true)) (dynamic_property2 1 2147483647 (first3 temp___expr_596) (last3 temp___expr_596))))
(define-fun dynamic_invariant6 ((temp___expr_814 us_t2) (temp___is_init_810 Bool) (temp___skip_constant_811 Bool) (temp___do_toplevel_812 Bool) (temp___do_typ_inv_813 Bool)) Bool (=> (not (= temp___skip_constant_811 true)) (and (dynamic_property4 1 r59b (first5 temp___expr_814) (last5 temp___expr_814)) (and (= (first5 temp___expr_814) 1) (= (last5 temp___expr_814) r59b)))))
(declare-const bull Bool)
(declare-const res__split_fields (Array Int value))
(declare-const res__split_fields1 t)
(declare-const i Int)
(declare-const simple_unc_arrays__bubble_sort__result natural)
(declare-const simple_unc_arrays__bubble_sort__result1 (Array Int value))
(declare-const simple_unc_arrays__bubble_sort__result2 t)
(declare-const temp___991 natural)
(declare-const temp___9911 (Array Int value))
(declare-const temp___9912 t)
(declare-const temp___990 Bool)
(declare-const temp___988 natural)
(declare-const temp___9881 (Array Int value))
(declare-const temp___9882 t)
(declare-const temp___987 Bool)
(declare-const temp___980 Int)
(declare-const o Int)
(declare-const o1 value)
(declare-const o2 Int)
(declare-const o3 value)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const simple_unc_arrays__swap_cells__a__compl (Array Int value))
(declare-const simple_unc_arrays__swap_cells__a__compl1 t2)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const o8 Int)
(declare-const j Int)
(declare-const i1 Int)
(declare-const result Bool)
(declare-const bull1 Bool)
(declare-const result1 (Array Int value))
(declare-const result2 t)
(declare-const res__split_fields2 us_split_fields)
(declare-const bull2 Bool)
(declare-const res__split_fields3 us_split_fields)
(declare-const i2 Int)
(declare-const rho (Array Int value))
(declare-const result3 bool__ref)
(declare-const bull3 Bool)
(declare-const result4 int__ref)
(declare-const i3 Int)
(declare-const bull4 Bool)
(declare-const res__split_fields4 us_split_fields)
(declare-const i4 Int)
(declare-const rho1 (Array Int value))
(declare-const result5 Bool)
(declare-const simple_unc_arrays__swap_cells__a (Array Int value))
(declare-const result6 us_split_fields__ref)
(declare-const res__split_fields5 us_split_fields)
(declare-const result7 bool__ref)
(declare-const bull5 Bool)
(declare-const bull6 bool__ref)
(declare-const res__split_fields6 us_split_fields__ref)
(declare-const i5 int__ref)
(declare-const bull7 Bool)
(declare-const res__split_fields7 us_split_fields)
(declare-const i6 Int)
(declare-const rho2 (Array Int value))
(declare-const bull8 bool__ref)
(declare-const res__split_fields8 us_split_fields__ref)
(declare-const i7 int__ref)
(declare-const bull9 Bool)
(declare-const res__split_fields9 us_split_fields)
(declare-const i8 Int)
(declare-const rho3 (Array Int value))
(declare-const bull10 bool__ref)
(declare-const res__split_fields10 us_split_fields__ref)
(declare-const i9 int__ref)
(declare-const bull11 Bool)
(declare-const res__split_fields11 us_split_fields)
(declare-const i10 Int)
(declare-const bull12 bool__ref)
(declare-const res__split_fields12 us_split_fields__ref)
(declare-const i11 int__ref)
(declare-const bull13 Bool)
(declare-const res__split_fields13 us_split_fields)
(declare-const i12 Int)
(declare-const result8 table__ref)
(declare-const simple_unc_arrays__bubble_sort__result3 us_rep)
(declare-const simple_unc_arrays__bubble_sort__result4 table__ref)
(declare-const simple_unc_arrays__bubble_sort__result5 us_rep)
(declare-const bull14 bool__ref)
(declare-const res__split_fields14 us_split_fields__ref)
(declare-const i13 int__ref)
(declare-const simple_unc_arrays__bubble_sort__result6 table__ref)
(declare-const bull15 Bool)
(declare-const res__split_fields15 us_split_fields)
(declare-const i14 Int)
(declare-const simple_unc_arrays__bubble_sort__result7 us_rep)
(assert (dynamic_invariant2 a true false true true))
(assert (= (mk_bool__ref result) (mk_bool__ref bull)))
(assert (= bull1 (distinct 1 0)))
(assert (= (mk___split_fields__ref (mk___split_fields (mk___t result1 result2))) (mk___split_fields__ref (mk___split_fields (mk___t res__split_fields res__split_fields1)))))
(assert (= res__split_fields2 (us_split_fields1 a)))
(assert (= res__split_discrs (us_split_discrs1 a)))
(assert (dynamic_invariant2 (mk___rep res__split_discrs res__split_fields2) true false true true))
(assert (=> (= bull1 true) (and (= res__split_discrs (mk___split_discrs temp___991)) (= res__split_fields2 (mk___split_fields (mk___t temp___9911 temp___9912))))))
(assert (=> (= bull1 true) (= temp___990 bull1)))
(assert (=> (= bull1 true) (and (and (dynamic_invariant2 (mk___rep res__split_discrs res__split_fields3) false true true true) (= (rec__simple_unc_arrays__table__last res__split_discrs) temp___991)) (= bull2 true))))
(assert (=> (= bull1 true) (= result3 (mk_bool__ref bull2))))
(assert (=> (= bull1 true) (= bull3 (distinct 0 0))))
(assert (=> (= bull1 true) (= (- (to_rep (rec__simple_unc_arrays__table__last res__split_discrs)) 1) r56b)))
(assert (=> (= bull1 true) (in_range1 r56b)))
(assert (=> (= bull1 true) (= result4 (mk_int__ref i2))))
(assert (=> (= bull1 true) (= i3 1)))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (and (= res__split_discrs (mk___split_discrs temp___988)) (= res__split_fields3 (mk___split_fields (mk___t temp___9881 temp___9882)))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= temp___987 bull3))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (and (and (dynamic_invariant2 (mk___rep res__split_discrs res__split_fields4) false true true true) (= (rec__simple_unc_arrays__table__last res__split_discrs) temp___988)) (and (<= 1 i4) (<= i4 r56b))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (and (<= (to_rep1 (first (rt (rec__simple_unc_arrays__table__v res__split_fields4)))) i4) (<= i4 (to_rep1 (last (rt (rec__simple_unc_arrays__table__v res__split_fields4)))))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= o2 i4))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= o3 (select (elts (rec__simple_unc_arrays__table__v res__split_fields4)) o2)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= o4 (to_rep2 o3)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (and (= temp___980 (+ i4 1)) (in_range1 (+ i4 1))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (and (<= (to_rep1 (first (rt (rec__simple_unc_arrays__table__v res__split_fields4)))) temp___980) (<= temp___980 (to_rep1 (last (rt (rec__simple_unc_arrays__table__v res__split_fields4)))))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= o temp___980))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= o1 (select (elts (rec__simple_unc_arrays__table__v res__split_fields4)) o)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= o5 (to_rep2 o1)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= result5 (ite (< o5 o4) true false)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= (to_rep (rec__simple_unc_arrays__table__last res__split_discrs)) r59b)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (in_range2 r59b)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= (ite (<= (to_rep1 (first (rt (rec__simple_unc_arrays__table__v res__split_fields4)))) (to_rep1 (last (rt (rec__simple_unc_arrays__table__v res__split_fields4))))) (+ (- (to_rep1 (last (rt (rec__simple_unc_arrays__table__v res__split_fields4)))) (to_rep1 (first (rt (rec__simple_unc_arrays__table__v res__split_fields4))))) 1) 0) (ite (<= 1 r59b) (+ (- r59b 1) 1) 0))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= (elts (rec__simple_unc_arrays__table__v res__split_fields4)) simple_unc_arrays__swap_cells__a__compl)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= (mk2 (to_rep1 (first (rt (rec__simple_unc_arrays__table__v res__split_fields4)))) (to_rep1 (last (rt (rec__simple_unc_arrays__table__v res__split_fields4))))) simple_unc_arrays__swap_cells__a__compl1)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (and (= o8 (+ i4 1)) (in_range1 (+ i4 1)))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= (to_rep1 o7) (to_rep1 (last4 simple_unc_arrays__swap_cells__a__compl1)))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= (to_rep1 o6) (to_rep1 (first4 simple_unc_arrays__swap_cells__a__compl1)))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (and (and (= (to_rep2 (select simple_unc_arrays__swap_cells__a i4)) (to_rep2 (select simple_unc_arrays__swap_cells__a__compl o8))) (= (to_rep2 (select simple_unc_arrays__swap_cells__a o8)) (to_rep2 (select simple_unc_arrays__swap_cells__a__compl i4)))) (forall ((k Int)) (=> (and (<= (to_rep1 o6) k) (<= k (to_rep1 o7))) (=> (and (not (= k i4)) (not (= k o8))) (= (to_rep2 (select simple_unc_arrays__swap_cells__a k)) (to_rep2 (select simple_unc_arrays__swap_cells__a__compl k)))))))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= result6 (mk___split_fields__ref res__split_fields4))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= res__split_fields5 (mk___split_fields (mk___t (slide simple_unc_arrays__swap_cells__a (to_rep1 (first2 (mk1 (to_rep1 (first4 simple_unc_arrays__swap_cells__a__compl1)) (to_rep1 (last4 simple_unc_arrays__swap_cells__a__compl1))))) 1) (mk (to_rep1 (first4 (mk2 1 r59b))) (to_rep1 (last4 (mk2 1 r59b)))))))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= result7 (mk_bool__ref bull4))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (= result5 true) (= bull5 (distinct 1 0))))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (not (= result5 true)) (= res__split_fields5 res__split_fields4)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (not (= result5 true)) (= bull5 bull4)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (not (= result5 true)) (= simple_unc_arrays__swap_cells__a rho1)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (not (= result5 true)) (= res__split_fields5 res__split_fields4)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (=> (not (= result5 true)) (= bull5 bull4)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= i4 r56b))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= i5 (mk_int__ref i4)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= res__split_fields6 (mk___split_fields__ref res__split_fields5)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= bull6 (mk_bool__ref bull5)))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= rho2 simple_unc_arrays__swap_cells__a))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= i6 i4))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= res__split_fields7 res__split_fields5))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= bull7 bull5))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= i7 i5))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= res__split_fields8 res__split_fields6))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= bull8 bull6))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= rho3 rho2))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= i8 i6))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= res__split_fields9 res__split_fields7))))
(assert (=> (= bull1 true) (=> (and (<= 1 i3) (<= i3 r56b)) (= bull9 bull7))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= i7 (mk_int__ref i3)))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= res__split_fields8 (mk___split_fields__ref res__split_fields3)))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= bull8 (mk_bool__ref bull3)))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= rho3 rho))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= i8 i3))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= res__split_fields9 res__split_fields3))))
(assert (=> (= bull1 true) (=> (not (and (<= 1 i3) (<= i3 r56b))) (= bull9 bull3))))
(assert (=> (= bull1 true) (not (= (bool__content bull8) true))))
(assert (=> (= bull1 true) (= i9 i7)))
(assert (=> (= bull1 true) (= res__split_fields10 res__split_fields8)))
(assert (=> (= bull1 true) (= bull10 bull8)))
(assert (=> (= bull1 true) (= i10 i8)))
(assert (=> (= bull1 true) (= res__split_fields11 res__split_fields9)))
(assert (=> (= bull1 true) (= bull11 bull9)))
(assert (=> (= bull1 true) (= i11 i9)))
(assert (=> (= bull1 true) (= res__split_fields12 res__split_fields10)))
(assert (=> (= bull1 true) (= bull12 bull10)))
(assert (=> (= bull1 true) (= i12 i10)))
(assert (=> (= bull1 true) (= res__split_fields13 res__split_fields11)))
(assert (=> (= bull1 true) (= bull13 bull11)))
(assert (=> (not (= bull1 true)) (= i11 (mk_int__ref i))))
(assert (=> (not (= bull1 true)) (= res__split_fields12 (mk___split_fields__ref res__split_fields2))))
(assert (=> (not (= bull1 true)) (= bull12 (mk_bool__ref bull1))))
(assert (=> (not (= bull1 true)) (= i12 i1)))
(assert (=> (not (= bull1 true)) (= res__split_fields13 res__split_fields2)))
(assert (=> (not (= bull1 true)) (= bull13 bull1)))
(assert (= simple_unc_arrays__bubble_sort__result4 (mk_table__ref simple_unc_arrays__bubble_sort__result3)))
(assert (= simple_unc_arrays__bubble_sort__result5 simple_unc_arrays__bubble_sort__result3))
(assert (= result8 (mk_table__ref (mk___rep (mk___split_discrs simple_unc_arrays__bubble_sort__result) (mk___split_fields (mk___t simple_unc_arrays__bubble_sort__result1 simple_unc_arrays__bubble_sort__result2))))))
(assert (= simple_unc_arrays__bubble_sort__result3 (mk___rep res__split_discrs (us_split_fields__content res__split_fields12))))
(assert (= simple_unc_arrays__bubble_sort__result6 simple_unc_arrays__bubble_sort__result4))
(assert (= i13 i11))
(assert (= res__split_fields14 res__split_fields12))
(assert (= bull14 bull12))
(assert (= simple_unc_arrays__bubble_sort__result7 simple_unc_arrays__bubble_sort__result5))
(assert (= i14 i12))
(assert (= res__split_fields15 res__split_fields13))
(assert (= bull15 bull13))
(assert (<= 1 j))
(assert (<= j (- (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) 1)))
(assert (not (in_range1 (+ j 1))))
(check-sat)
(exit)
