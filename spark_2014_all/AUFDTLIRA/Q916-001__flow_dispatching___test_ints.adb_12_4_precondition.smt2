(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ints__int__min integer) (rec__ints__int__max integer) (rec__ints__int__value integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_Min__projection ((a us_split_fields)) integer (rec__ints__int__min a))
(define-fun us_split_fields_Max__projection ((a us_split_fields)) integer (rec__ints__int__max a))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) integer (rec__ints__int__value a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__ints__int__min (us_split_fields1 a))) (to_rep1 (rec__ints__int__min (us_split_fields1 b)))) (= (to_rep1 (rec__ints__int__max (us_split_fields1 a))) (to_rep1 (rec__ints__int__max (us_split_fields1 b))))) (= (to_rep1 (rec__ints__int__value (us_split_fields1 a))) (to_rep1 (rec__ints__int__value (us_split_fields1 b))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const ints__int__min__first__bit Int)
(declare-const ints__int__min__last__bit Int)
(declare-const ints__int__min__position Int)
(assert (<= 0 ints__int__min__first__bit))
(assert (< ints__int__min__first__bit ints__int__min__last__bit))
(assert (<= 0 ints__int__min__position))
(declare-const ints__int__max__first__bit Int)
(declare-const ints__int__max__last__bit Int)
(declare-const ints__int__max__position Int)
(assert (<= 0 ints__int__max__first__bit))
(assert (< ints__int__max__first__bit ints__int__max__last__bit))
(assert (<= 0 ints__int__max__position))
(declare-const ints__int__value__first__bit Int)
(declare-const ints__int__value__last__bit Int)
(declare-const ints__int__value__position Int)
(assert (<= 0 ints__int__value__first__bit))
(assert (< ints__int__value__first__bit ints__int__value__last__bit))
(assert (<= 0 ints__int__value__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((int____ref (mk_int____ref (int____content us_rep)))))
(define-fun int____ref___projection ((a int____ref)) us_rep (int____content a))
(define-fun default_initial_assumption ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag temp___expr_159) us_tag))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__ints__approx_int__precision natural) (rec__ints__int__min1 integer) (rec__ints__int__max1 integer) (rec__ints__int__value1 integer) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Precision__projection ((a us_split_fields2)) natural (rec__ints__approx_int__precision a))
(define-fun us_split_fields_Min__2__projection ((a us_split_fields2)) integer (rec__ints__int__min1 a))
(define-fun us_split_fields_Max__2__projection ((a us_split_fields2)) integer (rec__ints__int__max1 a))
(define-fun us_split_fields_Value__2__projection ((a us_split_fields2)) integer (rec__ints__int__value1 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (natural us_private) us_private)
(declare-fun extract__precision (us_private) natural)
(assert (forall ((precision natural)) (forall ((rec__ext__2 us_private)) (= (extract__precision (hide_ext__ precision rec__ext__2)) precision))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__ints__int__min1 (us_split_fields3 a)) (rec__ints__int__max1 (us_split_fields3 a)) (rec__ints__int__value1 (us_split_fields3 a)) (hide_ext__ (rec__ints__approx_int__precision (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__precision (rec__ext__ (us_split_fields1 r))) (rec__ints__int__min (us_split_fields1 r)) (rec__ints__int__max (us_split_fields1 r)) (rec__ints__int__value (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__ints__approx_int__precision (us_split_fields3 a))) (to_rep2 (rec__ints__approx_int__precision (us_split_fields3 b)))) (= (to_rep1 (rec__ints__int__min1 (us_split_fields3 a))) (to_rep1 (rec__ints__int__min1 (us_split_fields3 b))))) (= (to_rep1 (rec__ints__int__max1 (us_split_fields3 a))) (to_rep1 (rec__ints__int__max1 (us_split_fields3 b))))) (= (to_rep1 (rec__ints__int__value1 (us_split_fields3 a))) (to_rep1 (rec__ints__int__value1 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const ints__approx_int__precision__first__bit Int)
(declare-const ints__approx_int__precision__last__bit Int)
(declare-const ints__approx_int__precision__position Int)
(assert (<= 0 ints__approx_int__precision__first__bit))
(assert (< ints__approx_int__precision__first__bit ints__approx_int__precision__last__bit))
(assert (<= 0 ints__approx_int__precision__position))
(declare-const ints__int__min__first__bit1 Int)
(declare-const ints__int__min__last__bit1 Int)
(declare-const ints__int__min__position1 Int)
(assert (<= 0 ints__int__min__first__bit1))
(assert (< ints__int__min__first__bit1 ints__int__min__last__bit1))
(assert (<= 0 ints__int__min__position1))
(declare-const ints__int__max__first__bit1 Int)
(declare-const ints__int__max__last__bit1 Int)
(declare-const ints__int__max__position1 Int)
(assert (<= 0 ints__int__max__first__bit1))
(assert (< ints__int__max__first__bit1 ints__int__max__last__bit1))
(assert (<= 0 ints__int__max__position1))
(declare-const ints__int__value__first__bit1 Int)
(declare-const ints__int__value__last__bit1 Int)
(declare-const ints__int__value__position1 Int)
(assert (<= 0 ints__int__value__first__bit1))
(assert (< ints__int__value__first__bit1 ints__int__value__last__bit1))
(assert (<= 0 ints__int__value__position1))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((approx_int__ref (mk_approx_int__ref (approx_int__content us_rep1)))))
(define-fun approx_int__ref___projection ((a approx_int__ref)) us_rep1 (approx_int__content a))
(declare-fun bump__specific_post (Int us_split_fields Int us_split_fields) Bool)
(assert (forall ((ints__bump__arg__fields us_split_fields) (ints__bump__arg__old__fields us_split_fields)) (forall ((arg__attr__tag Int)) (! (=> (bump__specific_post us_tag ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields) (< (to_rep1 (rec__ints__int__value (us_split_fields1 (mk___rep ints__bump__arg__old__fields arg__attr__tag)))) (to_rep1 (rec__ints__int__value (us_split_fields1 (mk___rep ints__bump__arg__fields arg__attr__tag)))))) :pattern ((bump__specific_post us_tag ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields))))))
(assert (forall ((ints__bump__arg__fields us_split_fields) (ints__bump__arg__old__fields us_split_fields)) (forall ((arg__attr__tag Int)) (! (=> (bump__specific_post us_tag1 ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields) (< (to_rep1 (rec__ints__int__value1 (us_split_fields3 (of_base (mk___rep ints__bump__arg__old__fields arg__attr__tag))))) (to_rep1 (rec__ints__int__value1 (us_split_fields3 (of_base (mk___rep ints__bump__arg__fields arg__attr__tag))))))) :pattern ((bump__specific_post us_tag1 ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields))))))
(declare-fun display__specific_post (Int us_rep us_t) Bool)
(assert true)
(assert true)
(define-fun default_initial_assumption1 ((temp___expr_181 us_rep1) (temp___skip_top_level_182 Bool)) Bool (= (attr__tag1 temp___expr_181) us_tag1))
(declare-fun bump__2__specific_post (Int us_split_fields2 Int us_split_fields2) Bool)
(assert (forall ((ints__bump__2__arg__fields us_split_fields2) (ints__bump__2__arg__old__fields us_split_fields2)) (forall ((arg__attr__tag Int)) (! (=> (bump__2__specific_post us_tag1 ints__bump__2__arg__fields arg__attr__tag ints__bump__2__arg__old__fields) (< (to_rep1 (rec__ints__int__value1 (us_split_fields3 (mk___rep1 ints__bump__2__arg__old__fields arg__attr__tag)))) (to_rep1 (rec__ints__int__value1 (us_split_fields3 (mk___rep1 ints__bump__2__arg__fields arg__attr__tag)))))) :pattern ((bump__2__specific_post us_tag1 ints__bump__2__arg__fields arg__attr__tag ints__bump__2__arg__old__fields))))))
(declare-fun display__2__specific_post (Int us_rep1 us_t) Bool)
(assert true)
(declare-const i__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const ai__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ic__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const ic__attr__tag1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp___String_Literal_240 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_240 us_void_param) 1)) 105) (= (to_rep (select (temp___String_Literal_240 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_240 us_void_param) 3)) 105)) (= (to_rep (select (temp___String_Literal_240 us_void_param) 4)) 116)) (= (to_rep (select (temp___String_Literal_240 us_void_param) 5)) 105)) (= (to_rep (select (temp___String_Literal_240 us_void_param) 6)) 97)) (= (to_rep (select (temp___String_Literal_240 us_void_param) 7)) 108)) :pattern ((temp___String_Literal_240 us_void_param)))))
(declare-fun temp___String_Literal_241 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_241 us_void_param) 1)) 105) (= (to_rep (select (temp___String_Literal_241 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_241 us_void_param) 3)) 105)) (= (to_rep (select (temp___String_Literal_241 us_void_param) 4)) 116)) (= (to_rep (select (temp___String_Literal_241 us_void_param) 5)) 105)) (= (to_rep (select (temp___String_Literal_241 us_void_param) 6)) 97)) (= (to_rep (select (temp___String_Literal_241 us_void_param) 7)) 108)) :pattern ((temp___String_Literal_241 us_void_param)))))
(declare-fun temp___String_Literal_243 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_243 us_void_param) 1)) 105) (= (to_rep (select (temp___String_Literal_243 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 3)) 116)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 4)) 101)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 5)) 114)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 6)) 109)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 8)) 100)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 9)) 105)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 10)) 97)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 11)) 116)) (= (to_rep (select (temp___String_Literal_243 us_void_param) 12)) 101)) :pattern ((temp___String_Literal_243 us_void_param)))))
(declare-fun temp___String_Literal_244 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_244 us_void_param) 1)) 105) (= (to_rep (select (temp___String_Literal_244 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 3)) 116)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 4)) 101)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 5)) 114)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 6)) 109)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 8)) 100)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 9)) 105)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 10)) 97)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 11)) 116)) (= (to_rep (select (temp___String_Literal_244 us_void_param) 12)) 101)) :pattern ((temp___String_Literal_244 us_void_param)))))
(declare-fun temp___String_Literal_245 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_245 us_void_param) 1)) 116) (= (to_rep (select (temp___String_Literal_245 us_void_param) 2)) 101)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 3)) 109)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 4)) 112)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 5)) 111)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 7)) 97)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 8)) 114)) (= (to_rep (select (temp___String_Literal_245 us_void_param) 9)) 121)) :pattern ((temp___String_Literal_245 us_void_param)))))
(declare-fun temp___String_Literal_246 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_246 us_void_param) 1)) 116) (= (to_rep (select (temp___String_Literal_246 us_void_param) 2)) 101)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 3)) 109)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 4)) 112)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 5)) 111)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 7)) 97)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 8)) 114)) (= (to_rep (select (temp___String_Literal_246 us_void_param) 9)) 121)) :pattern ((temp___String_Literal_246 us_void_param)))))
(declare-fun temp___String_Literal_249 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_249 us_void_param) 1)) 102) (= (to_rep (select (temp___String_Literal_249 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_249 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_249 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_249 us_void_param) 5)) 108)) :pattern ((temp___String_Literal_249 us_void_param)))))
(declare-fun temp___String_Literal_250 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_250 us_void_param) 1)) 102) (= (to_rep (select (temp___String_Literal_250 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_250 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_250 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_250 us_void_param) 5)) 108)) :pattern ((temp___String_Literal_250 us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant4 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 100))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 42))
(declare-const rliteral3 natural)
(assert (= (naturalqtint rliteral3) 5))
(declare-const i__split_fields integer)
(declare-const i__split_fields1 integer)
(declare-const i__split_fields2 integer)
(declare-const i__split_fields3 us_private)
(declare-const ai__split_fields natural)
(declare-const ai__split_fields1 integer)
(declare-const ai__split_fields2 integer)
(declare-const ai__split_fields3 integer)
(declare-const ai__split_fields4 us_private)
(declare-const result integer)
(declare-const result1 integer)
(declare-const result2 integer)
(declare-const result3 us_private)
(declare-const i__split_fields4 integer)
(declare-const i__split_fields5 integer)
(declare-const i__split_fields6 integer)
(declare-const i__split_fields7 us_private)
(declare-const result4 natural)
(declare-const result5 integer)
(declare-const result6 integer)
(declare-const result7 integer)
(declare-const result8 us_private)
(declare-const ai__split_fields5 natural)
(declare-const ai__split_fields6 integer)
(declare-const ai__split_fields7 integer)
(declare-const ai__split_fields8 integer)
(declare-const ai__split_fields9 us_private)
(assert (= result i__split_fields))
(assert (= result1 i__split_fields1))
(assert (= result2 i__split_fields2))
(assert (= result3 i__split_fields3))
(assert (= rliteral i__split_fields4))
(assert (= rliteral1 i__split_fields5))
(assert (= rliteral2 i__split_fields6))
(assert (= us_null_ext__ i__split_fields7))
(assert (= i__attr__tag us_tag))
(assert (= result4 ai__split_fields))
(assert (= result5 ai__split_fields1))
(assert (= result6 ai__split_fields2))
(assert (= result7 ai__split_fields3))
(assert (= result8 ai__split_fields4))
(assert (= rliteral3 ai__split_fields5))
(assert (= i__split_fields4 ai__split_fields6))
(assert (= i__split_fields5 ai__split_fields7))
(assert (= i__split_fields6 ai__split_fields8))
(assert (= us_null_ext__ ai__split_fields9))
(assert (= ai__attr__tag us_tag1))
(assert (not (< (to_rep1 i__split_fields6) (- (to_rep1 i__split_fields5) 10))))
(check-sat)
(exit)
