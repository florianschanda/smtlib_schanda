(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort keytableentries 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (keytableentries keytableentries) Bool)
(declare-const dummy1 keytableentries)
(declare-datatypes () ((keytableentries__ref (mk_keytableentries__ref (keytableentries__content keytableentries)))))
(define-fun keytableentries__ref___projection ((a keytableentries__ref)) keytableentries (keytableentries__content a))
(define-fun dynamic_invariant ((temp___expr_183 Int) (temp___is_init_180 Bool) (temp___skip_constant_181 Bool) (temp___do_toplevel_182 Bool)) Bool (=> (or (= temp___is_init_180 true) (<= 1 10)) (in_range2 temp___expr_183)))
(declare-const inkeys_v1 (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const inkeys_v2 (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const outkeys_v1 (Array Int integer))
(declare-const outkeys_v2 (Array Int integer))
(declare-const i Int)
(declare-const i1 Int)
(declare-const temp___364 Int)
(declare-const temp___362 (Array Int integer))
(declare-const o integer)
(declare-const o1 (Array Int integer))
(declare-const o2 integer)
(declare-const o3 (Array Int integer))
(declare-const temp___368 (Array Int integer))
(declare-const temp___367 Int)
(declare-const o4 integer)
(declare-const o5 (Array Int integer))
(declare-const o6 integer)
(declare-const o7 (Array Int integer))
(declare-const outkeys_v11 (Array Int integer))
(declare-const outkeys_v21 (Array Int integer))
(declare-const result Int)
(declare-const i2 Int)
(declare-const result1 (Array Int integer))
(declare-const outkeys_v12 (Array Int integer))
(declare-const outkeys_v13 (Array Int integer))
(declare-const i3 Int)
(declare-const result2 Int)
(declare-const i4 Int)
(declare-const result3 (Array Int integer))
(declare-const outkeys_v14 (Array Int integer))
(declare-const outkeys_v15 (Array Int integer))
(declare-const i5 Int)
(declare-const outkeys_v16 (Array Int integer))
(declare-const i6 Int)
(declare-const outkeys_v17 (Array Int integer))
(declare-const i7 Int)
(declare-const outkeys_v18 (Array Int integer))
(declare-const i8 Int)
(declare-const outkeys_v19 (Array Int integer))
(declare-const i9 Int)
(declare-const outkeys_v110 (Array Int integer))
(declare-const i10 Int)
(declare-const result4 Int)
(declare-const i11 Int)
(declare-const result5 (Array Int integer))
(declare-const outkeys_v22 (Array Int integer))
(declare-const outkeys_v23 (Array Int integer))
(declare-const i12 Int)
(declare-const result6 Int)
(declare-const i13 Int)
(declare-const result7 (Array Int integer))
(declare-const outkeys_v24 (Array Int integer))
(declare-const outkeys_v25 (Array Int integer))
(declare-const i14 Int)
(declare-const outkeys_v26 (Array Int integer))
(declare-const i15 Int)
(declare-const outkeys_v27 (Array Int integer))
(declare-const i16 int__ref)
(declare-const outkeys_v28 (Array Int integer))
(declare-const i17 Int)
(declare-const outkeys_v29 map__ref)
(declare-const i18 int__ref)
(declare-const outkeys_v210 (Array Int integer))
(declare-const i19 Int)
(declare-const outkeys_v211 map__ref)
(declare-const i20 int__ref)
(declare-const outkeys_v212 (Array Int integer))
(declare-const i21 Int)
(declare-const outkeys_v111 map__ref)
(declare-const outkeys_v213 map__ref)
(declare-const i22 int__ref)
(declare-const i23 int__ref)
(declare-const outkeys_v112 (Array Int integer))
(declare-const outkeys_v214 (Array Int integer))
(declare-const i24 Int)
(declare-const i25 Int)
(assert (in_range2 j))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i2 1))
(assert (=> (and (<= 1 i2) (<= i2 10)) (and (and (= temp___364 i2) (and (= temp___362 outkeys_v1) (and (and (and (= (to_rep o) (to_rep (select inkeys_v1 i2))) (= o1 (store outkeys_v1 i2 o))) (and (= (mk_map__ref result1) (mk_map__ref outkeys_v1)) (= outkeys_v12 o1))) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k 10)) (=> (<= k i3) (= (to_rep (select outkeys_v13 k)) (to_rep (select inkeys_v1 k)))))) (and (and (and (forall ((temp___363 Int)) (=> (and (<= 1 temp___363) (<= temp___363 10)) (=> (< i3 temp___363) (= (select outkeys_v13 temp___363) (select temp___362 temp___363))))) (=> (<= 1 10) (in_range2 i3))) (and (<= 1 i3) (<= i3 10))) (= i3 10)))))) (and (and (= i3 i7) (= outkeys_v13 outkeys_v17)) (and (= i8 i3) (= outkeys_v18 outkeys_v13))))))
(assert (=> (and (<= 1 i2) (<= i2 10)) (= (mk_int__ref i9) (mk_int__ref i7))))
(assert (=> (and (<= 1 i2) (<= i2 10)) (= (mk_map__ref outkeys_v19) (mk_map__ref outkeys_v17))))
(assert (=> (and (<= 1 i2) (<= i2 10)) (= i10 i8)))
(assert (=> (and (<= 1 i2) (<= i2 10)) (= outkeys_v110 outkeys_v18)))
(assert (=> (not (and (<= 1 i2) (<= i2 10))) (= i2 i9)))
(assert (=> (not (and (<= 1 i2) (<= i2 10))) (= (mk_map__ref outkeys_v19) (mk_map__ref outkeys_v1))))
(assert (=> (not (and (<= 1 i2) (<= i2 10))) (= i10 i2)))
(assert (=> (not (and (<= 1 i2) (<= i2 10))) (= outkeys_v110 outkeys_v11)))
(assert (= (mk_int__ref result4) (mk_int__ref i1)))
(assert (= i11 1))
(assert (<= 1 i11))
(assert (<= i11 10))
(assert (= (to_rep o4) (to_rep (select inkeys_v2 i11))))
(assert (= o5 (store outkeys_v2 i11 o4)))
(assert (= (mk_map__ref result5) (mk_map__ref outkeys_v2)))
(assert (= outkeys_v22 o5))
(declare-const k Int)
(assert (<= 1 k))
(assert (<= k 10))
(assert (<= k i11))
(assert (not (= (to_rep (select outkeys_v22 k)) (to_rep (select inkeys_v2 k)))))
(check-sat)
(exit)
