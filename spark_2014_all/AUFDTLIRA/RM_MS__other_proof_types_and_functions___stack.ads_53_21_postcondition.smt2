(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun max_stack_size (tuple0) Int)
(declare-fun max_stack_size__function_guard (Int tuple0) Bool)
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant1 (max_stack_size us_void_param) true false true true) :pattern ((max_stack_size us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (max_stack_size us_void_param) 100) :pattern ((max_stack_size us_void_param)))))
(declare-sort pointer_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (pointer_range pointer_range) Bool)
(declare-const dummy2 pointer_range)
(declare-datatypes () ((pointer_range__ref (mk_pointer_range__ref (pointer_range__content pointer_range)))))
(define-fun pointer_range__ref___projection ((a pointer_range__ref)) pointer_range (pointer_range__content a))
(declare-fun to_rep1 (pointer_range) Int)
(declare-fun of_rep1 (Int) pointer_range)
(assert (forall ((x pointer_range)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x pointer_range)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stack__stack_type__s (Array Int integer)) (rec__stack__stack_type__pointer pointer_range)))))
(define-fun us_split_fields_S__projection ((a us_split_fields)) (Array Int integer) (rec__stack__stack_type__s a))
(define-fun us_split_fields_Pointer__projection ((a us_split_fields)) pointer_range (rec__stack__stack_type__pointer a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stack__stack_type__s (us_split_fields1 a)) 1 100 (rec__stack__stack_type__s (us_split_fields1 b)) 1 100) true) (= (to_rep1 (rec__stack__stack_type__pointer (us_split_fields1 a))) (to_rep1 (rec__stack__stack_type__pointer (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stack__stack_type__s__first__bit Int)
(declare-const stack__stack_type__s__last__bit Int)
(declare-const stack__stack_type__s__position Int)
(assert (<= 0 stack__stack_type__s__first__bit))
(assert (< stack__stack_type__s__first__bit stack__stack_type__s__last__bit))
(assert (<= 0 stack__stack_type__s__position))
(declare-const stack__stack_type__pointer__first__bit Int)
(declare-const stack__stack_type__pointer__last__bit Int)
(declare-const stack__stack_type__pointer__position Int)
(assert (<= 0 stack__stack_type__pointer__first__bit))
(assert (< stack__stack_type__pointer__first__bit stack__stack_type__pointer__last__bit))
(assert (<= 0 stack__stack_type__pointer__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((stack_type__ref (mk_stack_type__ref (stack_type__content us_rep)))))
(define-fun stack_type__ref___projection ((a stack_type__ref)) us_rep (stack_type__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun count (us_split_fields) Int)
(declare-fun count__function_guard (Int us_split_fields) Bool)
(assert (forall ((stack__my_stack__fields us_split_fields)) (! (dynamic_invariant1 (count stack__my_stack__fields) true false true true) :pattern ((count stack__my_stack__fields)))))
(assert (forall ((stack__my_stack__fields us_split_fields)) (! (= (count stack__my_stack__fields) (to_rep1 (rec__stack__stack_type__pointer (us_split_fields1 (mk___rep stack__my_stack__fields))))) :pattern ((count stack__my_stack__fields)))))
(declare-fun stack_entry (Int us_split_fields) Int)
(declare-fun stack_entry__function_guard (Int Int us_split_fields) Bool)
(assert (forall ((n Int)) (forall ((stack__my_stack__fields us_split_fields)) (! (=> (and (dynamic_invariant1 n true true true true) (and (<= 1 n) (<= n (count stack__my_stack__fields)))) (dynamic_invariant (stack_entry n stack__my_stack__fields) true false true true)) :pattern ((stack_entry n stack__my_stack__fields))))))
(assert (forall ((n Int)) (forall ((stack__my_stack__fields us_split_fields)) (! (=> (dynamic_invariant1 n true true true true) (= (stack_entry n stack__my_stack__fields) (to_rep (let ((temp___164 (rec__stack__stack_type__s (us_split_fields1 (mk___rep stack__my_stack__fields))))) (select temp___164 n))))) :pattern ((stack_entry n stack__my_stack__fields))))))
(declare-fun is_full (us_split_fields) Bool)
(declare-fun is_full__function_guard (Bool us_split_fields) Bool)
(assert true)
(assert (forall ((stack__my_stack__fields us_split_fields)) (! (= (= (is_full stack__my_stack__fields) true) (= (count stack__my_stack__fields) (max_stack_size Tuple0))) :pattern ((is_full stack__my_stack__fields)))))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort index_range 0)
(define-fun in_range4 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (index_range index_range) Bool)
(declare-const dummy5 index_range)
(declare-datatypes () ((index_range__ref (mk_index_range__ref (index_range__content index_range)))))
(define-fun index_range__ref___projection ((a index_range__ref)) index_range (index_range__content a))
(define-fun dynamic_invariant2 ((temp___expr_179 Int) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (=> (or (= temp___is_init_175 true) (<= 0 100)) (in_range3 temp___expr_179)))
(define-fun dynamic_invariant3 ((temp___expr_186 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool) (temp___do_typ_inv_185 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 1 100)) (in_range4 temp___expr_186)))
(declare-const my_stack__split_fields (Array Int integer))
(declare-const my_stack__split_fields1 pointer_range)
(declare-const o Int)
(declare-const o1 pointer_range)
(declare-const o2 (Array Int integer))
(declare-const o3 pointer_range)
(declare-const temp___220 (Array Int integer))
(declare-const temp___2201 pointer_range)
(declare-const o4 integer)
(declare-const o5 Int)
(declare-const o6 (Array Int integer))
(declare-const o7 (Array Int integer))
(declare-const o8 pointer_range)
(declare-const temp___224 (Array Int integer))
(declare-const temp___2241 pointer_range)
(declare-const result (Array Int integer))
(declare-const result1 pointer_range)
(declare-const my_stack__split_fields2 (Array Int integer))
(declare-const my_stack__split_fields3 pointer_range)
(declare-const result2 (Array Int integer))
(declare-const result3 pointer_range)
(declare-const my_stack__split_fields4 (Array Int integer))
(declare-const my_stack__split_fields5 pointer_range)
(declare-const my_stack__split_fields6 (Array Int integer))
(declare-const my_stack__split_fields7 pointer_range)
(declare-const my_stack__split_fields8 (Array Int integer))
(declare-const my_stack__split_fields9 pointer_range)
(assert (in_range1 x))
(assert (not (= (is_full (mk___split_fields my_stack__split_fields my_stack__split_fields1)) true)))
(assert (and (= o (+ (to_rep1 my_stack__split_fields1) 1)) (in_range3 (+ (to_rep1 my_stack__split_fields1) 1))))
(assert (= (to_rep1 o1) o))
(assert (= my_stack__split_fields o2))
(assert (= o1 o3))
(assert (= temp___220 o2))
(assert (= temp___2201 o3))
(assert (= (mk___split_fields__ref (mk___split_fields result result1)) (mk___split_fields__ref (mk___split_fields my_stack__split_fields my_stack__split_fields1))))
(assert (= temp___220 my_stack__split_fields2))
(assert (= temp___2201 my_stack__split_fields3))
(assert (= (to_rep o4) x))
(assert (and (<= 1 (to_rep1 my_stack__split_fields3)) (<= (to_rep1 my_stack__split_fields3) 100)))
(assert (= o5 (to_rep1 my_stack__split_fields3)))
(assert (= o6 (store my_stack__split_fields2 o5 o4)))
(assert (= o6 o7))
(assert (= my_stack__split_fields3 o8))
(assert (= temp___224 o7))
(assert (= temp___2241 o8))
(assert (= result2 my_stack__split_fields2))
(assert (= result3 my_stack__split_fields3))
(assert (= temp___224 my_stack__split_fields4))
(assert (= temp___2241 my_stack__split_fields5))
(assert (= my_stack__split_fields6 my_stack__split_fields4))
(assert (= my_stack__split_fields7 my_stack__split_fields5))
(assert (= (mk___split_fields my_stack__split_fields8 my_stack__split_fields9) (mk___split_fields my_stack__split_fields4 my_stack__split_fields5)))
(assert (not (= (count (mk___split_fields my_stack__split_fields6 my_stack__split_fields7)) (+ (count (mk___split_fields my_stack__split_fields my_stack__split_fields1)) 1))))
(check-sat)
(exit)
