(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort category 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (category category) Bool)
(declare-const dummy1 category)
(declare-datatypes () ((category__ref (mk_category__ref (category__content category)))))
(define-fun category__ref___projection ((a category__ref)) category (category__content a))
(declare-fun to_rep1 (category) Int)
(declare-fun of_rep1 (Int) category)
(assert (forall ((x category)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x category)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((num_item_t__ref (mk_num_item_t__ref (num_item_t__content us_t)))))
(define-fun num_item_t__ref___projection ((a num_item_t__ref)) us_t (num_item_t__content a))
(define-fun dynamic_invariant ((temp___expr_176 us_t) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (not (= temp___skip_constant_173 true)) (dynamic_property 1 8 (first1 temp___expr_176) (last1 temp___expr_176))))
(declare-sort t3s 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (t3s t3s) Bool)
(declare-const dummy4 t3s)
(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content t3s)))))
(define-fun t3s__ref___projection ((a t3s__ref)) t3s (t3s__content a))
(declare-const num_item_per_category us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun counter_example__num_item_per_category__aggregate_def (Int Int Int Int Int Int Int Int) (Array Int natural))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__counter_example__item__cat category) (rec__counter_example__item__idx natural)))))
(define-fun us_split_fields_Cat__projection ((a us_split_fields)) category (rec__counter_example__item__cat a))
(define-fun us_split_fields_Idx__projection ((a us_split_fields)) natural (rec__counter_example__item__idx a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__counter_example__item__cat (us_split_fields1 a))) (to_rep1 (rec__counter_example__item__cat (us_split_fields1 b)))) (= (to_rep (rec__counter_example__item__idx (us_split_fields1 a))) (to_rep (rec__counter_example__item__idx (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const counter_example__item__cat__first__bit Int)
(declare-const counter_example__item__cat__last__bit Int)
(declare-const counter_example__item__cat__position Int)
(assert (<= 0 counter_example__item__cat__first__bit))
(assert (< counter_example__item__cat__first__bit counter_example__item__cat__last__bit))
(assert (<= 0 counter_example__item__cat__position))
(declare-const counter_example__item__idx__first__bit Int)
(declare-const counter_example__item__idx__last__bit Int)
(declare-const counter_example__item__idx__position Int)
(assert (<= 0 counter_example__item__idx__first__bit))
(assert (< counter_example__item__idx__first__bit counter_example__item__idx__last__bit))
(assert (<= 0 counter_example__item__idx__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((item__ref (mk_item__ref (item__content us_rep)))))
(define-fun item__ref___projection ((a item__ref)) us_rep (item__content a))
(define-fun dynamic_invariant1 ((temp___expr_182 us_rep) (temp___is_init_178 Bool) (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool) (temp___do_typ_inv_181 Bool)) Bool (=> (= temp___do_toplevel_180 true) (=> (= temp___is_init_178 true) (<= (to_rep (rec__counter_example__item__idx (us_split_fields1 temp___expr_182))) (to_rep (select (to_array num_item_per_category) (to_rep1 (rec__counter_example__item__cat (us_split_fields1 temp___expr_182)))))))))
(define-fun dynamic_predicate ((temp___188 us_rep)) Bool (<= (to_rep (rec__counter_example__item__idx (us_split_fields1 temp___188))) (to_rep (select (to_array num_item_per_category) (to_rep1 (rec__counter_example__item__cat (us_split_fields1 temp___188)))))))
(declare-const i5s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(define-fun dynamic_invariant4 ((temp___expr_169 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool) (temp___do_typ_inv_168 Bool)) Bool (=> (or (= temp___is_init_165 true) (<= 1 8)) (in_range1 temp___expr_169)))
(assert (= num_item_per_category (of_array (counter_example__num_item_per_category__aggregate_def 3 8 10000 42 98 76 0 1) 1 8)))
(assert (forall ((temp___156 Int) (temp___157 Int) (temp___158 Int) (temp___159 Int) (temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int)) (let ((temp___155 (counter_example__num_item_per_category__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163))) (=> (and (and (and (and (and (and (and (dynamic_invariant2 temp___156 true true true true) (dynamic_invariant2 temp___157 true true true true)) (dynamic_invariant2 temp___158 true true true true)) (dynamic_invariant2 temp___159 true true true true)) (dynamic_invariant2 temp___160 true true true true)) (dynamic_invariant2 temp___161 true true true true)) (dynamic_invariant2 temp___162 true true true true)) (dynamic_invariant2 temp___163 true true true true)) (and (and (and (and (and (and (and (= (to_rep (select temp___155 1)) temp___156) (= (to_rep (select temp___155 2)) temp___157)) (= (to_rep (select temp___155 3)) temp___158)) (= (to_rep (select temp___155 4)) temp___159)) (= (to_rep (select temp___155 5)) temp___160)) (= (to_rep (select temp___155 6)) temp___161)) (= (to_rep (select temp___155 7)) temp___162)) (= (to_rep (select temp___155 8)) temp___163))))))
(assert (dynamic_invariant num_item_per_category true false true true))
(assert (= (mk___t (counter_example__num_item_per_category__aggregate_def 3 8 10000 42 98 76 0 1) (mk 1 8)) num_item_per_category))
(assert (not (<= (to_rep2 (first (rt num_item_per_category))) (to_rep1 (rec__counter_example__item__cat (us_split_fields1 i5s))))))
(check-sat)
(exit)
