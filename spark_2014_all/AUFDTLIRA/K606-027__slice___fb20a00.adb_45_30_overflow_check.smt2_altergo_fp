(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic str : (int,character) farray

logic str1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic sub : (int,character) farray

logic sub1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type tTnew_strSP1__ref = { tTnew_strSP1__content : integer
}

function tTnew_strSP1__ref___projection(a: tTnew_strSP1__ref) : integer =
  (a).tTnew_strSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,character) farray

logic dummy7 : t1

type tnew_strS__ref = { tnew_strS__content : us_t1
}

function tnew_strS__ref___projection(a: tnew_strS__ref) : us_t1 =
  (a).tnew_strS__content

logic new_str__first : integer

logic new_str__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type tTnew_subSP1__ref = { tTnew_subSP1__content : integer
}

function tTnew_subSP1__ref___projection(a: tTnew_subSP1__ref) : integer =
  (a).tTnew_subSP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,character) farray

logic dummy10 : t2

type tnew_subS__ref = { tnew_subS__content : us_t2
}

function tnew_subS__ref___projection(a: tnew_subS__ref) : us_t2 =
  (a).tnew_subS__content

logic new_sub__first : integer

logic new_sub__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic upper_case : us_t -> us_t

logic upper_case__function_guard : us_t, us_t -> prop

axiom upper_case__post_axiom :
  (forall str2:(int,character) farray. forall str3:t [upper_case({ elts =
  str2; rt = str3 })]. dynamic_property(1, 2147483647,
  to_rep1(first((upper_case({ elts = str2; rt = str3 })).rt)),
  to_rep1(last((upper_case({ elts = str2; rt = str3 })).rt))))

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type t8b__ref = { t8b__content : integer
}

function t8b__ref___projection(a: t8b__ref) : integer = (a).t8b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq12(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,character) farray

logic dummy13 : t3

type t9b__ref = { t9b__content : us_t3
}

function t9b__ref___projection(a: t9b__ref) : us_t3 = (a).t9b__content

 (* File "fb20a00.ads", line 43, characters 0-0 *)
goal WP_parameter_def :
  (forall new_str:(int,character) farray.
  forall new_sub:(int,character) farray. forall pos:int.
  forall temp___234:(int,character) farray. forall temp___2341:t.
  forall temp___235:(int,character) farray. forall temp___2351:t1.
  forall o:(int,character) farray. forall o1:t1.
  forall o2:(int,character) farray. forall temp___236:(int,character) farray.
  forall temp___2361:t. forall temp___237:(int,character) farray.
  forall temp___2371:t2. forall o3:(int,character) farray. forall o4:t2.
  forall o5:(int,character) farray. forall o6:int. forall o7:int.
  forall o8:int. forall o9:int. forall o10:int.
  forall fb20a00__find__L_2__R7b:int. forall o11:(int,character) farray.
  forall temp___239:(int,character) farray. forall temp___2391:t3.
  forall o12:bool. forall o13:int. forall o14:int. forall o15:int.
  forall o16:int. forall o17:int. forall o18:int. forall temp___238:int.
  forall o19:int. forall o20:int. forall o21:int. forall o22:int.
  forall o23:int. forall o24:int. forall fb20a00__find__L_2__R7b1:int.
  forall o25:(int,character) farray.
  forall temp___2392:(int,character) farray. forall temp___2393:t3.
  forall o26:bool. forall o27:int. forall o28:int. forall o29:int.
  forall o30:int. forall o31:int. forall o32:int. forall o33:bool.
  forall o34:int. forall o35:int. forall o36:int. forall result:int.
  forall pos1:int. forall result1:(int,character) farray.
  forall new_str1:(int,character) farray.
  forall result2:(int,character) farray.
  forall new_sub1:(int,character) farray. forall result3:bool.
  forall result4:bool. forall pos2:int. forall result5:int. forall pos3:int.
  forall result6:bool. forall result7:bool. forall pos4:int. forall pos5:int.
  forall pos6:int. forall pos7:int. (dynamic_property(1, 2147483647,
  to_rep1(first(str1)), to_rep1(last(str1))) -> (dynamic_property(1,
  2147483647, to_rep1(first(sub1)), to_rep1(last(sub1))) ->
  ((dynamic_property2(to_rep1(first(str1)), to_rep1(last(str1)),
  to_rep1(new_str__first), to_rep1(new_str__last)) and
  ((to_rep1(new_str__first) = to_rep1(first(str1))) and
  (to_rep1(new_str__last) = to_rep1(last(str1))))) ->
  ((dynamic_property4(to_rep1(first(sub1)), to_rep1(last(sub1)),
  to_rep1(new_sub__first), to_rep1(new_sub__last)) and
  ((to_rep1(new_sub__first) = to_rep1(first(sub1))) and
  (to_rep1(new_sub__last) = to_rep1(last(sub1))))) -> (((result = pos) and
  (pos1 = to_rep1(first(str1)))) -> (in_range1(pos1) -> ((((((({ elts =
  temp___234; rt = temp___2341 } = upper_case({ elts = str; rt = str1 })) and
  dynamic_property(1, 2147483647, to_rep1(first(temp___2341)),
  to_rep1(last(temp___2341)))) and
  ((((to_rep1(first(temp___2341)) <= to_rep1(last(temp___2341))) and
  (((to_rep1(first(str1)) <= to_rep1(last(str1))) and
  (((to_rep1(last(temp___2341)) - to_rep1(first(temp___2341))) + 1) = ((to_rep1(last(str1)) - to_rep1(first(str1))) + 1))) or
  ((not (to_rep1(first(str1)) <= to_rep1(last(str1)))) and
  (((to_rep1(last(temp___2341)) - to_rep1(first(temp___2341))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___2341)) <= to_rep1(last(temp___2341)))) and
  (((to_rep1(first(str1)) <= to_rep1(last(str1))) and
  (0 = ((to_rep1(last(str1)) - to_rep1(first(str1))) + 1))) or
  (not (to_rep1(first(str1)) <= to_rep1(last(str1))))))) and
  ((slide(temp___234, to_rep1(first(temp___2341)),
  to_rep1(first(str1))) = temp___235) and (mk1(to_rep1(first(str1)),
  to_rep1(last(str1))) = temp___2351)))) and
  ((((to_rep1(first2(temp___2351)) <= to_rep1(last2(temp___2351))) and
  (((to_rep1(new_str__first) <= to_rep1(new_str__last)) and
  (((to_rep1(last2(temp___2351)) - to_rep1(first2(temp___2351))) + 1) = ((to_rep1(new_str__last) - to_rep1(new_str__first)) + 1))) or
  ((not (to_rep1(new_str__first) <= to_rep1(new_str__last))) and
  (((to_rep1(last2(temp___2351)) - to_rep1(first2(temp___2351))) + 1) = 0)))) or
  ((not (to_rep1(first2(temp___2351)) <= to_rep1(last2(temp___2351)))) and
  (((to_rep1(new_str__first) <= to_rep1(new_str__last)) and
  (0 = ((to_rep1(new_str__last) - to_rep1(new_str__first)) + 1))) or
  (not (to_rep1(new_str__first) <= to_rep1(new_str__last)))))) and
  ((o = temp___235) and (o1 = temp___2351)))) and (o2 = o)) and
  ((result1 = new_str) and (new_str1 = o2))) -> ((((((({ elts = temp___236;
  rt = temp___2361 } = upper_case({ elts = sub; rt = sub1 })) and
  dynamic_property(1, 2147483647, to_rep1(first(temp___2361)),
  to_rep1(last(temp___2361)))) and
  ((((to_rep1(first(temp___2361)) <= to_rep1(last(temp___2361))) and
  (((to_rep1(first(sub1)) <= to_rep1(last(sub1))) and
  (((to_rep1(last(temp___2361)) - to_rep1(first(temp___2361))) + 1) = ((to_rep1(last(sub1)) - to_rep1(first(sub1))) + 1))) or
  ((not (to_rep1(first(sub1)) <= to_rep1(last(sub1)))) and
  (((to_rep1(last(temp___2361)) - to_rep1(first(temp___2361))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___2361)) <= to_rep1(last(temp___2361)))) and
  (((to_rep1(first(sub1)) <= to_rep1(last(sub1))) and
  (0 = ((to_rep1(last(sub1)) - to_rep1(first(sub1))) + 1))) or
  (not (to_rep1(first(sub1)) <= to_rep1(last(sub1))))))) and
  ((slide(temp___236, to_rep1(first(temp___2361)),
  to_rep1(first(sub1))) = temp___237) and (mk2(to_rep1(first(sub1)),
  to_rep1(last(sub1))) = temp___2371)))) and
  ((((to_rep1(first4(temp___2371)) <= to_rep1(last4(temp___2371))) and
  (((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (((to_rep1(last4(temp___2371)) - to_rep1(first4(temp___2371))) + 1) = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (((to_rep1(last4(temp___2371)) - to_rep1(first4(temp___2371))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___2371)) <= to_rep1(last4(temp___2371)))) and
  (((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (0 = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  (not (to_rep1(new_sub__first) <= to_rep1(new_sub__last)))))) and
  ((o3 = temp___237) and (o4 = temp___2371)))) and (o5 = o3)) and
  ((result2 = new_sub) and (new_sub1 = o5))) ->
  (((((((((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (o6 = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (o6 = 0))) and ((o7 = o6) and in_range1(o6))) and (o8 = (pos1 + o7))) and
  ((o9 = o8) and in_range1(o8))) and (o10 = (o9 - 1))) and
  ((fb20a00__find__L_2__R7b = o10) and in_range1(o10))) and
  ((((((((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (o13 = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (o13 = 0))) and ((o14 = o13) and in_range1(o13))) and
  (o15 = (to_rep1(new_str__last) - o14))) and ((o16 = o15) and
  in_range1(o15))) and (o17 = (o16 + 1))) and ((o18 = o17) and
  in_range1(o17))) and (((pos1 <= o18) and (result4 = true)) or
  ((not (pos1 <= o18)) and (result4 = false)))) and (((result4 = true) and
  ((((((pos1 <= fb20a00__find__L_2__R7b) ->
  (((to_rep1(new_str__first) <= pos1) and
  (pos1 <= to_rep1(new_str__last))) and
  ((to_rep1(new_str__first) <= fb20a00__find__L_2__R7b) and
  (fb20a00__find__L_2__R7b <= to_rep1(new_str__last))))) and
  (o11 = new_str1)) and ((o11 = temp___239) and (mk3(pos1,
  fb20a00__find__L_2__R7b) = temp___2391))) and (o12 = bool_eq5(temp___239,
  to_rep1(first6(temp___2391)), to_rep1(last6(temp___2391)), new_sub1,
  to_rep1(new_sub__first), to_rep1(new_sub__last)))) and
  (((not (o12 = true)) and (result3 = true)) or ((o12 = true) and
  (result3 = false))))) or ((not (result4 = true)) and
  (result3 = false))))) and (((result3 = true) and ((((temp___238 = pos1) and
  (((((- 2147483648) <= 2147483647) -> in_range1(pos2)) and
  (((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  ((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (pos2 <= ((to_rep1(new_str__last) - ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (pos2 <= ((to_rep1(new_str__last) - 0) + 1)))) and (not (bool_eq5(new_str1,
  to_rep1(first6(mk3(pos2,
  ((pos2 + ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1)) - 1)))),
  to_rep1(last6(mk3(pos2,
  ((pos2 + ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1)) - 1)))),
  new_sub1, to_rep1(new_sub__first), to_rep1(new_sub__last)) = true)))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  ((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (pos2 <= ((to_rep1(new_str__last) - ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (pos2 <= ((to_rep1(new_str__last) - 0) + 1)))) and (not (bool_eq5(new_str1,
  to_rep1(first6(mk3(pos2, ((pos2 + 0) - 1)))), to_rep1(last6(mk3(pos2,
  ((pos2 + 0) - 1)))), new_sub1, to_rep1(new_sub__first),
  to_rep1(new_sub__last)) = true)))))) and ((((o19 = (pos2 + 1)) and
  in_range1((pos2 + 1))) and ((pos2 = result5) and (pos3 = o19))) and
  (((((((((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (o20 = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (o20 = 0))) and ((o21 = o20) and in_range1(o20))) and
  (o22 = (pos3 + o21))) and ((o23 = o22) and in_range1(o22))) and
  (o24 = (o23 - 1))) and ((fb20a00__find__L_2__R7b1 = o24) and
  in_range1(o24))) and
  ((((((((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (o27 = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (o27 = 0))) and ((o28 = o27) and in_range1(o27))) and
  (o29 = (to_rep1(new_str__last) - o28))) and ((o30 = o29) and
  in_range1(o29))) and (o31 = (o30 + 1))) and ((o32 = o31) and
  in_range1(o31))) and (((pos3 <= o32) and (result7 = true)) or
  ((not (pos3 <= o32)) and (result7 = false)))) and (((result7 = true) and
  ((((((pos3 <= fb20a00__find__L_2__R7b1) ->
  (((to_rep1(new_str__first) <= pos3) and
  (pos3 <= to_rep1(new_str__last))) and
  ((to_rep1(new_str__first) <= fb20a00__find__L_2__R7b1) and
  (fb20a00__find__L_2__R7b1 <= to_rep1(new_str__last))))) and
  (o25 = new_str1)) and ((o25 = temp___2392) and (mk3(pos3,
  fb20a00__find__L_2__R7b1) = temp___2393))) and (o26 = bool_eq5(temp___2392,
  to_rep1(first6(temp___2393)), to_rep1(last6(temp___2393)), new_sub1,
  to_rep1(new_sub__first), to_rep1(new_sub__last)))) and
  (((not (o26 = true)) and (o33 = true)) or ((o26 = true) and
  (o33 = false))))) or ((not (result7 = true)) and (o33 = false))))) and
  (((not (o33 = true)) and (result6 = true)) or ((o33 = true) and
  (result6 = false)))) and (result6 = true))))) and ((pos3 = pos4) and
  (pos5 = pos3))) and ((pos6 = pos4) and (pos7 = pos5)))) or
  ((not (result3 = true)) and ((pos1 = pos6) and (pos7 = pos1))))) ->
  ((((((to_rep1(new_sub__first) <= to_rep1(new_sub__last)) and
  (o34 = ((to_rep1(new_sub__last) - to_rep1(new_sub__first)) + 1))) or
  ((not (to_rep1(new_sub__first) <= to_rep1(new_sub__last))) and
  (o34 = 0))) and ((o35 = o34) and in_range1(o34))) and
  (o36 = (to_rep1(new_str__last) - o35))) -> in_range1(o36))))))))))))
