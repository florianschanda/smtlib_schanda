(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (character Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a character)) (forall ((b (Array Int character))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int character) Int Int character) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((b character)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (character Int character) (Array Int character))
(assert (forall ((a character) (b character)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq2 (us_rep us_rep) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((unbounded_string__ref (mk_unbounded_string__ref (unbounded_string__content us_rep)))))
(define-fun unbounded_string__ref___projection ((a unbounded_string__ref)) us_rep (unbounded_string__content a))
(define-fun dynamic_invariant ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun to_string1 (us_rep) us_t)
(declare-fun to_string__function_guard (us_t us_rep) Bool)
(assert (forall ((source us_rep)) (! (dynamic_invariant (to_string1 source) true false true true) :pattern ((to_string1 source)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__people__person__name us_rep) (rec__people__person__dob integer) (rec__people__person__alive Bool) (rec__ext__ us_private)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) us_rep (rec__people__person__name a))
(define-fun us_split_fields_DOB__projection ((a us_split_fields)) integer (rec__people__person__dob a))
(define-fun us_split_fields_Alive__projection ((a us_split_fields)) Bool (rec__people__person__alive a))
(define-fun us_split_fields___3__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___11__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___12__projection ((a us_rep1)) Int (attr__tag a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (bool_eq2 (rec__people__person__name (us_split_fields1 a)) (rec__people__person__name (us_split_fields1 b))) true) (= (to_rep1 (rec__people__person__dob (us_split_fields1 a))) (to_rep1 (rec__people__person__dob (us_split_fields1 b))))) (= (rec__people__person__alive (us_split_fields1 a)) (rec__people__person__alive (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)
(declare-const us_tag Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const people__person__name__first__bit Int)
(declare-const people__person__name__last__bit Int)
(declare-const people__person__name__position Int)
(assert (<= 0 people__person__name__first__bit))
(assert (< people__person__name__first__bit people__person__name__last__bit))
(assert (<= 0 people__person__name__position))
(declare-const people__person__dob__first__bit Int)
(declare-const people__person__dob__last__bit Int)
(declare-const people__person__dob__position Int)
(assert (<= 0 people__person__dob__first__bit))
(assert (< people__person__dob__first__bit people__person__dob__last__bit))
(assert (<= 0 people__person__dob__position))
(declare-const people__person__alive__first__bit Int)
(declare-const people__person__alive__last__bit Int)
(declare-const people__person__alive__position Int)
(assert (<= 0 people__person__alive__first__bit))
(assert (< people__person__alive__first__bit people__person__alive__last__bit))
(assert (<= 0 people__person__alive__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((person__ref (mk_person__ref (person__content us_rep1)))))
(define-fun person__ref___projection ((a person__ref)) us_rep1 (person__content a))
(declare-fun get_name (us_rep1) us_rep)
(declare-fun get_name__function_guard (us_rep us_rep1) Bool)
(declare-fun get_name1 (Int us_rep1) us_rep)
(declare-fun get_name__function_guard1 (us_rep Int us_rep1) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (natural natural) Bool)
(declare-const dummy6 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort professions 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (professions professions) Bool)
(declare-const dummy7 professions)
(declare-datatypes () ((professions__ref (mk_professions__ref (professions__content professions)))))
(define-fun professions__ref___projection ((a professions__ref)) professions (professions__content a))
(declare-fun to_rep3 (professions) Int)
(declare-fun of_rep3 (Int) professions)
(assert (forall ((x professions)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x professions)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort skills 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (skills skills) Bool)
(declare-const dummy8 skills)
(declare-datatypes () ((skills__ref (mk_skills__ref (skills__content skills)))))
(define-fun skills__ref___projection ((a skills__ref)) skills (skills__content a))
(declare-fun to_rep4 (skills) Int)
(declare-fun of_rep4 (Int) skills)
(assert (forall ((x skills)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x skills)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int skills))))))
(declare-fun slide1 ((Array Int skills) Int Int) (Array Int skills))
(assert (forall ((a (Array Int skills))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int skills))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int skills)) (a__first Int) (a__last Int) (b (Array Int skills)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_181 Int)) (=> (and (<= a__first temp___idx_181) (<= temp___idx_181 a__last)) (= (to_rep4 (select a temp___idx_181)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_181))))))) true false))
(assert (forall ((a (Array Int skills)) (b (Array Int skills))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_181 Int)) (=> (and (<= a__first temp___idx_181) (<= temp___idx_181 a__last)) (= (to_rep4 (select a temp___idx_181)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_181)))))))))))
(declare-const dummy9 (Array Int skills))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int skills)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int skills)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int skills)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int skills))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int skills))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int skills))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq9 ((Array Int skills) (Array Int skills)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__professionals__professional__profession professions) (rec__professionals__professional__skilled_in (Array Int skills)) (rec__professionals__professional__number_of_people_killed natural) (rec__people__person__name1 us_rep) (rec__people__person__dob1 integer) (rec__people__person__alive1 Bool) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Profession__projection ((a us_split_fields2)) professions (rec__professionals__professional__profession a))
(define-fun us_split_fields_Skilled_In__projection ((a us_split_fields2)) (Array Int skills) (rec__professionals__professional__skilled_in a))
(define-fun us_split_fields_Number_Of_People_Killed__projection ((a us_split_fields2)) natural (rec__professionals__professional__number_of_people_killed a))
(define-fun us_split_fields_Name__2__projection ((a us_split_fields2)) us_rep (rec__people__person__name1 a))
(define-fun us_split_fields_DOB__2__projection ((a us_split_fields2)) integer (rec__people__person__dob1 a))
(define-fun us_split_fields_Alive__2__projection ((a us_split_fields2)) Bool (rec__people__person__alive1 a))
(define-fun us_split_fields___5__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___15__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___16__projection ((a us_rep2)) Int (attr__tag1 a))
(declare-fun hide_ext__ (professions (Array Int skills) natural us_private) us_private)
(declare-fun extract__profession (us_private) professions)
(assert (forall ((profession professions)) (forall ((skilled_in (Array Int skills))) (forall ((number_of_people_killed natural)) (forall ((rec__ext__2 us_private)) (= (extract__profession (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) profession))))))
(declare-fun extract__skilled_in (us_private) (Array Int skills))
(assert (forall ((profession professions)) (forall ((skilled_in (Array Int skills))) (forall ((number_of_people_killed natural)) (forall ((rec__ext__2 us_private)) (= (extract__skilled_in (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) skilled_in))))))
(declare-fun extract__number_of_people_killed (us_private) natural)
(assert (forall ((profession professions)) (forall ((skilled_in (Array Int skills))) (forall ((number_of_people_killed natural)) (forall ((rec__ext__2 us_private)) (= (extract__number_of_people_killed (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) number_of_people_killed))))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep2)) us_rep1 (mk___rep (mk___split_fields (rec__people__person__name1 (us_split_fields3 a)) (rec__people__person__dob1 (us_split_fields3 a)) (rec__people__person__alive1 (us_split_fields3 a)) (hide_ext__ (rec__professionals__professional__profession (us_split_fields3 a)) (rec__professionals__professional__skilled_in (us_split_fields3 a)) (rec__professionals__professional__number_of_people_killed (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep1 (mk___split_fields1 (extract__profession (rec__ext__ (us_split_fields1 r))) (extract__skilled_in (rec__ext__ (us_split_fields1 r))) (extract__number_of_people_killed (rec__ext__ (us_split_fields1 r))) (rec__people__person__name (us_split_fields1 r)) (rec__people__person__dob (us_split_fields1 r)) (rec__people__person__alive (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq5 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (and (and (= (to_rep3 (rec__professionals__professional__profession (us_split_fields3 a))) (to_rep3 (rec__professionals__professional__profession (us_split_fields3 b)))) (= (bool_eq4 (rec__professionals__professional__skilled_in (us_split_fields3 a)) 1 4 (rec__professionals__professional__skilled_in (us_split_fields3 b)) 1 4) true)) (= (to_rep2 (rec__professionals__professional__number_of_people_killed (us_split_fields3 a))) (to_rep2 (rec__professionals__professional__number_of_people_killed (us_split_fields3 b))))) (= (bool_eq2 (rec__people__person__name1 (us_split_fields3 a)) (rec__people__person__name1 (us_split_fields3 b))) true)) (= (to_rep1 (rec__people__person__dob1 (us_split_fields3 a))) (to_rep1 (rec__people__person__dob1 (us_split_fields3 b))))) (= (rec__people__person__alive1 (us_split_fields3 a)) (rec__people__person__alive1 (us_split_fields3 b)))) true false))
(declare-const us_tag1 Int)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const professionals__professional__profession__first__bit Int)
(declare-const professionals__professional__profession__last__bit Int)
(declare-const professionals__professional__profession__position Int)
(assert (<= 0 professionals__professional__profession__first__bit))
(assert (< professionals__professional__profession__first__bit professionals__professional__profession__last__bit))
(assert (<= 0 professionals__professional__profession__position))
(declare-const professionals__professional__skilled_in__first__bit Int)
(declare-const professionals__professional__skilled_in__last__bit Int)
(declare-const professionals__professional__skilled_in__position Int)
(assert (<= 0 professionals__professional__skilled_in__first__bit))
(assert (< professionals__professional__skilled_in__first__bit professionals__professional__skilled_in__last__bit))
(assert (<= 0 professionals__professional__skilled_in__position))
(declare-const professionals__professional__number_of_people_killed__first__bit Int)
(declare-const professionals__professional__number_of_people_killed__last__bit Int)
(declare-const professionals__professional__number_of_people_killed__position Int)
(assert (<= 0 professionals__professional__number_of_people_killed__first__bit))
(assert (< professionals__professional__number_of_people_killed__first__bit professionals__professional__number_of_people_killed__last__bit))
(assert (<= 0 professionals__professional__number_of_people_killed__position))
(declare-const people__person__name__first__bit1 Int)
(declare-const people__person__name__last__bit1 Int)
(declare-const people__person__name__position1 Int)
(assert (<= 0 people__person__name__first__bit1))
(assert (< people__person__name__first__bit1 people__person__name__last__bit1))
(assert (<= 0 people__person__name__position1))
(declare-const people__person__dob__first__bit1 Int)
(declare-const people__person__dob__last__bit1 Int)
(declare-const people__person__dob__position1 Int)
(assert (<= 0 people__person__dob__first__bit1))
(assert (< people__person__dob__first__bit1 people__person__dob__last__bit1))
(assert (<= 0 people__person__dob__position1))
(declare-const people__person__alive__first__bit1 Int)
(declare-const people__person__alive__last__bit1 Int)
(declare-const people__person__alive__position1 Int)
(assert (<= 0 people__person__alive__first__bit1))
(assert (< people__person__alive__first__bit1 people__person__alive__last__bit1))
(assert (<= 0 people__person__alive__position1))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((professional__ref (mk_professional__ref (professional__content us_rep2)))))
(define-fun professional__ref___projection ((a professional__ref)) us_rep2 (professional__content a))
(define-fun in_range6 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Bool)
(declare-fun to_unbounded_string (us_t) us_rep)
(declare-fun to_unbounded_string__function_guard (us_rep us_t) Bool)
(declare-fun temp___String_Literal_1005 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1005 us_void_param) 1)) 78) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 2)) 97)) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 3)) 109)) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 4)) 101)) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 6)) 101)) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 7)) 115)) (= (to_rep (select (temp___String_Literal_1005 us_void_param) 8)) 115)) :pattern ((temp___String_Literal_1005 us_void_param)))))
(define-fun default_initial_assumption ((temp___expr_1003 us_rep1) (temp___skip_top_level_1004 Bool)) Bool (and (= (attr__tag temp___expr_1003) us_tag) (and (and (= (rec__people__person__name (us_split_fields1 temp___expr_1003)) (to_unbounded_string (of_array (temp___String_Literal_1005 Tuple0) 1 8))) (= (to_rep1 (rec__people__person__dob (us_split_fields1 temp___expr_1003))) (- 1))) (= (rec__people__person__alive (us_split_fields1 temp___expr_1003)) (distinct 0 0)))))
(assert true)
(assert true)
(assert (forall ((p us_rep1)) (! (= (get_name p) (get_name1 us_tag1 p)) :pattern ((get_name1 us_tag1 p)))))
(assert (forall ((p us_rep1)) (! (= (get_name p) (get_name1 us_tag p)) :pattern ((get_name1 us_tag p)))))
(declare-fun is_alive (us_rep1) Bool)
(declare-fun is_alive__function_guard (Bool us_rep1) Bool)
(declare-fun is_alive1 (Int us_rep1) Bool)
(declare-fun is_alive__function_guard1 (Bool Int us_rep1) Bool)
(assert true)
(assert true)
(assert (forall ((p us_rep1)) (! (= (ite (is_alive p) 1 0) (ite (is_alive1 us_tag1 p) 1 0)) :pattern ((is_alive1 us_tag1 p)))))
(assert (forall ((p us_rep1)) (! (= (ite (is_alive p) 1 0) (ite (is_alive1 us_tag p) 1 0)) :pattern ((is_alive1 us_tag p)))))
(define-fun default_initial_assumption1 ((temp___expr_1055 us_rep2) (temp___skip_top_level_1056 Bool)) Bool (and (= (attr__tag1 temp___expr_1055) us_tag1) (and (and (= (rec__people__person__name1 (us_split_fields3 temp___expr_1055)) (to_unbounded_string (of_array (temp___String_Literal_1005 Tuple0) 1 8))) (= (to_rep1 (rec__people__person__dob1 (us_split_fields3 temp___expr_1055))) (- 1))) (= (rec__people__person__alive1 (us_split_fields3 temp___expr_1055)) (distinct 0 0)))))
(declare-const this us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun temp___String_Literal_1143 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (= (to_rep (select (temp___String_Literal_1143 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_1143 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_1143 us_void_param) 3)) 115)) (= (to_rep (select (temp___String_Literal_1143 us_void_param) 4)) 32)) :pattern ((temp___String_Literal_1143 us_void_param)))))
(declare-fun temp___String_Literal_1146 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_1146 us_void_param) 1)) 100) (= (to_rep (select (temp___String_Literal_1146 us_void_param) 2)) 101)) (= (to_rep (select (temp___String_Literal_1146 us_void_param) 3)) 97)) (= (to_rep (select (temp___String_Literal_1146 us_void_param) 4)) 100)) (= (to_rep (select (temp___String_Literal_1146 us_void_param) 5)) 46)) :pattern ((temp___String_Literal_1146 us_void_param)))))
(declare-fun temp___String_Literal_1147 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1147 us_void_param) 1)) 97) (= (to_rep (select (temp___String_Literal_1147 us_void_param) 2)) 108)) (= (to_rep (select (temp___String_Literal_1147 us_void_param) 3)) 105)) (= (to_rep (select (temp___String_Literal_1147 us_void_param) 4)) 118)) (= (to_rep (select (temp___String_Literal_1147 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_1147 us_void_param) 6)) 46)) :pattern ((temp___String_Literal_1147 us_void_param)))))
(declare-fun temp___String_Literal_1148 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1148 us_void_param) 1)) 80) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 2)) 114)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 3)) 111)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 4)) 102)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 6)) 115)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 7)) 115)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 8)) 105)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 9)) 111)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 10)) 110)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 11)) 58)) (= (to_rep (select (temp___String_Literal_1148 us_void_param) 12)) 32)) :pattern ((temp___String_Literal_1148 us_void_param)))))
(declare-fun temp___String_Literal_1153 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_1153 us_void_param) 1)) 83) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 2)) 107)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 3)) 105)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 4)) 108)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 6)) 101)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 7)) 100)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 9)) 105)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 10)) 110)) (= (to_rep (select (temp___String_Literal_1153 us_void_param) 11)) 32)) :pattern ((temp___String_Literal_1153 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant5 ((temp___expr_1022 Int) (temp___is_init_1018 Bool) (temp___skip_constant_1019 Bool) (temp___do_toplevel_1020 Bool) (temp___do_typ_inv_1021 Bool)) Bool (=> (or (= temp___is_init_1018 true) (<= 0 3)) (in_range4 temp___expr_1022)))
(define-fun dynamic_invariant6 ((temp___expr_1029 Int) (temp___is_init_1025 Bool) (temp___skip_constant_1026 Bool) (temp___do_toplevel_1027 Bool) (temp___do_typ_inv_1028 Bool)) Bool (=> (or (= temp___is_init_1025 true) (<= 0 12)) (in_range5 temp___expr_1029)))
(assert true)
(declare-const o us_rep)
(declare-const temp___1144 (Array Int character))
(declare-const temp___11441 t)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(define-fun temp___11442 () us_t (mk___t temp___1144 temp___11441))
(assert (= o (get_name (mk___rep (mk___split_fields (rec__people__person__name1 (us_split_fields3 this)) (rec__people__person__dob1 (us_split_fields3 this)) (rec__people__person__alive1 (us_split_fields3 this)) (hide_ext__ (rec__professionals__professional__profession (us_split_fields3 this)) (rec__professionals__professional__skilled_in (us_split_fields3 this)) (rec__professionals__professional__number_of_people_killed (us_split_fields3 this)) (rec__ext__1 (us_split_fields3 this)))) (attr__tag1 this)))))
(assert (and (= temp___11442 (to_string1 o)) (dynamic_invariant temp___11442 true false true true)))
(assert (not (= (length temp___11442) 0)))
(assert (=> (<= 1 4) (= o1 (+ (- 4 1) 1))))
(assert (=> (not (<= 1 4)) (= o1 0)))
(assert (=> (<= (to_rep1 (first temp___11441)) (to_rep1 (last temp___11441))) (= o2 (+ (- (to_rep1 (last temp___11441)) (to_rep1 (first temp___11441))) 1))))
(assert (=> (not (<= (to_rep1 (first temp___11441)) (to_rep1 (last temp___11441)))) (= o2 0)))
(assert (= o3 (+ o2 o1)))
(assert (= o4 (+ (to_rep1 (first temp___11441)) o3)))
(assert (= o5 (- o4 1)))
(assert (not (in_range1 o5)))
(check-sat)
(exit)
