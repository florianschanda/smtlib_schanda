(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range1 temp___expr_176)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range2 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun temp_____aggregate_def_740 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_749 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_758 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_767 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_4460 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___4462 (Array Int et1))) (forall ((temp___4463 Int) (temp___4464 Int)) (let ((temp___4461 (temp_____aggregate_def_4460 temp___4462 temp___4463 temp___4464))) (=> (and (dynamic_invariant temp___4463 true true true true) (dynamic_invariant1 temp___4464 true true true true)) (forall ((temp___4465 Int)) (ite (= temp___4465 temp___4463) (= (to_rep (select temp___4461 temp___4465)) temp___4464) (= (select temp___4461 temp___4465) (select temp___4462 temp___4465)))))))))
(assert (forall ((temp___742 (Array Int et1))) (forall ((temp___743 Int) (temp___744 Int) (temp___745 Int) (temp___746 Int)) (let ((temp___741 (temp_____aggregate_def_740 temp___742 temp___743 temp___744 temp___745 temp___746))) (=> (and (and (and (dynamic_invariant temp___743 true true true true) (dynamic_invariant1 temp___744 true true true true)) (dynamic_invariant temp___745 true true true true)) (dynamic_invariant1 temp___746 true true true true)) (forall ((temp___747 Int)) (ite (= temp___747 temp___745) (= (to_rep (select temp___741 temp___747)) temp___746) (ite (= temp___747 temp___743) (= (to_rep (select temp___741 temp___747)) temp___744) (= (select temp___741 temp___747) (select temp___742 temp___747))))))))))
(declare-const rliteral et1)
(assert (= (et1qtint rliteral) 99))
(assert (forall ((temp___751 (Array Int et1))) (forall ((temp___752 Int) (temp___753 Int) (temp___754 Int) (temp___755 Int)) (let ((temp___750 (temp_____aggregate_def_749 temp___751 temp___752 temp___753 temp___754 temp___755))) (=> (and (and (and (dynamic_invariant temp___752 true true true true) (dynamic_invariant1 temp___753 true true true true)) (dynamic_invariant temp___754 true true true true)) (dynamic_invariant1 temp___755 true true true true)) (forall ((temp___756 Int)) (ite (= temp___756 temp___754) (= (select temp___750 temp___756) rliteral) (ite (= temp___756 temp___752) (= (to_rep (select temp___750 temp___756)) temp___753) (= (select temp___750 temp___756) (select temp___751 temp___756))))))))))
(assert (forall ((temp___760 (Array Int et1))) (forall ((temp___761 Int) (temp___762 Int) (temp___763 Int) (temp___764 Int)) (let ((temp___759 (temp_____aggregate_def_758 temp___760 temp___761 temp___762 temp___763 temp___764))) (=> (and (and (and (dynamic_invariant temp___761 true true true true) (dynamic_invariant1 temp___762 true true true true)) (dynamic_invariant temp___763 true true true true)) (dynamic_invariant1 temp___764 true true true true)) (forall ((temp___765 Int)) (ite (= temp___765 temp___763) (= (to_rep (select temp___759 temp___765)) temp___764) (ite (= temp___765 temp___761) (= (to_rep (select temp___759 temp___765)) temp___762) (= (select temp___759 temp___765) (select temp___760 temp___765))))))))))
(assert (forall ((temp___769 (Array Int et1))) (forall ((temp___770 Int) (temp___771 Int) (temp___772 Int) (temp___773 Int)) (let ((temp___768 (temp_____aggregate_def_767 temp___769 temp___770 temp___771 temp___772 temp___773))) (=> (and (and (and (dynamic_invariant temp___770 true true true true) (dynamic_invariant1 temp___771 true true true true)) (dynamic_invariant temp___772 true true true true)) (dynamic_invariant1 temp___773 true true true true)) (forall ((temp___774 Int)) (ite (= temp___774 temp___772) (= (select temp___768 temp___774) rliteral) (ite (= temp___774 temp___770) (= (to_rep (select temp___768 temp___774)) temp___771) (= (select temp___768 temp___774) (select temp___769 temp___774))))))))))
(declare-const a (Array Int et1))
(declare-const j Int)
(declare-const f Int)
(declare-const t (Array Int et1))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 Int)
(declare-const result (Array Int et1))
(declare-const t1 (Array Int et1))
(declare-const result1 (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const result3 Int)
(declare-const j2 Int)
(assert (in_range1 i))
(assert (in_range2 e))
(assert (=> (<= 1 10) (in_range1 j)))
(assert (=> (<= 0 99) (in_range2 f)))
(assert (= (mk_map__ref result) (mk_map__ref t)))
(assert (= t1 a))
(assert (= (to_rep o) e))
(assert (= o1 (store a i o)))
(assert (= (mk_map__ref result1) (mk_map__ref a)))
(assert (= a1 o1))
(assert (=> (= i 10) (= result2 j)))
(assert (=> (= i 10) (= j1 1)))
(assert (=> (not (= i 10)) (and (= o2 (+ i 1)) (in_range1 (+ i 1)))))
(assert (=> (not (= i 10)) (= result3 j)))
(assert (=> (not (= i 10)) (= j2 o2)))
(assert (=> (not (= i 10)) (= j1 j2)))
(assert (not (= (bool_eq a1 1 10 (temp_____aggregate_def_4460 t1 i e) 1 10) true)))
(check-sat)
(exit)
