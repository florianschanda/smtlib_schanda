(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__foo__disc_t__valid : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__foo__disc_t__valid

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__foo__disc_t__f : natural
}

function us_split_fields_F__projection(a: us_split_fields) : natural =
  (a).rec__foo__disc_t__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((((a).us_split_discrs1).rec__foo__disc_t__valid = ((b).us_split_discrs1).rec__foo__disc_t__valid) and
  (to_rep(((a).us_split_fields1).rec__foo__disc_t__f) = to_rep(((b).us_split_fields1).rec__foo__disc_t__f))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__foo__disc_t__valid = ((b).us_split_discrs1).rec__foo__disc_t__valid) and
  (to_rep(((a).us_split_fields1).rec__foo__disc_t__f) = to_rep(((b).us_split_fields1).rec__foo__disc_t__f)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = { rec__foo__disc_t__valid = a }; us_split_fields1 = {
  rec__foo__disc_t__f = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__foo__disc_t__valid = a
  }; us_split_fields1 = { rec__foo__disc_t__f = a1 }; attr__constrained = a2
  })))

logic foo__disc_t__valid__first__bit : int

logic foo__disc_t__valid__last__bit : int

logic foo__disc_t__valid__position : int

axiom foo__disc_t__valid__first__bit_axiom :
  (0 <= foo__disc_t__valid__first__bit)

axiom foo__disc_t__valid__last__bit_axiom :
  (foo__disc_t__valid__first__bit <  foo__disc_t__valid__last__bit)

axiom foo__disc_t__valid__position_axiom :
  (0 <= foo__disc_t__valid__position)

logic foo__disc_t__f__first__bit : int

logic foo__disc_t__f__last__bit : int

logic foo__disc_t__f__position : int

axiom foo__disc_t__f__first__bit_axiom : (0 <= foo__disc_t__f__first__bit)

axiom foo__disc_t__f__last__bit_axiom :
  (foo__disc_t__f__first__bit <  foo__disc_t__f__last__bit)

axiom foo__disc_t__f__position_axiom : (0 <= foo__disc_t__f__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : bool

logic dummy3 : natural

logic dummy4 : bool

type disc_t__ref = { disc_t__content : us_rep
}

function disc_t__ref___projection(a: disc_t__ref) : us_rep =
  (a).disc_t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic z__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bool, int -> (int,bool) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)])))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate in_range3(rec__foo__disc_t__valid1: bool, a: us_rep) =
  (rec__foo__disc_t__valid1 = ((a).us_split_discrs1).rec__foo__disc_t__valid)

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__foo__disc_t__valid = a }; us_split_fields1 = {
  rec__foo__disc_t__f = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__foo__disc_t__valid = a
  }; us_split_fields1 = { rec__foo__disc_t__f = a1 }; attr__constrained = a2
  })))

logic foo__disc_t__valid__first__bit1 : int

logic foo__disc_t__valid__last__bit1 : int

logic foo__disc_t__valid__position1 : int

axiom foo__disc_t__valid__first__bit_axiom1 :
  (0 <= foo__disc_t__valid__first__bit1)

axiom foo__disc_t__valid__last__bit_axiom1 :
  (foo__disc_t__valid__first__bit1 <  foo__disc_t__valid__last__bit1)

axiom foo__disc_t__valid__position_axiom1 :
  (0 <= foo__disc_t__valid__position1)

logic foo__disc_t__f__first__bit1 : int

logic foo__disc_t__f__last__bit1 : int

logic foo__disc_t__f__position1 : int

axiom foo__disc_t__f__first__bit_axiom1 : (0 <= foo__disc_t__f__first__bit1)

axiom foo__disc_t__f__last__bit_axiom1 :
  (foo__disc_t__f__first__bit1 <  foo__disc_t__f__last__bit1)

axiom foo__disc_t__f__position_axiom1 : (0 <= foo__disc_t__f__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy5 : bool

logic dummy6 : natural

logic dummy7 : bool

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref___projection(a: t3b__ref) : us_rep = (a).t3b__content

logic temp___165 : bool -> (int,bool) farray

axiom def_axiom :
  (forall temp___167:bool.
  (forall temp___168:int.
  ((temp___165(temp___167)[temp___168]) = temp___167)))

logic x : int

logic y : int

logic z__split_discrs : bool

logic n : int

logic m : bool

logic o : int

logic o1 : int

logic o2 : natural

logic o3 : natural

logic temp___162 : bool

logic temp___1621 : natural

logic temp___1622 : bool

logic result : int

logic n1 : int

logic result1 : int

logic y1 : int

logic result2 : bool

logic m1 : bool

axiom H : ((0 <= 2147483647) -> in_range2(x))

axiom H1 : ((0 <= 2147483647) -> in_range2(y))

axiom H2 : (z__attr__constrained = false)

axiom H3 : ((0 <= 2147483647) -> in_range2(n))

axiom H4 : ((0 <= 2147483647) -> in_range2(o))

axiom H5 : (result = n)

axiom H6 : (n1 = x)

axiom H7 : ((o1 = (y + 1)) and in_range1((y + 1)))

axiom H8 : (result1 = y)

axiom H9 : (y1 = o1)

axiom H10 : (result2 = m)

axiom H11 : (m1 = z__split_discrs)

axiom H12 : (to_rep(o2) = 0)

axiom H13 : (o2 = o3)

axiom H14 : (of_int(0) = temp___162)

axiom H15 : (temp___1621 = o3)

axiom H16 : (true = temp___1622)

axiom H17 : (z__attr__constrained = true)

 (* File "foo.adb", line 36, characters 0-0 *)
goal WP_parameter_def : (temp___162 = z__split_discrs)
