(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort enum_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (enum_t enum_t) Bool)
(declare-const dummy enum_t)
(declare-datatypes () ((enum_t__ref (mk_enum_t__ref (enum_t__content enum_t)))))
(define-fun enum_t__ref___projection ((a enum_t__ref)) enum_t (enum_t__content a))
(declare-fun to_rep (enum_t) Int)
(declare-fun of_rep (Int) enum_t)
(assert (forall ((x enum_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x enum_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort small_index_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (small_index_t small_index_t) Bool)
(declare-const dummy1 small_index_t)
(declare-datatypes () ((small_index_t__ref (mk_small_index_t__ref (small_index_t__content small_index_t)))))
(define-fun small_index_t__ref___projection ((a small_index_t__ref)) small_index_t (small_index_t__content a))
(declare-fun to_rep1 (small_index_t) Int)
(declare-fun of_rep1 (Int) small_index_t)
(assert (forall ((x small_index_t)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x small_index_t)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__array_aggregates__basic_record__a small_index_t) (rec__array_aggregates__basic_record__b Bool) (rec__array_aggregates__basic_record__c enum_t)))))
(define-fun us_split_fields_A__2__projection ((a us_split_fields)) small_index_t (rec__array_aggregates__basic_record__a a))
(define-fun us_split_fields_B__2__projection ((a us_split_fields)) Bool (rec__array_aggregates__basic_record__b a))
(define-fun us_split_fields_C__projection ((a us_split_fields)) enum_t (rec__array_aggregates__basic_record__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___5__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__array_aggregates__basic_record__a (us_split_fields1 a))) (to_rep1 (rec__array_aggregates__basic_record__a (us_split_fields1 b)))) (= (rec__array_aggregates__basic_record__b (us_split_fields1 a)) (rec__array_aggregates__basic_record__b (us_split_fields1 b)))) (= (to_rep (rec__array_aggregates__basic_record__c (us_split_fields1 a))) (to_rep (rec__array_aggregates__basic_record__c (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const array_aggregates__basic_record__a__first__bit Int)
(declare-const array_aggregates__basic_record__a__last__bit Int)
(declare-const array_aggregates__basic_record__a__position Int)
(assert (<= 0 array_aggregates__basic_record__a__first__bit))
(assert (< array_aggregates__basic_record__a__first__bit array_aggregates__basic_record__a__last__bit))
(assert (<= 0 array_aggregates__basic_record__a__position))
(declare-const array_aggregates__basic_record__b__first__bit Int)
(declare-const array_aggregates__basic_record__b__last__bit Int)
(declare-const array_aggregates__basic_record__b__position Int)
(assert (<= 0 array_aggregates__basic_record__b__first__bit))
(assert (< array_aggregates__basic_record__b__first__bit array_aggregates__basic_record__b__last__bit))
(assert (<= 0 array_aggregates__basic_record__b__position))
(declare-const array_aggregates__basic_record__c__first__bit Int)
(declare-const array_aggregates__basic_record__c__last__bit Int)
(declare-const array_aggregates__basic_record__c__position Int)
(assert (<= 0 array_aggregates__basic_record__c__first__bit))
(assert (< array_aggregates__basic_record__c__first__bit array_aggregates__basic_record__c__last__bit))
(assert (<= 0 array_aggregates__basic_record__c__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((basic_record__ref (mk_basic_record__ref (basic_record__content us_rep)))))
(define-fun basic_record__ref___projection ((a basic_record__ref)) us_rep (basic_record__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_168 Int)) (=> (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last)) (= (bool_eq (select a temp___idx_168) (select b (+ (- b__first a__first) temp___idx_168))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_168 Int)) (=> (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last)) (= (bool_eq (select a temp___idx_168) (select b (+ (- b__first a__first) temp___idx_168))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun temp___510 (us_rep us_rep) (Array Int us_rep))
(define-fun dynamic_invariant ((temp___expr_233 Int) (temp___is_init_229 Bool) (temp___skip_constant_230 Bool) (temp___do_toplevel_231 Bool) (temp___do_typ_inv_232 Bool)) Bool (=> (or (= temp___is_init_229 true) (<= 0 2)) (in_range1 temp___expr_233)))
(define-fun dynamic_invariant1 ((temp___expr_303 Int) (temp___is_init_299 Bool) (temp___skip_constant_300 Bool) (temp___do_toplevel_301 Bool) (temp___do_typ_inv_302 Bool)) Bool (=> (or (= temp___is_init_299 true) (<= 1 1000)) (in_range2 temp___expr_303)))
(assert (forall ((temp___512 us_rep) (temp___513 us_rep)) (let ((temp___511 (temp___510 temp___512 temp___513))) (forall ((temp___514 Int)) (ite (or (= temp___514 2) (and (<= 4 temp___514) (<= temp___514 6))) (= (select temp___511 temp___514) temp___512) (= (select temp___511 temp___514) temp___513))))))
(declare-const x (Array Int us_rep))
(declare-const o enum_t)
(declare-const o1 small_index_t)
(declare-const o2 small_index_t)
(declare-const o3 Bool)
(declare-const o4 enum_t)
(declare-const o5 enum_t)
(declare-const o6 small_index_t)
(declare-const o7 small_index_t)
(declare-const o8 Bool)
(declare-const o9 enum_t)
(declare-const o10 small_index_t)
(declare-const o11 Bool)
(declare-const o12 enum_t)
(declare-const o13 small_index_t)
(declare-const o14 Bool)
(declare-const o15 enum_t)
(declare-const o16 (Array Int us_rep))
(declare-const result (Array Int us_rep))
(declare-const x1 (Array Int us_rep))
(assert (= (to_rep o5) 1))
(assert (= (to_rep1 o6) 10))
(assert (= o6 o7))
(assert (= (distinct 1 0) o8))
(assert (= o5 o9))
(assert (= o10 o7))
(assert (= o11 o8))
(assert (= o12 o9))
(assert (= (to_rep o) 0))
(assert (= (to_rep1 o1) 5))
(assert (= o1 o2))
(assert (= (distinct 0 0) o3))
(assert (= o o4))
(assert (= o13 o2))
(assert (= o14 o3))
(assert (= o15 o4))
(assert (= o16 (temp___510 (mk___rep (mk___split_fields o13 o14 o15)) (mk___rep (mk___split_fields o10 o11 o12)))))
(assert (= result x))
(assert (= x1 o16))
(assert (not (= (to_rep (rec__array_aggregates__basic_record__c (us_split_fields1 (select x1 3)))) 2)))
(check-sat)
(exit)
