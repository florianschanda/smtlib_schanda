(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_byte

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref___projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

logic to_rep : unsigned_byte -> int

logic of_rep : int -> unsigned_byte

axiom inversion_axiom :
  (forall x:unsigned_byte [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:unsigned_byte [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,unsigned_byte) farray
}

logic slide : (int,unsigned_byte) farray, int,
  int -> (int,unsigned_byte) farray

axiom slide_eq :
  (forall a:(int,unsigned_byte) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,unsigned_byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,unsigned_byte) farray, int, int,
  (int,unsigned_byte) farray, int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,unsigned_byte) farray. forall a__first:int.
  forall a__last:int. forall b:(int,unsigned_byte) farray.
  forall b__first:int. forall b__last:int [bool_eq3(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_166:int. ((((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) and
  (to_rep((a[temp___idx_166])) = to_rep((b[((b__first - a__first) + temp___idx_166)])))) or
  (not ((a__first <= temp___idx_166) and (temp___idx_166 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_166:int. (((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) ->
  (to_rep((a[temp___idx_166])) = to_rep((b[((b__first - a__first) + temp___idx_166)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,unsigned_byte) farray. forall b:(int,unsigned_byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_166:int. (((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) ->
  (to_rep((a[temp___idx_166])) = to_rep((b[((b__first - a__first) + temp___idx_166)])))))))))

logic dummy1 : (int,unsigned_byte) farray

logic value__size : int

logic object__size : (int,unsigned_byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,unsigned_byte) farray -> int

logic value__alignment : int

logic object__alignment : (int,unsigned_byte) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,unsigned_byte) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,unsigned_byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,unsigned_byte) farray. (0 <= object__alignment(a)))

logic user_eq1 : (int,unsigned_byte) farray,
  (int,unsigned_byte) farray -> bool

type map__ref1 = { map__content1 : (int,(int,unsigned_byte) farray) farray
}

logic slide1 : (int,(int,unsigned_byte) farray) farray, int,
  int -> (int,(int,unsigned_byte) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,unsigned_byte) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,unsigned_byte) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,(int,unsigned_byte) farray) farray, int, int,
  (int,(int,unsigned_byte) farray) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,(int,unsigned_byte) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,unsigned_byte) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq4(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_167:int. ((((a__first <= temp___idx_167) and
  (temp___idx_167 <= a__last)) and (bool_eq3((a[temp___idx_167]), 1, 1000,
  (b[((b__first - a__first) + temp___idx_167)]), 1, 1000) = true)) or
  (not ((a__first <= temp___idx_167) and (temp___idx_167 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_167:int. (((a__first <= temp___idx_167) and
  (temp___idx_167 <= a__last)) -> (bool_eq3((a[temp___idx_167]), 1, 1000,
  (b[((b__first - a__first) + temp___idx_167)]), 1, 1000) = true))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,unsigned_byte) farray) farray.
  forall b:(int,(int,unsigned_byte) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_167:int. (((a__first <= temp___idx_167) and
  (temp___idx_167 <= a__last)) -> (bool_eq3((a[temp___idx_167]), 1, 1000,
  (b[((b__first - a__first) + temp___idx_167)]), 1, 1000) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___520 : (int,unsigned_byte) farray,
  (int,unsigned_byte) farray -> (int,(int,unsigned_byte) farray) farray

logic temp___525 : int, int, int, int -> (int,unsigned_byte) farray

logic temp___532 : int, int -> (int,unsigned_byte) farray

axiom def_axiom :
  (forall temp___522:(int,unsigned_byte) farray.
  forall temp___523:(int,unsigned_byte) farray.
  (forall temp___524:int. ((((temp___524 = 2) or ((4 <= temp___524) and
  (temp___524 <= 6))) -> ((temp___520(temp___522,
  temp___523)[temp___524]) = temp___522)) and ((not ((temp___524 = 2) or
  ((4 <= temp___524) and (temp___524 <= 6)))) -> ((temp___520(temp___522,
  temp___523)[temp___524]) = temp___523)))))

axiom def_axiom1 :
  (forall temp___527:int. forall temp___528:int. forall temp___529:int.
  forall temp___530:int. ((((in_range1(temp___527) and
  in_range1(temp___528)) and in_range1(temp___529)) and
  in_range1(temp___530)) ->
  (forall temp___531:int. (((temp___531 = 3) ->
  (to_rep((temp___525(temp___527, temp___528, temp___529,
  temp___530)[temp___531])) = temp___529)) and ((not (temp___531 = 3)) ->
  (((temp___531 = 2) -> (to_rep((temp___525(temp___527, temp___528,
  temp___529, temp___530)[temp___531])) = temp___528)) and
  ((not (temp___531 = 2)) -> (((temp___531 = 1) ->
  (to_rep((temp___525(temp___527, temp___528, temp___529,
  temp___530)[temp___531])) = temp___527)) and ((not (temp___531 = 1)) ->
  (to_rep((temp___525(temp___527, temp___528, temp___529,
  temp___530)[temp___531])) = temp___530))))))))))

axiom def_axiom2 :
  (forall temp___534:int. forall temp___535:int. ((in_range1(temp___534) and
  in_range1(temp___535)) ->
  (forall temp___536:int. (((temp___536 = 5) ->
  (to_rep((temp___532(temp___534,
  temp___535)[temp___536])) = temp___534)) and ((not (temp___536 = 5)) ->
  (to_rep((temp___532(temp___534, temp___535)[temp___536])) = temp___535))))))

 (* File "array_aggregates.adb", line 211, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,(int,unsigned_byte) farray) farray.
  forall result:(int,(int,unsigned_byte) farray) farray.
  forall x1:(int,(int,unsigned_byte) farray) farray. (((result = x) and
  (x1 = temp___520(temp___525(1, 2, 3, 0), temp___532(10, 12)))) ->
  (to_rep(((x1[3])[4])) = 10)))
