(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : extended_index_type, extended_index_type -> bool

logic dummy1 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type position_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : position_type, position_type -> bool

logic dummy2 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type direction

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : direction, direction -> bool

logic dummy3 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq6 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : count_type, count_type -> bool

logic dummy5 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq4(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range5(length(container))))

logic ole__function_guard : bool, us_rep, us_rep -> prop

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((user_eq4(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((user_eq4(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep

logic dummy7 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

logic is_concat : us_rep, us_rep, us_rep -> bool

logic is_concat__function_guard : bool, us_rep, us_rep, us_rep -> prop

axiom is_concat__post_axiom : true

axiom is_concat__def_axiom :
  (forall q:us_rep. forall v:us_rep. forall p:us_rep [is_concat(q, v, p)].
  ((is_concat(q, v, p) = true) <->
  (((((length(p) - length(v)) = length(q)) and
  (forall i:int. (((1 <= i) and (i <= length(q))) -> (get(p, i) = get(q,
  i))))) and
  (forall i:int. (((1 <= i) and (i <= length(v))) -> (get(p,
  (i + length(q))) = get(v, i))))) and
  (forall i:int. ((((length(q) + 1) <= i) and (i <= length(p))) -> (get(v,
  (i - length(q))) = get(p, i)))))))

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq8((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq8((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq9(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq8((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic oeq : (int,us_rep1) farray, (int,us_rep1) farray -> bool

logic oeq__function_guard1 : bool, (int,us_rep1) farray,
  (int,us_rep1) farray -> prop

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall m1:(int,us_rep1) farray. forall m2:(int,us_rep1) farray [oeq(m1,
  m2)]. (((oeq(m1, m2) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((((bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((m1[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((m2[i])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
  (not (bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = false))) and
  (((((m1[i])).us_split_fields1).rec__tree_model__path_type__k = true) <->
  ((((m2[i])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and
   (n <= (0 + length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((m1[i])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((m2[i])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (((((m1[i])).us_split_fields1).rec__tree_model__path_type__k = true) <->
   ((((m2[i])).us_split_fields1).rec__tree_model__path_type__k = true))))) ->
  (oeq(m1, m2) = true))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : extended_index_type

logic dummy9 : extended_index_type

logic dummy10 : extended_index_type

logic dummy11 : position_type

type cell__ref = { cell__content : us_rep2
}

function cell__ref___projection(a: cell__ref) : us_rep2 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq11 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq10((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq10((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq10((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))))))

logic dummy12 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep2) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep2) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep3, us_rep3 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq12(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__size4({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy13 : extended_index_type

logic dummy14 : (int,us_rep2) farray

type forest__ref = { forest__content : us_rep3
}

function forest__ref___projection(a: forest__ref) : us_rep3 =
  (a).forest__content

logic size : us_rep3 -> int

logic size__function_guard : int, us_rep3 -> prop

logic tree_structure : us_rep3 -> bool

logic tree_structure__function_guard : bool, us_rep3 -> prop

logic model__ : us_rep3, int -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep3, int -> prop

logic valid_root : us_rep3, int -> bool

logic valid_root__function_guard : bool, us_rep3, int -> prop

logic parent : us_rep3, int -> int

logic parent__function_guard : int, us_rep3, int -> prop

logic position : us_rep3, int -> int

logic position__function_guard : int, us_rep3, int -> prop

axiom model____post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int [model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. (((in_range1(root) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) -> (is_add((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) -> (length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic root : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r256b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type tcount_typeB

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : tcount_typeB, tcount_typeB -> bool

logic dummy15 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

logic to_rep2 : tcount_typeB -> int

logic of_rep2 : int -> tcount_typeB

axiom inversion_axiom2 :
  (forall x:tcount_typeB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tcount_typeB [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : tcount_typeB, tcount_typeB -> bool

logic dummy16 : tcount_typeB

type t257b__ref = { t257b__content : tcount_typeB
}

function t257b__ref___projection(a: t257b__ref) : tcount_typeB =
  (a).t257b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom size__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range2(size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom size__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. (size({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = to_rep(f)))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((in_range1(i) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) -> ((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) <  i) -> (not (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true))))))

axiom valid_root__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) <-> ((i <= to_rep(f)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 2)))))

axiom parent__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. ((in_range1(i) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true)) -> ((((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) and in_range2(parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i))))))

axiom parent__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. (in_range1(i) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  i) = to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)))))

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((in_range1(i) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) and (not (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range4(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom position__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (in_range1(i) -> (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position)))))

axiom tree_structure__post_axiom : true

axiom tree_structure__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray
  [tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) <->
  (((((((((forall i:int. ((((to_rep(f) + 1) <= i) and (i <= 100)) ->
          (bool_eq10((f1[i]), { us_split_fields3 = {
          rec__binary_trees__cell__left = of_rep(0);
          rec__binary_trees__cell__right = of_rep(0);
          rec__binary_trees__cell__parent = of_rep(0);
          rec__binary_trees__cell__position = of_rep1(2) } }) = true))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) <= to_rep(f)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left) <= to_rep(f)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right)) and
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right) <= to_rep(f)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 2) ->
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left) = 0)) ->
  ((to_rep1((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left)])).us_split_fields3).rec__binary_trees__cell__position) = 0) and
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left)])).us_split_fields3).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right) = 0)) ->
  ((to_rep1((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right)])).us_split_fields3).rec__binary_trees__cell__position) = 1) and
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right)])).us_split_fields3).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 0)) ->
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields3).rec__binary_trees__cell__left) = i))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 1)) ->
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields3).rec__binary_trees__cell__right) = i)))))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type extended_index

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy17 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type element_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : element_type, element_type -> bool

logic dummy18 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position1:int [get(container, position1)].
  ((in_range7(position1) and ((1 <= position1) and
  (position1 <= (0 + length(container))))) -> in_range8(get(container,
  position1)))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall f__split_fields:extended_index_type.
  forall f__split_fields1:(int,us_rep2) farray.
  forall f_old__split_fields:extended_index_type.
  forall f_old__split_fields1:(int,us_rep2) farray. forall n:int.
  forall temp___1510:(int,us_rep1) farray. forall o:us_rep1.
  forall o1:us_split_fields. forall temp___1509:(int,us_rep1) farray.
  forall o2:us_rep1. forall o3:us_split_fields. forall o4:us_rep.
  forall o5:int. forall temp___1508:(int,us_rep1) farray. forall o6:us_rep1.
  forall o7:us_split_fields. forall temp___1511:(int,us_rep1) farray.
  forall o8:int. forall o9:us_rep1. forall o10:us_split_fields.
  forall o11:us_rep. forall temp___1514:(int,us_rep1) farray. forall o12:int.
  forall o13:us_rep1. forall o14:us_split_fields. forall o15:us_rep.
  forall temp___1517:(int,us_rep1) farray. forall o16:us_rep1.
  forall o17:us_split_fields. forall o18:us_rep.
  forall temp___1518:(int,us_rep1) farray. forall o19:us_rep1.
  forall o20:us_split_fields. forall o21:us_rep. forall o22:int.
  forall o23:int. forall o24:int. forall temp___1522:(int,us_rep1) farray.
  forall o25:us_rep1. forall o26:us_split_fields.
  forall temp___1521:(int,us_rep1) farray. forall o27:us_rep1.
  forall o28:us_split_fields. forall o29:us_rep. forall o30:int.
  forall temp___1520:(int,us_rep1) farray. forall o31:us_rep1.
  forall o32:us_split_fields. forall o33:bool.
  forall temp___1531:(int,us_rep1) farray. forall o34:int.
  forall o35:us_rep1. forall o36:us_split_fields. forall o37:us_rep.
  forall o38:int. forall result:int__ref. forall n1:int. forall n2:int.
  forall ki:int. forall result1:int__ref. forall ki1:int.
  forall result2:bool. forall result3:bool. forall result4:bool.
  forall result5:bool. forall result6:bool. forall result7:bool.
  (in_range1(root) -> (in_range2(v) -> (((tree_structure({ us_split_fields5 =
  { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 }
  }) = true)) ->
  (((to_rep(f__split_fields) = to_rep(f_old__split_fields)) and
  ((root <= to_rep(f__split_fields)) and
  ((to_rep1((((f_old__split_fields1[root])).us_split_fields3).rec__binary_trees__cell__position) = 2) and
  ((to_rep1((((f__split_fields1[root])).us_split_fields3).rec__binary_trees__cell__position) = 2) and
  ((not (v = root)) and (((1 <= v) and (v <= to_rep(f__split_fields))) and
  ((to_rep1((((f_old__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__position) = 2) and
  ((not (to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  },
  root)[to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = v)) ->
   (to_rep((((f__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__parent) = to_rep((((f_old__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__parent))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = v)) ->
   (to_rep1((((f__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__position) = to_rep1((((f_old__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__position))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> ((not ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   (to_rep((((f__split_fields1[j])).us_split_fields3).rec__binary_trees__cell__left) = to_rep((((f_old__split_fields1[j])).us_split_fields3).rec__binary_trees__cell__left))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((not ((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (to_rep((((f__split_fields1[j])).us_split_fields3).rec__binary_trees__cell__right) = to_rep((((f_old__split_fields1[j])).us_split_fields3).rec__binary_trees__cell__right))))))))))))))))) ->
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n3:int. (((1 <= n3) and (n3 <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a,
   n3) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a, n3))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) and
   (not (to_rep((((f__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0))) ->
   ((i = v) or ((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[to_rep((((f__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n3:int. (((1 <= n3) and (n3 <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a,
   n3) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[to_rep((((f__split_fields1[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__a,
   n3))))))))) ->
  (((result = { int__content = n }) and (n1 = 1)) -> (((1 <= n1) and
  (n1 <= 100)) ->
  (((forall i:int. (((1 <= i) and (i <= 100)) -> ((((0 <  length((((model__({
    us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a)) and
    ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
    (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__a) <= (n2 - 1))) ->
    ((((bool_le(length((((model__({ us_split_fields5 = {
    rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a),
    length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
    (forall n3:int. (((1 <= n3) and (n3 <= (0 + length((((model__({
    us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
    (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a,
    n3) = get((((model__({ us_split_fields5 = {
    rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__a, n3))))) and
    ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1
    } }, v)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
    ((not (((bool_le(length((((model__({ us_split_fields5 = {
    rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a),
    length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
    (forall n3:int. (((1 <= n3) and (n3 <= (0 + length((((model__({
    us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
    (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a,
    n3) = get((((model__({ us_split_fields5 = {
    rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__a, n3))))) and
    (not (bool_le(length((((model__({ us_split_fields5 = {
    rec__binary_trees__forest__s = f__split_fields;
    rec__binary_trees__forest__c = f__split_fields1 } },
    root)[v])).us_split_fields1).rec__tree_model__path_type__a),
    length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) and
    ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
    f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1
    } },
    root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) <= (n2 - 1))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   v)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   },
   v)[i])).us_split_fields1).rec__tree_model__path_type__a) <= (n2 - 1))) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) <= (n2 - 1))) ->
   (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n3:int. (((1 <= n3) and (n3 <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a,
   n3) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, root)[i])).us_split_fields1).rec__tree_model__path_type__a, n3))))))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a) <= (n2 - 1))) ->
  (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, v)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (is_concat((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[v])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  v)[i])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true))))))))) ->
  ((((1 <= 100) -> in_range1(n2)) and ((1 <= n2) and (n2 <= 100))) ->
  (((result1 = { int__content = ki }) and (ki1 = 1)) -> (((1 <= ki1) and
  (ki1 <= 100)) -> (((((((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true) and
  ((temp___1508 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1508[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1508[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1508[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1508[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1508[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1508[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1508[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1508[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1508[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1508[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1508[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o6 = (temp___1508[ki1]))) and
  (o7 = (o6).us_split_fields1)) and
  (result4 = (o7).rec__tree_model__path_type__k)) and (((result4 = true) and
  (((((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 }
  }) = true) and ((temp___1509 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1509[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1509[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1509[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1509[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1509[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1509[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1509[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1509[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1509[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1509[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1509[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o2 = (temp___1509[ki1]))) and
  (o3 = (o2).us_split_fields1)) and
  (o4 = (o3).rec__tree_model__path_type__a)) and ((o5 = length(o4)) and
  (in_range5(o5) and ((0 + o5) <= 2147483647)))) and (((o5 = n2) and
  (result3 = true)) or ((not (o5 = n2)) and (result3 = false))))) or
  ((not (result4 = true)) and (result3 = false)))) and (((result3 = true) and
  (((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }) = true) and ((temp___1510 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1510[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1510[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1510[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1510[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1510[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1510[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i),
   (((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1510[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1510[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1510[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1510[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1510[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o = (temp___1510[ki1]))) and
  (o1 = (o).us_split_fields1)) and
  (result2 = (o1).rec__tree_model__path_type__k))) or
  ((not (result3 = true)) and (result2 = false)))) and ((result2 = true) ->
  (((o22 = to_rep1((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__position)) and
  in_range4(to_rep1((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__position))) and
  ((((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }) = true) and ((temp___1518 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1518[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1518[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1518[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1518[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1518[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1518[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i),
   (((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1518[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1518[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1518[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1518[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1518[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o19 = (temp___1518[ki1]))) and
  (o20 = (o19).us_split_fields1)) and
  (o21 = (o20).rec__tree_model__path_type__a)) and ((((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true) and
  ((temp___1517 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1517[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1517[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1517[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1517[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1517[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1517[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1517[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1517[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1517[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1517[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1517[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o16 = (temp___1517[ki1]))) and
  (o17 = (o16).us_split_fields1)) and
  (o18 = (o17).rec__tree_model__path_type__a)) and ((((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  ((temp___1514 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1514[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1514[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1514[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1514[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1514[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1514[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i),
   (((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1514[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1514[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1514[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1514[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1514[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and
  ((((1 <= to_rep((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__parent) <= 100)) and
  (o12 = to_rep((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__parent))) and
  (o13 = (temp___1514[o12])))) and (o14 = (o13).us_split_fields1)) and
  (o15 = (o14).rec__tree_model__path_type__a)) and ((((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true) and
  ((temp___1511 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1511[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1511[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1511[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1511[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1511[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1511[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1511[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1511[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1511[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1511[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1511[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and
  ((((1 <= to_rep((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__parent) <= 100)) and
  (o8 = to_rep((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__parent))) and
  (o9 = (temp___1511[o8])))) and (o10 = (o9).us_split_fields1)) and
  (o11 = (o10).rec__tree_model__path_type__a)) and ((bool_eq1(length(o18),
  length(o21)) = true) and
  (forall n3:int. (((1 <= n3) and (n3 <= (0 + length(o18)))) -> (get(o18,
  n3) = get(o21, n3)))))))))))) -> (((((((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true) and
  ((temp___1520 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1520[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1520[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1520[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1520[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1520[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1520[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1520[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1520[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1520[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1520[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1520[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o31 = (temp___1520[ki1]))) and
  (o32 = (o31).us_split_fields1)) and
  (result7 = (o32).rec__tree_model__path_type__k)) and (((result7 = true) and
  (((((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 }
  }) = true) and ((temp___1521 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1521[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1521[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1521[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1521[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1521[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1521[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1521[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1521[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1521[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1521[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1521[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and (o27 = (temp___1521[ki1]))) and
  (o28 = (o27).us_split_fields1)) and
  (o29 = (o28).rec__tree_model__path_type__a)) and ((o30 = length(o29)) and
  (in_range5(o30) and ((0 + o30) <= 2147483647)))) and (((o30 = n2) and
  (result6 = true)) or ((not (o30 = n2)) and (result6 = false))))) or
  ((not (result7 = true)) and (result6 = false)))) and (((result6 = true) and
  (((((((o23 = v) and in_range1(v)) and (tree_structure({ us_split_fields5 =
  { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true)) and
  (((o24 = v) and in_range1(v)) and ((temp___1522 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, o24)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1522[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1522[o24])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1522[o24])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = o24)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1522[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i) = 0)) and ((((temp___1522[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = o24))) and (is_add((((temp___1522[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i),
   (((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = o24)))) and
   (length((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1522[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1522[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1522[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1522[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1522[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i))))))))))))))) and (o25 = (temp___1522[ki1]))) and
  (o26 = (o25).us_split_fields1)) and
  (o33 = (o26).rec__tree_model__path_type__k))) or
  ((not (result6 = true)) and (o33 = false)))) and ((((o33 = true) and
  (not (ki1 = v))) and (result5 = true)) or ((not ((o33 = true) and
  (not (ki1 = v)))) and (result5 = false)))) -> ((result5 = true) ->
  (((o38 = to_rep1((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__position)) and
  in_range4(to_rep1((((f__split_fields1[ki1])).us_split_fields3).rec__binary_trees__cell__position))) ->
  ((((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 }
  }) = true) and ((temp___1531 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___252:int. (((1 <= temp___252) and (temp___252 <= 100)) ->
   (length((((temp___1531[temp___252])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1531[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1531[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1531[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__k = true)) or
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i) = 0)) and ((((temp___1531[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) and
   (not ((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) and (is_add((((temp___1531[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i),
   (((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) or
   ((not (((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) and
   (length((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  ((((((temp___1531[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (((bool_eq1(length((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1531[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n3:int. (((1 <= n3) and
  (n3 <= (0 + length((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__a,
  n3) = get((((temp___1531[j])).us_split_fields1).rec__tree_model__path_type__a,
  n3))))) and
  (not (bool_eq1(length((((temp___1531[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1531[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
  (j = i)))))))))))))) and ((((1 <= v) and (v <= 100)) and (o34 = v)) and
  (o35 = (temp___1531[o34])))) and (o36 = (o35).us_split_fields1)) and
  (o37 = (o36).rec__tree_model__path_type__a)) -> (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 }
  }) = true))))))))))))))))))
