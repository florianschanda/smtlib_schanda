(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type group2_id

predicate in_range1(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : group2_id, group2_id -> bool

logic dummy : group2_id

type group2_id__ref = { group2_id__content : group2_id
}

function group2_id__ref___projection(a: group2_id__ref) : group2_id =
  (a).group2_id__content

logic to_rep : group2_id -> int

logic of_rep : int -> group2_id

axiom inversion_axiom :
  (forall x:group2_id [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:group2_id [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type ranking

predicate in_range2(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ranking, ranking -> bool

logic dummy1 : ranking

type ranking__ref = { ranking__content : ranking
}

function ranking__ref___projection(a: ranking__ref) : ranking =
  (a).ranking__content

logic to_rep1 : ranking -> int

logic of_rep1 : int -> ranking

axiom inversion_axiom1 :
  (forall x:ranking [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:ranking [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,group2_id) farray
}

logic slide : (int,group2_id) farray, int, int -> (int,group2_id) farray

axiom slide_eq :
  (forall a:(int,group2_id) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,group2_id) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,group2_id) farray, int, int, (int,group2_id) farray, int,
  int -> (int,group2_id) farray

axiom concat_def :
  (forall a:(int,group2_id) farray. forall b:(int,group2_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : group2_id, int -> (int,group2_id) farray

axiom singleton_def :
  (forall v:group2_id.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,group2_id) farray, int, int, (int,group2_id) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,group2_id) farray. forall a__first:int. forall a__last:int.
  forall b:(int,group2_id) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,group2_id) farray. forall b:(int,group2_id) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,group2_id) farray, int, int, (int,group2_id) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,group2_id) farray. forall b:(int,group2_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,group2_id) farray. forall b:(int,group2_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,group2_id) farray. forall b:(int,group2_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic is_permutation_2 : (int,group2_id) farray -> bool

logic is_permutation_2__function_guard : bool, (int,group2_id) farray -> prop

axiom is_permutation_2__post_axiom :
  (forall r2:(int,group2_id) farray [is_permutation_2(r2)].
  ((is_permutation_2(r2) = true) <->
  (forall g2:int. (((1 <= g2) and (g2 <= 64)) ->
  (exists rank:int. (((1 <= rank) and (rank <= 64)) and
  (to_rep((r2[rank])) = g2)))))))

type map__ref1 = { map__content1 : (int,ranking) farray
}

logic slide1 : (int,ranking) farray, int, int -> (int,ranking) farray

axiom slide_eq1 :
  (forall a:(int,ranking) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,ranking) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> (int,ranking) farray

axiom concat_def1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : ranking, int -> (int,ranking) farray

axiom singleton_def1 :
  (forall v:ranking.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq5 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,ranking) farray. forall a__first:int. forall a__last:int.
  forall b:(int,ranking) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_136:int. ((((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) and
  (to_rep1((a[temp___idx_136])) = to_rep1((b[((b__first - a__first) + temp___idx_136)])))) or
  (not ((a__first <= temp___idx_136) and (temp___idx_136 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) ->
  (to_rep1((a[temp___idx_136])) = to_rep1((b[((b__first - a__first) + temp___idx_136)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) ->
  (to_rep1((a[temp___idx_136])) = to_rep1((b[((b__first - a__first) + temp___idx_136)])))))))))

logic compare1 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic r2 : (int,group2_id) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic stable_marriage__invert_2__result__aggregate_def : int -> (int,ranking) farray

axiom def_axiom :
  (forall temp___451:int.
  (forall temp___452:int.
  ((stable_marriage__invert_2__result__aggregate_def(temp___451)[temp___452]) = of_rep1(temp___451))))

logic result__ : (int,ranking) farray

logic rank : int

logic stable_marriage__invert_2__result : (int,ranking) farray

logic temp___455 : int

logic temp___453 : (int,ranking) farray

logic prev : int

logic g2 : int

logic prev1 : int

logic o : ranking

logic o1 : (int,ranking) farray

logic result : (int,ranking) farray

logic result__1 : (int,ranking) farray

logic result1 : int

logic rank1 : int

logic result__2 : (int,ranking) farray

logic rank2 : int

logic result2 : (int,ranking) farray

logic result__3 : (int,ranking) farray

logic result3 : int

logic rank3 : int

logic result__4 : (int,ranking) farray

logic rank4 : int

logic result__5 : (int,ranking) farray

logic rank5 : int

logic result__6 : (int,ranking) farray

logic rank6 : int

logic result__7 : (int,ranking) farray

logic rank7 : int

logic result4 : (int,ranking) farray

logic stable_marriage__invert_2__result1 : (int,ranking) farray

logic stable_marriage__invert_2__result2 : (int,ranking) farray

logic stable_marriage__invert_2__result3 : (int,ranking) farray

logic result__8 : (int,ranking) farray

logic rank8 : int

logic stable_marriage__invert_2__result4 : (int,ranking) farray

logic result__9 : (int,ranking) farray

logic rank9 : int

logic stable_marriage__invert_2__result5 : (int,ranking) farray

axiom H : (is_permutation_2(r2) = true)

axiom H1 : (result = result__)

axiom H2 : (result__1 = stable_marriage__invert_2__result__aggregate_def(64))

axiom H3 :
  (forall rank11:int. (((1 <= rank11) and (rank11 <= 64)) ->
  (forall rank21:int. (((1 <= rank21) and (rank21 <= 64)) ->
  ((not (rank11 = rank21)) ->
  (not (to_rep((r2[rank11])) = to_rep((r2[rank21])))))))))

axiom H4 : (result1 = rank)

axiom H5 : (rank1 = 1)

axiom H6 : (1 <= rank1)

axiom H7 : (rank1 <= 64)

axiom H8 :
  (forall prev2:int. (((1 <= prev2) and (prev2 <= (rank2 - 1))) ->
  (to_rep1((result__2[to_rep((r2[prev2]))])) = prev2)))

axiom H9 :
  (forall g21:int. (((1 <= g21) and (g21 <= 64)) ->
  ((exists prev2:int. (((1 <= prev2) and (prev2 <= (rank2 - 1))) and
   (to_rep((r2[prev2])) = g21))) ->
  (to_rep((r2[to_rep1((result__2[g21]))])) = g21))))

axiom H10 : (((1 <= 64) -> in_range2(rank2)) and ((1 <= rank2) and
  (rank2 <= 64)))

axiom H11 : (1 <= g2)

axiom H12 : (g2 <= 64)

axiom H13 : (1 <= (rank2 - 1))

 (* File "stable_marriage.ads", line 45, characters 0-0 *)
goal WP_parameter_def : (1 <= 1)
