(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq1 : us_t, us_t -> bool

logic dummy1 : (int,integer) farray

logic dummy2 : t

type a__ref = { a__content : us_t
}

function a__ref___projection(a: a__ref) : us_t = (a).a__content

logic p : (int,integer) farray

logic p1 : t

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy3 : integer

type tTnextSP1__ref = { tTnextSP1__content : integer
}

function tTnextSP1__ref___projection(a: tTnextSP1__ref) : integer =
  (a).tTnextSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq6(x: us_t1, y: us_t1) : bool = bool_eq3((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq3 : us_t1, us_t1 -> bool

logic dummy4 : (int,integer) farray

logic dummy5 : t1

type tnextS__ref = { tnextS__content : us_t1
}

function tnextS__ref___projection(a: tnextS__ref) : us_t1 =
  (a).tnextS__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy6 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref___projection(a: t2b__ref) : integer = (a).t2b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq8(x: us_t2, y: us_t2) : bool = bool_eq3((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq5 : us_t2, us_t2 -> bool

logic dummy7 : (int,integer) farray

logic dummy8 : t2

type t3b__ref = { t3b__content : us_t2
}

function t3b__ref___projection(a: t3b__ref) : us_t2 = (a).t3b__content

logic next__first : integer

logic next__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy9 : integer

type t10b__ref = { t10b__content : integer
}

function t10b__ref___projection(a: t10b__ref) : integer = (a).t10b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first6(mk3(f, l))) = f) and (to_rep(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,integer) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,integer) farray = (a).elts3

function of_array3(a: (int,integer) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep(first6((a).rt3))

function last7(a: us_t3) : int = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t3, y: us_t3) : bool = bool_eq3((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq7 : us_t3, us_t3 -> bool

logic dummy10 : (int,integer) farray

logic dummy11 : t3

type t11b__ref = { t11b__content : us_t3
}

function t11b__ref___projection(a: t11b__ref) : us_t3 = (a).t11b__content

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy12 : integer

type t13b__ref = { t13b__content : integer
}

function t13b__ref___projection(a: t13b__ref) : integer = (a).t13b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first8(mk4(f, l))) = f) and (to_rep(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,integer) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,integer) farray = (a).elts4

function of_array4(a: (int,integer) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep(first8((a).rt4))

function last9(a: us_t4) : int = to_rep(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,integer) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,integer) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,integer) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__alignment4(a)))

function bool_eq12(x: us_t4, y: us_t4) : bool = bool_eq3((x).elts4,
  to_rep(first8((x).rt4)), to_rep(last8((x).rt4)), (y).elts4,
  to_rep(first8((y).rt4)), to_rep(last8((y).rt4)))

logic user_eq9 : us_t4, us_t4 -> bool

logic dummy13 : (int,integer) farray

logic dummy14 : t4

type t14b__ref = { t14b__content : us_t4
}

function t14b__ref___projection(a: t14b__ref) : us_t4 = (a).t14b__content

logic kmp__init_next__next__aggregate_def : int, int, int -> us_t2

axiom def_axiom :
  (forall temp___159:int. forall temp___160:int. forall temp___161:int.
  ((dynamic_property((- 2147483648), 2147483647, temp___160, temp___161) ->
  ((to_rep(first4((kmp__init_next__next__aggregate_def(temp___159,
  temp___160, temp___161)).rt2)) = temp___160) and
  (to_rep(last4((kmp__init_next__next__aggregate_def(temp___159, temp___160,
  temp___161)).rt2)) = temp___161))) and
  (forall temp___162:int. (((kmp__init_next__next__aggregate_def(temp___159,
  temp___160, temp___161)).elts2[temp___162]) = of_rep(temp___159)))))

logic next : (int,integer) farray

logic i : int

logic j : int

logic r8b : int

logic r9b : int

logic r12b : int

logic kmp__init_next__result : (int,integer) farray

logic kmp__init_next__result1 : t

logic temp___164 : (int,integer) farray

logic temp___1641 : t2

logic kmp__init_next__next__assume : (int,integer) farray

logic kmp__init_next__next__assume1 : t1

logic o : int

logic o1 : int

logic o2 : bool

logic temp___170 : int

logic temp___169 : int

logic temp___167 : (int,integer) farray

logic o3 : int

logic o4 : int

logic o5 : (int,integer) farray

logic temp___173 : (int,integer) farray

logic temp___1731 : t4

logic o6 : int

logic o7 : integer

logic o8 : int

logic o9 : integer

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : integer

logic o15 : int

logic o16 : (int,integer) farray

logic o17 : int

logic o18 : integer

logic o19 : int

logic o20 : (int,integer) farray

logic o21 : int

logic o22 : integer

logic o23 : int

logic o24 : int

logic o25 : bool

logic o26 : bool

logic o27 : int

logic o28 : int

logic j1 : int

logic r8b1 : int

logic r9b1 : int

logic r12b1 : int

logic result : (int,integer) farray

logic next1 : (int,integer) farray

logic result1 : int

logic i1 : int

logic result2 : int

logic j2 : int

logic result3 : bool

logic result4 : int

logic r8b2 : int

logic result5 : int

logic r9b2 : int

logic result6 : int

logic r12b2 : int

logic next2 : (int,integer) farray

logic i2 : int

logic j3 : int

logic r8b3 : int

logic r9b3 : int

logic r12b3 : int

logic result7 : bool

logic result8 : int

logic i3 : int

logic result9 : int

logic j4 : int

logic result10 : (int,integer) farray

logic next3 : (int,integer) farray

logic result11 : int

logic i4 : int

logic result12 : (int,integer) farray

logic next4 : (int,integer) farray

logic result13 : int

logic j5 : int

logic result14 : bool

logic result15 : int

logic r8b4 : int

logic result16 : int

logic r9b4 : int

logic result17 : int

logic r12b4 : int

logic next5 : (int,integer) farray

logic i5 : int

logic j6 : int

logic r8b5 : int

logic r9b5 : int

logic r12b5 : int

logic next6 : (int,integer) farray

logic i6 : int

logic j7 : int

logic r8b6 : int

logic r9b6 : int

logic r12b6 : int

logic next7 : (int,integer) farray

logic i7 : int

logic j8 : int

logic r8b7 : int

logic r9b7 : int

logic r12b7 : int

logic next8 : (int,integer) farray

logic i8 : int

logic j9 : int

logic r8b8 : int

logic r9b8 : int

logic r12b8 : int

logic next9 : (int,integer) farray

logic i9 : int

logic j10 : int

logic r8b9 : int

logic r9b9 : int

logic r12b9 : int

logic next10 : (int,integer) farray

logic i10 : int

logic j11 : int

logic r8b10 : int

logic r9b10 : int

logic r12b10 : int

logic result18 : (int,integer) farray

logic result19 : t

logic kmp__init_next__result2 : (int,integer) farray

logic kmp__init_next__result3 : t

logic kmp__init_next__result4 : (int,integer) farray

logic kmp__init_next__result5 : t

logic kmp__init_next__result6 : (int,integer) farray

logic kmp__init_next__result7 : t

logic next11 : (int,integer) farray

logic i11 : int

logic j12 : int

logic r8b11 : int

logic r9b11 : int

logic r12b11 : int

logic kmp__init_next__result8 : (int,integer) farray

logic kmp__init_next__result9 : t

logic next12 : (int,integer) farray

logic i12 : int

logic j13 : int

logic r8b12 : int

logic r9b12 : int

logic r12b12 : int

logic kmp__init_next__result10 : (int,integer) farray

logic kmp__init_next__result11 : t

axiom H : dynamic_property((- 2147483648), 2147483647, to_rep(first(p1)),
  to_rep(last(p1)))

axiom H1 : (1 <= length({ elts = p; rt = p1 }))

axiom H2 : (to_rep(first4((kmp__init_next__next__aggregate_def(0,
  to_rep(first(p1)), to_rep(last(p1)))).rt2)) = to_rep(first(p1)))

axiom H3 : (to_rep(last4((kmp__init_next__next__aggregate_def(0,
  to_rep(first(p1)), to_rep(last(p1)))).rt2)) = to_rep(last(p1)))

axiom H4 : ({ elts2 = temp___164; rt2 = temp___1641
  } = kmp__init_next__next__aggregate_def(0, to_rep(first(p1)),
  to_rep(last(p1))))

axiom H5 : (((to_rep(first4(temp___1641)) <= to_rep(last4(temp___1641))) ->
  (((to_rep(first(p1)) <= to_rep(last(p1))) ->
  (((to_rep(last4(temp___1641)) - to_rep(first4(temp___1641))) + 1) = ((to_rep(last(p1)) - to_rep(first(p1))) + 1))) and
  ((not (to_rep(first(p1)) <= to_rep(last(p1)))) ->
  (((to_rep(last4(temp___1641)) - to_rep(first4(temp___1641))) + 1) = 0)))) and
  ((not (to_rep(first4(temp___1641)) <= to_rep(last4(temp___1641)))) ->
  ((to_rep(first(p1)) <= to_rep(last(p1))) ->
  (0 = ((to_rep(last(p1)) - to_rep(first(p1))) + 1)))))

axiom H6 : (slide(temp___164, to_rep(first4(temp___1641)),
  to_rep(first(p1))) = kmp__init_next__next__assume)

axiom H7 : (mk1(to_rep(first(p1)),
  to_rep(last(p1))) = kmp__init_next__next__assume1)

axiom H8 : (result = next)

axiom H9 : (next1 = kmp__init_next__next__assume)

axiom H10 :
  (to_rep(next__first) = to_rep(first2(kmp__init_next__next__assume1)))

axiom H11 :
  (to_rep(next__last) = to_rep(last2(kmp__init_next__next__assume1)))

axiom H12 : (dynamic_property2(to_rep(first(p1)), to_rep(last(p1)),
  to_rep(next__first), to_rep(next__last)) and
  ((to_rep(next__first) = to_rep(first(p1))) and
  (to_rep(next__last) = to_rep(last(p1)))))

axiom H13 : (result1 = i)

axiom H14 : (i1 = to_rep(first(p1)))

axiom H15 : in_range1(i1)

axiom H16 : (((- 2147483648) <= 2147483647) -> in_range1(j))

axiom H17 : (1 <  length({ elts = p; rt = p1 }))

axiom H18 : ((o = (to_rep(first(p1)) + 1)) and
  in_range1((to_rep(first(p1)) + 1)))

axiom H19 : (result2 = j)

axiom H20 : (j2 = o)

 (* File "kmp.ads", line 5, characters 0-0 *)
goal WP_parameter_def : in_range1((to_rep(last(p1)) - 1))
