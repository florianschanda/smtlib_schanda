(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy1 (Array Int natural))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__declare_iterable__container__content (Array Int natural))))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int natural) (rec__declare_iterable__container__content a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__declare_iterable__container__content (us_split_fields1 a)) 1 100 (rec__declare_iterable__container__content (us_split_fields1 b)) 1 100) true) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const declare_iterable__container__content__first__bit Int)
(declare-const declare_iterable__container__content__last__bit Int)
(declare-const declare_iterable__container__content__position Int)
(assert (<= 0 declare_iterable__container__content__first__bit))
(assert (< declare_iterable__container__content__first__bit declare_iterable__container__content__last__bit))
(assert (<= 0 declare_iterable__container__content__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((container__ref (mk_container__ref (container__content us_rep)))))
(define-fun container__ref___projection ((a container__ref)) us_rep (container__content a))
(declare-fun has_element (us_rep Int) Bool)
(declare-fun has_element__function_guard (Bool us_rep Int) Bool)
(declare-sort cursor 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (cursor cursor) Bool)
(declare-const dummy3 cursor)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content cursor)))))
(define-fun cursor__ref___projection ((a cursor__ref)) cursor (cursor__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 100)) (in_range2 temp___expr_159)))
(declare-sort valid_cursor 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (valid_cursor valid_cursor) Bool)
(declare-const dummy4 valid_cursor)
(declare-datatypes () ((valid_cursor__ref (mk_valid_cursor__ref (valid_cursor__content valid_cursor)))))
(define-fun valid_cursor__ref___projection ((a valid_cursor__ref)) valid_cursor (valid_cursor__content a))
(assert true)
(assert (forall ((x us_rep)) (forall ((c Int)) (! (= (= (has_element x c) true) (in_range3 c)) :pattern ((has_element x c))))))
(declare-fun next (us_rep Int) Int)
(declare-fun next__function_guard (Int us_rep Int) Bool)
(assert (forall ((x us_rep)) (forall ((c Int)) (! (=> (and (dynamic_invariant c true true true true) (= (has_element x c) true)) (dynamic_invariant (next x c) true false true true)) :pattern ((next x c))))))
(assert (forall ((x us_rep)) (forall ((c Int)) (! (=> (dynamic_invariant c true true true true) (= (next x c) (ite (= c 100) 0 (+ c 1)))) :pattern ((next x c))))))
(declare-fun first (us_rep) Int)
(declare-fun first__function_guard (Int us_rep) Bool)
(assert (forall ((x us_rep)) (! (dynamic_invariant (first x) true false true true) :pattern ((first x)))))
(assert (forall ((x us_rep)) (! (= (first x) 1) :pattern ((first x)))))
(declare-fun element (us_rep Int) Int)
(declare-fun element__function_guard (Int us_rep Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(assert (forall ((x us_rep)) (forall ((c Int)) (! (=> (and (dynamic_invariant c true true true true) (= (has_element x c) true)) (dynamic_invariant1 (element x c) true false true true)) :pattern ((element x c))))))
(assert (forall ((x us_rep)) (forall ((c Int)) (! (=> (dynamic_invariant c true true true true) (= (element x c) (to_rep (let ((temp___199 (rec__declare_iterable__container__content (us_split_fields1 x)))) (select temp___199 c))))) :pattern ((element x c))))))
(declare-fun from_nat_array ((Array Int natural)) us_rep)
(declare-fun from_nat_array__function_guard (us_rep (Array Int natural)) Bool)
(assert true)
(assert (forall ((a (Array Int natural))) (! (= (from_nat_array a) (mk___rep (mk___split_fields a))) :pattern ((from_nat_array a)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun for_loop_iterable__p3__a__aggregate_def (Int) (Array Int natural))
(assert (forall ((temp___281 Int)) (=> (dynamic_invariant1 temp___281 true true true true) (forall ((temp___282 Int)) (= (to_rep (select (for_loop_iterable__p3__a__aggregate_def temp___281) temp___282)) temp___281)))))
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range3 temp___expr_166)))
(declare-const a (Array Int natural))
(declare-const g__split_fields (Array Int natural))
(declare-const e Int)
(declare-const for_loop_iterable__p3__g__assume (Array Int natural))
(declare-const o Int)
(declare-const temp___286 Int)
(declare-const o1 Int)
(declare-const e1 Int)
(declare-const result (Array Int natural))
(declare-const a1 (Array Int natural))
(declare-const result1 (Array Int natural))
(declare-const g__split_fields1 (Array Int natural))
(declare-const result2 Bool)
(declare-const result3 Int)
(declare-const e2 Int)
(declare-const result4 Bool)
(declare-const g__split_fields2 (Array Int natural))
(declare-const e3 Int)
(declare-const temp___2861 Int)
(define-fun g__split_fields3 () us_split_fields (mk___split_fields g__split_fields2))
(define-fun g__split_fields4 () us_split_fields (mk___split_fields g__split_fields1))
(assert (= result a))
(assert (= a1 (for_loop_iterable__p3__a__aggregate_def 0)))
(assert (and (= (mk___rep (mk___split_fields for_loop_iterable__p3__g__assume)) (from_nat_array a1)) (= a1 for_loop_iterable__p3__g__assume)))
(assert (= result1 g__split_fields))
(assert (= for_loop_iterable__p3__g__assume g__split_fields1))
(assert (and (= o (first (mk___rep g__split_fields4))) (and (in_range2 o) (= o 1))))
(assert (= o temp___286))
(assert (and (= result2 (has_element (mk___rep g__split_fields4) temp___286)) (= (= result2 true) (in_range3 temp___286))))
(assert (=> (= result2 true) (and (= o1 (element (mk___rep g__split_fields4) temp___286)) (and (in_range1 o1) (= o1 (to_rep (select g__split_fields1 temp___286)))))))
(assert (=> (= result2 true) (= result3 e)))
(assert (=> (= result2 true) (= e2 o1)))
(assert (=> (not (= result2 true)) (= e2 e)))
(assert (=> (not (= result2 true)) (= e2 e1)))
(assert (and (= result4 (has_element (mk___rep g__split_fields4) temp___286)) (= (= result4 true) (in_range3 temp___286))))
(assert (= result4 true))
(assert (and (= (has_element (mk___rep g__split_fields3) temp___2861) true) (= e3 (element (mk___rep g__split_fields3) temp___2861))))
(assert (not (= e3 0)))
(check-sat)
(exit)
