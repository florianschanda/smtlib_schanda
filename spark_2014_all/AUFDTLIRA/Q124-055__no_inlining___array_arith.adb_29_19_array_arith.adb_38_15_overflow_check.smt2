(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-const x (Array Int natural))
(declare-const one Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 natural)
(declare-const o3 (Array Int natural))
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 natural)
(declare-const o7 (Array Int natural))
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 natural)
(declare-const o11 (Array Int natural))
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 natural)
(declare-const o15 (Array Int natural))
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 natural)
(declare-const o19 (Array Int natural))
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 natural)
(declare-const o23 (Array Int natural))
(declare-const result Int)
(declare-const one1 Int)
(declare-const result1 (Array Int natural))
(declare-const x1 (Array Int natural))
(declare-const result2 (Array Int natural))
(declare-const x2 (Array Int natural))
(declare-const result3 (Array Int natural))
(declare-const x3 (Array Int natural))
(declare-const result4 (Array Int natural))
(declare-const x4 (Array Int natural))
(declare-const result5 (Array Int natural))
(declare-const x5 (Array Int natural))
(declare-const result6 (Array Int natural))
(declare-const x6 (Array Int natural))
(assert (= (mk_int__ref result) (mk_int__ref one)))
(assert (= one1 1))
(assert (in_range1 one1))
(assert (and (= o (+ 1 one1)) (in_range1 (+ 1 one1))))
(assert (and (= o1 o) (in_range2 o)))
(assert (= (to_rep o2) o1))
(assert (= o3 (store x 1 o2)))
(assert (= (mk_map__ref result1) (mk_map__ref x)))
(assert (= x1 o3))
(assert (and (= o4 (+ 2 one1)) (in_range1 (+ 2 one1))))
(assert (and (= o5 o4) (in_range2 o4)))
(assert (= (to_rep o6) o5))
(assert (= o7 (store x1 2 o6)))
(assert (= x1 result2))
(assert (= x2 o7))
(assert (and (= o8 (+ 3 one1)) (in_range1 (+ 3 one1))))
(assert (and (= o9 o8) (in_range2 o8)))
(assert (= (to_rep o10) o9))
(assert (= o11 (store x2 3 o10)))
(assert (= x2 result3))
(assert (= x3 o11))
(assert (and (= o12 (+ 4 one1)) (in_range1 (+ 4 one1))))
(assert (and (= o13 o12) (in_range2 o12)))
(assert (= (to_rep o14) o13))
(assert (= o15 (store x3 4 o14)))
(assert (= x3 result4))
(assert (= x4 o15))
(assert (and (= o16 (+ 5 one1)) (in_range1 (+ 5 one1))))
(assert (and (= o17 o16) (in_range2 o16)))
(assert (= (to_rep o18) o17))
(assert (= o19 (store x4 5 o18)))
(assert (= x4 result5))
(assert (= x5 o19))
(assert (and (= o20 (+ 6 one1)) (in_range1 (+ 6 one1))))
(assert (and (= o21 o20) (in_range2 o20)))
(assert (= (to_rep o22) o21))
(assert (= o23 (store x5 6 o22)))
(assert (= x5 result6))
(assert (= x6 o23))
(assert (not (in_range1 (+ 7 one1))))
(check-sat)
(exit)
