(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-sort tvalue_arrayC 0)
(declare-fun tvalue_arrayCqtint (tvalue_arrayC) Int)
(assert (forall ((i tvalue_arrayC)) (and (<= 0 (tvalue_arrayCqtint i)) (<= (tvalue_arrayCqtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tvalue_arrayC tvalue_arrayC) Bool)
(declare-const dummy1 tvalue_arrayC)
(declare-datatypes () ((tvalue_arrayC__ref (mk_tvalue_arrayC__ref (tvalue_arrayC__content tvalue_arrayC)))))
(define-fun tvalue_arrayC__ref___projection ((a tvalue_arrayC__ref)) tvalue_arrayC (tvalue_arrayC__content a))
(define-fun to_rep ((x tvalue_arrayC)) Int (tvalue_arrayCqtint x))
(declare-fun of_rep (Int) tvalue_arrayC)
(assert (forall ((x tvalue_arrayC)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x tvalue_arrayC)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int tvalue_arrayC))))))
(declare-fun slide ((Array Int tvalue_arrayC) Int Int) (Array Int tvalue_arrayC))
(assert (forall ((a (Array Int tvalue_arrayC))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int tvalue_arrayC))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int tvalue_arrayC)) (a__first Int) (a__last Int) (b (Array Int tvalue_arrayC)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int tvalue_arrayC)) (b (Array Int tvalue_arrayC))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const values (Array Int tvalue_arrayC))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t1s 0)
(declare-fun t1sqtint (t1s) Int)
(assert (forall ((i t1s)) (and (<= 0 (t1sqtint i)) (<= (t1sqtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (t1s t1s) Bool)
(declare-const dummy2 t1s)
(declare-datatypes () ((t1s__ref (mk_t1s__ref (t1s__content t1s)))))
(define-fun t1s__ref___projection ((a t1s__ref)) t1s (t1s__content a))
(declare-sort t2s 0)
(declare-fun t2sqtint (t2s) Int)
(assert (forall ((i t2s)) (and (<= 1 (t2sqtint i)) (<= (t2sqtint i) 10))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (t2s t2s) Bool)
(declare-const dummy3 t2s)
(declare-datatypes () ((t2s__ref (mk_t2s__ref (t2s__content t2s)))))
(define-fun t2s__ref___projection ((a t2s__ref)) t2s (t2s__content a))
(define-fun to_rep1 ((x t1s)) Int (t1sqtint x))
(declare-fun of_rep1 (Int) t1s)
(assert (forall ((x t1s)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x t1s)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_rep2 ((x t2s)) Int (t2sqtint x))
(declare-fun of_rep2 (Int) t2s)
(assert (forall ((x t2s)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x t2s)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pred__pair_type__left t1s) (rec__pred__pair_type__right t2s)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) t1s (rec__pred__pair_type__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields)) t2s (rec__pred__pair_type__right a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__pred__pair_type__left (us_split_fields1 a))) (to_rep1 (rec__pred__pair_type__left (us_split_fields1 b)))) (= (to_rep2 (rec__pred__pair_type__right (us_split_fields1 a))) (to_rep2 (rec__pred__pair_type__right (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const pred__pair_type__left__first__bit Int)
(declare-const pred__pair_type__left__last__bit Int)
(declare-const pred__pair_type__left__position Int)
(assert (<= 0 pred__pair_type__left__first__bit))
(assert (< pred__pair_type__left__first__bit pred__pair_type__left__last__bit))
(assert (<= 0 pred__pair_type__left__position))
(declare-const pred__pair_type__right__first__bit Int)
(declare-const pred__pair_type__right__last__bit Int)
(declare-const pred__pair_type__right__position Int)
(assert (<= 0 pred__pair_type__right__first__bit))
(assert (< pred__pair_type__right__first__bit pred__pair_type__right__last__bit))
(assert (<= 0 pred__pair_type__right__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((pair_type__ref (mk_pair_type__ref (pair_type__content us_rep)))))
(define-fun pair_type__ref___projection ((a pair_type__ref)) us_rep (pair_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_169 us_rep) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool) (temp___do_typ_inv_168 Bool)) Bool (=> (= temp___do_toplevel_167 true) (=> (= temp___is_init_165 true) (<= (to_rep1 (rec__pred__pair_type__left (us_split_fields1 temp___expr_169))) (to_rep (select values (to_rep2 (rec__pred__pair_type__right (us_split_fields1 temp___expr_169)))))))))
(define-fun dynamic_predicate ((temp___175 us_rep)) Bool (<= (to_rep1 (rec__pred__pair_type__left (us_split_fields1 temp___175))) (to_rep (select values (to_rep2 (rec__pred__pair_type__right (us_split_fields1 temp___175)))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const rliteral t1s)
(assert (= (t1sqtint rliteral) 0))
(declare-const rliteral1 t2s)
(assert (= (t2sqtint rliteral1) 1))
(declare-const values1 (Array Int tvalue_arrayC))
(assert (= values1 values))
(assert (not (<= (to_rep1 rliteral) (to_rep (select values (to_rep2 rliteral1))))))
(check-sat)
(exit)
