(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type it4

predicate in_range1(x: int) = ((90 <= x) and (x <= 99))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : it4, it4 -> bool

logic dummy : it4

type it4__ref = { it4__content : it4
}

function it4__ref___projection(a: it4__ref) : it4 = (a).it4__content

logic to_rep : it4 -> int

logic of_rep : int -> it4

axiom inversion_axiom : (forall x:it4 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:it4 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep1 : et1 -> int

logic of_rep1 : int -> et1

axiom inversion_axiom1 :
  (forall x:et1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:et1 [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type et2

predicate in_range3(x: int) = ((1 <= x) and (x <= 25))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : et2, et2 -> bool

logic dummy2 : et2

type et2__ref = { et2__content : et2
}

function et2__ref___projection(a: et2__ref) : et2 = (a).et2__content

logic to_rep2 : et2 -> int

logic of_rep2 : int -> et2

axiom inversion_axiom2 :
  (forall x:et2 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:et2 [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type et3

predicate in_range4(x: int) = ((10 <= x) and (x <= 90))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : et3, et3 -> bool

logic dummy3 : et3

type et3__ref = { et3__content : et3
}

function et3__ref___projection(a: et3__ref) : et3 = (a).et3__content

logic to_rep3 : et3 -> int

logic of_rep3 : int -> et3

axiom inversion_axiom3 :
  (forall x:et3 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:et3 [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type enum1ta

predicate in_range5(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : enum1ta, enum1ta -> bool

logic dummy4 : enum1ta

type enum1ta__ref = { enum1ta__content : enum1ta
}

function enum1ta__ref___projection(a: enum1ta__ref) : enum1ta =
  (a).enum1ta__content

logic to_rep4 : enum1ta -> int

logic of_rep4 : int -> enum1ta

axiom inversion_axiom4 :
  (forall x:enum1ta [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:enum1ta [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__ar__rec1t__f1 : et1; rec__ar__rec1t__g1 : et2
}

function us_split_fields_F1__projection(a: us_split_fields) : et1 =
  (a).rec__ar__rec1t__f1

function us_split_fields_G1__projection(a: us_split_fields) : et2 =
  (a).rec__ar__rec1t__g1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__ar__rec1t__f1) = to_rep1(((b).us_split_fields1).rec__ar__rec1t__f1)) and
  (to_rep2(((a).us_split_fields1).rec__ar__rec1t__g1) = to_rep2(((b).us_split_fields1).rec__ar__rec1t__g1))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__ar__rec1t__f1) = to_rep1(((b).us_split_fields1).rec__ar__rec1t__f1)) and
  (to_rep2(((a).us_split_fields1).rec__ar__rec1t__g1) = to_rep2(((b).us_split_fields1).rec__ar__rec1t__g1)))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:et1. forall a1:et2. (0 <= object__size({ us_split_fields1 = {
  rec__ar__rec1t__f1 = a; rec__ar__rec1t__g1 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:et1. forall a1:et2. (0 <= object__alignment({ us_split_fields1 =
  { rec__ar__rec1t__f1 = a; rec__ar__rec1t__g1 = a1 } })))

logic ar__rec1t__f1__first__bit : int

logic ar__rec1t__f1__last__bit : int

logic ar__rec1t__f1__position : int

axiom ar__rec1t__f1__first__bit_axiom : (0 <= ar__rec1t__f1__first__bit)

axiom ar__rec1t__f1__last__bit_axiom :
  (ar__rec1t__f1__first__bit <  ar__rec1t__f1__last__bit)

axiom ar__rec1t__f1__position_axiom : (0 <= ar__rec1t__f1__position)

logic ar__rec1t__g1__first__bit : int

logic ar__rec1t__g1__last__bit : int

logic ar__rec1t__g1__position : int

axiom ar__rec1t__g1__first__bit_axiom : (0 <= ar__rec1t__g1__first__bit)

axiom ar__rec1t__g1__last__bit_axiom :
  (ar__rec1t__g1__first__bit <  ar__rec1t__g1__last__bit)

axiom ar__rec1t__g1__position_axiom : (0 <= ar__rec1t__g1__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : et1

logic dummy6 : et2

type rec1t__ref = { rec1t__content : us_rep
}

function rec1t__ref___projection(a: rec1t__ref) : us_rep = (a).rec1t__content

type us_split_fields2 = { rec__ar__rec2t__f2 : et3; rec__ar__rec2t__g2 :
us_rep; rec__ar__rec2t__h2 : enum1ta
}

function us_split_fields_F2__projection(a: us_split_fields2) : et3 =
  (a).rec__ar__rec2t__f2

function us_split_fields_G2__projection(a: us_split_fields2) : us_rep =
  (a).rec__ar__rec2t__g2

function us_split_fields_H2__projection(a: us_split_fields2) : enum1ta =
  (a).rec__ar__rec2t__h2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  (((((to_rep3(((a).us_split_fields3).rec__ar__rec2t__f2) = to_rep3(((b).us_split_fields3).rec__ar__rec2t__f2)) and
  (bool_eq7(((a).us_split_fields3).rec__ar__rec2t__g2,
  ((b).us_split_fields3).rec__ar__rec2t__g2) = true)) and
  (to_rep4(((a).us_split_fields3).rec__ar__rec2t__h2) = to_rep4(((b).us_split_fields3).rec__ar__rec2t__h2))) ->
  (bool_eq8(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_fields3).rec__ar__rec2t__f2) = to_rep3(((b).us_split_fields3).rec__ar__rec2t__f2)) and
  (bool_eq7(((a).us_split_fields3).rec__ar__rec2t__g2,
  ((b).us_split_fields3).rec__ar__rec2t__g2) = true)) and
  (to_rep4(((a).us_split_fields3).rec__ar__rec2t__h2) = to_rep4(((b).us_split_fields3).rec__ar__rec2t__h2)))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  (0 <= object__size1({ us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = a1;
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  (0 <= object__alignment1({ us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = a1;
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } })))

logic ar__rec2t__f2__first__bit : int

logic ar__rec2t__f2__last__bit : int

logic ar__rec2t__f2__position : int

axiom ar__rec2t__f2__first__bit_axiom : (0 <= ar__rec2t__f2__first__bit)

axiom ar__rec2t__f2__last__bit_axiom :
  (ar__rec2t__f2__first__bit <  ar__rec2t__f2__last__bit)

axiom ar__rec2t__f2__position_axiom : (0 <= ar__rec2t__f2__position)

logic ar__rec2t__g2__first__bit : int

logic ar__rec2t__g2__last__bit : int

logic ar__rec2t__g2__position : int

axiom ar__rec2t__g2__first__bit_axiom : (0 <= ar__rec2t__g2__first__bit)

axiom ar__rec2t__g2__last__bit_axiom :
  (ar__rec2t__g2__first__bit <  ar__rec2t__g2__last__bit)

axiom ar__rec2t__g2__position_axiom : (0 <= ar__rec2t__g2__position)

logic ar__rec2t__h2__first__bit : int

logic ar__rec2t__h2__last__bit : int

logic ar__rec2t__h2__position : int

axiom ar__rec2t__h2__first__bit_axiom : (0 <= ar__rec2t__h2__first__bit)

axiom ar__rec2t__h2__last__bit_axiom :
  (ar__rec2t__h2__first__bit <  ar__rec2t__h2__last__bit)

axiom ar__rec2t__h2__position_axiom : (0 <= ar__rec2t__h2__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy7 : et3

logic dummy8 : et1

logic dummy9 : et2

logic dummy10 : enum1ta

type rec2t__ref = { rec2t__content : us_rep1
}

function rec2t__ref___projection(a: rec2t__ref) : us_rep1 =
  (a).rec2t__content

type us_split_fields4 = { rec__ar__rec5t__f5 : us_rep1; rec__ar__rec5t__g5 :
bool; rec__ar__rec5t__h5 : us_rep
}

function us_split_fields_F5__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__ar__rec5t__f5

function us_split_fields_G5__projection(a: us_split_fields4) : bool =
  (a).rec__ar__rec5t__g5

function us_split_fields_H5__projection(a: us_split_fields4) : us_rep =
  (a).rec__ar__rec5t__h5

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq9 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq9(a, b)].
  (((((bool_eq8(((a).us_split_fields5).rec__ar__rec5t__f5,
  ((b).us_split_fields5).rec__ar__rec5t__f5) = true) and
  (((a).us_split_fields5).rec__ar__rec5t__g5 = ((b).us_split_fields5).rec__ar__rec5t__g5)) and
  (bool_eq7(((a).us_split_fields5).rec__ar__rec5t__h5,
  ((b).us_split_fields5).rec__ar__rec5t__h5) = true)) -> (bool_eq9(a,
  b) = true)) and
  ((not (((bool_eq8(((a).us_split_fields5).rec__ar__rec5t__f5,
  ((b).us_split_fields5).rec__ar__rec5t__f5) = true) and
  (((a).us_split_fields5).rec__ar__rec5t__g5 = ((b).us_split_fields5).rec__ar__rec5t__g5)) and
  (bool_eq7(((a).us_split_fields5).rec__ar__rec5t__h5,
  ((b).us_split_fields5).rec__ar__rec5t__h5) = true))) -> (bool_eq9(a,
  b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  forall a4:bool. forall a5:et1. forall a6:et2. (0 <= object__size2({
  us_split_fields5 = { rec__ar__rec5t__f5 = { us_split_fields3 = {
  rec__ar__rec2t__f2 = a; rec__ar__rec2t__g2 = { us_split_fields1 = {
  rec__ar__rec1t__f1 = a1; rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 =
  a3 } }; rec__ar__rec5t__g5 = a4; rec__ar__rec5t__h5 = { us_split_fields1 =
  { rec__ar__rec1t__f1 = a5; rec__ar__rec1t__g1 = a6 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  forall a4:bool. forall a5:et1. forall a6:et2. (0 <= object__alignment2({
  us_split_fields5 = { rec__ar__rec5t__f5 = { us_split_fields3 = {
  rec__ar__rec2t__f2 = a; rec__ar__rec2t__g2 = { us_split_fields1 = {
  rec__ar__rec1t__f1 = a1; rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 =
  a3 } }; rec__ar__rec5t__g5 = a4; rec__ar__rec5t__h5 = { us_split_fields1 =
  { rec__ar__rec1t__f1 = a5; rec__ar__rec1t__g1 = a6 } } } })))

logic ar__rec5t__f5__first__bit : int

logic ar__rec5t__f5__last__bit : int

logic ar__rec5t__f5__position : int

axiom ar__rec5t__f5__first__bit_axiom : (0 <= ar__rec5t__f5__first__bit)

axiom ar__rec5t__f5__last__bit_axiom :
  (ar__rec5t__f5__first__bit <  ar__rec5t__f5__last__bit)

axiom ar__rec5t__f5__position_axiom : (0 <= ar__rec5t__f5__position)

logic ar__rec5t__g5__first__bit : int

logic ar__rec5t__g5__last__bit : int

logic ar__rec5t__g5__position : int

axiom ar__rec5t__g5__first__bit_axiom : (0 <= ar__rec5t__g5__first__bit)

axiom ar__rec5t__g5__last__bit_axiom :
  (ar__rec5t__g5__first__bit <  ar__rec5t__g5__last__bit)

axiom ar__rec5t__g5__position_axiom : (0 <= ar__rec5t__g5__position)

logic ar__rec5t__h5__first__bit : int

logic ar__rec5t__h5__last__bit : int

logic ar__rec5t__h5__position : int

axiom ar__rec5t__h5__first__bit_axiom : (0 <= ar__rec5t__h5__first__bit)

axiom ar__rec5t__h5__last__bit_axiom :
  (ar__rec5t__h5__first__bit <  ar__rec5t__h5__last__bit)

axiom ar__rec5t__h5__position_axiom : (0 <= ar__rec5t__h5__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy11 : et3

logic dummy12 : et1

logic dummy13 : et2

logic dummy14 : enum1ta

logic dummy15 : bool

logic dummy16 : et1

logic dummy17 : et2

type rec5t__ref = { rec5t__content : us_rep2
}

function rec5t__ref___projection(a: rec5t__ref) : us_rep2 =
  (a).rec5t__content

type map__ref = { map__content : (int,us_rep2) farray
}

logic slide : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def :
  (forall v:et3. forall v1:et1. forall v2:et2. forall v3:enum1ta.
  forall v4:bool. forall v5:et1. forall v6:et2.
  (forall i:int [(singleton({ us_split_fields5 = { rec__ar__rec5t__f5 = {
  us_split_fields3 = { rec__ar__rec2t__f2 = v; rec__ar__rec2t__g2 = {
  us_split_fields1 = { rec__ar__rec1t__f1 = v1; rec__ar__rec1t__g1 = v2 } };
  rec__ar__rec2t__h2 = v3 } }; rec__ar__rec5t__g5 = v4; rec__ar__rec5t__h5 =
  { us_split_fields1 = { rec__ar__rec1t__f1 = v5; rec__ar__rec1t__g1 = v6 } }
  } }, i)[i])]. ((singleton({ us_split_fields5 = { rec__ar__rec5t__f5 = {
  us_split_fields3 = { rec__ar__rec2t__f2 = v; rec__ar__rec2t__g2 = {
  us_split_fields1 = { rec__ar__rec1t__f1 = v1; rec__ar__rec1t__g1 = v2 } };
  rec__ar__rec2t__h2 = v3 } }; rec__ar__rec5t__g5 = v4; rec__ar__rec5t__h5 =
  { us_split_fields1 = { rec__ar__rec1t__f1 = v5; rec__ar__rec1t__g1 = v6 } }
  } }, i)[i]) = { us_split_fields5 = { rec__ar__rec5t__f5 = {
  us_split_fields3 = { rec__ar__rec2t__f2 = v; rec__ar__rec2t__g2 = {
  us_split_fields1 = { rec__ar__rec1t__f1 = v1; rec__ar__rec1t__g1 = v2 } };
  rec__ar__rec2t__h2 = v3 } }; rec__ar__rec5t__g5 = v4; rec__ar__rec5t__h5 =
  { us_split_fields1 = { rec__ar__rec1t__f1 = v5; rec__ar__rec1t__g1 = v6 } }
  } })))

logic bool_eq10 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq10(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_139:int. ((((a__first <= temp___idx_139) and
  (temp___idx_139 <= a__last)) and (bool_eq9((a[temp___idx_139]),
  (b[((b__first - a__first) + temp___idx_139)])) = true)) or
  (not ((a__first <= temp___idx_139) and (temp___idx_139 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_139:int. (((a__first <= temp___idx_139) and
  (temp___idx_139 <= a__last)) -> (bool_eq9((a[temp___idx_139]),
  (b[((b__first - a__first) + temp___idx_139)])) = true))))) -> (bool_eq10(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_139:int. (((a__first <= temp___idx_139) and
  (temp___idx_139 <= a__last)) -> (bool_eq9((a[temp___idx_139]),
  (b[((b__first - a__first) + temp___idx_139)])) = true)))))))

logic dummy18 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields6 = { rec__ar__rofaofr2__a2 : it4; rec__ar__rofaofr2__b2
: (int,us_rep2) farray
}

function us_split_fields_A2__projection(a: us_split_fields6) : it4 =
  (a).rec__ar__rofaofr2__a2

function us_split_fields_B2__projection(a: us_split_fields6) : (int,us_rep2) farray =
  (a).rec__ar__rofaofr2__b2

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___11__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq11 : us_rep3, us_rep3 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq11(a, b)].
  ((((to_rep(((a).us_split_fields7).rec__ar__rofaofr2__a2) = to_rep(((b).us_split_fields7).rec__ar__rofaofr2__a2)) and
  (bool_eq10(((a).us_split_fields7).rec__ar__rofaofr2__b2, 90, 99,
  ((b).us_split_fields7).rec__ar__rofaofr2__b2, 90, 99) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields7).rec__ar__rofaofr2__a2) = to_rep(((b).us_split_fields7).rec__ar__rofaofr2__a2)) and
  (bool_eq10(((a).us_split_fields7).rec__ar__rofaofr2__b2, 90, 99,
  ((b).us_split_fields7).rec__ar__rofaofr2__b2, 90, 99) = true))) ->
  (bool_eq11(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:it4. forall a1:(int,us_rep2) farray. (0 <= object__size4({
  us_split_fields7 = { rec__ar__rofaofr2__a2 = a; rec__ar__rofaofr2__b2 = a1
  } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:it4. forall a1:(int,us_rep2) farray. (0 <= object__alignment4({
  us_split_fields7 = { rec__ar__rofaofr2__a2 = a; rec__ar__rofaofr2__b2 = a1
  } })))

logic ar__rofaofr2__a2__first__bit : int

logic ar__rofaofr2__a2__last__bit : int

logic ar__rofaofr2__a2__position : int

axiom ar__rofaofr2__a2__first__bit_axiom :
  (0 <= ar__rofaofr2__a2__first__bit)

axiom ar__rofaofr2__a2__last__bit_axiom :
  (ar__rofaofr2__a2__first__bit <  ar__rofaofr2__a2__last__bit)

axiom ar__rofaofr2__a2__position_axiom : (0 <= ar__rofaofr2__a2__position)

logic ar__rofaofr2__b2__first__bit : int

logic ar__rofaofr2__b2__last__bit : int

logic ar__rofaofr2__b2__position : int

axiom ar__rofaofr2__b2__first__bit_axiom :
  (0 <= ar__rofaofr2__b2__first__bit)

axiom ar__rofaofr2__b2__last__bit_axiom :
  (ar__rofaofr2__b2__first__bit <  ar__rofaofr2__b2__last__bit)

axiom ar__rofaofr2__b2__position_axiom : (0 <= ar__rofaofr2__b2__position)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy19 : it4

logic dummy20 : (int,us_rep2) farray

type rofaofr2__ref = { rofaofr2__content : us_rep3
}

function rofaofr2__ref___projection(a: rofaofr2__ref) : us_rep3 =
  (a).rofaofr2__content

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r__split_fields : it4

logic r__split_fields1 : (int,us_rep2) farray

logic o : et1

logic o1 : et1

logic o2 : et2

logic o3 : et1

logic o4 : et2

logic o5 : et3

logic o6 : et1

logic o7 : et2

logic o8 : enum1ta

logic o9 : et3

logic o10 : et1

logic o11 : et2

logic o12 : enum1ta

logic o13 : et3

logic o14 : et1

logic o15 : et2

logic o16 : enum1ta

logic o17 : bool

logic o18 : et1

logic o19 : et2

logic o20 : et3

logic o21 : et1

logic o22 : et2

logic o23 : enum1ta

logic o24 : bool

logic o25 : et1

logic o26 : et2

logic o27 : (int,us_rep2) farray

logic o28 : it4

logic o29 : (int,us_rep2) farray

logic temp___9478 : it4

logic temp___94781 : (int,us_rep2) farray

logic result : it4

logic result1 : (int,us_rep2) farray

logic r__split_fields2 : it4

logic r__split_fields3 : (int,us_rep2) farray

logic r__split_fields4 : it4

logic r__split_fields5 : (int,us_rep2) farray

logic r__split_fields6 : it4

logic r__split_fields7 : (int,us_rep2) farray

axiom H : in_range1(i)

axiom H1 : in_range2(e)

axiom H2 : (to_rep1(o) = e)

axiom H3 : (o = o1)

axiom H4 :
  ((((((((r__split_fields1[i])).us_split_fields5).rec__ar__rec5t__f5).us_split_fields3).rec__ar__rec2t__g2).us_split_fields1).rec__ar__rec1t__g1 = o2)

axiom H5 : (o3 = o1)

axiom H6 : (o4 = o2)

axiom H7 :
  ((((((r__split_fields1[i])).us_split_fields5).rec__ar__rec5t__f5).us_split_fields3).rec__ar__rec2t__f2 = o5)

axiom H8 : (o6 = o3)

axiom H9 : (o7 = o4)

axiom H10 :
  ((((((r__split_fields1[i])).us_split_fields5).rec__ar__rec5t__f5).us_split_fields3).rec__ar__rec2t__h2 = o8)

axiom H11 : (o9 = o5)

axiom H12 : (o10 = o6)

axiom H13 : (o11 = o7)

axiom H14 : (o12 = o8)

axiom H15 : (o13 = o9)

axiom H16 : (o14 = o10)

axiom H17 : (o15 = o11)

axiom H18 : (o16 = o12)

axiom H19 :
  ((((r__split_fields1[i])).us_split_fields5).rec__ar__rec5t__g5 = o17)

axiom H20 :
  ((((r__split_fields1[i])).us_split_fields5).rec__ar__rec5t__h5 = {
  us_split_fields1 = { rec__ar__rec1t__f1 = o18; rec__ar__rec1t__g1 = o19 }
  })

axiom H21 : (o20 = o13)

axiom H22 : (o21 = o14)

axiom H23 : (o22 = o15)

axiom H24 : (o23 = o16)

axiom H25 : (o24 = o17)

axiom H26 : (o25 = o18)

axiom H27 : (o26 = o19)

axiom H28 : (o27 = (r__split_fields1[i <- { us_split_fields5 = {
  rec__ar__rec5t__f5 = { us_split_fields3 = { rec__ar__rec2t__f2 = o20;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = o21;
  rec__ar__rec1t__g1 = o22 } }; rec__ar__rec2t__h2 = o23 } };
  rec__ar__rec5t__g5 = o24; rec__ar__rec5t__h5 = { us_split_fields1 = {
  rec__ar__rec1t__f1 = o25; rec__ar__rec1t__g1 = o26 } } } }]))

axiom H29 : ((o28 = r__split_fields) and (o29 = o27))

axiom H30 : ((temp___9478 = o28) and (temp___94781 = o29))

axiom H31 : ((result = r__split_fields) and (result1 = r__split_fields1))

axiom H32 : ((r__split_fields2 = temp___9478) and
  (r__split_fields3 = temp___94781))

axiom H33 : ((r__split_fields4 = r__split_fields2) and
  (r__split_fields5 = r__split_fields3))

axiom H34 : ((r__split_fields6 = r__split_fields2) and
  (r__split_fields7 = r__split_fields3))

logic n : int

axiom H35 : (90 <= n)

axiom H36 : (n <= 99)

axiom H37 : (not (n = i))

 (* File "ar.ads", line 112, characters 0-0 *)
goal WP_parameter_def : (bool_eq9((r__split_fields5[n]),
  (r__split_fields1[n])) = true)
