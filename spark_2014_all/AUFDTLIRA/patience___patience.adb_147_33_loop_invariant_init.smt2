(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort card 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 52)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (card card) Bool)
(declare-const dummy1 card)
(declare-datatypes () ((card__ref (mk_card__ref (card__content card)))))
(define-fun card__ref___projection ((a card__ref)) card (card__content a))
(declare-fun to_rep (card) Int)
(declare-fun of_rep (Int) card)
(assert (forall ((x card)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x card)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int card))))))
(declare-fun slide ((Array Int card) Int Int) (Array Int card))
(assert (forall ((a (Array Int card))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int card))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int card)) (a__first Int) (a__last Int) (b (Array Int card)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int card)) (b (Array Int card))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int card)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int card) (elts a))
(define-fun of_array ((a (Array Int card)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int card)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int card)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int card)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int card))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int card))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int card))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((cardstack__ref (mk_cardstack__ref (cardstack__content us_t)))))
(define-fun cardstack__ref___projection ((a cardstack__ref)) us_t (cardstack__content a))
(define-fun dynamic_invariant ((temp___expr_196 us_t) (temp___is_init_192 Bool) (temp___skip_constant_193 Bool) (temp___do_toplevel_194 Bool) (temp___do_typ_inv_195 Bool)) Bool (=> (not (= temp___skip_constant_193 true)) (dynamic_property 1 2147483647 (first1 temp___expr_196) (last1 temp___expr_196))))
(declare-sort cardindex 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (cardindex cardindex) Bool)
(declare-const dummy4 cardindex)
(declare-datatypes () ((cardindex__ref (mk_cardindex__ref (cardindex__content cardindex)))))
(define-fun cardindex__ref___projection ((a cardindex__ref)) cardindex (cardindex__content a))
(declare-fun to_rep2 (cardindex) Int)
(declare-fun of_rep2 (Int) cardindex)
(assert (forall ((x cardindex)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x cardindex)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-const dummy5 (Array Int card))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int card)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int card)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int card)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int card))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int card))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int card))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int card) (Array Int card)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int cardindex))))))
(declare-fun slide1 ((Array Int cardindex) Int Int) (Array Int cardindex))
(assert (forall ((a (Array Int cardindex))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int cardindex))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int cardindex)) (a__first Int) (a__last Int) (b (Array Int cardindex)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep2 (select a temp___idx_155)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep2 (select a temp___idx_155)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const dummy6 (Array Int cardindex))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int cardindex)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int cardindex)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int cardindex)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 ((Array Int cardindex) (Array Int cardindex)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int cardindex)))))))
(declare-fun slide2 ((Array Int (Array Int cardindex)) Int Int) (Array Int (Array Int cardindex)))
(assert (forall ((a (Array Int (Array Int cardindex)))) (forall ((first2 Int)) (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2))))))
(assert (forall ((a (Array Int (Array Int cardindex)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int cardindex))) (a__first Int) (a__last Int) (b (Array Int (Array Int cardindex))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq2 (select a temp___idx_156) 0 99 (select b (+ (- b__first a__first) temp___idx_156)) 0 99) true)))) true false))
(assert (forall ((a (Array Int (Array Int cardindex))) (b (Array Int (Array Int cardindex)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq2 (select a temp___idx_156) 0 99 (select b (+ (- b__first a__first) temp___idx_156)) 0 99) true))))))))
(declare-const dummy7 (Array Int (Array Int cardindex)))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int (Array Int cardindex))) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int (Array Int cardindex))) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int (Array Int cardindex))) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq7 ((Array Int (Array Int cardindex)) (Array Int (Array Int cardindex))) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__patience__state__numelts cardindex) (rec__patience__state__values (Array Int card)) (rec__patience__state__numstacks cardindex) (rec__patience__state__stacksizes (Array Int cardindex)) (rec__patience__state__stacks (Array Int (Array Int cardindex))) (rec__patience__state__posstack (Array Int cardindex)) (rec__patience__state__posheight (Array Int cardindex)) (rec__patience__state__preds (Array Int cardindex))))))
(define-fun us_split_fields_NumElts__projection ((a us_split_fields)) cardindex (rec__patience__state__numelts a))
(define-fun us_split_fields_Values__projection ((a us_split_fields)) (Array Int card) (rec__patience__state__values a))
(define-fun us_split_fields_NumStacks__projection ((a us_split_fields)) cardindex (rec__patience__state__numstacks a))
(define-fun us_split_fields_StackSizes__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__stacksizes a))
(define-fun us_split_fields_Stacks__projection ((a us_split_fields)) (Array Int (Array Int cardindex)) (rec__patience__state__stacks a))
(define-fun us_split_fields_PosStack__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__posstack a))
(define-fun us_split_fields_PosHeight__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__posheight a))
(define-fun us_split_fields_Preds__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__preds a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq4 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep2 (rec__patience__state__numelts (us_split_fields1 a))) (to_rep2 (rec__patience__state__numelts (us_split_fields1 b)))) (= (bool_eq (rec__patience__state__values (us_split_fields1 a)) 0 99 (rec__patience__state__values (us_split_fields1 b)) 0 99) true)) (= (to_rep2 (rec__patience__state__numstacks (us_split_fields1 a))) (to_rep2 (rec__patience__state__numstacks (us_split_fields1 b))))) (= (bool_eq2 (rec__patience__state__stacksizes (us_split_fields1 a)) 0 99 (rec__patience__state__stacksizes (us_split_fields1 b)) 0 99) true)) (= (bool_eq3 (rec__patience__state__stacks (us_split_fields1 a)) 0 99 (rec__patience__state__stacks (us_split_fields1 b)) 0 99) true)) (= (bool_eq2 (rec__patience__state__posstack (us_split_fields1 a)) 0 99 (rec__patience__state__posstack (us_split_fields1 b)) 0 99) true)) (= (bool_eq2 (rec__patience__state__posheight (us_split_fields1 a)) 0 99 (rec__patience__state__posheight (us_split_fields1 b)) 0 99) true)) (= (bool_eq2 (rec__patience__state__preds (us_split_fields1 a)) 0 99 (rec__patience__state__preds (us_split_fields1 b)) 0 99) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const patience__state__numelts__first__bit Int)
(declare-const patience__state__numelts__last__bit Int)
(declare-const patience__state__numelts__position Int)
(assert (<= 0 patience__state__numelts__first__bit))
(assert (< patience__state__numelts__first__bit patience__state__numelts__last__bit))
(assert (<= 0 patience__state__numelts__position))
(declare-const patience__state__values__first__bit Int)
(declare-const patience__state__values__last__bit Int)
(declare-const patience__state__values__position Int)
(assert (<= 0 patience__state__values__first__bit))
(assert (< patience__state__values__first__bit patience__state__values__last__bit))
(assert (<= 0 patience__state__values__position))
(declare-const patience__state__numstacks__first__bit Int)
(declare-const patience__state__numstacks__last__bit Int)
(declare-const patience__state__numstacks__position Int)
(assert (<= 0 patience__state__numstacks__first__bit))
(assert (< patience__state__numstacks__first__bit patience__state__numstacks__last__bit))
(assert (<= 0 patience__state__numstacks__position))
(declare-const patience__state__stacksizes__first__bit Int)
(declare-const patience__state__stacksizes__last__bit Int)
(declare-const patience__state__stacksizes__position Int)
(assert (<= 0 patience__state__stacksizes__first__bit))
(assert (< patience__state__stacksizes__first__bit patience__state__stacksizes__last__bit))
(assert (<= 0 patience__state__stacksizes__position))
(declare-const patience__state__stacks__first__bit Int)
(declare-const patience__state__stacks__last__bit Int)
(declare-const patience__state__stacks__position Int)
(assert (<= 0 patience__state__stacks__first__bit))
(assert (< patience__state__stacks__first__bit patience__state__stacks__last__bit))
(assert (<= 0 patience__state__stacks__position))
(declare-const patience__state__posstack__first__bit Int)
(declare-const patience__state__posstack__last__bit Int)
(declare-const patience__state__posstack__position Int)
(assert (<= 0 patience__state__posstack__first__bit))
(assert (< patience__state__posstack__first__bit patience__state__posstack__last__bit))
(assert (<= 0 patience__state__posstack__position))
(declare-const patience__state__posheight__first__bit Int)
(declare-const patience__state__posheight__last__bit Int)
(declare-const patience__state__posheight__position Int)
(assert (<= 0 patience__state__posheight__first__bit))
(assert (< patience__state__posheight__first__bit patience__state__posheight__last__bit))
(assert (<= 0 patience__state__posheight__position))
(declare-const patience__state__preds__first__bit Int)
(declare-const patience__state__preds__last__bit Int)
(declare-const patience__state__preds__position Int)
(assert (<= 0 patience__state__preds__first__bit))
(assert (< patience__state__preds__first__bit patience__state__preds__last__bit))
(assert (<= 0 patience__state__preds__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((state__ref (mk_state__ref (state__content us_rep)))))
(define-fun state__ref___projection ((a state__ref)) us_rep (state__content a))
(declare-const null_state us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun temp___157 (Int) (Array Int card))
(declare-fun temp___161 (Int) (Array Int cardindex))
(declare-fun temp___165 ((Array Int cardindex)) (Array Int (Array Int cardindex)))
(declare-fun temp___169 (Int) (Array Int cardindex))
(declare-fun temp___173 (Int) (Array Int cardindex))
(declare-fun temp___177 (Int) (Array Int cardindex))
(declare-fun temp___181 (Int) (Array Int cardindex))
(declare-fun inv (us_rep) Bool)
(declare-fun inv__function_guard (Bool us_rep) Bool)
(assert true)
(assert (forall ((s us_rep)) (! (= (= (inv s) true) (and (and (and (and (and (and (and (and (and (<= 0 (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s)))) (<= (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s))) (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))))) (<= (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))) 100)) (or (= (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))) 0) (< 0 (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s)))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (and (and (<= 1 (to_rep2 (let ((temp___335 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___335 i)))) (<= (to_rep2 (let ((temp___336 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___336 i))) (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))))) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- (to_rep2 (let ((temp___337 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___337 i))) 1))) (and (<= 0 (to_rep2 (let ((temp___339 (let ((temp___338 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___338 i)))) (select temp___339 j)))) (< (to_rep2 (let ((temp___341 (let ((temp___340 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___340 i)))) (select temp___341 j))) (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))) 1))) (and (and (and (<= 0 (to_rep2 (let ((temp___342 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___342 i)))) (<= (to_rep2 (let ((temp___342 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___342 i))) (- (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (and (<= 0 (to_rep2 (let ((temp___343 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___343 i)))) (<= (to_rep2 (let ((temp___343 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___343 i))) (- (to_rep2 (let ((temp___344 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___344 (to_rep2 (let ((temp___345 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___345 i)))))) 1)))) (= (to_rep2 (let ((temp___348 (let ((temp___346 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___346 (to_rep2 (let ((temp___347 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___347 i))))))) (select temp___348 (to_rep2 (let ((temp___349 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___349 i)))))) i))))) (forall ((ist Int)) (=> (and (<= 0 ist) (<= ist (- (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((ip Int)) (=> (and (<= 0 ip) (<= ip (- (to_rep2 (let ((temp___350 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___350 ist))) 1))) (and (= ist (to_rep2 (let ((temp___351 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___351 (to_rep2 (let ((temp___353 (let ((temp___352 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___352 ist)))) (select temp___353 ip))))))) (= ip (to_rep2 (let ((temp___354 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___354 (to_rep2 (let ((temp___356 (let ((temp___355 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___355 ist)))) (select temp___356 ip))))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- (to_rep2 (let ((temp___357 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___357 i))) 2))) (forall ((k Int)) (=> (and (<= (+ j 1) k) (<= k (- (to_rep2 (let ((temp___358 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___358 i))) 1))) (< (to_rep2 (let ((temp___360 (let ((temp___359 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___359 i)))) (select temp___360 j))) (to_rep2 (let ((temp___362 (let ((temp___361 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___361 i)))) (select temp___362 k))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep2 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- (to_rep2 (let ((temp___363 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___363 i))) 2))) (forall ((k Int)) (=> (and (<= (+ j 1) k) (<= k (- (to_rep2 (let ((temp___364 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___364 i))) 1))) (<= (to_rep (let ((temp___368 (rec__patience__state__values (us_split_fields1 s)))) (select temp___368 (to_rep2 (let ((temp___370 (let ((temp___369 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___369 i)))) (select temp___370 k)))))) (to_rep (let ((temp___365 (rec__patience__state__values (us_split_fields1 s)))) (select temp___365 (to_rep2 (let ((temp___367 (let ((temp___366 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___366 i)))) (select temp___367 j)))))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))) 1))) (and (and (and (<= (- 1) (to_rep2 (let ((temp___371 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___371 i)))) (<= (to_rep2 (let ((temp___371 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___371 i))) (- (to_rep2 (rec__patience__state__numelts (us_split_fields1 s))) 1))) (< (to_rep2 (let ((temp___372 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___372 i))) i)) (ite (< (to_rep2 (let ((temp___381 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___381 i))) 0) (= (to_rep2 (let ((temp___373 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___373 i))) 0) (and (and (< (to_rep (let ((temp___374 (rec__patience__state__values (us_split_fields1 s)))) (select temp___374 (to_rep2 (let ((temp___375 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___375 i)))))) (to_rep (let ((temp___376 (rec__patience__state__values (us_split_fields1 s)))) (select temp___376 i)))) (< 0 (to_rep2 (let ((temp___377 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___377 i))))) (= (to_rep2 (let ((temp___378 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___378 (to_rep2 (let ((temp___379 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___379 i)))))) (- (to_rep2 (let ((temp___380 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___380 i))) 1))))))))) :pattern ((inv s)))))
(declare-const cards us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (integer integer) Bool)
(declare-const dummy9 integer)
(declare-datatypes () ((t28b__ref (mk_t28b__ref (t28b__content integer)))))
(define-fun t28b__ref___projection ((a t28b__ref)) integer (t28b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_189 Int) (temp___is_init_185 Bool) (temp___skip_constant_186 Bool) (temp___do_toplevel_187 Bool) (temp___do_typ_inv_188 Bool)) Bool (=> (or (= temp___is_init_185 true) (<= 1 52)) (in_range2 temp___expr_189)))
(define-fun dynamic_invariant4 ((temp___expr_202 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool) (temp___do_typ_inv_201 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= (- 1) 100)) (in_range4 temp___expr_202)))
(assert (= null_state (mk___rep (mk___split_fields (of_rep2 0) (temp___157 1) (of_rep2 0) (temp___161 (- 1)) (temp___165 (temp___169 (- 1))) (temp___173 (- 1)) (temp___177 (- 1)) (temp___181 (- 1))))))
(assert (forall ((temp___159 Int)) (=> (dynamic_invariant3 temp___159 true true true true) (forall ((temp___160 Int)) (= (to_rep (select (temp___157 temp___159) temp___160)) temp___159)))))
(assert (forall ((temp___163 Int)) (=> (dynamic_invariant4 temp___163 true true true true) (forall ((temp___164 Int)) (= (to_rep2 (select (temp___161 temp___163) temp___164)) temp___163)))))
(assert (forall ((temp___167 (Array Int cardindex))) (forall ((temp___168 Int)) (= (select (temp___165 temp___167) temp___168) temp___167))))
(assert (forall ((temp___171 Int)) (=> (dynamic_invariant4 temp___171 true true true true) (forall ((temp___172 Int)) (= (to_rep2 (select (temp___169 temp___171) temp___172)) temp___171)))))
(assert (forall ((temp___183 Int)) (=> (dynamic_invariant4 temp___183 true true true true) (forall ((temp___184 Int)) (= (to_rep2 (select (temp___181 temp___183) temp___184)) temp___183)))))
(assert (forall ((temp___175 Int)) (=> (dynamic_invariant4 temp___175 true true true true) (forall ((temp___176 Int)) (= (to_rep2 (select (temp___173 temp___175) temp___176)) temp___175)))))
(assert (forall ((temp___179 Int)) (=> (dynamic_invariant4 temp___179 true true true true) (forall ((temp___180 Int)) (= (to_rep2 (select (temp___177 temp___179) temp___180)) temp___179)))))
(declare-const s__split_fields cardindex)
(declare-const s__split_fields1 (Array Int card))
(declare-const s__split_fields2 cardindex)
(declare-const s__split_fields3 (Array Int cardindex))
(declare-const s__split_fields4 (Array Int (Array Int cardindex)))
(declare-const s__split_fields5 (Array Int cardindex))
(declare-const s__split_fields6 (Array Int cardindex))
(declare-const s__split_fields7 (Array Int cardindex))
(declare-const i Int)
(declare-const o cardindex)
(declare-const o1 cardindex)
(declare-const o2 cardindex)
(declare-const o3 (Array Int card))
(declare-const o4 cardindex)
(declare-const o5 (Array Int cardindex))
(declare-const o6 (Array Int (Array Int cardindex)))
(declare-const o7 (Array Int cardindex))
(declare-const o8 (Array Int cardindex))
(declare-const o9 (Array Int cardindex))
(declare-const temp___869 cardindex)
(declare-const temp___8691 (Array Int card))
(declare-const temp___8692 cardindex)
(declare-const temp___8693 (Array Int cardindex))
(declare-const temp___8694 (Array Int (Array Int cardindex)))
(declare-const temp___8695 (Array Int cardindex))
(declare-const temp___8696 (Array Int cardindex))
(declare-const temp___8697 (Array Int cardindex))
(declare-const result cardindex)
(declare-const result1 (Array Int card))
(declare-const result2 cardindex)
(declare-const result3 (Array Int cardindex))
(declare-const result4 (Array Int (Array Int cardindex)))
(declare-const result5 (Array Int cardindex))
(declare-const result6 (Array Int cardindex))
(declare-const result7 (Array Int cardindex))
(declare-const s__split_fields8 cardindex)
(declare-const s__split_fields9 (Array Int card))
(declare-const s__split_fields10 cardindex)
(declare-const s__split_fields11 (Array Int cardindex))
(declare-const s__split_fields12 (Array Int (Array Int cardindex)))
(declare-const s__split_fields13 (Array Int cardindex))
(declare-const s__split_fields14 (Array Int cardindex))
(declare-const s__split_fields15 (Array Int cardindex))
(declare-const result8 Int)
(declare-const i1 Int)
(define-fun s__split_fields16 () us_split_fields (mk___split_fields s__split_fields8 s__split_fields9 s__split_fields10 s__split_fields11 s__split_fields12 s__split_fields13 s__split_fields14 s__split_fields15))
(assert (= (to_rep2 o) 0))
(assert (= (to_rep2 o1) 0))
(assert (= o1 o2))
(assert (= (temp___157 1) o3))
(assert (= o o4))
(assert (= (temp___161 (- 1)) o5))
(assert (= (temp___165 (temp___169 (- 1))) o6))
(assert (= (temp___173 (- 1)) o7))
(assert (= (temp___177 (- 1)) o8))
(assert (= (temp___181 (- 1)) o9))
(assert (= temp___869 o2))
(assert (= temp___8691 o3))
(assert (= temp___8692 o4))
(assert (= temp___8693 o5))
(assert (= temp___8694 o6))
(assert (= temp___8695 o7))
(assert (= temp___8696 o8))
(assert (= temp___8697 o9))
(assert (= (mk___rep (mk___split_fields temp___869 temp___8691 temp___8692 temp___8693 temp___8694 temp___8695 temp___8696 temp___8697)) null_state))
(assert (dynamic_invariant cards true false true true))
(assert (<= (length cards) 100))
(assert (= (mk___split_fields__ref (mk___split_fields result result1 result2 result3 result4 result5 result6 result7)) (mk___split_fields__ref (mk___split_fields s__split_fields s__split_fields1 s__split_fields2 s__split_fields3 s__split_fields4 s__split_fields5 s__split_fields6 s__split_fields7))))
(assert (= s__split_fields16 (us_split_fields1 null_state)))
(assert (= (mk_int__ref result8) (mk_int__ref i)))
(assert (= i1 (to_rep1 (first (rt cards)))))
(assert (<= (to_rep1 (first (rt cards))) i1))
(assert (<= i1 (to_rep1 (last (rt cards)))))
(assert (not (= (inv (mk___rep s__split_fields16)) true)))
(check-sat)
(exit)
