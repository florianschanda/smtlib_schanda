(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type enum_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : enum_t, enum_t -> bool

logic dummy : enum_t

type enum_t__ref = { enum_t__content : enum_t
}

function enum_t__ref___projection(a: enum_t__ref) : enum_t =
  (a).enum_t__content

logic to_rep : enum_t -> int

logic of_rep : int -> enum_t

axiom inversion_axiom :
  (forall x:enum_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:enum_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,enum_t) farray
}

logic slide : (int,enum_t) farray, int, int -> (int,enum_t) farray

axiom slide_eq :
  (forall a:(int,enum_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,enum_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,enum_t) farray, int, int, (int,enum_t) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,enum_t) farray. forall a__first:int. forall a__last:int.
  forall b:(int,enum_t) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_160:int. ((((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) and
  (to_rep((a[temp___idx_160])) = to_rep((b[((b__first - a__first) + temp___idx_160)])))) or
  (not ((a__first <= temp___idx_160) and (temp___idx_160 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) ->
  (to_rep((a[temp___idx_160])) = to_rep((b[((b__first - a__first) + temp___idx_160)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,enum_t) farray. forall b:(int,enum_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) ->
  (to_rep((a[temp___idx_160])) = to_rep((b[((b__first - a__first) + temp___idx_160)])))))))))

type small_index_t

predicate in_range2(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : small_index_t, small_index_t -> bool

logic dummy1 : small_index_t

type small_index_t__ref = { small_index_t__content : small_index_t
}

function small_index_t__ref___projection(a: small_index_t__ref) : small_index_t =
  (a).small_index_t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___648 : int, int, int -> (int,enum_t) farray

axiom def_axiom :
  (forall temp___650:int. forall temp___651:int. forall temp___652:int.
  (((in_range1(temp___650) and in_range1(temp___651)) and
  in_range1(temp___652)) ->
  (forall temp___653:int. (((temp___653 = 1000) ->
  (to_rep((temp___648(temp___650, temp___651,
  temp___652)[temp___653])) = temp___651)) and ((not (temp___653 = 1000)) ->
  ((((temp___653 = 2) or ((4 <= temp___653) and (temp___653 <= 6))) ->
  (to_rep((temp___648(temp___650, temp___651,
  temp___652)[temp___653])) = temp___650)) and ((not ((temp___653 = 2) or
  ((4 <= temp___653) and (temp___653 <= 6)))) ->
  (to_rep((temp___648(temp___650, temp___651,
  temp___652)[temp___653])) = temp___652))))))))

 (* File "array_aggregates.adb", line 344, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,enum_t) farray. forall result:(int,enum_t) farray.
  forall x1:(int,enum_t) farray. (in_range2(n) -> (((result = x) and
  (x1 = temp___648(0, 2, 1))) -> ((not (to_rep((x1[n])) = 1)) ->
  (to_rep((x1[n])) = 2)))))
