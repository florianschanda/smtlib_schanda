(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tcount_typeB 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy1 tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index_type index_type) Bool)
(declare-const dummy2 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 1 100)) (in_range3 temp___expr_150)))
(declare-sort extended_index_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (extended_index_type extended_index_type) Bool)
(declare-const dummy3 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_156 Int) (temp___is_init_153 Bool) (temp___skip_constant_154 Bool) (temp___do_toplevel_155 Bool)) Bool (=> (or (= temp___is_init_153 true) (<= 0 100)) (in_range4 temp___expr_156)))
(declare-fun to_rep1 (extended_index_type) Int)
(declare-fun of_rep1 (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x extended_index_type)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort direction 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (direction direction) Bool)
(declare-const dummy4 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(define-fun dynamic_invariant2 ((temp___expr_168 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool)) Bool (=> (or (= temp___is_init_165 true) (<= 0 1)) (in_range5 temp___expr_168)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (count_type count_type) Bool)
(declare-const dummy6 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 0 2147483647)) (in_range6 temp___expr_144)))
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption ((temp___expr_199 us_rep) (temp___skip_top_level_200 Bool)) Bool (=> (not (= temp___skip_top_level_200 true)) (= (length temp___expr_199) 0)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant3 result true false true))) :pattern ((length container)))))
(declare-sort element_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (element_type element_type) Bool)
(declare-const dummy7 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_186 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 0 1)) (in_range7 temp___expr_186)))
(declare-sort extended_index 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (extended_index extended_index) Bool)
(declare-const dummy8 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant5 ((temp___expr_192 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 0 2147483647)) (in_range8 temp___expr_192)))
(assert (forall ((container us_rep)) (forall ((position Int)) (! (=> (and (dynamic_invariant5 position true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant4 (get container position) true false true)) :pattern ((get container position))))))
(define-fun olt ((left us_rep) (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tree_model__path_type__a us_rep) (rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep (rec__tree_model__path_type__a a))
(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool (rec__tree_model__path_type__k a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq5 (rec__tree_model__path_type__a (us_split_fields1 a)) (rec__tree_model__path_type__a (us_split_fields1 b))) true) (= (rec__tree_model__path_type__k (us_split_fields1 a)) (rec__tree_model__path_type__k (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const tree_model__path_type__a__first__bit Int)
(declare-const tree_model__path_type__a__last__bit Int)
(declare-const tree_model__path_type__a__position Int)
(assert (<= 0 tree_model__path_type__a__first__bit))
(assert (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))
(assert (<= 0 tree_model__path_type__a__position))
(declare-const tree_model__path_type__k__first__bit Int)
(declare-const tree_model__path_type__k__last__bit Int)
(declare-const tree_model__path_type__k__position Int)
(assert (<= 0 tree_model__path_type__k__first__bit))
(assert (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))
(assert (<= 0 tree_model__path_type__k__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 (path_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))
(assert (forall ((v us_rep1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-fun oeq1 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-fun oeq__function_guard1 (Bool (Array Int us_rep1) (Array Int us_rep1)) Bool)
(define-fun dynamic_invariant6 ((temp___expr_216 (Array Int us_rep1)) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int)) (=> (and (<= 1 temp___217) (<= temp___217 100)) (=> (= temp___is_init_213 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_216 temp___217)))) 100)))))
(define-fun default_initial_assumption1 ((temp___expr_219 (Array Int us_rep1)) (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int)) (=> (and (<= 1 temp___221) (<= temp___221 100)) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_219 temp___221)))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___expr_219 temp___221))) (of_int 0))))))
(assert true)
(assert (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1))) (! (= (= (oeq1 m1 m2) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i))) (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true) (= (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true)))))) :pattern ((oeq1 m1 m2)))))
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))
(declare-fun oeq2 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption2 ((temp___expr_239 us_rep2) (temp___skip_top_level_240 Bool)) Bool (=> (not (= temp___skip_top_level_240 true)) (= (is_empty temp___expr_239) true)))
(declare-fun ole (us_rep2 us_rep2) Bool)
(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (oeq2 left right) true) (and (= (ole left right) true) (= (ole right left) true))) :pattern ((oeq2 left right)))))
(declare-datatypes () ((value_set__ref (mk_value_set__ref (value_set__content us_rep2)))))
(define-fun value_set__ref___projection ((a value_set__ref)) us_rep2 (value_set__content a))
(declare-sort position_type 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq11 (position_type position_type) Bool)
(declare-const dummy11 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep2 (position_type) Int)
(declare-fun of_rep2 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x position_type)) (! (in_range9 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 b)))) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 b))))) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 b))))) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 a))) (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq12 (us_rep3 us_rep3) Bool)
(declare-const dummy12 us_rep3)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep3)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep3 (cell__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))
(assert (forall ((v us_rep3)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq4 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq4 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true))))))))
(declare-const dummy13 (Array Int us_rep3))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int us_rep3)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep3)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int us_rep3)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq13 ((Array Int us_rep3) (Array Int us_rep3)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep3))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep3) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep4)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq6 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 a))) (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 b)))) (= (bool_eq5 (rec__binary_trees__forest__c (us_split_fields5 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields5 b)) 1 100) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep4) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep4) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq14 (us_rep4 us_rep4) Bool)
(declare-const dummy14 us_rep4)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep4)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep4 (forest__content a))
(declare-fun size (us_rep4) Int)
(declare-fun size__function_guard (Int us_rep4) Bool)
(declare-fun tree_structure (us_rep4) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep4) Bool)
(define-fun dynamic_invariant7 ((temp___expr_273 us_rep4) (temp___is_init_270 Bool) (temp___skip_constant_271 Bool) (temp___do_toplevel_272 Bool)) Bool (= (tree_structure temp___expr_273) true))
(define-fun default_initial_assumption3 ((temp___expr_276 us_rep4) (temp___skip_top_level_277 Bool)) Bool (and (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 temp___expr_276))) 0) (forall ((temp___279 Int)) (=> (and (<= 1 temp___279) (<= temp___279 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 2))))) (=> (not (= temp___skip_top_level_277 true)) (= (size temp___expr_276) 0))))
(define-fun type_invariant ((temp___282 us_rep4)) Bool (= (tree_structure temp___282) true))
(declare-fun valid_root (us_rep4 Int) Bool)
(declare-fun valid_root__function_guard (Bool us_rep4 Int) Bool)
(declare-fun parent (us_rep4 Int) Int)
(declare-fun parent__function_guard (Int us_rep4 Int) Bool)
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (dynamic_invariant7 f true true true) (dynamic_invariant i true true true)) (let ((result (parent f i))) (and (and (=> (= (valid_root f i) true) (= result 0)) (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false true)))) :pattern ((parent f i))))))
(declare-fun position (us_rep4 Int) Int)
(declare-fun position__function_guard (Int us_rep4 Int) Bool)
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant7 f true true true) (dynamic_invariant i true true true)) (not (= (parent f i) 0))) (dynamic_invariant2 (position f i) true false true)) :pattern ((position f i))))))
(declare-fun model__ (us_rep4 Int) (Array Int us_rep1))
(declare-fun model____function_guard ((Array Int us_rep1) us_rep4 Int) Bool)
(assert (forall ((f us_rep4)) (forall ((root Int)) (! (=> (and (and (dynamic_invariant7 f true true true) (dynamic_invariant root true true true)) (= (valid_root f root) true)) (let ((result (model__ f root))) (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result root)))) 0) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= i root)) (ite (and (not (= (parent f i) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result (parent f i)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)))))) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= i root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select result (parent f i)))) (position f i) (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select result i))) (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true)) (= j i))))))))))) (dynamic_invariant6 result true false true)))) :pattern ((model__ f root))))))
(declare-fun peek (us_rep4 Int Int) Int)
(declare-fun peek__function_guard (Int us_rep4 Int Int) Bool)
(define-fun ole1 ((left us_rep) (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard1 (Bool us_rep us_rep) Bool)
(declare-fun is_concat (us_rep us_rep us_rep) Bool)
(declare-fun is_concat__function_guard (Bool us_rep us_rep us_rep) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq7 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep (select a temp___idx_134)) (to_rep (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep (select a temp___idx_134)) (to_rep (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq7 a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq7 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq7 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy15 (Array Int natural))
(declare-const value__size6 Int)
(declare-fun object__size6 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 ((Array Int natural)) Int)
(assert (<= 0 value__size6))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size6 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment6 a))))
(declare-fun user_eq15 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__search_trees__search_tree__root extended_index_type) (rec__search_trees__search_tree__struct us_rep4) (rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields6)) extended_index_type (rec__search_trees__search_tree__root a))
(define-fun us_split_fields_Struct__projection ((a us_split_fields6)) us_rep4 (rec__search_trees__search_tree__struct a))
(define-fun us_split_fields_Values__projection ((a us_split_fields6)) (Array Int natural) (rec__search_trees__search_tree__values a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep5 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep5)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq8 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 a))) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 b)))) (= (bool_eq6 (rec__search_trees__search_tree__struct (us_split_fields7 a)) (rec__search_trees__search_tree__struct (us_split_fields7 b))) true)) (= (bool_eq7 (rec__search_trees__search_tree__values (us_split_fields7 a)) 1 100 (rec__search_trees__search_tree__values (us_split_fields7 b)) 1 100) true)) true false))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep5) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep5) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))
(declare-const search_trees__search_tree__root__first__bit Int)
(declare-const search_trees__search_tree__root__last__bit Int)
(declare-const search_trees__search_tree__root__position Int)
(assert (<= 0 search_trees__search_tree__root__first__bit))
(assert (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))
(assert (<= 0 search_trees__search_tree__root__position))
(declare-const search_trees__search_tree__struct__first__bit Int)
(declare-const search_trees__search_tree__struct__last__bit Int)
(declare-const search_trees__search_tree__struct__position Int)
(assert (<= 0 search_trees__search_tree__struct__first__bit))
(assert (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))
(assert (<= 0 search_trees__search_tree__struct__position))
(declare-const search_trees__search_tree__values__first__bit Int)
(declare-const search_trees__search_tree__values__last__bit Int)
(declare-const search_trees__search_tree__values__position Int)
(assert (<= 0 search_trees__search_tree__values__first__bit))
(assert (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))
(assert (<= 0 search_trees__search_tree__values__position))
(declare-fun user_eq16 (us_rep5 us_rep5) Bool)
(declare-const dummy16 us_rep5)
(declare-datatypes () ((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep5)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep5 (search_tree__content a))
(declare-fun size1 (us_rep5) Int)
(declare-fun size__function_guard1 (Int us_rep5) Bool)
(declare-fun ordered_leafs (us_rep4 Int (Array Int natural)) Bool)
(declare-fun ordered_leafs__function_guard (Bool us_rep4 Int (Array Int natural)) Bool)
(declare-fun temp___387 (Int) (Array Int natural))
(assert (forall ((temp___389 Int)) (forall ((temp___390 Int)) (= (select (temp___387 temp___389) temp___390) (of_rep temp___389)))))
(define-fun dynamic_invariant8 ((temp___expr_376 us_rep5) (temp___is_init_373 Bool) (temp___skip_constant_374 Bool) (temp___do_toplevel_375 Bool)) Bool (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_376))) true))
(define-fun default_initial_assumption4 ((temp___expr_380 us_rep5) (temp___skip_top_level_381 Bool)) Bool (and (and (and (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___expr_380))) 0) (and (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380))))) 0) (forall ((temp___384 Int)) (=> (and (<= 1 temp___384) (<= temp___384 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 2))))) (= (size (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380))) 0))) (= (rec__search_trees__search_tree__values (us_split_fields7 temp___expr_380)) (temp___387 0))) (=> (not (= temp___skip_top_level_381 true)) (= (size1 temp___expr_380) 0))))
(define-fun type_invariant1 ((temp___392 us_rep5)) Bool (ite (= (size (rec__search_trees__search_tree__struct (us_split_fields7 temp___392))) 0) (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392))) 0) (and (and (not (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392))) 0)) (= (valid_root (rec__search_trees__search_tree__struct (us_split_fields7 temp___392)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392)))) true)) (= (ordered_leafs (rec__search_trees__search_tree__struct (us_split_fields7 temp___392)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392))) (rec__search_trees__search_tree__values (us_split_fields7 temp___392))) true))))
(assert (forall ((t us_rep5)) (! (=> (and (dynamic_invariant8 t true true true) (type_invariant1 t)) (dynamic_invariant1 (size1 t) true false true)) :pattern ((size1 t)))))
(assert (forall ((t us_rep5)) (! (=> (dynamic_invariant8 t true true true) (= (size1 t) (size (rec__search_trees__search_tree__struct (us_split_fields7 t))))) :pattern ((size1 t)))))
(declare-fun root (us_rep5) Int)
(declare-fun root__function_guard (Int us_rep5) Bool)
(assert (forall ((t us_rep5)) (! (=> (and (and (dynamic_invariant8 t true true true) (type_invariant1 t)) (not (= (size1 t) 0))) (dynamic_invariant (root t) true false true)) :pattern ((root t)))))
(assert (forall ((t us_rep5)) (! (=> (dynamic_invariant8 t true true true) (= (root t) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))) :pattern ((root t)))))
(declare-fun parent1 (us_rep5 Int) Int)
(declare-fun parent__function_guard1 (Int us_rep5 Int) Bool)
(assert (forall ((t us_rep5)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant8 t true true true) (dynamic_invariant i true true true)) (type_invariant1 t)) (let ((result (parent1 t i))) (and (=> (= (size1 t) 0) (= result 0)) (dynamic_invariant1 result true false true)))) :pattern ((parent1 t i))))))
(assert (forall ((t us_rep5)) (forall ((i Int)) (! (=> (and (dynamic_invariant8 t true true true) (dynamic_invariant i true true true)) (= (parent1 t i) (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i))) :pattern ((parent1 t i))))))
(declare-fun position1 (us_rep5 Int) Int)
(declare-fun position__function_guard1 (Int us_rep5 Int) Bool)
(assert (forall ((t us_rep5)) (forall ((i Int)) (! (=> (and (and (and (dynamic_invariant8 t true true true) (dynamic_invariant i true true true)) (type_invariant1 t)) (not (= (parent1 t i) 0))) (dynamic_invariant2 (position1 t i) true false true)) :pattern ((position1 t i))))))
(assert (forall ((t us_rep5)) (forall ((i Int)) (! (=> (and (dynamic_invariant8 t true true true) (dynamic_invariant i true true true)) (= (position1 t i) (position (rec__search_trees__search_tree__struct (us_split_fields7 t)) i))) :pattern ((position1 t i))))))
(declare-fun model__1 (us_rep5) (Array Int us_rep1))
(declare-fun model____function_guard1 ((Array Int us_rep1) us_rep5) Bool)
(assert (forall ((t us_rep5)) (! (=> (and (and (dynamic_invariant8 t true true true) (type_invariant1 t)) (not (= (size1 t) 0))) (dynamic_invariant6 (model__1 t) true false true)) :pattern ((model__1 t)))))
(assert (forall ((t us_rep5)) (! (=> (dynamic_invariant8 t true true true) (= (model__1 t) (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))) :pattern ((model__1 t)))))
(declare-fun peek1 (us_rep5 Int Int) Int)
(declare-fun peek__function_guard1 (Int us_rep5 Int Int) Bool)
(assert (forall ((t us_rep5)) (forall ((i Int) (d Int)) (! (=> (and (and (and (and (dynamic_invariant8 t true true true) (dynamic_invariant i true true true)) (dynamic_invariant2 d true true true)) (type_invariant1 t)) (and (not (= (size1 t) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___419 (model__1 t))) (select temp___419 i)))) true))) (dynamic_invariant1 (peek1 t i d) true false true)) :pattern ((peek1 t i d))))))
(assert (forall ((t us_rep5)) (forall ((i Int) (d Int)) (! (=> (and (and (dynamic_invariant8 t true true true) (dynamic_invariant i true true true)) (dynamic_invariant2 d true true true)) (= (peek1 t i d) (peek (rec__search_trees__search_tree__struct (us_split_fields7 t)) i d))) :pattern ((peek1 t i d))))))
(declare-fun values (us_rep5) us_rep2)
(declare-fun values__function_guard (us_rep2 us_rep5) Bool)
(declare-fun values1 (us_rep5) us_rep2)
(declare-fun values__function_guard1 (us_rep2 us_rep5) Bool)
(declare-fun contains (us_rep2 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)
(define-fun default_initial_assumption5 ((temp___expr_252 us_rep2) (temp___skip_top_level_253 Bool)) Bool (=> (not (= temp___skip_top_level_253 true)) (= (is_empty temp___expr_252) true)))
(assert (forall ((t us_rep5)) (! (=> (and (dynamic_invariant8 t true true true) (type_invariant1 t)) (=> (= (size1 t) 0) (= (is_empty (values t)) true))) :pattern ((values t)))))
(assert (forall ((t us_rep5)) (! (=> (and (dynamic_invariant8 t true true true) (type_invariant1 t)) (let ((result (values1 t))) (ite (= (size (rec__search_trees__search_tree__struct (us_split_fields7 t))) 0) (= (is_empty result) true) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___429 (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))) (select temp___429 i)))) true) (= (contains result (to_rep (let ((temp___428 (rec__search_trees__search_tree__values (us_split_fields7 t)))) (select temp___428 i)))) true)))) (forall ((v Int)) (=> (and (<= 0 v) (<= v 2147483647)) (=> (= (contains result v) true) (exists ((i Int)) (and (and (<= 1 i) (<= i 100)) (and (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___430 (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))))) (select temp___430 i)))) true) (= (to_rep (let ((temp___431 (rec__search_trees__search_tree__values (us_split_fields7 t)))) (select temp___431 i))) v))))))))))) :pattern ((values1 t)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert (forall ((f us_rep4)) (forall ((root1 Int)) (forall ((values2 (Array Int natural))) (! (= (= (ordered_leafs f root1 values2) true) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___482 (model__ f root1))) (select temp___482 i1)))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___483 (model__ f root1))) (select temp___483 j)))) true)) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___484 (model__ f root1))) (select temp___484 i1)))) (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___485 (model__ f root1))) (select temp___485 j))))) true)) (ite (= (get (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___480 (model__ f root1))) (select temp___480 j)))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___481 (model__ f root1))) (select temp___481 i1))))) 1)) 0) (< (to_rep (select values2 j)) (to_rep (select values2 i1))) (< (to_rep (select values2 i1)) (to_rep (select values2 j)))))))))) :pattern ((ordered_leafs f root1 values2)))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const is_root Bool)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(define-fun dynamic_invariant9 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun dynamic_invariant10 ((temp___expr_162 Int) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool)) Bool (=> (or (= temp___is_init_159 true) (<= 0 2)) (in_range9 temp___expr_162)))
(define-fun dynamic_invariant11 ((temp___expr_205 us_rep1) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true) (=> (= temp___is_init_202 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_205))) 100))))
(define-fun default_initial_assumption6 ((temp___expr_207 us_rep1) (temp___skip_top_level_208 Bool)) Bool (and (= (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_207))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 temp___expr_207)) (of_int 0))))
(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___211))) 100))
(assert true)
(assert (forall ((q us_rep) (v us_rep) (p us_rep)) (! (= (= (is_concat q v p) true) (and (and (and (= (- (length p) (length v)) (length q)) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 (length q))) (= (get p i1) (get q i1))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 (length v))) (= (get p (+ i1 (length q))) (get v i1))))) (forall ((i1 Int)) (=> (and (<= (+ (length q) 1) i1) (<= i1 (length p))) (= (get v (- i1 (length q))) (get p i1)))))) :pattern ((is_concat q v p)))))
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (forall ((d Int)) (! (= (= (is_add s1 d s2) true) (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true)) (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2))))))
(assert (forall ((f us_rep4)) (! (=> (dynamic_invariant7 f true true true) (dynamic_invariant1 (size f) true false true)) :pattern ((size f)))))
(assert (forall ((f us_rep4)) (forall ((i1 Int)) (! (=> (and (dynamic_invariant7 f true true true) (dynamic_invariant i1 true true true)) (=> (< (size f) i1) (not (= (valid_root f i1) true)))) :pattern ((valid_root f i1))))))
(assert (forall ((f us_rep4)) (forall ((i1 Int) (d Int)) (! (=> (and (and (dynamic_invariant7 f true true true) (dynamic_invariant i1 true true true)) (dynamic_invariant2 d true true true)) (let ((result (peek f i1 d))) (and (and (ite (not (= result 0)) (and (= (position f result) d) (= (parent f result) i1)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (= (parent f j) i1) (not (= (position f j) d)))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (parent f j) i1) (= (position f j) d)) (= result j))))) (dynamic_invariant1 result true false true)))) :pattern ((peek f i1 d))))))
(define-fun default_initial_assumption7 ((temp___expr_259 us_rep3) (temp___skip_top_level_260 Bool)) Bool (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 temp___expr_259))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 temp___expr_259))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 temp___expr_259))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 temp___expr_259))) 2)))
(define-fun default_initial_assumption8 ((temp___expr_266 (Array Int us_rep3)) (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int)) (=> (and (<= 1 temp___268) (<= temp___268 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select temp___expr_266 temp___268)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select temp___expr_266 temp___268)))) 2)))))
(assert true)
(declare-sort element_type1 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq17 (element_type1 element_type1) Bool)
(declare-const dummy17 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant12 ((temp___expr_232 Int) (temp___is_init_229 Bool) (temp___skip_constant_230 Bool) (temp___do_toplevel_231 Bool)) Bool (=> (or (= temp___is_init_229 true) (<= 0 2147483647)) (in_range10 temp___expr_232)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant12 item true true true) (=> (= (of_int 1) true) (=> (exists ((e Int)) (and (and (in_range10 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(assert (forall ((container us_rep2)) (! (dynamic_invariant3 (length1 container) true false true) :pattern ((length1 container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range10 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(assert (forall ((container us_rep2)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range10 item) (= (contains container item) true))))) (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty container)))))
(declare-const t__split_fields extended_index_type)
(declare-const t__split_fields1 extended_index_type)
(declare-const t__split_fields2 (Array Int us_rep3))
(declare-const t__split_fields3 (Array Int natural))
(declare-const x Int)
(declare-const y Int)
(declare-const xr Int)
(declare-const j Int)
(declare-const d Int)
(declare-const t_old__split_fields extended_index_type)
(declare-const t_old__split_fields1 extended_index_type)
(declare-const t_old__split_fields2 (Array Int us_rep3))
(declare-const t_old__split_fields3 (Array Int natural))
(declare-const f_old__split_fields extended_index_type)
(declare-const f_old__split_fields1 (Array Int us_rep3))
(declare-const f_1__split_fields extended_index_type)
(declare-const f_1__split_fields1 (Array Int us_rep3))
(declare-const f_2__split_fields extended_index_type)
(declare-const f_2__split_fields1 (Array Int us_rep3))
(declare-const f_3__split_fields extended_index_type)
(declare-const f_3__split_fields1 (Array Int us_rep3))
(declare-const f_4__split_fields us_split_fields__ref2)
(declare-const f_5__split_fields us_split_fields__ref2)
(declare-const temp___1242 (Array Int us_rep1))
(declare-const o us_rep1)
(declare-const o1 us_split_fields)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const search_trees__right_rotate__is_root__assume Bool)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const temp___1026 (Array Int us_rep1))
(declare-const o12 us_rep1)
(declare-const o13 us_split_fields)
(declare-const o14 us_rep)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const temp___1035 (Array Int us_rep1))
(declare-const o18 Int)
(declare-const o19 us_rep1)
(declare-const o20 us_split_fields)
(declare-const o21 us_rep)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const temp___1040 (Array Int us_rep1))
(declare-const o24 Int)
(declare-const o25 us_rep1)
(declare-const o26 us_split_fields)
(declare-const o27 us_rep)
(declare-const o28 Int)
(declare-const j1 Int)
(declare-const temp___1044 (Array Int us_rep1))
(declare-const us Bool)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const temp___1054 (Array Int us_rep1))
(declare-const o31 us_rep1)
(declare-const o32 us_split_fields)
(declare-const o33 us_rep)
(declare-const o34 Int)
(declare-const j2 Int)
(declare-const o35 Int)
(declare-const temp___1058 (Array Int us_rep1))
(declare-const j3 Int)
(declare-const temp___1067 (Array Int us_rep1))
(declare-const j4 Int)
(declare-const temp___1076 (Array Int us_rep1))
(declare-const us1 Bool)
(declare-const us2 Bool)
(declare-const o36 Int)
(declare-const o37 extended_index_type)
(declare-const o38 us_split_fields6)
(declare-const temp___1172 us_rep5)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const o41 (Array Int us_rep1))
(declare-const o42 Int)
(declare-const o43 (Array Int us_rep1))
(declare-const o44 Int)
(declare-const temp___1086 (Array Int us_rep1))
(declare-const o45 us_rep1)
(declare-const o46 us_split_fields)
(declare-const o47 us_rep)
(declare-const o48 Int)
(declare-const temp___1087 (Array Int us_rep1))
(declare-const o49 us_rep1)
(declare-const o50 us_split_fields)
(declare-const o51 us_rep)
(declare-const o52 Int)
(declare-const temp___1088 (Array Int us_rep1))
(declare-const o53 us_rep1)
(declare-const o54 us_split_fields)
(declare-const o55 us_rep)
(declare-const o56 Int)
(declare-const temp___1089 (Array Int us_rep1))
(declare-const o57 us_rep1)
(declare-const o58 us_split_fields)
(declare-const o59 us_rep)
(declare-const i1 Int)
(declare-const temp___1091 (Array Int us_rep1))
(declare-const o60 us_rep1)
(declare-const o61 us_split_fields)
(declare-const temp___1090 (Array Int us_rep1))
(declare-const i2 Int)
(declare-const o62 Int)
(declare-const temp___1099 (Array Int us_rep1))
(declare-const o63 us_rep1)
(declare-const o64 us_split_fields)
(declare-const o65 Int)
(declare-const temp___1100 (Array Int us_rep1))
(declare-const o66 us_rep1)
(declare-const o67 us_split_fields)
(declare-const o68 us_rep)
(declare-const o69 Int)
(declare-const temp___1101 (Array Int us_rep1))
(declare-const o70 us_rep1)
(declare-const o71 us_split_fields)
(declare-const o72 us_rep)
(declare-const o73 Bool)
(declare-const o74 Bool)
(declare-const o75 Int)
(declare-const temp___1096 (Array Int us_rep1))
(declare-const o76 Int)
(declare-const temp___1097 (Array Int us_rep1))
(declare-const o77 us_rep1)
(declare-const o78 us_split_fields)
(declare-const o79 us_rep)
(declare-const o80 Int)
(declare-const temp___1098 (Array Int us_rep1))
(declare-const o81 us_rep1)
(declare-const o82 us_split_fields)
(declare-const o83 us_rep)
(declare-const o84 Bool)
(declare-const i3 Int)
(declare-const o85 Int)
(declare-const temp___1116 (Array Int us_rep1))
(declare-const o86 us_rep1)
(declare-const o87 us_split_fields)
(declare-const o88 Int)
(declare-const temp___1117 (Array Int us_rep1))
(declare-const o89 us_rep1)
(declare-const o90 us_split_fields)
(declare-const o91 us_rep)
(declare-const o92 Int)
(declare-const temp___1118 (Array Int us_rep1))
(declare-const o93 us_rep1)
(declare-const o94 us_split_fields)
(declare-const o95 us_rep)
(declare-const o96 Bool)
(declare-const o97 Bool)
(declare-const o98 Int)
(declare-const temp___1114 (Array Int us_rep1))
(declare-const o99 Int)
(declare-const temp___1115 (Array Int us_rep1))
(declare-const o100 us_rep1)
(declare-const o101 us_split_fields)
(declare-const o102 us_rep)
(declare-const o103 Int)
(declare-const i4 Int)
(declare-const o104 Int)
(declare-const temp___1133 (Array Int us_rep1))
(declare-const o105 us_rep1)
(declare-const o106 us_split_fields)
(declare-const o107 Int)
(declare-const temp___1134 (Array Int us_rep1))
(declare-const o108 us_rep1)
(declare-const o109 us_split_fields)
(declare-const o110 us_rep)
(declare-const o111 Int)
(declare-const temp___1135 (Array Int us_rep1))
(declare-const o112 us_rep1)
(declare-const o113 us_split_fields)
(declare-const o114 us_rep)
(declare-const o115 Bool)
(declare-const o116 Bool)
(declare-const o117 Int)
(declare-const temp___1129 (Array Int us_rep1))
(declare-const o118 us_rep1)
(declare-const o119 us_split_fields)
(declare-const o120 us_rep)
(declare-const o121 Int)
(declare-const temp___1130 (Array Int us_rep1))
(declare-const o122 us_rep1)
(declare-const o123 us_split_fields)
(declare-const o124 us_rep)
(declare-const o125 Int)
(declare-const o126 Int)
(declare-const o127 Int)
(declare-const o128 Int)
(declare-const temp___1131 (Array Int us_rep1))
(declare-const o129 us_rep1)
(declare-const o130 us_split_fields)
(declare-const o131 us_rep)
(declare-const o132 Int)
(declare-const temp___1132 (Array Int us_rep1))
(declare-const o133 us_rep1)
(declare-const o134 us_split_fields)
(declare-const o135 us_rep)
(declare-const o136 Int)
(declare-const o137 Int)
(declare-const o138 Int)
(declare-const o139 Int)
(declare-const o140 Int)
(declare-const i5 Int)
(declare-const o141 Int)
(declare-const temp___1154 (Array Int us_rep1))
(declare-const o142 us_rep1)
(declare-const o143 us_split_fields)
(declare-const o144 Int)
(declare-const temp___1155 (Array Int us_rep1))
(declare-const o145 us_rep1)
(declare-const o146 us_split_fields)
(declare-const o147 us_rep)
(declare-const o148 Int)
(declare-const temp___1156 (Array Int us_rep1))
(declare-const o149 us_rep1)
(declare-const o150 us_split_fields)
(declare-const o151 us_rep)
(declare-const o152 Bool)
(declare-const o153 Bool)
(declare-const o154 Int)
(declare-const temp___1150 (Array Int us_rep1))
(declare-const o155 us_rep1)
(declare-const o156 us_split_fields)
(declare-const o157 us_rep)
(declare-const o158 Int)
(declare-const temp___1151 (Array Int us_rep1))
(declare-const o159 us_rep1)
(declare-const o160 us_split_fields)
(declare-const o161 us_rep)
(declare-const o162 Int)
(declare-const o163 Int)
(declare-const o164 Int)
(declare-const o165 Int)
(declare-const temp___1152 (Array Int us_rep1))
(declare-const o166 us_rep1)
(declare-const o167 us_split_fields)
(declare-const o168 us_rep)
(declare-const o169 Int)
(declare-const temp___1153 (Array Int us_rep1))
(declare-const o170 us_rep1)
(declare-const o171 us_split_fields)
(declare-const o172 us_rep)
(declare-const o173 Int)
(declare-const o174 Int)
(declare-const o175 Int)
(declare-const o176 Int)
(declare-const o177 Int)
(declare-const o178 Int)
(declare-const us3 Bool)
(declare-const us4 Bool)
(declare-const o179 Int)
(declare-const j5 Int)
(declare-const temp___1174 (Array Int us_rep1))
(declare-const o180 us_rep1)
(declare-const o181 us_split_fields)
(declare-const j6 Int)
(declare-const d1 Int)
(declare-const o182 Int)
(declare-const o183 Bool)
(declare-const o184 Int)
(declare-const o185 Bool)
(declare-const o186 Bool)
(declare-const o187 Int)
(declare-const o188 Bool)
(declare-const o189 Bool)
(declare-const o190 Bool)
(declare-const o191 Bool)
(declare-const temp___1185 (Array Int us_rep1))
(declare-const o192 us_rep1)
(declare-const o193 us_split_fields)
(declare-const o194 Bool)
(declare-const o195 Bool)
(declare-const o196 Int)
(declare-const o197 Int)
(declare-const o198 Int)
(declare-const o199 Int)
(declare-const o200 Int)
(declare-const o201 Int)
(declare-const o202 Int)
(declare-const o203 Bool)
(declare-const o204 Int)
(declare-const o205 Int)
(declare-const o206 Int)
(declare-const o207 Int)
(declare-const o208 Int)
(declare-const o209 Int)
(declare-const o210 Int)
(declare-const o211 Int)
(declare-const o212 Int)
(declare-const o213 Int)
(declare-const o214 Int)
(declare-const o215 Int)
(declare-const o216 Int)
(declare-const o217 Int)
(declare-const o218 us_rep2)
(declare-const o219 us_rep2)
(declare-const j7 Int)
(declare-const temp___1198 (Array Int us_rep1))
(declare-const o220 us_rep1)
(declare-const o221 us_split_fields)
(declare-const j8 Int)
(declare-const temp___1203 (Array Int us_rep1))
(declare-const o222 us_rep1)
(declare-const o223 us_split_fields)
(declare-const j9 Int)
(declare-const o224 Int)
(declare-const o225 Int)
(declare-const o226 Int)
(declare-const o227 Int)
(declare-const o228 Int)
(declare-const o229 Int)
(declare-const o230 Int)
(declare-const o231 Int)
(declare-const o232 Int)
(declare-const o233 Int)
(declare-const o234 Int)
(declare-const o235 Bool)
(declare-const o236 Int)
(declare-const o237 Int)
(declare-const o238 Bool)
(declare-const o239 Int)
(declare-const o240 Bool)
(declare-const o241 Int)
(declare-const j10 Int)
(declare-const o242 Int)
(declare-const o243 Int)
(declare-const o244 Int)
(declare-const o245 Int)
(declare-const o246 Int)
(declare-const o247 Int)
(declare-const o248 Int)
(declare-const o249 Int)
(declare-const o250 Int)
(declare-const o251 Int)
(declare-const o252 Int)
(declare-const o253 Bool)
(declare-const o254 Int)
(declare-const o255 Int)
(declare-const o256 Int)
(declare-const o257 Bool)
(declare-const o258 Int)
(declare-const o259 Int)
(declare-const o260 Int)
(declare-const o261 Int)
(declare-const o262 Int)
(declare-const o263 Int)
(declare-const o264 Bool)
(declare-const o265 Int)
(declare-const o266 Int)
(declare-const o267 Int)
(declare-const o268 Int)
(declare-const o269 Int)
(declare-const o270 Int)
(declare-const o271 Int)
(declare-const o272 Int)
(declare-const o273 Int)
(declare-const o274 Int)
(declare-const o275 Int)
(declare-const o276 Int)
(declare-const o277 Int)
(declare-const o278 Int)
(declare-const o279 Int)
(declare-const o280 Int)
(declare-const o281 Int)
(declare-const o282 Int)
(declare-const o283 Int)
(declare-const o284 Int)
(declare-const o285 Int)
(declare-const o286 Int)
(declare-const o287 Int)
(declare-const o288 Int)
(declare-const o289 Int)
(declare-const o290 Int)
(declare-const o291 Int)
(declare-const o292 Int)
(declare-const o293 Int)
(declare-const o294 Int)
(declare-const o295 Int)
(declare-const o296 Int)
(declare-const o297 Int)
(declare-const o298 Int)
(declare-const o299 Int)
(declare-const o300 Int)
(declare-const o301 Int)
(declare-const o302 Int)
(declare-const o303 Int)
(declare-const o304 Int)
(declare-const o305 Int)
(declare-const o306 Int)
(declare-const o307 Int)
(declare-const o308 Int)
(declare-const o309 Int)
(declare-const t__split_fields4 us_split_fields6)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 int__ref)
(declare-const j11 Int)
(declare-const result3 int__ref)
(declare-const d2 Int)
(declare-const result4 us_split_fields__ref3)
(declare-const t_old__split_fields4 us_split_fields6)
(declare-const result5 us_split_fields__ref2)
(declare-const f_old__split_fields2 us_split_fields4)
(declare-const result6 us_split_fields__ref2)
(declare-const f_1__split_fields2 us_split_fields4)
(declare-const result7 us_split_fields__ref2)
(declare-const f_2__split_fields2 us_split_fields4)
(declare-const result8 us_split_fields__ref2)
(declare-const f_3__split_fields2 us_split_fields4)
(declare-const result9 us_split_fields__ref2)
(declare-const f_4__split_fields1 us_split_fields4)
(declare-const result10 us_split_fields__ref2)
(declare-const f_5__split_fields1 us_split_fields4)
(declare-const result11 int__ref)
(declare-const y1 Int)
(declare-const result12 int__ref)
(declare-const j12 Int)
(declare-const result13 int__ref)
(declare-const d3 Int)
(declare-const binary_trees__extract__v Int)
(declare-const binary_trees__extract__f__fields us_split_fields4)
(declare-const result14 us_split_fields__ref3)
(declare-const t__split_fields5 us_split_fields6)
(declare-const result15 int__ref)
(declare-const y2 Int)
(declare-const result16 us_split_fields__ref2)
(declare-const f_1__split_fields3 us_split_fields4)
(declare-const binary_trees__extract__v1 Int)
(declare-const binary_trees__extract__f__fields1 us_split_fields4)
(declare-const result17 us_split_fields__ref3)
(declare-const t__split_fields6 us_split_fields6)
(declare-const result18 int__ref)
(declare-const x1 Int)
(declare-const result19 us_split_fields__ref2)
(declare-const f_2__split_fields3 us_split_fields4)
(declare-const xr1 Int)
(declare-const binary_trees__extract__f__fields2 us_split_fields4)
(declare-const result20 us_split_fields__ref3)
(declare-const t__split_fields7 us_split_fields6)
(declare-const result21 us_split_fields__ref2)
(declare-const f_3__split_fields3 us_split_fields4)
(declare-const binary_trees__plug__f__fields us_split_fields4)
(declare-const result22 us_split_fields__ref3)
(declare-const t__split_fields8 us_split_fields6)
(declare-const result23 us_split_fields__ref2)
(declare-const f_4__split_fields2 us_split_fields4)
(declare-const binary_trees__plug__f__fields1 us_split_fields4)
(declare-const result24 us_split_fields__ref3)
(declare-const t__split_fields9 us_split_fields6)
(declare-const result25 us_split_fields__ref2)
(declare-const f_5__split_fields2 us_split_fields4)
(declare-const result26 us_split_fields__ref3)
(declare-const t__split_fields10 us_split_fields6)
(declare-const binary_trees__plug__f__fields2 us_split_fields4)
(declare-const result27 us_split_fields__ref3)
(declare-const t__split_fields11 us_split_fields6)
(declare-const result28 Bool)
(declare-const result29 Bool)
(declare-const result30 Bool)
(declare-const result31 Bool)
(declare-const result32 Bool)
(declare-const result33 Bool)
(declare-const t__split_fields12 us_split_fields__ref3)
(declare-const x2 int__ref)
(declare-const y3 int__ref)
(declare-const xr2 int__ref)
(declare-const j13 int__ref)
(declare-const d4 int__ref)
(declare-const t_old__split_fields5 us_split_fields__ref3)
(declare-const f_old__split_fields3 us_split_fields__ref2)
(declare-const f_1__split_fields4 us_split_fields__ref2)
(declare-const f_2__split_fields4 us_split_fields__ref2)
(declare-const f_3__split_fields4 us_split_fields__ref2)
(declare-const f_4__split_fields3 us_split_fields__ref2)
(declare-const f_5__split_fields3 us_split_fields__ref2)
(declare-const t__split_fields13 us_split_fields6)
(declare-const x3 Int)
(declare-const y4 Int)
(declare-const xr3 Int)
(declare-const j14 Int)
(declare-const d5 Int)
(declare-const t_old__split_fields6 us_split_fields6)
(declare-const f_old__split_fields4 us_split_fields4)
(declare-const f_1__split_fields5 us_split_fields4)
(declare-const f_2__split_fields5 us_split_fields4)
(declare-const f_3__split_fields5 us_split_fields4)
(declare-const f_4__split_fields4 us_split_fields4)
(declare-const f_5__split_fields4 us_split_fields4)
(declare-const result34 Bool)
(declare-const result35 Bool)
(declare-const result36 Bool)
(declare-const result37 Bool)
(declare-const result38 Bool)
(declare-const result39 Bool)
(declare-const result40 Bool)
(declare-const result41 Bool)
(declare-const result42 Bool)
(declare-const result43 Bool)
(declare-const result44 Bool)
(declare-const result45 Bool)
(declare-const result46 Bool)
(declare-const result47 Bool)
(declare-const result48 Bool)
(declare-const result49 Bool)
(declare-const result50 Bool)
(declare-const result51 Bool)
(declare-const result52 Bool)
(declare-const result53 Bool)
(declare-const result54 Bool)
(declare-const result55 Bool)
(declare-const result56 Bool)
(declare-const result57 Bool)
(declare-const result58 Bool)
(declare-const result59 Bool)
(declare-const result60 Bool)
(declare-const result61 Bool)
(declare-const result62 Bool)
(declare-const result63 Bool)
(declare-const result64 Bool)
(declare-const result65 Bool)
(declare-const result66 Bool)
(declare-const result67 Bool)
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))) true))
(assert (in_range3 i))
(assert (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))))
(assert (and (< 0 (size1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i))) true) (not (= (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0) 0)))))
(assert (and (and (=> (<= 1 100) (in_range3 x)) (and (=> (<= 1 100) (in_range3 y)) (and (=> (<= 0 100) (in_range4 xr)) (and (and (and (and (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) (and (= o3 (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))) (and (in_range3 o3) (= o3 (to_rep1 t__split_fields))))) (= search_trees__right_rotate__is_root__assume (ite (= i o3) true false))) (= search_trees__right_rotate__is_root__assume is_root)) (and (and (= result2 (mk_int__ref j)) (= j11 1)) (and (in_range3 j11) (and (and (= result3 (mk_int__ref d)) (= d2 0)) (and (in_range5 d2) (and (and (= result4 (mk___split_fields__ref3 (mk___split_fields3 t_old__split_fields (mk___rep2 (mk___split_fields2 t_old__split_fields1 t_old__split_fields2)) t_old__split_fields3))) (= t_old__split_fields4 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) (and (= (tree_structure (rec__search_trees__search_tree__struct t_old__split_fields4)) true) (and (and (= result5 (mk___split_fields__ref2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) (= f_old__split_fields2 (mk___split_fields2 t__split_fields1 t__split_fields2))) (and (= (tree_structure (mk___rep2 f_old__split_fields2)) true) (and (and (= result6 (mk___split_fields__ref2 (mk___split_fields2 f_1__split_fields f_1__split_fields1))) (= f_1__split_fields2 (mk___split_fields2 t__split_fields1 t__split_fields2))) (and (= (tree_structure (mk___rep2 f_1__split_fields2)) true) (and (and (= result7 (mk___split_fields__ref2 (mk___split_fields2 f_2__split_fields f_2__split_fields1))) (= f_2__split_fields2 (mk___split_fields2 t__split_fields1 t__split_fields2))) (and (= (tree_structure (mk___rep2 f_2__split_fields2)) true) (and (and (= result8 (mk___split_fields__ref2 (mk___split_fields2 f_3__split_fields f_3__split_fields1))) (= f_3__split_fields2 (mk___split_fields2 t__split_fields1 t__split_fields2))) (and (= (tree_structure (mk___rep2 f_3__split_fields2)) true) (and (and (= result9 f_4__split_fields) (= (let ((subject f_4__split_fields)) f_4__split_fields1) (mk___split_fields2 t__split_fields1 t__split_fields2))) (and (= (tree_structure (mk___rep2 (let ((subject f_4__split_fields)) f_4__split_fields1))) true) (and (and (= result10 f_5__split_fields) (= (let ((subject f_5__split_fields)) f_5__split_fields1) (mk___split_fields2 t__split_fields1 t__split_fields2))) (and (= (tree_structure (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields1))) true) (and (ite (= is_root true) (and (and (and (= o4 (to_rep1 t__split_fields)) (in_range3 (to_rep1 t__split_fields))) (and (= result11 (mk_int__ref y)) (= y1 o4))) (and (and (= d3 d2) (and (= j12 j11) (= t__split_fields5 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))) (and (= d3 d2) (and (= j12 j11) (= t__split_fields5 t__split_fields4))))) (and (and (and (and (and (= o5 (parent (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i)) (and (in_range4 o5) (and (=> (= (valid_root (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i) true) (= o5 0)) (=> (= (size (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))) 0) (= o5 0))))) (and (= o6 o5) (in_range3 o5))) (and (= result12 (mk_int__ref j11)) (= j12 o6))) (and (and (and (= o7 (position (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i)) (in_range5 o7)) (and (= result13 (mk_int__ref d2)) (= d3 o7))) (and (and (and (= o8 (to_rep1 t__split_fields)) (in_range3 (to_rep1 t__split_fields))) (and (and (= (size (mk___rep2 binary_trees__extract__f__fields)) (size (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)))) (and (= (valid_root (mk___rep2 binary_trees__extract__f__fields) o8) true) (and (= binary_trees__extract__v (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j12 d3)) (and (= (peek (mk___rep2 binary_trees__extract__f__fields) j12 d3) 0) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (not (= j15 binary_trees__extract__v)) (= (parent (mk___rep2 binary_trees__extract__f__fields) j15) (parent (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= j15 binary_trees__extract__v)) (not (= (parent (mk___rep2 binary_trees__extract__f__fields) j15) 0))) (= (position (mk___rep2 binary_trees__extract__f__fields) j15) (position (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (forall ((e Int)) (=> (and (<= 0 e) (<= e 1)) (=> (or (not (= j15 j12)) (not (= e d3))) (= (peek (mk___rep2 binary_trees__extract__f__fields) j15 e) (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j15 e))))))) (and (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t) true) (not (= j12 t))) (not (= binary_trees__extract__v t))) (= (valid_root (mk___rep2 binary_trees__extract__f__fields) t) true)))) (and (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t) true) (not (= o8 t))) (not (= binary_trees__extract__v t))) (= (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields) t) (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)) true)))) (and (=> (not (= binary_trees__extract__v 0)) (= (valid_root (mk___rep2 binary_trees__extract__f__fields) binary_trees__extract__v) true)) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) i6))) true) (ite (and (not (= binary_trees__extract__v 0)) (= (ole1 (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) binary_trees__extract__v))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) binary_trees__extract__v) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) o8) i6))) true))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) o8) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (not (= binary_trees__extract__v 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) binary_trees__extract__v) i6))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) o8) i6))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) o8) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) i6)))) true)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (not (= binary_trees__extract__v 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) binary_trees__extract__v) i6))) true)) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) binary_trees__extract__v))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields) binary_trees__extract__v) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) o8) i6)))) true)))))))))))))))))) (and (= (tree_structure (mk___rep2 binary_trees__extract__f__fields)) true) (in_range4 binary_trees__extract__v)))) (and (and (= result14 (mk___split_fields__ref3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) (= t__split_fields5 (mk___split_fields3 t__split_fields (mk___rep2 binary_trees__extract__f__fields) t__split_fields3))) (and (and (= o9 binary_trees__extract__v) (in_range3 binary_trees__extract__v)) (and (= result15 (mk_int__ref y)) (= y2 o9))))))) (= y1 y2))) (and (=> (not (= is_root true)) (and (and (= o10 (to_rep1 (rec__search_trees__search_tree__root t__split_fields5))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields5)))) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields5) o10 (rec__search_trees__search_tree__values t__split_fields5)) true) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields5) y1 (rec__search_trees__search_tree__values t__split_fields5)) true) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields5) o10) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields5) o10) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) o10) y1)))) true)) (ite (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) o10) y1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields5) o10) i6)))) 1)) 0) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields5) y1) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields5) j15)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields5) i6)))))) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields5) y1) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields5) i6)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields5) j15)))))))))))))) (and (and (= result16 (mk___split_fields__ref2 f_1__split_fields2)) (= f_1__split_fields3 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5)))) (and (and (and (and (= (size (mk___rep2 binary_trees__extract__f__fields1)) (size (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))))) (and (= (valid_root (mk___rep2 binary_trees__extract__f__fields1) y1) true) (and (= binary_trees__extract__v1 (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1 0)) (and (= (peek (mk___rep2 binary_trees__extract__f__fields1) y1 0) 0) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (not (= j15 binary_trees__extract__v1)) (= (parent (mk___rep2 binary_trees__extract__f__fields1) j15) (parent (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= j15 binary_trees__extract__v1)) (not (= (parent (mk___rep2 binary_trees__extract__f__fields1) j15) 0))) (= (position (mk___rep2 binary_trees__extract__f__fields1) j15) (position (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (forall ((e Int)) (=> (and (<= 0 e) (<= e 1)) (=> (or (not (= j15 y1)) (not (= e 0))) (= (peek (mk___rep2 binary_trees__extract__f__fields1) j15 e) (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) j15 e))))))) (and (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) t) true) (not (= y1 t))) (not (= binary_trees__extract__v1 t))) (= (valid_root (mk___rep2 binary_trees__extract__f__fields1) t) true)))) (and (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) t) true) (not (= y1 t))) (not (= binary_trees__extract__v1 t))) (= (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields1) t) (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) t)) true)))) (and (=> (not (= binary_trees__extract__v1 0)) (= (valid_root (mk___rep2 binary_trees__extract__f__fields1) binary_trees__extract__v1) true)) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) i6))) true) (ite (and (not (= binary_trees__extract__v1 0)) (= (ole1 (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) binary_trees__extract__v1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) binary_trees__extract__v1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i6))) true))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (not (= binary_trees__extract__v1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) binary_trees__extract__v1) i6))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i6))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) i6)))) true)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (not (= binary_trees__extract__v1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) binary_trees__extract__v1) i6))) true)) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) binary_trees__extract__v1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields1) binary_trees__extract__v1) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields5))) y1) i6)))) true)))))))))))))))))) (and (= (tree_structure (mk___rep2 binary_trees__extract__f__fields1)) true) (in_range4 binary_trees__extract__v1))) (and (and (= result17 (mk___split_fields__ref3 t__split_fields5)) (= t__split_fields6 (mk___split_fields3 (rec__search_trees__search_tree__root t__split_fields5) (mk___rep2 binary_trees__extract__f__fields1) (rec__search_trees__search_tree__values t__split_fields5)))) (and (and (= o11 binary_trees__extract__v1) (in_range3 binary_trees__extract__v1)) (and (= result18 (mk_int__ref x)) (= x1 o11))))) (and (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6) y1 (rec__search_trees__search_tree__values t__split_fields6)) true) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6) x1 (rec__search_trees__search_tree__values t__split_fields6)) true) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields6) y1) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields6) y1) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) y1) x1)))) true)) (ite (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) y1) x1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields6) y1) i6)))) 1)) 0) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields6) x1) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields6) j15)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields6) i6)))))) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields6) x1) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields6) i6)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields6) j15)))))))))))) (and (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) y1) x1))) 1) 0) (and (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields6) x1)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields6) y1))) (and (=> (not (= is_root true)) (and (and (= o16 (to_rep1 (rec__search_trees__search_tree__root t__split_fields6))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields6)))) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6) o16 (rec__search_trees__search_tree__values t__split_fields6)) true))) (and (and (= result19 (mk___split_fields__ref2 f_2__split_fields2)) (= f_2__split_fields3 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6)))) (and (and (and (and (= (size (mk___rep2 binary_trees__extract__f__fields2)) (size (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))))) (and (= (valid_root (mk___rep2 binary_trees__extract__f__fields2) x1) true) (and (= xr1 (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1 1)) (and (= (peek (mk___rep2 binary_trees__extract__f__fields2) x1 1) 0) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (not (= j15 xr1)) (= (parent (mk___rep2 binary_trees__extract__f__fields2) j15) (parent (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= j15 xr1)) (not (= (parent (mk___rep2 binary_trees__extract__f__fields2) j15) 0))) (= (position (mk___rep2 binary_trees__extract__f__fields2) j15) (position (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (forall ((e Int)) (=> (and (<= 0 e) (<= e 1)) (=> (or (not (= j15 x1)) (not (= e 1))) (= (peek (mk___rep2 binary_trees__extract__f__fields2) j15 e) (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) j15 e))))))) (and (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) t) true) (not (= x1 t))) (not (= xr1 t))) (= (valid_root (mk___rep2 binary_trees__extract__f__fields2) t) true)))) (and (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) t) true) (not (= x1 t))) (not (= xr1 t))) (= (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields2) t) (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) t)) true)))) (and (=> (not (= xr1 0)) (= (valid_root (mk___rep2 binary_trees__extract__f__fields2) xr1) true)) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) i6))) true) (ite (and (not (= xr1 0)) (= (ole1 (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) xr1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i6))) true))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (not (= xr1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i6))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i6))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) i6)))) true)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (not (= xr1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i6))) true)) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) xr1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields6))) x1) i6)))) true)))))))))))))))))) (and (= (tree_structure (mk___rep2 binary_trees__extract__f__fields2)) true) (in_range4 xr1))) (and (= result20 (mk___split_fields__ref3 t__split_fields6)) (= t__split_fields7 (mk___split_fields3 (rec__search_trees__search_tree__root t__split_fields6) (mk___rep2 binary_trees__extract__f__fields2) (rec__search_trees__search_tree__values t__split_fields6))))) (and (ite (not (= xr1 0)) (and (and (and (= o17 xr1) (in_range3 xr1)) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) x1 (rec__search_trees__search_tree__values t__split_fields7)) true) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) o17 (rec__search_trees__search_tree__values t__split_fields7)) true) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields7) x1) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields7) x1) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) x1) o17)))) true)) (ite (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) x1) o17))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields7) x1) i6)))) 1)) 0) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields7) o17) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields7) j15)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields7) i6)))))) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields7) o17) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields7) i6)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields7) j15))))))))))))) (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) x1) xr1))) 1) 1)) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) x1 (rec__search_trees__search_tree__values t__split_fields7)) true)) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) y1 (rec__search_trees__search_tree__values t__split_fields7)) true) (and (=> (not (= is_root true)) (and (and (= o23 (to_rep1 (rec__search_trees__search_tree__root t__split_fields7))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields7)))) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) o23 (rec__search_trees__search_tree__values t__split_fields7)) true))) (and (and (= result21 (mk___split_fields__ref2 f_3__split_fields2)) (= f_3__split_fields3 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7)))) (and (and (and (and (= (size (mk___rep2 binary_trees__plug__f__fields)) (size (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))))) (and (= xr1 (peek (mk___rep2 binary_trees__plug__f__fields) y1 0)) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) j15) true) (not (= j15 xr1))) (= (valid_root (mk___rep2 binary_trees__plug__f__fields) j15) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (valid_root (mk___rep2 binary_trees__plug__f__fields) j15) true) (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) j15) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (not (= j15 xr1)) (= (parent (mk___rep2 binary_trees__plug__f__fields) j15) (parent (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= j15 xr1)) (not (= (parent (mk___rep2 binary_trees__plug__f__fields) j15) 0))) (= (position (mk___rep2 binary_trees__plug__f__fields) j15) (position (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (forall ((e Int)) (=> (and (<= 0 e) (<= e 1)) (=> (or (not (= j15 y1)) (not (= e 0))) (= (peek (mk___rep2 binary_trees__plug__f__fields) j15 e) (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) j15 e))))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) y1) j15))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) j15))) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= xr1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) xr1) j15))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) j15))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) i6))) true) (ite (and (not (= xr1 0)) (= (ole1 (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) xr1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) xr1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) y1) i6))) true))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) y1) j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) j15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) y1) j15)))) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= xr1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) xr1) j15))) true)) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) (peek (mk___rep2 binary_trees__plug__f__fields) y1 0)))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) xr1) j15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields) y1) j15)))) true)))) (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) t) true) (not (= y1 t))) (not (= xr1 t))) (= (oeq1 (model__ (mk___rep2 binary_trees__plug__f__fields) t) (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields7))) t)) true)))))))))))))))) (= (tree_structure (mk___rep2 binary_trees__plug__f__fields)) true)) (and (= result22 (mk___split_fields__ref3 t__split_fields7)) (= t__split_fields8 (mk___split_fields3 (rec__search_trees__search_tree__root t__split_fields7) (mk___rep2 binary_trees__plug__f__fields) (rec__search_trees__search_tree__values t__split_fields7))))) (and (ite (not (= xr1 0)) (and (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields8) y1) xr1))) 1) 0) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_3__split_fields3) x1) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields8) j15)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields8) y1)))))) (and (= (ordered_leafs (mk___rep2 f_3__split_fields3) y1 (rec__search_trees__search_tree__values t__split_fields8)) true) (and (and (= o29 xr1) (in_range3 xr1)) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields8) y1 (rec__search_trees__search_tree__values t__split_fields8)) true))))) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields8) y1 (rec__search_trees__search_tree__values t__split_fields8)) true)) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields8) x1 (rec__search_trees__search_tree__values t__split_fields8)) true) (and (=> (not (= is_root true)) (and (and (= o30 (to_rep1 (rec__search_trees__search_tree__root t__split_fields8))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields8)))) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields8) o30 (rec__search_trees__search_tree__values t__split_fields8)) true))) (and (and (= result23 (let ((subject f_4__split_fields)) (mk___split_fields__ref2 f_4__split_fields1))) (= (let ((subject f_4__split_fields)) f_4__split_fields2) (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8)))) (and (and (and (and (= (size (mk___rep2 binary_trees__plug__f__fields1)) (size (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))))) (and (= y1 (peek (mk___rep2 binary_trees__plug__f__fields1) x1 1)) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) j15) true) (not (= j15 y1))) (= (valid_root (mk___rep2 binary_trees__plug__f__fields1) j15) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (valid_root (mk___rep2 binary_trees__plug__f__fields1) j15) true) (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) j15) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (not (= j15 y1)) (= (parent (mk___rep2 binary_trees__plug__f__fields1) j15) (parent (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= j15 y1)) (not (= (parent (mk___rep2 binary_trees__plug__f__fields1) j15) 0))) (= (position (mk___rep2 binary_trees__plug__f__fields1) j15) (position (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (forall ((e Int)) (=> (and (<= 0 e) (<= e 1)) (=> (or (not (= j15 x1)) (not (= e 1))) (= (peek (mk___rep2 binary_trees__plug__f__fields1) j15 e) (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) j15 e))))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) x1) j15))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) j15))) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= y1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) y1) j15))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) j15))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) i6))) true) (ite (and (not (= y1 0)) (= (ole1 (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) y1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) y1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) x1) i6))) true))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) x1) j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) j15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) x1) j15)))) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= y1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) y1) j15))) true)) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) (peek (mk___rep2 binary_trees__plug__f__fields1) x1 1)))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) y1) j15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields1) x1) j15)))) true)))) (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) t) true) (not (= x1 t))) (not (= y1 t))) (= (oeq1 (model__ (mk___rep2 binary_trees__plug__f__fields1) t) (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields8))) t)) true)))))))))))))))) (= (tree_structure (mk___rep2 binary_trees__plug__f__fields1)) true)) (and (= result24 (mk___split_fields__ref3 t__split_fields8)) (= t__split_fields9 (mk___split_fields3 (rec__search_trees__search_tree__root t__split_fields8) (mk___rep2 binary_trees__plug__f__fields1) (rec__search_trees__search_tree__values t__split_fields8))))) (and (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields9) x1) y1))) 1) 1) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) y1) j15))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) y1) y1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) y1) j15)))) true)) (not (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) y1) j15))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_2__split_fields3) y1) y1)))) 1)) 0))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= xr1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_3__split_fields3) xr1) j15))) true)) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields9) x1)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields9) j15)))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_3__split_fields3) y1) j15))) true) (<= (to_rep (select (rec__search_trees__search_tree__values t__split_fields9) y1)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields9) j15)))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_4__split_fields)) f_4__split_fields2)) y1) j15))) true) (< (to_rep (select (rec__search_trees__search_tree__values t__split_fields9) x1)) (to_rep (select (rec__search_trees__search_tree__values t__split_fields9) j15)))))) (and (= (ordered_leafs (mk___rep2 (let ((subject f_4__split_fields)) f_4__split_fields2)) x1 (rec__search_trees__search_tree__values t__split_fields9)) true) (and (= (ordered_leafs (mk___rep2 (let ((subject f_4__split_fields)) f_4__split_fields2)) y1 (rec__search_trees__search_tree__values t__split_fields9)) true) (and (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields9) x1 (rec__search_trees__search_tree__values t__split_fields9)) true) (and (=> (not (= is_root true)) (and (and (= o36 (to_rep1 (rec__search_trees__search_tree__root t__split_fields9))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields9)))) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields9) o36 (rec__search_trees__search_tree__values t__split_fields9)) true))) (and (and (= result25 (let ((subject f_5__split_fields)) (mk___split_fields__ref2 f_5__split_fields1))) (= (let ((subject f_5__split_fields)) f_5__split_fields2) (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9)))) (and (ite (= is_root true) (and (and (and (= (to_rep1 o37) x1) (= o38 (mk___split_fields3 o37 (rec__search_trees__search_tree__struct t__split_fields9) (rec__search_trees__search_tree__values t__split_fields9)))) (= temp___1172 (mk___rep3 o38))) (and (= result26 (mk___split_fields__ref3 t__split_fields9)) (= t__split_fields10 (us_split_fields7 temp___1172)))) (and (and (and (and (and (= o39 (to_rep1 (rec__search_trees__search_tree__root t__split_fields9))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields9)))) (and (and (= (size (mk___rep2 binary_trees__plug__f__fields2)) (size (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))))) (and (= x1 (peek (mk___rep2 binary_trees__plug__f__fields2) j12 d3)) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) j15) true) (not (= j15 x1))) (= (valid_root (mk___rep2 binary_trees__plug__f__fields2) j15) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (valid_root (mk___rep2 binary_trees__plug__f__fields2) j15) true) (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) j15) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (not (= j15 x1)) (= (parent (mk___rep2 binary_trees__plug__f__fields2) j15) (parent (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= j15 x1)) (not (= (parent (mk___rep2 binary_trees__plug__f__fields2) j15) 0))) (= (position (mk___rep2 binary_trees__plug__f__fields2) j15) (position (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) j15))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (forall ((e Int)) (=> (and (<= 0 e) (<= e 1)) (=> (or (not (= j15 j12)) (not (= e d3))) (= (peek (mk___rep2 binary_trees__plug__f__fields2) j15 e) (peek (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) j15 e))))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) o39) j15))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) j15))) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= x1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) x1) j15))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) j15))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) i6))) true) (ite (and (not (= x1 0)) (= (ole1 (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) x1))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) x1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) o39) i6))) true))))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) o39) j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) j15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) o39) j15)))) true)))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (not (= x1 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) x1) j15))) true)) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) (peek (mk___rep2 binary_trees__plug__f__fields2) j12 d3)))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) x1) j15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 binary_trees__plug__f__fields2) o39) j15)))) true)))) (forall ((t Int)) (=> (and (<= 1 t) (<= t 100)) (=> (and (and (= (valid_root (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) t) true) (not (= o39 t))) (not (= x1 t))) (= (oeq1 (model__ (mk___rep2 binary_trees__plug__f__fields2) t) (model__ (mk___rep2 (us_split_fields5 (rec__search_trees__search_tree__struct t__split_fields9))) t)) true)))))))))))))))) (= (tree_structure (mk___rep2 binary_trees__plug__f__fields2)) true))) (and (= result27 (mk___split_fields__ref3 t__split_fields9)) (= t__split_fields11 (mk___split_fields3 (rec__search_trees__search_tree__root t__split_fields9) (mk___rep2 binary_trees__plug__f__fields2) (rec__search_trees__search_tree__values t__split_fields9))))) (and (= (oeq1 (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) (model__ (mk___rep2 f_1__split_fields3) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)))) true) (and (and (and (and (and (and (and (= o56 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)))) (and (= temp___1089 (model__ (mk___rep2 f_old__split_fields2) o56)) (and (dynamic_invariant6 temp___1089 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 o56))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1089 o56)))) 0) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (not (= i6 o56)) (ite (and (not (= (parent (mk___rep2 f_old__split_fields2) i6) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 (parent (mk___rep2 f_old__split_fields2) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 i6))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 i6))) true)))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 i6))) true) (not (= i6 o56))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1089 (parent (mk___rep2 f_old__split_fields2) i6)))) (position (mk___rep2 f_old__split_fields2) i6) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1089 i6)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1089 i6)))) 0)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 i6))) true) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1089 j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1089 i6))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1089 j15)))) true)) (= j15 i6)))))))))))))) (= o57 (select temp___1089 y1))) (= o58 (us_split_fields1 o57))) (= o59 (rec__tree_model__path_type__a o58))) (and (and (and (and (and (and (= o52 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)))) (and (= temp___1088 (model__ (rec__search_trees__search_tree__struct t__split_fields11) o52)) (and (dynamic_invariant6 temp___1088 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 o52))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1088 o52)))) 0) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (not (= i6 o52)) (ite (and (not (= (parent (rec__search_trees__search_tree__struct t__split_fields11) i6) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 (parent (rec__search_trees__search_tree__struct t__split_fields11) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 i6))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 i6))) true)))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 i6))) true) (not (= i6 o52))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1088 (parent (rec__search_trees__search_tree__struct t__split_fields11) i6)))) (position (rec__search_trees__search_tree__struct t__split_fields11) i6) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1088 i6)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1088 i6)))) 0)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 i6))) true) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1088 j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1088 i6))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1088 j15)))) true)) (= j15 i6)))))))))))))) (= o53 (select temp___1088 x1))) (= o54 (us_split_fields1 o53))) (= o55 (rec__tree_model__path_type__a o54))) (and (and (and (and (and (and (= o48 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)))) (and (= temp___1087 (model__ (mk___rep2 f_old__split_fields2) o48)) (and (dynamic_invariant6 temp___1087 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 o48))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1087 o48)))) 0) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (not (= i6 o48)) (ite (and (not (= (parent (mk___rep2 f_old__split_fields2) i6) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 (parent (mk___rep2 f_old__split_fields2) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 i6))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 i6))) true)))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 i6))) true) (not (= i6 o48))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1087 (parent (mk___rep2 f_old__split_fields2) i6)))) (position (mk___rep2 f_old__split_fields2) i6) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1087 i6)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1087 i6)))) 0)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 i6))) true) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1087 j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1087 i6))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1087 j15)))) true)) (= j15 i6)))))))))))))) (= o49 (select temp___1087 j12))) (= o50 (us_split_fields1 o49))) (= o51 (rec__tree_model__path_type__a o50))) (and (and (and (and (and (and (= o44 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)))) (and (= temp___1086 (model__ (rec__search_trees__search_tree__struct t__split_fields11) o44)) (and (dynamic_invariant6 temp___1086 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 o44))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1086 o44)))) 0) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (not (= i6 o44)) (ite (and (not (= (parent (rec__search_trees__search_tree__struct t__split_fields11) i6) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 (parent (rec__search_trees__search_tree__struct t__split_fields11) i6)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 i6))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 i6))) true)))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 i6))) true) (not (= i6 o44))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1086 (parent (rec__search_trees__search_tree__struct t__split_fields11) i6)))) (position (rec__search_trees__search_tree__struct t__split_fields11) i6) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1086 i6)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1086 i6)))) 0)))) (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 i6))) true) (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1086 j15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1086 i6))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1086 j15)))) true)) (= j15 i6)))))))))))))) (= o45 (select temp___1086 j12))) (= o46 (us_split_fields1 o45))) (= o47 (rec__tree_model__path_type__a o46))) (= (oeq o55 o59) true))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) x1) i6))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) y1) i6))) true)))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields11) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) x1)))) true)) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) y1)))) true))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields11) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) x1)))) true)) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6)))) (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6)))))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields11) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) x1)))) true)) (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) y1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6)))) 1)) (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields11) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) x1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6)))) 1)))))) (and (forall ((i6 Int)) (=> (and (<= 1 i6) (<= i6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) true) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields11) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) x1)))) true)) (= (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) y1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_1__split_fields3) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6)))) 1)) (get (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct t__split_fields11) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) x1))) (+ (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) i6)))) 1)))))) (and (= (ordered_leafs (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields2)) (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)) (rec__search_trees__search_tree__values t__split_fields11)) true) (and (= (ordered_leafs (mk___rep2 (let ((subject f_4__split_fields)) f_4__split_fields2)) x1 (rec__search_trees__search_tree__values t__split_fields11)) true) (and (and (= o179 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11))) (in_range3 (to_rep1 (rec__search_trees__search_tree__root t__split_fields11)))) (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields11) o179 (rec__search_trees__search_tree__values t__split_fields11)) true)))))))))))) (= t__split_fields10 t__split_fields11))) (and (forall ((j15 Int)) (=> (and (<= 1 j15) (<= j15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__1 (mk___rep3 t_old__split_fields4)) j15))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__1 (mk___rep3 t__split_fields10)) j15))) true)))) (= (oeq2 (values1 (mk___rep3 t_old__split_fields4)) (values1 (mk___rep3 t__split_fields10))) true))))))))))))))))))))))))))))))))))))))))))))))))))))))) (and (and (= f_5__split_fields3 (let ((subject f_5__split_fields)) (mk___split_fields__ref2 f_5__split_fields2))) (and (= f_4__split_fields3 (let ((subject f_4__split_fields)) (mk___split_fields__ref2 f_4__split_fields2))) (and (= f_3__split_fields4 (mk___split_fields__ref2 f_3__split_fields3)) (and (= f_2__split_fields4 (mk___split_fields__ref2 f_2__split_fields3)) (and (= f_1__split_fields4 (mk___split_fields__ref2 f_1__split_fields3)) (and (= f_old__split_fields3 (mk___split_fields__ref2 f_old__split_fields2)) (and (= t_old__split_fields5 (mk___split_fields__ref3 t_old__split_fields4)) (and (= d4 (mk_int__ref d3)) (and (= j13 (mk_int__ref j12)) (and (= xr2 (mk_int__ref xr1)) (and (= y3 (mk_int__ref y1)) (and (= x2 (mk_int__ref x1)) (= t__split_fields12 (mk___split_fields__ref3 t__split_fields10)))))))))))))) (and (= f_5__split_fields4 f_5__split_fields2) (and (= f_4__split_fields4 f_4__split_fields2) (and (= f_3__split_fields5 f_3__split_fields3) (and (= f_2__split_fields5 f_2__split_fields3) (and (= f_1__split_fields5 f_1__split_fields3) (and (= f_old__split_fields4 f_old__split_fields2) (and (= t_old__split_fields6 t_old__split_fields4) (and (= d5 d3) (and (= j14 j12) (and (= xr3 xr1) (and (= y4 y1) (and (= x3 x1) (= t__split_fields13 t__split_fields10))))))))))))))))
(assert (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12))))
(assert (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12))))
(assert (and (= o309 (size1 (mk___rep3 (us_split_fields__content3 t__split_fields12)))) (and (in_range4 o309) (= o309 (size (rec__search_trees__search_tree__struct (us_split_fields__content3 t__split_fields12)))))))
(assert (= result34 (ite (= o309 (size1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))) true false)))
(assert (= result34 true))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12)))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o306 (root (mk___rep3 (us_split_fields__content3 t__split_fields12)))) (and (in_range3 o306) (= o306 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields__content3 t__split_fields12))))))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (= result35 (ite (= o306 (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))) true false))))
(assert (=> (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i) (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))))
(assert (=> (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i) (and (= o307 (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0)) (and (in_range4 o307) (= o307 (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i 0))))))
(assert (=> (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i) (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12)))))
(assert (=> (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i) (and (= o308 (root (mk___rep3 (us_split_fields__content3 t__split_fields12)))) (and (in_range3 o308) (= o308 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields__content3 t__split_fields12))))))))
(assert (=> (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i) (= result35 (ite (= o308 o307) true false))))
(assert (= result35 true))
(assert (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))))
(assert (and (= o304 (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0)) (and (in_range4 o304) (= o304 (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i 0)))))
(assert (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12))))
(assert (and (= o305 (parent1 (mk___rep3 (us_split_fields__content3 t__split_fields12)) i)) (and (in_range4 o305) (and (= o305 (parent (rec__search_trees__search_tree__struct (us_split_fields__content3 t__split_fields12)) i)) (=> (= (size1 (mk___rep3 (us_split_fields__content3 t__split_fields12))) 0) (= o305 0))))))
(assert (= result36 (ite (= o305 o304) true false)))
(assert (= result36 true))
(assert (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12))))
(assert (and (= o303 (position1 (mk___rep3 (us_split_fields__content3 t__split_fields12)) i)) (and (in_range5 o303) (= o303 (position (rec__search_trees__search_tree__struct (us_split_fields__content3 t__split_fields12)) i)))))
(assert (= result37 (ite (= o303 1) true false)))
(assert (= result37 true))
(assert (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))))
(assert (and (= o301 (parent1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i)) (and (in_range4 o301) (and (= o301 (parent (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i)) (=> (= (size1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) 0) (= o301 0))))))
(assert (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))))
(assert (and (= o297 (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0)) (and (in_range4 o297) (= o297 (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i 0)))))
(assert (and (= o298 o297) (in_range3 o297)))
(assert (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12))))
(assert (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))))
(assert (and (= o299 (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0)) (and (in_range4 o299) (= o299 (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i 0)))))
(assert (and (= o300 o299) (in_range3 o299)))
(assert (and (= o302 (parent1 (mk___rep3 (us_split_fields__content3 t__split_fields12)) o300)) (and (in_range4 o302) (and (= o302 (parent (rec__search_trees__search_tree__struct (us_split_fields__content3 t__split_fields12)) o300)) (=> (= (size1 (mk___rep3 (us_split_fields__content3 t__split_fields12))) 0) (= o302 0))))))
(assert (= result38 (ite (= o302 o301) true false)))
(assert (= result38 true))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o295 (position1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i)) (and (in_range5 o295) (= o295 (position (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i))))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o291 (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0)) (and (in_range4 o291) (= o291 (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i 0))))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o292 o291) (in_range3 o291))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (type_invariant1 (mk___rep3 (us_split_fields__content3 t__split_fields12)))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o293 (peek1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3)) i 0)) (and (in_range4 o293) (= o293 (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i 0))))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o294 o293) (in_range3 o293))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (and (= o296 (position1 (mk___rep3 (us_split_fields__content3 t__split_fields12)) o294)) (and (in_range5 o296) (= o296 (position (rec__search_trees__search_tree__struct (us_split_fields__content3 t__split_fields12)) o294))))))
(assert (=> (not (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i)) (= result39 (ite (= o296 o295) true false))))
(assert (=> (= (root (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) i) (= result39 (of_int 1))))
(assert (= result39 true))
(assert (type_invariant1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))))
(assert (not (not (= (size1 (mk___rep3 (mk___split_fields3 t__split_fields (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t__split_fields3))) 0))))
(check-sat)
(exit)
