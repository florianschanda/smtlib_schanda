(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort slot 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (slot slot) Bool)
(declare-const dummy4 slot)
(declare-datatypes () ((slot__ref (mk_slot__ref (slot__content slot)))))
(define-fun slot__ref___projection ((a slot__ref)) slot (slot__content a))
(declare-fun to_rep2 (slot) Int)
(declare-fun of_rep2 (Int) slot)
(assert (forall ((x slot)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x slot)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int slot))))))
(declare-fun slide1 ((Array Int slot) Int Int) (Array Int slot))
(assert (forall ((a (Array Int slot))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int slot))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int slot)) (a__first Int) (a__last Int) (b (Array Int slot)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int slot)) (b (Array Int slot))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep2 (select a temp___idx_154)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy5 (Array Int slot))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int slot)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int slot)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int slot)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int slot))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int slot))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int slot))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int slot) (Array Int slot)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int slot)))))))
(declare-fun slide2 ((Array Int (Array Int slot)) Int Int) (Array Int (Array Int slot)))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((first2 Int)) (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2))))))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int slot))) (a__first Int) (a__last Int) (b (Array Int (Array Int slot))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq2 (select a temp___idx_155) 1 3 (select b (+ (- b__first a__first) temp___idx_155)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq2 (select a temp___idx_155) 1 3 (select b (+ (- b__first a__first) temp___idx_155)) 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)
(declare-fun num_free_slots__function_guard (Int (Array Int (Array Int slot))) Bool)
(declare-fun is_full ((Array Int (Array Int slot))) Bool)
(declare-fun is_full__function_guard (Bool (Array Int (Array Int slot))) Bool)
(assert true)
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (= (is_full tictactoe__my_board) true) (= (num_free_slots tictactoe__my_board) 0)) :pattern ((is_full tictactoe__my_board)))))
(declare-fun won (us_private (Array Int (Array Int slot))) Int)
(declare-fun won__function_guard (Int us_private (Array Int (Array Int slot))) Bool)
(define-fun dynamic_invariant ((temp___expr_179 Int) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (=> (or (= temp___is_init_175 true) (<= 0 2)) (in_range4 temp___expr_179)))
(assert (forall ((tictactoe__all_solutions us_private)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (dynamic_invariant (won tictactoe__all_solutions tictactoe__my_board) true false true true) :pattern ((won tictactoe__all_solutions tictactoe__my_board))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun temp___String_Literal_647 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_647 us_void_param) 1)) 67) (= (to_rep (select (temp___String_Literal_647 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_647 us_void_param) 3)) 109)) (= (to_rep (select (temp___String_Literal_647 us_void_param) 4)) 112)) (= (to_rep (select (temp___String_Literal_647 us_void_param) 5)) 117)) (= (to_rep (select (temp___String_Literal_647 us_void_param) 6)) 116)) (= (to_rep (select (temp___String_Literal_647 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_647 us_void_param) 8)) 114)) :pattern ((temp___String_Literal_647 us_void_param)))))
(declare-fun temp___String_Literal_648 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (= (to_rep (select (temp___String_Literal_648 us_void_param) 1)) 80) (= (to_rep (select (temp___String_Literal_648 us_void_param) 2)) 108)) (= (to_rep (select (temp___String_Literal_648 us_void_param) 3)) 97)) (= (to_rep (select (temp___String_Literal_648 us_void_param) 4)) 121)) (= (to_rep (select (temp___String_Literal_648 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_648 us_void_param) 6)) 114)) :pattern ((temp___String_Literal_648 us_void_param)))))
(declare-fun temp___String_Literal_651 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_651 us_void_param) 1)) 82) (= (to_rep (select (temp___String_Literal_651 us_void_param) 2)) 101)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 3)) 97)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 4)) 108)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 6)) 121)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 7)) 44)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 9)) 108)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 10)) 111)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 11)) 115)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 12)) 105)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 13)) 110)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 14)) 103)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 16)) 97)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 17)) 103)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 18)) 97)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 19)) 105)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 20)) 110)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 21)) 115)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 22)) 116)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 23)) 32)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 24)) 116)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 25)) 105)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 26)) 99)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 27)) 32)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 28)) 116)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 29)) 97)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 30)) 99)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 31)) 32)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 32)) 116)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 33)) 111)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 34)) 101)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 35)) 63)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 36)) 63)) (= (to_rep (select (temp___String_Literal_651 us_void_param) 37)) 63)) :pattern ((temp___String_Literal_651 us_void_param)))))
(declare-fun temp___String_Literal_652 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_652 us_void_param) 1)) 87) (= (to_rep (select (temp___String_Literal_652 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 3)) 108)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 4)) 108)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 5)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 6)) 116)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 7)) 114)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 8)) 121)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 10)) 117)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 11)) 115)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 12)) 105)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 13)) 110)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 14)) 103)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 16)) 97)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 17)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 18)) 100)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 19)) 101)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 20)) 101)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 21)) 112)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 22)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 23)) 108)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 24)) 101)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 25)) 97)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 26)) 114)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 27)) 110)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 28)) 105)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 29)) 110)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 30)) 103)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 31)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 32)) 97)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 33)) 108)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 34)) 103)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 35)) 111)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 36)) 114)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 37)) 105)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 38)) 116)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 39)) 104)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 40)) 109)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 41)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 42)) 110)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 43)) 101)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 44)) 120)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 45)) 116)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 46)) 32)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 47)) 116)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 48)) 105)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 49)) 109)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 50)) 101)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 51)) 46)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 52)) 46)) (= (to_rep (select (temp___String_Literal_652 us_void_param) 53)) 46)) :pattern ((temp___String_Literal_652 us_void_param)))))
(declare-fun temp___String_Literal_653 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_653 us_void_param) 1)) 87) (= (to_rep (select (temp___String_Literal_653 us_void_param) 2)) 104)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 3)) 97)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 4)) 116)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 5)) 39)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 6)) 115)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 8)) 116)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 9)) 104)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 10)) 101)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 12)) 111)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 13)) 116)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 14)) 104)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 15)) 101)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 16)) 114)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 17)) 32)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 18)) 107)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 19)) 105)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 20)) 110)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 21)) 100)) (= (to_rep (select (temp___String_Literal_653 us_void_param) 22)) 63)) :pattern ((temp___String_Literal_653 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (natural natural) Bool)
(declare-const dummy6 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range5 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant5 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-sort pos 0)
(declare-fun posqtint (pos) Int)
(assert (forall ((i pos)) (and (<= 1 (posqtint i)) (<= (posqtint i) 3))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (pos pos) Bool)
(declare-const dummy7 pos)
(declare-datatypes () ((pos__ref (mk_pos__ref (pos__content pos)))))
(define-fun pos__ref___projection ((a pos__ref)) pos (pos__content a))
(define-fun dynamic_invariant6 ((temp___expr_186 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool) (temp___do_typ_inv_185 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 1 3)) (in_range6 temp___expr_186)))
(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)
(declare-fun one_free_slot__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (dynamic_invariant1 (one_free_slot x y tictactoe__my_board) true false true true)) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep2 (let ((temp___217 (select tictactoe__my_board x))) (select temp___217 y))) 0) 1 0))) :pattern ((one_free_slot x y tictactoe__my_board))))))
(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)
(declare-fun count_free_slots__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (dynamic_invariant1 (count_free_slots x y tictactoe__my_board) true false true true)) :pattern ((count_free_slots x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot 1 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 1 3 tictactoe__my_board) 0)) (ite (<= 2 x) (+ (+ (one_free_slot 2 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 2 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 2 3 tictactoe__my_board) 0)) 0)) (ite (<= 3 x) (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 3 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0)))) :pattern ((count_free_slots x y tictactoe__my_board))))))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (dynamic_invariant2 (num_free_slots tictactoe__my_board) true false true true) :pattern ((num_free_slots tictactoe__my_board)))))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3 tictactoe__my_board)) :pattern ((num_free_slots tictactoe__my_board)))))
(declare-const player_turn Bool)
(declare-const all_solutions us_private)
(declare-const o Int)
(declare-const o1 Bool)
(declare-const result Bool)
(declare-const player_turn1 Bool)
(declare-const my_board (Array Int (Array Int slot)))
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const my_board1 (Array Int (Array Int slot)))
(declare-const player_turn2 Bool)
(assert (= result player_turn))
(assert (= player_turn1 (distinct 1 0)))
(assert (= (num_free_slots my_board) 9))
(assert (and (= o1 (is_full my_board)) (= (= o1 true) (= (num_free_slots my_board) 0))))
(assert (= result2 (ite (not (= o1 true)) true false)))
(assert (=> (= result2 true) (and (= o (won all_solutions my_board)) (in_range4 o))))
(assert (=> (= result2 true) (= result1 (ite (= o 0) true false))))
(assert (=> (not (= result2 true)) (= result1 false)))
(assert (= result1 true))
(assert (and (not (= (is_full my_board1) true)) (= (won all_solutions my_board1) 0)))
(assert (not (= player_turn2 true)))
(assert (not (not (= (is_full my_board1) true))))
(check-sat)
(exit)
