(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (et1 et1) Bool)
(declare-const dummy et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b (Array Int et1))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range1 temp___expr_204)))
(declare-const rliteral et1)
(assert (= (et1qtint rliteral) 0))
(declare-const a (Array Int et1))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 et1)
(declare-const o3 (Array Int et1))
(declare-const o4 et1)
(declare-const o5 (Array Int et1))
(declare-const o6 Int)
(declare-const o7 et1)
(declare-const o8 (Array Int et1))
(declare-const o9 Int)
(declare-const o10 et1)
(declare-const o11 (Array Int et1))
(declare-const result (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const result1 (Array Int et1))
(declare-const a2 (Array Int et1))
(declare-const result2 (Array Int et1))
(declare-const a3 (Array Int et1))
(declare-const result3 (Array Int et1))
(declare-const a4 (Array Int et1))
(declare-const result4 (Array Int et1))
(declare-const a5 (Array Int et1))
(declare-const result5 (Array Int et1))
(declare-const a6 (Array Int et1))
(declare-const result6 (Array Int et1))
(declare-const a7 (Array Int et1))
(declare-const result7 (Array Int et1))
(declare-const a8 (Array Int et1))
(declare-const result8 (Array Int et1))
(declare-const a9 (Array Int et1))
(declare-const result9 (Array Int et1))
(declare-const a10 (Array Int et1))
(declare-const result10 (Array Int et1))
(declare-const a11 (Array Int et1))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 b))
(assert (= (to_rep o) (to_rep (select b 4))))
(assert (= o1 (store a1 5 o)))
(assert (= a1 result1))
(assert (= a2 o1))
(assert (= (to_rep o2) (to_rep (select a2 6))))
(assert (= o3 (store a2 3 o2)))
(assert (= a2 result2))
(assert (= a3 o3))
(assert (= a3 result3))
(assert (= a4 (store a3 6 rliteral)))
(assert (= (to_rep o4) (to_rep (select a4 6))))
(assert (= o5 (store a4 7 o4)))
(assert (= a4 result4))
(assert (= a5 o5))
(assert (and (= o6 (- (to_rep (select a5 5)) (to_rep (select a5 4)))) (in_range1 (- (to_rep (select a5 5)) (to_rep (select a5 4))))))
(assert (= (to_rep o7) o6))
(assert (= o8 (store a5 4 o7)))
(assert (= a5 result5))
(assert (= a6 o8))
(assert (= a6 result6))
(assert (= a7 (store a6 5 rliteral)))
(assert (= a7 result7))
(assert (= a8 (store a7 10 rliteral)))
(assert (= a8 result8))
(assert (= a9 (store a8 9 rliteral)))
(assert (and (= o9 (- (to_rep (select b 2)) (to_rep (select a9 2)))) (in_range1 (- (to_rep (select b 2)) (to_rep (select a9 2))))))
(assert (= (to_rep o10) o9))
(assert (= o11 (store a9 1 o10)))
(assert (= a9 result9))
(assert (= a10 o11))
(assert (= a10 result10))
(assert (= a11 (store a10 2 rliteral)))
(assert (not (in_range1 (- (to_rep (select a11 3)) (to_rep (select b 6))))))
(check-sat)
(exit)
