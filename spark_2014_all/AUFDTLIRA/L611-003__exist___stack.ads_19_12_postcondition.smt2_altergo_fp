(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type element_t

predicate in_range1(x: int) = (((- 1) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element_t, element_t -> bool

logic dummy : element_t

type element_t__ref = { element_t__content : element_t
}

function element_t__ref___projection(a: element_t__ref) : element_t =
  (a).element_t__content

logic to_rep : element_t -> int

logic of_rep : int -> element_t

axiom inversion_axiom :
  (forall x:element_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index_t

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_t, index_t -> bool

logic dummy1 : index_t

type index_t__ref = { index_t__content : index_t
}

function index_t__ref___projection(a: index_t__ref) : index_t =
  (a).index_t__content

type map__ref = { map__content : (int,element_t) farray
}

logic slide : (int,element_t) farray, int, int -> (int,element_t) farray

axiom slide_eq :
  (forall a:(int,element_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,element_t) farray, int, int, (int,element_t) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,element_t) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element_t) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic valid : (int,element_t) farray, int -> bool

logic valid__function_guard : bool, (int,element_t) farray, int -> prop

type size_t

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : size_t, size_t -> bool

logic dummy2 : size_t

type size_t__ref = { size_t__content : size_t
}

function size_t__ref___projection(a: size_t__ref) : size_t =
  (a).size_t__content

axiom valid__post_axiom : true

axiom valid__def_axiom :
  (forall t:(int,element_t) farray.
  (forall s:int [valid(t, s)]. ((valid(t, s) = true) <->
  ((forall i:int. (((1 <= i) and (i <= s)) -> ((0 <= to_rep((t[i]))) and
   (to_rep((t[i])) <= 2147483647)))) and
  (forall i:int. ((((s + 1) <= i) and (i <= 100)) ->
  (to_rep((t[i])) = (- 1))))))))

logic t : (int,element_t) farray

logic attr__ATTRIBUTE_ADDRESS : int

type t1b

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : t1b, t1b -> bool

logic dummy3 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a: t1b__ref) : t1b = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "stack.ads", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall index:int. forall stack__size__result:int. forall temp___197:int.
  forall temp___198:int. forall temp___196:int.
  forall stack__size__result1:int. forall result:int. forall index1:int.
  forall index2:int. forall stack__size__result2:int. forall result1:int.
  forall stack__size__result3:int. forall index3:int.
  forall stack__size__result4:int. forall index4:int.
  forall stack__size__result5:int. forall index5:int.
  forall stack__size__result6:int. forall index6:int.
  forall stack__size__result7:int. forall result2:int.
  forall stack__size__result8:int. forall stack__size__result9:int.
  forall stack__size__result10:int. forall index7:int.
  forall stack__size__result11:int. forall index8:int.
  forall stack__size__result12:int. forall index9:int.
  forall stack__size__result13:int. forall index10:int.
  forall stack__size__result14:int.
  (forall result3:int.
  (((exists s:int. (((0 <= s) and (s <= 100)) and (valid(t, s) = true))) and
  (((((((stack__size__result3 = stack__size__result11) and
  (index2 = index7)) and ((stack__size__result12 = stack__size__result3) and
  (index8 = index2))) and ((temp___197 = 1) and ((temp___198 = 100) and ((({
  int__content = result } = { int__content = index }) and
  (index1 = temp___197)) and (((temp___197 <= index1) and
  (index1 <= temp___198)) and ((temp___196 = index1) and
  ((forall i:int. (((1 <= i) and (i <= (index2 - 1))) ->
   (not (to_rep((t[i])) = (- 1))))) and
  ((((1 <= 100) -> in_range4(index2)) and ((1 <= index2) and
  (index2 <= 100))) and ((to_rep((t[index2])) = (- 1)) and
  ((result1 = stack__size__result2) and
  (stack__size__result3 = (index2 - 1)))))))))))) or (((({ int__content =
  result } = { int__content = index }) and (index1 = 1)) and
  ((((1 <= index1) and (index1 <= 100)) and ((((temp___196 = index1) and
  ((forall i:int. (((1 <= i) and (i <= (index2 - 1))) ->
   (not (to_rep((t[i])) = (- 1))))) and
  ((((1 <= 100) -> in_range4(index2)) and ((1 <= index2) and
  (index2 <= 100))) and (((not (to_rep((t[index2])) = (- 1))) and
  (stack__size__result3 = stack__size__result2)) and (index2 = 100))))) and
  (((stack__size__result3 = stack__size__result4) and (index2 = index3)) and
  ((stack__size__result5 = stack__size__result3) and (index4 = index2)))) and
  ((({ int__content = stack__size__result6 } = { int__content =
  stack__size__result4 }) and ({ int__content = index5 } = { int__content =
  index3 })) and ((stack__size__result7 = stack__size__result5) and
  (index6 = index4))))) or ((not ((1 <= index1) and (index1 <= 100))) and
  (((stack__size__result = stack__size__result6) and (index1 = index5)) and
  ((stack__size__result7 = stack__size__result1) and
  (index6 = index1)))))) and
  ((((stack__size__result9 = stack__size__result11) and
  (index7 = index5)) and ((stack__size__result12 = stack__size__result10) and
  (index8 = index6))) and (((stack__size__result8 = stack__size__result9) and
  (stack__size__result10 = stack__size__result8)) and
  ((result2 = stack__size__result6) and (stack__size__result8 = 100)))))) and
  (((stack__size__result13 = stack__size__result11) and
  (index9 = index7)) and ((stack__size__result14 = stack__size__result12) and
  (index10 = index8)))) and (result3 = stack__size__result13))) -> (valid(t,
  stack__size__result13) = true))))
