(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort program_phase_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (program_phase_t program_phase_t) Bool)
(declare-const dummy program_phase_t)
(declare-datatypes () ((program_phase_t__ref (mk_program_phase_t__ref (program_phase_t__content program_phase_t)))))
(define-fun program_phase_t__ref___projection ((a program_phase_t__ref)) program_phase_t (program_phase_t__content a))
(define-fun dynamic_invariant ((temp___expr_599 Int) (temp___is_init_595 Bool) (temp___skip_constant_596 Bool) (temp___do_toplevel_597 Bool) (temp___do_typ_inv_598 Bool)) Bool (=> (or (= temp___is_init_595 true) (<= 0 2)) (in_range1 temp___expr_599)))
(declare-sort counter_range_t 0)
(declare-fun counter_range_tqtint (counter_range_t) Int)
(assert (forall ((i counter_range_t)) (and (<= 0 (counter_range_tqtint i)) (<= (counter_range_tqtint i) 10000))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (counter_range_t counter_range_t) Bool)
(declare-const dummy1 counter_range_t)
(declare-datatypes () ((counter_range_t__ref (mk_counter_range_t__ref (counter_range_t__content counter_range_t)))))
(define-fun counter_range_t__ref___projection ((a counter_range_t__ref)) counter_range_t (counter_range_t__content a))
(define-fun to_rep ((x counter_range_t)) Int (counter_range_tqtint x))
(declare-fun of_rep (Int) counter_range_t)
(assert (forall ((x counter_range_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x counter_range_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tcandidate_number_tB 0)
(declare-fun tcandidate_number_tBqtint (tcandidate_number_tB) Int)
(assert (forall ((i tcandidate_number_tB)) (and (<= (- 128) (tcandidate_number_tBqtint i)) (<= (tcandidate_number_tBqtint i) 127))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy2 tcandidate_number_tB)
(declare-datatypes () ((tcandidate_number_tB__ref (mk_tcandidate_number_tB__ref (tcandidate_number_tB__content tcandidate_number_tB)))))
(define-fun tcandidate_number_tB__ref___projection ((a tcandidate_number_tB__ref)) tcandidate_number_tB (tcandidate_number_tB__content a))
(declare-sort candidate_number_t 0)
(declare-fun candidate_number_tqtint (candidate_number_t) Int)
(assert (forall ((i candidate_number_t)) (and (<= 0 (candidate_number_tqtint i)) (<= (candidate_number_tqtint i) 20))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (candidate_number_t candidate_number_t) Bool)
(declare-const dummy3 candidate_number_t)
(declare-datatypes () ((candidate_number_t__ref (mk_candidate_number_t__ref (candidate_number_t__content candidate_number_t)))))
(define-fun candidate_number_t__ref___projection ((a candidate_number_t__ref)) candidate_number_t (candidate_number_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_613 Int) (temp___is_init_609 Bool) (temp___skip_constant_610 Bool) (temp___do_toplevel_611 Bool) (temp___do_typ_inv_612 Bool)) Bool (=> (or (= temp___is_init_609 true) (<= 0 20)) (in_range4 temp___expr_613)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int counter_range_t))))))
(declare-fun slide ((Array Int counter_range_t) Int Int) (Array Int counter_range_t))
(assert (forall ((a (Array Int counter_range_t))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int counter_range_t))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int counter_range_t)) (a__first Int) (a__last Int) (b (Array Int counter_range_t)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (to_rep (select a temp___idx_175)) (to_rep (select b (+ (- b__first a__first) temp___idx_175))))))) true false))
(assert (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (to_rep (select a temp___idx_175)) (to_rep (select b (+ (- b__first a__first) temp___idx_175)))))))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int Bool))))))
(declare-fun slide1 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_176 Int)) (=> (and (<= a__first temp___idx_176) (<= temp___idx_176 a__last)) (= (select a temp___idx_176) (select b (+ (- b__first a__first) temp___idx_176)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_176 Int)) (=> (and (<= a__first temp___idx_176) (<= temp___idx_176 a__last)) (= (select a temp___idx_176) (select b (+ (- b__first a__first) temp___idx_176))))))))))
(declare-const program_phase Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const last_candidate Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const counters (Array Int counter_range_t))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun to_rep1 ((x tcandidate_number_tB)) Int (tcandidate_number_tBqtint x))
(declare-fun of_rep1 (Int) tcandidate_number_tB)
(assert (forall ((x tcandidate_number_tB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tcandidate_number_tB)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy4 tcandidate_number_tB)
(declare-datatypes () ((t59b__ref (mk_t59b__ref (t59b__content tcandidate_number_tB)))))
(define-fun t59b__ref___projection ((a t59b__ref)) tcandidate_number_tB (t59b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy5 tcandidate_number_tB)
(declare-datatypes () ((t68b__ref (mk_t68b__ref (t68b__content tcandidate_number_tB)))))
(define-fun t68b__ref___projection ((a t68b__ref)) tcandidate_number_tB (t68b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy6 tcandidate_number_tB)
(declare-datatypes () ((t73b__ref (mk_t73b__ref (t73b__content tcandidate_number_tB)))))
(define-fun t73b__ref___projection ((a t73b__ref)) tcandidate_number_tB (t73b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant2 ((temp___expr_606 Int) (temp___is_init_602 Bool) (temp___skip_constant_603 Bool) (temp___do_toplevel_604 Bool) (temp___do_typ_inv_605 Bool)) Bool (=> (or (= temp___is_init_602 true) (<= 0 10000)) (in_range2 temp___expr_606)))
(declare-const winners (Array Int Bool))
(declare-const latest_highest_score Int)
(declare-const i Int)
(declare-const result (Array Int Bool))
(declare-const winners1 (Array Int Bool))
(declare-const result1 Int)
(declare-const latest_highest_score1 Int)
(declare-const result2 (Array Int Bool))
(declare-const winners2 (Array Int Bool))
(declare-const result3 Int)
(declare-const i1 Int)
(assert (in_range1 program_phase))
(assert (in_range4 last_candidate))
(assert (= program_phase 2))
(assert (=> (<= 0 20) (in_range4 latest_highest_score)))
(assert (= (mk_map__ref1 result) (mk_map__ref1 winners)))
(assert (= winners1 (store winners 0 (distinct 0 0))))
(assert (= (mk_int__ref result1) (mk_int__ref latest_highest_score)))
(assert (= latest_highest_score1 1))
(assert (= winners1 result2))
(assert (= winners2 (store winners1 latest_highest_score1 (distinct 1 0))))
(assert (= (mk_int__ref result3) (mk_int__ref i)))
(assert (= i1 2))
(assert (<= 2 i1))
(assert (<= i1 last_candidate))
(assert (not (not (= (select winners2 0) true))))
(check-sat)
(exit)
