(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

type text__ref = { text__content : us_t
}

function text__ref___projection(a: text__ref) : us_t = (a).text__content

type map__ref1 = { map__content1 : (int,positive) farray
}

logic slide1 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq1 :
  (forall a:(int,positive) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : positive, int -> (int,positive) farray

axiom singleton_def1 :
  (forall v:positive.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic needle : (int,character) farray

logic needle1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t25b__ref = { t25b__content : integer
}

function t25b__ref___projection(a: t25b__ref) : integer = (a).t25b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___283 : int -> (int,positive) farray

axiom def_axiom :
  (forall temp___285:int.
  (forall temp___286:int.
  ((temp___283(temp___285)[temp___286]) = of_rep(temp___285))))

logic bad_shift : (int,positive) farray

logic j : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : (int,positive) farray

logic temp___289 : int

logic temp___287 : (int,positive) farray

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : positive

logic o12 : (int,positive) farray

logic c : int

logic o13 : int

logic o14 : int

logic o15 : int

logic c1 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic k : int

logic o19 : int

logic o20 : int

logic o21 : int

logic temp___290 : int

logic k1 : int

logic o22 : int

logic o23 : int

logic o24 : int

logic o25 : int

logic o26 : bool

logic o27 : bool

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : int

logic o32 : int

logic o33 : int

logic o34 : positive

logic o35 : (int,positive) farray

logic c2 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic k2 : int

logic o39 : int

logic o40 : int

logic o41 : int

logic temp___294 : int

logic k3 : int

logic o42 : int

logic o43 : int

logic o44 : int

logic o45 : int

logic o46 : bool

logic o47 : bool

logic c3 : int

logic o48 : int

logic o49 : int

logic o50 : int

logic result : (int,positive) farray

logic bad_shift1 : (int,positive) farray

logic result1 : int

logic j1 : int

logic result2 : (int,positive) farray

logic bad_shift2 : (int,positive) farray

logic bad_shift3 : (int,positive) farray

logic j2 : int

logic result3 : bool

logic result4 : bool

logic result5 : int

logic j3 : int

logic result6 : (int,positive) farray

logic bad_shift4 : (int,positive) farray

logic bad_shift5 : (int,positive) farray

logic j4 : int

logic bad_shift6 : (int,positive) farray

logic j5 : int

logic bad_shift7 : (int,positive) farray

logic j6 : int

logic bad_shift8 : (int,positive) farray

logic j7 : int

logic bad_shift9 : (int,positive) farray

logic j8 : int

logic bad_shift10 : (int,positive) farray

logic j9 : int

logic result7 : bool

logic result8 : bool

logic result9 : bool

axiom H : (dynamic_property(1, 2147483647, to_rep2(first(needle1)),
  to_rep2(last(needle1))) and (to_rep2(first(needle1)) = 1))

axiom H1 : (length({ elts = needle; rt = needle1 }) <  2147483647)

axiom H2 : ((o1 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 })))

axiom H3 : (o2 = (o1 + 1))

axiom H4 : ((o3 = o2) and in_range1(o2))

axiom H5 : (o4 = temp___283(o3))

axiom H6 : (result = bad_shift)

axiom H7 : (bad_shift1 = o4)

axiom H8 : (result1 = j)

axiom H9 : (j1 = to_rep2(first(needle1)))

axiom H10 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (temp___289 = j1))

axiom H11 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (temp___287 = bad_shift1))

axiom H12 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> ((o5 = length({ elts = needle; rt =
  needle1 })) and in_range1(length({ elts = needle; rt = needle1 }))))

axiom H13 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (o6 = (o5 - j1)))

axiom H14 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> ((o7 = o6) and in_range1(o6)))

axiom H15 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (o8 = (o7 + 1)))

axiom H16 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> ((o9 = o8) and in_range1(o8)))

axiom H17 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> ((o10 = o9) and in_range2(o9)))

axiom H18 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (to_rep(o11) = o10))

axiom H19 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) ->
  (o12 = (bad_shift1[to_rep1((needle[j1])) <- o11])))

axiom H20 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (bad_shift1 = result2))

axiom H21 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (bad_shift2 = o12))

axiom H22 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) ->
  (forall c4:int. (((0 <= c4) and (c4 <= 255)) ->
  ((1 <= to_rep((bad_shift3[c4]))) and (to_rep((bad_shift3[c4])) <= (length({
  elts = needle; rt = needle1 }) + 1))))))

axiom H23 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) ->
  (forall c4:int. (((0 <= c4) and (c4 <= 255)) ->
  (((to_rep((bad_shift3[c4])) = (length({ elts = needle; rt = needle1
  }) + 1)) ->
  (forall k4:int. (((1 <= k4) and (k4 <= j2)) ->
  (not (c4 = to_rep1((needle[k4]))))))) and
  ((not (to_rep((bad_shift3[c4])) = (length({ elts = needle; rt = needle1
  }) + 1))) -> ((to_rep1((needle[((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift3[c4]))) + 1)])) = c4) and
  (forall k4:int. (((((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift3[c4]))) + 2) <= k4) and (k4 <= j2)) ->
  (not (to_rep1((needle[k4])) = c4))))))))))

axiom H24 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) ->
  (((to_rep2(first(needle1)) <= to_rep2(last(needle1))) ->
  dynamic_property1(to_rep2(first(needle1)), to_rep2(last(needle1)), j2)) and
  ((to_rep2(first(needle1)) <= j2) and (j2 <= to_rep2(last(needle1))))))

axiom H25 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (j2 = to_rep2(last(needle1))))

axiom H26 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (j2 = j4))

axiom H27 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (bad_shift3 = bad_shift5))

axiom H28 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (j5 = j2))

axiom H29 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (bad_shift6 = bad_shift3))

axiom H30 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (j6 = j4))

axiom H31 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (bad_shift7 = bad_shift5))

axiom H32 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (j7 = j5))

axiom H33 : (((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1)))) -> (bad_shift8 = bad_shift6))

axiom H34 : ((not ((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1))))) -> (j1 = j6))

axiom H35 : ((not ((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1))))) -> (bad_shift1 = bad_shift7))

axiom H36 : ((not ((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1))))) -> (j7 = j1))

axiom H37 : ((not ((to_rep2(first(needle1)) <= j1) and
  (j1 <= to_rep2(last(needle1))))) -> (bad_shift8 = bad_shift1))

axiom H38 : (j8 = j6)

axiom H39 : (bad_shift9 = bad_shift7)

axiom H40 : (j9 = j7)

axiom H41 : (bad_shift10 = bad_shift8)

axiom H42 : ((result7 = true) <->
  (forall c4:int. (((0 <= c4) and (c4 <= 255)) ->
  ((1 <= to_rep((bad_shift9[c4]))) and (to_rep((bad_shift9[c4])) <= (length({
  elts = needle; rt = needle1 }) + 1))))))

axiom H43 : (result7 = true)

axiom H44 : (0 <= c2)

axiom H45 : (c2 <= 255)

axiom H46 : ((o36 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 })))

axiom H47 : (o37 = (o36 + 1))

axiom H48 : ((o38 = o37) and in_range1(o37))

axiom H49 : (((to_rep((bad_shift9[c2])) = o38) -> (result8 = true)) and
  ((not (to_rep((bad_shift9[c2])) = o38)) -> (result8 = false)))

axiom H50 : (not (result8 = true))

axiom H51 : ((o42 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 })))

axiom H52 : (o43 = (o42 - to_rep((bad_shift9[c2]))))

axiom H53 : (o44 = (o43 + 2))

axiom H54 : ((o45 = o44) and in_range1(o44))

axiom H55 : (((o45 <= k3) -> (o46 = true)) and ((not (o45 <= k3)) ->
  (o46 = false)))

axiom H56 : (((k3 <= to_rep2(last(needle1))) -> (result9 = match_bool(o46,
  true, false))) and ((not (k3 <= to_rep2(last(needle1)))) ->
  (result9 = match_bool(o46, false, false))))

axiom H57 : ((o47 = true) <->
  (forall k4:int. (((((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift9[c2]))) + 2) <= k4) and
  (k4 <= to_rep2(last(needle1)))) -> (not (to_rep1((needle[k4])) = c2)))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1(length({ elts = needle; rt = needle1 }))
