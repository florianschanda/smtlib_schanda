(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant1 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-const c us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const s us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const courant Int)
(declare-const possible Int)
(declare-const indexbis__result Int)
(declare-const o Int)
(declare-const temp___177 Int)
(declare-const o1 Int)
(declare-const temp___176 Int)
(declare-const o2 Int)
(declare-const o3 character)
(declare-const o4 Int)
(declare-const o5 character)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const i Int)
(declare-const j Int)
(declare-const courant1 Int)
(declare-const possible1 Int)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const indexbis__result1 Int)
(declare-const result2 Int)
(declare-const courant2 Int)
(declare-const courant3 Int)
(declare-const possible2 Int)
(declare-const result3 Int)
(declare-const possible3 Int)
(declare-const possible4 Int)
(declare-const indexbis__result2 Int)
(declare-const result4 Bool)
(declare-const result5 Int)
(declare-const indexbis__result3 Int)
(declare-const possible5 Int)
(declare-const indexbis__result4 Int)
(declare-const possible6 Int)
(declare-const indexbis__result5 Int)
(declare-const possible7 Int)
(declare-const indexbis__result6 Int)
(declare-const possible8 Int)
(declare-const indexbis__result7 Int)
(declare-const possible9 Int)
(declare-const indexbis__result8 Int)
(declare-const possible10 Int)
(declare-const indexbis__result9 Int)
(declare-const result6 Int)
(declare-const indexbis__result10 Int)
(declare-const possible11 Int)
(declare-const indexbis__result11 int__ref)
(declare-const possible12 Int)
(declare-const indexbis__result12 Int)
(declare-const courant4 int__ref)
(declare-const possible13 int__ref)
(declare-const indexbis__result13 int__ref)
(declare-const courant5 Int)
(declare-const possible14 Int)
(declare-const indexbis__result14 Int)
(declare-const courant6 int__ref)
(declare-const possible15 int__ref)
(declare-const indexbis__result15 int__ref)
(declare-const courant7 Int)
(declare-const possible16 Int)
(declare-const indexbis__result16 Int)
(declare-const courant8 int__ref)
(declare-const possible17 int__ref)
(declare-const indexbis__result17 int__ref)
(declare-const courant9 Int)
(declare-const possible18 Int)
(declare-const indexbis__result18 Int)
(define-fun possible19 () int__ref (mk_int__ref possible11))
(define-fun indexbis__result19 () int__ref (mk_int__ref indexbis__result8))
(define-fun possible20 () int__ref (mk_int__ref possible9))
(define-fun indexbis__result20 () int__ref (mk_int__ref indexbis__result6))
(define-fun possible21 () int__ref (mk_int__ref possible7))
(define-fun courant10 () int__ref (mk_int__ref courant))
(assert (dynamic_invariant1 c true false true true))
(assert (dynamic_invariant1 s true false true true))
(assert (= indexbis__result15 indexbis__result13))
(assert (= possible15 possible13))
(assert (= courant6 courant4))
(assert (= indexbis__result16 indexbis__result14))
(assert (= possible16 possible14))
(assert (= courant7 courant5))
(assert (=> (= (length s) 0) (= result true)))
(assert (=> (not (= (length s) 0)) (= result (ite (= (length c) 0) true false))))
(assert (=> (= result true) (= indexbis__result13 (mk_int__ref indexbis__result1))))
(assert (=> (= result true) (= possible13 (mk_int__ref possible))))
(assert (=> (= result true) (= courant4 courant10)))
(assert (=> (= result true) (= indexbis__result14 indexbis__result1)))
(assert (=> (= result true) (= possible14 possible1)))
(assert (=> (= result true) (= courant5 courant1)))
(assert (=> (= result true) (= (mk_int__ref result1) (mk_int__ref indexbis__result))))
(assert (=> (= result true) (= indexbis__result1 0)))
(assert (=> (not (= result true)) (= indexbis__result13 indexbis__result11)))
(assert (=> (not (= result true)) (= possible13 possible19)))
(assert (=> (not (= result true)) (= courant4 (mk_int__ref courant3))))
(assert (=> (not (= result true)) (= indexbis__result14 indexbis__result12)))
(assert (=> (not (= result true)) (= possible14 possible12)))
(assert (=> (not (= result true)) (= courant5 courant3)))
(assert (=> (not (= result true)) (and (= o (to_rep1 (first (rt s)))) (in_range2 (to_rep1 (first (rt s)))))))
(assert (=> (not (= result true)) (= (mk_int__ref result2) courant10)))
(assert (=> (not (= result true)) (= courant2 o)))
(assert (=> (not (= result true)) (in_range2 courant2)))
(assert (=> (not (= result true)) (= temp___177 courant2)))
(assert (=> (not (= result true)) (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (not (exists ((i1 Int)) (and (and (<= (to_rep1 (first (rt s))) i1) (<= i1 (- courant3 1))) (exists ((j1 Int)) (and (and (<= (to_rep1 (first (rt c))) j1) (<= j1 (to_rep1 (last (rt c))))) (= (to_rep (select (elts s) i1)) (to_rep (select (elts c) j1)))))))))))
(assert (=> (not (= result true)) (=> (<= 1 2147483647) (in_range2 courant3))))
(assert (=> (not (= result true)) (and (= o1 (to_rep1 (first (rt c)))) (in_range2 (to_rep1 (first (rt c)))))))
(assert (=> (not (= result true)) (= possible2 result3)))
(assert (=> (not (= result true)) (= possible3 o1)))
(assert (=> (not (= result true)) (in_range2 possible3)))
(assert (=> (not (= result true)) (or (and (and (and (= indexbis__result11 (mk_int__ref indexbis__result3)) (= possible4 possible11)) (and (= indexbis__result12 indexbis__result3) (= possible12 possible4))) (and (= temp___176 possible3) (and (and (and (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (not (exists ((i1 Int)) (and (and (<= (to_rep1 (first (rt s))) i1) (<= i1 (- courant3 1))) (exists ((j1 Int)) (and (and (<= (to_rep1 (first (rt c))) j1) (<= j1 (to_rep1 (last (rt c))))) (= (to_rep (select (elts s) i1)) (to_rep (select (elts c) j1))))))))) (and (<= (to_rep1 (first (rt c))) possible4) (<= possible4 (to_rep1 (last (rt c)))))) (not (exists ((j1 Int)) (and (and (<= (to_rep1 (first (rt c))) j1) (<= j1 (- possible4 1))) (= (to_rep (select (elts s) courant3)) (to_rep (select (elts c) j1))))))) (and (=> (<= 1 2147483647) (in_range2 possible4)) (and (and (and (and (and (and (<= (to_rep1 (first (rt c))) possible4) (<= possible4 (to_rep1 (last (rt c))))) (= o4 possible4)) (= o5 (select (elts c) o4))) (= o6 (to_rep o5))) (and (and (and (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (= o2 courant3)) (= o3 (select (elts s) o2))) (= o7 (to_rep o3))) (= result4 (ite (= o7 o6) true false)))) (and (= result4 true) (and (= indexbis__result2 result5) (= indexbis__result3 courant3)))))))) (and (and (and (and (= temp___176 possible3) (and (and (and (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (not (exists ((i1 Int)) (and (and (<= (to_rep1 (first (rt s))) i1) (<= i1 (- courant3 1))) (exists ((j1 Int)) (and (and (<= (to_rep1 (first (rt c))) j1) (<= j1 (to_rep1 (last (rt c))))) (= (to_rep (select (elts s) i1)) (to_rep (select (elts c) j1))))))))) (and (<= (to_rep1 (first (rt c))) possible4) (<= possible4 (to_rep1 (last (rt c)))))) (not (exists ((j1 Int)) (and (and (<= (to_rep1 (first (rt c))) j1) (<= j1 (- possible4 1))) (= (to_rep (select (elts s) courant3)) (to_rep (select (elts c) j1))))))) (and (=> (<= 1 2147483647) (in_range2 possible4)) (and (and (and (= indexbis__result2 indexbis__result4) (= possible4 possible5)) (and (= indexbis__result5 indexbis__result2) (= possible6 possible4))) (and (and (and (and (and (and (<= (to_rep1 (first (rt c))) possible4) (<= possible4 (to_rep1 (last (rt c))))) (= o4 possible4)) (= o5 (select (elts c) o4))) (= o6 (to_rep o5))) (and (and (and (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (= o2 courant3)) (= o3 (select (elts s) o2))) (= o7 (to_rep o3))) (= result4 (ite (= o7 o6) true false)))) (and (not (= result4 true)) (not (< possible4 (to_rep1 (last (rt c))))))))))) (and (and (= indexbis__result20 (mk_int__ref indexbis__result4)) (= possible21 (mk_int__ref possible5))) (and (= indexbis__result7 indexbis__result5) (= possible8 possible6)))) (and (and (= indexbis__result19 indexbis__result20) (= possible20 possible21)) (and (= indexbis__result9 indexbis__result7) (= possible10 possible8)))) (and (and (and (= indexbis__result11 (mk_int__ref indexbis__result10)) (= possible19 possible20)) (and (= indexbis__result12 indexbis__result10) (= possible12 possible10))) (and (not (< courant3 (to_rep1 (last (rt s))))) (and (= (mk_int__ref result6) indexbis__result19) (= indexbis__result10 0))))))))
(assert (= indexbis__result17 indexbis__result15))
(assert (= possible17 possible15))
(assert (= courant8 courant6))
(assert (= indexbis__result18 indexbis__result16))
(assert (= possible18 possible16))
(assert (= courant9 courant7))
(assert (not (= (int__content indexbis__result17) 0)))
(assert (<= (to_rep1 (first (rt s))) (int__content indexbis__result17)))
(assert (<= (int__content indexbis__result17) (to_rep1 (last (rt s)))))
(assert (<= (to_rep1 (first (rt s))) i))
(assert (<= i (- (int__content indexbis__result17) 1)))
(assert (<= (to_rep1 (first (rt c))) j))
(assert (<= j (to_rep1 (last (rt c)))))
(assert (not (<= (to_rep1 (first (rt c))) j)))
(check-sat)
(exit)
