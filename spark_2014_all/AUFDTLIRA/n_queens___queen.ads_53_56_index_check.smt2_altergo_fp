(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : index -> int

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,index) farray
}

logic slide : (int,index) farray, int, int -> (int,index) farray

axiom slide_eq :
  (forall a:(int,index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,index) farray, int, int, (int,index) farray, int,
  int -> (int,index) farray

axiom concat_def :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : index, int -> (int,index) farray

axiom singleton_def :
  (forall v:index.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,index) farray, int, int, (int,index) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,index) farray. forall a__first:int. forall a__last:int.
  forall b:(int,index) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,index) farray, int, int, (int,index) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic consistent : (int,index) farray, int -> bool

logic consistent__function_guard : bool, (int,index) farray, int -> prop

axiom consistent__post_axiom : true

axiom consistent__def_axiom :
  (forall b:(int,index) farray.
  (forall k:int [consistent(b, k)]. ((consistent(b, k) = true) <->
  (forall i:int. (((1 <= i) and (i <= k)) ->
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (((not (to_rep((b[i])) = to_rep((b[j])))) and
  (not ((i - j) = (to_rep((b[i])) - to_rep((b[j])))))) and
  (not ((i - j) = (to_rep((b[j])) - to_rep((b[i])))))))))))))

logic copy_until : (int,index) farray, int,
  (int,index) farray -> (int,index) farray

logic copy_until__function_guard : (int,index) farray, (int,index) farray,
  int, (int,index) farray -> prop

axiom copy_until__post_axiom :
  (forall b:(int,index) farray. forall c:(int,index) farray.
  (forall i:int [copy_until(b, i, c)]. (in_range1(i) ->
  (forall j:int. (((1 <= j) and (j <= i)) -> (to_rep((copy_until(b, i,
  c)[j])) = to_rep((b[j]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c : (int,index) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic b : (int,index) farray

logic done__ : bool

logic r : int

logic j : int

logic o : int

logic o1 : index

logic o2 : int

logic o3 : int

logic o4 : bool

logic temp___192 : (int,index) farray

logic temp___191 : bool

logic temp___190 : int

logic temp___189 : (int,index) farray

logic j1 : int

logic o5 : int

logic o6 : index

logic o7 : int

logic o8 : bool

logic o9 : bool

logic o10 : index

logic o11 : (int,index) farray

logic o12 : (int,index) farray

logic j2 : int

logic o13 : int

logic o14 : index

logic o15 : int

logic b1 : (int,index) farray

logic done__1 : bool

logic result : int

logic r1 : int

logic b2 : (int,index) farray

logic done__2 : bool

logic r2 : int

logic result1 : (int,index) farray

logic b3 : (int,index) farray

logic b4 : (int,index) farray

logic done__3 : bool

logic b5 : (int,index) farray

logic done__4 : bool

logic result2 : int

logic r3 : int

logic b6 : (int,index) farray

logic done__5 : bool

logic r4 : int

logic b7 : (int,index) farray

logic done__6 : bool

logic r5 : int

logic b8 : (int,index) farray

logic done__7 : bool

logic r6 : int

logic b9 : (int,index) farray

logic done__8 : bool

logic r7 : int

logic b10 : (int,index) farray

logic done__9 : bool

logic r8 : int

logic b11 : (int,index) farray

logic done__10 : bool

logic r9 : int

logic b12 : (int,index) farray

logic done__11 : bool

logic r10 : int

logic b13 : (int,index) farray

logic done__12 : bool

logic r11 : int

axiom H : in_range1(i)

axiom H1 : (((not (done__ = true)) and
  (forall j3:int. (((1 <= j3) and (j3 <= (i - 1))) ->
  (to_rep((c[j3])) = to_rep((b[j3])))))) and ((1 <  i) -> (consistent(b,
  (i - 1)) = true)))

axiom H2 : (result = r)

axiom H3 : (r1 = 1)

axiom H4 : (((1 <= r1) and (r1 <= 8)) -> (((temp___192 = b) and
  ((temp___191 = done__) and ((temp___190 = r1) and ((temp___189 = b) and
  ((((not (done__2 = true)) and
  (forall j3:int. (((1 <= j3) and (j3 <= (i - 1))) ->
  (to_rep((b2[j3])) = to_rep((temp___192[j3])))))) and
  ((to_rep((c[i])) <  r2) -> (not (consistent(c, 8) = true)))) and
  ((((1 <= 8) -> in_range1(r2)) and ((1 <= r2) and (r2 <= 8))) and
  ((((to_rep(o10) = r2) and (o11 = (b2[i <- o10]))) and ((b2 = result1) and
  (b3 = o11))) and ((((to_rep((c[i])) = r2) -> ((((done__3 = true) ->
  (consistent(b4, 8) = true)) and ((not (done__3 = true)) ->
  (not (consistent(c, 8) = true)))) and
  (forall j3:int. (((1 <= j3) and (j3 <= i)) ->
  (to_rep((b4[j3])) = to_rep((b3[j3]))))))) and
  ((not (to_rep((c[i])) = r2)) -> ((((o12 = copy_until(b3, i, c)) and
  (forall j3:int. (((1 <= j3) and (j3 <= i)) ->
  (to_rep((o12[j3])) = to_rep((b3[j3])))))) and ((((done__4 = true) ->
  (consistent(b5, 8) = true)) and ((not (done__4 = true)) ->
  (not (consistent(o12, 8) = true)))) and
  (forall j3:int. (((1 <= j3) and (j3 <= i)) ->
  (to_rep((b5[j3])) = to_rep((b3[j3]))))))) and ((done__3 = done__4) and
  (b4 = b5))))) and ((done__3 = true) or ((not (done__3 = true)) and
  (r2 = 8))))))))))) and (((r2 = r6) and ((done__3 = done__7) and
  (b4 = b8))) and ((r7 = r2) and ((done__8 = done__3) and (b9 = b4))))))

axiom H5 : (((1 <= r1) and (r1 <= 8)) -> (r8 = r6))

axiom H6 : (((1 <= r1) and (r1 <= 8)) -> (done__9 = done__7))

axiom H7 : (((1 <= r1) and (r1 <= 8)) -> (b10 = b8))

axiom H8 : (((1 <= r1) and (r1 <= 8)) -> (r9 = r7))

axiom H9 : (((1 <= r1) and (r1 <= 8)) -> (done__10 = done__8))

axiom H10 : (((1 <= r1) and (r1 <= 8)) -> (b11 = b9))

axiom H11 : ((not ((1 <= r1) and (r1 <= 8))) -> (r1 = r8))

axiom H12 : ((not ((1 <= r1) and (r1 <= 8))) -> (done__9 = done__))

axiom H13 : ((not ((1 <= r1) and (r1 <= 8))) -> (b10 = b))

axiom H14 : ((not ((1 <= r1) and (r1 <= 8))) -> (r9 = r1))

axiom H15 : ((not ((1 <= r1) and (r1 <= 8))) -> (done__10 = done__1))

axiom H16 : ((not ((1 <= r1) and (r1 <= 8))) -> (b11 = b1))

axiom H17 : (r10 = r8)

axiom H18 : (done__11 = done__9)

axiom H19 : (b12 = b10)

axiom H20 : (r11 = r9)

axiom H21 : (done__12 = done__10)

axiom H22 : (b13 = b11)

axiom H23 : (1 <= j2)

axiom H24 : (j2 <= (i - 1))

 (* File "queen.ads", line 19, characters 0-0 *)
goal WP_parameter_def : (1 <= j2)
