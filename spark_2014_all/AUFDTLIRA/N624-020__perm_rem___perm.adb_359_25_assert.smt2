(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort true_bool 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (true_bool true_bool) Bool)
(declare-const dummy1 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 1)) (in_range2 temp___expr_136)))
(declare-sort index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant1 ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 100)) (in_range3 temp___expr_142)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort integer 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range4 f) (=> (in_range4 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range4 low) (and (in_range4 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(define-fun dynamic_invariant2 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property 1 100 (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant2 a true true true) (dynamic_invariant1 i true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant2 result true false true)))) :pattern ((remove a i))))))
(declare-fun remove_swap (us_t Int Int) Int)
(declare-fun remove_swap__function_guard (Int us_t Int Int) Bool)
(assert (forall ((a us_t)) (forall ((i1 Int) (i2 Int)) (! (=> (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant1 i1 true true true)) (dynamic_invariant1 i2 true true true)) (and (= (invariant__ a) true) (and (and (<= (first1 a) i1) (<= i1 (last1 a))) (and (and (<= (first1 a) i2) (<= i2 (last1 a))) (< i1 i2))))) (let ((result (remove_swap a i1 i2))) (and (=> (= (of_int result) true) (= (let ((temp___160 (remove (remove a i2) i1))) (let ((temp___159 (remove (remove a i1) (- i2 1)))) (bool_eq (to_array temp___159) (first1 temp___159) (last1 temp___159) (to_array temp___160) (first1 temp___160) (last1 temp___160)))) true)) (dynamic_invariant result true false true)))) :pattern ((remove_swap a i1 i2))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-fun perm_symmetric (us_t us_t) Int)
(declare-fun perm_symmetric__function_guard (Int us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (is_perm a b) true)))) (let ((result (perm_symmetric a b))) (and (=> (= (of_int result) true) (= (is_perm b a) true)) (dynamic_invariant result true false true)))) :pattern ((perm_symmetric a b)))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ia Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const ib Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun get_witness (us_t us_t Int) Int)
(declare-fun get_witness__function_guard (Int us_t us_t Int) Bool)
(assert (forall ((a1 us_t) (b1 us_t)) (forall ((ia1 Int)) (! (=> (and (and (and (dynamic_invariant2 a1 true true true) (dynamic_invariant2 b1 true true true)) (dynamic_invariant1 ia1 true true true)) (and (= (invariant__ a1) true) (and (= (invariant__ b1) true) (and (and (<= (first1 a1) ia1) (<= ia1 (last1 a1))) (exists ((ib1 Int)) (and (and (<= (first1 b1) ib1) (<= ib1 (last1 b1))) (and (= (to_rep (select (to_array a1) ia1)) (to_rep (select (to_array b1) ib1))) (= (is_perm (remove a1 ia1) (remove b1 ib1)) true)))))))) (let ((result (get_witness a1 b1 ia1))) (and (and (and (<= (first1 b1) result) (<= result (last1 b1))) (and (= (to_rep (select (to_array a1) ia1)) (to_rep (select (to_array b1) result))) (= (is_perm (remove a1 ia1) (remove b1 result)) true))) (dynamic_invariant1 result true false true)))) :pattern ((get_witness a1 b1 ia1))))))
(declare-fun shift_perm_l (us_t us_t us_t) Int)
(declare-fun shift_perm_l__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a1 us_t) (b1 us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant2 a1 true true true) (dynamic_invariant2 b1 true true true)) (dynamic_invariant2 c true true true)) (and (= (invariant__ a1) true) (and (= (invariant__ b1) true) (and (= (invariant__ c) true) (and (= (bool_eq (to_array a1) (first1 a1) (last1 a1) (to_array c) (first1 c) (last1 c)) true) (= (is_perm a1 b1) true)))))) (let ((result (shift_perm_l a1 b1 c))) (and (=> (= (of_int result) true) (= (is_perm c b1) true)) (dynamic_invariant result true false true)))) :pattern ((shift_perm_l a1 b1 c)))))
(declare-fun extended_perm (us_t us_t) Int)
(declare-fun extended_perm__function_guard (Int us_t us_t) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const ib2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const aa us_t)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const bb us_t)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const bb2 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_15)))
(assert (= ib2 (get_witness a b ia)))
(assert (= aa (remove a ia)))
(assert (= bb (remove b ib)))
(assert (= bb2 (remove b ib2)))
(declare-const h Int)
(declare-const ia2 Int)
(declare-const perm__remove_perm__result Int)
(declare-const o Int)
(declare-const perm__remove_perm__ib2__assume Int)
(declare-const perm__remove_perm__aa__assume (Array Int natural))
(declare-const perm__remove_perm__aa__assume1 t)
(declare-const perm__remove_perm__bb__assume (Array Int natural))
(declare-const perm__remove_perm__bb__assume1 t)
(declare-const perm__remove_perm__bb2__assume (Array Int natural))
(declare-const perm__remove_perm__bb2__assume1 t)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 (Array Int natural))
(declare-const o8 t)
(declare-const o9 (Array Int natural))
(declare-const o10 t)
(declare-const o11 (Array Int natural))
(declare-const o12 t)
(declare-const o13 Int)
(declare-const perm__remove_perm__result1 Int)
(declare-const result Int)
(declare-const h1 Int)
(declare-const perm__remove_perm__result2 Int)
(declare-const result1 Int)
(declare-const h2 Int)
(declare-const result2 Int)
(declare-const h3 Int)
(declare-const result3 int__ref)
(declare-const ia21 Int)
(declare-const result4 int__ref)
(declare-const h4 Int)
(declare-const result5 int__ref)
(declare-const h5 Int)
(define-fun o14 () us_t (mk___t o11 o12))
(define-fun o15 () us_t (mk___t o9 o10))
(define-fun o16 () us_t (mk___t o7 o8))
(define-fun perm__remove_perm__bb2__assume2 () us_t (mk___t perm__remove_perm__bb2__assume perm__remove_perm__bb2__assume1))
(define-fun perm__remove_perm__bb__assume2 () us_t (mk___t perm__remove_perm__bb__assume perm__remove_perm__bb__assume1))
(define-fun perm__remove_perm__aa__assume2 () us_t (mk___t perm__remove_perm__aa__assume perm__remove_perm__aa__assume1))
(assert (dynamic_invariant2 a true false true))
(assert (dynamic_invariant2 b true false true))
(assert (in_range3 ia))
(assert (in_range3 ib))
(assert (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (to_rep1 (first (rt a))) ia) (<= ia (to_rep1 (last (rt a))))) (and (and (<= (to_rep1 (first (rt b))) ib) (<= ib (to_rep1 (last (rt b))))) (and (= (is_perm a b) true) (= (to_rep (select (elts a) ia)) (to_rep (select (elts b) ib)))))))))
(assert (and (= o (extended_perm a b)) (and (in_range2 o) (=> (= (of_int o) true) (forall ((ia3 Int)) (=> (and (<= (to_rep1 (first (rt a))) ia3) (<= ia3 (to_rep1 (last (rt a))))) (exists ((ib3 Int)) (and (and (<= (to_rep1 (first (rt b))) ib3) (<= ib3 (to_rep1 (last (rt b))))) (and (= (to_rep (select (elts a) ia3)) (to_rep (select (elts b) ib3))) (= (is_perm (remove a ia3) (remove b ib3)) true))))))))))
(assert (= (mk_int__ref result) (mk_int__ref h)))
(assert (= h1 o))
(assert (in_range2 h1))
(assert (and (= perm__remove_perm__ib2__assume (get_witness a b ia)) (and (in_range3 perm__remove_perm__ib2__assume) (and (and (<= (to_rep1 (first (rt b))) perm__remove_perm__ib2__assume) (<= perm__remove_perm__ib2__assume (to_rep1 (last (rt b))))) (and (= (to_rep (select (elts a) ia)) (to_rep (select (elts b) perm__remove_perm__ib2__assume))) (= (is_perm (remove a ia) (remove b perm__remove_perm__ib2__assume)) true))))))
(assert (= perm__remove_perm__ib2__assume ib2))
(assert (in_range3 ib2))
(assert (and (= perm__remove_perm__aa__assume2 (remove a ia)) (and (dynamic_invariant2 perm__remove_perm__aa__assume2 true false true) (and (= (invariant__ perm__remove_perm__aa__assume2) true) (and (= (to_rep1 (last perm__remove_perm__aa__assume1)) (- (to_rep1 (last (rt a))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ia 1))) (= (to_rep (select (elts a) k)) (to_rep (select perm__remove_perm__aa__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ ia 1) k) (<= k (to_rep1 (last (rt a))))) (= (to_rep (select (elts a) k)) (to_rep (select perm__remove_perm__aa__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= ia k) (<= k (- (to_rep1 (last (rt a))) 1))) (= (to_rep (select (elts a) (+ k 1))) (to_rep (select perm__remove_perm__aa__assume k))))))))))))
(assert (= perm__remove_perm__aa__assume2 aa))
(assert (dynamic_invariant2 aa true false true))
(assert (and (= perm__remove_perm__bb__assume2 (remove b ib)) (and (dynamic_invariant2 perm__remove_perm__bb__assume2 true false true) (and (= (invariant__ perm__remove_perm__bb__assume2) true) (and (= (to_rep1 (last perm__remove_perm__bb__assume1)) (- (to_rep1 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ib 1))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ ib 1) k) (<= k (to_rep1 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= ib k) (<= k (- (to_rep1 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select perm__remove_perm__bb__assume k))))))))))))
(assert (= perm__remove_perm__bb__assume2 bb))
(assert (dynamic_invariant2 bb true false true))
(assert (and (= perm__remove_perm__bb2__assume2 (remove b ib2)) (and (dynamic_invariant2 perm__remove_perm__bb2__assume2 true false true) (and (= (invariant__ perm__remove_perm__bb2__assume2) true) (and (= (to_rep1 (last perm__remove_perm__bb2__assume1)) (- (to_rep1 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ib2 1))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb2__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ ib2 1) k) (<= k (to_rep1 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb2__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= ib2 k) (<= k (- (to_rep1 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select perm__remove_perm__bb2__assume k))))))))))))
(assert (= perm__remove_perm__bb2__assume2 bb2))
(assert (dynamic_invariant2 bb2 true false true))
(assert (=> (<= 1 100) (in_range3 ia2)))
(assert (not (= ib ib2)))
(assert (= perm__remove_perm__result2 perm__remove_perm__result))
(assert (= perm__remove_perm__result2 perm__remove_perm__result1))
(assert (and (= o1 (perm_symmetric aa bb2)) (and (in_range2 o1) (=> (= (of_int o1) true) (= (is_perm bb2 aa) true)))))
(assert (= h1 result1))
(assert (= h2 o1))
(assert (= (of_int h2) true))
(assert (and (= o2 (extended_perm bb2 aa)) (and (in_range2 o2) (=> (= (of_int o2) true) (forall ((ia3 Int)) (=> (and (<= (to_rep1 (first (rt bb2))) ia3) (<= ia3 (to_rep1 (last (rt bb2))))) (exists ((ib3 Int)) (and (and (<= (to_rep1 (first (rt aa))) ib3) (<= ib3 (to_rep1 (last (rt aa))))) (and (= (to_rep (select (elts bb2) ia3)) (to_rep (select (elts aa) ib3))) (= (is_perm (remove bb2 ia3) (remove aa ib3)) true))))))))))
(assert (= h2 result2))
(assert (= h3 o2))
(assert (= (of_int h3) true))
(assert (not (< ib ib2)))
(assert (and (= o3 (- ib 1)) (in_range3 (- ib 1))))
(assert (and (= o4 (get_witness bb2 aa o3)) (and (in_range3 o4) (and (and (<= (to_rep1 (first (rt aa))) o4) (<= o4 (to_rep1 (last (rt aa))))) (and (= (to_rep (select (elts bb2) o3)) (to_rep (select (elts aa) o4))) (= (is_perm (remove bb2 o3) (remove aa o4)) true))))))
(assert (= result3 (mk_int__ref ia2)))
(assert (= ia21 o4))
(assert (and (= o5 (remove_swap b ib2 ib)) (and (in_range2 o5) (=> (= (of_int o5) true) (= (let ((temp___157 (remove (remove b ib) ib2))) (let ((temp___156 (remove (remove b ib2) (- ib 1)))) (bool_eq (elts temp___156) (to_rep1 (first (rt temp___156))) (to_rep1 (last (rt temp___156))) (elts temp___157) (to_rep1 (first (rt temp___157))) (to_rep1 (last (rt temp___157)))))) true)))))
(assert (= result4 (mk_int__ref h3)))
(assert (= h4 o5))
(assert (= (of_int h4) true))
(assert (and (= o14 (remove bb ib2)) (and (dynamic_invariant2 o14 true false true) (and (= (invariant__ o14) true) (and (= (to_rep1 (last o12)) (- (to_rep1 (last (rt bb))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ib2 1))) (= (to_rep (select (elts bb) k)) (to_rep (select o11 k))))) (and (forall ((k Int)) (=> (and (<= (+ ib2 1) k) (<= k (to_rep1 (last (rt bb))))) (= (to_rep (select (elts bb) k)) (to_rep (select o11 (- k 1)))))) (forall ((k Int)) (=> (and (<= ib2 k) (<= k (- (to_rep1 (last (rt bb))) 1))) (= (to_rep (select (elts bb) (+ k 1))) (to_rep (select o11 k))))))))))))
(assert (and (= o15 (remove aa ia21)) (and (dynamic_invariant2 o15 true false true) (and (= (invariant__ o15) true) (and (= (to_rep1 (last o10)) (- (to_rep1 (last (rt aa))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ia21 1))) (= (to_rep (select (elts aa) k)) (to_rep (select o9 k))))) (and (forall ((k Int)) (=> (and (<= (+ ia21 1) k) (<= k (to_rep1 (last (rt aa))))) (= (to_rep (select (elts aa) k)) (to_rep (select o9 (- k 1)))))) (forall ((k Int)) (=> (and (<= ia21 k) (<= k (- (to_rep1 (last (rt aa))) 1))) (= (to_rep (select (elts aa) (+ k 1))) (to_rep (select o9 k))))))))))))
(assert (and (= o6 (- ib 1)) (in_range3 (- ib 1))))
(assert (and (= o16 (remove bb2 o6)) (and (dynamic_invariant2 o16 true false true) (and (= (invariant__ o16) true) (and (= (to_rep1 (last o8)) (- (to_rep1 (last (rt bb2))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- o6 1))) (= (to_rep (select (elts bb2) k)) (to_rep (select o7 k))))) (and (forall ((k Int)) (=> (and (<= (+ o6 1) k) (<= k (to_rep1 (last (rt bb2))))) (= (to_rep (select (elts bb2) k)) (to_rep (select o7 (- k 1)))))) (forall ((k Int)) (=> (and (<= o6 k) (<= k (- (to_rep1 (last (rt bb2))) 1))) (= (to_rep (select (elts bb2) (+ k 1))) (to_rep (select o7 k))))))))))))
(assert (and (= o13 (shift_perm_l o16 o15 o14)) (and (in_range2 o13) (=> (= (of_int o13) true) (= (is_perm o14 o15) true)))))
(assert (= result5 (mk_int__ref h4)))
(assert (= h5 o13))
(assert (not (= (of_int h5) true)))
(check-sat)
(exit)
