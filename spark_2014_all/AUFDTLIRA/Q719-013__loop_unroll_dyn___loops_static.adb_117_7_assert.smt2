(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(define-fun dynamic_invariant2 ((temp___expr_142 us_t) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (not (= temp___skip_constant_140 true)) (dynamic_property (- 2147483648) 2147483647 (first1 temp___expr_142) (last1 temp___expr_142))))
(declare-const a (Array Int natural))
(declare-const bad Bool)
(declare-const i Int)
(declare-const j Int)
(declare-const o natural)
(declare-const o1 Int)
(declare-const o2 (Array Int natural))
(declare-const temp___337 Bool)
(declare-const o3 Int)
(declare-const o4 natural)
(declare-const o5 Int)
(declare-const o6 Bool)
(declare-const j1 Int)
(declare-const o7 natural)
(declare-const o8 Int)
(declare-const o9 (Array Int natural))
(declare-const temp___3371 Bool)
(declare-const o10 Int)
(declare-const o11 natural)
(declare-const o12 Int)
(declare-const o13 Bool)
(declare-const j2 Int)
(declare-const j3 Int)
(declare-const result Bool)
(declare-const bad1 Bool)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 (Array Int natural))
(declare-const a1 (Array Int natural))
(declare-const result3 Bool)
(declare-const bad2 Bool)
(declare-const result4 Int)
(declare-const j4 Int)
(declare-const bad3 Bool)
(declare-const j5 Int)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const bad4 Bool)
(declare-const bad5 Bool)
(declare-const j6 Int)
(declare-const bad6 Bool)
(declare-const j7 Int)
(declare-const bad7 Bool)
(declare-const j8 Int)
(declare-const bad8 Bool)
(declare-const j9 Int)
(declare-const bad9 Bool)
(declare-const j10 Int)
(declare-const bad10 Bool)
(declare-const j11 Int)
(declare-const bad11 Bool)
(declare-const j12 Int)
(declare-const bad12 Bool)
(declare-const j13 Int)
(declare-const result7 Int)
(declare-const i2 Int)
(declare-const result8 map__ref)
(declare-const a2 (Array Int natural))
(declare-const result9 bool__ref)
(declare-const bad13 Bool)
(declare-const result10 int__ref)
(declare-const j14 Int)
(declare-const bad14 Bool)
(declare-const j15 Int)
(declare-const result11 Bool)
(declare-const result12 bool__ref)
(declare-const bad15 Bool)
(declare-const bad16 bool__ref)
(declare-const bad17 Bool)
(declare-const bad18 bool__ref)
(declare-const j16 int__ref)
(declare-const bad19 Bool)
(declare-const j17 Int)
(declare-const bad20 bool__ref)
(declare-const j18 int__ref)
(declare-const bad21 Bool)
(declare-const j19 Int)
(declare-const bad22 bool__ref)
(declare-const j20 int__ref)
(declare-const bad23 Bool)
(declare-const j21 Int)
(declare-const bad24 bool__ref)
(declare-const j22 int__ref)
(declare-const bad25 Bool)
(declare-const j23 Int)
(assert (dynamic_property (- 2147483648) 2147483647 (to_rep1 a__first) (to_rep1 a__last)))
(assert (= result bad))
(assert (= bad1 (of_int 0)))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (= (to_rep o) 0))
(assert (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
(assert (= o1 i1))
(assert (= o2 (store a o1 o)))
(assert (= (mk_map__ref result2) (mk_map__ref a)))
(assert (= a1 o2))
(assert (=> (= i1 (to_rep1 a__first)) (= bad1 result3)))
(assert (=> (= i1 (to_rep1 a__first)) (= bad2 (of_int 0))))
(assert (=> (= i1 (to_rep1 a__first)) (= (mk_int__ref j12) (mk_int__ref j))))
(assert (=> (= i1 (to_rep1 a__first)) (= bad2 bad11)))
(assert (=> (= i1 (to_rep1 a__first)) (= j13 j3)))
(assert (=> (= i1 (to_rep1 a__first)) (= bad12 bad2)))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (= (mk_int__ref result4) (mk_int__ref j)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (= j4 (to_rep1 a__first)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= temp___337 bad1)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (and (<= (to_rep1 a__first) j5) (<= j5 i1))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (and (<= (to_rep1 a__first) j5) (<= j5 (to_rep1 a__last)))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= o3 j5)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= o4 (select a1 o3))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= o5 (to_rep o4))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= o6 (ite (= o5 0) true false))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= result5 (ite (not (= o6 true)) true false))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (=> (= result5 true) (= bad3 result6))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (=> (= result5 true) (= bad4 (of_int 1)))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (=> (not (= result5 true)) (= bad4 bad3))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= j5 i1)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= j5 j6)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= bad4 bad5)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= j7 j5)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= bad6 bad4)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= (mk_int__ref j8) (mk_int__ref j6))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= (mk_bool__ref bad7) (mk_bool__ref bad5))))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= j9 j7)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j4) (<= j4 i1)) (= bad8 bad6)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j4) (<= j4 i1))) (= j4 j8)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j4) (<= j4 i1))) (= bad1 bad7)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j4) (<= j4 i1))) (= j9 j4)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j4) (<= j4 i1))) (= bad8 bad1)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (= (mk_int__ref j10) (mk_int__ref j8)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (= (mk_bool__ref bad9) (mk_bool__ref bad7)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (= j11 j9))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (= i1 (to_rep1 a__last)) (= bad10 bad8))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (not (= i1 (to_rep1 a__last))) (= (mk_int__ref j10) (mk_int__ref j)))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (not (= i1 (to_rep1 a__last))) (= bad1 bad9))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (not (= i1 (to_rep1 a__last))) (= j11 j3))))
(assert (=> (not (= i1 (to_rep1 a__first))) (=> (not (= i1 (to_rep1 a__last))) (= bad10 bad1))))
(assert (=> (not (= i1 (to_rep1 a__first))) (= (mk_int__ref j12) (mk_int__ref j10))))
(assert (=> (not (= i1 (to_rep1 a__first))) (= (mk_bool__ref bad11) (mk_bool__ref bad9))))
(assert (=> (not (= i1 (to_rep1 a__first))) (= j13 j11)))
(assert (=> (not (= i1 (to_rep1 a__first))) (= bad12 bad10)))
(assert (forall ((j24 Int)) (=> (and (<= (to_rep1 a__first) j24) (<= j24 i1)) (= (to_rep (select a1 j24)) 0))))
(assert (= i1 result7))
(assert (= i2 2))
(assert (= (to_rep o7) 0))
(assert (and (<= (to_rep1 a__first) i2) (<= i2 (to_rep1 a__last))))
(assert (= o8 i2))
(assert (= o9 (store a1 o8 o7)))
(assert (= result8 (mk_map__ref a1)))
(assert (= a2 o9))
(assert (=> (= i2 (to_rep1 a__first)) (= result9 (mk_bool__ref bad11))))
(assert (=> (= i2 (to_rep1 a__first)) (= bad13 (of_int 0))))
(assert (=> (= i2 (to_rep1 a__first)) (= j22 (mk_int__ref j12))))
(assert (=> (= i2 (to_rep1 a__first)) (= bad24 (mk_bool__ref bad13))))
(assert (=> (= i2 (to_rep1 a__first)) (= j23 j13)))
(assert (=> (= i2 (to_rep1 a__first)) (= bad25 bad13)))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (= result10 (mk_int__ref j12)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (= j14 (to_rep1 a__first)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= temp___3371 bad11)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (and (<= (to_rep1 a__first) j15) (<= j15 i2))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (and (<= (to_rep1 a__first) j15) (<= j15 (to_rep1 a__last)))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= o10 j15)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= o11 (select a2 o10))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= o12 (to_rep o11))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= o13 (ite (= o12 0) true false))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= result11 (ite (not (= o13 true)) true false))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (=> (= result11 true) (= result12 (mk_bool__ref bad14)))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (=> (= result11 true) (= bad15 (of_int 1)))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (=> (= result11 true) (= bad16 (mk_bool__ref bad15)))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (=> (= result11 true) (= bad17 bad15))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (=> (not (= result11 true)) (= bad16 (mk_bool__ref bad14)))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (=> (not (= result11 true)) (= bad17 bad14))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= j15 i2)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= j16 (mk_int__ref j15))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= bad18 bad16)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= j17 j15)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= bad19 bad17)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= j18 j16)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= bad20 bad18)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= j19 j17)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (and (<= (to_rep1 a__first) j14) (<= j14 i2)) (= bad21 bad19)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j14) (<= j14 i2))) (= j18 (mk_int__ref j14))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j14) (<= j14 i2))) (= bad20 (mk_bool__ref bad11))))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j14) (<= j14 i2))) (= j19 j14)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (=> (not (and (<= (to_rep1 a__first) j14) (<= j14 i2))) (= bad21 bad12)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (= j20 j18))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (= bad22 bad20))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (= j21 j19))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (= i2 (to_rep1 a__last)) (= bad23 bad21))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (not (= i2 (to_rep1 a__last))) (= j20 (mk_int__ref j12)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (not (= i2 (to_rep1 a__last))) (= bad22 (mk_bool__ref bad11)))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (not (= i2 (to_rep1 a__last))) (= j21 j13))))
(assert (=> (not (= i2 (to_rep1 a__first))) (=> (not (= i2 (to_rep1 a__last))) (= bad23 bad12))))
(assert (=> (not (= i2 (to_rep1 a__first))) (= j22 j20)))
(assert (=> (not (= i2 (to_rep1 a__first))) (= bad24 bad22)))
(assert (=> (not (= i2 (to_rep1 a__first))) (= j23 j21)))
(assert (=> (not (= i2 (to_rep1 a__first))) (= bad25 bad23)))
(assert (forall ((j24 Int)) (=> (and (<= (to_rep1 a__first) j24) (<= j24 i2)) (= (to_rep (select a2 j24)) 0))))
(assert (not false))
(check-sat)
(exit)
