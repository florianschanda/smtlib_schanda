(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(declare-fun to_rep (positive) Int)
(declare-fun of_rep (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index_count 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_count index_count) Bool)
(declare-const dummy1 index_count)
(declare-datatypes () ((index_count__ref (mk_index_count__ref (index_count__content index_count)))))
(define-fun index_count__ref___projection ((a index_count__ref)) index_count (index_count__content a))
(declare-fun to_rep1 (index_count) Int)
(declare-fun of_rep1 (Int) index_count)
(assert (forall ((x index_count)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x index_count)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant1 ((temp___expr_305 Int) (temp___is_init_302 Bool) (temp___skip_constant_303 Bool) (temp___do_toplevel_304 Bool)) Bool (=> (or (= temp___is_init_302 true) (<= 0 5)) (in_range3 temp___expr_305)))
(declare-fun to_rep2 (index) Int)
(declare-fun of_rep2 (Int) index)
(assert (forall ((x index)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x index)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int positive))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int positive) Int Int (Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (positive Int) (Array Int positive))
(assert (forall ((v positive)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int positive)) (a__first Int) (a__last Int) (b (Array Int positive)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array Int positive) Int Int (Array Int positive) Int Int) Int)
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort count_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (count_type count_type) Bool)
(declare-const dummy3 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep3 (count_type) Int)
(declare-fun of_rep3 (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x count_type)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__partition_refinement__inverse_sets__map__capacity count_type)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) count_type (rec__partition_refinement__inverse_sets__map__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__partition_refinement__inverse_sets__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type (rec__partition_refinement__inverse_sets__map a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___10__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___11__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep3 (rec__partition_refinement__inverse_sets__map__capacity (us_split_discrs1 a))) (to_rep3 (rec__partition_refinement__inverse_sets__map__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__partition_refinement__inverse_sets__map (us_split_fields1 a)) (rec__partition_refinement__inverse_sets__map (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const partition_refinement__inverse_sets__map__capacity__first__bit Int)
(declare-const partition_refinement__inverse_sets__map__capacity__last__bit Int)
(declare-const partition_refinement__inverse_sets__map__capacity__position Int)
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit))
(assert (< partition_refinement__inverse_sets__map__capacity__first__bit partition_refinement__inverse_sets__map__capacity__last__bit))
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep)))))
(define-fun map__ref___2__projection ((a map__ref1)) us_rep (map__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__partition_refinement__inverse_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node__2__projection ((a us_split_fields2)) count_type (rec__partition_refinement__inverse_sets__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___12__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep3 (rec__partition_refinement__inverse_sets__cursor__node (us_split_fields3 a))) (to_rep3 (rec__partition_refinement__inverse_sets__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const partition_refinement__inverse_sets__cursor__node__first__bit Int)
(declare-const partition_refinement__inverse_sets__cursor__node__last__bit Int)
(declare-const partition_refinement__inverse_sets__cursor__node__position Int)
(assert (<= 0 partition_refinement__inverse_sets__cursor__node__first__bit))
(assert (< partition_refinement__inverse_sets__cursor__node__first__bit partition_refinement__inverse_sets__cursor__node__last__bit))
(assert (<= 0 partition_refinement__inverse_sets__cursor__node__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___2__projection ((a cursor__ref)) us_rep1 (cursor__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun length (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(define-fun oeq ((left us_rep2) (right us_rep2)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun keys (us_rep) us_rep2)
(declare-fun keys__function_guard (us_rep2 us_rep) Bool)
(define-fun equivalent_keys ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)
(declare-fun oeq1 (us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)
(declare-fun oeq2 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard2 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)))))
(declare-fun length1 (us_rep) Int)
(declare-fun length__function_guard1 (Int us_rep) Bool)
(declare-fun length2 (Int us_rep) Int)
(declare-fun length__function_guard2 (Int Int us_rep) Bool)
(declare-sort key_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (key_type key_type) Bool)
(declare-const dummy7 key_type)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___3__projection ((a key_type__ref)) key_type (key_type__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq4 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 (us_rep3 us_rep3) Bool)
(declare-const dummy8 us_rep3)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep3)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep3 (map__content2 a))
(declare-fun has_key (us_rep3 Int) Bool)
(declare-fun has_key__function_guard (Bool us_rep3 Int) Bool)
(declare-sort extended_index 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (extended_index extended_index) Bool)
(declare-const dummy9 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)))))
(define-fun default_initial_assumption ((temp___expr_573 us_rep2) (temp___skip_top_level_574 Bool)) Bool (=> (not (= temp___skip_top_level_574 true)) (= (length temp___expr_573) 0)))
(define-fun iter_has_element ((container us_rep2) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep2 Int) Bool)
(define-fun k_bigger_than_range ((container us_rep2) (fst Int) (lst Int) (key Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< (get container i) key))) true false))
(declare-fun k_bigger_than_range__function_guard (Bool us_rep2 Int Int Int) Bool)
(define-fun k_smaller_than_range ((container us_rep2) (fst Int) (lst Int) (key Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< key (get container i)))) true false))
(declare-fun k_smaller_than_range__function_guard (Bool us_rep2 Int Int Int) Bool)
(define-fun k_is_find ((container us_rep2) (key Int) (position Int)) Bool (and (ite (< 0 position) (k_bigger_than_range container 1 (- position 1) key) (of_int 1)) (ite (< position (length container)) (k_smaller_than_range container (+ position 1) (length container) key) (of_int 1))))
(declare-fun k_is_find__function_guard (Bool us_rep2 Int Int) Bool)
(declare-fun find (us_rep2 Int) Int)
(declare-fun find__function_guard (Int us_rep2 Int) Bool)
(declare-fun model__ (us_rep) us_rep3)
(declare-fun model____function_guard (us_rep3 us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (keys container))) (and (and (and (= (length result) (length1 container)) (forall ((temp___607 Int)) (=> (and (in_range6 temp___607) (= (iter_has_element result temp___607) true)) (= (has_key (model__ container) (get result temp___607)) true)))) (forall ((key Int)) (=> (and (in_range5 key) (= (has_key (model__ container) key) true)) (and (< 0 (find result key)) (= (equivalent_keys (get result (find result key)) key) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length1 container))) (and (= (find result (get result i)) i) (= (k_is_find result (get result i) i) true)))))) :pattern ((keys container)))))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq5 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq10 (us_rep4 us_rep4) Bool)
(declare-const dummy10 us_rep4)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 us_rep4)))))
(define-fun map__ref___4__projection ((a map__ref3)) us_rep4 (map__content3 a))
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep1)))))
(define-fun key_type__ref___4__projection ((a key_type__ref1)) us_rep1 (key_type__content1 a))
(declare-fun has_key1 (us_rep4 us_rep1) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep1) Bool)
(declare-fun positions (us_rep) us_rep4)
(declare-fun positions__function_guard (us_rep4 us_rep) Bool)
(define-fun has_element ((container us_rep) (position us_rep1)) Bool (has_key1 (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(declare-fun has_element1 (Int us_rep us_rep1) Bool)
(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)
(assert true)
(declare-fun get1 (us_rep4 us_rep1) Int)
(declare-fun get__function_guard1 (Int us_rep4 us_rep1) Bool)
(define-fun key ((container us_rep) (position us_rep1)) Int (get (keys container) (get1 (positions container) position)))
(declare-fun key__function_guard (Int us_rep us_rep1) Bool)
(declare-fun key1 (Int us_rep us_rep1) Int)
(declare-fun key__function_guard1 (Int Int us_rep us_rep1) Bool)
(declare-sort key_type1 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (key_type1 key_type1) Bool)
(declare-const dummy11 key_type1)
(declare-datatypes () ((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___2__projection ((a key_type__ref2)) key_type1 (key_type__content2 a))
(define-fun dynamic_invariant2 ((temp___expr_497 Int) (temp___is_init_494 Bool) (temp___skip_constant_495 Bool) (temp___do_toplevel_496 Bool)) Bool (=> (or (= temp___is_init_494 true) (<= 1 2147483647)) (in_range7 temp___expr_497)))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (forall ((position us_rep1)) (! (dynamic_invariant2 (key1 attr__tag container position) true false true) :pattern ((key1 attr__tag container position)))))))
(declare-fun get2 (us_rep3 Int) Int)
(declare-fun get__function_guard2 (Int us_rep3 Int) Bool)
(define-fun element ((container us_rep) (position us_rep1)) Int (get2 (model__ container) (key container position)))
(declare-fun element__function_guard (Int us_rep us_rep1) Bool)
(declare-fun element1 (Int us_rep us_rep1) Int)
(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)
(declare-sort element_type 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (element_type element_type) Bool)
(declare-const dummy12 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___4__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_503 Int) (temp___is_init_500 Bool) (temp___skip_constant_501 Bool) (temp___do_toplevel_502 Bool)) Bool (=> (or (= temp___is_init_500 true) (<= 0 5)) (in_range8 temp___expr_503)))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (forall ((position us_rep1)) (! (dynamic_invariant3 (element1 attr__tag container position) true false true) :pattern ((element1 attr__tag container position)))))))
(define-fun contains ((container us_rep) (key2 Int)) Bool (has_key (model__ container) key2))
(declare-fun contains__function_guard (Bool us_rep Int) Bool)
(declare-fun contains1 (Int us_rep Int) Bool)
(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)
(assert true)
(define-fun element__2 ((container us_rep) (key2 Int)) Int (get2 (model__ container) key2))
(declare-fun element__2__function_guard (Int us_rep Int) Bool)
(declare-fun element__21 (Int us_rep Int) Int)
(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)
(assert (forall ((attr__tag Int) (key2 Int)) (forall ((container us_rep)) (! (=> (dynamic_invariant2 key2 true true true) (dynamic_invariant3 (element__21 attr__tag container key2) true false true)) :pattern ((element__21 attr__tag container key2))))))
(declare-fun keys_included (us_rep3 us_rep3) Bool)
(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)
(define-fun same_keys ((left us_rep3) (right us_rep3)) Bool (and (keys_included left right) (keys_included right left)))
(declare-fun same_keys__function_guard (Bool us_rep3 us_rep3) Bool)
(declare-fun elements_equal_except (us_rep3 us_rep3 Int) Bool)
(declare-fun elements_equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length left) (length right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun oeq3 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)
(declare-fun replace__specific_post (Int us_split_fields us_split_discrs Int Int us_split_fields) Bool)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const partition_refinement__inverse_sets__map__capacity__first__bit1 Int)
(declare-const partition_refinement__inverse_sets__map__capacity__last__bit1 Int)
(declare-const partition_refinement__inverse_sets__map__capacity__position1 Int)
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit1))
(assert (< partition_refinement__inverse_sets__map__capacity__first__bit1 partition_refinement__inverse_sets__map__capacity__last__bit1))
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__position1))
(declare-fun user_eq13 (us_rep us_rep) Bool)
(declare-const dummy13 us_rep)
(declare-datatypes () ((inverse_set__ref (mk_inverse_set__ref (inverse_set__content us_rep)))))
(define-fun inverse_set__ref___projection ((a inverse_set__ref)) us_rep (inverse_set__content a))
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq13 a b) (oeq1 a b)) :pattern ((user_eq13 a b)))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__partition_refinement__interval__first index) (rec__partition_refinement__interval__last index) (rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_First__projection ((a us_split_fields4)) index (rec__partition_refinement__interval__first a))
(define-fun us_split_fields_Last__projection ((a us_split_fields4)) index (rec__partition_refinement__interval__last a))
(define-fun us_split_fields_Count__projection ((a us_split_fields4)) index_count (rec__partition_refinement__interval__count a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep5 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep5)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq6 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (= (to_rep2 (rec__partition_refinement__interval__first (us_split_fields5 a))) (to_rep2 (rec__partition_refinement__interval__first (us_split_fields5 b)))) (= (to_rep2 (rec__partition_refinement__interval__last (us_split_fields5 a))) (to_rep2 (rec__partition_refinement__interval__last (us_split_fields5 b))))) (= (to_rep1 (rec__partition_refinement__interval__count (us_split_fields5 a))) (to_rep1 (rec__partition_refinement__interval__count (us_split_fields5 b))))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep5) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep5) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep5)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment6 a))))
(declare-const partition_refinement__interval__first__first__bit Int)
(declare-const partition_refinement__interval__first__last__bit Int)
(declare-const partition_refinement__interval__first__position Int)
(assert (<= 0 partition_refinement__interval__first__first__bit))
(assert (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))
(assert (<= 0 partition_refinement__interval__first__position))
(declare-const partition_refinement__interval__last__first__bit Int)
(declare-const partition_refinement__interval__last__last__bit Int)
(declare-const partition_refinement__interval__last__position Int)
(assert (<= 0 partition_refinement__interval__last__first__bit))
(assert (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))
(assert (<= 0 partition_refinement__interval__last__position))
(declare-const partition_refinement__interval__count__first__bit Int)
(declare-const partition_refinement__interval__count__last__bit Int)
(declare-const partition_refinement__interval__count__position Int)
(assert (<= 0 partition_refinement__interval__count__first__bit))
(assert (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))
(assert (<= 0 partition_refinement__interval__count__position))
(declare-fun user_eq14 (us_rep5 us_rep5) Bool)
(declare-const dummy14 us_rep5)
(declare-datatypes () ((interval__ref (mk_interval__ref (interval__content us_rep5)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep5 (interval__content a))
(declare-sort partition_index 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq15 (partition_index partition_index) Bool)
(declare-const dummy15 partition_index)
(declare-datatypes () ((partition_index__ref (mk_partition_index__ref (partition_index__content partition_index)))))
(define-fun partition_index__ref___projection ((a partition_index__ref)) partition_index (partition_index__content a))
(declare-fun to_rep4 (partition_index) Int)
(declare-fun of_rep4 (Int) partition_index)
(assert (forall ((x partition_index)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x partition_index)) (! (in_range9 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep5)))))
(define-fun element_type__ref___8__projection ((a element_type__ref1)) us_rep5 (element_type__content1 a))
(declare-sort capacity_range 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq16 (capacity_range capacity_range) Bool)
(declare-const dummy16 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type4 0)
(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs2)) capacity_range (rec__partition_refinement__partitions__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__partition_refinement__partitions__vector us_main_type4)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields6)) us_main_type4 (rec__partition_refinement__partitions__vector a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep6 (mk___rep3 (us_split_discrs3 us_split_discrs2) (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___14__projection ((a us_rep6)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___15__projection ((a us_rep6)) us_split_fields6 (us_split_fields7 a))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep6) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep6) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))
(declare-const partition_refinement__partitions__vector__capacity__first__bit Int)
(declare-const partition_refinement__partitions__vector__capacity__last__bit Int)
(declare-const partition_refinement__partitions__vector__capacity__position Int)
(assert (<= 0 partition_refinement__partitions__vector__capacity__first__bit))
(assert (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))
(assert (<= 0 partition_refinement__partitions__vector__capacity__position))
(declare-fun user_eq17 (us_rep6 us_rep6) Bool)
(declare-const dummy17 us_rep6)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep6)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep6 (vector__content a))
(declare-fun to_rep5 (capacity_range) Int)
(declare-fun of_rep5 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x capacity_range)) (! (in_range10 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range10 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(define-fun capacity ((container us_rep6)) Int (ite (= (of_int 1) true) (to_rep5 (rec__partition_refinement__partitions__vector__capacity (us_split_discrs3 container))) 10001))
(declare-fun capacity__function_guard (Int us_rep6) Bool)
(define-fun dynamic_invariant4 ((temp___expr_733 Int) (temp___is_init_730 Bool) (temp___skip_constant_731 Bool) (temp___do_toplevel_732 Bool)) Bool (=> (or (= temp___is_init_730 true) (<= 0 10001)) (in_range10 temp___expr_733)))
(declare-fun length3 (us_rep6) Int)
(declare-fun length__function_guard3 (Int us_rep6) Bool)
(assert (forall ((container us_rep6)) (! (let ((result (length3 container))) (and (<= result (capacity container)) (dynamic_invariant4 result true false true))) :pattern ((length3 container)))))
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 us_rep5)))))
(define-fun element_type__ref___9__projection ((a element_type__ref2)) us_rep5 (element_type__content2 a))
(declare-sort us_main_type5 0)
(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)
(declare-sort us_rep7 0)
(declare-fun bool_eq7 (us_rep7 us_rep7) Bool)
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep7) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep7) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep7)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep7)) (<= 0 (object__alignment8 a))))
(declare-fun user_eq18 (us_rep7 us_rep7) Bool)
(declare-const dummy18 us_rep7)
(declare-datatypes () ((sequence__ref1 (mk_sequence__ref1 (sequence__content1 us_rep7)))))
(define-fun sequence__ref___3__projection ((a sequence__ref1)) us_rep7 (sequence__content1 a))
(declare-fun get3 (us_rep7 Int) us_rep5)
(declare-fun get__function_guard3 (us_rep5 us_rep7 Int) Bool)
(declare-fun model__1 (us_rep6) us_rep7)
(declare-fun model____function_guard1 (us_rep7 us_rep6) Bool)
(define-fun element2 ((container us_rep6) (index1 Int)) us_rep5 (get3 (model__1 container) index1))
(declare-fun element__function_guard2 (us_rep5 us_rep6 Int) Bool)
(declare-fun length4 (us_rep7) Int)
(declare-fun length__function_guard4 (Int us_rep7) Bool)
(define-fun last1 ((container us_rep7)) Int (+ (- 1) (length4 container)))
(declare-fun last__function_guard1 (Int us_rep7) Bool)
(define-fun last_index ((container us_rep6)) Int (last1 (model__1 container)))
(declare-fun last_index__function_guard (Int us_rep6) Bool)
(declare-fun first_index__function_guard (Int us_rep6) Bool)
(define-fun equal_except1 ((left us_rep7) (right us_rep7) (position Int)) Bool (and (= (length4 left) (length4 right)) (ite (forall ((i Int)) (=> (and (<= 0 i) (<= i (last1 left))) (=> (not (= i position)) (= (bool_eq6 (get3 left i) (get3 right i)) true)))) true false)))
(declare-fun equal_except__function_guard1 (Bool us_rep7 us_rep7 Int) Bool)
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep6) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep6) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep6)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment9 a))))
(declare-const partition_refinement__partitions__vector__capacity__first__bit1 Int)
(declare-const partition_refinement__partitions__vector__capacity__last__bit1 Int)
(declare-const partition_refinement__partitions__vector__capacity__position1 Int)
(assert (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))
(assert (< partition_refinement__partitions__vector__capacity__first__bit1 partition_refinement__partitions__vector__capacity__last__bit1))
(assert (<= 0 partition_refinement__partitions__vector__capacity__position1))
(declare-fun user_eq19 (us_rep6 us_rep6) Bool)
(declare-const dummy19 us_rep6)
(declare-datatypes () ((partition__ref (mk_partition__ref (partition__content us_rep6)))))
(define-fun partition__ref___projection ((a partition__ref)) us_rep6 (partition__content a))
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int partition_index))))))
(declare-fun slide1 ((Array Int partition_index) Int Int) (Array Int partition_index))
(assert (forall ((a (Array Int partition_index))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int partition_index))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int partition_index) Int Int (Array Int partition_index) Int Int) (Array Int partition_index))
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (partition_index Int) (Array Int partition_index))
(assert (forall ((v partition_index)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq8 ((a (Array Int partition_index)) (a__first Int) (a__last Int) (b (Array Int partition_index)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep4 (select a temp___idx_134)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq8 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep4 (select a temp___idx_134)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare1 ((Array Int partition_index) Int Int (Array Int partition_index) Int Int) Int)
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq8 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq8 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq8 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-fun temp___881 ((Array Int positive) Int Int Int Int) (Array Int positive))
(assert (forall ((temp___883 (Array Int positive))) (forall ((temp___884 Int) (temp___885 Int) (temp___886 Int) (temp___887 Int)) (let ((temp___882 (temp___881 temp___883 temp___884 temp___885 temp___886 temp___887))) (forall ((temp___888 Int)) (ite (= temp___888 temp___886) (= (select temp___882 temp___888) (of_rep temp___887)) (ite (= temp___888 temp___884) (= (select temp___882 temp___888) (of_rep temp___885)) (= (select temp___882 temp___888) (select temp___883 temp___888)))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const d__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const p__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const f (Array Int partition_index))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const x_elem Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const a_old (Array Int positive))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const a_update (Array Int positive))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-fun temp___135 ((Array Int positive) Int Int Int Int) (Array Int positive))
(assert (forall ((temp___137 (Array Int positive))) (forall ((temp___138 Int) (temp___139 Int) (temp___140 Int) (temp___141 Int)) (let ((temp___136 (temp___135 temp___137 temp___138 temp___139 temp___140 temp___141))) (forall ((temp___142 Int)) (ite (= temp___142 temp___140) (= (select temp___136 temp___142) (of_rep temp___141)) (ite (= temp___142 temp___138) (= (select temp___136 temp___142) (of_rep temp___139)) (= (select temp___136 temp___142) (select temp___137 temp___142)))))))))
(assert (= a_update (temp___135 a_old i (to_rep (select a_old j)) j (to_rep (select a_old i)))))
(define-fun dynamic_invariant5 ((temp___expr_299 Int) (temp___is_init_296 Bool) (temp___skip_constant_297 Bool) (temp___do_toplevel_298 Bool)) Bool (=> (or (= temp___is_init_296 true) (<= 0 6)) (in_range2 temp___expr_299)))
(define-fun dynamic_invariant6 ((temp___expr_706 Int) (temp___is_init_703 Bool) (temp___skip_constant_704 Bool) (temp___do_toplevel_705 Bool)) Bool (=> (or (= temp___is_init_703 true) (<= 0 10000)) (in_range9 temp___expr_706)))
(define-fun dynamic_invariant7 ((temp___expr_152 Int) (temp___is_init_149 Bool) (temp___skip_constant_150 Bool) (temp___do_toplevel_151 Bool)) Bool (=> (or (= temp___is_init_149 true) (<= 0 2147483647)) (in_range4 temp___expr_152)))
(declare-const no_element us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep3 0)))))
(assert (forall ((container us_rep)) (! (let ((result (length1 container))) (and (<= result (to_rep3 (rec__partition_refinement__inverse_sets__map__capacity (us_split_discrs1 container)))) (dynamic_invariant7 result true false true))) :pattern ((length1 container)))))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (! (dynamic_invariant7 (length2 attr__tag container) true false true) :pattern ((length2 attr__tag container))))))
(assert (forall ((container us_rep2)) (forall ((key2 Int)) (! (=> (dynamic_invariant2 key2 true true true) (let ((result (find container key2))) (and (=> (< 0 result) (and (<= result (length container)) (= (equivalent_keys key2 (get container result)) true))) (dynamic_invariant7 result true false true)))) :pattern ((find container key2))))))
(declare-fun length5 (us_rep3) Int)
(declare-fun length__function_guard5 (Int us_rep3) Bool)
(declare-fun is_empty (us_rep3) Bool)
(declare-fun is_empty__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption1 ((temp___expr_542 us_rep3) (temp___skip_top_level_543 Bool)) Bool (=> (not (= temp___skip_top_level_543 true)) (and (= (is_empty temp___expr_542) true) (= (length5 temp___expr_542) 0))))
(assert true)
(declare-fun length6 (us_rep4) Int)
(declare-fun length__function_guard6 (Int us_rep4) Bool)
(declare-fun is_empty1 (us_rep4) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)
(define-fun default_initial_assumption2 ((temp___expr_593 us_rep4) (temp___skip_top_level_594 Bool)) Bool (=> (not (= temp___skip_top_level_594 true)) (and (= (is_empty1 temp___expr_593) true) (= (length6 temp___expr_593) 0))))
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key1 result no_element) true)) (forall ((i1 us_rep1)) (=> (= (has_key1 result i1) true) (and (and (<= 1 (get1 result i1)) (<= (get1 result i1) (length1 container))) (forall ((j1 us_rep1)) (=> (= (has_key1 result j1) true) (=> (= (get1 result i1) (get1 result j1)) (= (bool_eq2 i1 j1) true))))))))) :pattern ((positions container)))))
(declare-fun oeq4 (us_rep3 us_rep3) Bool)
(declare-fun oeq__function_guard4 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq1 left right) true) (= (oeq4 (model__ left) (model__ right)) true)) :pattern ((oeq1 left right)))))
(assert true)
(define-fun dynamic_invariant8 ((temp___expr_529 Int) (temp___is_init_526 Bool) (temp___skip_constant_527 Bool) (temp___do_toplevel_528 Bool)) Bool (=> (or (= temp___is_init_526 true) (<= 1 2147483647)) (in_range5 temp___expr_529)))
(assert (forall ((container us_rep3)) (forall ((key2 Int)) (! (=> (dynamic_invariant8 key2 true true true) (=> (= (of_int 1) true) (=> (exists ((k Int)) (and (and (in_range5 k) (= (has_key container k) true)) (= (equivalent_keys k key2) true))) (= (has_key container key2) true)))) :pattern ((has_key container key2))))))
(declare-sort element_type1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq20 (element_type1 element_type1) Bool)
(declare-const dummy20 element_type1)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type1)))))
(define-fun element_type__ref___5__projection ((a element_type__ref3)) element_type1 (element_type__content3 a))
(define-fun dynamic_invariant9 ((temp___expr_535 Int) (temp___is_init_532 Bool) (temp___skip_constant_533 Bool) (temp___do_toplevel_534 Bool)) Bool (=> (or (= temp___is_init_532 true) (<= 0 5)) (in_range11 temp___expr_535)))
(declare-fun witness (us_rep3 Int) Int)
(declare-fun witness__function_guard (Int us_rep3 Int) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((container us_rep3)) (forall ((key2 Int)) (! (=> (and (dynamic_invariant8 key2 true true true) (= (has_key container key2) true)) (let ((result (get2 container key2))) (and (=> (= (of_int 1) true) (and (= result (w_get container (witness container key2))) (forall ((k Int)) (=> (and (in_range5 k) (= (has_key container k) true)) (= (= (equivalent_keys k key2) true) (= (witness container key2) (witness container k))))))) (dynamic_invariant9 result true false true)))) :pattern ((get2 container key2))))))
(assert (forall ((container us_rep3)) (! (dynamic_invariant7 (length5 container) true false true) :pattern ((length5 container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (oeq4 left right) true) (and (forall ((key2 Int)) (=> (and (in_range5 key2) (= (has_key left key2) true)) (and (= (has_key right key2) true) (= (get2 right key2) (get2 left key2))))) (forall ((key2 Int)) (=> (and (in_range5 key2) (= (has_key right key2) true)) (= (has_key left key2) true))))) :pattern ((oeq4 left right)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty container) true) (forall ((key2 Int)) (not (and (in_range5 key2) (= (has_key container key2) true))))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (keys_included left right) true) (forall ((key2 Int)) (=> (and (in_range5 key2) (= (has_key left key2) true)) (= (has_key right key2) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep3) (right us_rep3)) (forall ((new_key Int)) (! (=> (dynamic_invariant8 new_key true true true) (= (= (elements_equal_except left right new_key) true) (forall ((key2 Int)) (=> (and (in_range5 key2) (= (has_key left key2) true)) (=> (not (= (equivalent_keys key2 new_key) true)) (and (= (has_key right key2) true) (= (get2 left key2) (get2 right key2)))))))) :pattern ((elements_equal_except left right new_key))))))
(declare-fun has_witness (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container us_rep3)) (forall ((key2 Int)) (! (=> (and (dynamic_invariant8 key2 true true true) (= (has_key container key2) true)) (let ((result (witness container key2))) (and (= (has_witness container result) true) (dynamic_invariant7 result true false true)))) :pattern ((witness container key2))))))
(assert (forall ((container us_rep3)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant7 witness1 true true true) (= (has_witness container witness1) true)) (dynamic_invariant9 (w_get container witness1) true false true)) :pattern ((w_get container witness1))))))
(define-fun dynamic_invariant10 ((temp___expr_566 Int) (temp___is_init_563 Bool) (temp___skip_constant_564 Bool) (temp___do_toplevel_565 Bool)) Bool (=> (or (= temp___is_init_563 true) (<= 0 2147483647)) (in_range6 temp___expr_566)))
(assert (forall ((container us_rep2)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant7 result true false true))) :pattern ((length container)))))
(declare-sort element_type2 0)
(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq21 (element_type2 element_type2) Bool)
(declare-const dummy21 element_type2)
(declare-datatypes () ((element_type__ref4 (mk_element_type__ref4 (element_type__content4 element_type2)))))
(define-fun element_type__ref___6__projection ((a element_type__ref4)) element_type2 (element_type__content4 a))
(define-fun dynamic_invariant11 ((temp___expr_560 Int) (temp___is_init_557 Bool) (temp___skip_constant_558 Bool) (temp___do_toplevel_559 Bool)) Bool (=> (or (= temp___is_init_557 true) (<= 1 2147483647)) (in_range12 temp___expr_560)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant10 position true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant11 (get container position) true false true)) :pattern ((get container position))))))
(assert (forall ((container us_rep4)) (forall ((key2 us_rep1)) (! (=> (= (of_int 0) true) (=> (exists ((k us_rep1)) (and (= (has_key1 container k) true) (= (bool_eq2 k key2) true))) (= (has_key1 container key2) true))) :pattern ((has_key1 container key2))))))
(declare-sort element_type3 0)
(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq22 (element_type3 element_type3) Bool)
(declare-const dummy22 element_type3)
(declare-datatypes () ((element_type__ref5 (mk_element_type__ref5 (element_type__content5 element_type3)))))
(define-fun element_type__ref___7__projection ((a element_type__ref5)) element_type3 (element_type__content5 a))
(define-fun dynamic_invariant12 ((temp___expr_586 Int) (temp___is_init_583 Bool) (temp___skip_constant_584 Bool) (temp___do_toplevel_585 Bool)) Bool (=> (or (= temp___is_init_583 true) (<= 1 2147483647)) (in_range13 temp___expr_586)))
(declare-fun witness1 (us_rep4 us_rep1) Int)
(declare-fun witness__function_guard1 (Int us_rep4 us_rep1) Bool)
(declare-fun w_get1 (us_rep4 Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)
(assert (forall ((container us_rep4)) (forall ((key2 us_rep1)) (! (=> (= (has_key1 container key2) true) (let ((result (get1 container key2))) (and (=> (= (of_int 0) true) (and (= result (w_get1 container (witness1 container key2))) (forall ((k us_rep1)) (=> (= (has_key1 container k) true) (= (= (bool_eq2 k key2) true) (= (witness1 container key2) (witness1 container k))))))) (dynamic_invariant12 result true false true)))) :pattern ((get1 container key2))))))
(assert (forall ((container us_rep4)) (! (dynamic_invariant7 (length6 container) true false true) :pattern ((length6 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq3 left right) true) (and (forall ((key2 us_rep1)) (=> (= (has_key1 left key2) true) (and (= (has_key1 right key2) true) (= (get1 right key2) (get1 left key2))))) (forall ((key2 us_rep1)) (=> (= (has_key1 right key2) true) (= (has_key1 left key2) true))))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep4)) (! (= (= (is_empty1 container) true) (forall ((key2 us_rep1)) (not (= (has_key1 container key2) true)))) :pattern ((is_empty1 container)))))
(declare-fun has_witness1 (us_rep4 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)
(assert true)
(assert (forall ((container us_rep4)) (forall ((key2 us_rep1)) (! (=> (= (has_key1 container key2) true) (let ((result (witness1 container key2))) (and (= (has_witness1 container result) true) (dynamic_invariant7 result true false true)))) :pattern ((witness1 container key2))))))
(assert (forall ((container us_rep4)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant7 witness2 true true true) (= (has_witness1 container witness2) true)) (dynamic_invariant12 (w_get1 container witness2) true false true)) :pattern ((w_get1 container witness2))))))
(declare-sort extended_index1 0)
(define-fun in_range14 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq23 (extended_index1 extended_index1) Bool)
(declare-const dummy23 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___3__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant13 ((temp___expr_727 Int) (temp___is_init_724 Bool) (temp___skip_constant_725 Bool) (temp___do_toplevel_726 Bool)) Bool (=> (or (= temp___is_init_724 true) (<= (- 1) 10001)) (in_range14 temp___expr_727)))
(define-fun oeq5 ((left us_rep7) (right us_rep7)) Bool (and (= (length4 left) (length4 right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last1 left))) (= (bool_eq6 (get3 left n) (get3 right n)) true))) true false)))
(declare-fun oeq__function_guard5 (Bool us_rep7 us_rep7) Bool)
(assert (forall ((a us_rep7) (b us_rep7)) (! (= (user_eq18 a b) (oeq5 a b)) :pattern ((user_eq18 a b)))))
(define-fun default_initial_assumption3 ((temp___expr_770 us_rep7) (temp___skip_top_level_771 Bool)) Bool (=> (not (= temp___skip_top_level_771 true)) (= (length4 temp___expr_770) 0)))
(assert (forall ((container us_rep6)) (! (= (length4 (model__1 container)) (length3 container)) :pattern ((model__1 container)))))
(declare-sort index_type 0)
(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)
(declare-fun user_eq24 (index_type index_type) Bool)
(declare-const dummy24 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___3__projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant14 ((temp___expr_712 Int) (temp___is_init_709 Bool) (temp___skip_constant_710 Bool) (temp___do_toplevel_711 Bool)) Bool (=> (or (= temp___is_init_709 true) (<= 0 10000)) (in_range15 temp___expr_712)))
(declare-sort extended_index2 0)
(define-fun in_range16 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)
(declare-fun user_eq25 (extended_index2 extended_index2) Bool)
(declare-const dummy25 extended_index2)
(declare-datatypes () ((extended_index__ref2 (mk_extended_index__ref2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref___4__projection ((a extended_index__ref2)) extended_index2 (extended_index__content2 a))
(define-fun dynamic_invariant15 ((temp___expr_763 Int) (temp___is_init_760 Bool) (temp___skip_constant_761 Bool) (temp___do_toplevel_762 Bool)) Bool (=> (or (= temp___is_init_760 true) (<= (- 1) 10000)) (in_range16 temp___expr_763)))
(assert (forall ((container us_rep7)) (! (let ((result (length4 container))) (and (<= (+ (- 1) result) 10000) (dynamic_invariant7 result true false true))) :pattern ((length4 container)))))
(assert true)
(declare-const a (Array Int positive))
(declare-const d__split_fields us_main_type)
(declare-const p__split_fields us_main_type4)
(declare-const p_elem__split_fields index)
(declare-const p_elem__split_fields1 index)
(declare-const p_elem__split_fields2 index_count)
(declare-const partition_refinement__refine_one__i__assume Int)
(declare-const partition_refinement__refine_one__p_elem__assume index)
(declare-const partition_refinement__refine_one__p_elem__assume1 index)
(declare-const partition_refinement__refine_one__p_elem__assume2 index_count)
(declare-const partition_refinement__refine_one__j__assume Int)
(declare-const c us_rep1)
(declare-const o Bool)
(declare-const o1 Bool)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result us_split_fields__ref2)
(declare-const p_elem__split_fields3 us_split_fields4)
(declare-const a1 (Array Int positive))
(declare-const partition_refinement__inverse_sets__replace__container__fields us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const d__split_fields1 us_split_fields)
(declare-const partition_refinement__inverse_sets__replace__container__fields1 us_split_fields)
(declare-const result2 us_split_fields__ref)
(declare-const d__split_fields2 us_split_fields)
(declare-const result3 Bool)
(declare-const result4 Bool)
(define-fun partition_refinement__refine_one__p_elem__assume3 () us_rep5 (mk___rep2 (mk___split_fields2 partition_refinement__refine_one__p_elem__assume partition_refinement__refine_one__p_elem__assume1 partition_refinement__refine_one__p_elem__assume2)))
(assert (in_range1 x_elem))
(assert (and (< (length3 (mk___rep3 p__split_discrs (mk___split_fields3 p__split_fields))) 10000) (and (= (has_key (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem) true) (and (and (<= 0 (to_rep4 (select f (get2 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem)))) (<= (to_rep4 (select f (get2 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem))) (- (length3 (mk___rep3 p__split_discrs (mk___split_fields3 p__split_fields))) 1))) (and (forall ((j1 Int)) (=> (and (<= 0 j1) (<= j1 5)) (= (has_key (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) (to_rep (select a j1))) true))) (forall ((c1 us_rep1)) (=> (= (has_key1 (positions (mk___rep d__split_discrs (mk___split_fields d__split_fields))) c1) true) (= (to_rep (select a (element (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c1))) (key (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c1)))))))))
(assert (and (= partition_refinement__refine_one__i__assume (get2 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem)) (and (in_range8 partition_refinement__refine_one__i__assume) (= partition_refinement__refine_one__i__assume (get2 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem)))))
(assert (= partition_refinement__refine_one__i__assume i))
(assert (in_range3 i))
(assert (and (= partition_refinement__refine_one__p_elem__assume3 (get3 (model__1 (mk___rep3 p__split_discrs (mk___split_fields3 p__split_fields))) (to_rep4 (select f i)))) (= (bool_eq6 partition_refinement__refine_one__p_elem__assume3 (get3 (model__1 (mk___rep3 p__split_discrs (mk___split_fields3 p__split_fields))) (to_rep4 (select f i)))) true)))
(assert (= result (mk___split_fields__ref2 (mk___split_fields2 p_elem__split_fields p_elem__split_fields1 p_elem__split_fields2))))
(assert (= p_elem__split_fields3 (mk___split_fields2 partition_refinement__refine_one__p_elem__assume partition_refinement__refine_one__p_elem__assume1 partition_refinement__refine_one__p_elem__assume2)))
(assert (in_range3 (+ (to_rep2 (rec__partition_refinement__interval__first p_elem__split_fields3)) (to_rep1 (rec__partition_refinement__interval__count p_elem__split_fields3)))))
(assert (and (= partition_refinement__refine_one__j__assume (+ (to_rep2 (rec__partition_refinement__interval__first p_elem__split_fields3)) (to_rep1 (rec__partition_refinement__interval__count p_elem__split_fields3)))) (in_range3 (+ (to_rep2 (rec__partition_refinement__interval__first p_elem__split_fields3)) (to_rep1 (rec__partition_refinement__interval__count p_elem__split_fields3))))))
(assert (= partition_refinement__refine_one__j__assume j))
(assert (in_range3 j))
(assert (= a a_old))
(assert (= (temp___135 a_old i (to_rep (select a_old j)) j (to_rep (select a_old i))) a_update))
(assert (= (bool_eq a1 0 5 (temp___881 a i (to_rep (select a j)) j (to_rep (select a i))) 0 5) true))
(assert (= (bool_eq a1 0 5 a_update 0 5) true))
(assert (forall ((c1 us_rep1)) (=> (= (has_key1 (positions (mk___rep d__split_discrs (mk___split_fields d__split_fields))) c1) true) (=> (and (not (= (key (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c1) (to_rep (select a1 i)))) (not (= (key (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c1) (to_rep (select a1 j))))) (= (to_rep (select a1 (element (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c1))) (key (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c1))))))
(assert (forall ((j1 Int)) (=> (and (<= 0 j1) (<= j1 5)) (= (has_key (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) (to_rep (select a1 j1))) true))))
(assert (and (and (and (and (and (= (oeq3 (positions (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (positions (mk___rep d__split_discrs (mk___split_fields d__split_fields)))) true) (= (get (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (find (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (to_rep (select a1 i)))) (to_rep (select a1 i)))) (= (equal_except (keys (mk___rep d__split_discrs (mk___split_fields d__split_fields))) (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (find (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (to_rep (select a1 i)))) true)) (= (get2 (model__ (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (to_rep (select a1 i))) i)) (= (same_keys (model__ (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields)))) true)) (= (elements_equal_except (model__ (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields)) (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) (to_rep (select a1 i))) true)))
(assert (= result1 (mk___split_fields__ref (mk___split_fields d__split_fields))))
(assert (= d__split_fields1 partition_refinement__inverse_sets__replace__container__fields))
(assert (= (bool_eq a1 0 5 a_update 0 5) true))
(assert (forall ((c1 us_rep1)) (=> (= (has_key1 (positions (mk___rep d__split_discrs d__split_fields1)) c1) true) (=> (and (not (= (key (mk___rep d__split_discrs d__split_fields1) c1) (to_rep (select a1 i)))) (not (= (key (mk___rep d__split_discrs d__split_fields1) c1) (to_rep (select a1 j))))) (= (to_rep (select a1 (element (mk___rep d__split_discrs d__split_fields1) c1))) (key (mk___rep d__split_discrs d__split_fields1) c1))))))
(assert (forall ((c1 us_rep1)) (=> (= (has_key1 (positions (mk___rep d__split_discrs d__split_fields1)) c1) true) (=> (= (key (mk___rep d__split_discrs d__split_fields1) c1) (to_rep (select a1 i))) (= (to_rep (select a1 (element (mk___rep d__split_discrs d__split_fields1) c1))) (key (mk___rep d__split_discrs d__split_fields1) c1))))))
(assert (and (and (and (and (and (= (oeq3 (positions (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (positions (mk___rep d__split_discrs d__split_fields1))) true) (= (get (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (find (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (to_rep (select a1 j)))) (to_rep (select a1 j)))) (= (equal_except (keys (mk___rep d__split_discrs d__split_fields1)) (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (find (keys (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (to_rep (select a1 j)))) true)) (= (get2 (model__ (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (to_rep (select a1 j))) j)) (= (same_keys (model__ (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (model__ (mk___rep d__split_discrs d__split_fields1))) true)) (= (elements_equal_except (model__ (mk___rep d__split_discrs partition_refinement__inverse_sets__replace__container__fields1)) (model__ (mk___rep d__split_discrs d__split_fields1)) (to_rep (select a1 j))) true)))
(assert (= result2 (mk___split_fields__ref d__split_fields1)))
(assert (= d__split_fields2 partition_refinement__inverse_sets__replace__container__fields1))
(assert (= (bool_eq a1 0 5 a_update 0 5) true))
(assert (forall ((c1 us_rep1)) (=> (= (has_key1 (positions (mk___rep d__split_discrs d__split_fields2)) c1) true) (=> (and (not (= (key (mk___rep d__split_discrs d__split_fields2) c1) (to_rep (select a1 i)))) (not (= (key (mk___rep d__split_discrs d__split_fields2) c1) (to_rep (select a1 j))))) (= (to_rep (select a1 (element (mk___rep d__split_discrs d__split_fields2) c1))) (key (mk___rep d__split_discrs d__split_fields2) c1))))))
(assert (forall ((c1 us_rep1)) (=> (= (has_key1 (positions (mk___rep d__split_discrs d__split_fields2)) c1) true) (=> (= (key (mk___rep d__split_discrs d__split_fields2) c1) (to_rep (select a1 i))) (= (to_rep (select a1 (element (mk___rep d__split_discrs d__split_fields2) c1))) (key (mk___rep d__split_discrs d__split_fields2) c1))))))
(assert (and (= o (has_key1 (positions (mk___rep d__split_discrs d__split_fields2)) c)) (= (= o true) (= (has_key1 (positions (mk___rep d__split_discrs d__split_fields2)) c) true))))
(assert (= o1 true))
(assert (= result3 (ite (= o1 true) o false)))
(assert (= result3 true))
(assert (and (= o2 (key (mk___rep d__split_discrs d__split_fields2) c)) (and (in_range7 o2) (= o2 (get (keys (mk___rep d__split_discrs d__split_fields2)) (get1 (positions (mk___rep d__split_discrs d__split_fields2)) c))))))
(assert (= result4 (ite (= o2 (to_rep (select a1 j))) true false)))
(assert (= result4 true))
(assert (and (= o3 (key (mk___rep d__split_discrs d__split_fields2) c)) (and (in_range7 o3) (= o3 (get (keys (mk___rep d__split_discrs d__split_fields2)) (get1 (positions (mk___rep d__split_discrs d__split_fields2)) c))))))
(assert (not (= (has_key1 (positions (mk___rep d__split_discrs d__split_fields2)) c) true)))
(check-sat)
(exit)
