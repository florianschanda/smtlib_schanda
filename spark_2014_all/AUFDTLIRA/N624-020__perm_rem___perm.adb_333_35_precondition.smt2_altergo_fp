(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type true_bool

predicate in_range2(x: int) = ((1 <= x) and (x <= 1))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : true_bool, true_bool -> bool

logic dummy1 : true_bool

type true_bool__ref = { true_bool__content : true_bool
}

function true_bool__ref___projection(a: true_bool__ref) : true_bool =
  (a).true_bool__content

type index

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type integer

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range4(low) and (in_range4(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,natural) farray

logic dummy5 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep1(first(a1)) = 1) and (0 <= to_rep1(last(a1))))))

logic remove : us_t, int -> us_t

logic remove__function_guard : us_t, us_t, int -> prop

axiom remove__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i:int [remove({ elts = a; rt = a1 }, i)]. ((in_range3(i) and
  ((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep1(first(a1)) <= i) and (i <= to_rep1(last(a1)))))) ->
  (((invariant__(remove({ elts = a; rt = a1 }, i)) = true) and
  ((to_rep1(last((remove({ elts = a; rt = a1 },
  i)).rt)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i - 1))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 }, i)).elts[k]))))) and
  ((forall k:int. ((((i + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 },
   i)).elts[(k - 1)]))))) and
  (forall k:int. (((i <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep(((remove({ elts = a; rt = a1 },
  i)).elts[k]))))))))) and dynamic_property(1, 100, to_rep1(first((remove({
  elts = a; rt = a1 }, i)).rt)), to_rep1(last((remove({ elts = a; rt = a1 },
  i)).rt)))))))

logic remove_swap : us_t, int, int -> int

logic remove_swap__function_guard : int, us_t, int, int -> prop

axiom remove_swap__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i1:int. forall i2:int [remove_swap({ elts = a; rt = a1 }, i1, i2)].
  (((in_range3(i1) and in_range3(i2)) and ((invariant__({ elts = a; rt = a1
  }) = true) and (((to_rep1(first(a1)) <= i1) and
  (i1 <= to_rep1(last(a1)))) and (((to_rep1(first(a1)) <= i2) and
  (i2 <= to_rep1(last(a1)))) and (i1 <  i2))))) -> (((of_int(remove_swap({
  elts = a; rt = a1 }, i1, i2)) = true) -> (bool_eq5((remove(remove({ elts =
  a; rt = a1 }, i1), (i2 - 1))).elts, to_rep1(first((remove(remove({ elts =
  a; rt = a1 }, i1), (i2 - 1))).rt)), to_rep1(last((remove(remove({ elts = a;
  rt = a1 }, i1), (i2 - 1))).rt)), (remove(remove({ elts = a; rt = a1 }, i2),
  i1)).elts, to_rep1(first((remove(remove({ elts = a; rt = a1 }, i2),
  i1)).rt)), to_rep1(last((remove(remove({ elts = a; rt = a1 }, i2),
  i1)).rt))) = true)) and in_range2(remove_swap({ elts = a; rt = a1 }, i1,
  i2))))))

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

axiom is_perm__def_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (((length({ elts = a; rt = a1 }) = 0) and (length({ elts = b; rt = b1
  }) = 0)) or
  (exists ia:int. (((to_rep1(first(a1)) <= ia) and
  (ia <= to_rep1(last(a1)))) and
  (exists ib:int. (((to_rep1(first(b1)) <= ib) and
  (ib <= to_rep1(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))))

logic perm_symmetric : us_t, us_t -> int

logic perm_symmetric__function_guard : int, us_t, us_t -> prop

axiom perm_symmetric__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [perm_symmetric({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and (is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1
  }) = true))) -> (((of_int(perm_symmetric({ elts = a; rt = a1 }, { elts = b;
  rt = b1 })) = true) -> (is_perm({ elts = b; rt = b1 }, { elts = a; rt = a1
  }) = true)) and in_range2(perm_symmetric({ elts = a; rt = a1 }, { elts = b;
  rt = b1 })))))

logic a : (int,natural) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,natural) farray

logic b1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic ia : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic ib : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic get_witness : us_t, us_t, int -> int

logic get_witness__function_guard : int, us_t, us_t, int -> prop

axiom get_witness__post_axiom :
  (forall a2:(int,natural) farray. forall a3:t.
  forall b2:(int,natural) farray. forall b3:t.
  (forall ia1:int [get_witness({ elts = a2; rt = a3 }, { elts = b2; rt = b3
  }, ia1)]. ((in_range3(ia1) and ((invariant__({ elts = a2; rt = a3
  }) = true) and ((invariant__({ elts = b2; rt = b3 }) = true) and
  (((to_rep1(first(a3)) <= ia1) and (ia1 <= to_rep1(last(a3)))) and
  (exists ib1:int. (((to_rep1(first(b3)) <= ib1) and
  (ib1 <= to_rep1(last(b3)))) and
  ((to_rep((a2[ia1])) = to_rep((b2[ib1]))) and (is_perm(remove({ elts = a2;
  rt = a3 }, ia1), remove({ elts = b2; rt = b3 }, ib1)) = true)))))))) ->
  ((((to_rep1(first(b3)) <= get_witness({ elts = a2; rt = a3 }, { elts = b2;
  rt = b3 }, ia1)) and (get_witness({ elts = a2; rt = a3 }, { elts = b2; rt =
  b3 }, ia1) <= to_rep1(last(b3)))) and
  ((to_rep((a2[ia1])) = to_rep((b2[get_witness({ elts = a2; rt = a3 }, {
  elts = b2; rt = b3 }, ia1)]))) and (is_perm(remove({ elts = a2; rt = a3 },
  ia1), remove({ elts = b2; rt = b3 }, get_witness({ elts = a2; rt = a3 }, {
  elts = b2; rt = b3 }, ia1))) = true))) and in_range3(get_witness({ elts =
  a2; rt = a3 }, { elts = b2; rt = b3 }, ia1))))))

logic shift_perm_l : us_t, us_t, us_t -> int

logic shift_perm_l__function_guard : int, us_t, us_t, us_t -> prop

axiom shift_perm_l__post_axiom :
  (forall a2:(int,natural) farray. forall a3:t.
  forall b2:(int,natural) farray. forall b3:t. forall c:(int,natural) farray.
  forall c1:t [shift_perm_l({ elts = a2; rt = a3 }, { elts = b2; rt = b3 }, {
  elts = c; rt = c1 })]. (((invariant__({ elts = a2; rt = a3 }) = true) and
  ((invariant__({ elts = b2; rt = b3 }) = true) and ((invariant__({ elts = c;
  rt = c1 }) = true) and ((bool_eq5(a2, to_rep1(first(a3)),
  to_rep1(last(a3)), c, to_rep1(first(c1)), to_rep1(last(c1))) = true) and
  (is_perm({ elts = a2; rt = a3 }, { elts = b2; rt = b3 }) = true))))) ->
  (((of_int(shift_perm_l({ elts = a2; rt = a3 }, { elts = b2; rt = b3 }, {
  elts = c; rt = c1 })) = true) -> (is_perm({ elts = c; rt = c1 }, { elts =
  b2; rt = b3 }) = true)) and in_range2(shift_perm_l({ elts = a2; rt = a3 },
  { elts = b2; rt = b3 }, { elts = c; rt = c1 })))))

logic extended_perm : us_t, us_t -> int

logic extended_perm__function_guard : int, us_t, us_t -> prop

logic attr__ATTRIBUTE_ADDRESS4 : int

logic ib2 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic aa : (int,natural) farray

logic aa1 : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic bb : (int,natural) farray

logic bb1 : t

logic attr__ATTRIBUTE_ADDRESS7 : int

logic bb2 : (int,natural) farray

logic bb21 : t

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

axiom ib2__def_axiom : (ib2 = get_witness({ elts = a; rt = a1 }, { elts = b;
  rt = b1 }, ia))

axiom aa__def_axiom : ({ elts = aa; rt = aa1 } = remove({ elts = a; rt = a1
  }, ia))

axiom bb__def_axiom : ({ elts = bb; rt = bb1 } = remove({ elts = b; rt = b1
  }, ib))

axiom bb2__def_axiom : ({ elts = bb2; rt = bb21 } = remove({ elts = b; rt =
  b1 }, ib2))

logic h : int

logic ia2 : int

logic perm__remove_perm__result : int

logic o : int

logic o1 : natural

logic o2 : int

logic o3 : int

logic perm__remove_perm__ib2__assume : int

logic perm__remove_perm__aa__assume : (int,natural) farray

logic perm__remove_perm__aa__assume1 : t

logic perm__remove_perm__bb__assume : (int,natural) farray

logic perm__remove_perm__bb__assume1 : t

logic perm__remove_perm__bb2__assume : (int,natural) farray

logic perm__remove_perm__bb2__assume1 : t

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : (int,natural) farray

logic o9 : t

logic o10 : (int,natural) farray

logic o11 : t

logic o12 : int

logic o13 : (int,natural) farray

logic o14 : t

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : (int,natural) farray

logic o21 : t

logic o22 : (int,natural) farray

logic o23 : t

logic o24 : (int,natural) farray

logic o25 : t

logic o26 : int

logic o27 : int

logic o28 : (int,natural) farray

logic o29 : t

logic o30 : (int,natural) farray

logic o31 : t

logic ia21 : int

logic perm__remove_perm__result1 : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : int

logic h1 : int

logic result4 : int

logic perm__remove_perm__result2 : int

logic result5 : int

logic h2 : int

logic result6 : int

logic h3 : int

logic result7 : int

logic ia22 : int

logic result8 : int

logic h4 : int

logic result9 : int

logic h5 : int

logic result10 : int

logic ia23 : int

logic result11 : int

logic h6 : int

logic result12 : int

logic h7 : int

logic result13 : int

logic h8 : int

logic result14 : int

logic perm__remove_perm__result3 : int

logic perm__remove_perm__result4 : int

logic perm__remove_perm__result5 : int

logic h9 : int

logic ia24 : int

logic perm__remove_perm__result6 : int

logic h10 : int

logic ia25 : int

logic perm__remove_perm__result7 : int

logic h11 : int

logic ia26 : int

logic perm__remove_perm__result8 : int

logic h12 : int

logic ia27 : int

logic perm__remove_perm__result9 : int

axiom H : dynamic_property(1, 100, to_rep1(first(a1)), to_rep1(last(a1)))

axiom H1 : dynamic_property(1, 100, to_rep1(first(b1)), to_rep1(last(b1)))

axiom H2 : in_range3(ia)

axiom H3 : in_range3(ib)

axiom H4 : ((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({
  elts = b; rt = b1 }) = true) and (((to_rep1(first(a1)) <= ia) and
  (ia <= to_rep1(last(a1)))) and (((to_rep1(first(b1)) <= ib) and
  (ib <= to_rep1(last(b1)))) and ((is_perm({ elts = a; rt = a1 }, { elts = b;
  rt = b1 }) = true) and (to_rep((a[ia])) = to_rep((b[ib]))))))))

axiom H5 : ((o3 = extended_perm({ elts = a; rt = a1 }, { elts = b; rt = b1
  })) and (in_range2(o3) and ((of_int(o3) = true) ->
  (forall ia3:int. (((to_rep1(first(a1)) <= ia3) and
  (ia3 <= to_rep1(last(a1)))) ->
  (exists ib3:int. (((to_rep1(first(b1)) <= ib3) and
  (ib3 <= to_rep1(last(b1)))) and ((to_rep((a[ia3])) = to_rep((b[ib3]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia3), remove({ elts = b; rt = b1 },
  ib3)) = true)))))))))

axiom H6 : (result3 = h)

axiom H7 : (h1 = o3)

axiom H8 : in_range2(h1)

axiom H9 : ((perm__remove_perm__ib2__assume = get_witness({ elts = a; rt = a1
  }, { elts = b; rt = b1 }, ia)) and
  (in_range3(perm__remove_perm__ib2__assume) and
  (((to_rep1(first(b1)) <= perm__remove_perm__ib2__assume) and
  (perm__remove_perm__ib2__assume <= to_rep1(last(b1)))) and
  ((to_rep((a[ia])) = to_rep((b[perm__remove_perm__ib2__assume]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  perm__remove_perm__ib2__assume)) = true)))))

axiom H10 : (perm__remove_perm__ib2__assume = ib2)

axiom H11 : in_range3(ib2)

axiom H12 : (({ elts = perm__remove_perm__aa__assume; rt =
  perm__remove_perm__aa__assume1 } = remove({ elts = a; rt = a1 }, ia)) and
  (dynamic_property(1, 100, to_rep1(first(perm__remove_perm__aa__assume1)),
  to_rep1(last(perm__remove_perm__aa__assume1))) and ((invariant__({ elts =
  perm__remove_perm__aa__assume; rt = perm__remove_perm__aa__assume1
  }) = true) and
  ((to_rep1(last(perm__remove_perm__aa__assume1)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (ia - 1))) ->
   (to_rep((a[k])) = to_rep((perm__remove_perm__aa__assume[k]))))) and
  ((forall k:int. ((((ia + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((perm__remove_perm__aa__assume[(k - 1)]))))) and
  (forall k:int. (((ia <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((perm__remove_perm__aa__assume[k])))))))))))

axiom H13 : ((perm__remove_perm__aa__assume = aa) and
  (perm__remove_perm__aa__assume1 = aa1))

axiom H14 : dynamic_property(1, 100, to_rep1(first(aa1)), to_rep1(last(aa1)))

axiom H15 : (({ elts = perm__remove_perm__bb__assume; rt =
  perm__remove_perm__bb__assume1 } = remove({ elts = b; rt = b1 }, ib)) and
  (dynamic_property(1, 100, to_rep1(first(perm__remove_perm__bb__assume1)),
  to_rep1(last(perm__remove_perm__bb__assume1))) and ((invariant__({ elts =
  perm__remove_perm__bb__assume; rt = perm__remove_perm__bb__assume1
  }) = true) and
  ((to_rep1(last(perm__remove_perm__bb__assume1)) = (to_rep1(last(b1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (ib - 1))) ->
   (to_rep((b[k])) = to_rep((perm__remove_perm__bb__assume[k]))))) and
  ((forall k:int. ((((ib + 1) <= k) and (k <= to_rep1(last(b1)))) ->
   (to_rep((b[k])) = to_rep((perm__remove_perm__bb__assume[(k - 1)]))))) and
  (forall k:int. (((ib <= k) and (k <= (to_rep1(last(b1)) - 1))) ->
  (to_rep((b[(k + 1)])) = to_rep((perm__remove_perm__bb__assume[k])))))))))))

axiom H16 : ((perm__remove_perm__bb__assume = bb) and
  (perm__remove_perm__bb__assume1 = bb1))

axiom H17 : dynamic_property(1, 100, to_rep1(first(bb1)), to_rep1(last(bb1)))

 (* File "perm.ads", line 2, characters 0-0 *)
goal WP_parameter_def : (invariant__({ elts = b; rt = b1 }) = true)
