(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-sort true_bool 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (true_bool true_bool) Bool)
(declare-const dummy3 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant2 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 1)) (in_range4 temp___expr_136)))
(declare-sort index 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (index index) Bool)
(declare-const dummy4 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range5 low) (in_range5 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(define-fun dynamic_invariant3 ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 100)) (in_range5 temp___expr_142)))
(define-fun dynamic_invariant4 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property 1 100 (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant4 a true true true) (dynamic_invariant3 i true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant4 result true false true)))) :pattern ((remove a i))))))
(declare-fun remove_swap (us_t Int Int) Int)
(declare-fun remove_swap__function_guard (Int us_t Int Int) Bool)
(assert (forall ((a us_t)) (forall ((i1 Int) (i2 Int)) (! (=> (and (and (and (dynamic_invariant4 a true true true) (dynamic_invariant3 i1 true true true)) (dynamic_invariant3 i2 true true true)) (and (= (invariant__ a) true) (and (and (<= (first1 a) i1) (<= i1 (last1 a))) (and (and (<= (first1 a) i2) (<= i2 (last1 a))) (< i1 i2))))) (let ((result (remove_swap a i1 i2))) (and (=> (= (of_int result) true) (= (let ((temp___160 (remove (remove a i2) i1))) (let ((temp___159 (remove (remove a i1) (- i2 1)))) (bool_eq (to_array temp___159) (first1 temp___159) (last1 temp___159) (to_array temp___160) (first1 temp___160) (last1 temp___160)))) true)) (dynamic_invariant2 result true false true)))) :pattern ((remove_swap a i1 i2))))))
(declare-fun remove_eq (us_t us_t Int) Int)
(declare-fun remove_eq__function_guard (Int us_t us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (forall ((i Int)) (! (=> (and (and (and (dynamic_invariant4 a true true true) (dynamic_invariant4 b true true true)) (dynamic_invariant3 i true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (first1 a) i) (<= i (last1 a))) (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array b) (first1 b) (last1 b)) true))))) (let ((result (remove_eq a b i))) (and (=> (= (of_int result) true) (= (let ((temp___167 (remove b i))) (let ((temp___166 (remove a i))) (bool_eq (to_array temp___166) (first1 temp___166) (last1 temp___166) (to_array temp___167) (first1 temp___167) (last1 temp___167)))) true)) (dynamic_invariant2 result true false true)))) :pattern ((remove_eq a b i))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-fun perm_reflexive (us_t us_t) Int)
(declare-fun perm_reflexive__function_guard (Int us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant4 a true true true) (dynamic_invariant4 b true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array b) (first1 b) (last1 b)) true)))) (let ((result (perm_reflexive a b))) (and (=> (= (of_int result) true) (= (is_perm a b) true)) (dynamic_invariant2 result true false true)))) :pattern ((perm_reflexive a b)))))
(declare-fun perm_transitive (us_t us_t us_t) Int)
(declare-fun perm_transitive__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant4 a true true true) (dynamic_invariant4 b true true true)) (dynamic_invariant4 c true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (invariant__ c) true) (and (= (is_perm a b) true) (= (is_perm b c) true)))))) (let ((result (perm_transitive a b c))) (and (=> (= (of_int result) true) (= (is_perm a c) true)) (dynamic_invariant2 result true false true)))) :pattern ((perm_transitive a b c)))))
(declare-sort tarray_typeP1 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tarray_typeP1 tarray_typeP1) Bool)
(declare-const dummy6 tarray_typeP1)
(declare-datatypes () ((tarray_typeP1__ref (mk_tarray_typeP1__ref (tarray_typeP1__content tarray_typeP1)))))
(define-fun tarray_typeP1__ref___projection ((a tarray_typeP1__ref)) tarray_typeP1 (tarray_typeP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const init (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(define-fun dynamic_invariant5 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(declare-const values (Array Int natural))
(declare-const temp Int)
(declare-const interm (Array Int natural))
(declare-const hr Int)
(declare-const hr1 Int)
(declare-const hr2 Int)
(declare-const o Int)
(declare-const o1 natural)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 natural)
(declare-const o5 Int)
(declare-const o6 natural)
(declare-const o7 Int)
(declare-const o8 (Array Int natural))
(declare-const o9 Int)
(declare-const temp___213 (Array Int natural))
(declare-const temp___2131 t)
(declare-const o10 Int)
(declare-const temp___212 (Array Int natural))
(declare-const temp___2121 t)
(declare-const o11 Int)
(declare-const o12 natural)
(declare-const o13 Int)
(declare-const o14 (Array Int natural))
(declare-const o15 Int)
(declare-const temp___217 (Array Int natural))
(declare-const temp___2171 t)
(declare-const o16 Int)
(declare-const temp___216 (Array Int natural))
(declare-const temp___2161 t)
(declare-const o17 Int)
(declare-const o18 (Array Int natural))
(declare-const o19 t)
(declare-const o20 Int)
(declare-const o21 (Array Int natural))
(declare-const o22 t)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 (Array Int natural))
(declare-const o30 t)
(declare-const o31 Int)
(declare-const temp___246 (Array Int natural))
(declare-const temp___2461 t)
(declare-const o32 Int)
(declare-const o33 (Array Int natural))
(declare-const o34 t)
(declare-const o35 Int)
(declare-const temp___245 (Array Int natural))
(declare-const temp___2451 t)
(declare-const o36 Int)
(declare-const o37 (Array Int natural))
(declare-const o38 t)
(declare-const o39 Int)
(declare-const temp___250 (Array Int natural))
(declare-const temp___2501 t)
(declare-const o40 Int)
(declare-const o41 (Array Int natural))
(declare-const o42 t)
(declare-const o43 Int)
(declare-const temp___249 (Array Int natural))
(declare-const temp___2491 t)
(declare-const o44 Int)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 (Array Int natural))
(declare-const o49 t)
(declare-const o50 Int)
(declare-const temp___254 us_t)
(declare-const o51 Int)
(declare-const o52 us_t)
(declare-const o53 Int)
(declare-const temp___253 us_t)
(declare-const o54 Int)
(declare-const o55 us_t)
(declare-const o56 Int)
(declare-const o57 us_t)
(declare-const o58 Int)
(declare-const o59 Int)
(declare-const o60 Int)
(declare-const o61 us_t)
(declare-const o62 Int)
(declare-const temp___262 us_t)
(declare-const o63 Int)
(declare-const o64 us_t)
(declare-const o65 Int)
(declare-const temp___261 us_t)
(declare-const o66 Int)
(declare-const o67 us_t)
(declare-const o68 Int)
(declare-const o69 us_t)
(declare-const o70 Int)
(declare-const o71 us_t)
(declare-const o72 Int)
(declare-const o73 us_t)
(declare-const o74 Int)
(declare-const o75 Int)
(declare-const o76 Int)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 us_t)
(declare-const o80 Int)
(declare-const o81 us_t)
(declare-const o82 Int)
(declare-const o83 us_t)
(declare-const o84 Int)
(declare-const o85 us_t)
(declare-const o86 Int)
(declare-const o87 Int)
(declare-const o88 us_t)
(declare-const o89 Int)
(declare-const o90 us_t)
(declare-const o91 Int)
(declare-const o92 us_t)
(declare-const o93 Int)
(declare-const o94 us_t)
(declare-const o95 Int)
(declare-const o96 us_t)
(declare-const o97 Int)
(declare-const o98 us_t)
(declare-const o99 Int)
(declare-const o100 Int)
(declare-const temp___265 us_t)
(declare-const o101 Int)
(declare-const temp___266 us_t)
(declare-const o102 Int)
(declare-const o103 natural)
(declare-const o104 Int)
(declare-const o105 Int)
(declare-const o106 us_t)
(declare-const o107 Int)
(declare-const o108 us_t)
(declare-const us Bool)
(declare-const o109 Int)
(declare-const o110 us_t)
(declare-const o111 Int)
(declare-const o112 us_t)
(declare-const o113 Int)
(declare-const o114 Int)
(declare-const o115 Int)
(declare-const o116 Int)
(declare-const o117 Int)
(declare-const o118 Int)
(declare-const o119 us_t)
(declare-const o120 Int)
(declare-const temp___221 us_t)
(declare-const o121 Int)
(declare-const o122 us_t)
(declare-const o123 Int)
(declare-const temp___220 us_t)
(declare-const o124 Int)
(declare-const o125 us_t)
(declare-const o126 Int)
(declare-const temp___225 us_t)
(declare-const o127 Int)
(declare-const o128 us_t)
(declare-const o129 Int)
(declare-const temp___224 us_t)
(declare-const o130 Int)
(declare-const o131 Int)
(declare-const o132 Int)
(declare-const o133 Int)
(declare-const o134 us_t)
(declare-const o135 Int)
(declare-const temp___229 us_t)
(declare-const o136 Int)
(declare-const o137 us_t)
(declare-const o138 Int)
(declare-const temp___228 us_t)
(declare-const o139 Int)
(declare-const o140 us_t)
(declare-const o141 Int)
(declare-const o142 us_t)
(declare-const o143 Int)
(declare-const o144 Int)
(declare-const o145 Int)
(declare-const o146 us_t)
(declare-const o147 Int)
(declare-const temp___237 us_t)
(declare-const o148 Int)
(declare-const o149 us_t)
(declare-const o150 Int)
(declare-const temp___236 us_t)
(declare-const o151 Int)
(declare-const o152 us_t)
(declare-const o153 Int)
(declare-const o154 us_t)
(declare-const o155 Int)
(declare-const o156 us_t)
(declare-const o157 Int)
(declare-const o158 us_t)
(declare-const o159 Int)
(declare-const o160 Int)
(declare-const o161 Int)
(declare-const o162 Int)
(declare-const o163 Int)
(declare-const o164 us_t)
(declare-const o165 Int)
(declare-const o166 us_t)
(declare-const o167 Int)
(declare-const o168 us_t)
(declare-const o169 Int)
(declare-const o170 us_t)
(declare-const o171 Int)
(declare-const o172 Int)
(declare-const o173 us_t)
(declare-const o174 Int)
(declare-const o175 us_t)
(declare-const o176 Int)
(declare-const o177 us_t)
(declare-const o178 Int)
(declare-const o179 us_t)
(declare-const o180 Int)
(declare-const o181 us_t)
(declare-const o182 Int)
(declare-const o183 us_t)
(declare-const o184 Int)
(declare-const o185 Int)
(declare-const temp___240 us_t)
(declare-const o186 Int)
(declare-const temp___242 us_t)
(declare-const o187 Int)
(declare-const o188 natural)
(declare-const o189 Int)
(declare-const o190 Int)
(declare-const o191 us_t)
(declare-const o192 Int)
(declare-const o193 us_t)
(declare-const us1 Bool)
(declare-const us2 Bool)
(declare-const hr3 Int)
(declare-const hr4 Int)
(declare-const result int__ref)
(declare-const temp1 Int)
(declare-const result1 map__ref)
(declare-const values1 (Array Int natural))
(declare-const result2 map__ref)
(declare-const interm1 (Array Int natural))
(declare-const result3 map__ref)
(declare-const values2 (Array Int natural))
(declare-const result4 int__ref)
(declare-const hr5 Int)
(declare-const result5 int__ref)
(declare-const hr6 Int)
(declare-const result6 int__ref)
(declare-const hr7 Int)
(declare-const result7 int__ref)
(declare-const hr8 Int)
(declare-const result8 int__ref)
(declare-const hr9 Int)
(declare-const result9 int__ref)
(declare-const hr10 Int)
(declare-const result10 int__ref)
(declare-const hr11 Int)
(declare-const result11 int__ref)
(declare-const hr12 Int)
(declare-const result12 int__ref)
(declare-const hr13 Int)
(declare-const result13 int__ref)
(declare-const hr14 Int)
(declare-const result14 int__ref)
(declare-const hr15 Int)
(declare-const result15 int__ref)
(declare-const hr16 Int)
(declare-const result16 int__ref)
(declare-const hr17 Int)
(declare-const result17 int__ref)
(declare-const hr18 Int)
(declare-const result18 int__ref)
(declare-const hr19 Int)
(declare-const result19 int__ref)
(declare-const hr20 Int)
(declare-const values3 map__ref)
(declare-const temp2 int__ref)
(declare-const interm2 map__ref)
(declare-const hr21 int__ref)
(declare-const hr22 int__ref)
(declare-const hr23 int__ref)
(declare-const values4 (Array Int natural))
(declare-const temp3 Int)
(declare-const interm3 (Array Int natural))
(declare-const hr24 Int)
(declare-const hr25 Int)
(declare-const hr26 Int)
(assert (in_range3 x))
(assert (in_range3 y))
(assert (and (and (<= 1 x) (<= x 100)) (and (and (<= 1 y) (<= y 100)) (not (= x y)))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))
(assert (= values init))
(assert (=> (<= 1 1) (in_range4 hr)))
(assert (and (<= 1 x) (<= x 100)))
(assert (= o x))
(assert (= o1 (select values o)))
(assert (= o2 (to_rep o1)))
(assert (= result (mk_int__ref temp)))
(assert (= temp1 o2))
(assert (and (<= 1 y) (<= y 100)))
(assert (= o3 y))
(assert (= o4 (select values o3)))
(assert (= o5 (to_rep o4)))
(assert (= (to_rep o6) o5))
(assert (and (<= 1 x) (<= x 100)))
(assert (= o7 x))
(assert (= o8 (store values o7 o6)))
(assert (= result1 (mk_map__ref values)))
(assert (= values1 o8))
(assert (= result2 (mk_map__ref interm)))
(assert (= interm1 values1))
(assert (= (let ((temp___215 (remove (mk___t interm1 (mk 1 100)) x))) (let ((temp___214 (remove (mk___t init (mk 1 100)) x))) (bool_eq (elts temp___214) (to_rep1 (first (rt temp___214))) (to_rep1 (last (rt temp___214))) (elts temp___215) (to_rep1 (first (rt temp___215))) (to_rep1 (last (rt temp___215)))))) true))
(assert (and (= o11 temp1) (in_range2 temp1)))
(assert (= (to_rep o12) o11))
(assert (and (<= 1 y) (<= y 100)))
(assert (= o13 y))
(assert (= o14 (store values1 o13 o12)))
(assert (= result3 (mk_map__ref values1)))
(assert (= values2 o14))
(assert (not (= (let ((temp___219 (remove (mk___t values2 (mk 1 100)) y))) (let ((temp___218 (remove (mk___t interm1 (mk 1 100)) y))) (bool_eq (elts temp___218) (to_rep1 (first (rt temp___218))) (to_rep1 (last (rt temp___218))) (elts temp___219) (to_rep1 (first (rt temp___219))) (to_rep1 (last (rt temp___219)))))) true)))
(check-sat)
(exit)
