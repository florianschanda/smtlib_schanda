(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort cell 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (cell cell) Bool)
(declare-const dummy cell)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content cell)))))
(define-fun cell__ref___projection ((a cell__ref)) cell (cell__content a))
(declare-fun to_rep (cell) Int)
(declare-fun of_rep (Int) cell)
(assert (forall ((x cell)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x cell)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int cell))))))
(declare-fun slide ((Array Int cell) Int Int) (Array Int cell))
(assert (forall ((a (Array Int cell))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int cell))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int cell)) (a__first Int) (a__last Int) (b (Array Int cell)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (to_rep (select a temp___idx_161)) (to_rep (select b (+ (- b__first a__first) temp___idx_161))))))) true false))
(assert (forall ((a (Array Int cell)) (b (Array Int cell))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (to_rep (select a temp___idx_161)) (to_rep (select b (+ (- b__first a__first) temp___idx_161)))))))))))
(declare-const dummy1 (Array Int cell))
(declare-const value__size Int)
(declare-fun object__size ((Array Int cell)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int cell)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int cell)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int cell))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int cell))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int cell))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int cell) (Array Int cell)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int cell)))))))
(declare-fun slide1 ((Array Int (Array Int cell)) Int Int) (Array Int (Array Int cell)))
(assert (forall ((a (Array Int (Array Int cell)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int cell)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int cell))) (a__first Int) (a__last Int) (b (Array Int (Array Int cell))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_162 Int)) (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last)) (= (bool_eq (select a temp___idx_162) 1 10 (select b (+ (- b__first a__first) temp___idx_162)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_162 Int)) (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last)) (= (bool_eq (select a temp___idx_162) 1 10 (select b (+ (- b__first a__first) temp___idx_162)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort shape 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (shape shape) Bool)
(declare-const dummy2 shape)
(declare-datatypes () ((shape__ref (mk_shape__ref (shape__content shape)))))
(define-fun shape__ref___projection ((a shape__ref)) shape (shape__content a))
(declare-fun to_rep1 (shape) Int)
(declare-fun of_rep1 (Int) shape)
(assert (forall ((x shape)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x shape)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort px_coord 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (px_coord px_coord) Bool)
(declare-const dummy3 px_coord)
(declare-datatypes () ((px_coord__ref (mk_px_coord__ref (px_coord__content px_coord)))))
(define-fun px_coord__ref___projection ((a px_coord__ref)) px_coord (px_coord__content a))
(declare-fun to_rep2 (px_coord) Int)
(declare-fun of_rep2 (Int) px_coord)
(assert (forall ((x px_coord)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x px_coord)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort py_coord 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 1) x) (<= x 19)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (py_coord py_coord) Bool)
(declare-const dummy4 py_coord)
(declare-datatypes () ((py_coord__ref (mk_py_coord__ref (py_coord__content py_coord)))))
(define-fun py_coord__ref___projection ((a py_coord__ref)) py_coord (py_coord__content a))
(declare-fun to_rep3 (py_coord) Int)
(declare-fun of_rep3 (Int) py_coord)
(assert (forall ((x py_coord)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x py_coord)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort direction 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (direction direction) Bool)
(declare-const dummy5 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(declare-fun to_rep4 (direction) Int)
(declare-fun of_rep4 (Int) direction)
(assert (forall ((x direction)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x direction)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__patris__piece__s shape) (rec__patris__piece__d direction) (rec__patris__piece__x px_coord) (rec__patris__piece__y py_coord)))))
(define-fun us_split_fields_S__projection ((a us_split_fields)) shape (rec__patris__piece__s a))
(define-fun us_split_fields_D__projection ((a us_split_fields)) direction (rec__patris__piece__d a))
(define-fun us_split_fields_X__projection ((a us_split_fields)) px_coord (rec__patris__piece__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) py_coord (rec__patris__piece__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___5__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep1 (rec__patris__piece__s (us_split_fields1 a))) (to_rep1 (rec__patris__piece__s (us_split_fields1 b)))) (= (to_rep4 (rec__patris__piece__d (us_split_fields1 a))) (to_rep4 (rec__patris__piece__d (us_split_fields1 b))))) (= (to_rep2 (rec__patris__piece__x (us_split_fields1 a))) (to_rep2 (rec__patris__piece__x (us_split_fields1 b))))) (= (to_rep3 (rec__patris__piece__y (us_split_fields1 a))) (to_rep3 (rec__patris__piece__y (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const patris__piece__s__first__bit Int)
(declare-const patris__piece__s__last__bit Int)
(declare-const patris__piece__s__position Int)
(assert (<= 0 patris__piece__s__first__bit))
(assert (< patris__piece__s__first__bit patris__piece__s__last__bit))
(assert (<= 0 patris__piece__s__position))
(declare-const patris__piece__d__first__bit Int)
(declare-const patris__piece__d__last__bit Int)
(declare-const patris__piece__d__position Int)
(assert (<= 0 patris__piece__d__first__bit))
(assert (< patris__piece__d__first__bit patris__piece__d__last__bit))
(assert (<= 0 patris__piece__d__position))
(declare-const patris__piece__x__first__bit Int)
(declare-const patris__piece__x__last__bit Int)
(declare-const patris__piece__x__position Int)
(assert (<= 0 patris__piece__x__first__bit))
(assert (< patris__piece__x__first__bit patris__piece__x__last__bit))
(assert (<= 0 patris__piece__x__position))
(declare-const patris__piece__y__first__bit Int)
(declare-const patris__piece__y__last__bit Int)
(declare-const patris__piece__y__position Int)
(assert (<= 0 patris__piece__y__first__bit))
(assert (< patris__piece__y__first__bit patris__piece__y__last__bit))
(assert (<= 0 patris__piece__y__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((piece__ref (mk_piece__ref (piece__content us_rep)))))
(define-fun piece__ref___projection ((a piece__ref)) us_rep (piece__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort state 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (state state) Bool)
(declare-const dummy7 state)
(declare-datatypes () ((state__ref (mk_state__ref (state__content state)))))
(define-fun state__ref___projection ((a state__ref)) state (state__content a))
(define-fun dynamic_invariant ((temp___expr_2185 Int) (temp___is_init_2181 Bool) (temp___skip_constant_2182 Bool) (temp___do_toplevel_2183 Bool) (temp___do_typ_inv_2184 Bool)) Bool (=> (or (= temp___is_init_2181 true) (<= 0 4)) (in_range6 temp___expr_2185)))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun get_state (Int) Int)
(declare-fun get_state__function_guard (Int Int) Bool)
(assert (forall ((patris__cur_state Int)) (! (=> (dynamic_invariant patris__cur_state true true true true) (dynamic_invariant (get_state patris__cur_state) true false true true)) :pattern ((get_state patris__cur_state)))))
(assert (forall ((patris__cur_state Int)) (! (=> (dynamic_invariant patris__cur_state true true true true) (= (get_state patris__cur_state) patris__cur_state)) :pattern ((get_state patris__cur_state)))))
(declare-sort map1 0)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 map1)))))
(declare-fun get (map1 Int Int) Bool)
(declare-fun set (map1 Int Int Bool) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a Bool)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a Bool)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide2 (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide2 a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide2 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_163 Int) (temp___idx_164 Int)) (=> (and (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (and (<= a__first_2 temp___idx_164) (<= temp___idx_164 a__last_2))) (= (get a temp___idx_163 temp___idx_164) (get b (+ (- b__first a__first) temp___idx_163) (+ (- b__first_2 a__first_2) temp___idx_164)))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_163 Int) (temp___idx_164 Int)) (=> (and (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (and (<= a__first_2 temp___idx_164) (<= temp___idx_164 a__last_2))) (= (get a temp___idx_163 temp___idx_164) (get b (+ (- b__first a__first) temp___idx_163) (+ (- b__first_2 a__first_2) temp___idx_164))))))))))
(declare-const dummy8 map1)
(declare-const value__size2 Int)
(declare-fun object__size2 (map1) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 (map1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (map1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a map1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a map1)) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a map1)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq8 (map1 map1) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int map1))))))
(declare-fun slide3 ((Array Int map1) Int Int) (Array Int map1))
(assert (forall ((a (Array Int map1))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int map1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int map1)) (a__first Int) (a__last Int) (b (Array Int map1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_165 Int)) (=> (and (<= a__first temp___idx_165) (<= temp___idx_165 a__last)) (= (bool_eq3 (select a temp___idx_165) 0 3 0 3 (select b (+ (- b__first a__first) temp___idx_165)) 0 3 0 3) true)))) true false))
(assert (forall ((a (Array Int map1)) (b (Array Int map1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_165 Int)) (=> (and (<= a__first temp___idx_165) (<= temp___idx_165 a__last)) (= (bool_eq3 (select a temp___idx_165) 0 3 0 3 (select b (+ (- b__first a__first) temp___idx_165)) 0 3 0 3) true))))))))
(declare-const possible_i_shapes (Array Int map1))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const dummy9 map1)
(declare-const value__size3 Int)
(declare-fun object__size3 (map1) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 (map1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (map1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a map1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a map1)) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a map1)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq9 (map1 map1) Bool)
(declare-sort map2 0)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 map2)))))
(declare-fun get1 (map2 Int Int) map1)
(declare-fun set1 (map2 Int Int map1) map2)
(assert (forall ((m map2)) (forall ((i Int)) (forall ((j Int)) (forall ((a map1)) (! (= (get1 (set1 m i j a) i j) a) :pattern ((set1 m i j a))))))))
(assert (forall ((m map2)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a map1)) (! (=> (not (and (= i i2) (= j j2))) (= (get1 (set1 m i j a) i2 j2) (get1 m i2 j2))) :pattern ((get1 (set1 m i j a) i2 j2)) :pattern ((set1 m i j a) (get1 m i2 j2))))))))
(declare-fun slide4 (map2 Int Int Int Int) map2)
(assert (forall ((a map2)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j) (get1 a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get1 (slide4 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq5 ((a map2) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map2) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_252 Int) (temp___idx_253 Int)) (=> (and (and (<= a__first temp___idx_252) (<= temp___idx_252 a__last)) (and (<= a__first_2 temp___idx_253) (<= temp___idx_253 a__last_2))) (= (bool_eq3 (get1 a temp___idx_252 temp___idx_253) 0 2 0 2 (get1 b (+ (- b__first a__first) temp___idx_252) (+ (- b__first_2 a__first_2) temp___idx_253)) 0 2 0 2) true)))) true false))
(assert (forall ((a map2) (b map2)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq5 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_252 Int) (temp___idx_253 Int)) (=> (and (and (<= a__first temp___idx_252) (<= temp___idx_252 a__last)) (and (<= a__first_2 temp___idx_253) (<= temp___idx_253 a__last_2))) (= (bool_eq3 (get1 a temp___idx_252 temp___idx_253) 0 2 0 2 (get1 b (+ (- b__first a__first) temp___idx_252) (+ (- b__first_2 a__first_2) temp___idx_253)) 0 2 0 2) true))))))))
(declare-const possible_three_shapes map2)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun is_empty ((Array Int (Array Int cell)) Int Int) Bool)
(declare-fun is_empty__function_guard (Bool (Array Int (Array Int cell)) Int Int) Bool)
(declare-fun no_overlap ((Array Int (Array Int cell)) us_rep) Bool)
(declare-fun no_overlap__function_guard (Bool (Array Int (Array Int cell)) us_rep) Bool)
(assert true)
(assert (forall ((b (Array Int (Array Int cell)))) (forall ((p us_rep)) (! (= (= (no_overlap b p) true) (ite (= (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) 2) (and (and (and (= (is_empty b (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) (to_rep2 (rec__patris__piece__x (us_split_fields1 p)))) true) (= (is_empty b (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) true)) (= (is_empty b (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1) (to_rep2 (rec__patris__piece__x (us_split_fields1 p)))) true)) (= (is_empty b (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1) (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) true)) (ite (= (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) 1) (forall ((y Int)) (=> (and (<= 0 y) (<= y 3)) (forall ((x Int)) (=> (and (<= 0 x) (<= x 3)) (=> (= (let ((temp___2250 (select possible_i_shapes (to_rep4 (rec__patris__piece__d (us_split_fields1 p)))))) (get temp___2250 y x)) true) (= (is_empty b (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) y) (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) x)) true)))))) (forall ((y Int)) (=> (and (<= 0 y) (<= y 2)) (forall ((x Int)) (=> (and (<= 0 x) (<= x 2)) (=> (= (let ((temp___2251 (get1 possible_three_shapes (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) (to_rep4 (rec__patris__piece__d (us_split_fields1 p)))))) (get temp___2251 y x)) true) (= (is_empty b (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) y) (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) x)) true))))))))) :pattern ((no_overlap b p))))))
(declare-fun valid_configuration__2 (Int us_split_fields (Array Int (Array Int cell))) Bool)
(declare-fun valid_configuration__2__function_guard (Bool Int us_split_fields (Array Int (Array Int cell))) Bool)
(declare-fun get_board ((Array Int (Array Int cell))) (Array Int (Array Int cell)))
(declare-fun get_board__function_guard ((Array Int (Array Int cell)) (Array Int (Array Int cell))) Bool)
(declare-fun get_piece (us_split_fields) us_rep)
(declare-fun get_piece__function_guard (us_rep us_split_fields) Bool)
(declare-fun valid_configuration ((Array Int (Array Int cell)) Int us_rep) Bool)
(declare-fun valid_configuration__function_guard (Bool (Array Int (Array Int cell)) Int us_rep) Bool)
(assert true)
(assert (forall ((patris__cur_state Int)) (forall ((patris__cur_piece__fields us_split_fields)) (forall ((patris__cur_board (Array Int (Array Int cell)))) (! (= (= (valid_configuration__2 patris__cur_state patris__cur_piece__fields patris__cur_board) true) (= (valid_configuration (get_board patris__cur_board) (get_state patris__cur_state) (get_piece patris__cur_piece__fields)) true)) :pattern ((valid_configuration__2 patris__cur_state patris__cur_piece__fields patris__cur_board)))))))
(declare-sort action 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq10 (action action) Bool)
(declare-const dummy10 action)
(declare-datatypes () ((action__ref (mk_action__ref (action__content action)))))
(define-fun action__ref___projection ((a action__ref)) action (action__content a))
(define-fun dynamic_invariant1 ((temp___expr_2264 Int) (temp___is_init_2260 Bool) (temp___skip_constant_2261 Bool) (temp___do_toplevel_2262 Bool) (temp___do_typ_inv_2263 Bool)) Bool (=> (or (= temp___is_init_2260 true) (<= 0 4)) (in_range7 temp___expr_2264)))
(declare-fun move_is_possible (us_rep Int) Bool)
(declare-fun move_is_possible__function_guard (Bool us_rep Int) Bool)
(assert true)
(assert (forall ((p us_rep)) (forall ((a Int)) (! (= (= (move_is_possible p a) true) (ite (= a 0) (in_range3 (- (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) (ite (= a 1) (in_range3 (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) (=> (= a 2) (in_range4 (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1)))))) :pattern ((move_is_possible p a))))))
(declare-fun turn_direction (Int Int) Int)
(declare-fun turn_direction__function_guard (Int Int Int) Bool)
(declare-fun move (us_rep Int) us_rep)
(declare-fun move__function_guard (us_rep us_rep Int) Bool)
(assert true)
(assert (forall ((p us_rep)) (forall ((a Int)) (! (=> (dynamic_invariant1 a true true true true) (= (move p a) (ite (= a 0) (mk___rep (let ((usq_ (us_split_fields1 p))) (mk___split_fields (rec__patris__piece__s usq_) (rec__patris__piece__d usq_) (of_rep2 (- (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) (rec__patris__piece__y usq_)))) (ite (= a 1) (mk___rep (let ((usq_ (us_split_fields1 p))) (mk___split_fields (rec__patris__piece__s usq_) (rec__patris__piece__d usq_) (of_rep2 (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) (rec__patris__piece__y usq_)))) (ite (= a 2) (mk___rep (let ((usq_ (us_split_fields1 p))) (mk___split_fields (rec__patris__piece__s usq_) (rec__patris__piece__d usq_) (rec__patris__piece__x usq_) (of_rep3 (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1))))) (mk___rep (let ((usq_ (us_split_fields1 p))) (mk___split_fields (rec__patris__piece__s usq_) (of_rep4 (turn_direction (to_rep4 (rec__patris__piece__d (us_split_fields1 p))) a)) (rec__patris__piece__x usq_) (rec__patris__piece__y usq_))))))))) :pattern ((move p a))))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-sort integer 0)
(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq11 (integer integer) Bool)
(declare-const dummy11 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a1 integer__ref)) integer (integer__content a1))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range8 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_2087 Int) (temp___is_init_2083 Bool) (temp___skip_constant_2084 Bool) (temp___do_toplevel_2085 Bool) (temp___do_typ_inv_2086 Bool)) Bool (=> (or (= temp___is_init_2083 true) (<= 0 7)) (in_range1 temp___expr_2087)))
(define-fun dynamic_invariant4 ((temp___expr_2094 Int) (temp___is_init_2090 Bool) (temp___skip_constant_2091 Bool) (temp___do_toplevel_2092 Bool) (temp___do_typ_inv_2093 Bool)) Bool (=> (or (= temp___is_init_2090 true) (<= 1 7)) (in_range2 temp___expr_2094)))
(declare-sort x_coord 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq12 (x_coord x_coord) Bool)
(declare-const dummy12 x_coord)
(declare-datatypes () ((x_coord__ref (mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a1 x_coord__ref)) x_coord (x_coord__content a1))
(define-fun dynamic_invariant5 ((temp___expr_2108 Int) (temp___is_init_2104 Bool) (temp___skip_constant_2105 Bool) (temp___do_toplevel_2106 Bool) (temp___do_typ_inv_2107 Bool)) Bool (=> (or (= temp___is_init_2104 true) (<= 1 10)) (in_range9 temp___expr_2108)))
(declare-sort y_coord 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq13 (y_coord y_coord) Bool)
(declare-const dummy13 y_coord)
(declare-datatypes () ((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a1 y_coord__ref)) y_coord (y_coord__content a1))
(define-fun dynamic_invariant6 ((temp___expr_2115 Int) (temp___is_init_2111 Bool) (temp___skip_constant_2112 Bool) (temp___do_toplevel_2113 Bool) (temp___do_typ_inv_2114 Bool)) Bool (=> (or (= temp___is_init_2111 true) (<= 1 20)) (in_range10 temp___expr_2115)))
(assert true)
(assert (forall ((patris__cur_board (Array Int (Array Int cell)))) (! (= (get_board patris__cur_board) patris__cur_board) :pattern ((get_board patris__cur_board)))))
(define-fun dynamic_invariant7 ((temp___expr_2153 Int) (temp___is_init_2149 Bool) (temp___skip_constant_2150 Bool) (temp___do_toplevel_2151 Bool) (temp___do_typ_inv_2152 Bool)) Bool (=> (or (= temp___is_init_2149 true) (<= (- 1) 9)) (in_range3 temp___expr_2153)))
(define-fun dynamic_invariant8 ((temp___expr_2160 Int) (temp___is_init_2156 Bool) (temp___skip_constant_2157 Bool) (temp___do_toplevel_2158 Bool) (temp___do_typ_inv_2159 Bool)) Bool (=> (or (= temp___is_init_2156 true) (<= (- 1) 19)) (in_range4 temp___expr_2160)))
(define-fun dynamic_invariant9 ((temp___expr_2167 Int) (temp___is_init_2163 Bool) (temp___skip_constant_2164 Bool) (temp___do_toplevel_2165 Bool) (temp___do_typ_inv_2166 Bool)) Bool (=> (or (= temp___is_init_2163 true) (<= 0 3)) (in_range5 temp___expr_2167)))
(assert true)
(assert (forall ((patris__cur_piece__fields us_split_fields)) (! (= (get_piece patris__cur_piece__fields) (mk___rep patris__cur_piece__fields)) :pattern ((get_piece patris__cur_piece__fields)))))
(declare-fun patris__possible_i_shapes__aggregate_def (map1 map1 map1 map1) (Array Int map1))
(declare-fun temp___172 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___192 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___212 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___232 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(assert (= possible_i_shapes (patris__possible_i_shapes__aggregate_def (temp___172 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___192 (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___212 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___232 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0)))))
(assert (forall ((temp___174 Bool) (temp___175 Bool) (temp___176 Bool) (temp___177 Bool) (temp___178 Bool) (temp___179 Bool) (temp___180 Bool) (temp___181 Bool) (temp___182 Bool) (temp___183 Bool) (temp___184 Bool) (temp___185 Bool) (temp___186 Bool) (temp___187 Bool) (temp___188 Bool) (temp___189 Bool)) (let ((temp___173 (temp___172 temp___174 temp___175 temp___176 temp___177 temp___178 temp___179 temp___180 temp___181 temp___182 temp___183 temp___184 temp___185 temp___186 temp___187 temp___188 temp___189))) (and (and (and (and (and (and (= (get temp___173 0 0) temp___174) (= (get temp___173 0 1) temp___175)) (= (get temp___173 0 2) temp___176)) (= (get temp___173 0 3) temp___177)) (and (and (and (= (get temp___173 1 0) temp___178) (= (get temp___173 1 1) temp___179)) (= (get temp___173 1 2) temp___180)) (= (get temp___173 1 3) temp___181))) (and (and (and (= (get temp___173 2 0) temp___182) (= (get temp___173 2 1) temp___183)) (= (get temp___173 2 2) temp___184)) (= (get temp___173 2 3) temp___185))) (and (and (and (= (get temp___173 3 0) temp___186) (= (get temp___173 3 1) temp___187)) (= (get temp___173 3 2) temp___188)) (= (get temp___173 3 3) temp___189))))))
(assert (forall ((temp___167 map1) (temp___168 map1) (temp___169 map1) (temp___170 map1)) (let ((temp___166 (patris__possible_i_shapes__aggregate_def temp___167 temp___168 temp___169 temp___170))) (and (and (and (= (select temp___166 0) temp___167) (= (select temp___166 1) temp___168)) (= (select temp___166 2) temp___169)) (= (select temp___166 3) temp___170)))))
(assert (forall ((temp___194 Bool) (temp___195 Bool) (temp___196 Bool) (temp___197 Bool) (temp___198 Bool) (temp___199 Bool) (temp___200 Bool) (temp___201 Bool) (temp___202 Bool) (temp___203 Bool) (temp___204 Bool) (temp___205 Bool) (temp___206 Bool) (temp___207 Bool) (temp___208 Bool) (temp___209 Bool)) (let ((temp___193 (temp___192 temp___194 temp___195 temp___196 temp___197 temp___198 temp___199 temp___200 temp___201 temp___202 temp___203 temp___204 temp___205 temp___206 temp___207 temp___208 temp___209))) (and (and (and (and (and (and (= (get temp___193 0 0) temp___194) (= (get temp___193 0 1) temp___195)) (= (get temp___193 0 2) temp___196)) (= (get temp___193 0 3) temp___197)) (and (and (and (= (get temp___193 1 0) temp___198) (= (get temp___193 1 1) temp___199)) (= (get temp___193 1 2) temp___200)) (= (get temp___193 1 3) temp___201))) (and (and (and (= (get temp___193 2 0) temp___202) (= (get temp___193 2 1) temp___203)) (= (get temp___193 2 2) temp___204)) (= (get temp___193 2 3) temp___205))) (and (and (and (= (get temp___193 3 0) temp___206) (= (get temp___193 3 1) temp___207)) (= (get temp___193 3 2) temp___208)) (= (get temp___193 3 3) temp___209))))))
(assert (forall ((temp___214 Bool) (temp___215 Bool) (temp___216 Bool) (temp___217 Bool) (temp___218 Bool) (temp___219 Bool) (temp___220 Bool) (temp___221 Bool) (temp___222 Bool) (temp___223 Bool) (temp___224 Bool) (temp___225 Bool) (temp___226 Bool) (temp___227 Bool) (temp___228 Bool) (temp___229 Bool)) (let ((temp___213 (temp___212 temp___214 temp___215 temp___216 temp___217 temp___218 temp___219 temp___220 temp___221 temp___222 temp___223 temp___224 temp___225 temp___226 temp___227 temp___228 temp___229))) (and (and (and (and (and (and (= (get temp___213 0 0) temp___214) (= (get temp___213 0 1) temp___215)) (= (get temp___213 0 2) temp___216)) (= (get temp___213 0 3) temp___217)) (and (and (and (= (get temp___213 1 0) temp___218) (= (get temp___213 1 1) temp___219)) (= (get temp___213 1 2) temp___220)) (= (get temp___213 1 3) temp___221))) (and (and (and (= (get temp___213 2 0) temp___222) (= (get temp___213 2 1) temp___223)) (= (get temp___213 2 2) temp___224)) (= (get temp___213 2 3) temp___225))) (and (and (and (= (get temp___213 3 0) temp___226) (= (get temp___213 3 1) temp___227)) (= (get temp___213 3 2) temp___228)) (= (get temp___213 3 3) temp___229))))))
(assert (forall ((temp___234 Bool) (temp___235 Bool) (temp___236 Bool) (temp___237 Bool) (temp___238 Bool) (temp___239 Bool) (temp___240 Bool) (temp___241 Bool) (temp___242 Bool) (temp___243 Bool) (temp___244 Bool) (temp___245 Bool) (temp___246 Bool) (temp___247 Bool) (temp___248 Bool) (temp___249 Bool)) (let ((temp___233 (temp___232 temp___234 temp___235 temp___236 temp___237 temp___238 temp___239 temp___240 temp___241 temp___242 temp___243 temp___244 temp___245 temp___246 temp___247 temp___248 temp___249))) (and (and (and (and (and (and (= (get temp___233 0 0) temp___234) (= (get temp___233 0 1) temp___235)) (= (get temp___233 0 2) temp___236)) (= (get temp___233 0 3) temp___237)) (and (and (and (= (get temp___233 1 0) temp___238) (= (get temp___233 1 1) temp___239)) (= (get temp___233 1 2) temp___240)) (= (get temp___233 1 3) temp___241))) (and (and (and (= (get temp___233 2 0) temp___242) (= (get temp___233 2 1) temp___243)) (= (get temp___233 2 2) temp___244)) (= (get temp___233 2 3) temp___245))) (and (and (and (= (get temp___233 3 0) temp___246) (= (get temp___233 3 1) temp___247)) (= (get temp___233 3 2) temp___248)) (= (get temp___233 3 3) temp___249))))))
(declare-fun patris__possible_three_shapes__aggregate_def (map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1) map2)
(declare-fun temp___277 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___290 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___303 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___316 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___329 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___342 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___355 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___368 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___381 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___394 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___407 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___420 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___433 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___446 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___459 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___472 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___485 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___498 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___511 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(declare-fun temp___524 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)
(assert (= possible_three_shapes (patris__possible_three_shapes__aggregate_def (temp___277 (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___290 (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___303 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0)) (temp___316 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0)) (temp___329 (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___342 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0)) (temp___355 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0)) (temp___368 (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___381 (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___394 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0)) (temp___407 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0)) (temp___420 (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___433 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___446 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___459 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___472 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___485 (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 0 0)) (temp___498 (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 0 0)) (temp___511 (distinct 0 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0) (distinct 1 0) (distinct 1 0)) (temp___524 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0)))))
(assert (forall ((temp___279 Bool) (temp___280 Bool) (temp___281 Bool) (temp___282 Bool) (temp___283 Bool) (temp___284 Bool) (temp___285 Bool) (temp___286 Bool) (temp___287 Bool)) (let ((temp___278 (temp___277 temp___279 temp___280 temp___281 temp___282 temp___283 temp___284 temp___285 temp___286 temp___287))) (and (and (and (and (= (get temp___278 0 0) temp___279) (= (get temp___278 0 1) temp___280)) (= (get temp___278 0 2) temp___281)) (and (and (= (get temp___278 1 0) temp___282) (= (get temp___278 1 1) temp___283)) (= (get temp___278 1 2) temp___284))) (and (and (= (get temp___278 2 0) temp___285) (= (get temp___278 2 1) temp___286)) (= (get temp___278 2 2) temp___287))))))
(assert (forall ((temp___292 Bool) (temp___293 Bool) (temp___294 Bool) (temp___295 Bool) (temp___296 Bool) (temp___297 Bool) (temp___298 Bool) (temp___299 Bool) (temp___300 Bool)) (let ((temp___291 (temp___290 temp___292 temp___293 temp___294 temp___295 temp___296 temp___297 temp___298 temp___299 temp___300))) (and (and (and (and (= (get temp___291 0 0) temp___292) (= (get temp___291 0 1) temp___293)) (= (get temp___291 0 2) temp___294)) (and (and (= (get temp___291 1 0) temp___295) (= (get temp___291 1 1) temp___296)) (= (get temp___291 1 2) temp___297))) (and (and (= (get temp___291 2 0) temp___298) (= (get temp___291 2 1) temp___299)) (= (get temp___291 2 2) temp___300))))))
(assert (forall ((temp___305 Bool) (temp___306 Bool) (temp___307 Bool) (temp___308 Bool) (temp___309 Bool) (temp___310 Bool) (temp___311 Bool) (temp___312 Bool) (temp___313 Bool)) (let ((temp___304 (temp___303 temp___305 temp___306 temp___307 temp___308 temp___309 temp___310 temp___311 temp___312 temp___313))) (and (and (and (and (= (get temp___304 0 0) temp___305) (= (get temp___304 0 1) temp___306)) (= (get temp___304 0 2) temp___307)) (and (and (= (get temp___304 1 0) temp___308) (= (get temp___304 1 1) temp___309)) (= (get temp___304 1 2) temp___310))) (and (and (= (get temp___304 2 0) temp___311) (= (get temp___304 2 1) temp___312)) (= (get temp___304 2 2) temp___313))))))
(assert (forall ((temp___318 Bool) (temp___319 Bool) (temp___320 Bool) (temp___321 Bool) (temp___322 Bool) (temp___323 Bool) (temp___324 Bool) (temp___325 Bool) (temp___326 Bool)) (let ((temp___317 (temp___316 temp___318 temp___319 temp___320 temp___321 temp___322 temp___323 temp___324 temp___325 temp___326))) (and (and (and (and (= (get temp___317 0 0) temp___318) (= (get temp___317 0 1) temp___319)) (= (get temp___317 0 2) temp___320)) (and (and (= (get temp___317 1 0) temp___321) (= (get temp___317 1 1) temp___322)) (= (get temp___317 1 2) temp___323))) (and (and (= (get temp___317 2 0) temp___324) (= (get temp___317 2 1) temp___325)) (= (get temp___317 2 2) temp___326))))))
(assert (forall ((temp___255 map1) (temp___256 map1) (temp___257 map1) (temp___258 map1) (temp___259 map1) (temp___260 map1) (temp___261 map1) (temp___262 map1) (temp___263 map1) (temp___264 map1) (temp___265 map1) (temp___266 map1) (temp___267 map1) (temp___268 map1) (temp___269 map1) (temp___270 map1) (temp___271 map1) (temp___272 map1) (temp___273 map1) (temp___274 map1)) (let ((temp___254 (patris__possible_three_shapes__aggregate_def temp___255 temp___256 temp___257 temp___258 temp___259 temp___260 temp___261 temp___262 temp___263 temp___264 temp___265 temp___266 temp___267 temp___268 temp___269 temp___270 temp___271 temp___272 temp___273 temp___274))) (and (and (and (and (and (and (and (= (get1 temp___254 3 0) temp___255) (= (get1 temp___254 3 1) temp___256)) (= (get1 temp___254 3 2) temp___257)) (= (get1 temp___254 3 3) temp___258)) (and (and (and (= (get1 temp___254 4 0) temp___259) (= (get1 temp___254 4 1) temp___260)) (= (get1 temp___254 4 2) temp___261)) (= (get1 temp___254 4 3) temp___262))) (and (and (and (= (get1 temp___254 5 0) temp___263) (= (get1 temp___254 5 1) temp___264)) (= (get1 temp___254 5 2) temp___265)) (= (get1 temp___254 5 3) temp___266))) (and (and (and (= (get1 temp___254 6 0) temp___267) (= (get1 temp___254 6 1) temp___268)) (= (get1 temp___254 6 2) temp___269)) (= (get1 temp___254 6 3) temp___270))) (and (and (and (= (get1 temp___254 7 0) temp___271) (= (get1 temp___254 7 1) temp___272)) (= (get1 temp___254 7 2) temp___273)) (= (get1 temp___254 7 3) temp___274))))))
(assert (forall ((temp___331 Bool) (temp___332 Bool) (temp___333 Bool) (temp___334 Bool) (temp___335 Bool) (temp___336 Bool) (temp___337 Bool) (temp___338 Bool) (temp___339 Bool)) (let ((temp___330 (temp___329 temp___331 temp___332 temp___333 temp___334 temp___335 temp___336 temp___337 temp___338 temp___339))) (and (and (and (and (= (get temp___330 0 0) temp___331) (= (get temp___330 0 1) temp___332)) (= (get temp___330 0 2) temp___333)) (and (and (= (get temp___330 1 0) temp___334) (= (get temp___330 1 1) temp___335)) (= (get temp___330 1 2) temp___336))) (and (and (= (get temp___330 2 0) temp___337) (= (get temp___330 2 1) temp___338)) (= (get temp___330 2 2) temp___339))))))
(assert (forall ((temp___344 Bool) (temp___345 Bool) (temp___346 Bool) (temp___347 Bool) (temp___348 Bool) (temp___349 Bool) (temp___350 Bool) (temp___351 Bool) (temp___352 Bool)) (let ((temp___343 (temp___342 temp___344 temp___345 temp___346 temp___347 temp___348 temp___349 temp___350 temp___351 temp___352))) (and (and (and (and (= (get temp___343 0 0) temp___344) (= (get temp___343 0 1) temp___345)) (= (get temp___343 0 2) temp___346)) (and (and (= (get temp___343 1 0) temp___347) (= (get temp___343 1 1) temp___348)) (= (get temp___343 1 2) temp___349))) (and (and (= (get temp___343 2 0) temp___350) (= (get temp___343 2 1) temp___351)) (= (get temp___343 2 2) temp___352))))))
(assert (forall ((temp___357 Bool) (temp___358 Bool) (temp___359 Bool) (temp___360 Bool) (temp___361 Bool) (temp___362 Bool) (temp___363 Bool) (temp___364 Bool) (temp___365 Bool)) (let ((temp___356 (temp___355 temp___357 temp___358 temp___359 temp___360 temp___361 temp___362 temp___363 temp___364 temp___365))) (and (and (and (and (= (get temp___356 0 0) temp___357) (= (get temp___356 0 1) temp___358)) (= (get temp___356 0 2) temp___359)) (and (and (= (get temp___356 1 0) temp___360) (= (get temp___356 1 1) temp___361)) (= (get temp___356 1 2) temp___362))) (and (and (= (get temp___356 2 0) temp___363) (= (get temp___356 2 1) temp___364)) (= (get temp___356 2 2) temp___365))))))
(assert (forall ((temp___370 Bool) (temp___371 Bool) (temp___372 Bool) (temp___373 Bool) (temp___374 Bool) (temp___375 Bool) (temp___376 Bool) (temp___377 Bool) (temp___378 Bool)) (let ((temp___369 (temp___368 temp___370 temp___371 temp___372 temp___373 temp___374 temp___375 temp___376 temp___377 temp___378))) (and (and (and (and (= (get temp___369 0 0) temp___370) (= (get temp___369 0 1) temp___371)) (= (get temp___369 0 2) temp___372)) (and (and (= (get temp___369 1 0) temp___373) (= (get temp___369 1 1) temp___374)) (= (get temp___369 1 2) temp___375))) (and (and (= (get temp___369 2 0) temp___376) (= (get temp___369 2 1) temp___377)) (= (get temp___369 2 2) temp___378))))))
(assert (forall ((temp___383 Bool) (temp___384 Bool) (temp___385 Bool) (temp___386 Bool) (temp___387 Bool) (temp___388 Bool) (temp___389 Bool) (temp___390 Bool) (temp___391 Bool)) (let ((temp___382 (temp___381 temp___383 temp___384 temp___385 temp___386 temp___387 temp___388 temp___389 temp___390 temp___391))) (and (and (and (and (= (get temp___382 0 0) temp___383) (= (get temp___382 0 1) temp___384)) (= (get temp___382 0 2) temp___385)) (and (and (= (get temp___382 1 0) temp___386) (= (get temp___382 1 1) temp___387)) (= (get temp___382 1 2) temp___388))) (and (and (= (get temp___382 2 0) temp___389) (= (get temp___382 2 1) temp___390)) (= (get temp___382 2 2) temp___391))))))
(assert (forall ((temp___396 Bool) (temp___397 Bool) (temp___398 Bool) (temp___399 Bool) (temp___400 Bool) (temp___401 Bool) (temp___402 Bool) (temp___403 Bool) (temp___404 Bool)) (let ((temp___395 (temp___394 temp___396 temp___397 temp___398 temp___399 temp___400 temp___401 temp___402 temp___403 temp___404))) (and (and (and (and (= (get temp___395 0 0) temp___396) (= (get temp___395 0 1) temp___397)) (= (get temp___395 0 2) temp___398)) (and (and (= (get temp___395 1 0) temp___399) (= (get temp___395 1 1) temp___400)) (= (get temp___395 1 2) temp___401))) (and (and (= (get temp___395 2 0) temp___402) (= (get temp___395 2 1) temp___403)) (= (get temp___395 2 2) temp___404))))))
(assert (forall ((temp___409 Bool) (temp___410 Bool) (temp___411 Bool) (temp___412 Bool) (temp___413 Bool) (temp___414 Bool) (temp___415 Bool) (temp___416 Bool) (temp___417 Bool)) (let ((temp___408 (temp___407 temp___409 temp___410 temp___411 temp___412 temp___413 temp___414 temp___415 temp___416 temp___417))) (and (and (and (and (= (get temp___408 0 0) temp___409) (= (get temp___408 0 1) temp___410)) (= (get temp___408 0 2) temp___411)) (and (and (= (get temp___408 1 0) temp___412) (= (get temp___408 1 1) temp___413)) (= (get temp___408 1 2) temp___414))) (and (and (= (get temp___408 2 0) temp___415) (= (get temp___408 2 1) temp___416)) (= (get temp___408 2 2) temp___417))))))
(assert (forall ((temp___422 Bool) (temp___423 Bool) (temp___424 Bool) (temp___425 Bool) (temp___426 Bool) (temp___427 Bool) (temp___428 Bool) (temp___429 Bool) (temp___430 Bool)) (let ((temp___421 (temp___420 temp___422 temp___423 temp___424 temp___425 temp___426 temp___427 temp___428 temp___429 temp___430))) (and (and (and (and (= (get temp___421 0 0) temp___422) (= (get temp___421 0 1) temp___423)) (= (get temp___421 0 2) temp___424)) (and (and (= (get temp___421 1 0) temp___425) (= (get temp___421 1 1) temp___426)) (= (get temp___421 1 2) temp___427))) (and (and (= (get temp___421 2 0) temp___428) (= (get temp___421 2 1) temp___429)) (= (get temp___421 2 2) temp___430))))))
(assert (forall ((temp___435 Bool) (temp___436 Bool) (temp___437 Bool) (temp___438 Bool) (temp___439 Bool) (temp___440 Bool) (temp___441 Bool) (temp___442 Bool) (temp___443 Bool)) (let ((temp___434 (temp___433 temp___435 temp___436 temp___437 temp___438 temp___439 temp___440 temp___441 temp___442 temp___443))) (and (and (and (and (= (get temp___434 0 0) temp___435) (= (get temp___434 0 1) temp___436)) (= (get temp___434 0 2) temp___437)) (and (and (= (get temp___434 1 0) temp___438) (= (get temp___434 1 1) temp___439)) (= (get temp___434 1 2) temp___440))) (and (and (= (get temp___434 2 0) temp___441) (= (get temp___434 2 1) temp___442)) (= (get temp___434 2 2) temp___443))))))
(assert (forall ((temp___448 Bool) (temp___449 Bool) (temp___450 Bool) (temp___451 Bool) (temp___452 Bool) (temp___453 Bool) (temp___454 Bool) (temp___455 Bool) (temp___456 Bool)) (let ((temp___447 (temp___446 temp___448 temp___449 temp___450 temp___451 temp___452 temp___453 temp___454 temp___455 temp___456))) (and (and (and (and (= (get temp___447 0 0) temp___448) (= (get temp___447 0 1) temp___449)) (= (get temp___447 0 2) temp___450)) (and (and (= (get temp___447 1 0) temp___451) (= (get temp___447 1 1) temp___452)) (= (get temp___447 1 2) temp___453))) (and (and (= (get temp___447 2 0) temp___454) (= (get temp___447 2 1) temp___455)) (= (get temp___447 2 2) temp___456))))))
(assert (forall ((temp___461 Bool) (temp___462 Bool) (temp___463 Bool) (temp___464 Bool) (temp___465 Bool) (temp___466 Bool) (temp___467 Bool) (temp___468 Bool) (temp___469 Bool)) (let ((temp___460 (temp___459 temp___461 temp___462 temp___463 temp___464 temp___465 temp___466 temp___467 temp___468 temp___469))) (and (and (and (and (= (get temp___460 0 0) temp___461) (= (get temp___460 0 1) temp___462)) (= (get temp___460 0 2) temp___463)) (and (and (= (get temp___460 1 0) temp___464) (= (get temp___460 1 1) temp___465)) (= (get temp___460 1 2) temp___466))) (and (and (= (get temp___460 2 0) temp___467) (= (get temp___460 2 1) temp___468)) (= (get temp___460 2 2) temp___469))))))
(assert (forall ((temp___474 Bool) (temp___475 Bool) (temp___476 Bool) (temp___477 Bool) (temp___478 Bool) (temp___479 Bool) (temp___480 Bool) (temp___481 Bool) (temp___482 Bool)) (let ((temp___473 (temp___472 temp___474 temp___475 temp___476 temp___477 temp___478 temp___479 temp___480 temp___481 temp___482))) (and (and (and (and (= (get temp___473 0 0) temp___474) (= (get temp___473 0 1) temp___475)) (= (get temp___473 0 2) temp___476)) (and (and (= (get temp___473 1 0) temp___477) (= (get temp___473 1 1) temp___478)) (= (get temp___473 1 2) temp___479))) (and (and (= (get temp___473 2 0) temp___480) (= (get temp___473 2 1) temp___481)) (= (get temp___473 2 2) temp___482))))))
(assert (forall ((temp___487 Bool) (temp___488 Bool) (temp___489 Bool) (temp___490 Bool) (temp___491 Bool) (temp___492 Bool) (temp___493 Bool) (temp___494 Bool) (temp___495 Bool)) (let ((temp___486 (temp___485 temp___487 temp___488 temp___489 temp___490 temp___491 temp___492 temp___493 temp___494 temp___495))) (and (and (and (and (= (get temp___486 0 0) temp___487) (= (get temp___486 0 1) temp___488)) (= (get temp___486 0 2) temp___489)) (and (and (= (get temp___486 1 0) temp___490) (= (get temp___486 1 1) temp___491)) (= (get temp___486 1 2) temp___492))) (and (and (= (get temp___486 2 0) temp___493) (= (get temp___486 2 1) temp___494)) (= (get temp___486 2 2) temp___495))))))
(assert (forall ((temp___500 Bool) (temp___501 Bool) (temp___502 Bool) (temp___503 Bool) (temp___504 Bool) (temp___505 Bool) (temp___506 Bool) (temp___507 Bool) (temp___508 Bool)) (let ((temp___499 (temp___498 temp___500 temp___501 temp___502 temp___503 temp___504 temp___505 temp___506 temp___507 temp___508))) (and (and (and (and (= (get temp___499 0 0) temp___500) (= (get temp___499 0 1) temp___501)) (= (get temp___499 0 2) temp___502)) (and (and (= (get temp___499 1 0) temp___503) (= (get temp___499 1 1) temp___504)) (= (get temp___499 1 2) temp___505))) (and (and (= (get temp___499 2 0) temp___506) (= (get temp___499 2 1) temp___507)) (= (get temp___499 2 2) temp___508))))))
(assert (forall ((temp___513 Bool) (temp___514 Bool) (temp___515 Bool) (temp___516 Bool) (temp___517 Bool) (temp___518 Bool) (temp___519 Bool) (temp___520 Bool) (temp___521 Bool)) (let ((temp___512 (temp___511 temp___513 temp___514 temp___515 temp___516 temp___517 temp___518 temp___519 temp___520 temp___521))) (and (and (and (and (= (get temp___512 0 0) temp___513) (= (get temp___512 0 1) temp___514)) (= (get temp___512 0 2) temp___515)) (and (and (= (get temp___512 1 0) temp___516) (= (get temp___512 1 1) temp___517)) (= (get temp___512 1 2) temp___518))) (and (and (= (get temp___512 2 0) temp___519) (= (get temp___512 2 1) temp___520)) (= (get temp___512 2 2) temp___521))))))
(assert (forall ((temp___526 Bool) (temp___527 Bool) (temp___528 Bool) (temp___529 Bool) (temp___530 Bool) (temp___531 Bool) (temp___532 Bool) (temp___533 Bool) (temp___534 Bool)) (let ((temp___525 (temp___524 temp___526 temp___527 temp___528 temp___529 temp___530 temp___531 temp___532 temp___533 temp___534))) (and (and (and (and (= (get temp___525 0 0) temp___526) (= (get temp___525 0 1) temp___527)) (= (get temp___525 0 2) temp___528)) (and (and (= (get temp___525 1 0) temp___529) (= (get temp___525 1 1) temp___530)) (= (get temp___525 1 2) temp___531))) (and (and (= (get temp___525 2 0) temp___532) (= (get temp___525 2 1) temp___533)) (= (get temp___525 2 2) temp___534))))))
(assert true)
(assert (forall ((b (Array Int (Array Int cell)))) (forall ((y Int) (x Int)) (! (= (= (is_empty b y x) true) (and (and (in_range9 x) (in_range10 y)) (= (to_rep (let ((temp___2231 (select b y))) (select temp___2231 x))) 0))) :pattern ((is_empty b y x))))))
(declare-fun is_complete_line ((Array Int cell)) Bool)
(declare-fun is_complete_line__function_guard (Bool (Array Int cell)) Bool)
(assert true)
(assert (forall ((l (Array Int cell))) (! (= (= (is_complete_line l) true) (forall ((x Int)) (=> (and (<= 1 x) (<= x 10)) (not (= (to_rep (select l x)) 0))))) :pattern ((is_complete_line l)))))
(declare-fun no_complete_lines ((Array Int (Array Int cell))) Bool)
(declare-fun no_complete_lines__function_guard (Bool (Array Int (Array Int cell))) Bool)
(assert true)
(assert (forall ((b (Array Int (Array Int cell)))) (! (= (= (no_complete_lines b) true) (forall ((y Int)) (=> (and (<= 1 y) (<= y 20)) (not (= (is_complete_line (select b y)) true))))) :pattern ((no_complete_lines b)))))
(assert true)
(assert (forall ((cur_board (Array Int (Array Int cell)))) (forall ((cur_state Int)) (forall ((cur_piece us_rep)) (! (= (= (valid_configuration cur_board cur_state cur_piece) true) (ite (or (= cur_state 0) (= cur_state 1)) (= (no_overlap cur_board cur_piece) true) (=> (not (= cur_state 2)) (=> (not (= cur_state 4)) (= (no_complete_lines cur_board) true))))) :pattern ((valid_configuration cur_board cur_state cur_piece)))))))
(declare-sort turn_action 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 3 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq14 (turn_action turn_action) Bool)
(declare-const dummy14 turn_action)
(declare-datatypes () ((turn_action__ref (mk_turn_action__ref (turn_action__content turn_action)))))
(define-fun turn_action__ref___projection ((a1 turn_action__ref)) turn_action (turn_action__content a1))
(define-fun dynamic_invariant10 ((temp___expr_2278 Int) (temp___is_init_2274 Bool) (temp___skip_constant_2275 Bool) (temp___do_toplevel_2276 Bool) (temp___do_typ_inv_2277 Bool)) Bool (=> (or (= temp___is_init_2274 true) (<= 3 4)) (in_range11 temp___expr_2278)))
(assert (forall ((d Int) (t Int)) (! (=> (and (dynamic_invariant9 d true true true true) (dynamic_invariant10 t true true true true)) (dynamic_invariant9 (turn_direction d t) true false true true)) :pattern ((turn_direction d t)))))
(assert (forall ((d Int) (t Int)) (! (=> (and (dynamic_invariant9 d true true true true) (dynamic_invariant10 t true true true true)) (= (turn_direction d t) (ite (= t 3) (ite (= d 0) 3 (- d 1)) (ite (= d 3) 0 (+ d 1))))) :pattern ((turn_direction d t)))))
(declare-const success Bool)
(declare-const cur_board (Array Int (Array Int cell)))
(declare-const cur_piece__split_fields shape)
(declare-const cur_piece__split_fields1 direction)
(declare-const cur_piece__split_fields2 px_coord)
(declare-const cur_piece__split_fields3 py_coord)
(declare-const cur_state Int)
(declare-const candidate__split_fields shape)
(declare-const candidate__split_fields1 direction)
(declare-const candidate__split_fields2 px_coord)
(declare-const candidate__split_fields3 py_coord)
(declare-const temp___2359 shape)
(declare-const temp___23591 direction)
(declare-const temp___23592 px_coord)
(declare-const temp___23593 py_coord)
(declare-const success1 Bool)
(declare-const cur_piece__split_fields4 shape)
(declare-const cur_piece__split_fields5 direction)
(declare-const cur_piece__split_fields6 px_coord)
(declare-const cur_piece__split_fields7 py_coord)
(declare-const candidate__split_fields4 shape)
(declare-const candidate__split_fields5 direction)
(declare-const candidate__split_fields6 px_coord)
(declare-const candidate__split_fields7 py_coord)
(declare-const result Bool)
(declare-const result1 shape)
(declare-const result2 direction)
(declare-const result3 px_coord)
(declare-const result4 py_coord)
(declare-const candidate__split_fields8 shape)
(declare-const candidate__split_fields9 direction)
(declare-const candidate__split_fields10 px_coord)
(declare-const candidate__split_fields11 py_coord)
(declare-const result5 Bool)
(declare-const result6 shape)
(declare-const result7 direction)
(declare-const result8 px_coord)
(declare-const result9 py_coord)
(declare-const cur_piece__split_fields8 shape)
(declare-const cur_piece__split_fields9 direction)
(declare-const cur_piece__split_fields10 px_coord)
(declare-const cur_piece__split_fields11 py_coord)
(declare-const result10 Bool)
(declare-const success2 Bool)
(declare-const result11 Bool)
(declare-const success3 Bool)
(declare-const success4 Bool)
(declare-const cur_piece__split_fields12 shape)
(declare-const cur_piece__split_fields13 direction)
(declare-const cur_piece__split_fields14 px_coord)
(declare-const cur_piece__split_fields15 py_coord)
(declare-const candidate__split_fields12 us_split_fields__ref)
(declare-const success5 Bool)
(declare-const cur_piece__split_fields16 us_split_fields)
(declare-const candidate__split_fields13 us_split_fields)
(declare-const success6 bool__ref)
(declare-const cur_piece__split_fields17 us_split_fields__ref)
(declare-const candidate__split_fields14 us_split_fields__ref)
(declare-const success7 Bool)
(declare-const cur_piece__split_fields18 us_split_fields)
(declare-const candidate__split_fields15 us_split_fields)
(define-fun cur_piece__split_fields19 () us_split_fields (mk___split_fields cur_piece__split_fields8 cur_piece__split_fields9 cur_piece__split_fields10 cur_piece__split_fields11))
(define-fun candidate__split_fields16 () us_split_fields (mk___split_fields candidate__split_fields8 candidate__split_fields9 candidate__split_fields10 candidate__split_fields11))
(define-fun result12 () us_split_fields__ref (mk___split_fields__ref (mk___split_fields result1 result2 result3 result4)))
(define-fun cur_piece__split_fields20 () us_split_fields (mk___split_fields cur_piece__split_fields4 cur_piece__split_fields5 cur_piece__split_fields6 cur_piece__split_fields7))
(define-fun temp___23594 () us_rep (mk___rep (mk___split_fields temp___2359 temp___23591 temp___23592 temp___23593)))
(define-fun candidate__split_fields17 () us_split_fields__ref (mk___split_fields__ref (mk___split_fields candidate__split_fields candidate__split_fields1 candidate__split_fields2 candidate__split_fields3)))
(assert (in_range6 cur_state))
(assert (in_range7 a))
(assert (and (= (get_state cur_state) 0) (= (valid_configuration__2 cur_state (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 cur_piece__split_fields3) cur_board) true)))
(assert (or (and (and (and (= candidate__split_fields12 (mk___split_fields__ref candidate__split_fields16)) (and (and (= cur_piece__split_fields12 cur_piece__split_fields8) (and (= cur_piece__split_fields13 cur_piece__split_fields9) (and (= cur_piece__split_fields14 cur_piece__split_fields10) (= cur_piece__split_fields15 cur_piece__split_fields11)))) (= success2 success4))) (and (= candidate__split_fields13 candidate__split_fields16) (and (= cur_piece__split_fields16 cur_piece__split_fields19) (= success5 success2)))) (and (and (= result (move_is_possible (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 cur_piece__split_fields3)) a)) (= (= result true) (ite (= a 0) (in_range3 (- (to_rep2 cur_piece__split_fields2) 1)) (ite (= a 1) (in_range3 (+ (to_rep2 cur_piece__split_fields2) 1)) (=> (= a 2) (in_range4 (+ (to_rep3 cur_piece__split_fields3) 1))))))) (and (= result true) (and (and (and (= temp___23594 (move (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 cur_piece__split_fields3)) a)) (= temp___23594 (ite (= a 0) (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 (of_rep2 (- (to_rep2 cur_piece__split_fields2) 1)) cur_piece__split_fields3)) (ite (= a 1) (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 (of_rep2 (+ (to_rep2 cur_piece__split_fields2) 1)) cur_piece__split_fields3)) (ite (= a 2) (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 (of_rep3 (+ (to_rep3 cur_piece__split_fields3) 1)))) (mk___rep (mk___split_fields cur_piece__split_fields (of_rep4 (turn_direction (to_rep4 cur_piece__split_fields1) a)) cur_piece__split_fields2 cur_piece__split_fields3))))))) (and (= result12 candidate__split_fields17) (and (= temp___2359 candidate__split_fields8) (and (= temp___23591 candidate__split_fields9) (and (= temp___23592 candidate__split_fields10) (= temp___23593 candidate__split_fields11)))))) (and (and (= result5 (no_overlap cur_board (mk___rep candidate__split_fields16))) (= (= result5 true) (ite (= (to_rep1 candidate__split_fields8) 2) (and (and (and (= (is_empty cur_board (to_rep3 candidate__split_fields11) (to_rep2 candidate__split_fields10)) true) (= (is_empty cur_board (to_rep3 candidate__split_fields11) (+ (to_rep2 candidate__split_fields10) 1)) true)) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) 1) (to_rep2 candidate__split_fields10)) true)) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) 1) (+ (to_rep2 candidate__split_fields10) 1)) true)) (ite (= (to_rep1 candidate__split_fields8) 1) (forall ((y Int)) (=> (and (<= 0 y) (<= y 3)) (forall ((x Int)) (=> (and (<= 0 x) (<= x 3)) (=> (= (get (select possible_i_shapes (to_rep4 candidate__split_fields9)) y x) true) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) y) (+ (to_rep2 candidate__split_fields10) x)) true)))))) (forall ((y Int)) (=> (and (<= 0 y) (<= y 2)) (forall ((x Int)) (=> (and (<= 0 x) (<= x 2)) (=> (= (get (get1 possible_three_shapes (to_rep1 candidate__split_fields8) (to_rep4 candidate__split_fields9)) y x) true) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) y) (+ (to_rep2 candidate__split_fields10) x)) true)))))))))) (and (= result5 true) (and (and (and (= result6 cur_piece__split_fields) (and (= result7 cur_piece__split_fields1) (and (= result8 cur_piece__split_fields2) (= result9 cur_piece__split_fields3)))) (= cur_piece__split_fields19 candidate__split_fields16)) (and (= result10 success) (= success2 (distinct 1 0)))))))))) (and (and (and (= result (move_is_possible (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 cur_piece__split_fields3)) a)) (= (= result true) (ite (= a 0) (in_range3 (- (to_rep2 cur_piece__split_fields2) 1)) (ite (= a 1) (in_range3 (+ (to_rep2 cur_piece__split_fields2) 1)) (=> (= a 2) (in_range4 (+ (to_rep3 cur_piece__split_fields3) 1))))))) (ite (= result true) (and (and (and (= temp___23594 (move (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 cur_piece__split_fields3)) a)) (= temp___23594 (ite (= a 0) (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 (of_rep2 (- (to_rep2 cur_piece__split_fields2) 1)) cur_piece__split_fields3)) (ite (= a 1) (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 (of_rep2 (+ (to_rep2 cur_piece__split_fields2) 1)) cur_piece__split_fields3)) (ite (= a 2) (mk___rep (mk___split_fields cur_piece__split_fields cur_piece__split_fields1 cur_piece__split_fields2 (of_rep3 (+ (to_rep3 cur_piece__split_fields3) 1)))) (mk___rep (mk___split_fields cur_piece__split_fields (of_rep4 (turn_direction (to_rep4 cur_piece__split_fields1) a)) cur_piece__split_fields2 cur_piece__split_fields3))))))) (and (= result12 candidate__split_fields17) (and (= temp___2359 candidate__split_fields8) (and (= temp___23591 candidate__split_fields9) (and (= temp___23592 candidate__split_fields10) (= temp___23593 candidate__split_fields11)))))) (and (and (= result5 (no_overlap cur_board (mk___rep candidate__split_fields16))) (= (= result5 true) (ite (= (to_rep1 candidate__split_fields8) 2) (and (and (and (= (is_empty cur_board (to_rep3 candidate__split_fields11) (to_rep2 candidate__split_fields10)) true) (= (is_empty cur_board (to_rep3 candidate__split_fields11) (+ (to_rep2 candidate__split_fields10) 1)) true)) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) 1) (to_rep2 candidate__split_fields10)) true)) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) 1) (+ (to_rep2 candidate__split_fields10) 1)) true)) (ite (= (to_rep1 candidate__split_fields8) 1) (forall ((y Int)) (=> (and (<= 0 y) (<= y 3)) (forall ((x Int)) (=> (and (<= 0 x) (<= x 3)) (=> (= (get (select possible_i_shapes (to_rep4 candidate__split_fields9)) y x) true) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) y) (+ (to_rep2 candidate__split_fields10) x)) true)))))) (forall ((y Int)) (=> (and (<= 0 y) (<= y 2)) (forall ((x Int)) (=> (and (<= 0 x) (<= x 2)) (=> (= (get (get1 possible_three_shapes (to_rep1 candidate__split_fields8) (to_rep4 candidate__split_fields9)) y x) true) (= (is_empty cur_board (+ (to_rep3 candidate__split_fields11) y) (+ (to_rep2 candidate__split_fields10) x)) true)))))))))) (and (not (= result5 true)) (and (and (and (= cur_piece__split_fields cur_piece__split_fields8) (and (= cur_piece__split_fields1 cur_piece__split_fields9) (and (= cur_piece__split_fields2 cur_piece__split_fields10) (= cur_piece__split_fields3 cur_piece__split_fields11)))) (= success2 success)) (and (= cur_piece__split_fields19 cur_piece__split_fields20) (= success2 success1)))))) (and (and (and (= candidate__split_fields candidate__split_fields8) (and (= candidate__split_fields1 candidate__split_fields9) (and (= candidate__split_fields2 candidate__split_fields10) (= candidate__split_fields3 candidate__split_fields11)))) (and (and (= cur_piece__split_fields cur_piece__split_fields8) (and (= cur_piece__split_fields1 cur_piece__split_fields9) (and (= cur_piece__split_fields2 cur_piece__split_fields10) (= cur_piece__split_fields3 cur_piece__split_fields11)))) (= success2 success))) (and (and (= candidate__split_fields4 candidate__split_fields8) (and (= candidate__split_fields5 candidate__split_fields9) (and (= candidate__split_fields6 candidate__split_fields10) (= candidate__split_fields7 candidate__split_fields11)))) (and (= cur_piece__split_fields19 cur_piece__split_fields20) (= success2 success1)))))) (and (and (and (= candidate__split_fields12 (mk___split_fields__ref candidate__split_fields16)) (and (and (= cur_piece__split_fields12 cur_piece__split_fields8) (and (= cur_piece__split_fields13 cur_piece__split_fields9) (and (= cur_piece__split_fields14 cur_piece__split_fields10) (= cur_piece__split_fields15 cur_piece__split_fields11)))) (= success3 success4))) (and (= candidate__split_fields13 candidate__split_fields16) (and (= cur_piece__split_fields16 cur_piece__split_fields19) (= success5 success3)))) (and (= result11 success2) (= success3 (distinct 0 0)))))))
(assert (= candidate__split_fields14 candidate__split_fields12))
(assert (= cur_piece__split_fields17 (mk___split_fields__ref (mk___split_fields cur_piece__split_fields12 cur_piece__split_fields13 cur_piece__split_fields14 cur_piece__split_fields15))))
(assert (= success6 (mk_bool__ref success4)))
(assert (= candidate__split_fields15 candidate__split_fields13))
(assert (= cur_piece__split_fields18 cur_piece__split_fields16))
(assert (= success7 success5))
(assert (not (= (valid_configuration__2 cur_state (us_split_fields__content cur_piece__split_fields17) cur_board) true)))
(check-sat)
(exit)
