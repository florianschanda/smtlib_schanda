(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type my_integer

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : my_integer, my_integer -> bool

logic dummy : my_integer

type my_integer__ref = { my_integer__content : my_integer
}

function my_integer__ref___projection(a: my_integer__ref) : my_integer =
  (a).my_integer__content

logic to_rep : my_integer -> int

logic of_rep : int -> my_integer

axiom inversion_axiom :
  (forall x:my_integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__storage_place_attributes__r2__d1 : my_integer
}

function us_split_discrs___projection(a: us_split_discrs) : my_integer =
  (a).rec__storage_place_attributes__r2__d1

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__storage_place_attributes__r2__d3 : integer;
rec__storage_place_attributes__r2__d2 : bool
}

function us_split_fields_D3__projection(a: us_split_fields) : integer =
  (a).rec__storage_place_attributes__r2__d3

function us_split_fields_D2__projection(a: us_split_fields) : bool =
  (a).rec__storage_place_attributes__r2__d2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___5__projection(a: us_rep) : bool = (a).attr__constrained

predicate storage_place_attributes__r2__d2__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 5)

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1) = to_rep(((b).us_split_discrs1).rec__storage_place_attributes__r2__d1)) and
  ((to_rep1(((a).us_split_fields1).rec__storage_place_attributes__r2__d3) = to_rep1(((b).us_split_fields1).rec__storage_place_attributes__r2__d3)) and
  (storage_place_attributes__r2__d2__pred(a) ->
  (((a).us_split_fields1).rec__storage_place_attributes__r2__d2 = ((b).us_split_fields1).rec__storage_place_attributes__r2__d2)))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1) = to_rep(((b).us_split_discrs1).rec__storage_place_attributes__r2__d1)) and
  ((to_rep1(((a).us_split_fields1).rec__storage_place_attributes__r2__d3) = to_rep1(((b).us_split_fields1).rec__storage_place_attributes__r2__d3)) and
  (storage_place_attributes__r2__d2__pred(a) ->
  (((a).us_split_fields1).rec__storage_place_attributes__r2__d2 = ((b).us_split_fields1).rec__storage_place_attributes__r2__d2))))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:my_integer. forall a1:integer. forall a2:bool. forall a3:bool.
  (0 <= object__size({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = a }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = a1;
  rec__storage_place_attributes__r2__d2 = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:my_integer. forall a1:integer. forall a2:bool. forall a3:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = a }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = a1;
  rec__storage_place_attributes__r2__d2 = a2 }; attr__constrained = a3 })))

logic storage_place_attributes__r2__d1__first__bit : int

logic storage_place_attributes__r2__d1__last__bit : int

logic storage_place_attributes__r2__d1__position : int

axiom storage_place_attributes__r2__d1__first__bit_axiom :
  (0 <= storage_place_attributes__r2__d1__first__bit)

axiom storage_place_attributes__r2__d1__last__bit_axiom :
  (storage_place_attributes__r2__d1__first__bit <  storage_place_attributes__r2__d1__last__bit)

axiom storage_place_attributes__r2__d1__position_axiom :
  (0 <= storage_place_attributes__r2__d1__position)

logic storage_place_attributes__r2__d3__first__bit : int

logic storage_place_attributes__r2__d3__last__bit : int

logic storage_place_attributes__r2__d3__position : int

axiom storage_place_attributes__r2__d3__first__bit_axiom :
  (0 <= storage_place_attributes__r2__d3__first__bit)

axiom storage_place_attributes__r2__d3__last__bit_axiom :
  (storage_place_attributes__r2__d3__first__bit <  storage_place_attributes__r2__d3__last__bit)

axiom storage_place_attributes__r2__d3__position_axiom :
  (0 <= storage_place_attributes__r2__d3__position)

logic storage_place_attributes__r2__d2__first__bit : int

logic storage_place_attributes__r2__d2__last__bit : int

logic storage_place_attributes__r2__d2__position : int

axiom storage_place_attributes__r2__d2__first__bit_axiom :
  (0 <= storage_place_attributes__r2__d2__first__bit)

axiom storage_place_attributes__r2__d2__last__bit_axiom :
  (storage_place_attributes__r2__d2__first__bit <  storage_place_attributes__r2__d2__last__bit)

axiom storage_place_attributes__r2__d2__position_axiom :
  (0 <= storage_place_attributes__r2__d2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : my_integer

logic dummy3 : integer

logic dummy4 : bool

logic dummy5 : bool

type r2__ref = { r2__content : us_rep
}

function r2__ref___projection(a: r2__ref) : us_rep = (a).r2__content

predicate in_range3(rec__storage_place_attributes__r2__d11: int, a: us_rep) =
  (rec__storage_place_attributes__r2__d11 = to_rep(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:my_integer. forall a1:integer. forall a2:bool. forall a3:bool.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = a }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = a1;
  rec__storage_place_attributes__r2__d2 = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:my_integer. forall a1:integer. forall a2:bool. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = a }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = a1;
  rec__storage_place_attributes__r2__d2 = a2 }; attr__constrained = a3 })))

logic storage_place_attributes__r2__d1__first__bit1 : int

logic storage_place_attributes__r2__d1__last__bit1 : int

logic storage_place_attributes__r2__d1__position1 : int

axiom storage_place_attributes__r2__d1__first__bit_axiom1 :
  (0 <= storage_place_attributes__r2__d1__first__bit1)

axiom storage_place_attributes__r2__d1__last__bit_axiom1 :
  (storage_place_attributes__r2__d1__first__bit1 <  storage_place_attributes__r2__d1__last__bit1)

axiom storage_place_attributes__r2__d1__position_axiom1 :
  (0 <= storage_place_attributes__r2__d1__position1)

logic storage_place_attributes__r2__d3__first__bit1 : int

logic storage_place_attributes__r2__d3__last__bit1 : int

logic storage_place_attributes__r2__d3__position1 : int

axiom storage_place_attributes__r2__d3__first__bit_axiom1 :
  (0 <= storage_place_attributes__r2__d3__first__bit1)

axiom storage_place_attributes__r2__d3__last__bit_axiom1 :
  (storage_place_attributes__r2__d3__first__bit1 <  storage_place_attributes__r2__d3__last__bit1)

axiom storage_place_attributes__r2__d3__position_axiom1 :
  (0 <= storage_place_attributes__r2__d3__position1)

logic storage_place_attributes__r2__d2__first__bit1 : int

logic storage_place_attributes__r2__d2__last__bit1 : int

logic storage_place_attributes__r2__d2__position1 : int

axiom storage_place_attributes__r2__d2__first__bit_axiom1 :
  (0 <= storage_place_attributes__r2__d2__first__bit1)

axiom storage_place_attributes__r2__d2__last__bit_axiom1 :
  (storage_place_attributes__r2__d2__first__bit1 <  storage_place_attributes__r2__d2__last__bit1)

axiom storage_place_attributes__r2__d2__position_axiom1 :
  (0 <= storage_place_attributes__r2__d2__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy6 : my_integer

logic dummy7 : integer

logic dummy8 : bool

logic dummy9 : bool

type r2a__ref = { r2a__content : us_rep
}

function r2a__ref___projection(a: r2a__ref) : us_rep = (a).r2a__content

predicate in_range4(rec__storage_place_attributes__r2__d11: int, a: us_rep) =
  (rec__storage_place_attributes__r2__d11 = to_rep(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:my_integer. forall a1:integer. forall a2:bool. forall a3:bool.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = a }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = a1;
  rec__storage_place_attributes__r2__d2 = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:my_integer. forall a1:integer. forall a2:bool. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = a }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = a1;
  rec__storage_place_attributes__r2__d2 = a2 }; attr__constrained = a3 })))

logic storage_place_attributes__r2__d1__first__bit2 : int

logic storage_place_attributes__r2__d1__last__bit2 : int

logic storage_place_attributes__r2__d1__position2 : int

axiom storage_place_attributes__r2__d1__first__bit_axiom2 :
  (0 <= storage_place_attributes__r2__d1__first__bit2)

axiom storage_place_attributes__r2__d1__last__bit_axiom2 :
  (storage_place_attributes__r2__d1__first__bit2 <  storage_place_attributes__r2__d1__last__bit2)

axiom storage_place_attributes__r2__d1__position_axiom2 :
  (0 <= storage_place_attributes__r2__d1__position2)

logic storage_place_attributes__r2__d2__first__bit2 : int

logic storage_place_attributes__r2__d2__last__bit2 : int

logic storage_place_attributes__r2__d2__position2 : int

axiom storage_place_attributes__r2__d2__first__bit_axiom2 :
  (0 <= storage_place_attributes__r2__d2__first__bit2)

axiom storage_place_attributes__r2__d2__last__bit_axiom2 :
  (storage_place_attributes__r2__d2__first__bit2 <  storage_place_attributes__r2__d2__last__bit2)

axiom storage_place_attributes__r2__d2__position_axiom2 :
  (0 <= storage_place_attributes__r2__d2__position2)

logic storage_place_attributes__r2__d3__first__bit2 : int

logic storage_place_attributes__r2__d3__last__bit2 : int

logic storage_place_attributes__r2__d3__position2 : int

axiom storage_place_attributes__r2__d3__first__bit_axiom2 :
  (0 <= storage_place_attributes__r2__d3__first__bit2)

axiom storage_place_attributes__r2__d3__last__bit_axiom2 :
  (storage_place_attributes__r2__d3__first__bit2 <  storage_place_attributes__r2__d3__last__bit2)

axiom storage_place_attributes__r2__d3__position_axiom2 :
  (0 <= storage_place_attributes__r2__d3__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy10 : my_integer

logic dummy11 : integer

logic dummy12 : bool

logic dummy13 : bool

type r2b__ref = { r2b__content : us_rep
}

function r2b__ref___projection(a: r2b__ref) : us_rep = (a).r2b__content

type tTr2a_arrSP1

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tTr2a_arrSP1, tTr2a_arrSP1 -> bool

logic dummy14 : tTr2a_arrSP1

type tTr2a_arrSP1__ref = { tTr2a_arrSP1__content : tTr2a_arrSP1
}

function tTr2a_arrSP1__ref___projection(a: tTr2a_arrSP1__ref) : tTr2a_arrSP1 =
  (a).tTr2a_arrSP1__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:my_integer. forall v1:integer. forall v2:bool. forall v3:bool.
  (forall i:int [(singleton({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = v }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = v1;
  rec__storage_place_attributes__r2__d2 = v2 }; attr__constrained = v3 },
  i)[i])]. ((singleton({ us_split_discrs1 = {
  rec__storage_place_attributes__r2__d1 = v }; us_split_fields1 = {
  rec__storage_place_attributes__r2__d3 = v1;
  rec__storage_place_attributes__r2__d2 = v2 }; attr__constrained = v3 },
  i)[i]) = { us_split_discrs1 = { rec__storage_place_attributes__r2__d1 = v
  }; us_split_fields1 = { rec__storage_place_attributes__r2__d3 = v1;
  rec__storage_place_attributes__r2__d2 = v2 }; attr__constrained = v3 })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq4((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq4((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq4((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic o2a__split_discrs : my_integer

logic o2a__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic o2aa__split_discrs : my_integer

logic o2aa__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic o2b__split_discrs : my_integer

logic o2b__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic o2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r2a_arr : (int,us_rep) farray

logic o2a__split_fields : integer

logic o2a__split_fields1 : bool

logic o2aa__split_fields : integer

logic o2aa__split_fields1 : bool

logic o2b__split_fields : integer

logic o2b__split_fields1 : bool

logic o2__split_fields : integer

logic o2__split_fields1 : bool

logic o2__split_discrs : my_integer

logic us : int

logic us1 : int

logic us2 : int

axiom H : ((us = 5) and in_range1(5))

axiom H1 : ((us1 = 5) and in_range1(5))

axiom H2 : ((us2 = 1) and in_range1(1))

axiom H3 :
  (forall temp___239:int. (((1 <= temp___239) and (temp___239 <= 3)) ->
  ((((r2a_arr[temp___239])).attr__constrained = true) and
  (((to_rep((((r2a_arr[temp___239])).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 5) and
  (to_rep1((((r2a_arr[temp___239])).us_split_fields1).rec__storage_place_attributes__r2__d3) = 0)) and
  ((to_rep((((r2a_arr[temp___239])).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 5) ->
  ((((r2a_arr[temp___239])).us_split_fields1).rec__storage_place_attributes__r2__d2 = of_int(0)))))))

axiom H4 :
  (forall temp___235:int. (((1 <= temp___235) and (temp___235 <= 3)) ->
  (((5 = to_rep((((r2a_arr[temp___235])).us_split_discrs1).rec__storage_place_attributes__r2__d1)) and
  (((r2a_arr[temp___235])).attr__constrained = true)) and
  (((r2a_arr[temp___235])).attr__constrained = true))))

axiom H5 : ((o2a__attr__constrained = true) and
  (((to_rep(o2a__split_discrs) = 5) and (to_rep1(o2a__split_fields) = 0)) and
  ((to_rep(o2a__split_discrs) = 5) -> (o2a__split_fields1 = of_int(0)))))

axiom H6 : ((5 = to_rep(o2a__split_discrs)) and
  (o2a__attr__constrained = true))

axiom H7 : ((o2aa__attr__constrained = true) and
  (((to_rep(o2aa__split_discrs) = 5) and
  (to_rep1(o2aa__split_fields) = 0)) and ((to_rep(o2aa__split_discrs) = 5) ->
  (o2aa__split_fields1 = of_int(0)))))

axiom H8 : ((5 = to_rep(o2aa__split_discrs)) and
  (o2aa__attr__constrained = true))

axiom H9 : ((o2b__attr__constrained = true) and
  (((to_rep(o2b__split_discrs) = 1) and ((to_rep(o2b__split_discrs) = 5) ->
  (o2b__split_fields1 = of_int(0)))) and (to_rep1(o2b__split_fields) = 0)))

axiom H10 : ((1 = to_rep(o2b__split_discrs)) and
  (o2b__attr__constrained = true))

axiom H11 :
  (storage_place_attributes__r2__d3__first__bit1 = storage_place_attributes__r2__d3__first__bit2)

axiom H12 : true

 (* File "storage_place_attributes.adb", line 1, characters 0-0 *)
goal WP_parameter_def : true
