(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort percentage 0)
(declare-fun percentageqtint (percentage) Int)
(assert (forall ((i percentage)) (and (<= 0 (percentageqtint i)) (<= (percentageqtint i) 100))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (percentage percentage) Bool)
(declare-const dummy percentage)
(declare-datatypes () ((percentage__ref (mk_percentage__ref (percentage__content percentage)))))
(define-fun percentage__ref___projection ((a percentage__ref)) percentage (percentage__content a))
(define-fun dynamic_invariant ((temp___expr_172 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= 0 100)) (in_range1 temp___expr_172)))
(define-fun to_rep ((x percentage)) Int (percentageqtint x))
(declare-fun of_rep (Int) percentage)
(assert (forall ((x percentage)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x percentage)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pupils__participation__studying Bool) (rec__pupils__participation__score percentage)))))
(define-fun us_split_fields_Studying__projection ((a us_split_fields)) Bool (rec__pupils__participation__studying a))
(define-fun us_split_fields_Score__projection ((a us_split_fields)) percentage (rec__pupils__participation__score a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__pupils__participation__studying (us_split_fields1 a)) (rec__pupils__participation__studying (us_split_fields1 b))) (= (to_rep (rec__pupils__participation__score (us_split_fields1 a))) (to_rep (rec__pupils__participation__score (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const pupils__participation__studying__first__bit Int)
(declare-const pupils__participation__studying__last__bit Int)
(declare-const pupils__participation__studying__position Int)
(assert (<= 0 pupils__participation__studying__first__bit))
(assert (< pupils__participation__studying__first__bit pupils__participation__studying__last__bit))
(assert (<= 0 pupils__participation__studying__position))
(declare-const pupils__participation__score__first__bit Int)
(declare-const pupils__participation__score__last__bit Int)
(declare-const pupils__participation__score__position Int)
(assert (<= 0 pupils__participation__score__first__bit))
(assert (< pupils__participation__score__first__bit pupils__participation__score__last__bit))
(assert (<= 0 pupils__participation__score__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((participation__ref (mk_participation__ref (participation__content us_rep)))))
(define-fun participation__ref___projection ((a participation__ref)) us_rep (participation__content a))
(declare-sort subject 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (subject subject) Bool)
(declare-const dummy2 subject)
(declare-datatypes () ((subject__ref (mk_subject__ref (subject__content subject)))))
(define-fun subject__ref___projection ((a subject__ref)) subject (subject__content a))
(define-fun dynamic_invariant1 ((temp___expr_188 Int) (temp___is_init_184 Bool) (temp___skip_constant_185 Bool) (temp___do_toplevel_186 Bool) (temp___do_typ_inv_187 Bool)) Bool (=> (or (= temp___is_init_184 true) (<= 0 18)) (in_range2 temp___expr_188)))
(declare-fun to_rep1 (subject) Int)
(declare-fun of_rep1 (Int) subject)
(assert (forall ((x subject)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x subject)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (character character) Bool)
(declare-const dummy3 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep2 (character) Int)
(declare-fun of_rep2 (Int) character)
(assert (forall ((x character)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int character))))))
(declare-fun slide1 ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep2 (select a temp___idx_91)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep2 (select a temp___idx_91)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-sort formtype 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (formtype formtype) Bool)
(declare-const dummy4 formtype)
(declare-datatypes () ((formtype__ref (mk_formtype__ref (formtype__content formtype)))))
(define-fun formtype__ref___projection ((a formtype__ref)) formtype (formtype__content a))
(define-fun dynamic_invariant2 ((temp___expr_224 Int) (temp___is_init_220 Bool) (temp___skip_constant_221 Bool) (temp___do_toplevel_222 Bool) (temp___do_typ_inv_223 Bool)) Bool (=> (or (= temp___is_init_220 true) (<= 0 8)) (in_range4 temp___expr_224)))
(declare-fun to_rep3 (formtype) Int)
(declare-fun of_rep3 (Int) formtype)
(assert (forall ((x formtype)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x formtype)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-const dummy5 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-const dummy6 (Array Int character))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int character)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__pupils__pupiltype__surname (Array Int character)) (rec__pupils__pupiltype__forename (Array Int character)) (rec__pupils__pupiltype__form formtype) (rec__pupils__pupiltype__scores (Array Int us_rep))))))
(define-fun us_split_fields_Surname__projection ((a us_split_fields2)) (Array Int character) (rec__pupils__pupiltype__surname a))
(define-fun us_split_fields_Forename__projection ((a us_split_fields2)) (Array Int character) (rec__pupils__pupiltype__forename a))
(define-fun us_split_fields_Form__projection ((a us_split_fields2)) formtype (rec__pupils__pupiltype__form a))
(define-fun us_split_fields_Scores__projection ((a us_split_fields2)) (Array Int us_rep) (rec__pupils__pupiltype__scores a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (bool_eq2 (rec__pupils__pupiltype__surname (us_split_fields3 a)) 1 25 (rec__pupils__pupiltype__surname (us_split_fields3 b)) 1 25) true) (= (bool_eq2 (rec__pupils__pupiltype__forename (us_split_fields3 a)) 1 25 (rec__pupils__pupiltype__forename (us_split_fields3 b)) 1 25) true)) (= (to_rep3 (rec__pupils__pupiltype__form (us_split_fields3 a))) (to_rep3 (rec__pupils__pupiltype__form (us_split_fields3 b))))) (= (bool_eq1 (rec__pupils__pupiltype__scores (us_split_fields3 a)) 0 18 (rec__pupils__pupiltype__scores (us_split_fields3 b)) 0 18) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const pupils__pupiltype__surname__first__bit Int)
(declare-const pupils__pupiltype__surname__last__bit Int)
(declare-const pupils__pupiltype__surname__position Int)
(assert (<= 0 pupils__pupiltype__surname__first__bit))
(assert (< pupils__pupiltype__surname__first__bit pupils__pupiltype__surname__last__bit))
(assert (<= 0 pupils__pupiltype__surname__position))
(declare-const pupils__pupiltype__forename__first__bit Int)
(declare-const pupils__pupiltype__forename__last__bit Int)
(declare-const pupils__pupiltype__forename__position Int)
(assert (<= 0 pupils__pupiltype__forename__first__bit))
(assert (< pupils__pupiltype__forename__first__bit pupils__pupiltype__forename__last__bit))
(assert (<= 0 pupils__pupiltype__forename__position))
(declare-const pupils__pupiltype__form__first__bit Int)
(declare-const pupils__pupiltype__form__last__bit Int)
(declare-const pupils__pupiltype__form__position Int)
(assert (<= 0 pupils__pupiltype__form__first__bit))
(assert (< pupils__pupiltype__form__first__bit pupils__pupiltype__form__last__bit))
(assert (<= 0 pupils__pupiltype__form__position))
(declare-const pupils__pupiltype__scores__first__bit Int)
(declare-const pupils__pupiltype__scores__last__bit Int)
(declare-const pupils__pupiltype__scores__position Int)
(assert (<= 0 pupils__pupiltype__scores__first__bit))
(assert (< pupils__pupiltype__scores__first__bit pupils__pupiltype__scores__last__bit))
(assert (<= 0 pupils__pupiltype__scores__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((pupiltype__ref (mk_pupiltype__ref (pupiltype__content us_rep1)))))
(define-fun pupiltype__ref___projection ((a pupiltype__ref)) us_rep1 (pupiltype__content a))
(declare-sort pupilnumbers 0)
(declare-fun pupilnumbersqtint (pupilnumbers) Int)
(assert (forall ((i pupilnumbers)) (and (<= 0 (pupilnumbersqtint i)) (<= (pupilnumbersqtint i) 250))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 250)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (pupilnumbers pupilnumbers) Bool)
(declare-const dummy8 pupilnumbers)
(declare-datatypes () ((pupilnumbers__ref (mk_pupilnumbers__ref (pupilnumbers__content pupilnumbers)))))
(define-fun pupilnumbers__ref___projection ((a pupilnumbers__ref)) pupilnumbers (pupilnumbers__content a))
(define-fun to_rep4 ((x pupilnumbers)) Int (pupilnumbersqtint x))
(declare-fun of_rep4 (Int) pupilnumbers)
(assert (forall ((x pupilnumbers)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x pupilnumbers)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort pupilindex 0)
(declare-fun pupilindexqtint (pupilindex) Int)
(assert (forall ((i pupilindex)) (and (<= 1 (pupilindexqtint i)) (<= (pupilindexqtint i) 250))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 250)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (pupilindex pupilindex) Bool)
(declare-const dummy9 pupilindex)
(declare-datatypes () ((pupilindex__ref (mk_pupilindex__ref (pupilindex__content pupilindex)))))
(define-fun pupilindex__ref___projection ((a pupilindex__ref)) pupilindex (pupilindex__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep1))))))
(declare-fun slide2 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (bool_eq3 (select a temp___idx_161) (select b (+ (- b__first a__first) temp___idx_161))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (bool_eq3 (select a temp___idx_161) (select b (+ (- b__first a__first) temp___idx_161))) true))))))))
(declare-const dummy10 (Array Int us_rep1))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int us_rep1)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int us_rep1)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int us_rep1)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq10 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__pupils__pupildata__numberofpupils pupilnumbers) (rec__pupils__pupildata__pupilentries (Array Int us_rep1))))))
(define-fun us_split_fields_NumberOfPupils__projection ((a us_split_fields4)) pupilnumbers (rec__pupils__pupildata__numberofpupils a))
(define-fun us_split_fields_PupilEntries__projection ((a us_split_fields4)) (Array Int us_rep1) (rec__pupils__pupildata__pupilentries a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq5 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep4 (rec__pupils__pupildata__numberofpupils (us_split_fields5 a))) (to_rep4 (rec__pupils__pupildata__numberofpupils (us_split_fields5 b)))) (= (bool_eq4 (rec__pupils__pupildata__pupilentries (us_split_fields5 a)) 1 250 (rec__pupils__pupildata__pupilentries (us_split_fields5 b)) 1 250) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-const pupils__pupildata__numberofpupils__first__bit Int)
(declare-const pupils__pupildata__numberofpupils__last__bit Int)
(declare-const pupils__pupildata__numberofpupils__position Int)
(assert (<= 0 pupils__pupildata__numberofpupils__first__bit))
(assert (< pupils__pupildata__numberofpupils__first__bit pupils__pupildata__numberofpupils__last__bit))
(assert (<= 0 pupils__pupildata__numberofpupils__position))
(declare-const pupils__pupildata__pupilentries__first__bit Int)
(declare-const pupils__pupildata__pupilentries__last__bit Int)
(declare-const pupils__pupildata__pupilentries__position Int)
(assert (<= 0 pupils__pupildata__pupilentries__first__bit))
(assert (< pupils__pupildata__pupilentries__first__bit pupils__pupildata__pupilentries__last__bit))
(assert (<= 0 pupils__pupildata__pupilentries__position))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((pupildata__ref (mk_pupildata__ref (pupildata__content us_rep2)))))
(define-fun pupildata__ref___projection ((a pupildata__ref)) us_rep2 (pupildata__content a))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int subject))))))
(declare-fun slide3 ((Array Int subject) Int Int) (Array Int subject))
(assert (forall ((a (Array Int subject))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int subject))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int subject)) (a__first Int) (a__last Int) (b (Array Int subject)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_166 Int)) (=> (and (<= a__first temp___idx_166) (<= temp___idx_166 a__last)) (= (to_rep1 (select a temp___idx_166)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_166))))))) true false))
(assert (forall ((a (Array Int subject)) (b (Array Int subject))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_166 Int)) (=> (and (<= a__first temp___idx_166) (<= temp___idx_166 a__last)) (= (to_rep1 (select a temp___idx_166)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_166)))))))))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__pupils__subject_score_pair__subj subject) (rec__pupils__subject_score_pair__score percentage)))))
(define-fun us_split_fields_Subj__projection ((a us_split_fields6)) subject (rec__pupils__subject_score_pair__subj a))
(define-fun us_split_fields_Score__2__projection ((a us_split_fields6)) percentage (rec__pupils__subject_score_pair__score a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq7 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep1 (rec__pupils__subject_score_pair__subj (us_split_fields7 a))) (to_rep1 (rec__pupils__subject_score_pair__subj (us_split_fields7 b)))) (= (to_rep (rec__pupils__subject_score_pair__score (us_split_fields7 a))) (to_rep (rec__pupils__subject_score_pair__score (us_split_fields7 b))))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep3) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep3) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))
(declare-const pupils__subject_score_pair__subj__first__bit Int)
(declare-const pupils__subject_score_pair__subj__last__bit Int)
(declare-const pupils__subject_score_pair__subj__position Int)
(assert (<= 0 pupils__subject_score_pair__subj__first__bit))
(assert (< pupils__subject_score_pair__subj__first__bit pupils__subject_score_pair__subj__last__bit))
(assert (<= 0 pupils__subject_score_pair__subj__position))
(declare-const pupils__subject_score_pair__score__first__bit Int)
(declare-const pupils__subject_score_pair__score__last__bit Int)
(declare-const pupils__subject_score_pair__score__position Int)
(assert (<= 0 pupils__subject_score_pair__score__first__bit))
(assert (< pupils__subject_score_pair__score__first__bit pupils__subject_score_pair__score__last__bit))
(assert (<= 0 pupils__subject_score_pair__score__position))
(declare-fun user_eq12 (us_rep3 us_rep3) Bool)
(declare-const dummy12 us_rep3)
(declare-datatypes () ((subject_score_pair__ref (mk_subject_score_pair__ref (subject_score_pair__content us_rep3)))))
(define-fun subject_score_pair__ref___projection ((a subject_score_pair__ref)) us_rep3 (subject_score_pair__content a))
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int us_rep3))))))
(declare-fun slide4 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq8 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_167 Int)) (=> (and (<= a__first temp___idx_167) (<= temp___idx_167 a__last)) (= (bool_eq7 (select a temp___idx_167) (select b (+ (- b__first a__first) temp___idx_167))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq8 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_167 Int)) (=> (and (<= a__first temp___idx_167) (<= temp___idx_167 a__last)) (= (bool_eq7 (select a temp___idx_167) (select b (+ (- b__first a__first) temp___idx_167))) true))))))))
(declare-const sname (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const fname (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const fm Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const subj0 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const score0 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const subj1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const score1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const subj2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const score2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const subj3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const score3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const subj4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const score4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const subj5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const score5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const subj6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const score6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const subj7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const score7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const subj8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const score8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const subj9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const score9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const attr__ATTRIBUTE_ADDRESS26 Int)
(declare-fun temp_____aggregate_def_348 (Int Int Int Int Int Int Int Int Int Int) (Array Int subject))
(declare-fun temp_____aggregate_def_362 (Int Int Int Int Int Int Int Int Int Int) (Array Int subject))
(declare-fun temp_____aggregate_def_376 (Int Int Int Int Int Int Int Int Int Int) (Array Int subject))
(declare-fun temp_____aggregate_def_391 ((Array Int us_rep) Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep) (Array Int us_rep))
(declare-fun temp_____aggregate_def_427 (us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3) (Array Int us_rep3))
(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(assert (forall ((temp___429 us_rep3) (temp___430 us_rep3) (temp___431 us_rep3) (temp___432 us_rep3) (temp___433 us_rep3) (temp___434 us_rep3) (temp___435 us_rep3) (temp___436 us_rep3) (temp___437 us_rep3) (temp___438 us_rep3)) (let ((temp___428 (temp_____aggregate_def_427 temp___429 temp___430 temp___431 temp___432 temp___433 temp___434 temp___435 temp___436 temp___437 temp___438))) (and (and (and (and (and (and (and (and (and (= (select temp___428 0) temp___429) (= (select temp___428 1) temp___430)) (= (select temp___428 2) temp___431)) (= (select temp___428 3) temp___432)) (= (select temp___428 4) temp___433)) (= (select temp___428 5) temp___434)) (= (select temp___428 6) temp___435)) (= (select temp___428 7) temp___436)) (= (select temp___428 8) temp___437)) (= (select temp___428 9) temp___438)))))
(define-fun dynamic_invariant4 ((temp___expr_253 Int) (temp___is_init_249 Bool) (temp___skip_constant_250 Bool) (temp___do_toplevel_251 Bool) (temp___do_typ_inv_252 Bool)) Bool (=> (or (= temp___is_init_249 true) (<= 0 250)) (in_range5 temp___expr_253)))
(define-fun dynamic_invariant5 ((temp___expr_260 Int) (temp___is_init_256 Bool) (temp___skip_constant_257 Bool) (temp___do_toplevel_258 Bool) (temp___do_typ_inv_259 Bool)) Bool (=> (or (= temp___is_init_256 true) (<= 1 250)) (in_range6 temp___expr_260)))
(assert (forall ((temp___350 Int) (temp___351 Int) (temp___352 Int) (temp___353 Int) (temp___354 Int) (temp___355 Int) (temp___356 Int) (temp___357 Int) (temp___358 Int) (temp___359 Int)) (let ((temp___349 (temp_____aggregate_def_348 temp___350 temp___351 temp___352 temp___353 temp___354 temp___355 temp___356 temp___357 temp___358 temp___359))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___350 true true true true) (dynamic_invariant1 temp___351 true true true true)) (dynamic_invariant1 temp___352 true true true true)) (dynamic_invariant1 temp___353 true true true true)) (dynamic_invariant1 temp___354 true true true true)) (dynamic_invariant1 temp___355 true true true true)) (dynamic_invariant1 temp___356 true true true true)) (dynamic_invariant1 temp___357 true true true true)) (dynamic_invariant1 temp___358 true true true true)) (dynamic_invariant1 temp___359 true true true true)) (and (and (and (and (and (and (and (and (and (= (to_rep1 (select temp___349 0)) temp___350) (= (to_rep1 (select temp___349 1)) temp___351)) (= (to_rep1 (select temp___349 2)) temp___352)) (= (to_rep1 (select temp___349 3)) temp___353)) (= (to_rep1 (select temp___349 4)) temp___354)) (= (to_rep1 (select temp___349 5)) temp___355)) (= (to_rep1 (select temp___349 6)) temp___356)) (= (to_rep1 (select temp___349 7)) temp___357)) (= (to_rep1 (select temp___349 8)) temp___358)) (= (to_rep1 (select temp___349 9)) temp___359))))))
(assert (forall ((temp___364 Int) (temp___365 Int) (temp___366 Int) (temp___367 Int) (temp___368 Int) (temp___369 Int) (temp___370 Int) (temp___371 Int) (temp___372 Int) (temp___373 Int)) (let ((temp___363 (temp_____aggregate_def_362 temp___364 temp___365 temp___366 temp___367 temp___368 temp___369 temp___370 temp___371 temp___372 temp___373))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___364 true true true true) (dynamic_invariant1 temp___365 true true true true)) (dynamic_invariant1 temp___366 true true true true)) (dynamic_invariant1 temp___367 true true true true)) (dynamic_invariant1 temp___368 true true true true)) (dynamic_invariant1 temp___369 true true true true)) (dynamic_invariant1 temp___370 true true true true)) (dynamic_invariant1 temp___371 true true true true)) (dynamic_invariant1 temp___372 true true true true)) (dynamic_invariant1 temp___373 true true true true)) (and (and (and (and (and (and (and (and (and (= (to_rep1 (select temp___363 0)) temp___364) (= (to_rep1 (select temp___363 1)) temp___365)) (= (to_rep1 (select temp___363 2)) temp___366)) (= (to_rep1 (select temp___363 3)) temp___367)) (= (to_rep1 (select temp___363 4)) temp___368)) (= (to_rep1 (select temp___363 5)) temp___369)) (= (to_rep1 (select temp___363 6)) temp___370)) (= (to_rep1 (select temp___363 7)) temp___371)) (= (to_rep1 (select temp___363 8)) temp___372)) (= (to_rep1 (select temp___363 9)) temp___373))))))
(assert (forall ((temp___378 Int) (temp___379 Int) (temp___380 Int) (temp___381 Int) (temp___382 Int) (temp___383 Int) (temp___384 Int) (temp___385 Int) (temp___386 Int) (temp___387 Int)) (let ((temp___377 (temp_____aggregate_def_376 temp___378 temp___379 temp___380 temp___381 temp___382 temp___383 temp___384 temp___385 temp___386 temp___387))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___378 true true true true) (dynamic_invariant1 temp___379 true true true true)) (dynamic_invariant1 temp___380 true true true true)) (dynamic_invariant1 temp___381 true true true true)) (dynamic_invariant1 temp___382 true true true true)) (dynamic_invariant1 temp___383 true true true true)) (dynamic_invariant1 temp___384 true true true true)) (dynamic_invariant1 temp___385 true true true true)) (dynamic_invariant1 temp___386 true true true true)) (dynamic_invariant1 temp___387 true true true true)) (and (and (and (and (and (and (and (and (and (= (to_rep1 (select temp___377 0)) temp___378) (= (to_rep1 (select temp___377 1)) temp___379)) (= (to_rep1 (select temp___377 2)) temp___380)) (= (to_rep1 (select temp___377 3)) temp___381)) (= (to_rep1 (select temp___377 4)) temp___382)) (= (to_rep1 (select temp___377 5)) temp___383)) (= (to_rep1 (select temp___377 6)) temp___384)) (= (to_rep1 (select temp___377 7)) temp___385)) (= (to_rep1 (select temp___377 8)) temp___386)) (= (to_rep1 (select temp___377 9)) temp___387))))))
(assert (forall ((temp___393 (Array Int us_rep))) (forall ((temp___394 Int) (temp___396 Int) (temp___398 Int) (temp___400 Int) (temp___402 Int) (temp___404 Int) (temp___406 Int) (temp___408 Int) (temp___410 Int) (temp___412 Int)) (forall ((temp___395 us_rep) (temp___397 us_rep) (temp___399 us_rep) (temp___401 us_rep) (temp___403 us_rep) (temp___405 us_rep) (temp___407 us_rep) (temp___409 us_rep) (temp___411 us_rep) (temp___413 us_rep)) (let ((temp___392 (temp_____aggregate_def_391 temp___393 temp___394 temp___395 temp___396 temp___397 temp___398 temp___399 temp___400 temp___401 temp___402 temp___403 temp___404 temp___405 temp___406 temp___407 temp___408 temp___409 temp___410 temp___411 temp___412 temp___413))) (=> (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___394 true true true true) (dynamic_invariant1 temp___396 true true true true)) (dynamic_invariant1 temp___398 true true true true)) (dynamic_invariant1 temp___400 true true true true)) (dynamic_invariant1 temp___402 true true true true)) (dynamic_invariant1 temp___404 true true true true)) (dynamic_invariant1 temp___406 true true true true)) (dynamic_invariant1 temp___408 true true true true)) (dynamic_invariant1 temp___410 true true true true)) (dynamic_invariant1 temp___412 true true true true)) (forall ((temp___414 Int)) (ite (= temp___414 temp___412) (= (select temp___392 temp___414) temp___413) (ite (= temp___414 temp___410) (= (select temp___392 temp___414) temp___411) (ite (= temp___414 temp___408) (= (select temp___392 temp___414) temp___409) (ite (= temp___414 temp___406) (= (select temp___392 temp___414) temp___407) (ite (= temp___414 temp___404) (= (select temp___392 temp___414) temp___405) (ite (= temp___414 temp___402) (= (select temp___392 temp___414) temp___403) (ite (= temp___414 temp___400) (= (select temp___392 temp___414) temp___401) (ite (= temp___414 temp___398) (= (select temp___392 temp___414) temp___399) (ite (= temp___414 temp___396) (= (select temp___392 temp___414) temp___397) (ite (= temp___414 temp___394) (= (select temp___392 temp___414) temp___395) (= (select temp___392 temp___414) (select temp___393 temp___414)))))))))))))))))))
(declare-const p__split_fields pupilnumbers)
(declare-const subject_scores (Array Int us_rep3))
(declare-const i Int)
(declare-const o percentage)
(declare-const o1 subject)
(declare-const o2 subject)
(declare-const o3 percentage)
(declare-const o4 percentage)
(declare-const o5 subject)
(declare-const o6 subject)
(declare-const o7 percentage)
(declare-const o8 percentage)
(declare-const o9 subject)
(declare-const o10 subject)
(declare-const o11 percentage)
(declare-const o12 percentage)
(declare-const o13 subject)
(declare-const o14 subject)
(declare-const o15 percentage)
(declare-const o16 percentage)
(declare-const o17 subject)
(declare-const o18 subject)
(declare-const o19 percentage)
(declare-const o20 percentage)
(declare-const o21 subject)
(declare-const o22 subject)
(declare-const o23 percentage)
(declare-const o24 percentage)
(declare-const o25 subject)
(declare-const o26 subject)
(declare-const o27 percentage)
(declare-const o28 percentage)
(declare-const o29 subject)
(declare-const o30 subject)
(declare-const o31 percentage)
(declare-const o32 percentage)
(declare-const o33 subject)
(declare-const o34 subject)
(declare-const o35 percentage)
(declare-const o36 percentage)
(declare-const o37 subject)
(declare-const o38 subject)
(declare-const o39 percentage)
(declare-const o40 subject)
(declare-const o41 percentage)
(declare-const o42 subject)
(declare-const o43 percentage)
(declare-const o44 subject)
(declare-const o45 percentage)
(declare-const o46 us_rep3)
(declare-const o47 us_rep3)
(declare-const o48 us_rep3)
(declare-const o49 us_rep3)
(declare-const o50 us_rep3)
(declare-const o51 us_rep3)
(declare-const o52 us_rep3)
(declare-const o53 (Array Int us_rep3))
(declare-const result map__ref4)
(declare-const subject_scores1 (Array Int us_rep3))
(declare-const result1 int__ref)
(declare-const i1 Int)
(assert (in_range4 fm))
(assert (in_range2 subj0))
(assert (in_range1 score0))
(assert (in_range2 subj1))
(assert (in_range1 score1))
(assert (in_range2 subj2))
(assert (in_range1 score2))
(assert (in_range2 subj3))
(assert (in_range1 score3))
(assert (in_range2 subj4))
(assert (in_range1 score4))
(assert (in_range2 subj5))
(assert (in_range1 score5))
(assert (in_range2 subj6))
(assert (in_range1 score6))
(assert (in_range2 subj7))
(assert (in_range1 score7))
(assert (in_range2 subj8))
(assert (in_range1 score8))
(assert (in_range2 subj9))
(assert (in_range1 score9))
(assert (and (< (to_rep4 p__split_fields) 250) (not (= fm 8))))
(assert (= (to_rep o36) score9))
(assert (= (to_rep1 o37) subj9))
(assert (= o37 o38))
(assert (= o36 o39))
(assert (= o40 o38))
(assert (= o41 o39))
(assert (= (to_rep o32) score8))
(assert (= (to_rep1 o33) subj8))
(assert (= o33 o34))
(assert (= o32 o35))
(assert (= o42 o34))
(assert (= o43 o35))
(assert (= (to_rep o28) score7))
(assert (= (to_rep1 o29) subj7))
(assert (= o29 o30))
(assert (= o28 o31))
(assert (= o44 o30))
(assert (= o45 o31))
(assert (= (to_rep o24) score6))
(assert (= (to_rep1 o25) subj6))
(assert (= o25 o26))
(assert (= o24 o27))
(assert (= o46 (mk___rep3 (mk___split_fields3 o26 o27))))
(assert (= (to_rep o20) score5))
(assert (= (to_rep1 o21) subj5))
(assert (= o21 o22))
(assert (= o20 o23))
(assert (= o47 (mk___rep3 (mk___split_fields3 o22 o23))))
(assert (= (to_rep o16) score4))
(assert (= (to_rep1 o17) subj4))
(assert (= o17 o18))
(assert (= o16 o19))
(assert (= o48 (mk___rep3 (mk___split_fields3 o18 o19))))
(assert (= (to_rep o12) score3))
(assert (= (to_rep1 o13) subj3))
(assert (= o13 o14))
(assert (= o12 o15))
(assert (= o49 (mk___rep3 (mk___split_fields3 o14 o15))))
(assert (= (to_rep o8) score2))
(assert (= (to_rep1 o9) subj2))
(assert (= o9 o10))
(assert (= o8 o11))
(assert (= o50 (mk___rep3 (mk___split_fields3 o10 o11))))
(assert (= (to_rep o4) score1))
(assert (= (to_rep1 o5) subj1))
(assert (= o5 o6))
(assert (= o4 o7))
(assert (= o51 (mk___rep3 (mk___split_fields3 o6 o7))))
(assert (= (to_rep o) score0))
(assert (= (to_rep1 o1) subj0))
(assert (= o1 o2))
(assert (= o o3))
(assert (= o52 (mk___rep3 (mk___split_fields3 o2 o3))))
(assert (= o53 (temp_____aggregate_def_427 o52 o51 o50 o49 o48 o47 o46 (mk___rep3 (mk___split_fields3 o44 o45)) (mk___rep3 (mk___split_fields3 o42 o43)) (mk___rep3 (mk___split_fields3 o40 o41)))))
(assert (= result (mk_map__ref4 subject_scores)))
(assert (= subject_scores1 o53))
(assert (= result1 (mk_int__ref i)))
(assert (= i1 0))
(assert (not (<= (+ (to_rep4 p__split_fields) 1) 250)))
(check-sat)
(exit)
