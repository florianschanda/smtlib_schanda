(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-fun is_digit (Int) Bool)
(declare-fun is_digit__function_guard (Bool Int) Bool)
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(assert (forall ((c Int)) (! (=> (dynamic_invariant2 c true true true) (let ((result (is_digit c))) (ite (= c 48) (= result true) (ite (= c 49) (= result true) (ite (= c 50) (= result true) (ite (= c 51) (= result true) (ite (= c 52) (= result true) (ite (= c 53) (= result true) (ite (= c 54) (= result true) (ite (= c 55) (= result true) (ite (= c 56) (= result true) (ite (= c 57) (= result true) (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern ((is_digit c)))))
(declare-fun convert_character_digit_to_integer (Int) Int)
(declare-fun convert_character_digit_to_integer__function_guard (Int Int) Bool)
(assert (forall ((source Int)) (! (=> (and (dynamic_invariant2 source true true true) (= (is_digit source) true)) (let ((result (convert_character_digit_to_integer source))) (and (and (and (<= 0 result) (<= result 9)) (ite (= source 48) (= result 0) (ite (= source 49) (= result 1) (ite (= source 50) (= result 2) (ite (= source 51) (= result 3) (ite (= source 52) (= result 4) (ite (= source 53) (= result 5) (ite (= source 54) (= result 6) (ite (= source 55) (= result 7) (ite (= source 56) (= result 8) (=> (= source 57) (= result 9)))))))))))) (dynamic_invariant result true false true)))) :pattern ((convert_character_digit_to_integer source)))))
(declare-const source us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(declare-const target Int)
(declare-const has_failed Bool)
(declare-const index Int)
(declare-const o Int)
(declare-const o1 character)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 character)
(declare-const o5 Int)
(declare-const temp___1007 Int)
(declare-const o6 Int)
(declare-const o7 character)
(declare-const o8 Int)
(declare-const temp___1008 Int)
(declare-const o9 Int)
(declare-const o10 character)
(declare-const o11 Int)
(declare-const temp___1009 Int)
(declare-const o12 Int)
(declare-const o13 character)
(declare-const o14 Int)
(declare-const temp___1010 Int)
(declare-const o15 Int)
(declare-const o16 character)
(declare-const o17 Int)
(declare-const temp___1011 Int)
(declare-const o18 Int)
(declare-const o19 character)
(declare-const o20 Int)
(declare-const temp___1012 Int)
(declare-const o21 Int)
(declare-const o22 character)
(declare-const o23 Int)
(declare-const temp___1013 Int)
(declare-const o24 Int)
(declare-const o25 character)
(declare-const o26 Int)
(declare-const temp___1014 Int)
(declare-const o27 Int)
(declare-const o28 character)
(declare-const o29 Int)
(declare-const temp___1015 Int)
(declare-const o30 Int)
(declare-const o31 character)
(declare-const o32 Int)
(declare-const temp___1016 Int)
(declare-const o33 Int)
(declare-const o34 character)
(declare-const o35 Int)
(declare-const temp___1017 Int)
(declare-const o36 Int)
(declare-const o37 character)
(declare-const o38 Int)
(declare-const temp___1018 Int)
(declare-const o39 Int)
(declare-const o40 character)
(declare-const o41 Int)
(declare-const temp___1019 Int)
(declare-const o42 Int)
(declare-const o43 character)
(declare-const o44 Int)
(declare-const temp___1020 Int)
(declare-const o45 Int)
(declare-const o46 character)
(declare-const o47 Int)
(declare-const temp___1021 Int)
(declare-const o48 Int)
(declare-const o49 character)
(declare-const o50 Int)
(declare-const temp___1022 Int)
(declare-const o51 Int)
(declare-const o52 character)
(declare-const o53 Int)
(declare-const temp___1023 Int)
(declare-const o54 Int)
(declare-const o55 character)
(declare-const o56 Int)
(declare-const o57 Int)
(declare-const o58 character)
(declare-const o59 Int)
(declare-const o60 Int)
(declare-const temp___1025 Int)
(declare-const temp___1026 Int)
(declare-const o61 Int)
(declare-const o62 character)
(declare-const o63 Int)
(declare-const o64 Bool)
(declare-const temp___1027 Int)
(declare-const o65 Int)
(declare-const o66 character)
(declare-const o67 Int)
(declare-const o68 Bool)
(declare-const temp___1028 Int)
(declare-const o69 Int)
(declare-const o70 character)
(declare-const o71 Int)
(declare-const o72 Bool)
(declare-const temp___1029 Int)
(declare-const o73 Int)
(declare-const o74 character)
(declare-const o75 Int)
(declare-const o76 Bool)
(declare-const temp___1030 Int)
(declare-const o77 Int)
(declare-const o78 character)
(declare-const o79 Int)
(declare-const o80 Bool)
(declare-const temp___1031 Int)
(declare-const o81 Int)
(declare-const o82 character)
(declare-const o83 Int)
(declare-const o84 Bool)
(declare-const temp___1032 Int)
(declare-const o85 Int)
(declare-const o86 character)
(declare-const o87 Int)
(declare-const o88 Bool)
(declare-const temp___1033 Int)
(declare-const o89 Int)
(declare-const o90 character)
(declare-const o91 Int)
(declare-const o92 Bool)
(declare-const temp___1034 Int)
(declare-const o93 Int)
(declare-const o94 character)
(declare-const o95 Int)
(declare-const o96 Bool)
(declare-const temp___1035 Int)
(declare-const o97 Int)
(declare-const o98 character)
(declare-const o99 Int)
(declare-const temp___1036 Int)
(declare-const o100 Int)
(declare-const o101 character)
(declare-const o102 Int)
(declare-const o103 Bool)
(declare-const o104 Bool)
(declare-const temp___1037 Int)
(declare-const o105 Int)
(declare-const o106 character)
(declare-const o107 Int)
(declare-const o108 Bool)
(declare-const o109 Bool)
(declare-const temp___1038 Int)
(declare-const o110 Int)
(declare-const o111 character)
(declare-const o112 Int)
(declare-const o113 Bool)
(declare-const o114 Bool)
(declare-const temp___1039 Int)
(declare-const o115 Int)
(declare-const o116 character)
(declare-const o117 Int)
(declare-const o118 Bool)
(declare-const o119 Bool)
(declare-const temp___1040 Int)
(declare-const o120 Int)
(declare-const o121 character)
(declare-const o122 Int)
(declare-const o123 Bool)
(declare-const o124 Bool)
(declare-const temp___1041 Int)
(declare-const o125 Int)
(declare-const o126 character)
(declare-const o127 Int)
(declare-const o128 Bool)
(declare-const o129 Bool)
(declare-const temp___1042 Int)
(declare-const o130 Int)
(declare-const o131 character)
(declare-const o132 Int)
(declare-const o133 Bool)
(declare-const o134 Bool)
(declare-const temp___1043 Int)
(declare-const o135 Int)
(declare-const o136 character)
(declare-const o137 Int)
(declare-const o138 Bool)
(declare-const o139 Bool)
(declare-const o140 Bool)
(declare-const temp___1044 Int)
(declare-const o141 Int)
(declare-const o142 character)
(declare-const o143 Int)
(declare-const temp___1045 Int)
(declare-const o144 Int)
(declare-const o145 character)
(declare-const o146 Int)
(declare-const o147 Bool)
(declare-const o148 Bool)
(declare-const temp___1046 Int)
(declare-const o149 Int)
(declare-const o150 character)
(declare-const o151 Int)
(declare-const o152 Bool)
(declare-const o153 Bool)
(declare-const temp___1047 Int)
(declare-const o154 Int)
(declare-const o155 character)
(declare-const o156 Int)
(declare-const o157 Bool)
(declare-const o158 Bool)
(declare-const temp___1048 Int)
(declare-const o159 Int)
(declare-const o160 character)
(declare-const o161 Int)
(declare-const o162 Bool)
(declare-const o163 Bool)
(declare-const temp___1049 Int)
(declare-const o164 Int)
(declare-const o165 character)
(declare-const o166 Int)
(declare-const o167 Bool)
(declare-const o168 Bool)
(declare-const temp___1050 Int)
(declare-const o169 Int)
(declare-const o170 character)
(declare-const o171 Int)
(declare-const o172 Bool)
(declare-const o173 Bool)
(declare-const temp___1051 Int)
(declare-const o174 Int)
(declare-const o175 character)
(declare-const o176 Int)
(declare-const o177 Bool)
(declare-const o178 Bool)
(declare-const o179 Bool)
(declare-const temp___1052 Int)
(declare-const o180 Int)
(declare-const o181 character)
(declare-const o182 Int)
(declare-const temp___1053 Int)
(declare-const o183 Int)
(declare-const o184 character)
(declare-const o185 Int)
(declare-const o186 Bool)
(declare-const o187 Bool)
(declare-const temp___1054 Int)
(declare-const o188 Int)
(declare-const o189 character)
(declare-const o190 Int)
(declare-const o191 Bool)
(declare-const o192 Bool)
(declare-const temp___1055 Int)
(declare-const o193 Int)
(declare-const o194 character)
(declare-const o195 Int)
(declare-const o196 Bool)
(declare-const o197 Bool)
(declare-const temp___1056 Int)
(declare-const o198 Int)
(declare-const o199 character)
(declare-const o200 Int)
(declare-const o201 Bool)
(declare-const o202 Bool)
(declare-const temp___1057 Int)
(declare-const o203 Int)
(declare-const o204 character)
(declare-const o205 Int)
(declare-const o206 Bool)
(declare-const o207 Bool)
(declare-const temp___1058 Int)
(declare-const o208 Int)
(declare-const o209 character)
(declare-const o210 Int)
(declare-const o211 Bool)
(declare-const o212 Bool)
(declare-const o213 Bool)
(declare-const temp___1059 Int)
(declare-const o214 Int)
(declare-const o215 character)
(declare-const o216 Int)
(declare-const temp___1060 Int)
(declare-const o217 Int)
(declare-const o218 character)
(declare-const o219 Int)
(declare-const o220 Bool)
(declare-const o221 Bool)
(declare-const temp___1061 Int)
(declare-const o222 Int)
(declare-const o223 character)
(declare-const o224 Int)
(declare-const o225 Bool)
(declare-const o226 Bool)
(declare-const temp___1062 Int)
(declare-const o227 Int)
(declare-const o228 character)
(declare-const o229 Int)
(declare-const o230 Bool)
(declare-const o231 Bool)
(declare-const temp___1063 Int)
(declare-const o232 Int)
(declare-const o233 character)
(declare-const o234 Int)
(declare-const o235 Bool)
(declare-const o236 Bool)
(declare-const temp___1064 Int)
(declare-const o237 Int)
(declare-const o238 character)
(declare-const o239 Int)
(declare-const o240 Bool)
(declare-const o241 Bool)
(declare-const o242 Bool)
(declare-const temp___1065 Int)
(declare-const o243 Int)
(declare-const o244 character)
(declare-const o245 Int)
(declare-const temp___1066 Int)
(declare-const o246 Int)
(declare-const o247 character)
(declare-const o248 Int)
(declare-const o249 Bool)
(declare-const o250 Bool)
(declare-const temp___1067 Int)
(declare-const o251 Int)
(declare-const o252 character)
(declare-const o253 Int)
(declare-const o254 Bool)
(declare-const o255 Bool)
(declare-const temp___1068 Int)
(declare-const o256 Int)
(declare-const o257 character)
(declare-const o258 Int)
(declare-const o259 Bool)
(declare-const o260 Bool)
(declare-const temp___1069 Int)
(declare-const o261 Int)
(declare-const o262 character)
(declare-const o263 Int)
(declare-const o264 Bool)
(declare-const o265 Bool)
(declare-const o266 Bool)
(declare-const temp___1070 Int)
(declare-const o267 Int)
(declare-const o268 character)
(declare-const o269 Int)
(declare-const temp___1071 Int)
(declare-const o270 Int)
(declare-const o271 character)
(declare-const o272 Int)
(declare-const o273 Bool)
(declare-const o274 Bool)
(declare-const temp___1072 Int)
(declare-const o275 Int)
(declare-const o276 character)
(declare-const o277 Int)
(declare-const o278 Bool)
(declare-const o279 Bool)
(declare-const temp___1073 Int)
(declare-const o280 Int)
(declare-const o281 character)
(declare-const o282 Int)
(declare-const o283 Bool)
(declare-const o284 Bool)
(declare-const o285 Bool)
(declare-const temp___1074 Int)
(declare-const o286 Int)
(declare-const o287 character)
(declare-const o288 Int)
(declare-const temp___1075 Int)
(declare-const o289 Int)
(declare-const o290 character)
(declare-const o291 Int)
(declare-const o292 Bool)
(declare-const o293 Bool)
(declare-const temp___1076 Int)
(declare-const o294 Int)
(declare-const o295 character)
(declare-const o296 Int)
(declare-const o297 Bool)
(declare-const o298 Bool)
(declare-const o299 Bool)
(declare-const temp___1077 Int)
(declare-const o300 Int)
(declare-const o301 character)
(declare-const o302 Int)
(declare-const temp___1078 Int)
(declare-const o303 Int)
(declare-const o304 character)
(declare-const o305 Int)
(declare-const o306 Bool)
(declare-const o307 Bool)
(declare-const o308 Bool)
(declare-const temp___1079 Int)
(declare-const o309 Int)
(declare-const o310 character)
(declare-const o311 Int)
(declare-const o312 Bool)
(declare-const has_failed1 Bool)
(declare-const result Int)
(declare-const target1 Int)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const has_failed2 Bool)
(declare-const result3 Bool)
(declare-const target2 Int)
(declare-const has_failed3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const has_failed4 Bool)
(declare-const result6 Bool)
(declare-const target3 Int)
(declare-const has_failed5 Bool)
(declare-const result7 Bool)
(declare-const result8 Bool)
(declare-const has_failed6 Bool)
(declare-const result9 Bool)
(declare-const target4 Int)
(declare-const has_failed7 Bool)
(declare-const result10 Bool)
(declare-const result11 Bool)
(declare-const has_failed8 Bool)
(declare-const result12 Bool)
(declare-const target5 Int)
(declare-const has_failed9 Bool)
(declare-const result13 Bool)
(declare-const result14 Bool)
(declare-const has_failed10 Bool)
(declare-const result15 Bool)
(declare-const target6 Int)
(declare-const has_failed11 Bool)
(declare-const result16 Bool)
(declare-const result17 Bool)
(declare-const has_failed12 Bool)
(declare-const result18 Bool)
(declare-const target7 Int)
(declare-const has_failed13 Bool)
(declare-const result19 Bool)
(declare-const result20 Bool)
(declare-const has_failed14 Bool)
(declare-const result21 Bool)
(declare-const target8 Int)
(declare-const has_failed15 Bool)
(declare-const result22 Bool)
(declare-const result23 Bool)
(declare-const has_failed16 Bool)
(declare-const result24 Bool)
(declare-const target9 Int)
(declare-const has_failed17 Bool)
(declare-const result25 Bool)
(declare-const result26 Bool)
(declare-const has_failed18 Bool)
(declare-const result27 Bool)
(declare-const target10 Int)
(declare-const has_failed19 Bool)
(declare-const result28 Bool)
(declare-const result29 Bool)
(declare-const has_failed20 Bool)
(declare-const target11 Int)
(declare-const has_failed21 Bool)
(declare-const target12 Int)
(declare-const has_failed22 Bool)
(declare-const target13 Int)
(declare-const has_failed23 Bool)
(declare-const target14 Int)
(declare-const has_failed24 Bool)
(declare-const target15 Int)
(declare-const has_failed25 Bool)
(declare-const target16 Int)
(declare-const has_failed26 Bool)
(declare-const target17 Int)
(declare-const has_failed27 Bool)
(declare-const target18 Int)
(declare-const has_failed28 Bool)
(declare-const target19 Int)
(declare-const has_failed29 Bool)
(declare-const target20 int__ref)
(declare-const has_failed30 bool__ref)
(declare-const target21 Int)
(declare-const has_failed31 Bool)
(declare-const target22 int__ref)
(declare-const has_failed32 bool__ref)
(declare-const target23 Int)
(declare-const has_failed33 Bool)
(declare-const target24 int__ref)
(declare-const has_failed34 bool__ref)
(declare-const target25 Int)
(declare-const has_failed35 Bool)
(declare-const target26 int__ref)
(declare-const has_failed36 bool__ref)
(declare-const target27 Int)
(declare-const has_failed37 Bool)
(declare-const target28 int__ref)
(declare-const has_failed38 bool__ref)
(declare-const target29 Int)
(declare-const has_failed39 Bool)
(declare-const target30 int__ref)
(declare-const has_failed40 bool__ref)
(declare-const target31 Int)
(declare-const has_failed41 Bool)
(declare-const target32 int__ref)
(declare-const has_failed42 bool__ref)
(declare-const target33 Int)
(declare-const has_failed43 Bool)
(declare-const target34 int__ref)
(declare-const has_failed44 bool__ref)
(declare-const target35 Int)
(declare-const has_failed45 Bool)
(declare-const target36 int__ref)
(declare-const has_failed46 bool__ref)
(declare-const target37 Int)
(declare-const has_failed47 Bool)
(declare-const target38 int__ref)
(declare-const has_failed48 bool__ref)
(declare-const target39 Int)
(declare-const has_failed49 Bool)
(declare-const target40 int__ref)
(declare-const has_failed50 bool__ref)
(declare-const target41 Int)
(declare-const has_failed51 Bool)
(declare-const target42 int__ref)
(declare-const has_failed52 bool__ref)
(declare-const target43 Int)
(declare-const has_failed53 Bool)
(declare-const target44 int__ref)
(declare-const has_failed54 bool__ref)
(declare-const target45 Int)
(declare-const has_failed55 Bool)
(declare-const target46 int__ref)
(declare-const has_failed56 bool__ref)
(declare-const target47 Int)
(declare-const has_failed57 Bool)
(declare-const target48 Int)
(declare-const has_failed58 Bool)
(declare-const target49 int__ref)
(declare-const has_failed59 bool__ref)
(declare-const target50 Int)
(declare-const has_failed60 Bool)
(declare-const target51 int__ref)
(declare-const has_failed61 bool__ref)
(declare-const target52 Int)
(declare-const has_failed62 Bool)
(assert (dynamic_invariant1 source true false true))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 target)))
(assert (and (and (forall ((index1 Int)) (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 (to_rep1 (last (rt source))))) (= (is_digit (to_rep (select (elts source) index1))) true))) (<= 1 (length source))) (<= (length source) 10)))
(assert (= (mk_int__ref result) (mk_int__ref target)))
(assert (= target1 0))
(assert (= (length source) 10))
(assert (and (<= (to_rep1 (first (rt source))) (to_rep1 (first (rt source)))) (<= (to_rep1 (first (rt source))) (to_rep1 (last (rt source))))))
(assert (= o (to_rep1 (first (rt source)))))
(assert (= o1 (select (elts source) o)))
(assert (= o2 (to_rep o1)))
(assert (= result1 (ite (< 50 o2) true false)))
(assert (not (= result1 true)))
(assert (= has_failed2 has_failed))
(assert (= has_failed2 has_failed1))
(assert (and (<= (to_rep1 (first (rt source))) (to_rep1 (first (rt source)))) (<= (to_rep1 (first (rt source))) (to_rep1 (last (rt source))))))
(assert (= o3 (to_rep1 (first (rt source)))))
(assert (= o4 (select (elts source) o3)))
(assert (= o5 (to_rep o4)))
(assert (= result3 (ite (< o5 50) true false)))
(assert (=> (= result3 true) (and (not (= has_failed3 true)) (in_range1 target2))))
(assert (not (= result3 true)))
(assert (=> (not (= result3 true)) (= has_failed3 has_failed2)))
(assert (=> (not (= result3 true)) (= target2 target1)))
(assert (and (= temp___1007 (+ (to_rep1 (first (rt source))) 1)) (in_range1 (+ (to_rep1 (first (rt source))) 1))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1007) (<= temp___1007 (to_rep1 (last (rt source))))))
(assert (= o6 temp___1007))
(assert (= o7 (select (elts source) o6)))
(assert (= o8 (to_rep o7)))
(assert (= result4 (ite (< 49 o8) true false)))
(assert (not (= result4 true)))
(assert (= has_failed4 has_failed3))
(assert (and (= temp___1008 (+ (to_rep1 (first (rt source))) 1)) (in_range1 (+ (to_rep1 (first (rt source))) 1))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1008) (<= temp___1008 (to_rep1 (last (rt source))))))
(assert (= o9 temp___1008))
(assert (= o10 (select (elts source) o9)))
(assert (= o11 (to_rep o10)))
(assert (= result6 (ite (< o11 49) true false)))
(assert (=> (= result6 true) (and (not (= has_failed5 true)) (in_range1 target3))))
(assert (not (= result6 true)))
(assert (=> (not (= result6 true)) (= has_failed5 has_failed4)))
(assert (=> (not (= result6 true)) (= target3 target2)))
(assert (and (= temp___1009 (+ (to_rep1 (first (rt source))) 2)) (in_range1 (+ (to_rep1 (first (rt source))) 2))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1009) (<= temp___1009 (to_rep1 (last (rt source))))))
(assert (= o12 temp___1009))
(assert (= o13 (select (elts source) o12)))
(assert (= o14 (to_rep o13)))
(assert (= result7 (ite (< 52 o14) true false)))
(assert (not (= result7 true)))
(assert (= has_failed6 has_failed5))
(assert (and (= temp___1010 (+ (to_rep1 (first (rt source))) 2)) (in_range1 (+ (to_rep1 (first (rt source))) 2))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1010) (<= temp___1010 (to_rep1 (last (rt source))))))
(assert (= o15 temp___1010))
(assert (= o16 (select (elts source) o15)))
(assert (= o17 (to_rep o16)))
(assert (= result9 (ite (< o17 52) true false)))
(assert (=> (= result9 true) (and (not (= has_failed7 true)) (in_range1 target4))))
(assert (not (= result9 true)))
(assert (=> (not (= result9 true)) (= has_failed7 has_failed6)))
(assert (=> (not (= result9 true)) (= target4 target3)))
(assert (and (= temp___1011 (+ (to_rep1 (first (rt source))) 3)) (in_range1 (+ (to_rep1 (first (rt source))) 3))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1011) (<= temp___1011 (to_rep1 (last (rt source))))))
(assert (= o18 temp___1011))
(assert (= o19 (select (elts source) o18)))
(assert (= o20 (to_rep o19)))
(assert (= result10 (ite (< 55 o20) true false)))
(assert (not (= result10 true)))
(assert (= has_failed8 has_failed7))
(assert (and (= temp___1012 (+ (to_rep1 (first (rt source))) 3)) (in_range1 (+ (to_rep1 (first (rt source))) 3))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1012) (<= temp___1012 (to_rep1 (last (rt source))))))
(assert (= o21 temp___1012))
(assert (= o22 (select (elts source) o21)))
(assert (= o23 (to_rep o22)))
(assert (= result12 (ite (< o23 55) true false)))
(assert (=> (= result12 true) (and (not (= has_failed9 true)) (in_range1 target5))))
(assert (not (= result12 true)))
(assert (=> (not (= result12 true)) (= has_failed9 has_failed8)))
(assert (=> (not (= result12 true)) (= target5 target4)))
(assert (and (= temp___1013 (+ (to_rep1 (first (rt source))) 4)) (in_range1 (+ (to_rep1 (first (rt source))) 4))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1013) (<= temp___1013 (to_rep1 (last (rt source))))))
(assert (= o24 temp___1013))
(assert (= o25 (select (elts source) o24)))
(assert (= o26 (to_rep o25)))
(assert (= result13 (ite (< 52 o26) true false)))
(assert (not (= result13 true)))
(assert (= has_failed10 has_failed9))
(assert (and (= temp___1014 (+ (to_rep1 (first (rt source))) 4)) (in_range1 (+ (to_rep1 (first (rt source))) 4))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1014) (<= temp___1014 (to_rep1 (last (rt source))))))
(assert (= o27 temp___1014))
(assert (= o28 (select (elts source) o27)))
(assert (= o29 (to_rep o28)))
(assert (= result15 (ite (< o29 52) true false)))
(assert (=> (= result15 true) (and (not (= has_failed11 true)) (in_range1 target6))))
(assert (not (= result15 true)))
(assert (=> (not (= result15 true)) (= has_failed11 has_failed10)))
(assert (=> (not (= result15 true)) (= target6 target5)))
(assert (and (= temp___1015 (+ (to_rep1 (first (rt source))) 5)) (in_range1 (+ (to_rep1 (first (rt source))) 5))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1015) (<= temp___1015 (to_rep1 (last (rt source))))))
(assert (= o30 temp___1015))
(assert (= o31 (select (elts source) o30)))
(assert (= o32 (to_rep o31)))
(assert (= result16 (ite (< 56 o32) true false)))
(assert (not (= result16 true)))
(assert (= has_failed12 has_failed11))
(assert (and (= temp___1016 (+ (to_rep1 (first (rt source))) 5)) (in_range1 (+ (to_rep1 (first (rt source))) 5))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1016) (<= temp___1016 (to_rep1 (last (rt source))))))
(assert (= o33 temp___1016))
(assert (= o34 (select (elts source) o33)))
(assert (= o35 (to_rep o34)))
(assert (= result18 (ite (< o35 56) true false)))
(assert (=> (= result18 true) (and (not (= has_failed13 true)) (in_range1 target7))))
(assert (not (= result18 true)))
(assert (=> (not (= result18 true)) (= has_failed13 has_failed12)))
(assert (=> (not (= result18 true)) (= target7 target6)))
(assert (not (in_range1 (+ (to_rep1 (first (rt source))) 6))))
(check-sat)
(exit)
