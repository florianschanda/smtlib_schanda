(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__frame_condition__cell__value : natural;
rec__frame_condition__cell__max_left : natural;
rec__frame_condition__cell__max_right : natural
}

function us_split_fields_Value__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__value

function us_split_fields_Max_Left__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__max_left

function us_split_fields_Max_Right__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__max_right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__frame_condition__cell__value) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__value)) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_left))) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_right) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_right))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__frame_condition__cell__value) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__value)) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_left))) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_right) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_right)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:natural. forall a2:natural.
  (0 <= object__size({ us_split_fields1 = {
  rec__frame_condition__cell__value = a;
  rec__frame_condition__cell__max_left = a1;
  rec__frame_condition__cell__max_right = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:natural. forall a2:natural.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__frame_condition__cell__value = a;
  rec__frame_condition__cell__max_left = a1;
  rec__frame_condition__cell__max_right = a2 } })))

logic frame_condition__cell__value__first__bit : int

logic frame_condition__cell__value__last__bit : int

logic frame_condition__cell__value__position : int

axiom frame_condition__cell__value__first__bit_axiom :
  (0 <= frame_condition__cell__value__first__bit)

axiom frame_condition__cell__value__last__bit_axiom :
  (frame_condition__cell__value__first__bit <  frame_condition__cell__value__last__bit)

axiom frame_condition__cell__value__position_axiom :
  (0 <= frame_condition__cell__value__position)

logic frame_condition__cell__max_left__first__bit : int

logic frame_condition__cell__max_left__last__bit : int

logic frame_condition__cell__max_left__position : int

axiom frame_condition__cell__max_left__first__bit_axiom :
  (0 <= frame_condition__cell__max_left__first__bit)

axiom frame_condition__cell__max_left__last__bit_axiom :
  (frame_condition__cell__max_left__first__bit <  frame_condition__cell__max_left__last__bit)

axiom frame_condition__cell__max_left__position_axiom :
  (0 <= frame_condition__cell__max_left__position)

logic frame_condition__cell__max_right__first__bit : int

logic frame_condition__cell__max_right__last__bit : int

logic frame_condition__cell__max_right__position : int

axiom frame_condition__cell__max_right__first__bit_axiom :
  (0 <= frame_condition__cell__max_right__first__bit)

axiom frame_condition__cell__max_right__last__bit_axiom :
  (frame_condition__cell__max_right__first__bit <  frame_condition__cell__max_right__last__bit)

axiom frame_condition__cell__max_right__position_axiom :
  (0 <= frame_condition__cell__max_right__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : natural

logic dummy4 : natural

logic dummy5 : natural

type cell__ref = { cell__content : us_rep
}

function cell__ref___projection(a: cell__ref) : us_rep = (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:natural. forall v1:natural. forall v2:natural.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__frame_condition__cell__value = v;
  rec__frame_condition__cell__max_left = v1;
  rec__frame_condition__cell__max_right = v2 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__frame_condition__cell__value = v;
  rec__frame_condition__cell__max_left = v1;
  rec__frame_condition__cell__max_right = v2 } }, i)[i]) = {
  us_split_fields1 = { rec__frame_condition__cell__value = v;
  rec__frame_condition__cell__max_left = v1;
  rec__frame_condition__cell__max_right = v2 } })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy6 : (int,us_rep) farray

logic dummy7 : t

type cell_array__ref = { cell_array__content : us_t
}

function cell_array__ref___projection(a: cell_array__ref) : us_t =
  (a).cell_array__content

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

type max_kind

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : max_kind, max_kind -> bool

logic dummy8 : max_kind

type max_kind__ref = { max_kind__content : max_kind
}

function max_kind__ref___projection(a: max_kind__ref) : max_kind =
  (a).max_kind__content

logic c164b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic not_kind : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic first2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic last2 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic c166b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic c198b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic c201b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic not_kind1 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic first3 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic last3 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c203b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic c235b : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic a : (int,us_rep) farray

logic k : int

logic max : int

logic c167b : int

logic c168b : int

logic k1 : int

logic max1 : int

logic c204b : int

logic c205b : int

logic o : int

logic frame_condition__update_max_3__B165b__first__assume : int

logic frame_condition__update_max_3__B165b__last__assume : int

logic temp___254 : (int,us_rep) farray

logic temp___252 : (int,us_rep) farray

logic temp___250 : int

logic temp___249 : int

logic temp___248 : int

logic temp___247 : int

logic o1 : int

logic o2 : natural

logic o3 : natural

logic o4 : natural

logic o5 : natural

logic o6 : natural

logic o7 : natural

logic o8 : natural

logic o9 : int

logic o10 : int

logic o11 : natural

logic o12 : natural

logic o13 : natural

logic o14 : natural

logic o15 : natural

logic o16 : natural

logic o17 : natural

logic o18 : int

logic o19 : natural

logic o20 : natural

logic o21 : natural

logic o22 : natural

logic o23 : natural

logic o24 : natural

logic o25 : natural

logic o26 : int

logic o27 : (int,us_rep) farray

logic i : int

logic i1 : int

logic o28 : bool

logic i2 : int

logic j : int

logic o29 : int

logic o30 : natural

logic o31 : natural

logic o32 : natural

logic o33 : natural

logic o34 : natural

logic o35 : natural

logic o36 : natural

logic o37 : int

logic i3 : int

logic j1 : int

logic o38 : int

logic o39 : natural

logic o40 : natural

logic o41 : natural

logic o42 : natural

logic o43 : natural

logic o44 : natural

logic o45 : natural

logic o46 : int

logic i4 : int

logic o47 : int

logic o48 : natural

logic o49 : natural

logic o50 : natural

logic o51 : natural

logic o52 : natural

logic o53 : natural

logic o54 : natural

logic o55 : int

logic o56 : int

logic o57 : int

logic o58 : natural

logic o59 : natural

logic o60 : natural

logic o61 : natural

logic o62 : natural

logic o63 : natural

logic o64 : natural

logic o65 : int

logic o66 : int

logic o67 : natural

logic o68 : natural

logic o69 : natural

logic o70 : natural

logic o71 : natural

logic o72 : natural

logic o73 : natural

logic o74 : int

logic o75 : natural

logic o76 : natural

logic o77 : natural

logic o78 : natural

logic o79 : natural

logic o80 : natural

logic o81 : natural

logic o82 : int

logic o83 : (int,us_rep) farray

logic frame_condition__update_max_3__B202b__first__assume : int

logic frame_condition__update_max_3__B202b__last__assume : int

logic temp___263 : int

logic temp___261 : (int,us_rep) farray

logic temp___259 : int

logic temp___258 : int

logic temp___257 : int

logic temp___264 : (int,us_rep) farray

logic o84 : int

logic o85 : natural

logic o86 : natural

logic o87 : natural

logic o88 : natural

logic o89 : natural

logic o90 : natural

logic o91 : natural

logic o92 : int

logic o93 : int

logic o94 : natural

logic o95 : natural

logic o96 : natural

logic o97 : natural

logic o98 : natural

logic o99 : natural

logic o100 : natural

logic o101 : int

logic o102 : natural

logic o103 : natural

logic o104 : natural

logic o105 : natural

logic o106 : natural

logic o107 : natural

logic o108 : natural

logic o109 : int

logic o110 : (int,us_rep) farray

logic o111 : natural

logic o112 : natural

logic o113 : natural

logic o114 : natural

logic o115 : natural

logic o116 : natural

logic o117 : natural

logic o118 : int

logic o119 : (int,us_rep) farray

logic i5 : int

logic i6 : int

logic o120 : bool

logic i7 : int

logic j2 : int

logic o121 : int

logic o122 : natural

logic o123 : natural

logic o124 : natural

logic o125 : natural

logic o126 : natural

logic o127 : natural

logic o128 : natural

logic o129 : int

logic i8 : int

logic j3 : int

logic o130 : int

logic o131 : natural

logic o132 : natural

logic o133 : natural

logic o134 : natural

logic o135 : natural

logic o136 : natural

logic o137 : natural

logic o138 : int

logic i9 : int

logic o139 : int

logic o140 : natural

logic o141 : natural

logic o142 : natural

logic o143 : natural

logic o144 : natural

logic o145 : natural

logic o146 : natural

logic o147 : int

logic o148 : int

logic o149 : int

logic o150 : int

logic o151 : natural

logic o152 : natural

logic o153 : natural

logic o154 : natural

logic o155 : natural

logic o156 : natural

logic o157 : natural

logic o158 : int

logic o159 : int

logic o160 : natural

logic o161 : natural

logic o162 : natural

logic o163 : natural

logic o164 : natural

logic o165 : natural

logic o166 : natural

logic o167 : int

logic o168 : natural

logic o169 : natural

logic o170 : natural

logic o171 : natural

logic o172 : natural

logic o173 : natural

logic o174 : natural

logic o175 : int

logic o176 : (int,us_rep) farray

logic o177 : natural

logic o178 : natural

logic o179 : natural

logic o180 : natural

logic o181 : natural

logic o182 : natural

logic o183 : natural

logic o184 : int

logic o185 : (int,us_rep) farray

logic i10 : int

logic o186 : int

logic o187 : natural

logic o188 : natural

logic o189 : natural

logic o190 : natural

logic o191 : natural

logic o192 : natural

logic o193 : natural

logic o194 : int

logic j4 : int

logic o195 : int

logic o196 : natural

logic o197 : natural

logic o198 : natural

logic o199 : natural

logic o200 : natural

logic o201 : natural

logic o202 : natural

logic o203 : int

logic o204 : int

logic o205 : natural

logic o206 : natural

logic o207 : natural

logic o208 : natural

logic o209 : natural

logic o210 : natural

logic o211 : natural

logic o212 : int

logic o213 : natural

logic o214 : natural

logic o215 : natural

logic o216 : natural

logic o217 : natural

logic o218 : natural

logic o219 : natural

logic o220 : int

logic o221 : int

logic o222 : bool

logic o223 : bool

logic a1 : (int,us_rep) farray

logic k2 : int

logic max2 : int

logic c167b1 : int

logic c168b1 : int

logic k3 : int

logic max3 : int

logic c204b1 : int

logic c205b1 : int

logic result : bool

logic result1 : int

logic k4 : int

logic result2 : int

logic max4 : int

logic result3 : bool

logic result4 : int

logic max5 : int

logic result5 : int

logic c167b2 : int

logic result6 : int

logic c168b2 : int

logic result7 : (int,us_rep) farray

logic a2 : (int,us_rep) farray

logic a3 : (int,us_rep) farray

logic k5 : int

logic max6 : int

logic c167b3 : int

logic c168b3 : int

logic result8 : int

logic k6 : int

logic result9 : bool

logic result10 : int

logic max7 : int

logic result11 : int

logic c167b4 : int

logic result12 : int

logic c168b4 : int

logic result13 : (int,us_rep) farray

logic a4 : (int,us_rep) farray

logic k7 : int

logic k8 : int

logic a5 : (int,us_rep) farray

logic k9 : int

logic max8 : int

logic c167b5 : int

logic c168b5 : int

logic a6 : (int,us_rep) farray

logic k10 : int

logic max9 : int

logic c167b6 : int

logic c168b6 : int

logic a7 : (int,us_rep) farray

logic k11 : int

logic max10 : int

logic c167b7 : int

logic c168b7 : int

logic a8 : (int,us_rep) farray

logic k12 : int

logic max11 : int

logic c167b8 : int

logic c168b8 : int

logic result14 : int

logic k13 : int

logic result15 : int

logic max12 : int

logic result16 : bool

logic result17 : int

logic max13 : int

logic max14 : int

logic max15 : int

logic result18 : int

logic c204b2 : int

logic result19 : int

logic c205b2 : int

logic result20 : (int,us_rep) farray

logic a9 : (int,us_rep) farray

logic result21 : (int,us_rep) farray

logic a10 : (int,us_rep) farray

logic a11 : (int,us_rep) farray

logic a12 : (int,us_rep) farray

logic a13 : (int,us_rep) farray

logic k14 : int

logic max16 : int

logic c204b3 : int

logic c205b3 : int

logic result22 : int

logic k15 : int

logic result23 : int

logic k16 : int

logic k17 : int

logic k18 : int

logic result24 : bool

logic result25 : int

logic max17 : int

logic max18 : int

logic max19 : int

logic result26 : int

logic c204b4 : int

logic result27 : int

logic c205b4 : int

logic result28 : (int,us_rep) farray

logic a14 : (int,us_rep) farray

logic result29 : (int,us_rep) farray

logic a15 : (int,us_rep) farray

logic a16 : (int,us_rep) farray

logic a17 : (int,us_rep) farray

logic k19 : int

logic k20 : int

logic a18 : (int,us_rep) farray

logic k21 : int

logic max20 : int

logic c204b5 : int

logic c205b5 : int

logic a19 : (int,us_rep) farray

logic k22 : int

logic max21 : int

logic c204b6 : int

logic c205b6 : int

logic a20 : (int,us_rep) farray

logic k23 : int

logic max22 : int

logic c204b7 : int

logic c205b7 : int

logic a21 : (int,us_rep) farray

logic k24 : int

logic max23 : int

logic c204b8 : int

logic c205b8 : int

logic a22 : (int,us_rep) farray

logic k25 : int

logic max24 : int

logic c204b9 : int

logic c205b9 : int

logic a23 : (int,us_rep) farray

logic k26 : int

logic max25 : int

logic c204b10 : int

logic c205b10 : int

logic a24 : (int,us_rep) farray

logic k27 : int

logic max26 : int

logic c167b9 : int

logic c168b9 : int

logic k28 : int

logic max27 : int

logic c204b11 : int

logic c205b11 : int

logic a25 : (int,us_rep) farray

logic k29 : int

logic max28 : int

logic c167b10 : int

logic c168b10 : int

logic k30 : int

logic max29 : int

logic c204b12 : int

logic c205b12 : int

logic a26 : (int,us_rep) farray

logic k31 : int

logic max30 : int

logic c167b11 : int

logic c168b11 : int

logic k32 : int

logic max31 : int

logic c204b13 : int

logic c205b13 : int

logic a27 : (int,us_rep) farray

logic k33 : int

logic max32 : int

logic c167b12 : int

logic c168b12 : int

logic k34 : int

logic max33 : int

logic c204b14 : int

logic c205b14 : int

axiom H : dynamic_property(1, 2147483647, to_rep1(a__first),
  to_rep1(a__last))

axiom H1 : ((to_rep1(a__first) <= to_rep1(a__last)) ->
  (o = ((to_rep1(a__last) - to_rep1(a__first)) + 1)))

axiom H2 : ((not (to_rep1(a__first) <= to_rep1(a__last))) -> (o = 0))

axiom H3 : (((o = 0) -> (result = true)) and ((not (o = 0)) ->
  (result = false)))

axiom H4 : (not (result = true))

axiom H5 : in_range4(c164b)

axiom H6 : in_range4(not_kind)

axiom H7 :
  ((frame_condition__update_max_3__B165b__first__assume = to_rep1(a__first)) and
  in_range3(to_rep1(a__first)))

axiom H8 : true

axiom H9 : (frame_condition__update_max_3__B165b__first__assume = first2)

axiom H10 : in_range3(first2)

axiom H11 :
  ((frame_condition__update_max_3__B165b__last__assume = to_rep1(a__last)) and
  in_range3(to_rep1(a__last)))

axiom H12 : true

axiom H13 : (frame_condition__update_max_3__B165b__last__assume = last2)

axiom H14 : in_range3(last2)

axiom H15 : (result1 = k)

axiom H16 : (k4 = first2)

axiom H17 : in_range3(k4)

axiom H18 : (result2 = max)

axiom H19 : (max4 = 0)

axiom H20 : in_range2(max4)

axiom H21 : (temp___254 = a)

axiom H22 : (temp___252 = a)

axiom H23 : (temp___250 = max4)

axiom H24 : (temp___249 = k4)

axiom H25 : (temp___248 = c168b)

axiom H26 : (temp___247 = c167b)

axiom H27 : ((to_rep1(a__first) <= k4) and (k4 <= to_rep1(a__last)))

axiom H28 : (o1 = k4)

axiom H29 : ({ us_split_fields1 = { rec__frame_condition__cell__value = o2;
  rec__frame_condition__cell__max_left = o3;
  rec__frame_condition__cell__max_right = o4 } } = (a[o1]))

axiom H30 : (o2 = o5)

axiom H31 : (o3 = o6)

axiom H32 : (o4 = o7)

axiom H33 : (o8 = o5)

axiom H34 : (o9 = to_rep(o8))

axiom H35 : (((max4 <  o9) -> (result3 = true)) and ((not (max4 <  o9)) ->
  (result3 = false)))

axiom H36 : ((result3 = true) -> ((to_rep1(a__first) <= k4) and
  (k4 <= to_rep1(a__last))))

axiom H37 : ((result3 = true) -> (o10 = k4))

axiom H38 : ((result3 = true) -> ({ us_split_fields1 = {
  rec__frame_condition__cell__value = o11;
  rec__frame_condition__cell__max_left = o12;
  rec__frame_condition__cell__max_right = o13 } } = (a[o10])))

axiom H39 : ((result3 = true) -> (o11 = o14))

axiom H40 : ((result3 = true) -> (o12 = o15))

axiom H41 : ((result3 = true) -> (o13 = o16))

axiom H42 : ((result3 = true) -> (o17 = o14))

axiom H43 : ((result3 = true) -> (o18 = to_rep(o17)))

axiom H44 : ((result3 = true) -> (result4 = max4))

axiom H45 : ((result3 = true) -> (max5 = o18))

axiom H46 : ((not (result3 = true)) -> (max5 = max4))

axiom H47 : in_range4(c166b)

axiom H48 : (result5 = c167b)

axiom H49 : (c167b2 = k4)

axiom H50 : in_range3(c167b2)

axiom H51 : (result6 = c168b)

axiom H52 : (c168b2 = max5)

axiom H53 : in_range2(c168b2)

axiom H54 : (to_rep(o19) = c168b2)

axiom H55 :
  ((((a[c167b2])).us_split_fields1).rec__frame_condition__cell__value = o20)

axiom H56 : (o19 = o21)

axiom H57 :
  ((((a[c167b2])).us_split_fields1).rec__frame_condition__cell__max_right = o22)

axiom H58 : (o23 = o20)

axiom H59 : (o24 = o21)

axiom H60 : (o25 = o22)

axiom H61 : ((to_rep1(a__first) <= c167b2) and (c167b2 <= to_rep1(a__last)))

axiom H62 : (o26 = c167b2)

axiom H63 : (o27 = (a[o26 <- { us_split_fields1 = {
  rec__frame_condition__cell__value = o23;
  rec__frame_condition__cell__max_left = o24;
  rec__frame_condition__cell__max_right = o25 } }]))

axiom H64 : (result7 = a)

axiom H65 : (a2 = o27)

axiom H66 : ((to_rep1(a__first) <= k5) and (k5 <= to_rep1(a__last)))

axiom H67 :
  ((forall i11:int. (((first2 <= i11) and (i11 <= k5)) ->
   (to_rep((((a3[i11])).us_split_fields1).rec__frame_condition__cell__value) <= max6))) and
  (forall i11:int. (((k5 <= i11) and (i11 <= first2)) ->
  (to_rep((((a3[i11])).us_split_fields1).rec__frame_condition__cell__value) <= max6))))

axiom H68 :
  (forall i11:int. (((to_rep1(a__first) <= i11) and (i11 <= k5)) ->
  (forall j5:int. (((i11 <= j5) and (j5 <= k5)) ->
  (to_rep((((a3[i11])).us_split_fields1).rec__frame_condition__cell__value) <= to_rep((((a3[j5])).us_split_fields1).rec__frame_condition__cell__max_left))))))

axiom H69 : true

axiom H70 : true

axiom H71 : ((((((1 <= 2147483647) -> in_range3(c167b3)) and
  ((0 <= 2147483647) -> in_range2(c168b3))) and ((1 <= 2147483647) ->
  in_range3(k5))) and ((0 <= 2147483647) -> in_range2(max6))) and
  (forall temp___253:int. (((to_rep1(a__first) <= temp___253) and
  (temp___253 <= to_rep1(a__last))) ->
  ((((a3[temp___253])).us_split_fields1).rec__frame_condition__cell__value = (((temp___252[temp___253])).us_split_fields1).rec__frame_condition__cell__value))))

axiom H72 : (k7 = k5)

axiom H73 : (k8 = k5)

axiom H74 : (k5 = last2)

axiom H75 : (c168b5 = c168b3)

axiom H76 : (c167b5 = c167b3)

axiom H77 : (max8 = max6)

axiom H78 : (k9 = k7)

axiom H79 : (a5 = a3)

axiom H80 : (c168b6 = c168b3)

axiom H81 : (c167b6 = c167b3)

axiom H82 : (max9 = max6)

axiom H83 : (k10 = k8)

axiom H84 : (a6 = a3)

axiom H85 : (c168b7 = c168b5)

axiom H86 : (c167b7 = c167b5)

axiom H87 : (max10 = max8)

axiom H88 : (k11 = k9)

axiom H89 : (a7 = a5)

axiom H90 : (c168b8 = c168b6)

axiom H91 : (c167b8 = c167b6)

axiom H92 : (max11 = max9)

axiom H93 : (k12 = k10)

axiom H94 : (a8 = a6)

axiom H95 : in_range4(c201b)

axiom H96 : in_range4(not_kind1)

axiom H97 : ((1 = 0) ->
  ((frame_condition__update_max_3__B202b__first__assume = to_rep1(a__first)) and
  in_range3(to_rep1(a__first))))

axiom H98 : ((not (1 = 0)) ->
  ((frame_condition__update_max_3__B202b__first__assume = to_rep1(a__last)) and
  in_range3(to_rep1(a__last))))

axiom H99 : (frame_condition__update_max_3__B202b__first__assume = first3)

axiom H100 : in_range3(first3)

axiom H101 : ((1 = 0) ->
  ((frame_condition__update_max_3__B202b__last__assume = to_rep1(a__last)) and
  in_range3(to_rep1(a__last))))

axiom H102 : ((not (1 = 0)) ->
  ((frame_condition__update_max_3__B202b__last__assume = to_rep1(a__first)) and
  in_range3(to_rep1(a__first))))

axiom H103 : (frame_condition__update_max_3__B202b__last__assume = last3)

axiom H104 : in_range3(last3)

axiom H105 : (result14 = k1)

axiom H106 : (k13 = first3)

axiom H107 : in_range3(k13)

axiom H108 : (result15 = max1)

axiom H109 : (max12 = 0)

axiom H110 : in_range2(max12)

axiom H111 : ((to_rep1(a__first) <= k13) and (k13 <= to_rep1(a__last)))

axiom H112 : (o84 = k13)

axiom H113 : ({ us_split_fields1 = { rec__frame_condition__cell__value = o85;
  rec__frame_condition__cell__max_left = o86;
  rec__frame_condition__cell__max_right = o87 } } = (a7[o84]))

axiom H114 : ((o88 = o85) and ((o89 = o86) and (o90 = o87)))

axiom H115 : (o91 = o88)

axiom H116 : (o92 = to_rep(o91))

axiom H117 : (((max12 <  o92) -> (result16 = true)) and
  ((not (max12 <  o92)) -> (result16 = false)))

axiom H118 : ((result16 = true) -> ((to_rep1(a__first) <= k13) and
  (k13 <= to_rep1(a__last))))

axiom H119 : ((result16 = true) -> (o93 = k13))

axiom H120 : ((result16 = true) -> ({ us_split_fields1 = {
  rec__frame_condition__cell__value = o94;
  rec__frame_condition__cell__max_left = o95;
  rec__frame_condition__cell__max_right = o96 } } = (a7[o93])))

axiom H121 : ((result16 = true) -> ((o97 = o94) and ((o98 = o95) and
  (o99 = o96))))

axiom H122 : ((result16 = true) -> (o100 = o97))

axiom H123 : ((result16 = true) -> (o101 = to_rep(o100)))

axiom H124 : ((result16 = true) -> (result17 = max12))

axiom H125 : ((result16 = true) -> (max13 = o101))

axiom H126 : ((result16 = true) -> (max14 = max13))

axiom H127 : ((result16 = true) -> (max15 = max13))

axiom H128 : ((not (result16 = true)) -> (max14 = max12))

axiom H129 : ((not (result16 = true)) -> (max15 = max12))

axiom H130 : in_range4(c203b)

axiom H131 : (result18 = c204b)

axiom H132 : (c204b2 = k13)

axiom H133 : in_range3(c204b2)

axiom H134 : (result19 = c205b)

axiom H135 : (c205b2 = max14)

axiom H136 : in_range2(c205b2)

axiom H137 : (not (1 = 0))

axiom H138 : (to_rep(o111) = c205b2)

axiom H139 :
  ((o112 = (((a7[c204b2])).us_split_fields1).rec__frame_condition__cell__value) and
  ((o113 = (((a7[c204b2])).us_split_fields1).rec__frame_condition__cell__max_left) and
  (o114 = o111)))

axiom H140 : ((o115 = o112) and ((o116 = o113) and (o117 = o114)))

 (* File "frame_condition.adb", line 50, characters 0-0 *)
goal WP_parameter_def : (to_rep1(a__first) <= c204b2)
