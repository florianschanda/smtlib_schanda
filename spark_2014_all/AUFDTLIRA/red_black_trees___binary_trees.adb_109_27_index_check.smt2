(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))))))))))
(declare-const todo (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t83b 0)
(declare-fun t83bqtint (t83b) Int)
(assert (forall ((i t83b)) (and (<= 1 (t83bqtint i)) (<= (t83bqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t83b t83b) Bool)
(declare-const dummy1 t83b)
(declare-datatypes () ((t83b__ref (mk_t83b__ref (t83b__content t83b)))))
(define-fun t83b__ref___projection ((a t83b__ref)) t83b (t83b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_175 Int) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (or (= temp___is_init_171 true) (<= 1 100)) (in_range1 temp___expr_175)))
(declare-const i Int)
(declare-const binary_trees__model__next__result Int)
(declare-const temp___1096 Int)
(declare-const temp___1097 Int)
(declare-const temp___1098 Int)
(declare-const binary_trees__model__next__result1 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const i2 Int)
(declare-const binary_trees__model__next__result2 Int)
(declare-const result1 Int)
(declare-const binary_trees__model__next__result3 Int)
(declare-const i3 Int)
(declare-const binary_trees__model__next__result4 Int)
(declare-const i4 Int)
(declare-const binary_trees__model__next__result5 Int)
(declare-const i5 Int)
(declare-const binary_trees__model__next__result6 Int)
(declare-const i6 Int)
(declare-const binary_trees__model__next__result7 Int)
(declare-const result2 Int)
(declare-const binary_trees__model__next__result8 Int)
(declare-const binary_trees__model__next__result9 Int)
(declare-const binary_trees__model__next__result10 Int)
(declare-const i7 Int)
(declare-const binary_trees__model__next__result11 Int)
(declare-const i8 Int)
(declare-const binary_trees__model__next__result12 Int)
(declare-const i9 Int)
(declare-const binary_trees__model__next__result13 Int)
(declare-const i10 Int)
(declare-const binary_trees__model__next__result14 Int)
(define-fun binary_trees__model__next__result15 () int__ref (mk_int__ref binary_trees__model__next__result11))
(define-fun i11 () int__ref (mk_int__ref i7))
(define-fun binary_trees__model__next__result16 () int__ref (mk_int__ref binary_trees__model__next__result6))
(define-fun i12 () int__ref (mk_int__ref i5))
(define-fun result3 () int__ref (mk_int__ref result))
(define-fun i13 () int__ref (mk_int__ref i))
(assert (or (and (and (and (= binary_trees__model__next__result3 binary_trees__model__next__result11) (= i2 i7)) (and (= binary_trees__model__next__result12 binary_trees__model__next__result3) (= i8 i2))) (and (= temp___1096 1) (and (= temp___1097 100) (and (and (= result3 i13) (= i1 temp___1096)) (and (and (<= temp___1096 i1) (<= i1 temp___1097)) (and (= temp___1098 i1) (and (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (not (= (select todo j) true)))) (and (and (=> (<= 1 100) (in_range2 i2)) (and (<= 1 i2) (<= i2 100))) (and (= (select todo i2) true) (and (= binary_trees__model__next__result2 result1) (= binary_trees__model__next__result3 i2))))))))))) (and (and (and (= result3 i13) (= i1 1)) (ite (and (<= 1 i1) (<= i1 100)) (and (and (and (= temp___1098 i1) (and (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (not (= (select todo j) true)))) (and (and (=> (<= 1 100) (in_range2 i2)) (and (<= 1 i2) (<= i2 100))) (and (and (not (= (select todo i2) true)) (= binary_trees__model__next__result3 binary_trees__model__next__result2)) (= i2 100))))) (and (and (= binary_trees__model__next__result3 binary_trees__model__next__result4) (= i2 i3)) (and (= binary_trees__model__next__result5 binary_trees__model__next__result3) (= i4 i2)))) (and (and (= binary_trees__model__next__result16 (mk_int__ref binary_trees__model__next__result4)) (= i12 (mk_int__ref i3))) (and (= binary_trees__model__next__result7 binary_trees__model__next__result5) (= i6 i4)))) (and (and (= binary_trees__model__next__result16 (mk_int__ref binary_trees__model__next__result)) (= i1 i5)) (and (= binary_trees__model__next__result7 binary_trees__model__next__result1) (= i6 i1))))) (and (and (and (= binary_trees__model__next__result15 (mk_int__ref binary_trees__model__next__result9)) (= i11 i12)) (and (= binary_trees__model__next__result12 binary_trees__model__next__result10) (= i8 i6))) (and (and (= binary_trees__model__next__result8 binary_trees__model__next__result9) (= binary_trees__model__next__result10 binary_trees__model__next__result8)) (and (= (mk_int__ref result2) binary_trees__model__next__result16) (= binary_trees__model__next__result8 0)))))))
(assert (= (mk_int__ref binary_trees__model__next__result13) binary_trees__model__next__result15))
(assert (= (mk_int__ref i9) i11))
(assert (= binary_trees__model__next__result14 binary_trees__model__next__result12))
(assert (= i10 i8))
(assert (not (= binary_trees__model__next__result13 0)))
(assert (not (<= binary_trees__model__next__result13 100)))
(check-sat)
(exit)
