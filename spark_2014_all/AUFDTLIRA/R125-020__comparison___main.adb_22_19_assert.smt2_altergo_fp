(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq2 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type tTaSP1

predicate in_range1(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tTaSP1, tTaSP1 -> bool

logic dummy1 : tTaSP1

type tTaSP1__ref = { tTaSP1__content : tTaSP1
}

function tTaSP1__ref___projection(a: tTaSP1__ref) : tTaSP1 =
  (a).tTaSP1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic lcp : int, int, (int,integer) farray -> int

logic lcp__function_guard : int, int, int, (int,integer) farray -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq4 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t8s__ref = { t8s__content : integer
}

function t8s__ref___projection(a: t8s__ref) : integer = (a).t8s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,integer) farray

logic dummy6 : t

type t9s__ref = { t9s__content : us_t
}

function t9s__ref___projection(a: t9s__ref) : us_t = (a).t9s__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t10s__ref = { t10s__content : integer
}

function t10s__ref___projection(a: t10s__ref) : integer = (a).t10s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq2((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,integer) farray

logic dummy9 : t1

type t11s__ref = { t11s__content : us_t1
}

function t11s__ref___projection(a: t11s__ref) : us_t1 = (a).t11s__content

axiom lcp__post_axiom :
  (forall x:int. forall y:int.
  (forall longest_common_prefix__a:(int,integer) farray [lcp(x, y,
  longest_common_prefix__a)]. (((in_range4(x) and in_range4(y)) and
  (((1 <= x) and (x <= 1000)) and ((1 <= y) and (y <= 1000)))) ->
  ((((bool_eq2(longest_common_prefix__a, to_rep(first(mk(x, ((x + lcp(x, y,
  longest_common_prefix__a)) - 1)))), to_rep(last(mk(x, ((x + lcp(x, y,
  longest_common_prefix__a)) - 1)))), longest_common_prefix__a,
  to_rep(first2(mk1(y, ((y + lcp(x, y, longest_common_prefix__a)) - 1)))),
  to_rep(last2(mk1(y, ((y + lcp(x, y,
  longest_common_prefix__a)) - 1))))) = true) and ((((1 <= (lcp(x, y,
  longest_common_prefix__a) + x)) -> (not ((lcp(x, y,
  longest_common_prefix__a) + x) <= 1000))) or ((1 <= (lcp(x, y,
  longest_common_prefix__a) + y)) -> (not ((lcp(x, y,
  longest_common_prefix__a) + y) <= 1000)))) or
  (not (to_rep((longest_common_prefix__a[(x + lcp(x, y,
  longest_common_prefix__a))])) = to_rep((longest_common_prefix__a[(y + lcp(x,
  y, longest_common_prefix__a))])))))) and
  (((not (to_rep((longest_common_prefix__a[x])) = to_rep((longest_common_prefix__a[y])))) ->
  (lcp(x, y, longest_common_prefix__a) = 0)) and
  ((to_rep((longest_common_prefix__a[x])) = to_rep((longest_common_prefix__a[y]))) ->
  (((x = y) -> (lcp(x, y, longest_common_prefix__a) = ((1000 - x) + 1))) and
  ((not (x = y)) -> (0 <  lcp(x, y, longest_common_prefix__a))))))) and
  in_range3(lcp(x, y, longest_common_prefix__a))))))

type t3b

predicate in_range5(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : t3b, t3b -> bool

logic dummy10 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref___projection(a: t3b__ref) : t3b = (a).t3b__content

type t5b

predicate in_range6(x: int) = ((6 <= x) and (x <= 10))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : t5b, t5b -> bool

logic dummy11 : t5b

type t5b__ref = { t5b__content : t5b
}

function t5b__ref___projection(a: t5b__ref) : t5b = (a).t5b__content

logic temp___225 : int, int, int, int, int, int, int, int, int, int,
  int -> (int,integer) farray

axiom def_axiom :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  forall temp___230:int. forall temp___231:int. forall temp___232:int.
  forall temp___233:int. forall temp___234:int. forall temp___235:int.
  forall temp___236:int. forall temp___237:int.
  (((((((((((in_range(temp___227) and in_range(temp___228)) and
  in_range(temp___229)) and in_range(temp___230)) and
  in_range(temp___231)) and in_range(temp___232)) and
  in_range(temp___233)) and in_range(temp___234)) and
  in_range(temp___235)) and in_range(temp___236)) and
  in_range(temp___237)) ->
  (forall temp___238:int. (((temp___238 = 1) ->
  (to_rep((temp___225(temp___227, temp___228, temp___229, temp___230,
  temp___231, temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237)[temp___238])) = temp___227)) and ((not (temp___238 = 1)) ->
  (((temp___238 = 2) -> (to_rep((temp___225(temp___227, temp___228,
  temp___229, temp___230, temp___231, temp___232, temp___233, temp___234,
  temp___235, temp___236, temp___237)[temp___238])) = temp___228)) and
  ((not (temp___238 = 2)) -> (((temp___238 = 3) ->
  (to_rep((temp___225(temp___227, temp___228, temp___229, temp___230,
  temp___231, temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237)[temp___238])) = temp___229)) and ((not (temp___238 = 3)) ->
  (((temp___238 = 4) -> (to_rep((temp___225(temp___227, temp___228,
  temp___229, temp___230, temp___231, temp___232, temp___233, temp___234,
  temp___235, temp___236, temp___237)[temp___238])) = temp___230)) and
  ((not (temp___238 = 4)) -> (((temp___238 = 5) ->
  (to_rep((temp___225(temp___227, temp___228, temp___229, temp___230,
  temp___231, temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237)[temp___238])) = temp___231)) and ((not (temp___238 = 5)) ->
  (((temp___238 = 6) -> (to_rep((temp___225(temp___227, temp___228,
  temp___229, temp___230, temp___231, temp___232, temp___233, temp___234,
  temp___235, temp___236, temp___237)[temp___238])) = temp___232)) and
  ((not (temp___238 = 6)) -> (((temp___238 = 7) ->
  (to_rep((temp___225(temp___227, temp___228, temp___229, temp___230,
  temp___231, temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237)[temp___238])) = temp___233)) and ((not (temp___238 = 7)) ->
  (((temp___238 = 8) -> (to_rep((temp___225(temp___227, temp___228,
  temp___229, temp___230, temp___231, temp___232, temp___233, temp___234,
  temp___235, temp___236, temp___237)[temp___238])) = temp___234)) and
  ((not (temp___238 = 8)) -> (((temp___238 = 9) ->
  (to_rep((temp___225(temp___227, temp___228, temp___229, temp___230,
  temp___231, temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237)[temp___238])) = temp___235)) and ((not (temp___238 = 9)) ->
  (((temp___238 = 10) -> (to_rep((temp___225(temp___227, temp___228,
  temp___229, temp___230, temp___231, temp___232, temp___233, temp___234,
  temp___235, temp___236, temp___237)[temp___238])) = temp___236)) and
  ((not (temp___238 = 10)) -> (to_rep((temp___225(temp___227, temp___228,
  temp___229, temp___230, temp___231, temp___232, temp___233, temp___234,
  temp___235, temp___236,
  temp___237)[temp___238])) = temp___237))))))))))))))))))))))))

 (* File "main.adb", line 14, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall result:(int,integer) farray.
  forall a1:(int,integer) farray. (((result = a) and (a1 = temp___225(1, 2,
  3, 4, 5, 1, 2, 3, 4, 5, 0))) -> ((bool_eq2(a1, 1, 5, a1, 6, 10) = true) ->
  ((lcp(1, 6, a1) = 5) -> ((lcp(1, 7, a1) = 0) -> (lcp(1, 1001, a1) = 0))))))
