(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___203 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic temp___212 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic temp___221 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic temp___323 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic temp___331 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

axiom def_axiom :
  (forall temp___205:(int,integer) farray.
  (forall temp___206:int. forall temp___207:int. forall temp___208:int.
  forall temp___209:int. ((((in_range1(temp___206) and
  in_range1(temp___207)) and in_range1(temp___208)) and
  in_range1(temp___209)) ->
  (forall temp___210:int. (((temp___210 = temp___208) ->
  (to_rep((temp___203(temp___205, temp___206, temp___207, temp___208,
  temp___209)[temp___210])) = temp___209)) and
  ((not (temp___210 = temp___208)) -> (((temp___210 = temp___206) ->
  (to_rep((temp___203(temp___205, temp___206, temp___207, temp___208,
  temp___209)[temp___210])) = temp___207)) and
  ((not (temp___210 = temp___206)) -> ((temp___203(temp___205, temp___206,
  temp___207, temp___208,
  temp___209)[temp___210]) = (temp___205[temp___210]))))))))))

axiom def_axiom1 :
  (forall temp___214:(int,integer) farray.
  (forall temp___215:int. forall temp___216:int. forall temp___217:int.
  forall temp___218:int. ((((in_range1(temp___215) and
  in_range1(temp___216)) and in_range1(temp___217)) and
  in_range1(temp___218)) ->
  (forall temp___219:int. (((temp___219 = temp___217) ->
  (to_rep((temp___212(temp___214, temp___215, temp___216, temp___217,
  temp___218)[temp___219])) = temp___218)) and
  ((not (temp___219 = temp___217)) -> (((temp___219 = temp___215) ->
  (to_rep((temp___212(temp___214, temp___215, temp___216, temp___217,
  temp___218)[temp___219])) = temp___216)) and
  ((not (temp___219 = temp___215)) -> ((temp___212(temp___214, temp___215,
  temp___216, temp___217,
  temp___218)[temp___219]) = (temp___214[temp___219]))))))))))

axiom def_axiom2 :
  (forall temp___223:(int,integer) farray.
  (forall temp___224:int. forall temp___225:int. forall temp___226:int.
  forall temp___227:int. ((((in_range1(temp___224) and
  in_range1(temp___225)) and in_range1(temp___226)) and
  in_range1(temp___227)) ->
  (forall temp___228:int. (((temp___228 = temp___226) ->
  (to_rep((temp___221(temp___223, temp___224, temp___225, temp___226,
  temp___227)[temp___228])) = temp___227)) and
  ((not (temp___228 = temp___226)) -> (((temp___228 = temp___224) ->
  (to_rep((temp___221(temp___223, temp___224, temp___225, temp___226,
  temp___227)[temp___228])) = temp___225)) and
  ((not (temp___228 = temp___224)) -> ((temp___221(temp___223, temp___224,
  temp___225, temp___226,
  temp___227)[temp___228]) = (temp___223[temp___228]))))))))))

axiom def_axiom3 :
  (forall temp___325:(int,integer) farray.
  (forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. ((((in_range1(temp___326) and
  in_range1(temp___327)) and in_range1(temp___328)) and
  in_range1(temp___329)) ->
  (forall temp___330:int. (((temp___330 = temp___328) ->
  (to_rep((temp___323(temp___325, temp___326, temp___327, temp___328,
  temp___329)[temp___330])) = temp___329)) and
  ((not (temp___330 = temp___328)) -> (((temp___330 = temp___326) ->
  (to_rep((temp___323(temp___325, temp___326, temp___327, temp___328,
  temp___329)[temp___330])) = temp___327)) and
  ((not (temp___330 = temp___326)) -> ((temp___323(temp___325, temp___326,
  temp___327, temp___328,
  temp___329)[temp___330]) = (temp___325[temp___330]))))))))))

axiom def_axiom4 :
  (forall temp___333:(int,integer) farray.
  (forall temp___334:int. forall temp___335:int. forall temp___336:int.
  forall temp___337:int. ((((in_range1(temp___334) and
  in_range1(temp___335)) and in_range1(temp___336)) and
  in_range1(temp___337)) ->
  (forall temp___338:int. (((temp___338 = temp___336) ->
  (to_rep((temp___331(temp___333, temp___334, temp___335, temp___336,
  temp___337)[temp___338])) = temp___337)) and
  ((not (temp___338 = temp___336)) -> (((temp___338 = temp___334) ->
  (to_rep((temp___331(temp___333, temp___334, temp___335, temp___336,
  temp___337)[temp___338])) = temp___335)) and
  ((not (temp___338 = temp___334)) -> ((temp___331(temp___333, temp___334,
  temp___335, temp___336,
  temp___337)[temp___338]) = (temp___333[temp___338]))))))))))

 (* File "simple_arrays.adb", line 90, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall o:integer.
  forall o1:(int,integer) farray. forall o2:integer.
  forall o3:(int,integer) farray. forall result:(int,integer) farray.
  forall a1:(int,integer) farray. forall result1:(int,integer) farray.
  forall a2:(int,integer) farray. forall a3:(int,integer) farray.
  forall a4:(int,integer) farray. ((in_range1(n) and
  (((bool_eq3(temp___323(a, 1, 5, n, 6), (- 2147483648), 2147483647,
  temp___331(a, n, 6, 1, 5), (- 2147483648), 2147483647) = true) and
  ((((to_rep(o) = 5) and (o1 = (a[1 <- o]))) and ((result = a) and
  (a1 = o1))) and (((to_rep(o2) = 6) and (o3 = (a1[n <- o2]))) and
  ((result1 = a1) and (a2 = o3))))) and ((a2 = a3) and (a4 = a2)))) ->
  ((not (n = 1)) -> (bool_eq3(a3, (- 2147483648), 2147483647, temp___203(a,
  1, 5, n, 6), (- 2147483648), 2147483647) = true))))
