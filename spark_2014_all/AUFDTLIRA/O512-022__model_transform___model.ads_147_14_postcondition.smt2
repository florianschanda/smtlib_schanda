(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort uml_action_access 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (uml_action_access uml_action_access) Bool)
(declare-const dummy uml_action_access)
(declare-datatypes () ((uml_action_access__ref (mk_uml_action_access__ref (uml_action_access__content uml_action_access)))))
(define-fun uml_action_access__ref___projection ((a uml_action_access__ref)) uml_action_access (uml_action_access__content a))
(declare-sort name_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (name_t name_t) Bool)
(declare-const dummy1 name_t)
(declare-datatypes () ((name_t__ref (mk_name_t__ref (name_t__content name_t)))))
(define-fun name_t__ref___projection ((a name_t__ref)) name_t (name_t__content a))
(declare-fun to_rep (name_t) Int)
(declare-fun of_rep (Int) name_t)
(assert (forall ((x name_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x name_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__model__uml_action__name_data name_t)))))
(define-fun us_split_fields_Name_Data__2__projection ((a us_split_fields)) name_t (rec__model__uml_action__name_data a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__model__uml_action__name_data (us_split_fields1 a))) (to_rep (rec__model__uml_action__name_data (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const model__uml_action__name_data__first__bit Int)
(declare-const model__uml_action__name_data__last__bit Int)
(declare-const model__uml_action__name_data__position Int)
(assert (<= 0 model__uml_action__name_data__first__bit))
(assert (< model__uml_action__name_data__first__bit model__uml_action__name_data__last__bit))
(assert (<= 0 model__uml_action__name_data__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((uml_action__ref (mk_uml_action__ref (uml_action__content us_rep)))))
(define-fun uml_action__ref___projection ((a uml_action__ref)) us_rep (uml_action__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))) true))))))))
(declare-sort uml_control_flow_access 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (uml_control_flow_access uml_control_flow_access) Bool)
(declare-const dummy3 uml_control_flow_access)
(declare-datatypes () ((uml_control_flow_access__ref (mk_uml_control_flow_access__ref (uml_control_flow_access__content uml_control_flow_access)))))
(define-fun uml_control_flow_access__ref___projection ((a uml_control_flow_access__ref)) uml_control_flow_access (uml_control_flow_access__content a))
(declare-fun to_rep1 (uml_action_access) Int)
(declare-fun of_rep1 (Int) uml_action_access)
(assert (forall ((x uml_action_access)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x uml_action_access)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__model__uml_control_flow__from_data uml_action_access) (rec__model__uml_control_flow__to_data uml_action_access)))))
(define-fun us_split_fields_From_Data__2__projection ((a us_split_fields2)) uml_action_access (rec__model__uml_control_flow__from_data a))
(define-fun us_split_fields_To_Data__2__projection ((a us_split_fields2)) uml_action_access (rec__model__uml_control_flow__to_data a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__model__uml_control_flow__from_data (us_split_fields3 a))) (to_rep1 (rec__model__uml_control_flow__from_data (us_split_fields3 b)))) (= (to_rep1 (rec__model__uml_control_flow__to_data (us_split_fields3 a))) (to_rep1 (rec__model__uml_control_flow__to_data (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const model__uml_control_flow__from_data__first__bit Int)
(declare-const model__uml_control_flow__from_data__last__bit Int)
(declare-const model__uml_control_flow__from_data__position Int)
(assert (<= 0 model__uml_control_flow__from_data__first__bit))
(assert (< model__uml_control_flow__from_data__first__bit model__uml_control_flow__from_data__last__bit))
(assert (<= 0 model__uml_control_flow__from_data__position))
(declare-const model__uml_control_flow__to_data__first__bit Int)
(declare-const model__uml_control_flow__to_data__last__bit Int)
(declare-const model__uml_control_flow__to_data__position Int)
(assert (<= 0 model__uml_control_flow__to_data__first__bit))
(assert (< model__uml_control_flow__to_data__first__bit model__uml_control_flow__to_data__last__bit))
(assert (<= 0 model__uml_control_flow__to_data__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((uml_control_flow__ref (mk_uml_control_flow__ref (uml_control_flow__content us_rep1)))))
(define-fun uml_control_flow__ref___projection ((a uml_control_flow__ref)) us_rep1 (uml_control_flow__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq2 (select a temp___idx_160) (select b (+ (- b__first a__first) temp___idx_160))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq2 (select a temp___idx_160) (select b (+ (- b__first a__first) temp___idx_160))) true))))))))
(declare-const dummy5 (Array Int us_rep))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int us_rep)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-const dummy6 (Array Int us_rep1))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep1)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int us_rep1)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep1)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq6 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__model__uml_activity__owned_action_data (Array Int us_rep)) (rec__model__uml_activity__owned_flow_data (Array Int us_rep1))))))
(define-fun us_split_fields_Owned_Action_Data__projection ((a us_split_fields4)) (Array Int us_rep) (rec__model__uml_activity__owned_action_data a))
(define-fun us_split_fields_Owned_Flow_Data__projection ((a us_split_fields4)) (Array Int us_rep1) (rec__model__uml_activity__owned_flow_data a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq4 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (bool_eq1 (rec__model__uml_activity__owned_action_data (us_split_fields5 a)) 0 100 (rec__model__uml_activity__owned_action_data (us_split_fields5 b)) 0 100) true) (= (bool_eq3 (rec__model__uml_activity__owned_flow_data (us_split_fields5 a)) 0 100 (rec__model__uml_activity__owned_flow_data (us_split_fields5 b)) 0 100) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const model__uml_activity__owned_action_data__first__bit Int)
(declare-const model__uml_activity__owned_action_data__last__bit Int)
(declare-const model__uml_activity__owned_action_data__position Int)
(assert (<= 0 model__uml_activity__owned_action_data__first__bit))
(assert (< model__uml_activity__owned_action_data__first__bit model__uml_activity__owned_action_data__last__bit))
(assert (<= 0 model__uml_activity__owned_action_data__position))
(declare-const model__uml_activity__owned_flow_data__first__bit Int)
(declare-const model__uml_activity__owned_flow_data__last__bit Int)
(declare-const model__uml_activity__owned_flow_data__position Int)
(assert (<= 0 model__uml_activity__owned_flow_data__first__bit))
(assert (< model__uml_activity__owned_flow_data__first__bit model__uml_activity__owned_flow_data__last__bit))
(assert (<= 0 model__uml_activity__owned_flow_data__position))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((uml_activity__ref (mk_uml_activity__ref (uml_activity__content us_rep2)))))
(define-fun uml_activity__ref___projection ((a uml_activity__ref)) us_rep2 (uml_activity__content a))
(declare-fun owned_action (us_rep2) (Array Int us_rep))
(declare-fun owned_action__function_guard ((Array Int us_rep) us_rep2) Bool)
(assert true)
(assert (forall ((self us_rep2)) (! (= (owned_action self) (rec__model__uml_activity__owned_action_data (us_split_fields5 self))) :pattern ((owned_action self)))))
(declare-fun owned_flow (us_rep2) (Array Int us_rep1))
(declare-fun owned_flow__function_guard ((Array Int us_rep1) us_rep2) Bool)
(assert true)
(assert (forall ((self us_rep2)) (! (= (owned_flow self) (rec__model__uml_activity__owned_flow_data (us_split_fields5 self))) :pattern ((owned_flow self)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const val__ (Array Int us_rep1))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_168 Int) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool (=> (or (= temp___is_init_164 true) (<= 0 2147483647)) (in_range2 temp___expr_168)))
(define-fun dynamic_invariant1 ((temp___expr_286 Int) (temp___is_init_282 Bool) (temp___skip_constant_283 Bool) (temp___do_toplevel_284 Bool) (temp___do_typ_inv_285 Bool)) Bool (=> (or (= temp___is_init_282 true) (<= 0 100)) (in_range1 temp___expr_286)))
(define-fun dynamic_invariant2 ((temp___expr_313 Int) (temp___is_init_309 Bool) (temp___skip_constant_310 Bool) (temp___do_toplevel_311 Bool) (temp___do_typ_inv_312 Bool)) Bool (=> (or (= temp___is_init_309 true) (<= 0 100)) (in_range3 temp___expr_313)))
(declare-const self__split_fields (Array Int us_rep))
(declare-const self__split_fields1 (Array Int us_rep1))
(declare-const result (Array Int us_rep))
(declare-const result1 (Array Int us_rep1))
(declare-const self__split_fields2 (Array Int us_rep))
(declare-const self__split_fields3 (Array Int us_rep1))
(declare-const self__split_fields4 (Array Int us_rep))
(declare-const self__split_fields5 (Array Int us_rep1))
(declare-const self__split_fields6 (Array Int us_rep))
(declare-const self__split_fields7 (Array Int us_rep1))
(assert (= result self__split_fields))
(assert (= result1 self__split_fields1))
(assert (= self__split_fields self__split_fields2))
(assert (= val__ self__split_fields3))
(assert (= self__split_fields4 self__split_fields2))
(assert (= self__split_fields5 self__split_fields3))
(assert (= self__split_fields6 self__split_fields2))
(assert (= self__split_fields7 self__split_fields3))
(assert (not (= (bool_eq3 (owned_flow (mk___rep2 (mk___split_fields2 self__split_fields4 self__split_fields5))) 0 100 val__ 0 100) true)))
(check-sat)
(exit)
