(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__frame_condition__cell__value : natural;
rec__frame_condition__cell__max_left : natural;
rec__frame_condition__cell__max_right : natural
}

function us_split_fields_Value__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__value

function us_split_fields_Max_Left__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__max_left

function us_split_fields_Max_Right__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__max_right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__frame_condition__cell__value) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__value)) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_left))) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_right) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_right))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__frame_condition__cell__value) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__value)) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_left))) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_right) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_right)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:natural. forall a2:natural.
  (0 <= object__size({ us_split_fields1 = {
  rec__frame_condition__cell__value = a;
  rec__frame_condition__cell__max_left = a1;
  rec__frame_condition__cell__max_right = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:natural. forall a2:natural.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__frame_condition__cell__value = a;
  rec__frame_condition__cell__max_left = a1;
  rec__frame_condition__cell__max_right = a2 } })))

logic frame_condition__cell__value__first__bit : int

logic frame_condition__cell__value__last__bit : int

logic frame_condition__cell__value__position : int

axiom frame_condition__cell__value__first__bit_axiom :
  (0 <= frame_condition__cell__value__first__bit)

axiom frame_condition__cell__value__last__bit_axiom :
  (frame_condition__cell__value__first__bit <  frame_condition__cell__value__last__bit)

axiom frame_condition__cell__value__position_axiom :
  (0 <= frame_condition__cell__value__position)

logic frame_condition__cell__max_left__first__bit : int

logic frame_condition__cell__max_left__last__bit : int

logic frame_condition__cell__max_left__position : int

axiom frame_condition__cell__max_left__first__bit_axiom :
  (0 <= frame_condition__cell__max_left__first__bit)

axiom frame_condition__cell__max_left__last__bit_axiom :
  (frame_condition__cell__max_left__first__bit <  frame_condition__cell__max_left__last__bit)

axiom frame_condition__cell__max_left__position_axiom :
  (0 <= frame_condition__cell__max_left__position)

logic frame_condition__cell__max_right__first__bit : int

logic frame_condition__cell__max_right__last__bit : int

logic frame_condition__cell__max_right__position : int

axiom frame_condition__cell__max_right__first__bit_axiom :
  (0 <= frame_condition__cell__max_right__first__bit)

axiom frame_condition__cell__max_right__last__bit_axiom :
  (frame_condition__cell__max_right__first__bit <  frame_condition__cell__max_right__last__bit)

axiom frame_condition__cell__max_right__position_axiom :
  (0 <= frame_condition__cell__max_right__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : natural

logic dummy4 : natural

logic dummy5 : natural

type cell__ref = { cell__content : us_rep
}

function cell__ref___projection(a: cell__ref) : us_rep = (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:natural. forall v1:natural. forall v2:natural.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__frame_condition__cell__value = v;
  rec__frame_condition__cell__max_left = v1;
  rec__frame_condition__cell__max_right = v2 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__frame_condition__cell__value = v;
  rec__frame_condition__cell__max_left = v1;
  rec__frame_condition__cell__max_right = v2 } }, i)[i]) = {
  us_split_fields1 = { rec__frame_condition__cell__value = v;
  rec__frame_condition__cell__max_left = v1;
  rec__frame_condition__cell__max_right = v2 } })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy6 : (int,us_rep) farray

logic dummy7 : t

type cell_array__ref = { cell_array__content : us_t
}

function cell_array__ref___projection(a: cell_array__ref) : us_t =
  (a).cell_array__content

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic first2 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic last2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic get_max_left : int, (int,us_rep) farray -> int

logic get_max_left__function_guard : int, int, (int,us_rep) farray -> prop

axiom get_max_left__post_axiom :
  (forall index:int.
  (forall frame_condition__update_max_2__a:(int,us_rep) farray
  [get_max_left(index, frame_condition__update_max_2__a)].
  ((in_range3(index) and ((to_rep1(a__first) <= index) and
  (index <= to_rep1(a__last)))) -> in_range2(get_max_left(index,
  frame_condition__update_max_2__a)))))

axiom get_max_left__def_axiom :
  (forall index:int.
  (forall frame_condition__update_max_2__a:(int,us_rep) farray
  [get_max_left(index, frame_condition__update_max_2__a)].
  (in_range3(index) -> (get_max_left(index,
  frame_condition__update_max_2__a) = to_rep((((frame_condition__update_max_2__a[index])).us_split_fields1).rec__frame_condition__cell__max_left)))))

logic frame_left : us_t, (int,us_rep) farray -> bool

logic frame_left__function_guard : bool, us_t, (int,us_rep) farray -> prop

axiom frame_left__post_axiom : true

axiom frame_left__def_axiom :
  (forall old_a:(int,us_rep) farray. forall old_a1:t.
  (forall frame_condition__update_max_2__a:(int,us_rep) farray [frame_left({
  elts = old_a; rt = old_a1 }, frame_condition__update_max_2__a)].
  ((frame_left({ elts = old_a; rt = old_a1 },
  frame_condition__update_max_2__a) = true) <->
  (forall i:int. (((to_rep1(a__first) <= i) and (i <= to_rep1(a__last))) ->
  (to_rep((((frame_condition__update_max_2__a[i])).us_split_fields1).rec__frame_condition__cell__value) = to_rep((((old_a[i])).us_split_fields1).rec__frame_condition__cell__value)))))))

logic first3 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic last3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

axiom first__def_axiom : (first2 = to_rep1(a__first))

axiom last__def_axiom : (last2 = to_rep1(a__last))

axiom first__def_axiom1 : (first3 = first2)

axiom last__def_axiom1 : (last3 = last2)

logic a : (int,us_rep) farray

logic k : int

logic max : int

logic c238b : int

logic c239b : int

logic temp___281 : int

logic temp___280 : int

logic temp___282 : (int,us_rep) farray

logic temp___279 : int

logic temp___277 : (int,us_rep) farray

logic temp___275 : int

logic o : int

logic o1 : natural

logic o2 : natural

logic o3 : natural

logic o4 : natural

logic o5 : natural

logic o6 : natural

logic o7 : natural

logic o8 : int

logic o9 : int

logic o10 : natural

logic o11 : natural

logic o12 : natural

logic o13 : natural

logic o14 : natural

logic o15 : natural

logic o16 : natural

logic o17 : int

logic o18 : natural

logic o19 : natural

logic o20 : natural

logic o21 : natural

logic o22 : natural

logic o23 : natural

logic o24 : natural

logic o25 : int

logic o26 : (int,us_rep) farray

logic i : int

logic i1 : int

logic o27 : bool

logic i2 : int

logic j : int

logic o28 : int

logic o29 : int

logic i3 : int

logic j1 : int

logic o30 : int

logic o31 : int

logic o32 : bool

logic us : bool

logic o33 : int

logic o34 : int

logic o35 : natural

logic o36 : natural

logic o37 : natural

logic o38 : natural

logic o39 : natural

logic o40 : natural

logic o41 : natural

logic o42 : int

logic o43 : int

logic o44 : natural

logic o45 : natural

logic o46 : natural

logic o47 : natural

logic o48 : natural

logic o49 : natural

logic o50 : natural

logic o51 : int

logic o52 : natural

logic o53 : natural

logic o54 : natural

logic o55 : natural

logic o56 : natural

logic o57 : natural

logic o58 : natural

logic o59 : int

logic o60 : (int,us_rep) farray

logic i4 : int

logic j2 : int

logic o61 : int

logic o62 : int

logic i5 : int

logic j3 : int

logic o63 : int

logic o64 : int

logic o65 : bool

logic o66 : bool

logic result : int

logic k1 : int

logic result1 : int

logic max1 : int

logic result2 : bool

logic result3 : int

logic max2 : int

logic result4 : int

logic c238b1 : int

logic result5 : int

logic c239b1 : int

logic result6 : (int,us_rep) farray

logic a1 : (int,us_rep) farray

logic a2 : (int,us_rep) farray

logic k2 : int

logic max3 : int

logic c238b2 : int

logic c239b2 : int

logic result7 : int

logic k3 : int

logic result8 : bool

logic result9 : int

logic max4 : int

logic result10 : int

logic c238b3 : int

logic result11 : int

logic c239b3 : int

logic result12 : (int,us_rep) farray

logic a3 : (int,us_rep) farray

logic k4 : int

logic k5 : int

logic a4 : (int,us_rep) farray

logic k6 : int

logic max5 : int

logic c238b4 : int

logic c239b4 : int

logic a5 : (int,us_rep) farray

logic k7 : int

logic max6 : int

logic c238b5 : int

logic c239b5 : int

logic a6 : (int,us_rep) farray

logic k8 : int

logic max7 : int

logic c238b6 : int

logic c239b6 : int

logic a7 : (int,us_rep) farray

logic k9 : int

logic max8 : int

logic c238b7 : int

logic c239b7 : int

logic a8 : (int,us_rep) farray

logic k10 : int

logic max9 : int

logic c238b8 : int

logic c239b8 : int

logic a9 : (int,us_rep) farray

logic k11 : int

logic max10 : int

logic c238b9 : int

logic c239b9 : int

axiom H : in_range3(first2)

axiom H1 : (to_rep1(a__first) = first2)

axiom H2 : in_range3(last2)

axiom H3 : (to_rep1(a__last) = last2)

axiom H4 : dynamic_property(1, 2147483647, to_rep1(a__first),
  to_rep1(a__last))

axiom H5 : in_range3(first3)

axiom H6 : (first2 = first3)

axiom H7 : in_range3(last3)

axiom H8 : (last2 = last3)

axiom H9 : (((to_rep1(a__first) <= to_rep1(a__last)) ->
  (0 <  ((to_rep1(a__last) - to_rep1(a__first)) + 1))) and
  ((not (to_rep1(a__first) <= to_rep1(a__last))) -> (0 <  0)))

axiom H10 : (result = k)

axiom H11 : (k1 = first3)

axiom H12 : in_range3(k1)

axiom H13 : (result1 = max)

axiom H14 : (max1 = 0)

axiom H15 : in_range2(max1)

axiom H16 : ((to_rep1(a__first) <= k1) and (k1 <= to_rep1(a__last)))

axiom H17 : (o = k1)

axiom H18 : ({ us_split_fields1 = { rec__frame_condition__cell__value = o1;
  rec__frame_condition__cell__max_left = o2;
  rec__frame_condition__cell__max_right = o3 } } = (a[o]))

axiom H19 : (o1 = o4)

axiom H20 : (o2 = o5)

axiom H21 : (o3 = o6)

axiom H22 : (o7 = o4)

axiom H23 : (o8 = to_rep(o7))

axiom H24 : (((max1 <  o8) -> (result2 = true)) and ((not (max1 <  o8)) ->
  (result2 = false)))

axiom H25 : ((result2 = true) -> ((to_rep1(a__first) <= k1) and
  (k1 <= to_rep1(a__last))))

axiom H26 : ((result2 = true) -> (o9 = k1))

axiom H27 : ((result2 = true) -> ({ us_split_fields1 = {
  rec__frame_condition__cell__value = o10;
  rec__frame_condition__cell__max_left = o11;
  rec__frame_condition__cell__max_right = o12 } } = (a[o9])))

axiom H28 : ((result2 = true) -> (o10 = o13))

axiom H29 : ((result2 = true) -> (o11 = o14))

axiom H30 : ((result2 = true) -> (o12 = o15))

axiom H31 : ((result2 = true) -> (o16 = o13))

axiom H32 : ((result2 = true) -> (o17 = to_rep(o16)))

axiom H33 : ((result2 = true) -> (result3 = max1))

axiom H34 : ((result2 = true) -> (max2 = o17))

axiom H35 : ((not (result2 = true)) -> (max2 = max1))

axiom H36 : (result4 = c238b)

axiom H37 : (c238b1 = k1)

axiom H38 : in_range3(c238b1)

axiom H39 : (result5 = c239b)

axiom H40 : (c239b1 = max2)

axiom H41 : in_range2(c239b1)

axiom H42 : (to_rep(o18) = c239b1)

axiom H43 :
  ((((a[c238b1])).us_split_fields1).rec__frame_condition__cell__value = o19)

axiom H44 : (o18 = o20)

axiom H45 :
  ((((a[c238b1])).us_split_fields1).rec__frame_condition__cell__max_right = o21)

axiom H46 : (o22 = o19)

axiom H47 : (o23 = o20)

axiom H48 : (o24 = o21)

axiom H49 : ((to_rep1(a__first) <= c238b1) and (c238b1 <= to_rep1(a__last)))

axiom H50 : (o25 = c238b1)

axiom H51 : (o26 = (a[o25 <- { us_split_fields1 = {
  rec__frame_condition__cell__value = o22;
  rec__frame_condition__cell__max_left = o23;
  rec__frame_condition__cell__max_right = o24 } }]))

axiom H52 : (result6 = a)

axiom H53 : (a1 = o26)

 (* File "frame_condition.adb", line 60, characters 0-0 *)
goal WP_parameter_def : (frame_left({ elts = a; rt = mk(to_rep1(a__first),
  to_rep1(a__last)) }, a1) = true)
