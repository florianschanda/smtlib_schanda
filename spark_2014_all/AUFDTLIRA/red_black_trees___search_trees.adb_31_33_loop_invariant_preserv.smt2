(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort extended_index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (extended_index_type extended_index_type) Bool)
(declare-const dummy2 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(declare-fun to_rep1 (extended_index_type) Int)
(declare-fun of_rep1 (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x extended_index_type)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tree_model__path_type__a us_rep) (rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep (rec__tree_model__path_type__a a))
(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool (rec__tree_model__path_type__k a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq3 (rec__tree_model__path_type__a (us_split_fields1 a)) (rec__tree_model__path_type__a (us_split_fields1 b))) true) (= (rec__tree_model__path_type__k (us_split_fields1 a)) (rec__tree_model__path_type__k (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const tree_model__path_type__a__first__bit Int)
(declare-const tree_model__path_type__a__last__bit Int)
(declare-const tree_model__path_type__a__position Int)
(assert (<= 0 tree_model__path_type__a__first__bit))
(assert (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))
(assert (<= 0 tree_model__path_type__a__position))
(declare-const tree_model__path_type__k__first__bit Int)
(declare-const tree_model__path_type__k__last__bit Int)
(declare-const tree_model__path_type__k__position Int)
(assert (<= 0 tree_model__path_type__k__first__bit))
(assert (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))
(assert (<= 0 tree_model__path_type__k__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 (path_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))
(assert (forall ((v us_rep1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))
(declare-fun contains (us_rep2 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)
(declare-sort element_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (element_type element_type) Bool)
(declare-const dummy6 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___2__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant ((temp___expr_232 Int) (temp___is_init_229 Bool) (temp___skip_constant_230 Bool) (temp___do_toplevel_231 Bool)) Bool (=> (or (= temp___is_init_229 true) (<= 0 2147483647)) (in_range4 temp___expr_232)))
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption ((temp___expr_239 us_rep2) (temp___skip_top_level_240 Bool)) Bool (=> (not (= temp___skip_top_level_240 true)) (= (is_empty temp___expr_239) true)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant item true true true) (=> (= (of_int 1) true) (=> (exists ((e Int)) (and (and (in_range4 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun length (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (count_type count_type) Bool)
(declare-const dummy7 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 0 2147483647)) (in_range5 temp___expr_144)))
(assert (forall ((container us_rep2)) (! (dynamic_invariant1 (length container) true false true) :pattern ((length container)))))
(assert (forall ((container us_rep2)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range4 item) (= (contains container item) true))))) (= (= result true) (= (length container) 0)))) :pattern ((is_empty container)))))
(declare-fun ole (us_rep2 us_rep2) Bool)
(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun included_except (us_rep2 us_rep2 Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun add (us_rep2 Int) us_rep2)
(declare-fun add__function_guard (us_rep2 us_rep2 Int) Bool)
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (and (dynamic_invariant item true true true) (and (not (= (contains container item) true)) (< (length container) 2147483647))) (let ((result (add container item))) (and (and (and (= (length result) (+ (length container) 1)) (= (contains result item) true)) (= (ole container result) true)) (= (included_except result container item) true)))) :pattern ((add container item))))))
(declare-datatypes () ((value_set__ref (mk_value_set__ref (value_set__content us_rep2)))))
(define-fun value_set__ref___projection ((a value_set__ref)) us_rep2 (value_set__content a))
(declare-sort position_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (position_type position_type) Bool)
(declare-const dummy8 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep2 (position_type) Int)
(declare-fun of_rep2 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x position_type)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 b)))) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 b))))) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 b))))) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 a))) (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep3)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep3 (cell__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))
(assert (forall ((v us_rep3)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq4 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq4 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true))))))))
(declare-const dummy10 (Array Int us_rep3))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int us_rep3)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep3)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int us_rep3)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq10 ((Array Int us_rep3) (Array Int us_rep3)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep3))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep3) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep4)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq6 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 a))) (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 b)))) (= (bool_eq5 (rec__binary_trees__forest__c (us_split_fields5 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields5 b)) 1 100) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep4) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep4) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq11 (us_rep4 us_rep4) Bool)
(declare-const dummy11 us_rep4)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep4)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep4 (forest__content a))
(declare-fun size (us_rep4) Int)
(declare-fun size__function_guard (Int us_rep4) Bool)
(define-fun dynamic_invariant2 ((temp___expr_156 Int) (temp___is_init_153 Bool) (temp___skip_constant_154 Bool) (temp___do_toplevel_155 Bool)) Bool (=> (or (= temp___is_init_153 true) (<= 0 100)) (in_range3 temp___expr_156)))
(declare-fun tree_structure (us_rep4) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep4) Bool)
(define-fun dynamic_invariant3 ((temp___expr_273 us_rep4) (temp___is_init_270 Bool) (temp___skip_constant_271 Bool) (temp___do_toplevel_272 Bool)) Bool (= (tree_structure temp___expr_273) true))
(define-fun default_initial_assumption1 ((temp___expr_276 us_rep4) (temp___skip_top_level_277 Bool)) Bool (and (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 temp___expr_276))) 0) (forall ((temp___279 Int)) (=> (and (<= 1 temp___279) (<= temp___279 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_276)) temp___279)))) 2))))) (=> (not (= temp___skip_top_level_277 true)) (= (size temp___expr_276) 0))))
(define-fun type_invariant ((temp___282 us_rep4)) Bool (= (tree_structure temp___282) true))
(assert (forall ((f us_rep4)) (! (=> (dynamic_invariant3 f true true true) (dynamic_invariant2 (size f) true false true)) :pattern ((size f)))))
(declare-fun model__ (us_rep4 Int) (Array Int us_rep1))
(declare-fun model____function_guard ((Array Int us_rep1) us_rep4 Int) Bool)
(define-fun dynamic_invariant4 ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 1 100)) (in_range2 temp___expr_150)))
(declare-fun length1 (us_rep) Int)
(declare-fun length__function_guard1 (Int us_rep) Bool)
(define-fun last ((container us_rep)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(define-fun dynamic_invariant5 ((temp___expr_216 (Array Int us_rep1)) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int)) (=> (and (<= 1 temp___217) (<= temp___217 100)) (=> (= temp___is_init_213 true) (< (length1 (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_216 temp___217)))) 100)))))
(define-fun default_initial_assumption2 ((temp___expr_219 (Array Int us_rep1)) (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int)) (=> (and (<= 1 temp___221) (<= temp___221 100)) (and (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_219 temp___221)))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___expr_219 temp___221))) (of_int 0))))))
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(declare-fun valid_root (us_rep4 Int) Bool)
(declare-fun valid_root__function_guard (Bool us_rep4 Int) Bool)
(declare-fun parent (us_rep4 Int) Int)
(declare-fun parent__function_guard (Int us_rep4 Int) Bool)
(declare-fun position (us_rep4 Int) Int)
(declare-fun position__function_guard (Int us_rep4 Int) Bool)
(assert (forall ((f us_rep4)) (forall ((root Int)) (! (=> (and (and (dynamic_invariant3 f true true true) (dynamic_invariant4 root true true true)) (= (valid_root f root) true)) (let ((result (model__ f root))) (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result root))) true) (and (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select result root)))) 0) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= i root)) (ite (and (not (= (parent f i) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result (parent f i)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)))))) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= i root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select result (parent f i)))) (position f i) (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true) (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select result i))) (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true)) (= j i))))))))))) (dynamic_invariant5 result true false true)))) :pattern ((model__ f root))))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq7 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep (select a temp___idx_134)) (to_rep (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep (select a temp___idx_134)) (to_rep (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq7 a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq7 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq7 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy12 (Array Int natural))
(declare-const value__size6 Int)
(declare-fun object__size6 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 ((Array Int natural)) Int)
(assert (<= 0 value__size6))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size6 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment6 a))))
(declare-fun user_eq12 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__search_trees__search_tree__root extended_index_type) (rec__search_trees__search_tree__struct us_rep4) (rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields6)) extended_index_type (rec__search_trees__search_tree__root a))
(define-fun us_split_fields_Struct__projection ((a us_split_fields6)) us_rep4 (rec__search_trees__search_tree__struct a))
(define-fun us_split_fields_Values__projection ((a us_split_fields6)) (Array Int natural) (rec__search_trees__search_tree__values a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep5 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep5)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq8 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 a))) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 b)))) (= (bool_eq6 (rec__search_trees__search_tree__struct (us_split_fields7 a)) (rec__search_trees__search_tree__struct (us_split_fields7 b))) true)) (= (bool_eq7 (rec__search_trees__search_tree__values (us_split_fields7 a)) 1 100 (rec__search_trees__search_tree__values (us_split_fields7 b)) 1 100) true)) true false))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep5) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep5) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))
(declare-const search_trees__search_tree__root__first__bit Int)
(declare-const search_trees__search_tree__root__last__bit Int)
(declare-const search_trees__search_tree__root__position Int)
(assert (<= 0 search_trees__search_tree__root__first__bit))
(assert (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))
(assert (<= 0 search_trees__search_tree__root__position))
(declare-const search_trees__search_tree__struct__first__bit Int)
(declare-const search_trees__search_tree__struct__last__bit Int)
(declare-const search_trees__search_tree__struct__position Int)
(assert (<= 0 search_trees__search_tree__struct__first__bit))
(assert (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))
(assert (<= 0 search_trees__search_tree__struct__position))
(declare-const search_trees__search_tree__values__first__bit Int)
(declare-const search_trees__search_tree__values__last__bit Int)
(declare-const search_trees__search_tree__values__position Int)
(assert (<= 0 search_trees__search_tree__values__first__bit))
(assert (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))
(assert (<= 0 search_trees__search_tree__values__position))
(declare-fun user_eq13 (us_rep5 us_rep5) Bool)
(declare-const dummy13 us_rep5)
(declare-datatypes () ((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep5)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep5 (search_tree__content a))
(declare-fun size1 (us_rep5) Int)
(declare-fun size__function_guard1 (Int us_rep5) Bool)
(declare-fun ordered_leafs (us_rep4 Int (Array Int natural)) Bool)
(declare-fun ordered_leafs__function_guard (Bool us_rep4 Int (Array Int natural)) Bool)
(declare-fun temp___387 (Int) (Array Int natural))
(assert (forall ((temp___389 Int)) (forall ((temp___390 Int)) (= (select (temp___387 temp___389) temp___390) (of_rep temp___389)))))
(define-fun dynamic_invariant6 ((temp___expr_376 us_rep5) (temp___is_init_373 Bool) (temp___skip_constant_374 Bool) (temp___do_toplevel_375 Bool)) Bool (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_376))) true))
(define-fun default_initial_assumption3 ((temp___expr_380 us_rep5) (temp___skip_top_level_381 Bool)) Bool (and (and (and (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___expr_380))) 0) (and (and (= (to_rep1 (rec__binary_trees__forest__s (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380))))) 0) (forall ((temp___384 Int)) (=> (and (<= 1 temp___384) (<= temp___384 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380)))) temp___384)))) 2))))) (= (size (rec__search_trees__search_tree__struct (us_split_fields7 temp___expr_380))) 0))) (= (rec__search_trees__search_tree__values (us_split_fields7 temp___expr_380)) (temp___387 0))) (=> (not (= temp___skip_top_level_381 true)) (= (size1 temp___expr_380) 0))))
(define-fun type_invariant1 ((temp___392 us_rep5)) Bool (ite (= (size (rec__search_trees__search_tree__struct (us_split_fields7 temp___392))) 0) (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392))) 0) (and (and (not (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392))) 0)) (= (valid_root (rec__search_trees__search_tree__struct (us_split_fields7 temp___392)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392)))) true)) (= (ordered_leafs (rec__search_trees__search_tree__struct (us_split_fields7 temp___392)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 temp___392))) (rec__search_trees__search_tree__values (us_split_fields7 temp___392))) true))))
(assert (forall ((t us_rep5)) (! (=> (and (dynamic_invariant6 t true true true) (type_invariant1 t)) (dynamic_invariant2 (size1 t) true false true)) :pattern ((size1 t)))))
(assert (forall ((t us_rep5)) (! (=> (dynamic_invariant6 t true true true) (= (size1 t) (size (rec__search_trees__search_tree__struct (us_split_fields7 t))))) :pattern ((size1 t)))))
(declare-const t us_rep5)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun default_initial_assumption4 ((temp___expr_252 us_rep2) (temp___skip_top_level_253 Bool)) Bool (=> (not (= temp___skip_top_level_253 true)) (= (is_empty temp___expr_252) true)))
(define-fun dynamic_invariant7 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun olt ((left us_rep) (right us_rep)) Bool (and (< (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(assert (forall ((f us_rep4)) (forall ((root Int)) (forall ((values (Array Int natural))) (! (= (= (ordered_leafs f root values) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___482 (model__ f root))) (select temp___482 i)))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (let ((temp___483 (model__ f root))) (select temp___483 j)))) true)) (= (olt (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___484 (model__ f root))) (select temp___484 i)))) (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___485 (model__ f root))) (select temp___485 j))))) true)) (ite (= (get (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___480 (model__ f root))) (select temp___480 j)))) (+ (length1 (rec__tree_model__path_type__a (us_split_fields1 (let ((temp___481 (model__ f root))) (select temp___481 i))))) 1)) 0) (< (to_rep (select values j)) (to_rep (select values i))) (< (to_rep (select values i)) (to_rep (select values j)))))))))) :pattern ((ordered_leafs f root values)))))))
(define-fun dynamic_invariant8 ((temp___expr_162 Int) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool)) Bool (=> (or (= temp___is_init_159 true) (<= 0 2)) (in_range6 temp___expr_162)))
(declare-sort direction 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq14 (direction direction) Bool)
(declare-const dummy14 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(define-fun dynamic_invariant9 ((temp___expr_168 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool)) Bool (=> (or (= temp___is_init_165 true) (<= 0 1)) (in_range7 temp___expr_168)))
(define-fun dynamic_invariant10 ((temp___expr_205 us_rep1) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true) (=> (= temp___is_init_202 true) (< (length1 (rec__tree_model__path_type__a (us_split_fields1 temp___expr_205))) 100))))
(define-fun default_initial_assumption5 ((temp___expr_207 us_rep1) (temp___skip_top_level_208 Bool)) Bool (and (= (length1 (rec__tree_model__path_type__a (us_split_fields1 temp___expr_207))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 temp___expr_207)) (of_int 0))))
(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length1 (rec__tree_model__path_type__a (us_split_fields1 temp___211))) 100))
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption6 ((temp___expr_199 us_rep) (temp___skip_top_level_200 Bool)) Bool (=> (not (= temp___skip_top_level_200 true)) (= (length1 temp___expr_199) 0)))
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (forall ((d Int)) (! (= (= (is_add s1 d s2) true) (and (and (= (- (length1 s2) 1) (length1 s1)) (= (olt s1 s2) true)) (= (get s2 (length1 s2)) d))) :pattern ((is_add s1 d s2))))))
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (dynamic_invariant3 f true true true) (dynamic_invariant4 i true true true)) (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root f i))))))
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (dynamic_invariant3 f true true true) (dynamic_invariant4 i true true true)) (let ((result (parent f i))) (and (and (=> (= (valid_root f i) true) (= result 0)) (=> (= (size f) 0) (= result 0))) (dynamic_invariant2 result true false true)))) :pattern ((parent f i))))))
(assert (forall ((f us_rep4)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant3 f true true true) (dynamic_invariant4 i true true true)) (not (= (parent f i) 0))) (dynamic_invariant9 (position f i) true false true)) :pattern ((position f i))))))
(define-fun default_initial_assumption7 ((temp___expr_259 us_rep3) (temp___skip_top_level_260 Bool)) Bool (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 temp___expr_259))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 temp___expr_259))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 temp___expr_259))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 temp___expr_259))) 2)))
(define-fun default_initial_assumption8 ((temp___expr_266 (Array Int us_rep3)) (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int)) (=> (and (<= 1 temp___268) (<= temp___268 100)) (and (and (and (= (to_rep1 (rec__binary_trees__cell__left (us_split_fields3 (select temp___expr_266 temp___268)))) 0) (= (to_rep1 (rec__binary_trees__cell__right (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep1 (rec__binary_trees__cell__parent (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep2 (rec__binary_trees__cell__position (us_split_fields3 (select temp___expr_266 temp___268)))) 2)))))
(assert true)
(declare-sort extended_index 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq15 (extended_index extended_index) Bool)
(declare-const dummy15 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant11 ((temp___expr_192 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 0 2147483647)) (in_range8 temp___expr_192)))
(assert (forall ((container us_rep)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true))) :pattern ((length1 container)))))
(declare-sort element_type1 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq16 (element_type1 element_type1) Bool)
(declare-const dummy16 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant12 ((temp___expr_186 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 0 1)) (in_range9 temp___expr_186)))
(assert (forall ((container us_rep)) (forall ((position1 Int)) (! (=> (and (dynamic_invariant11 position1 true true true) (and (<= 1 position1) (<= position1 (last container)))) (dynamic_invariant12 (get container position1) true false true)) :pattern ((get container position1))))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range4 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant item true true true) (= (= (included_except left right item) true) (forall ((e Int)) (=> (and (in_range4 e) (= (contains left e) true)) (or (= (contains right e) true) (= e item)))))) :pattern ((included_except left right item))))))
(declare-const s us_rep2)
(declare-const j Int)
(declare-const search_trees__values__result us_rep2)
(declare-const temp___629 us_rep2)
(declare-const temp___628 Int)
(declare-const o Bool)
(declare-const o1 Int)
(declare-const temp___625 (Array Int us_rep1))
(declare-const o2 us_rep)
(declare-const o3 Bool)
(declare-const o4 us_rep)
(declare-const o5 Bool)
(declare-const o6 us_rep2)
(declare-const o7 us_rep2)
(declare-const i Int)
(declare-const o8 Int)
(declare-const temp___631 (Array Int us_rep1))
(declare-const o9 Int)
(declare-const o10 us_rep)
(declare-const o11 Bool)
(declare-const o12 us_rep)
(declare-const o13 Bool)
(declare-const v Int)
(declare-const i1 Int)
(declare-const o14 Int)
(declare-const temp___636 (Array Int us_rep1))
(declare-const o15 Bool)
(declare-const o16 Int)
(declare-const temp___6251 (Array Int us_rep1))
(declare-const o17 us_rep)
(declare-const o18 Bool)
(declare-const o19 us_rep)
(declare-const o20 Bool)
(declare-const o21 us_rep2)
(declare-const o22 us_rep2)
(declare-const o23 Int)
(declare-const v1 Int)
(declare-const i2 Int)
(declare-const o24 Int)
(declare-const temp___650 (Array Int us_rep1))
(declare-const i3 Int)
(declare-const o25 Int)
(declare-const temp___647 (Array Int us_rep1))
(declare-const s1 us_rep2)
(declare-const j1 Int)
(declare-const search_trees__values__result1 us_rep2)
(declare-const result us_rep2)
(declare-const search_trees__values__result2 us_rep2)
(declare-const result1 Int)
(declare-const j2 Int)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 us_rep2)
(declare-const s2 us_rep2)
(declare-const s3 us_rep2)
(declare-const j3 Int)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Int)
(declare-const j4 Int)
(declare-const result8 Bool)
(declare-const result9 Bool)
(declare-const result10 us_rep2)
(declare-const s4 us_rep2)
(declare-const s5 us_rep2)
(declare-const j5 Int)
(declare-const s6 us_rep2)
(declare-const j6 Int)
(declare-const s7 value_set__ref)
(declare-const j7 int__ref)
(declare-const s8 us_rep2)
(declare-const j8 Int)
(declare-const result11 value_set__ref)
(declare-const search_trees__values__result3 us_rep2)
(declare-const search_trees__values__result4 value_set__ref)
(declare-const search_trees__values__result5 us_rep2)
(declare-const s9 value_set__ref)
(declare-const j9 int__ref)
(declare-const search_trees__values__result6 value_set__ref)
(declare-const s10 us_rep2)
(declare-const j10 Int)
(declare-const search_trees__values__result7 us_rep2)
(declare-const s11 value_set__ref)
(declare-const j11 int__ref)
(declare-const search_trees__values__result8 value_set__ref)
(declare-const s12 us_rep2)
(declare-const j12 Int)
(declare-const search_trees__values__result9 us_rep2)
(declare-const result12 Bool)
(declare-const result13 Bool)
(declare-const result14 Bool)
(assert (= (tree_structure (rec__search_trees__search_tree__struct (us_split_fields7 t))) true))
(assert (type_invariant1 t))
(assert (= (is_empty s) true))
(assert (not (= (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))) 0)))
(assert (= search_trees__values__result2 search_trees__values__result))
(assert (= search_trees__values__result2 search_trees__values__result1))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j2 1))
(assert (<= 1 j2))
(assert (<= j2 100))
(assert (and (= o1 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) (in_range2 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))))
(assert (and (= temp___625 (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) o1)) (and (dynamic_invariant5 temp___625 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 o1))) true) (and (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select temp___625 o1)))) 0) (and (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (=> (not (= i4 o1)) (ite (and (not (= (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 i4))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 i4))) true)))))) (and (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 i4))) true) (not (= i4 o1))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___625 (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4)))) (position (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4) (rec__tree_model__path_type__a (us_split_fields1 (select temp___625 i4)))) true) (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select temp___625 i4)))) 0)))) (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 i4))) true) (forall ((j13 Int)) (=> (and (<= 1 j13) (<= j13 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___625 j13))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___625 i4))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___625 j13)))) true)) (= j13 i4))))))))))))))
(assert (= (mk___rep (mk___split_fields o2 o3)) (select temp___625 j2)))
(assert (= o2 o4))
(assert (= o3 o5))
(assert (= result3 o5))
(assert (=> (= result3 true) (and (= o (contains s (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j2)))) (=> (= (of_int 1) true) (=> (exists ((e Int)) (and (and (in_range4 e) (= (contains s e) true)) (= e (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j2))))) (= o true))))))
(assert (=> (= result3 true) (= result2 (ite (not (= o true)) true false))))
(assert (=> (not (= result3 true)) (= result2 false)))
(assert (=> (= result2 true) (and (= o6 (add s (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j2)))) (and (and (and (= (length o6) (+ (length s) 1)) (= (contains o6 (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j2))) true)) (= (ole s o6) true)) (= (included_except o6 s (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j2))) true)))))
(assert (=> (= result2 true) (= o7 o6)))
(assert (=> (= result2 true) (= (mk_value_set__ref result4) (mk_value_set__ref s))))
(assert (=> (= result2 true) (= s2 o7)))
(assert (=> (not (= result2 true)) (= s2 s)))
(assert (=> (not (= result2 true)) (= s2 s1)))
(assert (<= (length s3) j3))
(assert (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 j3)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) i4))) true) (= (contains s3 (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) i4))) true)))))
(assert (forall ((v2 Int)) (=> (and (<= 0 v2) (<= v2 2147483647)) (=> (= (contains s3 v2) true) (exists ((i4 Int)) (and (and (<= 1 i4) (<= i4 100)) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) i4))) true) (= (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) i4)) v2))))))))
(assert (and (=> (<= 1 100) (in_range2 j3)) (and (<= 1 j3) (<= j3 100))))
(assert (not (= j3 100)))
(assert (= j3 result7))
(assert (= j4 (+ j3 1)))
(assert (and (= o16 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t)))) (in_range2 (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))))
(assert (and (= temp___6251 (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t)) o16)) (and (dynamic_invariant5 temp___6251 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 o16))) true) (and (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select temp___6251 o16)))) 0) (and (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (=> (not (= i4 o16)) (ite (and (not (= (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 i4))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 i4))) true)))))) (and (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 i4))) true) (not (= i4 o16))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___6251 (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4)))) (position (rec__search_trees__search_tree__struct (us_split_fields7 t)) i4) (rec__tree_model__path_type__a (us_split_fields1 (select temp___6251 i4)))) true) (= (length1 (rec__tree_model__path_type__a (us_split_fields1 (select temp___6251 i4)))) 0)))) (forall ((i4 Int)) (=> (and (<= 1 i4) (<= i4 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 i4))) true) (forall ((j13 Int)) (=> (and (<= 1 j13) (<= j13 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___6251 j13))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___6251 i4))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___6251 j13)))) true)) (= j13 i4))))))))))))))
(assert (= (mk___rep (mk___split_fields o17 o18)) (select temp___6251 j4)))
(assert (= o17 o19))
(assert (= o18 o20))
(assert (= result9 o20))
(assert (=> (= result9 true) (and (= o15 (contains s3 (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j4)))) (=> (= (of_int 1) true) (=> (exists ((e Int)) (and (and (in_range4 e) (= (contains s3 e) true)) (= e (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j4))))) (= o15 true))))))
(assert (=> (= result9 true) (= result8 (ite (not (= o15 true)) true false))))
(assert (=> (not (= result9 true)) (= result8 false)))
(assert (=> (= result8 true) (and (= o21 (add s3 (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j4)))) (and (and (and (= (length o21) (+ (length s3) 1)) (= (contains o21 (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j4))) true)) (= (ole s3 o21) true)) (= (included_except o21 s3 (to_rep (select (rec__search_trees__search_tree__values (us_split_fields7 t)) j4))) true)))))
(assert (=> (= result8 true) (= o22 o21)))
(assert (=> (= result8 true) (= result10 s3)))
(assert (=> (= result8 true) (= s4 o22)))
(assert (=> (not (= result8 true)) (= s4 s3)))
(assert (not (<= (length s4) j4)))
(check-sat)
(exit)
