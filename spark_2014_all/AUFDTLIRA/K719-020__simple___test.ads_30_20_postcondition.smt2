(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy1 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test__t__a integer) (rec__test__t__b Bool) (rec__test__t__c (Array Int integer))))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) integer (rec__test__t__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) Bool (rec__test__t__b a))
(define-fun us_split_fields_C__projection ((a us_split_fields)) (Array Int integer) (rec__test__t__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__test__t__a (us_split_fields1 a))) (to_rep (rec__test__t__a (us_split_fields1 b)))) (= (rec__test__t__b (us_split_fields1 a)) (rec__test__t__b (us_split_fields1 b)))) (= (bool_eq (rec__test__t__c (us_split_fields1 a)) 1 10 (rec__test__t__c (us_split_fields1 b)) 1 10) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const test__t__a__first__bit Int)
(declare-const test__t__a__last__bit Int)
(declare-const test__t__a__position Int)
(assert (<= 0 test__t__a__first__bit))
(assert (< test__t__a__first__bit test__t__a__last__bit))
(assert (<= 0 test__t__a__position))
(declare-const test__t__b__first__bit Int)
(declare-const test__t__b__last__bit Int)
(declare-const test__t__b__position Int)
(assert (<= 0 test__t__b__first__bit))
(assert (< test__t__b__first__bit test__t__b__last__bit))
(assert (<= 0 test__t__b__position))
(declare-const test__t__c__first__bit Int)
(declare-const test__t__c__last__bit Int)
(declare-const test__t__c__position Int)
(assert (<= 0 test__t__c__first__bit))
(assert (< test__t__c__first__bit test__t__c__last__bit))
(assert (<= 0 test__t__c__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 Bool)
(declare-const x__split_fields2 (Array Int integer))
(declare-const o integer)
(declare-const o1 (Array Int integer))
(declare-const o2 integer)
(declare-const o3 Bool)
(declare-const o4 (Array Int integer))
(declare-const temp___253 integer)
(declare-const temp___2531 Bool)
(declare-const temp___2532 (Array Int integer))
(declare-const result integer)
(declare-const result1 Bool)
(declare-const result2 (Array Int integer))
(declare-const x__split_fields3 integer)
(declare-const x__split_fields4 Bool)
(declare-const x__split_fields5 (Array Int integer))
(declare-const x__split_fields6 integer)
(declare-const x__split_fields7 Bool)
(declare-const x__split_fields8 (Array Int integer))
(declare-const x__split_fields9 integer)
(declare-const x__split_fields10 Bool)
(declare-const x__split_fields11 (Array Int integer))
(assert (= (to_rep o) 1))
(assert (= o1 (store x__split_fields2 2 o)))
(assert (= x__split_fields o2))
(assert (= x__split_fields1 o3))
(assert (= o1 o4))
(assert (= temp___253 o2))
(assert (= temp___2531 o3))
(assert (= temp___2532 o4))
(assert (= result x__split_fields))
(assert (= result1 x__split_fields1))
(assert (= result2 x__split_fields2))
(assert (= temp___253 x__split_fields3))
(assert (= temp___2531 x__split_fields4))
(assert (= temp___2532 x__split_fields5))
(assert (= x__split_fields6 x__split_fields3))
(assert (= x__split_fields7 x__split_fields4))
(assert (= x__split_fields8 x__split_fields5))
(assert (= x__split_fields9 x__split_fields3))
(assert (= x__split_fields10 x__split_fields4))
(assert (= x__split_fields11 x__split_fields5))
(assert (not (= (to_rep (select x__split_fields8 2)) 1)))
(check-sat)
(exit)
