(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_letter : int -> bool

logic is_letter__function_guard : bool, int -> prop

axiom is_letter__post_axiom : true

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom : true

type iso_646

predicate in_range4(x: int) = ((0 <= x) and (x <= 127))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : iso_646, iso_646 -> bool

logic dummy5 : iso_646

type iso_646__ref = { iso_646__content : iso_646
}

function iso_646__ref___projection(a: iso_646__ref) : iso_646 =
  (a).iso_646__content

logic name : (int,character) farray

logic name1 : t

logic attr__ATTRIBUTE_ADDRESS : int

type state_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : state_type, state_type -> bool

logic dummy6 : state_type

type state_type__ref = { state_type__content : state_type
}

function state_type__ref___projection(a: state_type__ref) : state_type =
  (a).state_type__content

type length_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : length_type, length_type -> bool

logic dummy7 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref___projection(a: length_type__ref) : length_type =
  (a).length_type__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic state : int

logic label_length : int

logic ch : int

logic i : int

logic names__is_domain_name__result : bool

logic temp___204 : int

logic temp___205 : int

logic temp___203 : int

logic temp___202 : int

logic temp___201 : int

logic temp___200 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : bool

logic o4 : int

logic o5 : int

logic o6 : bool

logic o7 : bool

logic o8 : bool

logic o9 : int

logic o10 : int

logic o11 : bool

logic o12 : bool

logic o13 : bool

logic o14 : int

logic i1 : int

logic o15 : int

logic o16 : character

logic o17 : int

logic o18 : bool

logic o19 : int

logic o20 : character

logic o21 : int

logic o22 : bool

logic ch1 : int

logic i2 : int

logic names__is_domain_name__result1 : bool

logic result : int

logic state1 : int

logic result1 : int

logic label_length1 : int

logic result2 : bool

logic names__is_domain_name__result2 : bool

logic result3 : int

logic i3 : int

logic state2 : int

logic label_length2 : int

logic ch2 : int

logic i4 : int

logic names__is_domain_name__result3 : bool

logic result4 : int

logic ch3 : int

logic result5 : bool

logic names__is_domain_name__result4 : bool

logic result6 : bool

logic result7 : bool

logic names__is_domain_name__result5 : bool

logic result8 : int

logic state3 : int

logic result9 : int

logic label_length3 : int

logic result10 : bool

logic names__is_domain_name__result6 : bool

logic result11 : int

logic state4 : int

logic result12 : int

logic label_length4 : int

logic result13 : int

logic state5 : int

logic result14 : int

logic label_length5 : int

logic result15 : bool

logic result16 : bool

logic names__is_domain_name__result7 : bool

logic result17 : int

logic label_length6 : int

logic names__is_domain_name__result8 : bool

logic names__is_domain_name__result9 : bool

logic result18 : int

logic label_length7 : int

logic result19 : bool

logic result20 : bool

logic names__is_domain_name__result10 : bool

logic result21 : int

logic state6 : int

logic result22 : int

logic label_length8 : int

logic names__is_domain_name__result11 : bool

logic names__is_domain_name__result12 : bool

logic names__is_domain_name__result13 : bool

logic names__is_domain_name__result14 : bool

logic result23 : int

logic i5 : int

logic names__is_domain_name__result15 : bool

logic names__is_domain_name__result16 : bool

logic state7 : int

logic label_length9 : int

logic ch4 : int

logic i6 : int

logic names__is_domain_name__result17 : bool

logic state8 : int

logic label_length10 : int

logic ch5 : int

logic i7 : int

logic names__is_domain_name__result18 : bool

logic state9 : int

logic label_length11 : int

logic ch6 : int

logic i8 : int

logic names__is_domain_name__result19 : bool

logic state10 : int

logic label_length12 : int

logic ch7 : int

logic i9 : int

logic names__is_domain_name__result20 : bool

logic state11 : int

logic label_length13 : int

logic ch8 : int

logic i10 : int

logic names__is_domain_name__result21 : bool

logic state12 : int

logic label_length14 : int

logic ch9 : int

logic i11 : int

logic names__is_domain_name__result22 : bool

logic result24 : bool

logic names__is_domain_name__result23 : bool

logic result25 : bool

logic names__is_domain_name__result24 : bool

logic names__is_domain_name__result25 : bool

logic names__is_domain_name__result26 : bool

logic names__is_domain_name__result27 : bool

logic names__is_domain_name__result28 : bool

logic names__is_domain_name__result29 : bool

logic names__is_domain_name__result30 : bool

logic result26 : bool

logic names__is_domain_name__result31 : bool

logic names__is_domain_name__result32 : bool

logic names__is_domain_name__result33 : bool

logic state13 : int

logic label_length15 : int

logic ch10 : int

logic i12 : int

logic names__is_domain_name__result34 : bool

logic state14 : int

logic label_length16 : int

logic ch11 : int

logic i13 : int

logic names__is_domain_name__result35 : bool

logic state15 : int

logic label_length17 : int

logic ch12 : int

logic i14 : int

logic names__is_domain_name__result36 : bool

logic state16 : int

logic label_length18 : int

logic ch13 : int

logic i15 : int

logic names__is_domain_name__result37 : bool

logic state17 : int

logic label_length19 : int

logic ch14 : int

logic i16 : int

logic names__is_domain_name__result38 : bool

logic state18 : int

logic label_length20 : int

logic ch15 : int

logic i17 : int

logic names__is_domain_name__result39 : bool

logic state19 : int

logic label_length21 : int

logic ch16 : int

logic i18 : int

logic names__is_domain_name__result40 : bool

logic state20 : int

logic label_length22 : int

logic ch17 : int

logic i19 : int

logic names__is_domain_name__result41 : bool

logic state21 : int

logic label_length23 : int

logic ch18 : int

logic i20 : int

logic names__is_domain_name__result42 : bool

logic state22 : int

logic label_length24 : int

logic ch19 : int

logic i21 : int

logic names__is_domain_name__result43 : bool

axiom H : dynamic_property(1, 2147483647, to_rep1(first(name1)),
  to_rep1(last(name1)))

axiom H1 : ((0 <= 2) -> in_range5(state))

axiom H2 : ((0 <= 255) -> in_range6(label_length))

axiom H3 : ((0 <= 255) -> in_range3(ch))

axiom H4 : (result = state)

axiom H5 : (state1 = 0)

axiom H6 : (result1 = label_length)

axiom H7 : (label_length1 = 0)

axiom H8 : (not (length({ elts = name; rt = name1 }) <  1))

axiom H9 : (not (255 <  length({ elts = name; rt = name1 })))

axiom H10 : (result3 = i)

axiom H11 : (i3 = to_rep1(first(name1)))

axiom H12 : (to_rep1(first(name1)) <= i3)

axiom H13 : (i3 <= to_rep1(last(name1)))

axiom H14 : (label_length2 <  ((i4 - to_rep1(first(name1))) + 1))

axiom H15 : ((((((to_rep1(first(name1)) <= to_rep1(last(name1))) ->
  dynamic_property1(to_rep1(first(name1)), to_rep1(last(name1)), i4)) and
  ((0 <= 2) -> in_range5(state2))) and ((0 <= 255) ->
  in_range6(label_length2))) and ((0 <= 255) -> in_range3(ch2))) and
  ((to_rep1(first(name1)) <= i4) and (i4 <= to_rep1(last(name1)))))

axiom H16 : (ch2 = result4)

axiom H17 : (ch3 = to_rep((name[i4])))

axiom H18 : in_range4(ch3)

axiom H19 : (names__is_domain_name__result4 = names__is_domain_name__result3)

axiom H20 : (state2 = 0)

axiom H21 : (o3 = is_letter(ch3))

axiom H22 : (((not (o3 = true)) -> (result6 = true)) and ((o3 = true) ->
  (result6 = false)))

axiom H23 : (not (result6 = true))

axiom H24 : (state2 = result8)

axiom H25 : (state3 = 1)

 (* File "names.ads", line 12, characters 0-0 *)
goal WP_parameter_def : in_range6((label_length2 + 1))
