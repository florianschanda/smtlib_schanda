(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, int -> (int,integer) farray

logic set : map, int, int, (int,integer) farray -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:(int,integer) farray [set(m, i, j, a)]. (get(set(m, i, j, a), i,
  j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:(int,integer) farray [get(set(m, i, j, a), i2, j2)| set(m, i, j,
  a), get(m, i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j,
  a), i2, j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, int, int -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq5 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def4 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq5(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  (((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) and
  (bool_eq4(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true)) or
  (not (((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))))))) ->
  (bool_eq5(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (bool_eq4(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true))))) ->
  (bool_eq5(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = false))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (bool_eq4(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true)))))))

logic dummy3 : map

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

logic user_eq3 : map, map -> bool

type map__ref2 = { map__content2 : (int,map) farray
}

logic slide2 : (int,map) farray, int, int -> (int,map) farray

axiom slide_eq1 :
  (forall a:(int,map) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,map) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,map) farray, int, int, (int,map) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,map) farray. forall a__first:int. forall a__last:int.
  forall b:(int,map) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. ((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and (bool_eq5((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true)) or
  (not ((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq5((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq5((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t16b__ref = { t16b__content : integer
}

function t16b__ref___projection(a: t16b__ref) : integer = (a).t16b__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,map) farray; rt : t
}

function to_array(a: us_t) : (int,map) farray = (a).elts

function of_array(a: (int,map) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,map) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,map) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,map) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,map) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,map) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,map) farray. (0 <= object__alignment2(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,map) farray

logic dummy6 : t

type t17b__ref = { t17b__content : us_t
}

function t17b__ref___projection(a: t17b__ref) : us_t = (a).t17b__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t18b__ref = { t18b__content : integer
}

function t18b__ref___projection(a: t18b__ref) : integer = (a).t18b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,map) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,map) farray = (a).elts1

function of_array1(a: (int,map) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,map) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,map) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,map) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,map) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,map) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,map) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,map) farray

logic dummy9 : t1

type t19b__ref = { t19b__content : us_t1
}

function t19b__ref___projection(a: t19b__ref) : us_t1 = (a).t19b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy10 : integer

type t24b__ref = { t24b__content : integer
}

function t24b__ref___projection(a: t24b__ref) : integer = (a).t24b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,map) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,map) farray = (a).elts2

function of_array2(a: (int,map) farray, f: int, l: int) : us_t2 = { elts2 =
  a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,map) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,map) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,map) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,map) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,map) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,map) farray. (0 <= object__alignment4(a)))

function bool_eq12(x: us_t2, y: us_t2) : bool = bool_eq6((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq9 : us_t2, us_t2 -> bool

logic dummy11 : (int,map) farray

logic dummy12 : t2

type t25b__ref = { t25b__content : us_t2
}

function t25b__ref___projection(a: t25b__ref) : us_t2 = (a).t25b__content

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy13 : integer

type t26b__ref = { t26b__content : integer
}

function t26b__ref___projection(a: t26b__ref) : integer = (a).t26b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first6(mk3(f, l))) = f) and (to_rep(last6(mk3(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,map) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,map) farray = (a).elts3

function of_array3(a: (int,map) farray, f: int, l: int) : us_t3 = { elts3 =
  a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep(first6((a).rt3))

function last7(a: us_t3) : int = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,map) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,map) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,map) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,map) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,map) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,map) farray. (0 <= object__alignment5(a)))

function bool_eq14(x: us_t3, y: us_t3) : bool = bool_eq6((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq11 : us_t3, us_t3 -> bool

logic dummy14 : (int,map) farray

logic dummy15 : t3

type t27b__ref = { t27b__content : us_t3
}

function t27b__ref___projection(a: t27b__ref) : us_t3 = (a).t27b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property8(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy16 : integer

type t32b__ref = { t32b__content : integer
}

function t32b__ref___projection(a: t32b__ref) : integer = (a).t32b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first8(mk4(f, l))) = f) and (to_rep(last8(mk4(f, l))) = l)))))

predicate dynamic_property9(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property8(range_first, range_last, low) and
  dynamic_property8(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,map) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,map) farray = (a).elts4

function of_array4(a: (int,map) farray, f: int, l: int) : us_t4 = { elts4 =
  a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep(first8((a).rt4))

function last9(a: us_t4) : int = to_rep(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,map) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,map) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,map) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,map) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,map) farray. (0 <= object__component__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,map) farray. (0 <= object__alignment6(a)))

function bool_eq16(x: us_t4, y: us_t4) : bool = bool_eq6((x).elts4,
  to_rep(first8((x).rt4)), to_rep(last8((x).rt4)), (y).elts4,
  to_rep(first8((y).rt4)), to_rep(last8((y).rt4)))

logic user_eq13 : us_t4, us_t4 -> bool

logic dummy17 : (int,map) farray

logic dummy18 : t4

type t33b__ref = { t33b__content : us_t4
}

function t33b__ref___projection(a: t33b__ref) : us_t4 = (a).t33b__content

predicate dynamic_property10(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy19 : integer

type t34b__ref = { t34b__content : integer
}

function t34b__ref___projection(a: t34b__ref) : integer = (a).t34b__content

type t5

logic first10 : t5 -> integer

logic last10 : t5 -> integer

logic mk5 : int, int -> t5

axiom mk_def5 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first10(mk5(f, l))) = f) and (to_rep(last10(mk5(f, l))) = l)))))

predicate dynamic_property11(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property10(range_first, range_last, low) and
  dynamic_property10(range_first, range_last, high)))))

type us_t5 = { elts5 : (int,map) farray; rt5 : t5
}

function to_array5(a: us_t5) : (int,map) farray = (a).elts5

function of_array5(a: (int,map) farray, f: int, l: int) : us_t5 = { elts5 =
  a; rt5 = mk5(f, l) }

function first11(a: us_t5) : int = to_rep(first10((a).rt5))

function last11(a: us_t5) : int = to_rep(last10((a).rt5))

logic length5 : us_t5 -> int

axiom length_def5 :
  (forall a:us_t5 [length5(a)]. (((first11(a) <= last11(a)) ->
  (length5(a) = ((last11(a) - first11(a)) + 1))) and
  ((not (first11(a) <= last11(a))) -> (length5(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,map) farray -> int

logic value__component__size7 : int

logic object__component__size7 : (int,map) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,map) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,map) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom7 : (0 <= value__component__size7)

axiom object__component__size_axiom7 :
  (forall a:(int,map) farray. (0 <= object__component__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,map) farray. (0 <= object__alignment7(a)))

function bool_eq18(x: us_t5, y: us_t5) : bool = bool_eq6((x).elts5,
  to_rep(first10((x).rt5)), to_rep(last10((x).rt5)), (y).elts5,
  to_rep(first10((y).rt5)), to_rep(last10((y).rt5)))

logic user_eq15 : us_t5, us_t5 -> bool

logic dummy20 : (int,map) farray

logic dummy21 : t5

type t35b__ref = { t35b__content : us_t5
}

function t35b__ref___projection(a: t35b__ref) : us_t5 = (a).t35b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property12(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq16 : integer, integer -> bool

logic dummy22 : integer

type t40b__ref = { t40b__content : integer
}

function t40b__ref___projection(a: t40b__ref) : integer = (a).t40b__content

type t6

logic first12 : t6 -> integer

logic last12 : t6 -> integer

logic mk6 : int, int -> t6

axiom mk_def6 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first12(mk6(f, l))) = f) and (to_rep(last12(mk6(f, l))) = l)))))

predicate dynamic_property13(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property12(range_first, range_last, low) and
  dynamic_property12(range_first, range_last, high)))))

type us_t6 = { elts6 : (int,map) farray; rt6 : t6
}

function to_array6(a: us_t6) : (int,map) farray = (a).elts6

function of_array6(a: (int,map) farray, f: int, l: int) : us_t6 = { elts6 =
  a; rt6 = mk6(f, l) }

function first13(a: us_t6) : int = to_rep(first12((a).rt6))

function last13(a: us_t6) : int = to_rep(last12((a).rt6))

logic length6 : us_t6 -> int

axiom length_def6 :
  (forall a:us_t6 [length6(a)]. (((first13(a) <= last13(a)) ->
  (length6(a) = ((last13(a) - first13(a)) + 1))) and
  ((not (first13(a) <= last13(a))) -> (length6(a) = 0))))

logic value__size8 : int

logic object__size8 : (int,map) farray -> int

logic value__component__size8 : int

logic object__component__size8 : (int,map) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,map) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,map) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom8 : (0 <= value__component__size8)

axiom object__component__size_axiom8 :
  (forall a:(int,map) farray. (0 <= object__component__size8(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,map) farray. (0 <= object__alignment8(a)))

function bool_eq20(x: us_t6, y: us_t6) : bool = bool_eq6((x).elts6,
  to_rep(first12((x).rt6)), to_rep(last12((x).rt6)), (y).elts6,
  to_rep(first12((y).rt6)), to_rep(last12((y).rt6)))

logic user_eq17 : us_t6, us_t6 -> bool

logic dummy23 : (int,map) farray

logic dummy24 : t6

type t41b__ref = { t41b__content : us_t6
}

function t41b__ref___projection(a: t41b__ref) : us_t6 = (a).t41b__content

predicate dynamic_property14(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq18 : integer, integer -> bool

logic dummy25 : integer

type t42b__ref = { t42b__content : integer
}

function t42b__ref___projection(a: t42b__ref) : integer = (a).t42b__content

type t7

logic first14 : t7 -> integer

logic last14 : t7 -> integer

logic mk7 : int, int -> t7

axiom mk_def7 :
  (forall f:int. forall l:int [mk7(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first14(mk7(f, l))) = f) and (to_rep(last14(mk7(f, l))) = l)))))

predicate dynamic_property15(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property14(range_first, range_last, low) and
  dynamic_property14(range_first, range_last, high)))))

type us_t7 = { elts7 : (int,map) farray; rt7 : t7
}

function to_array7(a: us_t7) : (int,map) farray = (a).elts7

function of_array7(a: (int,map) farray, f: int, l: int) : us_t7 = { elts7 =
  a; rt7 = mk7(f, l) }

function first15(a: us_t7) : int = to_rep(first14((a).rt7))

function last15(a: us_t7) : int = to_rep(last14((a).rt7))

logic length7 : us_t7 -> int

axiom length_def7 :
  (forall a:us_t7 [length7(a)]. (((first15(a) <= last15(a)) ->
  (length7(a) = ((last15(a) - first15(a)) + 1))) and
  ((not (first15(a) <= last15(a))) -> (length7(a) = 0))))

logic value__size9 : int

logic object__size9 : (int,map) farray -> int

logic value__component__size9 : int

logic object__component__size9 : (int,map) farray -> int

logic value__alignment9 : int

logic object__alignment9 : (int,map) farray -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,map) farray. (0 <= object__size9(a)))

axiom value__component__size_axiom9 : (0 <= value__component__size9)

axiom object__component__size_axiom9 :
  (forall a:(int,map) farray. (0 <= object__component__size9(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,map) farray. (0 <= object__alignment9(a)))

function bool_eq22(x: us_t7, y: us_t7) : bool = bool_eq6((x).elts7,
  to_rep(first14((x).rt7)), to_rep(last14((x).rt7)), (y).elts7,
  to_rep(first14((y).rt7)), to_rep(last14((y).rt7)))

logic user_eq19 : us_t7, us_t7 -> bool

logic dummy26 : (int,map) farray

logic dummy27 : t7

type t43b__ref = { t43b__content : us_t7
}

function t43b__ref___projection(a: t43b__ref) : us_t7 = (a).t43b__content

logic p__x__aggregate_def : map -> (int,map) farray

logic temp___253 : (int,integer) farray -> map

logic temp___258 : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___251:map.
  (forall temp___252:int.
  ((p__x__aggregate_def(temp___251)[temp___252]) = temp___251)))

axiom def_axiom1 :
  (forall temp___255:(int,integer) farray.
  (forall temp___256:int. forall temp___257:int. (get(temp___253(temp___255),
  temp___256, temp___257) = temp___255)))

axiom def_axiom2 :
  (forall temp___260:int. (in_range1(temp___260) ->
  (forall temp___261:int.
  (to_rep((temp___258(temp___260)[temp___261])) = temp___260))))

 (* File "p.adb", line 8, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,map) farray. forall i3:int. forall o:integer.
  forall o1:(int,integer) farray. forall o2:map. forall o3:(int,map) farray.
  forall result:(int,map) farray. forall x1:(int,map) farray.
  forall result1:int. forall i31:int. forall x2:(int,map) farray.
  forall i32:int. forall i21:int. forall result2:int. forall i211:int.
  forall x3:(int,map) farray. forall i212:int. forall i22:int.
  forall result3:int. forall i221:int. forall x4:(int,map) farray.
  forall i222:int. forall i1:int. forall result4:int. forall i11:int.
  forall result5:(int,map) farray. forall x5:(int,map) farray.
  forall x6:(int,map) farray. forall i12:int. (((result = x) and
  (x1 = p__x__aggregate_def(temp___253(temp___258(0))))) ->
  (((result1 = i3) and (i31 = 1)) -> (((1 <= i31) and (i31 <= 3)) ->
  ((bool_eq6(x2, to_rep(first(mk((i32 + 1), 3))), to_rep(last(mk((i32 + 1),
  3))), x1, to_rep(first2(mk1((i32 + 1), 3))), to_rep(last2(mk1((i32 + 1),
  3)))) = true) ->
  ((((forall temp___329:int. (((1 <= temp___329) and (temp___329 <= 3)) ->
     ((i32 <= temp___329) -> ((x2[temp___329]) = (x1[temp___329]))))) and
  ((1 <= 3) -> in_range2(i32))) and ((1 <= i32) and (i32 <= 3))) ->
  (((i21 = result2) and (i211 = 1)) -> (((1 <= i211) and (i211 <= 3)) ->
  ((bool_eq6(x3, to_rep(first4(mk2((i32 + 1), 3))),
  to_rep(last4(mk2((i32 + 1), 3))), x2, to_rep(first6(mk3((i32 + 1), 3))),
  to_rep(last6(mk3((i32 + 1), 3)))) = true) ->
  ((((forall temp___308:int. (((1 <= temp___308) and (temp___308 <= 3)) ->
     (((not (i32 = temp___308)) and ((x3[temp___308]) = (x2[temp___308]))) or
     ((i32 = temp___308) and
     (forall temp___309:int. forall temp___310:int. ((((1 <= temp___309) and
     (temp___309 <= 3)) and ((1 <= temp___310) and (temp___310 <= 3))) ->
     ((i212 <= temp___309) -> (get((x3[temp___308]), temp___309,
     temp___310) = get((x2[temp___308]), temp___309, temp___310))))))))) and
  ((1 <= 3) -> in_range2(i212))) and ((1 <= i212) and (i212 <= 3))) ->
  (((i22 = result3) and (i221 = 1)) -> (((1 <= i221) and (i221 <= 3)) ->
  ((bool_eq6(x4, to_rep(first8(mk4((i32 + 1), 3))),
  to_rep(last8(mk4((i32 + 1), 3))), x3, to_rep(first10(mk5((i32 + 1), 3))),
  to_rep(last10(mk5((i32 + 1), 3)))) = true) ->
  ((((forall temp___287:int. (((1 <= temp___287) and (temp___287 <= 3)) ->
     (((not (i32 = temp___287)) and ((x4[temp___287]) = (x3[temp___287]))) or
     ((i32 = temp___287) and
     (forall temp___288:int. forall temp___289:int. ((((1 <= temp___288) and
     (temp___288 <= 3)) and ((1 <= temp___289) and (temp___289 <= 3))) ->
     (((i222 <= temp___289) or (not (i212 = temp___288))) ->
     (get((x4[temp___287]), temp___288, temp___289) = get((x3[temp___287]),
     temp___288, temp___289))))))))) and
  ((1 <= 3) -> in_range2(i222))) and ((1 <= i222) and (i222 <= 3))) ->
  (((i1 = result4) and (i11 = 1)) -> (((1 <= i11) and (i11 <= 3)) ->
  ((((((to_rep(o) = 1) and (o1 = (get((x4[i32]), i212, i222)[i11 <- o]))) and
  (o2 = set((x4[i32]), i212, i222, o1))) and (o3 = (x4[i32 <- o2]))) and
  ((x4 = result5) and (x5 = o3))) -> ((bool_eq6(x6,
  to_rep(first12(mk6((i32 + 1), 3))), to_rep(last12(mk6((i32 + 1), 3))), x4,
  to_rep(first14(mk7((i32 + 1), 3))), to_rep(last14(mk7((i32 + 1),
  3)))) = true) ->
  ((((forall temp___266:int. (((1 <= temp___266) and (temp___266 <= 3)) ->
     (((not (i32 = temp___266)) and ((x6[temp___266]) = (x4[temp___266]))) or
     ((i32 = temp___266) and
     (forall temp___267:int. forall temp___268:int. ((((1 <= temp___267) and
     (temp___267 <= 3)) and ((1 <= temp___268) and (temp___268 <= 3))) ->
     ((((not (i222 = temp___268)) or (not (i212 = temp___267))) and
     (get((x6[temp___266]), temp___267, temp___268) = get((x4[temp___266]),
     temp___267, temp___268))) or ((not ((not (i222 = temp___268)) or
     (not (i212 = temp___267)))) and
     (forall temp___269:int. (((1 <= temp___269) and (temp___269 <= 3)) ->
     ((i12 <  temp___269) -> ((get((x6[temp___266]), temp___267,
     temp___268)[temp___269]) = (get((x4[temp___266]), temp___267,
     temp___268)[temp___269]))))))))))))) and
  ((1 <= 3) -> in_range2(i12))) and ((1 <= i12) and (i12 <= 3))) ->
  (((i32 + 1) <= 3) -> (1 <= (i32 + 1))))))))))))))))))))))
