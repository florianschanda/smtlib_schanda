(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range1(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : et1, et1 -> bool

logic dummy2 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy3 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> (int,(int,et1) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,et1) farray, int -> (int,(int,et1) farray) farray

axiom singleton_def1 :
  (forall v:(int,et1) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq5 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq4((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq4((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq4((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___866 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom :
  (forall temp___868:(int,(int,et1) farray) farray.
  (forall temp___869:int. forall temp___871:int.
  (forall temp___870:(int,et1) farray. forall temp___872:(int,et1) farray.
  (forall temp___873:int. (((temp___873 = temp___871) ->
  ((temp___866(temp___868, temp___869, temp___870, temp___871,
  temp___872)[temp___873]) = temp___872)) and
  ((not (temp___873 = temp___871)) -> (((temp___873 = temp___869) ->
  ((temp___866(temp___868, temp___869, temp___870, temp___871,
  temp___872)[temp___873]) = temp___870)) and
  ((not (temp___873 = temp___869)) -> ((temp___866(temp___868, temp___869,
  temp___870, temp___871,
  temp___872)[temp___873]) = (temp___868[temp___873]))))))))))

logic temp___874 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom1 :
  (forall temp___876:(int,et1) farray.
  (forall temp___877:int. forall temp___878:int.
  (forall temp___879:int. (((temp___879 = temp___877) ->
  ((temp___874(temp___876, temp___877,
  temp___878)[temp___879]) = of_rep(temp___878))) and
  ((not (temp___879 = temp___877)) -> ((temp___874(temp___876, temp___877,
  temp___878)[temp___879]) = (temp___876[temp___879])))))))

logic temp___881 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom2 :
  (forall temp___883:(int,et1) farray.
  (forall temp___884:int. forall temp___885:int.
  (forall temp___886:int. (((temp___886 = temp___884) ->
  ((temp___881(temp___883, temp___884,
  temp___885)[temp___886]) = of_rep(temp___885))) and
  ((not (temp___886 = temp___884)) -> ((temp___881(temp___883, temp___884,
  temp___885)[temp___886]) = (temp___883[temp___886])))))))

logic temp___889 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom3 :
  (forall temp___891:(int,(int,et1) farray) farray.
  (forall temp___892:int. forall temp___894:int.
  (forall temp___893:(int,et1) farray. forall temp___895:(int,et1) farray.
  (forall temp___896:int. (((temp___896 = temp___894) ->
  ((temp___889(temp___891, temp___892, temp___893, temp___894,
  temp___895)[temp___896]) = temp___895)) and
  ((not (temp___896 = temp___894)) -> (((temp___896 = temp___892) ->
  ((temp___889(temp___891, temp___892, temp___893, temp___894,
  temp___895)[temp___896]) = temp___893)) and
  ((not (temp___896 = temp___892)) -> ((temp___889(temp___891, temp___892,
  temp___893, temp___894,
  temp___895)[temp___896]) = (temp___891[temp___896]))))))))))

logic temp___897 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom4 :
  (forall temp___899:(int,et1) farray.
  (forall temp___900:int. forall temp___901:int.
  (forall temp___902:int. (((temp___902 = temp___900) ->
  ((temp___897(temp___899, temp___900,
  temp___901)[temp___902]) = of_rep(temp___901))) and
  ((not (temp___902 = temp___900)) -> ((temp___897(temp___899, temp___900,
  temp___901)[temp___902]) = (temp___899[temp___902])))))))

logic temp___904 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom5 :
  (forall temp___906:(int,et1) farray.
  (forall temp___907:int. forall temp___908:int.
  (forall temp___909:int. (((temp___909 = temp___907) ->
  ((temp___904(temp___906, temp___907,
  temp___908)[temp___909]) = of_rep(temp___908))) and
  ((not (temp___909 = temp___907)) -> ((temp___904(temp___906, temp___907,
  temp___908)[temp___909]) = (temp___906[temp___909])))))))

logic temp___912 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom6 :
  (forall temp___914:(int,(int,et1) farray) farray.
  (forall temp___915:int. forall temp___917:int.
  (forall temp___916:(int,et1) farray. forall temp___918:(int,et1) farray.
  (forall temp___919:int. (((temp___919 = temp___917) ->
  ((temp___912(temp___914, temp___915, temp___916, temp___917,
  temp___918)[temp___919]) = temp___918)) and
  ((not (temp___919 = temp___917)) -> (((temp___919 = temp___915) ->
  ((temp___912(temp___914, temp___915, temp___916, temp___917,
  temp___918)[temp___919]) = temp___916)) and
  ((not (temp___919 = temp___915)) -> ((temp___912(temp___914, temp___915,
  temp___916, temp___917,
  temp___918)[temp___919]) = (temp___914[temp___919]))))))))))

logic temp___920 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom7 :
  (forall temp___922:(int,et1) farray.
  (forall temp___923:int. forall temp___924:int.
  (forall temp___925:int. (((temp___925 = temp___923) ->
  ((temp___920(temp___922, temp___923,
  temp___924)[temp___925]) = of_rep(temp___924))) and
  ((not (temp___925 = temp___923)) -> ((temp___920(temp___922, temp___923,
  temp___924)[temp___925]) = (temp___922[temp___925])))))))

logic temp___927 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom8 :
  (forall temp___929:(int,et1) farray.
  (forall temp___930:int. forall temp___931:int.
  (forall temp___932:int. (((temp___932 = temp___930) ->
  ((temp___927(temp___929, temp___930,
  temp___931)[temp___932]) = of_rep(temp___931))) and
  ((not (temp___932 = temp___930)) -> ((temp___927(temp___929, temp___930,
  temp___931)[temp___932]) = (temp___929[temp___932])))))))

logic temp___935 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom9 :
  (forall temp___937:(int,(int,et1) farray) farray.
  (forall temp___938:int. forall temp___940:int.
  (forall temp___939:(int,et1) farray. forall temp___941:(int,et1) farray.
  (forall temp___942:int. (((temp___942 = temp___940) ->
  ((temp___935(temp___937, temp___938, temp___939, temp___940,
  temp___941)[temp___942]) = temp___941)) and
  ((not (temp___942 = temp___940)) -> (((temp___942 = temp___938) ->
  ((temp___935(temp___937, temp___938, temp___939, temp___940,
  temp___941)[temp___942]) = temp___939)) and
  ((not (temp___942 = temp___938)) -> ((temp___935(temp___937, temp___938,
  temp___939, temp___940,
  temp___941)[temp___942]) = (temp___937[temp___942]))))))))))

logic temp___943 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom10 :
  (forall temp___945:(int,et1) farray.
  (forall temp___946:int. forall temp___947:int.
  (forall temp___948:int. (((temp___948 = temp___946) ->
  ((temp___943(temp___945, temp___946,
  temp___947)[temp___948]) = of_rep(temp___947))) and
  ((not (temp___948 = temp___946)) -> ((temp___943(temp___945, temp___946,
  temp___947)[temp___948]) = (temp___945[temp___948])))))))

logic temp___950 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom11 :
  (forall temp___952:(int,et1) farray.
  (forall temp___953:int. forall temp___954:int.
  (forall temp___955:int. (((temp___955 = temp___953) ->
  ((temp___950(temp___952, temp___953,
  temp___954)[temp___955]) = of_rep(temp___954))) and
  ((not (temp___955 = temp___953)) -> ((temp___950(temp___952, temp___953,
  temp___954)[temp___955]) = (temp___952[temp___955])))))))

logic a : (int,(int,et1) farray) farray

logic j_next : int

logic f : int

logic o : et1

logic o1 : (int,et1) farray

logic o2 : (int,(int,et1) farray) farray

logic o3 : int

logic o4 : int

logic o5 : et1

logic o6 : (int,et1) farray

logic o7 : (int,(int,et1) farray) farray

logic o8 : int

logic o9 : int

logic o10 : (int,et1) farray

logic o11 : (int,et1) farray

logic o12 : int

logic temp___4589 : (int,(int,et1) farray) farray

logic o13 : int

logic o14 : int

logic o15 : (int,et1) farray

logic o16 : (int,et1) farray

logic o17 : int

logic temp___4584 : (int,(int,et1) farray) farray

logic result : (int,(int,et1) farray) farray

logic a1 : (int,(int,et1) farray) farray

logic result1 : int

logic j_next1 : int

logic result2 : int

logic j_next2 : int

logic result3 : int

logic f1 : int

logic result4 : int

logic f2 : int

logic result5 : (int,(int,et1) farray) farray

logic a2 : (int,(int,et1) farray) farray

logic a3 : (int,(int,et1) farray) farray

logic j_next3 : int

logic f3 : int

logic a4 : (int,(int,et1) farray) farray

logic j_next4 : int

logic f4 : int

logic result6 : bool

logic result7 : bool

axiom H : in_range(i)

axiom H1 : in_range1(j)

axiom H2 : in_range2(e)

axiom H3 : ((5 <= 50) -> in_range1(j_next))

axiom H4 : ((0 <= 99) -> in_range2(f))

axiom H5 : (to_rep(o) = e)

axiom H6 : (o1 = ((a[j])[i <- o]))

axiom H7 : (o2 = (a[j <- o1]))

axiom H8 : (result = a)

axiom H9 : (a1 = o2)

axiom H10 : ((j = 50) -> (result1 = j_next))

axiom H11 : ((j = 50) -> (j_next1 = 5))

axiom H12 : ((not (j = 50)) -> ((o3 = (j + 1)) and in_range1((j + 1))))

axiom H13 : ((not (j = 50)) -> (result2 = j_next))

axiom H14 : ((not (j = 50)) -> (j_next2 = o3))

axiom H15 : ((not (j = 50)) -> (j_next1 = j_next2))

axiom H16 : ((e = 0) -> (result3 = f))

axiom H17 : ((e = 0) -> (f1 = 99))

axiom H18 : ((not (e = 0)) -> ((o4 = (e - 1)) and in_range2((e - 1))))

axiom H19 : ((not (e = 0)) -> (result4 = f))

axiom H20 : ((not (e = 0)) -> (f2 = o4))

axiom H21 : ((not (e = 0)) -> (f1 = f2))

axiom H22 : (to_rep(o5) = f1)

axiom H23 : (o6 = ((a1[j_next1])[i <- o5]))

axiom H24 : (o7 = (a1[j_next1 <- o6]))

axiom H25 : (a1 = result5)

axiom H26 : (a2 = o7)

axiom H27 : (f1 = f3)

axiom H28 : (j_next1 = j_next3)

axiom H29 : (a2 = a3)

axiom H30 : (f4 = f1)

axiom H31 : (j_next4 = j_next1)

axiom H32 : (a4 = a2)

axiom H33 : (j <  50)

axiom H34 : (0 <  e)

axiom H35 : ((o14 = (e - 1)) and in_range2((e - 1)))

axiom H36 : ((5 <= (j + 1)) and ((j + 1) <= 50))

axiom H37 : (o13 = (j + 1))

axiom H38 : (o15 = (a[o13]))

axiom H39 : (o16 = temp___881(o15, i, o14))

 (* File "ar.ads", line 319, characters 0-0 *)
goal WP_parameter_def : in_range1((j + 1))
