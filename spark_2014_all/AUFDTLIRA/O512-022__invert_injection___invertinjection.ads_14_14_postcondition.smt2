(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort element 0)
(declare-fun elementqtint (element) Int)
(assert (forall ((i element)) (and (<= 1 (elementqtint i)) (<= (elementqtint i) 100))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (element element) Bool)
(declare-const dummy element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(define-fun to_rep ((x element)) Int (elementqtint x))
(declare-fun of_rep (Int) element)
(assert (forall ((x element)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x element)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))
(assert (forall ((a (Array Int element))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int) (b (Array Int element)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const a (Array Int element))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 100)) (in_range1 temp___expr_159)))
(declare-const b (Array Int element))
(declare-const i Int)
(declare-const temp___179 Int)
(declare-const temp___177 (Array Int element))
(declare-const o element)
(declare-const o1 (Array Int element))
(declare-const b1 (Array Int element))
(declare-const result Int)
(declare-const i1 Int)
(declare-const b2 (Array Int element))
(declare-const i2 Int)
(declare-const result1 (Array Int element))
(declare-const b3 (Array Int element))
(declare-const b4 (Array Int element))
(declare-const i3 Int)
(declare-const b5 (Array Int element))
(declare-const i4 Int)
(declare-const b6 (Array Int element))
(declare-const i5 Int)
(declare-const b7 (Array Int element))
(declare-const i6 Int)
(declare-const b8 (Array Int element))
(declare-const i7 Int)
(declare-const b9 (Array Int element))
(declare-const i8 Int)
(define-fun i9 () int__ref (mk_int__ref i5))
(define-fun b10 () map__ref (mk_map__ref b6))
(assert (and (forall ((i10 Int)) (=> (and (<= 1 i10) (<= i10 100)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (= (to_rep (select a i10)) (to_rep (select a j))) (= i10 j)))))) (forall ((i10 Int)) (=> (and (<= 1 i10) (<= i10 100)) (not (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (not (= (to_rep (select a j)) i10)))))))))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___179 i1)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___177 b)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (= (to_rep (select b2 (to_rep (select a j)))) j)))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (and (=> (<= 1 100) (in_range1 i2)) (and (<= 1 i2) (<= i2 100)))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= (to_rep o) i2)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= o1 (store b2 (to_rep (select a i2)) o))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= b2 result1)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= b3 o1)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 100)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= b3 b4)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= b5 b3)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i9 (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= b10 (mk_map__ref b4))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= b7 b5)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= b10 (mk_map__ref b))))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= b7 b1)))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (= (to_rep (select b6 (to_rep (select a j)))) j))))
(assert (= (mk_int__ref i7) i9))
(assert (= (mk_map__ref b8) b10))
(assert (= i8 i6))
(assert (= b9 b7))
(declare-const i10 Int)
(assert (<= 1 i10))
(assert (<= i10 100))
(declare-const j Int)
(assert (<= 1 j))
(assert (<= j 100))
(assert (= (to_rep (select b8 i10)) (to_rep (select b8 j))))
(assert (not (= i10 j)))
(check-sat)
(exit)
