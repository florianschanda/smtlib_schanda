(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort name_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (name_t name_t) Bool)
(declare-const dummy name_t)
(declare-datatypes () ((name_t__ref (mk_name_t__ref (name_t__content name_t)))))
(define-fun name_t__ref___projection ((a name_t__ref)) name_t (name_t__content a))
(declare-fun to_rep (name_t) Int)
(declare-fun of_rep (Int) name_t)
(assert (forall ((x name_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x name_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__model__uml_state__name_data name_t)))))
(define-fun us_split_fields_Name_Data__projection ((a us_split_fields)) name_t (rec__model__uml_state__name_data a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__model__uml_state__name_data (us_split_fields1 a))) (to_rep (rec__model__uml_state__name_data (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const model__uml_state__name_data__first__bit Int)
(declare-const model__uml_state__name_data__last__bit Int)
(declare-const model__uml_state__name_data__position Int)
(assert (<= 0 model__uml_state__name_data__first__bit))
(assert (< model__uml_state__name_data__first__bit model__uml_state__name_data__last__bit))
(assert (<= 0 model__uml_state__name_data__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((uml_state__ref (mk_uml_state__ref (uml_state__content us_rep)))))
(define-fun uml_state__ref___projection ((a uml_state__ref)) us_rep (uml_state__content a))
(declare-sort uml_state_access 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (uml_state_access uml_state_access) Bool)
(declare-const dummy2 uml_state_access)
(declare-datatypes () ((uml_state_access__ref (mk_uml_state_access__ref (uml_state_access__content uml_state_access)))))
(define-fun uml_state_access__ref___projection ((a uml_state_access__ref)) uml_state_access (uml_state_access__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep Int) (Array Int us_rep))
(assert (forall ((v us_rep)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-fun name (us_rep) Int)
(declare-fun name__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_145 Int) (temp___is_init_142 Bool) (temp___skip_constant_143 Bool) (temp___do_toplevel_144 Bool)) Bool (=> (or (= temp___is_init_142 true) (<= 0 2147483647)) (in_range1 temp___expr_145)))
(assert (forall ((self us_rep)) (! (dynamic_invariant (name self) true false true) :pattern ((name self)))))
(assert (forall ((self us_rep)) (! (= (name self) (to_rep (rec__model__uml_state__name_data (us_split_fields1 self)))) :pattern ((name self)))))
(declare-fun to_rep1 (uml_state_access) Int)
(declare-fun of_rep1 (Int) uml_state_access)
(assert (forall ((x uml_state_access)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x uml_state_access)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__model__uml_transition__from_data uml_state_access) (rec__model__uml_transition__to_data uml_state_access)))))
(define-fun us_split_fields_From_Data__projection ((a us_split_fields2)) uml_state_access (rec__model__uml_transition__from_data a))
(define-fun us_split_fields_To_Data__projection ((a us_split_fields2)) uml_state_access (rec__model__uml_transition__to_data a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__model__uml_transition__from_data (us_split_fields3 a))) (to_rep1 (rec__model__uml_transition__from_data (us_split_fields3 b)))) (= (to_rep1 (rec__model__uml_transition__to_data (us_split_fields3 a))) (to_rep1 (rec__model__uml_transition__to_data (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const model__uml_transition__from_data__first__bit Int)
(declare-const model__uml_transition__from_data__last__bit Int)
(declare-const model__uml_transition__from_data__position Int)
(assert (<= 0 model__uml_transition__from_data__first__bit))
(assert (< model__uml_transition__from_data__first__bit model__uml_transition__from_data__last__bit))
(assert (<= 0 model__uml_transition__from_data__position))
(declare-const model__uml_transition__to_data__first__bit Int)
(declare-const model__uml_transition__to_data__last__bit Int)
(declare-const model__uml_transition__to_data__position Int)
(assert (<= 0 model__uml_transition__to_data__first__bit))
(assert (< model__uml_transition__to_data__first__bit model__uml_transition__to_data__last__bit))
(assert (<= 0 model__uml_transition__to_data__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((uml_transition__ref (mk_uml_transition__ref (uml_transition__content us_rep1)))))
(define-fun uml_transition__ref___projection ((a uml_transition__ref)) us_rep1 (uml_transition__content a))
(declare-sort uml_transition_access 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (uml_transition_access uml_transition_access) Bool)
(declare-const dummy4 uml_transition_access)
(declare-datatypes () ((uml_transition_access__ref (mk_uml_transition_access__ref (uml_transition_access__content uml_transition_access)))))
(define-fun uml_transition_access__ref___projection ((a uml_transition_access__ref)) uml_transition_access (uml_transition_access__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))
(assert (forall ((v us_rep1)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq2 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq2 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true))))))))
(declare-fun from (us_rep1) Int)
(declare-fun from__function_guard (Int us_rep1) Bool)
(define-fun dynamic_invariant1 ((temp___expr_158 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 100)) (in_range2 temp___expr_158)))
(assert (forall ((self us_rep1)) (! (dynamic_invariant1 (from self) true false true) :pattern ((from self)))))
(assert (forall ((self us_rep1)) (! (= (from self) (to_rep1 (rec__model__uml_transition__from_data (us_split_fields3 self)))) :pattern ((from self)))))
(declare-fun to__ (us_rep1) Int)
(declare-fun to____function_guard (Int us_rep1) Bool)
(assert (forall ((self us_rep1)) (! (dynamic_invariant1 (to__ self) true false true) :pattern ((to__ self)))))
(assert (forall ((self us_rep1)) (! (= (to__ self) (to_rep1 (rec__model__uml_transition__to_data (us_split_fields3 self)))) :pattern ((to__ self)))))
(declare-const dummy5 (Array Int us_rep))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int us_rep)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-const dummy6 (Array Int us_rep1))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep1)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int us_rep1)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep1)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq6 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__model__uml_state_machine__owned_state_data (Array Int us_rep)) (rec__model__uml_state_machine__owned_transition_data (Array Int us_rep1))))))
(define-fun us_split_fields_Owned_State_Data__projection ((a us_split_fields4)) (Array Int us_rep) (rec__model__uml_state_machine__owned_state_data a))
(define-fun us_split_fields_Owned_Transition_Data__projection ((a us_split_fields4)) (Array Int us_rep1) (rec__model__uml_state_machine__owned_transition_data a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq4 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (bool_eq1 (rec__model__uml_state_machine__owned_state_data (us_split_fields5 a)) 0 100 (rec__model__uml_state_machine__owned_state_data (us_split_fields5 b)) 0 100) true) (= (bool_eq3 (rec__model__uml_state_machine__owned_transition_data (us_split_fields5 a)) 0 100 (rec__model__uml_state_machine__owned_transition_data (us_split_fields5 b)) 0 100) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const model__uml_state_machine__owned_state_data__first__bit Int)
(declare-const model__uml_state_machine__owned_state_data__last__bit Int)
(declare-const model__uml_state_machine__owned_state_data__position Int)
(assert (<= 0 model__uml_state_machine__owned_state_data__first__bit))
(assert (< model__uml_state_machine__owned_state_data__first__bit model__uml_state_machine__owned_state_data__last__bit))
(assert (<= 0 model__uml_state_machine__owned_state_data__position))
(declare-const model__uml_state_machine__owned_transition_data__first__bit Int)
(declare-const model__uml_state_machine__owned_transition_data__last__bit Int)
(declare-const model__uml_state_machine__owned_transition_data__position Int)
(assert (<= 0 model__uml_state_machine__owned_transition_data__first__bit))
(assert (< model__uml_state_machine__owned_transition_data__first__bit model__uml_state_machine__owned_transition_data__last__bit))
(assert (<= 0 model__uml_state_machine__owned_transition_data__position))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((uml_state_machine__ref (mk_uml_state_machine__ref (uml_state_machine__content us_rep2)))))
(define-fun uml_state_machine__ref___projection ((a uml_state_machine__ref)) us_rep2 (uml_state_machine__content a))
(declare-fun owned_state (us_rep2) (Array Int us_rep))
(declare-fun owned_state__function_guard ((Array Int us_rep) us_rep2) Bool)
(assert true)
(assert (forall ((self us_rep2)) (! (= (owned_state self) (rec__model__uml_state_machine__owned_state_data (us_split_fields5 self))) :pattern ((owned_state self)))))
(declare-fun owned_transition (us_rep2) (Array Int us_rep1))
(declare-fun owned_transition__function_guard ((Array Int us_rep1) us_rep2) Bool)
(assert true)
(assert (forall ((self us_rep2)) (! (= (owned_transition self) (rec__model__uml_state_machine__owned_transition_data (us_split_fields5 self))) :pattern ((owned_transition self)))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__model__uml_action__name_data name_t)))))
(define-fun us_split_fields_Name_Data__2__projection ((a us_split_fields6)) name_t (rec__model__uml_action__name_data a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (= (to_rep (rec__model__uml_action__name_data (us_split_fields7 a))) (to_rep (rec__model__uml_action__name_data (us_split_fields7 b)))) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep3) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep3) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))
(declare-const model__uml_action__name_data__first__bit Int)
(declare-const model__uml_action__name_data__last__bit Int)
(declare-const model__uml_action__name_data__position Int)
(assert (<= 0 model__uml_action__name_data__first__bit))
(assert (< model__uml_action__name_data__first__bit model__uml_action__name_data__last__bit))
(assert (<= 0 model__uml_action__name_data__position))
(declare-fun user_eq8 (us_rep3 us_rep3) Bool)
(declare-const dummy8 us_rep3)
(declare-datatypes () ((uml_action__ref (mk_uml_action__ref (uml_action__content us_rep3)))))
(define-fun uml_action__ref___projection ((a uml_action__ref)) us_rep3 (uml_action__content a))
(declare-const no_uml_action us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort uml_action_access 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq9 (uml_action_access uml_action_access) Bool)
(declare-const dummy9 uml_action_access)
(declare-datatypes () ((uml_action_access__ref (mk_uml_action_access__ref (uml_action_access__content uml_action_access)))))
(define-fun uml_action_access__ref___projection ((a uml_action_access__ref)) uml_action_access (uml_action_access__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep3))))))
(declare-fun slide2 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 (us_rep3 Int) (Array Int us_rep3))
(assert (forall ((v us_rep3)) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq6 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq5 (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq5 (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))) true))))))))
(declare-const no_uml_action_vector (Array Int us_rep3))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun model__no_uml_action_vector__aggregate_def (us_rep3) (Array Int us_rep3))
(assert (forall ((temp___136 us_rep3)) (forall ((temp___137 Int)) (= (select (model__no_uml_action_vector__aggregate_def temp___136) temp___137) temp___136))))
(declare-fun name__2 (us_rep3) Int)
(declare-fun name__2__function_guard (Int us_rep3) Bool)
(assert (forall ((self us_rep3)) (! (dynamic_invariant (name__2 self) true false true) :pattern ((name__2 self)))))
(assert (forall ((self us_rep3)) (! (= (name__2 self) (to_rep (rec__model__uml_action__name_data (us_split_fields7 self)))) :pattern ((name__2 self)))))
(declare-fun to_rep2 (uml_action_access) Int)
(declare-fun of_rep2 (Int) uml_action_access)
(assert (forall ((x uml_action_access)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x uml_action_access)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__model__uml_control_flow__from_data uml_action_access) (rec__model__uml_control_flow__to_data uml_action_access)))))
(define-fun us_split_fields_From_Data__2__projection ((a us_split_fields8)) uml_action_access (rec__model__uml_control_flow__from_data a))
(define-fun us_split_fields_To_Data__2__projection ((a us_split_fields8)) uml_action_access (rec__model__uml_control_flow__to_data a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___5__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq7 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep2 (rec__model__uml_control_flow__from_data (us_split_fields9 a))) (to_rep2 (rec__model__uml_control_flow__from_data (us_split_fields9 b)))) (= (to_rep2 (rec__model__uml_control_flow__to_data (us_split_fields9 a))) (to_rep2 (rec__model__uml_control_flow__to_data (us_split_fields9 b))))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep4) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep4) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))
(declare-const model__uml_control_flow__from_data__first__bit Int)
(declare-const model__uml_control_flow__from_data__last__bit Int)
(declare-const model__uml_control_flow__from_data__position Int)
(assert (<= 0 model__uml_control_flow__from_data__first__bit))
(assert (< model__uml_control_flow__from_data__first__bit model__uml_control_flow__from_data__last__bit))
(assert (<= 0 model__uml_control_flow__from_data__position))
(declare-const model__uml_control_flow__to_data__first__bit Int)
(declare-const model__uml_control_flow__to_data__last__bit Int)
(declare-const model__uml_control_flow__to_data__position Int)
(assert (<= 0 model__uml_control_flow__to_data__first__bit))
(assert (< model__uml_control_flow__to_data__first__bit model__uml_control_flow__to_data__last__bit))
(assert (<= 0 model__uml_control_flow__to_data__position))
(declare-fun user_eq10 (us_rep4 us_rep4) Bool)
(declare-const dummy10 us_rep4)
(declare-datatypes () ((uml_control_flow__ref (mk_uml_control_flow__ref (uml_control_flow__content us_rep4)))))
(define-fun uml_control_flow__ref___projection ((a uml_control_flow__ref)) us_rep4 (uml_control_flow__content a))
(declare-const no_uml_control_flow us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort uml_control_flow_access 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq11 (uml_control_flow_access uml_control_flow_access) Bool)
(declare-const dummy11 uml_control_flow_access)
(declare-datatypes () ((uml_control_flow_access__ref (mk_uml_control_flow_access__ref (uml_control_flow_access__content uml_control_flow_access)))))
(define-fun uml_control_flow_access__ref___projection ((a uml_control_flow_access__ref)) uml_control_flow_access (uml_control_flow_access__content a))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep4))))))
(declare-fun slide3 ((Array Int us_rep4) Int Int) (Array Int us_rep4))
(assert (forall ((a (Array Int us_rep4))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int us_rep4))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(declare-fun concat4 ((Array Int us_rep4) Int Int (Array Int us_rep4) Int Int) (Array Int us_rep4))
(assert (forall ((a (Array Int us_rep4)) (b (Array Int us_rep4))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat4 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton4 (us_rep4 Int) (Array Int us_rep4))
(assert (forall ((v us_rep4)) (forall ((i Int)) (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i))))))
(define-fun bool_eq8 ((a (Array Int us_rep4)) (a__first Int) (a__last Int) (b (Array Int us_rep4)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_138 Int)) (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last)) (= (bool_eq7 (select a temp___idx_138) (select b (+ (- b__first a__first) temp___idx_138))) true)))) true false))
(assert (forall ((a (Array Int us_rep4)) (b (Array Int us_rep4))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq8 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_138 Int)) (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last)) (= (bool_eq7 (select a temp___idx_138) (select b (+ (- b__first a__first) temp___idx_138))) true))))))))
(declare-const no_uml_control_flow_vector (Array Int us_rep4))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun model__no_uml_control_flow_vector__aggregate_def (us_rep4) (Array Int us_rep4))
(assert (forall ((temp___140 us_rep4)) (forall ((temp___141 Int)) (= (select (model__no_uml_control_flow_vector__aggregate_def temp___140) temp___141) temp___140))))
(declare-fun from__2 (us_rep4) Int)
(declare-fun from__2__function_guard (Int us_rep4) Bool)
(define-fun dynamic_invariant2 ((temp___expr_253 Int) (temp___is_init_250 Bool) (temp___skip_constant_251 Bool) (temp___do_toplevel_252 Bool)) Bool (=> (or (= temp___is_init_250 true) (<= 0 100)) (in_range4 temp___expr_253)))
(assert (forall ((self us_rep4)) (! (dynamic_invariant2 (from__2 self) true false true) :pattern ((from__2 self)))))
(assert (forall ((self us_rep4)) (! (= (from__2 self) (to_rep2 (rec__model__uml_control_flow__from_data (us_split_fields9 self)))) :pattern ((from__2 self)))))
(declare-fun to__2 (us_rep4) Int)
(declare-fun to__2__function_guard (Int us_rep4) Bool)
(assert (forall ((self us_rep4)) (! (dynamic_invariant2 (to__2 self) true false true) :pattern ((to__2 self)))))
(assert (forall ((self us_rep4)) (! (= (to__2 self) (to_rep2 (rec__model__uml_control_flow__to_data (us_split_fields9 self)))) :pattern ((to__2 self)))))
(declare-const dummy12 (Array Int us_rep3))
(declare-const value__size7 Int)
(declare-fun object__size7 ((Array Int us_rep3)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int us_rep3)) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 ((Array Int us_rep3)) Int)
(assert (<= 0 value__size7))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size7 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment7 a))))
(declare-fun user_eq12 ((Array Int us_rep3) (Array Int us_rep3)) Bool)
(declare-const dummy13 (Array Int us_rep4))
(declare-const value__size8 Int)
(declare-fun object__size8 ((Array Int us_rep4)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int us_rep4)) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 ((Array Int us_rep4)) Int)
(assert (<= 0 value__size8))
(assert (forall ((a (Array Int us_rep4))) (<= 0 (object__size8 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int us_rep4))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a (Array Int us_rep4))) (<= 0 (object__alignment8 a))))
(declare-fun user_eq13 ((Array Int us_rep4) (Array Int us_rep4)) Bool)
(declare-datatypes () ((us_split_fields10 (mk___split_fields5 (rec__model__uml_activity__owned_action_data (Array Int us_rep3)) (rec__model__uml_activity__owned_flow_data (Array Int us_rep4))))))
(define-fun us_split_fields_Owned_Action_Data__projection ((a us_split_fields10)) (Array Int us_rep3) (rec__model__uml_activity__owned_action_data a))
(define-fun us_split_fields_Owned_Flow_Data__projection ((a us_split_fields10)) (Array Int us_rep4) (rec__model__uml_activity__owned_flow_data a))
(declare-datatypes () ((us_split_fields__ref5 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref5)) us_split_fields10 (us_split_fields__content5 a))
(declare-datatypes () ((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___6__projection ((a us_rep5)) us_split_fields10 (us_split_fields11 a))
(define-fun bool_eq9 ((a us_rep5) (b us_rep5)) Bool (ite (and (= (bool_eq6 (rec__model__uml_activity__owned_action_data (us_split_fields11 a)) 0 100 (rec__model__uml_activity__owned_action_data (us_split_fields11 b)) 0 100) true) (= (bool_eq8 (rec__model__uml_activity__owned_flow_data (us_split_fields11 a)) 0 100 (rec__model__uml_activity__owned_flow_data (us_split_fields11 b)) 0 100) true)) true false))
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep5) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep5) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep5)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment9 a))))
(declare-const model__uml_activity__owned_action_data__first__bit Int)
(declare-const model__uml_activity__owned_action_data__last__bit Int)
(declare-const model__uml_activity__owned_action_data__position Int)
(assert (<= 0 model__uml_activity__owned_action_data__first__bit))
(assert (< model__uml_activity__owned_action_data__first__bit model__uml_activity__owned_action_data__last__bit))
(assert (<= 0 model__uml_activity__owned_action_data__position))
(declare-const model__uml_activity__owned_flow_data__first__bit Int)
(declare-const model__uml_activity__owned_flow_data__last__bit Int)
(declare-const model__uml_activity__owned_flow_data__position Int)
(assert (<= 0 model__uml_activity__owned_flow_data__first__bit))
(assert (< model__uml_activity__owned_flow_data__first__bit model__uml_activity__owned_flow_data__last__bit))
(assert (<= 0 model__uml_activity__owned_flow_data__position))
(declare-fun user_eq14 (us_rep5 us_rep5) Bool)
(declare-const dummy14 us_rep5)
(declare-datatypes () ((uml_activity__ref (mk_uml_activity__ref (uml_activity__content us_rep5)))))
(define-fun uml_activity__ref___projection ((a uml_activity__ref)) us_rep5 (uml_activity__content a))
(declare-const no_uml_activity us_rep5)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun owned_action (us_rep5) (Array Int us_rep3))
(declare-fun owned_action__function_guard ((Array Int us_rep3) us_rep5) Bool)
(assert true)
(assert (forall ((self us_rep5)) (! (= (owned_action self) (rec__model__uml_activity__owned_action_data (us_split_fields11 self))) :pattern ((owned_action self)))))
(declare-fun owned_flow (us_rep5) (Array Int us_rep4))
(declare-fun owned_flow__function_guard ((Array Int us_rep4) us_rep5) Bool)
(assert true)
(assert (forall ((self us_rep5)) (! (= (owned_flow self) (rec__model__uml_activity__owned_flow_data (us_split_fields11 self))) :pattern ((owned_flow self)))))
(declare-const sm us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const r1b (Array Int us_rep))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-sort t2b 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq15 (t2b t2b) Bool)
(declare-const dummy15 t2b)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content t2b)))))
(define-fun t2b__ref___projection ((a t2b__ref)) t2b (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const r7b (Array Int us_rep1))
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-sort t8b 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq16 (t8b t8b) Bool)
(declare-const dummy16 t8b)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content t8b)))))
(define-fun t8b__ref___projection ((a t8b__ref)) t8b (t8b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(define-fun dynamic_invariant3 ((temp___expr_182 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 0 100)) (in_range3 temp___expr_182)))
(assert (= no_uml_action (mk___rep3 (mk___split_fields3 (of_rep 0)))))
(assert (= no_uml_action_vector (model__no_uml_action_vector__aggregate_def no_uml_action)))
(assert (= no_uml_control_flow (mk___rep4 (mk___split_fields4 (of_rep2 0) (of_rep2 0)))))
(define-fun dynamic_invariant4 ((temp___expr_277 Int) (temp___is_init_274 Bool) (temp___skip_constant_275 Bool) (temp___do_toplevel_276 Bool)) Bool (=> (or (= temp___is_init_274 true) (<= 0 100)) (in_range5 temp___expr_277)))
(assert (= no_uml_control_flow_vector (model__no_uml_control_flow_vector__aggregate_def no_uml_control_flow)))
(assert (= no_uml_activity (mk___rep5 (mk___split_fields5 no_uml_action_vector no_uml_control_flow_vector))))
(declare-const av (Array Int us_rep3))
(declare-const cfv (Array Int us_rep4))
(declare-const act__split_fields (Array Int us_rep3))
(declare-const act__split_fields1 (Array Int us_rep4))
(declare-const s Int)
(declare-const s1 Int)
(declare-const model__transform__L_1__R1b__assume (Array Int us_rep))
(declare-const temp___436 (Array Int us_rep3))
(declare-const temp___435 Int)
(declare-const temp___434 (Array Int us_rep))
(declare-const o name_t)
(declare-const o1 Int)
(declare-const o2 name_t)
(declare-const o3 name_t)
(declare-const o4 name_t)
(declare-const o5 (Array Int us_rep3))
(declare-const model__transform__L_2__R7b__assume (Array Int us_rep1))
(declare-const t Int)
(declare-const temp___448 (Array Int us_rep))
(declare-const temp___449 (Array Int us_rep1))
(declare-const o6 Int)
(declare-const o7 uml_action_access)
(declare-const o8 uml_action_access)
(declare-const o9 Int)
(declare-const o10 name_t)
(declare-const o11 Int)
(declare-const temp___450 (Array Int us_rep))
(declare-const temp___451 (Array Int us_rep1))
(declare-const o12 Int)
(declare-const o13 uml_state_access)
(declare-const o14 uml_state_access)
(declare-const o15 Int)
(declare-const o16 us_rep)
(declare-const o17 Int)
(declare-const o18 us_rep4)
(declare-const o19 Int)
(declare-const o20 us_rep3)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Bool)
(declare-const result map__ref2)
(declare-const av1 (Array Int us_rep3))
(declare-const result1 map__ref3)
(declare-const cfv1 (Array Int us_rep4))
(declare-const result2 us_split_fields__ref5)
(declare-const act__split_fields2 us_split_fields10)
(declare-const result3 int__ref)
(declare-const s2 Int)
(declare-const av2 (Array Int us_rep3))
(declare-const s3 Int)
(declare-const result4 map__ref2)
(declare-const av3 (Array Int us_rep3))
(declare-const av4 map__ref2)
(declare-const s4 int__ref)
(declare-const av5 (Array Int us_rep3))
(declare-const s5 Int)
(declare-const av6 map__ref2)
(declare-const s6 int__ref)
(declare-const av7 (Array Int us_rep3))
(declare-const s7 Int)
(declare-const result5 int__ref)
(declare-const s8 Int)
(declare-const cfv2 (Array Int us_rep4))
(declare-const s9 Int)
(define-fun o24 () us_rep1 (mk___rep1 (mk___split_fields1 o13 o14)))
(define-fun o25 () us_rep3 (mk___rep3 (mk___split_fields3 o10)))
(define-fun o26 () us_rep4 (mk___rep4 (mk___split_fields4 o7 o8)))
(define-fun o27 () us_rep (mk___rep (mk___split_fields o)))
(assert (= (model__no_uml_action_vector__aggregate_def no_uml_action) no_uml_action_vector))
(assert (= (model__no_uml_control_flow_vector__aggregate_def no_uml_control_flow) no_uml_control_flow_vector))
(assert (= (mk___rep5 (mk___split_fields5 no_uml_action_vector no_uml_control_flow_vector)) no_uml_activity))
(assert (= result (mk_map__ref2 av)))
(assert (= av1 no_uml_action_vector))
(assert (= result1 (mk_map__ref3 cfv)))
(assert (= cfv1 no_uml_control_flow_vector))
(assert (= result2 (mk___split_fields__ref5 (mk___split_fields5 act__split_fields act__split_fields1))))
(assert (= act__split_fields2 (us_split_fields11 no_uml_activity)))
(assert (and (= model__transform__L_1__R1b__assume (owned_state sm)) (= model__transform__L_1__R1b__assume (rec__model__uml_state_machine__owned_state_data (us_split_fields5 sm)))))
(assert (= model__transform__L_1__R1b__assume r1b))
(assert (= result3 (mk_int__ref s)))
(assert (= s2 0))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= temp___436 av1)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= temp___435 s2)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (forall ((t1 Int)) (=> (and (<= 0 t1) (<= t1 (- s3 1))) (= (name (select (owned_state sm) t1)) (name__2 (select av2 t1)))))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (and (=> (<= 0 100) (in_range6 s3)) (and (<= 0 s3) (<= s3 100)))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (and (= temp___434 (owned_state sm)) (= temp___434 (rec__model__uml_state_machine__owned_state_data (us_split_fields5 sm))))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= o27 (select temp___434 s3))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (and (= o1 (name o27)) (and (in_range1 o1) (= o1 (to_rep o))))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= (to_rep o2) o1)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= o2 o3)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= o4 o3)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= o5 (store av2 s3 (mk___rep3 (mk___split_fields3 o4))))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= result4 (mk_map__ref2 av2))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= av3 o5)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= s3 100)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= s4 (mk_int__ref s3))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= av4 (mk_map__ref2 av3))))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= s5 s3)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= av5 av3)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= s6 s4)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= av6 av4)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= s7 s5)))
(assert (=> (and (<= 0 s2) (<= s2 100)) (= av7 av5)))
(assert (=> (not (and (<= 0 s2) (<= s2 100))) (= s6 (mk_int__ref s2))))
(assert (=> (not (and (<= 0 s2) (<= s2 100))) (= av6 (mk_map__ref2 av1))))
(assert (=> (not (and (<= 0 s2) (<= s2 100))) (= s7 s2)))
(assert (=> (not (and (<= 0 s2) (<= s2 100))) (= av7 av1)))
(assert (and (= model__transform__L_2__R7b__assume (owned_transition sm)) (= model__transform__L_2__R7b__assume (rec__model__uml_state_machine__owned_transition_data (us_split_fields5 sm)))))
(assert (= model__transform__L_2__R7b__assume r7b))
(assert (= result5 (mk_int__ref s1)))
(assert (= s8 0))
(assert (<= 0 s8))
(assert (<= s8 100))
(assert (forall ((t1 Int)) (=> (and (<= 0 t1) (<= t1 (- s9 1))) (and (= (name (select (owned_state sm) (from (select (owned_transition sm) t1)))) (name__2 (select (map__content2 av6) (from__2 (select cfv2 t1))))) (= (name (select (owned_state sm) (to__ (select (owned_transition sm) t1)))) (name__2 (select (map__content2 av6) (to__2 (select cfv2 t1)))))))))
(assert (and (=> (<= 0 100) (in_range7 s9)) (and (<= 0 s9) (<= s9 100))))
(assert (<= 0 t))
(assert (<= t (- s9 1)))
(assert (and (= o17 t) (in_range5 t)))
(assert (= o18 (select cfv2 o17)))
(assert (and (= o19 (to__2 o18)) (and (in_range4 o19) (= o19 (to_rep2 (rec__model__uml_control_flow__to_data (us_split_fields9 o18)))))))
(assert (= o20 (select (map__content2 av6) o19)))
(assert (and (= o21 (name__2 o20)) (and (in_range1 o21) (= o21 (to_rep (rec__model__uml_action__name_data (us_split_fields7 o20)))))))
(assert (and (= temp___450 (owned_state sm)) (= temp___450 (rec__model__uml_state_machine__owned_state_data (us_split_fields5 sm)))))
(assert (and (= temp___451 (owned_transition sm)) (= temp___451 (rec__model__uml_state_machine__owned_transition_data (us_split_fields5 sm)))))
(assert (and (<= 0 t) (<= t 100)))
(assert (= o12 t))
(assert (= o24 (select temp___451 o12)))
(assert (and (= o15 (to__ o24)) (and (in_range2 o15) (= o15 (to_rep1 o14)))))
(assert (= o16 (select temp___450 o15)))
(assert (and (= o22 (name o16)) (and (in_range1 o22) (= o22 (to_rep (rec__model__uml_state__name_data (us_split_fields1 o16)))))))
(assert (= o23 (ite (= o22 o21) true false)))
(assert (and (= o6 t) (in_range5 t)))
(assert (= o26 (select cfv2 o6)))
(assert (and (= o9 (from__2 o26)) (and (in_range4 o9) (= o9 (to_rep2 o7)))))
(assert (= o25 (select (map__content2 av6) o9)))
(assert (and (= o11 (name__2 o25)) (and (in_range1 o11) (= o11 (to_rep o10)))))
(assert (and (= temp___448 (owned_state sm)) (= temp___448 (rec__model__uml_state_machine__owned_state_data (us_split_fields5 sm)))))
(assert (and (= temp___449 (owned_transition sm)) (= temp___449 (rec__model__uml_state_machine__owned_transition_data (us_split_fields5 sm)))))
(assert (not (<= 0 t)))
(check-sat)
(exit)
