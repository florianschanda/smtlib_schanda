(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,character) farray

logic dummy5 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type name_id

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : name_id, name_id -> bool

logic dummy6 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref___projection(a: name_id__ref) : name_id =
  (a).name_id__content

logic to_rep3 : name_id -> int

logic of_rep3 : int -> name_id

axiom inversion_axiom3 :
  (forall x:name_id [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:name_id [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic invariant__ : us_private -> bool

logic invariant____function_guard : bool, us_private -> prop

axiom invariant____post_axiom : true

type token_kind

predicate in_range6(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : token_kind, token_kind -> bool

logic dummy7 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref___projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep4 : token_kind -> int

logic of_rep4 : int -> token_kind

axiom inversion_axiom4 :
  (forall x:token_kind [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:token_kind [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type valued_tokens

predicate in_range7(x: int) = ((3 <= x) and (x <= 8))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : valued_tokens, valued_tokens -> bool

logic dummy8 : valued_tokens

type valued_tokens__ref = { valued_tokens__content : valued_tokens
}

function valued_tokens__ref___projection(a: valued_tokens__ref) : valued_tokens =
  (a).valued_tokens__content

type us_split_discrs = { rec__lexer__token__kind : token_kind
}

function us_split_discrs___3__projection(a: us_split_discrs) : token_kind =
  (a).rec__lexer__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__lexer__token__line : natural;
rec__lexer__token__col : natural; rec__lexer__token__length : natural;
rec__lexer__token__value : name_id
}

function us_split_fields_Line__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__line

function us_split_fields_Col__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__col

function us_split_fields_Length__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__length

function us_split_fields_Value__projection(a: us_split_fields) : name_id =
  (a).rec__lexer__token__value

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___8__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___9__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___10__projection(a: us_rep) : bool = (a).attr__constrained

predicate lexer__token__value__pred(a: us_rep) =
  ((3 <= to_rep4(((a).us_split_discrs1).rec__lexer__token__kind)) and
  (to_rep4(((a).us_split_discrs1).rec__lexer__token__kind) <= 8))

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((to_rep4(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep4(((b).us_split_discrs1).rec__lexer__token__kind)) and
  ((((to_rep(((a).us_split_fields1).rec__lexer__token__line) = to_rep(((b).us_split_fields1).rec__lexer__token__line)) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__col) = to_rep(((b).us_split_fields1).rec__lexer__token__col))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__length) = to_rep(((b).us_split_fields1).rec__lexer__token__length))) and
  (lexer__token__value__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__lexer__token__value) = to_rep3(((b).us_split_fields1).rec__lexer__token__value))))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep4(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep4(((b).us_split_discrs1).rec__lexer__token__kind)) and
  ((((to_rep(((a).us_split_fields1).rec__lexer__token__line) = to_rep(((b).us_split_fields1).rec__lexer__token__line)) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__col) = to_rep(((b).us_split_fields1).rec__lexer__token__col))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__length) = to_rep(((b).us_split_fields1).rec__lexer__token__length))) and
  (lexer__token__value__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__lexer__token__value) = to_rep3(((b).us_split_fields1).rec__lexer__token__value)))))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit : int

logic lexer__token__kind__last__bit : int

logic lexer__token__kind__position : int

axiom lexer__token__kind__first__bit_axiom :
  (0 <= lexer__token__kind__first__bit)

axiom lexer__token__kind__last__bit_axiom :
  (lexer__token__kind__first__bit <  lexer__token__kind__last__bit)

axiom lexer__token__kind__position_axiom :
  (0 <= lexer__token__kind__position)

logic lexer__token__line__first__bit : int

logic lexer__token__line__last__bit : int

logic lexer__token__line__position : int

axiom lexer__token__line__first__bit_axiom :
  (0 <= lexer__token__line__first__bit)

axiom lexer__token__line__last__bit_axiom :
  (lexer__token__line__first__bit <  lexer__token__line__last__bit)

axiom lexer__token__line__position_axiom :
  (0 <= lexer__token__line__position)

logic lexer__token__col__first__bit : int

logic lexer__token__col__last__bit : int

logic lexer__token__col__position : int

axiom lexer__token__col__first__bit_axiom :
  (0 <= lexer__token__col__first__bit)

axiom lexer__token__col__last__bit_axiom :
  (lexer__token__col__first__bit <  lexer__token__col__last__bit)

axiom lexer__token__col__position_axiom : (0 <= lexer__token__col__position)

logic lexer__token__length__first__bit : int

logic lexer__token__length__last__bit : int

logic lexer__token__length__position : int

axiom lexer__token__length__first__bit_axiom :
  (0 <= lexer__token__length__first__bit)

axiom lexer__token__length__last__bit_axiom :
  (lexer__token__length__first__bit <  lexer__token__length__last__bit)

axiom lexer__token__length__position_axiom :
  (0 <= lexer__token__length__position)

logic lexer__token__value__first__bit : int

logic lexer__token__value__last__bit : int

logic lexer__token__value__position : int

axiom lexer__token__value__first__bit_axiom :
  (0 <= lexer__token__value__first__bit)

axiom lexer__token__value__last__bit_axiom :
  (lexer__token__value__first__bit <  lexer__token__value__last__bit)

axiom lexer__token__value__position_axiom :
  (0 <= lexer__token__value__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : token_kind

logic dummy10 : natural

logic dummy11 : natural

logic dummy12 : natural

logic dummy13 : name_id

logic dummy14 : bool

type token__ref = { token__content : us_rep
}

function token__ref___projection(a: token__ref) : us_rep = (a).token__content

logic attr__ATTRIBUTE_ADDRESS : int

logic t__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic kind : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic value : (int,character) farray

logic value1 : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic t_length : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r28b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate in_range8(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep4(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit1 : int

logic lexer__token__kind__last__bit1 : int

logic lexer__token__kind__position1 : int

axiom lexer__token__kind__first__bit_axiom1 :
  (0 <= lexer__token__kind__first__bit1)

axiom lexer__token__kind__last__bit_axiom1 :
  (lexer__token__kind__first__bit1 <  lexer__token__kind__last__bit1)

axiom lexer__token__kind__position_axiom1 :
  (0 <= lexer__token__kind__position1)

logic lexer__token__line__first__bit1 : int

logic lexer__token__line__last__bit1 : int

logic lexer__token__line__position1 : int

axiom lexer__token__line__first__bit_axiom1 :
  (0 <= lexer__token__line__first__bit1)

axiom lexer__token__line__last__bit_axiom1 :
  (lexer__token__line__first__bit1 <  lexer__token__line__last__bit1)

axiom lexer__token__line__position_axiom1 :
  (0 <= lexer__token__line__position1)

logic lexer__token__col__first__bit1 : int

logic lexer__token__col__last__bit1 : int

logic lexer__token__col__position1 : int

axiom lexer__token__col__first__bit_axiom1 :
  (0 <= lexer__token__col__first__bit1)

axiom lexer__token__col__last__bit_axiom1 :
  (lexer__token__col__first__bit1 <  lexer__token__col__last__bit1)

axiom lexer__token__col__position_axiom1 :
  (0 <= lexer__token__col__position1)

logic lexer__token__length__first__bit1 : int

logic lexer__token__length__last__bit1 : int

logic lexer__token__length__position1 : int

axiom lexer__token__length__first__bit_axiom1 :
  (0 <= lexer__token__length__first__bit1)

axiom lexer__token__length__last__bit_axiom1 :
  (lexer__token__length__first__bit1 <  lexer__token__length__last__bit1)

axiom lexer__token__length__position_axiom1 :
  (0 <= lexer__token__length__position1)

logic lexer__token__value__first__bit1 : int

logic lexer__token__value__last__bit1 : int

logic lexer__token__value__position1 : int

axiom lexer__token__value__first__bit_axiom1 :
  (0 <= lexer__token__value__first__bit1)

axiom lexer__token__value__last__bit_axiom1 :
  (lexer__token__value__first__bit1 <  lexer__token__value__last__bit1)

axiom lexer__token__value__position_axiom1 :
  (0 <= lexer__token__value__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy15 : token_kind

logic dummy16 : natural

logic dummy17 : natural

logic dummy18 : natural

logic dummy19 : name_id

logic dummy20 : bool

type t29b__ref = { t29b__content : us_rep
}

function t29b__ref___projection(a: t29b__ref) : us_rep = (a).t29b__content

logic r31b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate in_range9(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep4(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size3({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment3({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit2 : int

logic lexer__token__kind__last__bit2 : int

logic lexer__token__kind__position2 : int

axiom lexer__token__kind__first__bit_axiom2 :
  (0 <= lexer__token__kind__first__bit2)

axiom lexer__token__kind__last__bit_axiom2 :
  (lexer__token__kind__first__bit2 <  lexer__token__kind__last__bit2)

axiom lexer__token__kind__position_axiom2 :
  (0 <= lexer__token__kind__position2)

logic lexer__token__line__first__bit2 : int

logic lexer__token__line__last__bit2 : int

logic lexer__token__line__position2 : int

axiom lexer__token__line__first__bit_axiom2 :
  (0 <= lexer__token__line__first__bit2)

axiom lexer__token__line__last__bit_axiom2 :
  (lexer__token__line__first__bit2 <  lexer__token__line__last__bit2)

axiom lexer__token__line__position_axiom2 :
  (0 <= lexer__token__line__position2)

logic lexer__token__col__first__bit2 : int

logic lexer__token__col__last__bit2 : int

logic lexer__token__col__position2 : int

axiom lexer__token__col__first__bit_axiom2 :
  (0 <= lexer__token__col__first__bit2)

axiom lexer__token__col__last__bit_axiom2 :
  (lexer__token__col__first__bit2 <  lexer__token__col__last__bit2)

axiom lexer__token__col__position_axiom2 :
  (0 <= lexer__token__col__position2)

logic lexer__token__length__first__bit2 : int

logic lexer__token__length__last__bit2 : int

logic lexer__token__length__position2 : int

axiom lexer__token__length__first__bit_axiom2 :
  (0 <= lexer__token__length__first__bit2)

axiom lexer__token__length__last__bit_axiom2 :
  (lexer__token__length__first__bit2 <  lexer__token__length__last__bit2)

axiom lexer__token__length__position_axiom2 :
  (0 <= lexer__token__length__position2)

logic lexer__token__value__first__bit2 : int

logic lexer__token__value__last__bit2 : int

logic lexer__token__value__position2 : int

axiom lexer__token__value__first__bit_axiom2 :
  (0 <= lexer__token__value__first__bit2)

axiom lexer__token__value__last__bit_axiom2 :
  (lexer__token__value__first__bit2 <  lexer__token__value__last__bit2)

axiom lexer__token__value__position_axiom2 :
  (0 <= lexer__token__value__position2)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy21 : token_kind

logic dummy22 : natural

logic dummy23 : natural

logic dummy24 : natural

logic dummy25 : name_id

logic dummy26 : bool

type t32b__ref = { t32b__content : us_rep
}

function t32b__ref___projection(a: t32b__ref) : us_rep = (a).t32b__content

logic r34b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate in_range10(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep4(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size4({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment4({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit3 : int

logic lexer__token__kind__last__bit3 : int

logic lexer__token__kind__position3 : int

axiom lexer__token__kind__first__bit_axiom3 :
  (0 <= lexer__token__kind__first__bit3)

axiom lexer__token__kind__last__bit_axiom3 :
  (lexer__token__kind__first__bit3 <  lexer__token__kind__last__bit3)

axiom lexer__token__kind__position_axiom3 :
  (0 <= lexer__token__kind__position3)

logic lexer__token__line__first__bit3 : int

logic lexer__token__line__last__bit3 : int

logic lexer__token__line__position3 : int

axiom lexer__token__line__first__bit_axiom3 :
  (0 <= lexer__token__line__first__bit3)

axiom lexer__token__line__last__bit_axiom3 :
  (lexer__token__line__first__bit3 <  lexer__token__line__last__bit3)

axiom lexer__token__line__position_axiom3 :
  (0 <= lexer__token__line__position3)

logic lexer__token__col__first__bit3 : int

logic lexer__token__col__last__bit3 : int

logic lexer__token__col__position3 : int

axiom lexer__token__col__first__bit_axiom3 :
  (0 <= lexer__token__col__first__bit3)

axiom lexer__token__col__last__bit_axiom3 :
  (lexer__token__col__first__bit3 <  lexer__token__col__last__bit3)

axiom lexer__token__col__position_axiom3 :
  (0 <= lexer__token__col__position3)

logic lexer__token__length__first__bit3 : int

logic lexer__token__length__last__bit3 : int

logic lexer__token__length__position3 : int

axiom lexer__token__length__first__bit_axiom3 :
  (0 <= lexer__token__length__first__bit3)

axiom lexer__token__length__last__bit_axiom3 :
  (lexer__token__length__first__bit3 <  lexer__token__length__last__bit3)

axiom lexer__token__length__position_axiom3 :
  (0 <= lexer__token__length__position3)

logic lexer__token__value__first__bit3 : int

logic lexer__token__value__last__bit3 : int

logic lexer__token__value__position3 : int

axiom lexer__token__value__first__bit_axiom3 :
  (0 <= lexer__token__value__first__bit3)

axiom lexer__token__value__last__bit_axiom3 :
  (lexer__token__value__first__bit3 <  lexer__token__value__last__bit3)

axiom lexer__token__value__position_axiom3 :
  (0 <= lexer__token__value__position3)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy27 : token_kind

logic dummy28 : natural

logic dummy29 : natural

logic dummy30 : natural

logic dummy31 : name_id

logic dummy32 : bool

type t35b__ref = { t35b__content : us_rep
}

function t35b__ref___projection(a: t35b__ref) : us_rep = (a).t35b__content

logic r37b : int

logic attr__ATTRIBUTE_ADDRESS12 : int

predicate in_range11(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep4(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size5({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment5({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit4 : int

logic lexer__token__kind__last__bit4 : int

logic lexer__token__kind__position4 : int

axiom lexer__token__kind__first__bit_axiom4 :
  (0 <= lexer__token__kind__first__bit4)

axiom lexer__token__kind__last__bit_axiom4 :
  (lexer__token__kind__first__bit4 <  lexer__token__kind__last__bit4)

axiom lexer__token__kind__position_axiom4 :
  (0 <= lexer__token__kind__position4)

logic lexer__token__line__first__bit4 : int

logic lexer__token__line__last__bit4 : int

logic lexer__token__line__position4 : int

axiom lexer__token__line__first__bit_axiom4 :
  (0 <= lexer__token__line__first__bit4)

axiom lexer__token__line__last__bit_axiom4 :
  (lexer__token__line__first__bit4 <  lexer__token__line__last__bit4)

axiom lexer__token__line__position_axiom4 :
  (0 <= lexer__token__line__position4)

logic lexer__token__col__first__bit4 : int

logic lexer__token__col__last__bit4 : int

logic lexer__token__col__position4 : int

axiom lexer__token__col__first__bit_axiom4 :
  (0 <= lexer__token__col__first__bit4)

axiom lexer__token__col__last__bit_axiom4 :
  (lexer__token__col__first__bit4 <  lexer__token__col__last__bit4)

axiom lexer__token__col__position_axiom4 :
  (0 <= lexer__token__col__position4)

logic lexer__token__length__first__bit4 : int

logic lexer__token__length__last__bit4 : int

logic lexer__token__length__position4 : int

axiom lexer__token__length__first__bit_axiom4 :
  (0 <= lexer__token__length__first__bit4)

axiom lexer__token__length__last__bit_axiom4 :
  (lexer__token__length__first__bit4 <  lexer__token__length__last__bit4)

axiom lexer__token__length__position_axiom4 :
  (0 <= lexer__token__length__position4)

logic lexer__token__value__first__bit4 : int

logic lexer__token__value__last__bit4 : int

logic lexer__token__value__position4 : int

axiom lexer__token__value__first__bit_axiom4 :
  (0 <= lexer__token__value__first__bit4)

axiom lexer__token__value__last__bit_axiom4 :
  (lexer__token__value__first__bit4 <  lexer__token__value__last__bit4)

axiom lexer__token__value__position_axiom4 :
  (0 <= lexer__token__value__position4)

logic user_eq12 : us_rep, us_rep -> bool

logic dummy33 : token_kind

logic dummy34 : natural

logic dummy35 : natural

logic dummy36 : natural

logic dummy37 : name_id

logic dummy38 : bool

type t38b__ref = { t38b__content : us_rep
}

function t38b__ref___projection(a: t38b__ref) : us_rep = (a).t38b__content

logic r40b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

predicate in_range12(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep4(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size6({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment6({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit5 : int

logic lexer__token__kind__last__bit5 : int

logic lexer__token__kind__position5 : int

axiom lexer__token__kind__first__bit_axiom5 :
  (0 <= lexer__token__kind__first__bit5)

axiom lexer__token__kind__last__bit_axiom5 :
  (lexer__token__kind__first__bit5 <  lexer__token__kind__last__bit5)

axiom lexer__token__kind__position_axiom5 :
  (0 <= lexer__token__kind__position5)

logic lexer__token__line__first__bit5 : int

logic lexer__token__line__last__bit5 : int

logic lexer__token__line__position5 : int

axiom lexer__token__line__first__bit_axiom5 :
  (0 <= lexer__token__line__first__bit5)

axiom lexer__token__line__last__bit_axiom5 :
  (lexer__token__line__first__bit5 <  lexer__token__line__last__bit5)

axiom lexer__token__line__position_axiom5 :
  (0 <= lexer__token__line__position5)

logic lexer__token__col__first__bit5 : int

logic lexer__token__col__last__bit5 : int

logic lexer__token__col__position5 : int

axiom lexer__token__col__first__bit_axiom5 :
  (0 <= lexer__token__col__first__bit5)

axiom lexer__token__col__last__bit_axiom5 :
  (lexer__token__col__first__bit5 <  lexer__token__col__last__bit5)

axiom lexer__token__col__position_axiom5 :
  (0 <= lexer__token__col__position5)

logic lexer__token__length__first__bit5 : int

logic lexer__token__length__last__bit5 : int

logic lexer__token__length__position5 : int

axiom lexer__token__length__first__bit_axiom5 :
  (0 <= lexer__token__length__first__bit5)

axiom lexer__token__length__last__bit_axiom5 :
  (lexer__token__length__first__bit5 <  lexer__token__length__last__bit5)

axiom lexer__token__length__position_axiom5 :
  (0 <= lexer__token__length__position5)

logic lexer__token__value__first__bit5 : int

logic lexer__token__value__last__bit5 : int

logic lexer__token__value__position5 : int

axiom lexer__token__value__first__bit_axiom5 :
  (0 <= lexer__token__value__first__bit5)

axiom lexer__token__value__last__bit_axiom5 :
  (lexer__token__value__first__bit5 <  lexer__token__value__last__bit5)

axiom lexer__token__value__position_axiom5 :
  (0 <= lexer__token__value__position5)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy39 : token_kind

logic dummy40 : natural

logic dummy41 : natural

logic dummy42 : natural

logic dummy43 : name_id

logic dummy44 : bool

type t41b__ref = { t41b__content : us_rep
}

function t41b__ref___projection(a: t41b__ref) : us_rep = (a).t41b__content

logic r43b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

predicate in_range13(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep4(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size7 : int

logic object__size7 : us_rep -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size7({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment7({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit6 : int

logic lexer__token__kind__last__bit6 : int

logic lexer__token__kind__position6 : int

axiom lexer__token__kind__first__bit_axiom6 :
  (0 <= lexer__token__kind__first__bit6)

axiom lexer__token__kind__last__bit_axiom6 :
  (lexer__token__kind__first__bit6 <  lexer__token__kind__last__bit6)

axiom lexer__token__kind__position_axiom6 :
  (0 <= lexer__token__kind__position6)

logic lexer__token__line__first__bit6 : int

logic lexer__token__line__last__bit6 : int

logic lexer__token__line__position6 : int

axiom lexer__token__line__first__bit_axiom6 :
  (0 <= lexer__token__line__first__bit6)

axiom lexer__token__line__last__bit_axiom6 :
  (lexer__token__line__first__bit6 <  lexer__token__line__last__bit6)

axiom lexer__token__line__position_axiom6 :
  (0 <= lexer__token__line__position6)

logic lexer__token__col__first__bit6 : int

logic lexer__token__col__last__bit6 : int

logic lexer__token__col__position6 : int

axiom lexer__token__col__first__bit_axiom6 :
  (0 <= lexer__token__col__first__bit6)

axiom lexer__token__col__last__bit_axiom6 :
  (lexer__token__col__first__bit6 <  lexer__token__col__last__bit6)

axiom lexer__token__col__position_axiom6 :
  (0 <= lexer__token__col__position6)

logic lexer__token__length__first__bit6 : int

logic lexer__token__length__last__bit6 : int

logic lexer__token__length__position6 : int

axiom lexer__token__length__first__bit_axiom6 :
  (0 <= lexer__token__length__first__bit6)

axiom lexer__token__length__last__bit_axiom6 :
  (lexer__token__length__first__bit6 <  lexer__token__length__last__bit6)

axiom lexer__token__length__position_axiom6 :
  (0 <= lexer__token__length__position6)

logic lexer__token__value__first__bit6 : int

logic lexer__token__value__last__bit6 : int

logic lexer__token__value__position6 : int

axiom lexer__token__value__first__bit_axiom6 :
  (0 <= lexer__token__value__first__bit6)

axiom lexer__token__value__last__bit_axiom6 :
  (lexer__token__value__first__bit6 <  lexer__token__value__last__bit6)

axiom lexer__token__value__position_axiom6 :
  (0 <= lexer__token__value__position6)

logic user_eq14 : us_rep, us_rep -> bool

logic dummy45 : token_kind

logic dummy46 : natural

logic dummy47 : natural

logic dummy48 : natural

logic dummy49 : name_id

logic dummy50 : bool

type t44b__ref = { t44b__content : us_rep
}

function t44b__ref___projection(a: t44b__ref) : us_rep = (a).t44b__content

 (* File "lexer.ads", line 79, characters 0-0 *)
goal WP_parameter_def :
  (forall t__split_discrs:token_kind. forall current_pos:int.
  forall first_line:int. forall first_col:int. forall first_pos:int.
  forall n:int. forall name_table:us_private. forall o:int.
  forall lexer__read_token__new_token__2__t_length__assume:int.
  forall o1:token_kind. forall o2:name_id. forall o3:natural.
  forall o4:natural. forall o5:natural. forall o6:us_split_fields.
  forall o7:us_split_discrs. forall temp___1049:us_rep. forall n1:int.
  forall name_table1:us_private. (in_range2(current_pos) ->
  (in_range2(first_line) -> (in_range2(first_col) -> (in_range2(first_pos) ->
  (in_range7(kind) -> (dynamic_property(1, 2147483647,
  to_rep2(first(value1)), to_rep2(last(value1))) ->
  ((((not (t__attr__constrained = true)) and
  (invariant__(name_table) = true)) and (first_pos <= current_pos)) ->
  (((((o = (current_pos - first_pos)) and
  in_range1((current_pos - first_pos))) and
  ((lexer__read_token__new_token__2__t_length__assume = o) and
  in_range2(o))) and
  (lexer__read_token__new_token__2__t_length__assume = t_length)) ->
  (in_range2(t_length) -> (((0 <= 2147483647) -> in_range5(n)) ->
  (((invariant__(name_table1) = true) and in_range5(n1)) ->
  ((not (kind = 3)) -> ((not (kind = 4)) -> ((not (kind = 5)) ->
  ((not (kind = 6)) -> ((kind = 7) -> (((to_rep4(t__split_discrs) = r40b) and
  in_range6(r40b)) -> ((((to_rep3(o2) = n1) and ((to_rep(o3) = t_length) and
  ((to_rep(o4) = first_col) and ((to_rep(o5) = first_line) and (o6 = {
  rec__lexer__token__line = o5; rec__lexer__token__col = o4;
  rec__lexer__token__length = o3; rec__lexer__token__value = o2 }))))) and
  (((to_rep4(o1) = 7) and (o7 = { rec__lexer__token__kind = o1 })) and
  (temp___1049 = { us_split_discrs1 = o7; us_split_fields1 = o6;
  attr__constrained = true }))) -> ((t__attr__constrained = true) ->
  (((temp___1049).us_split_discrs1).rec__lexer__token__kind = t__split_discrs)))))))))))))))))))))
