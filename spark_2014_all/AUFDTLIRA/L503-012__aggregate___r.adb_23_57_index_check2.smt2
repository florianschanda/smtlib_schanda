(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort int5 0)
(declare-fun int5qtint (int5) Int)
(assert (forall ((i int5)) (and (<= 1 (int5qtint i)) (<= (int5qtint i) 5))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (int5 int5) Bool)
(declare-const dummy1 int5)
(declare-datatypes () ((int5__ref (mk_int5__ref (int5__content int5)))))
(define-fun int5__ref___projection ((a int5__ref)) int5 (int5__content a))
(define-fun to_rep ((x int5)) Int (int5qtint x))
(declare-fun of_rep (Int) int5)
(assert (forall ((x int5)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x int5)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int int5))))))
(declare-fun slide ((Array Int int5) Int Int) (Array Int int5))
(assert (forall ((a (Array Int int5))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int int5))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int int5)) (a__first Int) (a__last Int) (b (Array Int int5)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int int5)) (b (Array Int int5))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort ta26P1 0)
(declare-fun ta26P1qtint (ta26P1) Int)
(assert (forall ((i ta26P1)) (and (<= 2 (ta26P1qtint i)) (<= (ta26P1qtint i) 6))))
(define-fun in_range3 ((x Int)) Bool (and (<= 2 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (ta26P1 ta26P1) Bool)
(declare-const dummy2 ta26P1)
(declare-datatypes () ((ta26P1__ref (mk_ta26P1__ref (ta26P1__content ta26P1)))))
(define-fun ta26P1__ref___projection ((a ta26P1__ref)) ta26P1 (ta26P1__content a))
(declare-const dummy3 (Array Int int5))
(declare-const value__size Int)
(declare-fun object__size ((Array Int int5)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int int5)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int int5)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int int5))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int int5))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int int5))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int int5) (Array Int int5)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__r__r__f (Array Int int5))))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) (Array Int int5) (rec__r__r__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__r__r__f (us_split_fields1 a)) 2 6 (rec__r__r__f (us_split_fields1 b)) 2 6) true) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const r__r__f__first__bit Int)
(declare-const r__r__f__last__bit Int)
(declare-const r__r__f__position Int)
(assert (<= 0 r__r__f__first__bit))
(assert (< r__r__f__first__bit r__r__f__last__bit))
(assert (<= 0 r__r__f__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq1 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq1 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-sort tar15P1 0)
(declare-fun tar15P1qtint (tar15P1) Int)
(assert (forall ((i tar15P1)) (and (<= 1 (tar15P1qtint i)) (<= (tar15P1qtint i) 5))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (tar15P1 tar15P1) Bool)
(declare-const dummy5 tar15P1)
(declare-datatypes () ((tar15P1__ref (mk_tar15P1__ref (tar15P1__content tar15P1)))))
(define-fun tar15P1__ref___projection ((a tar15P1__ref)) tar15P1 (tar15P1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun temp_____aggregate_def_297 (us_rep) (Array Int us_rep))
(declare-fun temp_____aggregate_def_301 (Int Int) (Array Int int5))
(define-fun dynamic_invariant1 ((temp___expr_203 Int) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool) (temp___do_typ_inv_202 Bool)) Bool (=> (or (= temp___is_init_199 true) (<= 1 5)) (in_range2 temp___expr_203)))
(assert (forall ((temp___299 us_rep)) (forall ((temp___300 Int)) (= (select (temp_____aggregate_def_297 temp___299) temp___300) temp___299))))
(declare-const rliteral int5)
(assert (= (int5qtint rliteral) 1))
(assert (forall ((temp___303 Int) (temp___304 Int)) (let ((temp___302 (temp_____aggregate_def_301 temp___303 temp___304))) (=> (and (dynamic_invariant1 temp___303 true true true true) (dynamic_invariant1 temp___304 true true true true)) (forall ((temp___305 Int)) (ite (= temp___305 2) (= (select temp___302 temp___305) rliteral) (= (to_rep (select temp___302 temp___305)) temp___304)))))))
(declare-const a (Array Int us_rep))
(declare-const o Int)
(declare-const o1 (Array Int int5))
(declare-const o2 (Array Int int5))
(declare-const temp___306 (Array Int int5))
(assert (in_range1 n))
(assert (and (<= 1 n) (<= n 5)))
(assert (and (<= 1 n) (<= n 5)))
(assert (= o n))
(assert (= (mk___rep (mk___split_fields o1)) (select a o)))
(assert (= o1 o2))
(assert (= temp___306 o2))
(assert (not (<= 2 n)))
(check-sat)
(exit)
