(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type et1

predicate in_range1(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___660 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___669 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___678 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___687 : (int,et1) farray, int, int, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___662:(int,et1) farray.
  (forall temp___663:int. forall temp___664:int. forall temp___665:int.
  forall temp___666:int. ((((in_range(temp___663) and
  in_range1(temp___664)) and in_range(temp___665)) and
  in_range1(temp___666)) ->
  (forall temp___667:int. (((temp___667 = temp___665) ->
  (to_rep((temp___660(temp___662, temp___663, temp___664, temp___665,
  temp___666)[temp___667])) = temp___666)) and
  ((not (temp___667 = temp___665)) -> (((temp___667 = temp___663) ->
  (to_rep((temp___660(temp___662, temp___663, temp___664, temp___665,
  temp___666)[temp___667])) = temp___664)) and
  ((not (temp___667 = temp___663)) -> ((temp___660(temp___662, temp___663,
  temp___664, temp___665,
  temp___666)[temp___667]) = (temp___662[temp___667]))))))))))

axiom def_axiom1 :
  (forall temp___671:(int,et1) farray.
  (forall temp___672:int. forall temp___673:int. forall temp___674:int.
  forall temp___675:int. ((((in_range(temp___672) and
  in_range1(temp___673)) and in_range(temp___674)) and
  in_range1(temp___675)) ->
  (forall temp___676:int. (((temp___676 = temp___674) ->
  (to_rep((temp___669(temp___671, temp___672, temp___673, temp___674,
  temp___675)[temp___676])) = temp___675)) and
  ((not (temp___676 = temp___674)) -> (((temp___676 = temp___672) ->
  (to_rep((temp___669(temp___671, temp___672, temp___673, temp___674,
  temp___675)[temp___676])) = temp___673)) and
  ((not (temp___676 = temp___672)) -> ((temp___669(temp___671, temp___672,
  temp___673, temp___674,
  temp___675)[temp___676]) = (temp___671[temp___676]))))))))))

axiom def_axiom2 :
  (forall temp___680:(int,et1) farray.
  (forall temp___681:int. forall temp___682:int. forall temp___683:int.
  forall temp___684:int. ((((in_range(temp___681) and
  in_range1(temp___682)) and in_range(temp___683)) and
  in_range1(temp___684)) ->
  (forall temp___685:int. (((temp___685 = temp___683) ->
  (to_rep((temp___678(temp___680, temp___681, temp___682, temp___683,
  temp___684)[temp___685])) = temp___684)) and
  ((not (temp___685 = temp___683)) -> (((temp___685 = temp___681) ->
  (to_rep((temp___678(temp___680, temp___681, temp___682, temp___683,
  temp___684)[temp___685])) = temp___682)) and
  ((not (temp___685 = temp___681)) -> ((temp___678(temp___680, temp___681,
  temp___682, temp___683,
  temp___684)[temp___685]) = (temp___680[temp___685]))))))))))

axiom def_axiom3 :
  (forall temp___689:(int,et1) farray.
  (forall temp___690:int. forall temp___691:int. forall temp___692:int.
  forall temp___693:int. ((((in_range(temp___690) and
  in_range1(temp___691)) and in_range(temp___692)) and
  in_range1(temp___693)) ->
  (forall temp___694:int. (((temp___694 = temp___692) ->
  (to_rep((temp___687(temp___689, temp___690, temp___691, temp___692,
  temp___693)[temp___694])) = temp___693)) and
  ((not (temp___694 = temp___692)) -> (((temp___694 = temp___690) ->
  (to_rep((temp___687(temp___689, temp___690, temp___691, temp___692,
  temp___693)[temp___694])) = temp___691)) and
  ((not (temp___694 = temp___690)) -> ((temp___687(temp___689, temp___690,
  temp___691, temp___692,
  temp___693)[temp___694]) = (temp___689[temp___694]))))))))))

 (* File "ar.ads", line 62, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,et1) farray. forall j:int. forall f:int. forall o:et1.
  forall o1:(int,et1) farray. forall o2:int. forall o3:int. forall o4:et1.
  forall o5:(int,et1) farray. forall result:(int,et1) farray.
  forall a1:(int,et1) farray. forall result1:int. forall j1:int.
  forall result2:int. forall j2:int. forall result3:int. forall f1:int.
  forall result4:int. forall f2:int. forall result5:(int,et1) farray.
  forall a2:(int,et1) farray. forall a3:(int,et1) farray. forall j3:int.
  forall f3:int. forall a4:(int,et1) farray. forall j4:int. forall f4:int.
  ((in_range(i) and (in_range1(e) and ((((1 <= 10) -> in_range(j)) and
  (((0 <= 99) -> in_range1(f)) and ((((to_rep(o) = e) and
  (o1 = (a[i <- o]))) and (({ map__content = result } = { map__content = a
  }) and (a1 = o1))) and ((((i = 10) and (({ int__content = result1 } = {
  int__content = j }) and (j1 = 1))) or ((not (i = 10)) and
  ((((o2 = (i + 1)) and in_range((i + 1))) and (({ int__content = result2
  } = { int__content = j }) and (j2 = o2))) and (j1 = j2)))) and
  ((((e = 0) and (({ int__content = result3 } = { int__content = f }) and
  (f1 = 99))) or ((not (e = 0)) and ((((o3 = (e - 1)) and
  in_range1((e - 1))) and (({ int__content = result4 } = { int__content = f
  }) and (f2 = o3))) and (f1 = f2)))) and (((to_rep(o4) = f1) and
  (o5 = (a1[j1 <- o4]))) and ((a1 = result5) and (a2 = o5)))))))) and
  (((f1 = f3) and ((j1 = j3) and (a2 = a3))) and ((f4 = f1) and
  ((j4 = j1) and (a4 = a2))))))) -> (((i <  10) and (((0 <  e) and
  (bool_eq3(a3, 1, 10, temp___660(a, i, e, (i + 1), (e - 1)), 1,
  10) = true)) or ((e = 0) and (bool_eq3(a3, 1, 10, temp___669(a, i, e,
  (i + 1), 99), 1, 10) = true)))) or ((i = 10) and (((0 <  e) and
  (bool_eq3(a3, 1, 10, temp___678(a, i, e, 1, (e - 1)), 1, 10) = true)) or
  ((e = 0) and (bool_eq3(a3, 1, 10, temp___687(a, i, e, 1, 99), 1,
  10) = true)))))))
