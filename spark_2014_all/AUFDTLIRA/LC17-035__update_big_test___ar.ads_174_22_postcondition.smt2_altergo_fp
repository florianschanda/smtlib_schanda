(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type et1

predicate in_range1(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___601 : (int,et1) farray, int, int, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___603:(int,et1) farray.
  (forall temp___604:int. forall temp___605:int. forall temp___606:int.
  forall temp___607:int.
  (forall temp___608:int. (((temp___608 = temp___606) ->
  ((temp___601(temp___603, temp___604, temp___605, temp___606,
  temp___607)[temp___608]) = of_rep(temp___607))) and
  ((not (temp___608 = temp___606)) -> (((temp___608 = temp___604) ->
  ((temp___601(temp___603, temp___604, temp___605, temp___606,
  temp___607)[temp___608]) = of_rep(temp___605))) and
  ((not (temp___608 = temp___604)) -> ((temp___601(temp___603, temp___604,
  temp___605, temp___606,
  temp___607)[temp___608]) = (temp___603[temp___608])))))))))

logic temp___610 : (int,et1) farray, int, int, int, int -> (int,et1) farray

axiom def_axiom1 :
  (forall temp___612:(int,et1) farray.
  (forall temp___613:int. forall temp___614:int. forall temp___615:int.
  forall temp___616:int.
  (forall temp___617:int. (((temp___617 = temp___615) ->
  ((temp___610(temp___612, temp___613, temp___614, temp___615,
  temp___616)[temp___617]) = of_rep(temp___616))) and
  ((not (temp___617 = temp___615)) -> (((temp___617 = temp___613) ->
  ((temp___610(temp___612, temp___613, temp___614, temp___615,
  temp___616)[temp___617]) = of_rep(temp___614))) and
  ((not (temp___617 = temp___613)) -> ((temp___610(temp___612, temp___613,
  temp___614, temp___615,
  temp___616)[temp___617]) = (temp___612[temp___617])))))))))

logic temp___619 : (int,et1) farray, int, int, int, int -> (int,et1) farray

axiom def_axiom2 :
  (forall temp___621:(int,et1) farray.
  (forall temp___622:int. forall temp___623:int. forall temp___624:int.
  forall temp___625:int.
  (forall temp___626:int. (((temp___626 = temp___624) ->
  ((temp___619(temp___621, temp___622, temp___623, temp___624,
  temp___625)[temp___626]) = of_rep(temp___625))) and
  ((not (temp___626 = temp___624)) -> (((temp___626 = temp___622) ->
  ((temp___619(temp___621, temp___622, temp___623, temp___624,
  temp___625)[temp___626]) = of_rep(temp___623))) and
  ((not (temp___626 = temp___622)) -> ((temp___619(temp___621, temp___622,
  temp___623, temp___624,
  temp___625)[temp___626]) = (temp___621[temp___626])))))))))

logic temp___628 : (int,et1) farray, int, int, int, int -> (int,et1) farray

axiom def_axiom3 :
  (forall temp___630:(int,et1) farray.
  (forall temp___631:int. forall temp___632:int. forall temp___633:int.
  forall temp___634:int.
  (forall temp___635:int. (((temp___635 = temp___633) ->
  ((temp___628(temp___630, temp___631, temp___632, temp___633,
  temp___634)[temp___635]) = of_rep(temp___634))) and
  ((not (temp___635 = temp___633)) -> (((temp___635 = temp___631) ->
  ((temp___628(temp___630, temp___631, temp___632, temp___633,
  temp___634)[temp___635]) = of_rep(temp___632))) and
  ((not (temp___635 = temp___631)) -> ((temp___628(temp___630, temp___631,
  temp___632, temp___633,
  temp___634)[temp___635]) = (temp___630[temp___635])))))))))

logic a : (int,et1) farray

logic j : int

logic f : int

logic o : et1

logic o1 : (int,et1) farray

logic o2 : int

logic o3 : int

logic o4 : et1

logic o5 : (int,et1) farray

logic o6 : int

logic o7 : int

logic temp___4343 : (int,et1) farray

logic o8 : int

logic o9 : int

logic temp___4341 : (int,et1) farray

logic result : (int,et1) farray

logic a1 : (int,et1) farray

logic result1 : int

logic j1 : int

logic result2 : int

logic j2 : int

logic result3 : int

logic f1 : int

logic result4 : int

logic f2 : int

logic result5 : (int,et1) farray

logic a2 : (int,et1) farray

logic a3 : (int,et1) farray

logic j3 : int

logic f3 : int

logic a4 : (int,et1) farray

logic j4 : int

logic f4 : int

logic result6 : bool

logic result7 : bool

axiom H : in_range(i)

axiom H1 : in_range1(e)

axiom H2 : ((1 <= 10) -> in_range(j))

axiom H3 : ((0 <= 99) -> in_range1(f))

axiom H4 : (to_rep(o) = e)

axiom H5 : (o1 = (a[i <- o]))

axiom H6 : (result = a)

axiom H7 : (a1 = o1)

axiom H8 : ((i = 10) -> (result1 = j))

axiom H9 : ((i = 10) -> (j1 = 1))

axiom H10 : ((not (i = 10)) -> ((o2 = (i + 1)) and in_range((i + 1))))

axiom H11 : ((not (i = 10)) -> (result2 = j))

axiom H12 : ((not (i = 10)) -> (j2 = o2))

axiom H13 : ((not (i = 10)) -> (j1 = j2))

axiom H14 : ((e = 0) -> (result3 = f))

axiom H15 : ((e = 0) -> (f1 = 99))

axiom H16 : ((not (e = 0)) -> ((o3 = (e - 1)) and in_range1((e - 1))))

axiom H17 : ((not (e = 0)) -> (result4 = f))

axiom H18 : ((not (e = 0)) -> (f2 = o3))

axiom H19 : ((not (e = 0)) -> (f1 = f2))

axiom H20 : (to_rep(o4) = f1)

axiom H21 : (o5 = (a1[j1 <- o4]))

axiom H22 : (a1 = result5)

axiom H23 : (a2 = o5)

axiom H24 : (f1 = f3)

axiom H25 : (j1 = j3)

axiom H26 : (a2 = a3)

axiom H27 : (f4 = f1)

axiom H28 : (j4 = j1)

axiom H29 : (a4 = a2)

 (* File "ar.ads", line 62, characters 0-0 *)
goal WP_parameter_def : (((i <  10) and (((0 <  e) and (bool_eq3(a3, 1, 10,
  temp___601(a, i, e, (i + 1), (e - 1)), 1, 10) = true)) or ((e = 0) and
  (bool_eq3(a3, 1, 10, temp___610(a, i, e, (i + 1), 99), 1, 10) = true)))) or
  ((i = 10) and (((0 <  e) and (bool_eq3(a3, 1, 10, temp___619(a, i, e, 1,
  (e - 1)), 1, 10) = true)) or ((e = 0) and (bool_eq3(a3, 1, 10,
  temp___628(a, i, e, 1, 99), 1, 10) = true)))))
