(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer_subtype

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer_subtype, integer_subtype -> bool

logic dummy2 : integer_subtype

type integer_subtype__ref = { integer_subtype__content : integer_subtype
}

function integer_subtype__ref___projection(a: integer_subtype__ref) : integer_subtype =
  (a).integer_subtype__content

logic to_rep2 : integer_subtype -> int

logic of_rep2 : int -> integer_subtype

axiom inversion_axiom2 :
  (forall x:integer_subtype [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:integer_subtype [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type map__ref1 = { map__content1 : (int,integer_subtype) farray
}

logic slide1 : (int,integer_subtype) farray, int,
  int -> (int,integer_subtype) farray

axiom slide_eq1 :
  (forall a:(int,integer_subtype) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,integer_subtype) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,integer_subtype) farray, int, int,
  (int,integer_subtype) farray, int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,integer_subtype) farray. forall a__first:int.
  forall a__last:int. forall b:(int,integer_subtype) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,integer_subtype) farray.
  forall b:(int,integer_subtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)])))))))))

logic cast : (int,integer) farray -> (int,integer_subtype) farray

logic cast__function_guard : (int,integer_subtype) farray,
  (int,integer) farray -> prop

axiom cast__post_axiom :
  (forall input_array:(int,integer) farray [cast(input_array)].
  (forall k:int. (((0 <= k) and (k <= 2)) ->
  (to_rep2((cast(input_array)[k])) = to_rep((input_array[k]))))))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)])))) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)])))))))))

logic dummy3 : (int,natural) farray

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,natural) farray, (int,natural) farray -> bool

type map__ref3 = { map__content3 : (int,(int,natural) farray) farray
}

logic slide3 : (int,(int,natural) farray) farray, int,
  int -> (int,(int,natural) farray) farray

axiom slide_eq3 :
  (forall a:(int,(int,natural) farray) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,(int,natural) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,(int,natural) farray) farray, int, int,
  (int,(int,natural) farray) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,(int,natural) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,natural) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq8(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. ((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and (bool_eq7((a[temp___idx_157]), 1, 100,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 100) = true)) or
  (not ((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq7((a[temp___idx_157]), 1, 100,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 100) = true))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq7((a[temp___idx_157]), 1, 100,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 100) = true)))))))

logic dummy4 : (int,natural) farray

logic value__size1 : int

logic object__size1 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,natural) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,natural) farray, (int,natural) farray -> bool

type map__ref4 = { map__content4 : (int,(int,natural) farray) farray
}

logic slide4 : (int,(int,natural) farray) farray, int,
  int -> (int,(int,natural) farray) farray

axiom slide_eq4 :
  (forall a:(int,(int,natural) farray) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,(int,natural) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,(int,natural) farray) farray, int, int,
  (int,(int,natural) farray) farray, int, int -> bool

axiom bool_eq_def8 :
  (forall a:(int,(int,natural) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,natural) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq9(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_158:int. ((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and (bool_eq7((a[temp___idx_158]), 1, 100,
  (b[((b__first - a__first) + temp___idx_158)]), 1, 100) = true)) or
  (not ((a__first <= temp___idx_158) and (temp___idx_158 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq7((a[temp___idx_158]), 1, 100,
  (b[((b__first - a__first) + temp___idx_158)]), 1, 100) = true))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq7((a[temp___idx_158]), 1, 100,
  (b[((b__first - a__first) + temp___idx_158)]), 1, 100) = true)))))))

type us_split_discrs = { rec__test__rec__x : integer
}

function us_split_discrs___projection(a: us_split_discrs) : integer =
  (a).rec__test__rec__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test__rec__y : integer
}

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__test__rec__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__test__rec__x) = to_rep(((b).us_split_discrs1).rec__test__rec__x)) and
  (to_rep(((a).us_split_fields1).rec__test__rec__y) = to_rep(((b).us_split_fields1).rec__test__rec__y))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__test__rec__x) = to_rep(((b).us_split_discrs1).rec__test__rec__x)) and
  (to_rep(((a).us_split_fields1).rec__test__rec__y) = to_rep(((b).us_split_fields1).rec__test__rec__y)))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. forall a1:integer. (0 <= object__size2({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment2({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

logic test__rec__x__first__bit : int

logic test__rec__x__last__bit : int

logic test__rec__x__position : int

axiom test__rec__x__first__bit_axiom : (0 <= test__rec__x__first__bit)

axiom test__rec__x__last__bit_axiom :
  (test__rec__x__first__bit <  test__rec__x__last__bit)

axiom test__rec__x__position_axiom : (0 <= test__rec__x__position)

logic test__rec__y__first__bit : int

logic test__rec__y__last__bit : int

logic test__rec__y__position : int

axiom test__rec__y__first__bit_axiom : (0 <= test__rec__y__first__bit)

axiom test__rec__y__last__bit_axiom :
  (test__rec__y__first__bit <  test__rec__y__last__bit)

axiom test__rec__y__position_axiom : (0 <= test__rec__y__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : integer

logic dummy6 : integer

type rec____ref = { rec____content : us_rep
}

function rec____ref___projection(a: rec____ref) : us_rep = (a).rec____content

predicate in_range4(rec__test__rec__x1: int, a: us_rep) =
  (rec__test__rec__x1 = to_rep(((a).us_split_discrs1).rec__test__rec__x))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:integer. forall a1:integer. (0 <= object__size3({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment3({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

logic test__rec__x__first__bit1 : int

logic test__rec__x__last__bit1 : int

logic test__rec__x__position1 : int

axiom test__rec__x__first__bit_axiom1 : (0 <= test__rec__x__first__bit1)

axiom test__rec__x__last__bit_axiom1 :
  (test__rec__x__first__bit1 <  test__rec__x__last__bit1)

axiom test__rec__x__position_axiom1 : (0 <= test__rec__x__position1)

logic test__rec__y__first__bit1 : int

logic test__rec__y__last__bit1 : int

logic test__rec__y__position1 : int

axiom test__rec__y__first__bit_axiom1 : (0 <= test__rec__y__first__bit1)

axiom test__rec__y__last__bit_axiom1 :
  (test__rec__y__first__bit1 <  test__rec__y__last__bit1)

axiom test__rec__y__position_axiom1 : (0 <= test__rec__y__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : integer

logic dummy8 : integer

type rec1__ref = { rec1__content : us_rep
}

function rec1__ref___projection(a: rec1__ref) : us_rep = (a).rec1__content

predicate in_range5(rec__test__rec__x1: int, a: us_rep) =
  (rec__test__rec__x1 = to_rep(((a).us_split_discrs1).rec__test__rec__x))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:integer. forall a1:integer. (0 <= object__size4({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment4({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

logic test__rec__x__first__bit2 : int

logic test__rec__x__last__bit2 : int

logic test__rec__x__position2 : int

axiom test__rec__x__first__bit_axiom2 : (0 <= test__rec__x__first__bit2)

axiom test__rec__x__last__bit_axiom2 :
  (test__rec__x__first__bit2 <  test__rec__x__last__bit2)

axiom test__rec__x__position_axiom2 : (0 <= test__rec__x__position2)

logic test__rec__y__first__bit2 : int

logic test__rec__y__last__bit2 : int

logic test__rec__y__position2 : int

axiom test__rec__y__first__bit_axiom2 : (0 <= test__rec__y__first__bit2)

axiom test__rec__y__last__bit_axiom2 :
  (test__rec__y__first__bit2 <  test__rec__y__last__bit2)

axiom test__rec__y__position_axiom2 : (0 <= test__rec__y__position2)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy9 : integer

logic dummy10 : integer

type rec2__ref = { rec2__content : us_rep
}

function rec2__ref___projection(a: rec2__ref) : us_rep = (a).rec2__content

type tarr3D1

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : tarr3D1, tarr3D1 -> bool

logic dummy11 : tarr3D1

type tarr3D1__ref = { tarr3D1__content : tarr3D1
}

function tarr3D1__ref___projection(a: tarr3D1__ref) : tarr3D1 =
  (a).tarr3D1__content

type map__ref5 = { map__content5 : (int,us_rep) farray
}

logic slide5 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq5 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide5(a, first, first)]. (slide5(a, first, first) = a)))

axiom slide_def5 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq12 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def11 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_159:int. ((((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) and (bool_eq10((a[temp___idx_159]),
  (b[((b__first - a__first) + temp___idx_159)])) = true)) or
  (not ((a__first <= temp___idx_159) and (temp___idx_159 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) -> (bool_eq10((a[temp___idx_159]),
  (b[((b__first - a__first) + temp___idx_159)])) = true))))) -> (bool_eq12(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) -> (bool_eq10((a[temp___idx_159]),
  (b[((b__first - a__first) + temp___idx_159)])) = true)))))))

type map__ref6 = { map__content6 : (int,us_rep) farray
}

logic slide6 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq6 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide6(a, first, first)]. (slide6(a, first, first) = a)))

axiom slide_def6 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide6(a, old_first, new_first)[i])]. ((slide6(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq13 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_160:int. ((((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) and (bool_eq10((a[temp___idx_160]),
  (b[((b__first - a__first) + temp___idx_160)])) = true)) or
  (not ((a__first <= temp___idx_160) and (temp___idx_160 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) -> (bool_eq10((a[temp___idx_160]),
  (b[((b__first - a__first) + temp___idx_160)])) = true))))) -> (bool_eq13(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) -> (bool_eq10((a[temp___idx_160]),
  (b[((b__first - a__first) + temp___idx_160)])) = true)))))))

type tarr4D1

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : tarr4D1, tarr4D1 -> bool

logic dummy12 : tarr4D1

type tarr4D1__ref = { tarr4D1__content : tarr4D1
}

function tarr4D1__ref___projection(a: tarr4D1__ref) : tarr4D1 =
  (a).tarr4D1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range8(rec__test__rec__x1: int, a: us_rep) =
  (rec__test__rec__x1 = to_rep(((a).us_split_discrs1).rec__test__rec__x))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:integer. forall a1:integer. (0 <= object__size5({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment5({
  us_split_discrs1 = { rec__test__rec__x = a }; us_split_fields1 = {
  rec__test__rec__y = a1 } })))

logic test__rec__x__first__bit3 : int

logic test__rec__x__last__bit3 : int

logic test__rec__x__position3 : int

axiom test__rec__x__first__bit_axiom3 : (0 <= test__rec__x__first__bit3)

axiom test__rec__x__last__bit_axiom3 :
  (test__rec__x__first__bit3 <  test__rec__x__last__bit3)

axiom test__rec__x__position_axiom3 : (0 <= test__rec__x__position3)

logic test__rec__y__first__bit3 : int

logic test__rec__y__last__bit3 : int

logic test__rec__y__position3 : int

axiom test__rec__y__first__bit_axiom3 : (0 <= test__rec__y__first__bit3)

axiom test__rec__y__last__bit_axiom3 :
  (test__rec__y__first__bit3 <  test__rec__y__last__bit3)

axiom test__rec__y__position_axiom3 : (0 <= test__rec__y__position3)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy13 : integer

logic dummy14 : integer

type t15b__ref = { t15b__content : us_rep
}

function t15b__ref___projection(a: t15b__ref) : us_rep = (a).t15b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic test__x__aggregate_def : (int,natural) farray -> (int,(int,natural) farray) farray

logic temp___342 : int -> (int,natural) farray

logic convert : (int,(int,natural) farray) farray -> (int,(int,natural) farray) farray

axiom convert__def :
  (forall a:(int,(int,natural) farray) farray.
  (forall temp___346:int. ((a[temp___346]) = (convert(a)[temp___346]))))

logic test__w__aggregate_def : us_rep -> (int,us_rep) farray

logic convert1 : (int,us_rep) farray -> (int,us_rep) farray

axiom convert__def1 :
  (forall a:(int,us_rep) farray.
  (forall temp___350:int. ((a[temp___350]) = (convert1(a)[temp___350]))))

logic test__test_array__aggregate_def : int, int, int -> (int,integer) farray

logic convert2 : (int,integer) farray -> (int,integer_subtype) farray

axiom convert__def2 :
  (forall a:(int,integer) farray.
  (forall temp___360:int.
  (to_rep((a[temp___360])) = to_rep2((convert2(a)[temp___360])))))

axiom def_axiom :
  (forall temp___340:(int,natural) farray.
  (forall temp___341:int.
  ((test__x__aggregate_def(temp___340)[temp___341]) = temp___340)))

axiom def_axiom1 :
  (forall temp___344:int. (in_range2(temp___344) ->
  (forall temp___345:int.
  (to_rep1((temp___342(temp___344)[temp___345])) = temp___344))))

axiom def_axiom2 :
  (forall temp___348:integer. forall temp___3481:integer.
  (forall temp___349:int. ((test__w__aggregate_def({ us_split_discrs1 = {
  rec__test__rec__x = temp___348 }; us_split_fields1 = { rec__test__rec__y =
  temp___3481 } })[temp___349]) = { us_split_discrs1 = { rec__test__rec__x =
  temp___348 }; us_split_fields1 = { rec__test__rec__y = temp___3481 } })))

axiom def_axiom3 :
  (forall temp___352:int. forall temp___353:int. forall temp___354:int.
  (((in_range1(temp___352) and in_range1(temp___353)) and
  in_range1(temp___354)) ->
  (((to_rep((test__test_array__aggregate_def(temp___352, temp___353,
  temp___354)[0])) = temp___352) and
  (to_rep((test__test_array__aggregate_def(temp___352, temp___353,
  temp___354)[1])) = temp___353)) and
  (to_rep((test__test_array__aggregate_def(temp___352, temp___353,
  temp___354)[2])) = temp___354))))

 (* File "test.adb", line 25, characters 0-0 *)
goal WP_parameter_def : in_range1(10)
