(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,character) farray

logic dummy7 : t1

type stringf1__ref = { stringf1__content : us_t1
}

function stringf1__ref___projection(a: stringf1__ref) : us_t1 =
  (a).stringf1__content

type yearst

predicate in_range5(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : yearst, yearst -> bool

logic dummy8 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep2 : yearst -> int

logic of_rep2 : int -> yearst

axiom inversion_axiom2 :
  (forall x:yearst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:yearst [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type monthst

predicate in_range6(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : monthst, monthst -> bool

logic dummy9 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep3 : monthst -> int

logic of_rep3 : int -> monthst

axiom inversion_axiom3 :
  (forall x:monthst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:monthst [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type dayst

predicate in_range7(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : dayst, dayst -> bool

logic dummy10 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep4 : dayst -> int

logic of_rep4 : int -> dayst

axiom inversion_axiom4 :
  (forall x:dayst [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:dayst [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type millisecst

predicate in_range8(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : millisecst, millisecst -> bool

logic dummy11 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep5 : millisecst -> int

logic of_rep5 : int -> millisecst

axiom inversion_axiom5 :
  (forall x:millisecst [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:millisecst [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range8(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq13 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq13(a, b)].
  ((((((to_rep2(((a).us_split_fields1).rec__clock__timet__year) = to_rep2(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__month) = to_rep3(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields1).rec__clock__timet__day) = to_rep4(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields1).rec__clock__timet__millisec))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields1).rec__clock__timet__year) = to_rep2(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__month) = to_rep3(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields1).rec__clock__timet__day) = to_rep4(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields1).rec__clock__timet__millisec)))) ->
  (bool_eq13(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size2({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment2({ us_split_fields1 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy12 : yearst

logic dummy13 : monthst

logic dummy14 : dayst

logic dummy15 : millisecst

type timet__ref = { timet__content : us_rep
}

function timet__ref___projection(a: timet__ref) : us_rep = (a).timet__content

logic zerotime : yearst

logic zerotime1 : monthst

logic zerotime2 : dayst

logic zerotime3 : millisecst

logic attr__ATTRIBUTE_ADDRESS : int

type timetexti

predicate in_range9(x: int) = ((1 <= x) and (x <= 21))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : timetexti, timetexti -> bool

logic dummy16 : timetexti

type timetexti__ref = { timetexti__content : timetexti
}

function timetexti__ref___projection(a: timetexti__ref) : timetexti =
  (a).timetexti__content

logic printtime : us_rep -> (int,character) farray

logic printtime__function_guard : (int,character) farray, us_rep -> prop

axiom printtime__post_axiom : true

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq15 : us_rep1, us_rep1 -> bool

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep1. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep1. (0 <= object__alignment3(a)))

logic user_eq12 : us_rep1, us_rep1 -> bool

logic dummy17 : us_rep1

type t__ref = { t__content : us_rep1
}

function t__ref___projection(a: t__ref) : us_rep1 = (a).t__content

logic exists__ : us_rep1 -> bool

logic exists____function_guard : bool, us_rep1 -> prop

logic endoffile : us_rep1 -> bool

logic endoffile__function_guard : bool, us_rep1 -> prop

type logfileindext

predicate in_range10(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : logfileindext, logfileindext -> bool

logic dummy18 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

type fileentrycountt

predicate in_range11(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : fileentrycountt, fileentrycountt -> bool

logic dummy19 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first4:int [slide1(a, first4, first4)]. (slide1(a, first4,
  first4) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def1 :
  (forall v:us_rep1.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq18 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq18(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq15((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq15((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true))))) -> (bool_eq18(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq18(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq15((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type filestatust

predicate in_range12(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq15 : filestatust, filestatust -> bool

logic dummy20 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

type filenamei

predicate in_range13(x: int) = ((1 <= x) and (x <= 16))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq16 : filenamei, filenamei -> bool

logic dummy21 : filenamei

type filenamei__ref = { filenamei__content : filenamei
}

function filenamei__ref___projection(a: filenamei__ref) : filenamei =
  (a).filenamei__content

logic dummy22 : (int,character) farray

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

logic user_eq17 : (int,character) farray, (int,character) farray -> bool

type map__ref2 = { map__content2 : (int,(int,character) farray) farray
}

logic slide2 : (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,character) farray) farray.
  (forall first4:int [slide2(a, first4, first4)]. (slide2(a, first4,
  first4) = a)))

axiom slide_def2 :
  (forall a:(int,(int,character) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom concat_def2 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : (int,character) farray,
  int -> (int,(int,character) farray) farray

axiom singleton_def2 :
  (forall v:(int,character) farray.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq21 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int, int -> bool

axiom bool_eq_def17 :
  (forall a:(int,(int,character) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,character) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq21(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq5((a[temp___idx_154]), 1, 16,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 16) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq21(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]), 1, 16,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 16) = true))))) ->
  (bool_eq21(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]), 1, 16,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 16) = true)))))))

logic logfilenames : (int,(int,character) farray) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic auditlog__logfilenames__aggregate_def : (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray -> (int,(int,character) farray) farray

axiom def_axiom :
  (forall temp___165:(int,character) farray.
  forall temp___166:(int,character) farray.
  forall temp___167:(int,character) farray.
  forall temp___168:(int,character) farray.
  forall temp___169:(int,character) farray.
  forall temp___170:(int,character) farray.
  forall temp___171:(int,character) farray.
  forall temp___172:(int,character) farray.
  forall temp___173:(int,character) farray.
  forall temp___174:(int,character) farray.
  forall temp___175:(int,character) farray.
  forall temp___176:(int,character) farray.
  forall temp___177:(int,character) farray.
  forall temp___178:(int,character) farray.
  forall temp___179:(int,character) farray.
  forall temp___180:(int,character) farray.
  forall temp___181:(int,character) farray.
  ((((((((((((((((((auditlog__logfilenames__aggregate_def(temp___165,
  temp___166, temp___167, temp___168, temp___169, temp___170, temp___171,
  temp___172, temp___173, temp___174, temp___175, temp___176, temp___177,
  temp___178, temp___179, temp___180, temp___181)[1]) = temp___165) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[2]) = temp___166)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[3]) = temp___167)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[4]) = temp___168)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[5]) = temp___169)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[6]) = temp___170)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[7]) = temp___171)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[8]) = temp___172)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[9]) = temp___173)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[10]) = temp___174)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[11]) = temp___175)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[12]) = temp___176)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[13]) = temp___177)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[14]) = temp___178)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[15]) = temp___179)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[16]) = temp___180)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[17]) = temp___181)))

logic temp___String_Literal_183 : unit -> (int,character) farray

axiom temp___String_Literal_183__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_183(void)[1])) = 46) and
  (to_rep((temp___String_Literal_183(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_183(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_183(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_183(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_183(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_183(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_183(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_183(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_183(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_183(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_183(void)[12])) = 49)) and
  (to_rep((temp___String_Literal_183(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_183(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_183(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_183(void)[16])) = 103))

logic temp___String_Literal_184 : unit -> (int,character) farray

axiom temp___String_Literal_184__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_184(void)[1])) = 46) and
  (to_rep((temp___String_Literal_184(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_184(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_184(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_184(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_184(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_184(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_184(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_184(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_184(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_184(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_184(void)[12])) = 50)) and
  (to_rep((temp___String_Literal_184(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_184(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_184(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_184(void)[16])) = 103))

logic temp___String_Literal_185 : unit -> (int,character) farray

axiom temp___String_Literal_185__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_185(void)[1])) = 46) and
  (to_rep((temp___String_Literal_185(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_185(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_185(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_185(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_185(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_185(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_185(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_185(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_185(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_185(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_185(void)[12])) = 51)) and
  (to_rep((temp___String_Literal_185(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_185(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_185(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_185(void)[16])) = 103))

logic temp___String_Literal_186 : unit -> (int,character) farray

axiom temp___String_Literal_186__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_186(void)[1])) = 46) and
  (to_rep((temp___String_Literal_186(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_186(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_186(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_186(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_186(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_186(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_186(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_186(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_186(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_186(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_186(void)[12])) = 52)) and
  (to_rep((temp___String_Literal_186(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_186(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_186(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_186(void)[16])) = 103))

logic temp___String_Literal_187 : unit -> (int,character) farray

axiom temp___String_Literal_187__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_187(void)[1])) = 46) and
  (to_rep((temp___String_Literal_187(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_187(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_187(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_187(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_187(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_187(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_187(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_187(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_187(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_187(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_187(void)[12])) = 53)) and
  (to_rep((temp___String_Literal_187(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_187(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_187(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_187(void)[16])) = 103))

logic temp___String_Literal_188 : unit -> (int,character) farray

axiom temp___String_Literal_188__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_188(void)[1])) = 46) and
  (to_rep((temp___String_Literal_188(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_188(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_188(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_188(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_188(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_188(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_188(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_188(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_188(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_188(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_188(void)[12])) = 54)) and
  (to_rep((temp___String_Literal_188(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_188(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_188(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_188(void)[16])) = 103))

logic temp___String_Literal_189 : unit -> (int,character) farray

axiom temp___String_Literal_189__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_189(void)[1])) = 46) and
  (to_rep((temp___String_Literal_189(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_189(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_189(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_189(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_189(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_189(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_189(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_189(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_189(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_189(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_189(void)[12])) = 55)) and
  (to_rep((temp___String_Literal_189(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_189(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_189(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_189(void)[16])) = 103))

logic temp___String_Literal_190 : unit -> (int,character) farray

axiom temp___String_Literal_190__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_190(void)[1])) = 46) and
  (to_rep((temp___String_Literal_190(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_190(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_190(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_190(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_190(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_190(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_190(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_190(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_190(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_190(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_190(void)[12])) = 56)) and
  (to_rep((temp___String_Literal_190(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_190(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_190(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_190(void)[16])) = 103))

logic temp___String_Literal_191 : unit -> (int,character) farray

axiom temp___String_Literal_191__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_191(void)[1])) = 46) and
  (to_rep((temp___String_Literal_191(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_191(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_191(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_191(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_191(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_191(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_191(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_191(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_191(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_191(void)[11])) = 48)) and
  (to_rep((temp___String_Literal_191(void)[12])) = 57)) and
  (to_rep((temp___String_Literal_191(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_191(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_191(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_191(void)[16])) = 103))

logic temp___String_Literal_192 : unit -> (int,character) farray

axiom temp___String_Literal_192__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_192(void)[1])) = 46) and
  (to_rep((temp___String_Literal_192(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_192(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_192(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_192(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_192(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_192(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_192(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_192(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_192(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_192(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_192(void)[12])) = 48)) and
  (to_rep((temp___String_Literal_192(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_192(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_192(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_192(void)[16])) = 103))

logic temp___String_Literal_193 : unit -> (int,character) farray

axiom temp___String_Literal_193__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_193(void)[1])) = 46) and
  (to_rep((temp___String_Literal_193(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_193(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_193(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_193(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_193(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_193(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_193(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_193(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_193(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_193(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_193(void)[12])) = 49)) and
  (to_rep((temp___String_Literal_193(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_193(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_193(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_193(void)[16])) = 103))

logic temp___String_Literal_194 : unit -> (int,character) farray

axiom temp___String_Literal_194__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_194(void)[1])) = 46) and
  (to_rep((temp___String_Literal_194(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_194(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_194(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_194(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_194(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_194(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_194(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_194(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_194(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_194(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_194(void)[12])) = 50)) and
  (to_rep((temp___String_Literal_194(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_194(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_194(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_194(void)[16])) = 103))

logic temp___String_Literal_195 : unit -> (int,character) farray

axiom temp___String_Literal_195__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_195(void)[1])) = 46) and
  (to_rep((temp___String_Literal_195(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_195(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_195(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_195(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_195(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_195(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_195(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_195(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_195(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_195(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_195(void)[12])) = 51)) and
  (to_rep((temp___String_Literal_195(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_195(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_195(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_195(void)[16])) = 103))

logic temp___String_Literal_196 : unit -> (int,character) farray

axiom temp___String_Literal_196__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_196(void)[1])) = 46) and
  (to_rep((temp___String_Literal_196(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_196(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_196(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_196(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_196(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_196(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_196(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_196(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_196(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_196(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_196(void)[12])) = 52)) and
  (to_rep((temp___String_Literal_196(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_196(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_196(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_196(void)[16])) = 103))

logic temp___String_Literal_197 : unit -> (int,character) farray

axiom temp___String_Literal_197__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_197(void)[1])) = 46) and
  (to_rep((temp___String_Literal_197(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_197(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_197(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_197(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_197(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_197(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_197(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_197(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_197(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_197(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_197(void)[12])) = 53)) and
  (to_rep((temp___String_Literal_197(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_197(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_197(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_197(void)[16])) = 103))

logic temp___String_Literal_198 : unit -> (int,character) farray

axiom temp___String_Literal_198__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_198(void)[1])) = 46) and
  (to_rep((temp___String_Literal_198(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_198(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_198(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_198(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_198(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_198(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_198(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_198(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_198(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_198(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_198(void)[12])) = 54)) and
  (to_rep((temp___String_Literal_198(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_198(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_198(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_198(void)[16])) = 103))

logic temp___String_Literal_199 : unit -> (int,character) farray

axiom temp___String_Literal_199__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_199(void)[1])) = 46) and
  (to_rep((temp___String_Literal_199(void)[2])) = 47)) and
  (to_rep((temp___String_Literal_199(void)[3])) = 76)) and
  (to_rep((temp___String_Literal_199(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_199(void)[5])) = 103)) and
  (to_rep((temp___String_Literal_199(void)[6])) = 47)) and
  (to_rep((temp___String_Literal_199(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_199(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_199(void)[9])) = 108)) and
  (to_rep((temp___String_Literal_199(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_199(void)[11])) = 49)) and
  (to_rep((temp___String_Literal_199(void)[12])) = 55)) and
  (to_rep((temp___String_Literal_199(void)[13])) = 46)) and
  (to_rep((temp___String_Literal_199(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_199(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_199(void)[16])) = 103))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

axiom logfilenames__def_axiom :
  (logfilenames = auditlog__logfilenames__aggregate_def(temp___String_Literal_183(void),
  temp___String_Literal_184(void), temp___String_Literal_185(void),
  temp___String_Literal_186(void), temp___String_Literal_187(void),
  temp___String_Literal_188(void), temp___String_Literal_189(void),
  temp___String_Literal_190(void), temp___String_Literal_191(void),
  temp___String_Literal_192(void), temp___String_Literal_193(void),
  temp___String_Literal_194(void), temp___String_Literal_195(void),
  temp___String_Literal_196(void), temp___String_Literal_197(void),
  temp___String_Literal_198(void), temp___String_Literal_199(void)))

axiom zerotime__def_axiom : ((zerotime = of_rep2(1901)) and
  ((zerotime1 = of_rep3(1)) and ((zerotime2 = of_rep4(1)) and
  (zerotime3 = of_rep5(0)))))

logic logfiles : (int,us_rep1) farray

logic fileh : us_rep1

logic status : int

logic numberentries : int

logic firsttime : (int,character) farray

logic timeok : bool

logic timecount : int

logic o : millisecst

logic o1 : dayst

logic o2 : monthst

logic o3 : yearst

logic o4 : yearst

logic o5 : monthst

logic o6 : dayst

logic o7 : millisecst

logic temp___1711 : yearst

logic temp___17111 : monthst

logic temp___17112 : dayst

logic temp___17113 : millisecst

logic o8 : (int,character) farray

logic temp___1704 : (int,character) farray

logic temp___17041 : t1

logic o9 : (int,character) farray

logic o10 : t1

logic o11 : integer

logic o12 : integer

logic o13 : bool

logic o14 : int

logic result : bool

logic timeok1 : bool

logic result1 : int

logic numberentries1 : int

logic result2 : (int,character) farray

logic firsttime1 : (int,character) farray

logic result3 : us_rep1

logic fileh1 : us_rep1

logic fileh2 : us_rep1

logic result4 : bool

logic fileh3 : us_rep1

logic ok : bool

logic result5 : bool

logic result6 : int

logic status1 : int

logic fileh4 : us_rep1

logic timecount1 : int

logic file__getstring__text : (int,character) farray

logic result7 : (int,character) farray

logic firsttime2 : (int,character) farray

logic result8 : bool

logic timeok2 : bool

logic result9 : bool

logic fileh5 : us_rep1

logic numberentries2 : int

axiom H :
  (auditlog__logfilenames__aggregate_def(temp___String_Literal_183(void),
  temp___String_Literal_184(void), temp___String_Literal_185(void),
  temp___String_Literal_186(void), temp___String_Literal_187(void),
  temp___String_Literal_188(void), temp___String_Literal_189(void),
  temp___String_Literal_190(void), temp___String_Literal_191(void),
  temp___String_Literal_192(void), temp___String_Literal_193(void),
  temp___String_Literal_194(void), temp___String_Literal_195(void),
  temp___String_Literal_196(void), temp___String_Literal_197(void),
  temp___String_Literal_198(void),
  temp___String_Literal_199(void)) = logfilenames)

axiom H1 : (to_rep5(o) = 0)

axiom H2 : (to_rep4(o1) = 1)

axiom H3 : (to_rep3(o2) = 1)

axiom H4 : (to_rep2(o3) = 1901)

axiom H5 : (o3 = o4)

axiom H6 : (o2 = o5)

axiom H7 : (o1 = o6)

axiom H8 : (o = o7)

axiom H9 : (temp___1711 = o4)

axiom H10 : (temp___17111 = o5)

axiom H11 : (temp___17112 = o6)

axiom H12 : (temp___17113 = o7)

axiom H13 : ((temp___1711 = zerotime) and ((temp___17111 = zerotime1) and
  ((temp___17112 = zerotime2) and (temp___17113 = zerotime3))))

axiom H14 : ((0 <= 2) -> in_range12(status))

axiom H15 : ((0 <= 1024) -> in_range11(numberentries))

axiom H16 : in_range10(i)

axiom H17 : (result = timeok)

axiom H18 : (timeok1 = of_int(1))

axiom H19 : ((0 <= 2147483647) -> in_range4(timecount))

axiom H20 : (result1 = numberentries)

axiom H21 : (numberentries1 = 0)

axiom H22 : (o8 = printtime({ us_split_fields1 = { rec__clock__timet__year =
  zerotime; rec__clock__timet__month = zerotime1; rec__clock__timet__day =
  zerotime2; rec__clock__timet__millisec = zerotime3 } }))

axiom H23 : (result2 = firsttime)

axiom H24 : (firsttime1 = o8)

axiom H25 : (result3 = fileh)

axiom H26 : (fileh1 = (logfiles[i]))

 (* File "auditlog.adb", line 941, characters 0-0 *)
goal WP_parameter_def : dynamic_property1(1, 2147483647, 1, 16)
