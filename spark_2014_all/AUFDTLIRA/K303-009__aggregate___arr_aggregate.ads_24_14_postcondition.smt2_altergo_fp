(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type ta2D1

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ta2D1, ta2D1 -> bool

logic dummy1 : ta2D1

type ta2D1__ref = { ta2D1__content : ta2D1
}

function ta2D1__ref___projection(a: ta2D1__ref) : ta2D1 = (a).ta2D1__content

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,integer) farray,
  int -> (int,(int,integer) farray) farray

axiom singleton_def1 :
  (forall v:(int,integer) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq5 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,integer) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,integer) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq3((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq3((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq3((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___347 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom :
  (forall temp___349:(int,integer) farray.
  forall temp___350:(int,integer) farray. (((temp___347(temp___349,
  temp___350)[1]) = temp___349) and ((temp___347(temp___349,
  temp___350)[2]) = temp___350)))

logic temp___352 : int, int -> (int,integer) farray

axiom def_axiom1 :
  (forall temp___354:int. forall temp___355:int. (((temp___352(temp___354,
  temp___355)[1]) = of_rep(temp___354)) and ((temp___352(temp___354,
  temp___355)[2]) = of_rep(temp___355))))

logic temp___357 : int, int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___359:int. forall temp___360:int. (((temp___357(temp___359,
  temp___360)[1]) = of_rep(temp___359)) and ((temp___357(temp___359,
  temp___360)[2]) = of_rep(temp___360))))

logic temp___362 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom3 :
  (forall temp___364:(int,integer) farray.
  forall temp___365:(int,integer) farray.
  (forall temp___366:int. (((temp___366 = 2) -> ((temp___362(temp___364,
  temp___365)[temp___366]) = temp___364)) and ((not (temp___366 = 2)) ->
  ((temp___362(temp___364, temp___365)[temp___366]) = temp___365)))))

logic temp___367 : int -> (int,integer) farray

axiom def_axiom4 :
  (forall temp___369:int.
  (forall temp___370:int.
  ((temp___367(temp___369)[temp___370]) = of_rep(temp___369))))

logic temp___371 : int -> (int,integer) farray

axiom def_axiom5 :
  (forall temp___373:int.
  (forall temp___374:int.
  ((temp___371(temp___373)[temp___374]) = of_rep(temp___373))))

logic temp___375 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom6 :
  (forall temp___377:(int,integer) farray.
  forall temp___378:(int,integer) farray. (((temp___375(temp___377,
  temp___378)[1]) = temp___377) and ((temp___375(temp___377,
  temp___378)[2]) = temp___378)))

logic temp___380 : int, int -> (int,integer) farray

axiom def_axiom7 :
  (forall temp___382:int. forall temp___383:int.
  (forall temp___384:int. (((temp___384 = 1) -> ((temp___380(temp___382,
  temp___383)[temp___384]) = of_rep(temp___382))) and
  ((not (temp___384 = 1)) -> ((temp___380(temp___382,
  temp___383)[temp___384]) = of_rep(temp___383))))))

logic temp___385 : int, int -> (int,integer) farray

axiom def_axiom8 :
  (forall temp___387:int. forall temp___388:int.
  (forall temp___389:int. (((temp___389 = 1) -> ((temp___385(temp___387,
  temp___388)[temp___389]) = of_rep(temp___387))) and
  ((not (temp___389 = 1)) -> ((temp___385(temp___387,
  temp___388)[temp___389]) = of_rep(temp___388))))))

logic temp___390 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom9 :
  (forall temp___392:(int,integer) farray.
  forall temp___393:(int,integer) farray. (((temp___390(temp___392,
  temp___393)[1]) = temp___392) and ((temp___390(temp___392,
  temp___393)[2]) = temp___393)))

logic temp___395 : int, int -> (int,integer) farray

axiom def_axiom10 :
  (forall temp___397:int. forall temp___398:int.
  (forall temp___399:int. (((temp___399 = 1) -> ((temp___395(temp___397,
  temp___398)[temp___399]) = of_rep(temp___397))) and
  ((not (temp___399 = 1)) -> ((temp___395(temp___397,
  temp___398)[temp___399]) = of_rep(temp___398))))))

logic temp___400 : int, int -> (int,integer) farray

axiom def_axiom11 :
  (forall temp___402:int. forall temp___403:int.
  (forall temp___404:int. (((temp___404 = 1) -> ((temp___400(temp___402,
  temp___403)[temp___404]) = of_rep(temp___402))) and
  ((not (temp___404 = 1)) -> ((temp___400(temp___402,
  temp___403)[temp___404]) = of_rep(temp___403))))))

logic temp___405 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom12 :
  (forall temp___407:(int,integer) farray.
  forall temp___408:(int,integer) farray. (((temp___405(temp___407,
  temp___408)[2]) = temp___407) and ((temp___405(temp___407,
  temp___408)[1]) = temp___408)))

logic temp___410 : int, int -> (int,integer) farray

axiom def_axiom13 :
  (forall temp___412:int. forall temp___413:int.
  (forall temp___414:int. (((temp___414 = 1) -> ((temp___410(temp___412,
  temp___413)[temp___414]) = of_rep(temp___412))) and
  ((not (temp___414 = 1)) -> ((temp___410(temp___412,
  temp___413)[temp___414]) = of_rep(temp___413))))))

logic temp___415 : int, int -> (int,integer) farray

axiom def_axiom14 :
  (forall temp___417:int. forall temp___418:int.
  (forall temp___419:int. (((temp___419 = 2) -> ((temp___415(temp___417,
  temp___418)[temp___419]) = of_rep(temp___417))) and
  ((not (temp___419 = 2)) -> ((temp___415(temp___417,
  temp___418)[temp___419]) = of_rep(temp___418))))))

 (* File "arr_aggregate.ads", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. forall a:(int,(int,integer) farray) farray.
  forall result:(int,(int,integer) farray) farray.
  forall a1:(int,(int,integer) farray) farray.
  forall result1:(int,(int,integer) farray) farray.
  forall a2:(int,(int,integer) farray) farray.
  forall result2:(int,(int,integer) farray) farray.
  forall a3:(int,(int,integer) farray) farray.
  forall result3:(int,(int,integer) farray) farray.
  forall a4:(int,(int,integer) farray) farray.
  forall result4:(int,(int,integer) farray) farray.
  forall a5:(int,(int,integer) farray) farray.
  forall a6:(int,(int,integer) farray) farray.
  forall a7:(int,(int,integer) farray) farray. ((in_range1(one) and
  (in_range1(b) and ((one = 1) and ((((b = 1) and (({ map__content1 = result
  } = { map__content1 = a }) and (a1 = temp___347(temp___352(one, 2),
  temp___357(one, 2))))) or ((not (b = 1)) and ((((b = 2) and (({
  map__content1 = result1 } = { map__content1 = a }) and
  (a2 = temp___362(temp___367(one), temp___371(one))))) or ((not (b = 2)) and
  ((((b = 3) and (({ map__content1 = result2 } = { map__content1 = a }) and
  (a3 = temp___375(temp___380(one, one), temp___385(1, one))))) or
  ((not (b = 3)) and ((((b = 4) and (({ map__content1 = result3 } = {
  map__content1 = a }) and (a4 = temp___390(temp___395(2, one), temp___400(2,
  one))))) or ((not (b = 4)) and ((({ map__content1 = result4 } = {
  map__content1 = a }) and (a5 = temp___405(temp___410(2, one), temp___415(2,
  one)))) and (a4 = a5)))) and (a3 = a4)))) and (a2 = a3)))) and
  (a1 = a2)))) and ((a1 = a6) and (a7 = a1)))))) -> ((b = 1) ->
  (forall j:int. (((1 <= j) and (j <= 2)) -> (to_rep(((a6[j])[one])) = one))))))
