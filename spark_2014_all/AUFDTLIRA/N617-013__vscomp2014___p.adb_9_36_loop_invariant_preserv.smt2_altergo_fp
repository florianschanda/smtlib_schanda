(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : index -> int

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,index) farray
}

logic slide : (int,index) farray, int, int -> (int,index) farray

axiom slide_eq :
  (forall a:(int,index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,index) farray, int, int, (int,index) farray, int,
  int -> (int,index) farray

axiom concat_def :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : index, int -> (int,index) farray

axiom singleton_def :
  (forall v:index.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,index) farray, int, int, (int,index) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,index) farray. forall a__first:int. forall a__last:int.
  forall b:(int,index) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,index) farray, int, int, (int,index) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic saved : (int,index) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic f : (int,index) farray

logic j : int

logic i : int

logic temp___152 : int

logic temp___150 : (int,index) farray

logic temp___153 : (int,index) farray

logic o : index

logic o1 : (int,index) farray

logic o2 : index

logic o3 : (int,index) farray

logic temp___1521 : int

logic temp___1501 : (int,index) farray

logic temp___1531 : (int,index) farray

logic o4 : index

logic o5 : (int,index) farray

logic o6 : index

logic o7 : (int,index) farray

logic temp___1522 : int

logic temp___1502 : (int,index) farray

logic temp___1532 : (int,index) farray

logic o8 : index

logic o9 : (int,index) farray

logic o10 : index

logic o11 : (int,index) farray

logic temp___1523 : int

logic temp___1503 : (int,index) farray

logic temp___1533 : (int,index) farray

logic o12 : index

logic o13 : (int,index) farray

logic o14 : index

logic o15 : (int,index) farray

logic temp___1524 : int

logic temp___1504 : (int,index) farray

logic temp___1534 : (int,index) farray

logic o16 : index

logic o17 : (int,index) farray

logic o18 : index

logic o19 : (int,index) farray

logic temp___1525 : int

logic temp___1505 : (int,index) farray

logic temp___1535 : (int,index) farray

logic o20 : index

logic o21 : (int,index) farray

logic o22 : index

logic o23 : (int,index) farray

logic temp___1526 : int

logic temp___1506 : (int,index) farray

logic temp___1536 : (int,index) farray

logic o24 : index

logic o25 : (int,index) farray

logic o26 : index

logic o27 : (int,index) farray

logic temp___1527 : int

logic temp___1507 : (int,index) farray

logic temp___1537 : (int,index) farray

logic o28 : index

logic o29 : (int,index) farray

logic o30 : index

logic o31 : (int,index) farray

logic temp___1528 : int

logic temp___1508 : (int,index) farray

logic temp___1538 : (int,index) farray

logic o32 : index

logic o33 : (int,index) farray

logic o34 : index

logic o35 : (int,index) farray

logic o36 : index

logic o37 : (int,index) farray

logic o38 : index

logic o39 : (int,index) farray

logic f1 : (int,index) farray

logic result : int

logic j1 : int

logic result1 : int

logic i1 : int

logic result2 : (int,index) farray

logic f2 : (int,index) farray

logic f3 : (int,index) farray

logic i2 : int

logic result3 : int

logic i3 : int

logic result4 : (int,index) farray

logic f4 : (int,index) farray

logic f5 : (int,index) farray

logic i4 : int

logic f6 : (int,index) farray

logic i5 : int

logic f7 : (int,index) farray

logic i6 : int

logic f8 : (int,index) farray

logic i7 : int

logic f9 : (int,index) farray

logic i8 : int

logic f10 : (int,index) farray

logic i9 : int

logic result5 : int

logic j2 : int

logic result6 : int

logic i10 : int

logic result7 : (int,index) farray

logic f11 : (int,index) farray

logic f12 : (int,index) farray

logic i11 : int

logic result8 : int

logic i12 : int

logic result9 : (int,index) farray

logic f13 : (int,index) farray

logic f14 : (int,index) farray

logic i13 : int

logic f15 : (int,index) farray

logic i14 : int

logic f16 : (int,index) farray

logic i15 : int

logic f17 : (int,index) farray

logic i16 : int

logic f18 : (int,index) farray

logic i17 : int

logic f19 : (int,index) farray

logic i18 : int

logic f20 : (int,index) farray

logic i19 : int

logic f21 : (int,index) farray

logic i20 : int

logic result10 : int

logic j3 : int

logic result11 : int

logic i21 : int

logic result12 : (int,index) farray

logic f22 : (int,index) farray

logic f23 : (int,index) farray

logic i22 : int

logic result13 : int

logic i23 : int

logic result14 : (int,index) farray

logic f24 : (int,index) farray

logic f25 : (int,index) farray

logic i24 : int

logic f26 : (int,index) farray

logic i25 : int

logic f27 : (int,index) farray

logic i26 : int

logic f28 : (int,index) farray

logic i27 : int

logic f29 : (int,index) farray

logic i28 : int

logic f30 : (int,index) farray

logic i29 : int

logic f31 : (int,index) farray

logic i30 : int

logic f32 : (int,index) farray

logic i31 : int

logic result15 : int

logic j4 : int

logic result16 : int

logic i32 : int

logic result17 : (int,index) farray

logic f33 : (int,index) farray

logic f34 : (int,index) farray

logic i33 : int

logic result18 : int

logic i34 : int

logic result19 : (int,index) farray

logic f35 : (int,index) farray

logic f36 : (int,index) farray

logic i35 : int

logic f37 : (int,index) farray

logic i36 : int

logic f38 : (int,index) farray

logic i37 : int

logic f39 : (int,index) farray

logic i38 : int

logic f40 : (int,index) farray

logic i39 : int

logic f41 : (int,index) farray

logic i40 : int

logic f42 : (int,index) farray

logic i41 : int

logic f43 : (int,index) farray

logic i42 : int

logic result20 : int

logic j5 : int

logic result21 : int

logic i43 : int

logic result22 : (int,index) farray

logic f44 : (int,index) farray

logic f45 : (int,index) farray

logic i44 : int

logic result23 : int

logic i45 : int

logic result24 : (int,index) farray

logic f46 : (int,index) farray

logic f47 : (int,index) farray

logic i46 : int

logic f48 : (int,index) farray

logic i47 : int

logic f49 : (int,index) farray

logic i48 : int

logic f50 : (int,index) farray

logic i49 : int

logic f51 : (int,index) farray

logic i50 : int

logic f52 : (int,index) farray

logic i51 : int

logic f53 : (int,index) farray

logic i52 : int

logic f54 : (int,index) farray

logic i53 : int

logic result25 : int

logic j6 : int

logic result26 : int

logic i54 : int

logic result27 : (int,index) farray

logic f55 : (int,index) farray

logic f56 : (int,index) farray

logic i55 : int

logic result28 : int

logic i56 : int

logic result29 : (int,index) farray

logic f57 : (int,index) farray

logic f58 : (int,index) farray

logic i57 : int

logic f59 : (int,index) farray

logic i58 : int

logic f60 : (int,index) farray

logic i59 : int

logic f61 : (int,index) farray

logic i60 : int

logic f62 : (int,index) farray

logic i61 : int

logic f63 : (int,index) farray

logic i62 : int

logic f64 : (int,index) farray

logic i63 : int

logic f65 : (int,index) farray

logic i64 : int

logic result30 : int

logic j7 : int

logic result31 : int

logic i65 : int

logic result32 : (int,index) farray

logic f66 : (int,index) farray

logic f67 : (int,index) farray

logic i66 : int

logic result33 : int

logic i67 : int

logic result34 : (int,index) farray

logic f68 : (int,index) farray

logic f69 : (int,index) farray

logic i68 : int

logic f70 : (int,index) farray

logic i69 : int

logic f71 : (int,index) farray

logic i70 : int

logic f72 : (int,index) farray

logic i71 : int

logic f73 : (int,index) farray

logic i72 : int

logic f74 : (int,index) farray

logic i73 : int

logic f75 : (int,index) farray

logic i74 : int

logic f76 : (int,index) farray

logic i75 : int

logic result35 : int

logic j8 : int

logic result36 : int

logic i76 : int

logic result37 : (int,index) farray

logic f77 : (int,index) farray

logic f78 : (int,index) farray

logic i77 : int

logic result38 : int

logic i78 : int

logic result39 : (int,index) farray

logic f79 : (int,index) farray

logic f80 : (int,index) farray

logic i79 : int

logic f81 : (int,index) farray

logic i80 : int

logic f82 : (int,index) farray

logic i81 : int

logic f83 : (int,index) farray

logic i82 : int

logic f84 : (int,index) farray

logic i83 : int

logic f85 : (int,index) farray

logic i84 : int

logic f86 : (int,index) farray

logic i85 : int

logic f87 : (int,index) farray

logic i86 : int

logic result40 : int

logic j9 : int

logic result41 : int

logic i87 : int

logic result42 : (int,index) farray

logic f88 : (int,index) farray

logic f89 : (int,index) farray

logic i88 : int

logic result43 : int

logic i89 : int

logic result44 : (int,index) farray

logic f90 : (int,index) farray

logic f91 : (int,index) farray

logic i90 : int

logic f92 : (int,index) farray

logic i91 : int

logic f93 : (int,index) farray

logic i92 : int

logic f94 : (int,index) farray

logic i93 : int

logic f95 : (int,index) farray

logic i94 : int

logic f96 : (int,index) farray

logic i95 : int

logic f97 : (int,index) farray

logic i96 : int

logic f98 : (int,index) farray

logic i97 : int

logic result45 : int

logic j10 : int

logic result46 : int

logic i98 : int

logic result47 : (int,index) farray

logic f99 : (int,index) farray

logic f100 : (int,index) farray

logic i99 : int

logic result48 : int

logic i100 : int

logic result49 : (int,index) farray

logic f101 : (int,index) farray

logic f102 : (int,index) farray

logic i101 : int

logic f103 : (int,index) farray

logic i102 : int

axiom H : (f = saved)

axiom H1 : (result = j)

axiom H2 : (j1 = 1)

axiom H3 : (result1 = i)

axiom H4 : (i1 = 1)

axiom H5 : (1 <= i1)

axiom H6 : (i1 <= 10)

axiom H7 : (to_rep(o) = j1)

axiom H8 : (o1 = (f[i1 <- o]))

axiom H9 : (result2 = f)

axiom H10 : (f2 = o1)

axiom H11 : (bool_eq3(f, 1, 10, saved, 1, 10) = true)

axiom H12 :
  (((forall temp___151:int. (((1 <= temp___151) and (temp___151 <= 10)) ->
    ((i2 <  temp___151) -> ((f3[temp___151]) = (f[temp___151]))))) and
  ((1 <= 10) -> in_range1(i2))) and ((1 <= i2) and (i2 <= 10)))

axiom H13 : (not (i2 = 10))

axiom H14 : (result3 = i2)

axiom H15 : (i3 = (i2 + 1))

axiom H16 : (to_rep(o2) = j1)

axiom H17 : (o3 = (f3[i3 <- o2]))

axiom H18 : (result4 = f3)

axiom H19 : (f4 = o3)

 (* File "p.ads", line 5, characters 0-0 *)
goal WP_parameter_def : (bool_eq3(f, 1, 10, saved, 1, 10) = true)
