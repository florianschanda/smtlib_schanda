(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort track_opt_id 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (track_opt_id track_opt_id) Bool)
(declare-const dummy track_opt_id)
(declare-datatypes () ((track_opt_id__ref (mk_track_opt_id__ref (track_opt_id__content track_opt_id)))))
(define-fun track_opt_id__ref___projection ((a track_opt_id__ref)) track_opt_id (track_opt_id__content a))
(define-fun dynamic_invariant ((temp___expr_227 Int) (temp___is_init_223 Bool) (temp___skip_constant_224 Bool) (temp___do_toplevel_225 Bool) (temp___do_typ_inv_226 Bool)) Bool (=> (or (= temp___is_init_223 true) (<= 0 8)) (in_range1 temp___expr_227)))
(declare-sort track_id 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (track_id track_id) Bool)
(declare-const dummy1 track_id)
(declare-datatypes () ((track_id__ref (mk_track_id__ref (track_id__content track_id)))))
(define-fun track_id__ref___projection ((a track_id__ref)) track_id (track_id__content a))
(declare-fun to_rep (track_id) Int)
(declare-fun of_rep (Int) track_id)
(assert (forall ((x track_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x track_id)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort prev_id 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (prev_id prev_id) Bool)
(declare-const dummy2 prev_id)
(declare-datatypes () ((prev_id__ref (mk_prev_id__ref (prev_id__content prev_id)))))
(define-fun prev_id__ref___projection ((a prev_id__ref)) prev_id (prev_id__content a))
(declare-fun no_track_precedes_itself (tuple0) Bool)
(declare-fun no_track_precedes_itself__function_guard (Bool tuple0) Bool)
(declare-sort location 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (location location) Bool)
(declare-const dummy3 location)
(declare-datatypes () ((location__ref (mk_location__ref (location__content location)))))
(define-fun location__ref___projection ((a location__ref)) location (location__content a))
(declare-fun to_rep1 (location) Int)
(declare-fun of_rep1 (Int) location)
(assert (forall ((x location)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x location)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort positive 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (positive positive) Bool)
(declare-const dummy4 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-fun to_rep2 (positive) Int)
(declare-fun of_rep2 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x positive)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__trains__track__from location) (rec__trains__track__to location) (rec__trains__track__length positive)))))
(define-fun us_split_fields_From__projection ((a us_split_fields)) location (rec__trains__track__from a))
(define-fun us_split_fields_To__projection ((a us_split_fields)) location (rec__trains__track__to a))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) positive (rec__trains__track__length a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__trains__track__from (us_split_fields1 a))) (to_rep1 (rec__trains__track__from (us_split_fields1 b)))) (= (to_rep1 (rec__trains__track__to (us_split_fields1 a))) (to_rep1 (rec__trains__track__to (us_split_fields1 b))))) (= (to_rep2 (rec__trains__track__length (us_split_fields1 a))) (to_rep2 (rec__trains__track__length (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const trains__track__from__first__bit Int)
(declare-const trains__track__from__last__bit Int)
(declare-const trains__track__from__position Int)
(assert (<= 0 trains__track__from__first__bit))
(assert (< trains__track__from__first__bit trains__track__from__last__bit))
(assert (<= 0 trains__track__from__position))
(declare-const trains__track__to__first__bit Int)
(declare-const trains__track__to__last__bit Int)
(declare-const trains__track__to__position Int)
(assert (<= 0 trains__track__to__first__bit))
(assert (< trains__track__to__first__bit trains__track__to__last__bit))
(assert (<= 0 trains__track__to__position))
(declare-const trains__track__length__first__bit Int)
(declare-const trains__track__length__last__bit Int)
(declare-const trains__track__length__position Int)
(assert (<= 0 trains__track__length__first__bit))
(assert (< trains__track__length__first__bit trains__track__length__last__bit))
(assert (<= 0 trains__track__length__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((track__ref (mk_track__ref (track__content us_rep)))))
(define-fun track__ref___projection ((a track__ref)) us_rep (track__content a))
(declare-fun to_rep3 (track_opt_id) Int)
(declare-fun of_rep3 (Int) track_opt_id)
(assert (forall ((x track_opt_id)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x track_opt_id)) (! (in_range1 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const tracks (Array Int us_rep))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int track_opt_id))))))
(declare-fun slide1 ((Array Int track_opt_id) Int Int) (Array Int track_opt_id))
(assert (forall ((a (Array Int track_opt_id))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int track_opt_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int track_opt_id)) (a__first Int) (a__last Int) (b (Array Int track_opt_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_165 Int)) (=> (and (<= a__first temp___idx_165) (<= temp___idx_165 a__last)) (= (to_rep3 (select a temp___idx_165)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_165))))))) true false))
(assert (forall ((a (Array Int track_opt_id)) (b (Array Int track_opt_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_165 Int)) (=> (and (<= a__first temp___idx_165) (<= temp___idx_165 a__last)) (= (to_rep3 (select a temp___idx_165)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_165)))))))))))
(declare-const dummy6 (Array Int track_opt_id))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int track_opt_id)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int track_opt_id)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int track_opt_id)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int track_opt_id))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int track_opt_id))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int track_opt_id))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq6 ((Array Int track_opt_id) (Array Int track_opt_id)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int track_opt_id)))))))
(declare-fun slide2 ((Array Int (Array Int track_opt_id)) Int Int) (Array Int (Array Int track_opt_id)))
(assert (forall ((a (Array Int (Array Int track_opt_id)))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int track_opt_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int track_opt_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int track_opt_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_166 Int)) (=> (and (<= a__first temp___idx_166) (<= temp___idx_166 a__last)) (= (bool_eq2 (select a temp___idx_166) 1 3 (select b (+ (- b__first a__first) temp___idx_166)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int track_opt_id))) (b (Array Int (Array Int track_opt_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_166 Int)) (=> (and (<= a__first temp___idx_166) (<= temp___idx_166 a__last)) (= (bool_eq2 (select a temp___idx_166) 1 3 (select b (+ (- b__first a__first) temp___idx_166)) 1 3) true))))))))
(declare-const previous_tracks (Array Int (Array Int track_opt_id)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (no_track_precedes_itself us_void_param) true) (forall ((track Int)) (=> (and (<= 1 track) (<= track 8)) (forall ((id Int)) (=> (and (<= 1 id) (<= id 3)) (not (= (to_rep3 (let ((temp___255 (select previous_tracks (to_rep1 (rec__trains__track__from (us_split_fields1 (select tracks track))))))) (select temp___255 id))) track))))))) :pattern ((no_track_precedes_itself us_void_param)))))
(declare-sort train_id 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (train_id train_id) Bool)
(declare-const dummy7 train_id)
(declare-datatypes () ((train_id__ref (mk_train_id__ref (train_id__content train_id)))))
(define-fun train_id__ref___projection ((a train_id__ref)) train_id (train_id__content a))
(define-fun dynamic_invariant1 ((temp___expr_260 Int) (temp___is_init_256 Bool) (temp___skip_constant_257 Bool) (temp___do_toplevel_258 Bool) (temp___do_typ_inv_259 Bool)) Bool (=> (or (= temp___is_init_256 true) (<= 1 10)) (in_range6 temp___expr_260)))
(declare-sort natural 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (natural natural) Bool)
(declare-const dummy8 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep4 (natural) Int)
(declare-fun of_rep4 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x natural)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__trains__train_position__track_begin track_id) (rec__trains__train_position__pos_begin natural) (rec__trains__train_position__track_end track_id)))))
(define-fun us_split_fields_Track_Begin__projection ((a us_split_fields2)) track_id (rec__trains__train_position__track_begin a))
(define-fun us_split_fields_Pos_Begin__projection ((a us_split_fields2)) natural (rec__trains__train_position__pos_begin a))
(define-fun us_split_fields_Track_End__projection ((a us_split_fields2)) track_id (rec__trains__train_position__track_end a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 a))) (to_rep (rec__trains__train_position__track_begin (us_split_fields3 b)))) (= (to_rep4 (rec__trains__train_position__pos_begin (us_split_fields3 a))) (to_rep4 (rec__trains__train_position__pos_begin (us_split_fields3 b))))) (= (to_rep (rec__trains__train_position__track_end (us_split_fields3 a))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const trains__train_position__track_begin__first__bit Int)
(declare-const trains__train_position__track_begin__last__bit Int)
(declare-const trains__train_position__track_begin__position Int)
(assert (<= 0 trains__train_position__track_begin__first__bit))
(assert (< trains__train_position__track_begin__first__bit trains__train_position__track_begin__last__bit))
(assert (<= 0 trains__train_position__track_begin__position))
(declare-const trains__train_position__pos_begin__first__bit Int)
(declare-const trains__train_position__pos_begin__last__bit Int)
(declare-const trains__train_position__pos_begin__position Int)
(assert (<= 0 trains__train_position__pos_begin__first__bit))
(assert (< trains__train_position__pos_begin__first__bit trains__train_position__pos_begin__last__bit))
(assert (<= 0 trains__train_position__pos_begin__position))
(declare-const trains__train_position__track_end__first__bit Int)
(declare-const trains__train_position__track_end__last__bit Int)
(declare-const trains__train_position__track_end__position Int)
(assert (<= 0 trains__train_position__track_end__first__bit))
(assert (< trains__train_position__track_end__first__bit trains__train_position__track_end__last__bit))
(assert (<= 0 trains__train_position__track_end__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((train_position__ref (mk_train_position__ref (train_position__content us_rep1)))))
(define-fun train_position__ref___projection ((a train_position__ref)) us_rep1 (train_position__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep1))))))
(declare-fun slide3 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_204 Int)) (=> (and (<= a__first temp___idx_204) (<= temp___idx_204 a__last)) (= (bool_eq4 (select a temp___idx_204) (select b (+ (- b__first a__first) temp___idx_204))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_204 Int)) (=> (and (<= a__first temp___idx_204) (<= temp___idx_204 a__last)) (= (bool_eq4 (select a temp___idx_204) (select b (+ (- b__first a__first) temp___idx_204))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun one_train_at_most_per_track (Int (Array Int us_rep1)) Bool)
(declare-fun one_train_at_most_per_track__function_guard (Bool Int (Array Int us_rep1)) Bool)
(assert true)
(assert (forall ((trains__cur_num_trains Int)) (forall ((trains__trains (Array Int us_rep1))) (! (= (= (one_train_at_most_per_track trains__cur_num_trains trains__trains) true) (forall ((train Int)) (=> (and (<= 1 train) (<= train trains__cur_num_trains)) (forall ((other_train Int)) (=> (and (<= 1 other_train) (<= other_train trains__cur_num_trains)) (=> (not (= other_train train)) (and (and (and (not (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 (select trains__trains train)))) (to_rep (rec__trains__train_position__track_begin (us_split_fields3 (select trains__trains other_train)))))) (not (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 (select trains__trains train)))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 (select trains__trains other_train))))))) (not (= (to_rep (rec__trains__train_position__track_end (us_split_fields3 (select trains__trains train)))) (to_rep (rec__trains__train_position__track_begin (us_split_fields3 (select trains__trains other_train))))))) (not (= (to_rep (rec__trains__train_position__track_end (us_split_fields3 (select trains__trains train)))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 (select trains__trains other_train))))))))))))) :pattern ((one_train_at_most_per_track trains__cur_num_trains trains__trains))))))
(declare-sort signal 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq10 (signal signal) Bool)
(declare-const dummy10 signal)
(declare-datatypes () ((signal__ref (mk_signal__ref (signal__content signal)))))
(define-fun signal__ref___projection ((a signal__ref)) signal (signal__content a))
(declare-fun to_rep5 (signal) Int)
(declare-fun of_rep5 (Int) signal)
(assert (forall ((x signal)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x signal)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int signal))))))
(declare-fun slide4 ((Array Int signal) Int Int) (Array Int signal))
(assert (forall ((a (Array Int signal))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int signal))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int signal)) (a__first Int) (a__last Int) (b (Array Int signal)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_205 Int)) (=> (and (<= a__first temp___idx_205) (<= temp___idx_205 a__last)) (= (to_rep5 (select a temp___idx_205)) (to_rep5 (select b (+ (- b__first a__first) temp___idx_205))))))) true false))
(assert (forall ((a (Array Int signal)) (b (Array Int signal))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_205 Int)) (=> (and (<= a__first temp___idx_205) (<= temp___idx_205 a__last)) (= (to_rep5 (select a temp___idx_205)) (to_rep5 (select b (+ (- b__first a__first) temp___idx_205)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun occupied_tracks_on_red (Int (Array Int us_rep1) (Array Int signal)) Bool)
(declare-fun occupied_tracks_on_red__function_guard (Bool Int (Array Int us_rep1) (Array Int signal)) Bool)
(assert true)
(assert (forall ((trains__cur_num_trains Int)) (forall ((trains__trains (Array Int us_rep1))) (forall ((trains__track_signals (Array Int signal))) (! (= (= (occupied_tracks_on_red trains__cur_num_trains trains__trains trains__track_signals) true) (forall ((train Int)) (=> (and (<= 1 train) (<= train trains__cur_num_trains)) (and (= (to_rep5 (select trains__track_signals (to_rep (rec__trains__train_position__track_begin (us_split_fields3 (select trains__trains train)))))) 2) (= (to_rep5 (select trains__track_signals (to_rep (rec__trains__train_position__track_end (us_split_fields3 (select trains__trains train)))))) 2))))) :pattern ((occupied_tracks_on_red trains__cur_num_trains trains__trains trains__track_signals)))))))
(declare-fun get_previous_track (us_rep1 Int) Int)
(declare-fun get_previous_track__function_guard (Int us_rep1 Int) Bool)
(define-fun dynamic_invariant2 ((temp___expr_241 Int) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool (=> (or (= temp___is_init_237 true) (<= 1 3)) (in_range3 temp___expr_241)))
(assert (forall ((position us_rep1)) (forall ((id Int)) (! (=> (dynamic_invariant2 id true true true true) (dynamic_invariant (get_previous_track position id) true false true true)) :pattern ((get_previous_track position id))))))
(assert (forall ((position us_rep1)) (forall ((id Int)) (! (=> (dynamic_invariant2 id true true true true) (= (get_previous_track position id) (to_rep3 (let ((temp___292 (select previous_tracks (to_rep1 (rec__trains__track__from (us_split_fields1 (select tracks (to_rep (rec__trains__train_position__track_end (us_split_fields3 position)))))))))) (select temp___292 id))))) :pattern ((get_previous_track position id))))))
(declare-fun get_other_previous_track (us_rep1 Int) Int)
(declare-fun get_other_previous_track__function_guard (Int us_rep1 Int) Bool)
(assert (forall ((position us_rep1)) (forall ((id Int)) (! (=> (dynamic_invariant2 id true true true true) (dynamic_invariant (get_other_previous_track position id) true false true true)) :pattern ((get_other_previous_track position id))))))
(assert (forall ((position us_rep1)) (forall ((id Int)) (! (=> (dynamic_invariant2 id true true true true) (= (get_other_previous_track position id) (ite (= (to_rep3 (let ((temp___296 (select previous_tracks (to_rep1 (rec__trains__track__from (us_split_fields1 (select tracks (to_rep (rec__trains__train_position__track_begin (us_split_fields3 position)))))))))) (select temp___296 id))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 position)))) 0 (to_rep3 (let ((temp___295 (select previous_tracks (to_rep1 (rec__trains__track__from (us_split_fields1 (select tracks (to_rep (rec__trains__train_position__track_begin (us_split_fields3 position)))))))))) (select temp___295 id)))))) :pattern ((get_other_previous_track position id))))))
(declare-fun is_previous_track (us_rep1 Int) Bool)
(declare-fun is_previous_track__function_guard (Bool us_rep1 Int) Bool)
(define-fun dynamic_invariant3 ((temp___expr_234 Int) (temp___is_init_230 Bool) (temp___skip_constant_231 Bool) (temp___do_toplevel_232 Bool) (temp___do_typ_inv_233 Bool)) Bool (=> (or (= temp___is_init_230 true) (<= 1 8)) (in_range2 temp___expr_234)))
(assert true)
(assert (forall ((position us_rep1)) (forall ((track Int)) (! (= (= (is_previous_track position track) true) (exists ((id Int)) (and (and (<= 1 id) (<= id 3)) (or (= track (get_previous_track position id)) (= track (get_other_previous_track position id)))))) :pattern ((is_previous_track position track))))))
(declare-fun previous_tracks_on_orange_or_red (Int (Array Int us_rep1) (Array Int signal)) Bool)
(declare-fun previous_tracks_on_orange_or_red__function_guard (Bool Int (Array Int us_rep1) (Array Int signal)) Bool)
(assert true)
(assert (forall ((trains__cur_num_trains Int)) (forall ((trains__trains (Array Int us_rep1))) (forall ((trains__track_signals (Array Int signal))) (! (= (= (previous_tracks_on_orange_or_red trains__cur_num_trains trains__trains trains__track_signals) true) (forall ((train Int)) (=> (and (<= 1 train) (<= train trains__cur_num_trains)) (forall ((id Int)) (=> (and (<= 1 id) (<= id 3)) (and (=> (not (= (get_previous_track (select trains__trains train) id) 0)) (let ((temp___305 (to_rep5 (select trains__track_signals (get_previous_track (select trains__trains train) id))))) (or (= temp___305 1) (= temp___305 2)))) (=> (not (= (get_other_previous_track (select trains__trains train) id) 0)) (let ((temp___306 (to_rep5 (select trains__track_signals (get_other_previous_track (select trains__trains train) id))))) (or (= temp___306 1) (= temp___306 2)))))))))) :pattern ((previous_tracks_on_orange_or_red trains__cur_num_trains trains__trains trains__track_signals)))))))
(declare-fun safe_signaling (Int (Array Int us_rep1) (Array Int signal)) Bool)
(declare-fun safe_signaling__function_guard (Bool Int (Array Int us_rep1) (Array Int signal)) Bool)
(assert true)
(assert (forall ((trains__cur_num_trains Int)) (forall ((trains__trains (Array Int us_rep1))) (forall ((trains__track_signals (Array Int signal))) (! (= (= (safe_signaling trains__cur_num_trains trains__trains trains__track_signals) true) (and (= (occupied_tracks_on_red trains__cur_num_trains trains__trains trains__track_signals) true) (= (previous_tracks_on_orange_or_red trains__cur_num_trains trains__trains trains__track_signals) true))) :pattern ((safe_signaling trains__cur_num_trains trains__trains trains__track_signals)))))))
(declare-fun moving_inside_current_tracks (us_rep1 us_rep1) Bool)
(declare-fun moving_inside_current_tracks__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((cur_position us_rep1) (new_position us_rep1)) (! (= (= (moving_inside_current_tracks cur_position new_position) true) (and (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 cur_position))) (to_rep (rec__trains__train_position__track_begin (us_split_fields3 new_position)))) (= (to_rep (rec__trains__train_position__track_end (us_split_fields3 cur_position))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 new_position)))))) :pattern ((moving_inside_current_tracks cur_position new_position)))))
(declare-fun entering_a_track (us_rep1) Bool)
(declare-fun entering_a_track__function_guard (Bool us_rep1) Bool)
(declare-fun inside_a_track (us_rep1) Bool)
(declare-fun inside_a_track__function_guard (Bool us_rep1) Bool)
(declare-fun moving_away_from_current_track (us_rep1 us_rep1) Bool)
(declare-fun moving_away_from_current_track__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((cur_position us_rep1) (new_position us_rep1)) (! (= (= (moving_away_from_current_track cur_position new_position) true) (and (and (= (entering_a_track cur_position) true) (= (inside_a_track new_position) true)) (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 cur_position))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 new_position)))))) :pattern ((moving_away_from_current_track cur_position new_position)))))
(declare-fun valid_move (us_rep1 us_rep1) Bool)
(declare-fun valid_move__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-fun moving_to_a_new_track (us_rep1 us_rep1) Bool)
(declare-fun moving_to_a_new_track__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((cur_position us_rep1) (new_position us_rep1)) (! (= (= (valid_move cur_position new_position) true) (or (or (= (moving_inside_current_tracks cur_position new_position) true) (= (moving_to_a_new_track cur_position new_position) true)) (= (moving_away_from_current_track cur_position new_position) true))) :pattern ((valid_move cur_position new_position)))))
(declare-sort move_result 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq11 (move_result move_result) Bool)
(declare-const dummy11 move_result)
(declare-datatypes () ((move_result__ref (mk_move_result__ref (move_result__content move_result)))))
(define-fun move_result__ref___projection ((a move_result__ref)) move_result (move_result__content a))
(define-fun dynamic_invariant4 ((temp___expr_317 Int) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool) (temp___do_typ_inv_316 Bool)) Bool (=> (or (= temp___is_init_313 true) (<= 0 3)) (in_range9 temp___expr_317)))
(declare-const train Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const new_position us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const cur_position us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range7 temp___expr_39)))
(define-fun dynamic_invariant6 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range5 temp___expr_46)))
(define-fun dynamic_invariant7 ((temp___expr_210 Int) (temp___is_init_206 Bool) (temp___skip_constant_207 Bool) (temp___do_toplevel_208 Bool) (temp___do_typ_inv_209 Bool)) Bool (=> (or (= temp___is_init_206 true) (<= 1 5)) (in_range4 temp___expr_210)))
(declare-fun trains__tracks__aggregate_def (us_rep us_rep us_rep us_rep us_rep us_rep us_rep us_rep) (Array Int us_rep))
(assert (= tracks (trains__tracks__aggregate_def (mk___rep (mk___split_fields (of_rep1 1) (of_rep1 2) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 1) (of_rep1 3) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 2) (of_rep1 3) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 2) (of_rep1 5) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 3) (of_rep1 4) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 3) (of_rep1 5) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 4) (of_rep1 5) (of_rep2 10))) (mk___rep (mk___split_fields (of_rep1 5) (of_rep1 1) (of_rep2 10))))))
(assert (forall ((temp___156 us_rep) (temp___157 us_rep) (temp___158 us_rep) (temp___159 us_rep) (temp___160 us_rep) (temp___161 us_rep) (temp___162 us_rep) (temp___163 us_rep)) (let ((temp___155 (trains__tracks__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163))) (and (and (and (and (and (and (and (= (select temp___155 1) temp___156) (= (select temp___155 2) temp___157)) (= (select temp___155 3) temp___158)) (= (select temp___155 4) temp___159)) (= (select temp___155 5) temp___160)) (= (select temp___155 6) temp___161)) (= (select temp___155 7) temp___162)) (= (select temp___155 8) temp___163)))))
(declare-fun trains__previous_tracks__aggregate_def ((Array Int track_opt_id) (Array Int track_opt_id) (Array Int track_opt_id) (Array Int track_opt_id) (Array Int track_opt_id)) (Array Int (Array Int track_opt_id)))
(declare-fun temp___174 (Int Int Int) (Array Int track_opt_id))
(declare-fun temp___180 (Int Int Int) (Array Int track_opt_id))
(declare-fun temp___186 (Int Int Int) (Array Int track_opt_id))
(declare-fun temp___192 (Int Int Int) (Array Int track_opt_id))
(declare-fun temp___198 (Int Int Int) (Array Int track_opt_id))
(assert (= previous_tracks (trains__previous_tracks__aggregate_def (temp___174 8 0 0) (temp___180 1 0 0) (temp___186 2 3 0) (temp___192 5 0 0) (temp___198 4 6 7))))
(assert (forall ((temp___168 (Array Int track_opt_id)) (temp___169 (Array Int track_opt_id)) (temp___170 (Array Int track_opt_id)) (temp___171 (Array Int track_opt_id)) (temp___172 (Array Int track_opt_id))) (let ((temp___167 (trains__previous_tracks__aggregate_def temp___168 temp___169 temp___170 temp___171 temp___172))) (and (and (and (and (= (select temp___167 1) temp___168) (= (select temp___167 2) temp___169)) (= (select temp___167 3) temp___170)) (= (select temp___167 4) temp___171)) (= (select temp___167 5) temp___172)))))
(assert (forall ((temp___176 Int) (temp___177 Int) (temp___178 Int)) (let ((temp___175 (temp___174 temp___176 temp___177 temp___178))) (=> (and (and (dynamic_invariant temp___176 true true true true) (dynamic_invariant temp___177 true true true true)) (dynamic_invariant temp___178 true true true true)) (and (and (= (to_rep3 (select temp___175 1)) temp___176) (= (to_rep3 (select temp___175 2)) temp___177)) (= (to_rep3 (select temp___175 3)) temp___178))))))
(assert (forall ((temp___182 Int) (temp___183 Int) (temp___184 Int)) (let ((temp___181 (temp___180 temp___182 temp___183 temp___184))) (=> (and (and (dynamic_invariant temp___182 true true true true) (dynamic_invariant temp___183 true true true true)) (dynamic_invariant temp___184 true true true true)) (and (and (= (to_rep3 (select temp___181 1)) temp___182) (= (to_rep3 (select temp___181 2)) temp___183)) (= (to_rep3 (select temp___181 3)) temp___184))))))
(assert (forall ((temp___188 Int) (temp___189 Int) (temp___190 Int)) (let ((temp___187 (temp___186 temp___188 temp___189 temp___190))) (=> (and (and (dynamic_invariant temp___188 true true true true) (dynamic_invariant temp___189 true true true true)) (dynamic_invariant temp___190 true true true true)) (and (and (= (to_rep3 (select temp___187 1)) temp___188) (= (to_rep3 (select temp___187 2)) temp___189)) (= (to_rep3 (select temp___187 3)) temp___190))))))
(assert (forall ((temp___194 Int) (temp___195 Int) (temp___196 Int)) (let ((temp___193 (temp___192 temp___194 temp___195 temp___196))) (=> (and (and (dynamic_invariant temp___194 true true true true) (dynamic_invariant temp___195 true true true true)) (dynamic_invariant temp___196 true true true true)) (and (and (= (to_rep3 (select temp___193 1)) temp___194) (= (to_rep3 (select temp___193 2)) temp___195)) (= (to_rep3 (select temp___193 3)) temp___196))))))
(assert (forall ((temp___200 Int) (temp___201 Int) (temp___202 Int)) (let ((temp___199 (temp___198 temp___200 temp___201 temp___202))) (=> (and (and (dynamic_invariant temp___200 true true true true) (dynamic_invariant temp___201 true true true true)) (dynamic_invariant temp___202 true true true true)) (and (and (= (to_rep3 (select temp___199 1)) temp___200) (= (to_rep3 (select temp___199 2)) temp___201)) (= (to_rep3 (select temp___199 3)) temp___202))))))
(assert true)
(assert (forall ((position us_rep1)) (! (= (= (entering_a_track position) true) (and (not (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 position))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 position))))) (exists ((id Int)) (and (and (<= 1 id) (<= id 3)) (= (to_rep (rec__trains__train_position__track_end (us_split_fields3 position))) (to_rep3 (let ((temp___274 (select previous_tracks (to_rep1 (rec__trains__track__from (us_split_fields1 (select tracks (to_rep (rec__trains__train_position__track_begin (us_split_fields3 position)))))))))) (select temp___274 id)))))))) :pattern ((entering_a_track position)))))
(assert true)
(assert (forall ((position us_rep1)) (! (= (= (inside_a_track position) true) (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 position))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 position))))) :pattern ((inside_a_track position)))))
(define-fun dynamic_invariant8 ((temp___expr_282 Int) (temp___is_init_278 Bool) (temp___skip_constant_279 Bool) (temp___do_toplevel_280 Bool) (temp___do_typ_inv_281 Bool)) Bool (=> (or (= temp___is_init_278 true) (<= 0 2)) (in_range8 temp___expr_282)))
(assert true)
(assert (forall ((cur_position1 us_rep1) (new_position1 us_rep1)) (! (= (= (moving_to_a_new_track cur_position1 new_position1) true) (and (and (= (inside_a_track cur_position1) true) (= (entering_a_track new_position1) true)) (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 cur_position1))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 new_position1)))))) :pattern ((moving_to_a_new_track cur_position1 new_position1)))))
(declare-const cur_num_trains Int)
(declare-const trains (Array Int us_rep1))
(declare-const track_signals (Array Int signal))
(declare-const result__ Int)
(declare-const prev Int)
(declare-const o signal)
(declare-const o1 (Array Int signal))
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Int)
(declare-const result__1 Int)
(declare-const result3 (Array Int us_rep1))
(declare-const trains1 (Array Int us_rep1))
(declare-const result4 (Array Int signal))
(declare-const track_signals1 (Array Int signal))
(assert (in_range6 cur_num_trains))
(assert (in_range6 train))
(assert (=> (<= 0 3) (in_range9 result__)))
(assert (and (and (<= 1 train) (<= train cur_num_trains)) (and (= (valid_move (select trains train) new_position) true) (and (= (one_train_at_most_per_track cur_num_trains trains) true) (= (safe_signaling cur_num_trains trains track_signals) true)))))
(assert (= (select trains train) cur_position))
(assert (=> (<= 0 8) (in_range1 prev)))
(assert (and (= result (moving_inside_current_tracks cur_position new_position)) (= (= result true) (and (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 cur_position))) (to_rep (rec__trains__train_position__track_begin (us_split_fields3 new_position)))) (= (to_rep (rec__trains__train_position__track_end (us_split_fields3 cur_position))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 new_position))))))))
(assert (not (= result true)))
(assert (and (= result1 (moving_away_from_current_track cur_position new_position)) (= (= result1 true) (and (and (= (entering_a_track cur_position) true) (= (inside_a_track new_position) true)) (= (to_rep (rec__trains__train_position__track_begin (us_split_fields3 cur_position))) (to_rep (rec__trains__train_position__track_end (us_split_fields3 new_position))))))))
(assert (= result1 true))
(assert (= (mk_int__ref result2) (mk_int__ref result__)))
(assert (= result__1 2))
(assert (= (mk_map__ref3 result3) (mk_map__ref3 trains)))
(assert (= trains1 (store trains train new_position)))
(assert (= (previous_tracks_on_orange_or_red cur_num_trains trains1 track_signals) true))
(assert (= (to_rep5 o) 1))
(assert (= o1 (store track_signals (to_rep (rec__trains__train_position__track_end (us_split_fields3 cur_position))) o)))
(assert (= (mk_map__ref4 result4) (mk_map__ref4 track_signals)))
(assert (= track_signals1 o1))
(assert (= (no_track_precedes_itself Tuple0) true))
(assert (= (occupied_tracks_on_red cur_num_trains trains1 track_signals1) true))
(assert (not (= (previous_tracks_on_orange_or_red cur_num_trains trains1 track_signals1) true)))
(check-sat)
(exit)
