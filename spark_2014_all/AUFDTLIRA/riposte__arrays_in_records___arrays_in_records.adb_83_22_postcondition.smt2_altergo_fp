(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type value

predicate in_range(x: int) = (((- 23) <= x) and (x <= 69))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : value, value -> bool

logic dummy : value

type value__ref = { value__content : value
}

function value__ref___projection(a: value__ref) : value = (a).value__content

logic to_rep : value -> int

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq2 : (int,value) farray, int, int, (int,value) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,value) farray. forall a__first:int. forall a__last:int.
  forall b:(int,value) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type index

predicate in_range1(x: int) = ((0 <= x) and (x <= 1001))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : index -> int

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic dummy2 : (int,value) farray

logic value__size : int

logic object__size : (int,value) farray -> int

logic value__component__size : int

logic object__component__size : (int,value) farray -> int

logic value__alignment : int

logic object__alignment : (int,value) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,value) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,value) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,value) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,value) farray, (int,value) farray -> bool

type us_split_fields = { rec__arrays_in_records__record_with_arrays__counter
: index; rec__arrays_in_records__record_with_arrays__first_array :
(int,value) farray; rec__arrays_in_records__record_with_arrays__second_array
: (int,value) farray
}

function us_split_fields_Counter__projection(a: us_split_fields) : index =
  (a).rec__arrays_in_records__record_with_arrays__counter

function us_split_fields_First_Array__projection(a: us_split_fields) : (int,value) farray =
  (a).rec__arrays_in_records__record_with_arrays__first_array

function us_split_fields_Second_Array__projection(a: us_split_fields) : (int,value) farray =
  (a).rec__arrays_in_records__record_with_arrays__second_array

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  (((((to_rep1(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__counter) = to_rep1(((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__counter)) and
  (bool_eq2(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__first_array,
  0, 1001,
  ((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__first_array,
  0, 1001) = true)) and
  (bool_eq2(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__second_array,
  0, 1001,
  ((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__second_array,
  0, 1001) = true)) -> (bool_eq4(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__counter) = to_rep1(((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__counter)) and
  (bool_eq2(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__first_array,
  0, 1001,
  ((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__first_array,
  0, 1001) = true)) and
  (bool_eq2(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__second_array,
  0, 1001,
  ((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__second_array,
  0, 1001) = true))) -> (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:index. forall a1:(int,value) farray.
  forall a2:(int,value) farray. (0 <= object__size1({ us_split_fields1 = {
  rec__arrays_in_records__record_with_arrays__counter = a;
  rec__arrays_in_records__record_with_arrays__first_array = a1;
  rec__arrays_in_records__record_with_arrays__second_array = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:index. forall a1:(int,value) farray.
  forall a2:(int,value) farray. (0 <= object__alignment1({ us_split_fields1 =
  { rec__arrays_in_records__record_with_arrays__counter = a;
  rec__arrays_in_records__record_with_arrays__first_array = a1;
  rec__arrays_in_records__record_with_arrays__second_array = a2 } })))

logic arrays_in_records__record_with_arrays__counter__first__bit : int

logic arrays_in_records__record_with_arrays__counter__last__bit : int

logic arrays_in_records__record_with_arrays__counter__position : int

axiom arrays_in_records__record_with_arrays__counter__first__bit_axiom :
  (0 <= arrays_in_records__record_with_arrays__counter__first__bit)

axiom arrays_in_records__record_with_arrays__counter__last__bit_axiom :
  (arrays_in_records__record_with_arrays__counter__first__bit <  arrays_in_records__record_with_arrays__counter__last__bit)

axiom arrays_in_records__record_with_arrays__counter__position_axiom :
  (0 <= arrays_in_records__record_with_arrays__counter__position)

logic arrays_in_records__record_with_arrays__first_array__first__bit : int

logic arrays_in_records__record_with_arrays__first_array__last__bit : int

logic arrays_in_records__record_with_arrays__first_array__position : int

axiom arrays_in_records__record_with_arrays__first_array__first__bit_axiom :
  (0 <= arrays_in_records__record_with_arrays__first_array__first__bit)

axiom arrays_in_records__record_with_arrays__first_array__last__bit_axiom :
  (arrays_in_records__record_with_arrays__first_array__first__bit <  arrays_in_records__record_with_arrays__first_array__last__bit)

axiom arrays_in_records__record_with_arrays__first_array__position_axiom :
  (0 <= arrays_in_records__record_with_arrays__first_array__position)

logic arrays_in_records__record_with_arrays__second_array__first__bit : int

logic arrays_in_records__record_with_arrays__second_array__last__bit : int

logic arrays_in_records__record_with_arrays__second_array__position : int

axiom arrays_in_records__record_with_arrays__second_array__first__bit_axiom :
  (0 <= arrays_in_records__record_with_arrays__second_array__first__bit)

axiom arrays_in_records__record_with_arrays__second_array__last__bit_axiom :
  (arrays_in_records__record_with_arrays__second_array__first__bit <  arrays_in_records__record_with_arrays__second_array__last__bit)

axiom arrays_in_records__record_with_arrays__second_array__position_axiom :
  (0 <= arrays_in_records__record_with_arrays__second_array__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : index

logic dummy4 : (int,value) farray

logic dummy5 : (int,value) farray

type record_with_arrays__ref = { record_with_arrays__content : us_rep
}

function record_with_arrays__ref___projection(a: record_with_arrays__ref) : us_rep =
  (a).record_with_arrays__content

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "arrays_in_records.adb", line 66, characters 0-0 *)
goal WP_parameter_def :
  (forall a__split_fields:index. forall a__split_fields1:(int,value) farray.
  forall a__split_fields2:(int,value) farray. forall o:value.
  forall o1:(int,value) farray. forall o2:index.
  forall o3:(int,value) farray. forall o4:(int,value) farray.
  forall temp___254:index. forall temp___2541:(int,value) farray.
  forall temp___2542:(int,value) farray. forall o5:value.
  forall o6:(int,value) farray. forall o7:index.
  forall o8:(int,value) farray. forall o9:(int,value) farray.
  forall temp___257:index. forall temp___2571:(int,value) farray.
  forall temp___2572:(int,value) farray. forall result:index.
  forall result1:(int,value) farray. forall result2:(int,value) farray.
  forall a__split_fields3:index. forall a__split_fields4:(int,value) farray.
  forall a__split_fields5:(int,value) farray. forall result3:index.
  forall result4:(int,value) farray. forall result5:(int,value) farray.
  forall a__split_fields6:index. forall a__split_fields7:(int,value) farray.
  forall a__split_fields8:(int,value) farray. forall a__split_fields9:index.
  forall a__split_fields10:(int,value) farray.
  forall a__split_fields11:(int,value) farray.
  forall a__split_fields12:index.
  forall a__split_fields13:(int,value) farray.
  forall a__split_fields14:(int,value) farray. ((((((((to_rep(o) = 42) and
  (o1 = (a__split_fields1[17 <- o]))) and ((a__split_fields = o2) and
  ((o1 = o3) and (a__split_fields2 = o4)))) and ((temp___254 = o2) and
  ((temp___2541 = o3) and (temp___2542 = o4)))) and
  (((result = a__split_fields) and ((result1 = a__split_fields1) and
  (result2 = a__split_fields2))) and ((temp___254 = a__split_fields3) and
  ((temp___2541 = a__split_fields4) and
  (temp___2542 = a__split_fields5))))) and (((((to_rep(o5) = 23) and
  (o6 = (a__split_fields4[17 <- o5]))) and ((a__split_fields3 = o7) and
  ((o6 = o8) and (a__split_fields5 = o9)))) and ((temp___257 = o7) and
  ((temp___2571 = o8) and (temp___2572 = o9)))) and
  (((result3 = a__split_fields3) and ((result4 = a__split_fields4) and
  (result5 = a__split_fields5))) and ((temp___257 = a__split_fields6) and
  ((temp___2571 = a__split_fields7) and
  (temp___2572 = a__split_fields8)))))) and
  (((a__split_fields9 = a__split_fields6) and
  ((a__split_fields10 = a__split_fields7) and
  (a__split_fields11 = a__split_fields8))) and
  ((a__split_fields12 = a__split_fields6) and
  ((a__split_fields13 = a__split_fields7) and
  (a__split_fields14 = a__split_fields8))))) ->
  (to_rep((a__split_fields10[17])) = 42)))
