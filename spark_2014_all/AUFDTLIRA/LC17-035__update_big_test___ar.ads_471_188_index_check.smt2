(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort it2 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range1 temp___expr_183)))
(declare-sort it3 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (it3 it3) Bool)
(declare-const dummy2 it3)
(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))
(define-fun dynamic_invariant2 ((temp___expr_190 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= 1 16)) (in_range2 temp___expr_190)))
(declare-sort et1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (et1 et1) Bool)
(declare-const dummy3 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant3 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range3 temp___expr_204)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy4 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const dummy5 (Array Int (Array Int et1)))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int (Array Int et1)) (Array Int (Array Int et1))) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int (Array Int et1))))))))
(declare-fun slide2 ((Array Int (Array Int (Array Int et1))) Int Int) (Array Int (Array Int (Array Int et1))))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int (Array Int (Array Int et1)))) (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int et1)))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 5 50 (select b (+ (- b__first a__first) temp___idx_156)) 5 50) true)))) true false))
(assert (forall ((a (Array Int (Array Int (Array Int et1)))) (b (Array Int (Array Int (Array Int et1))))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 5 50 (select b (+ (- b__first a__first) temp___idx_156)) 5 50) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun temp___1534 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp___1542 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1549 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1557 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1564 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1573 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp___1581 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1588 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1596 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1603 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1612 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp___1620 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1627 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1635 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1642 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1651 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp___1659 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1666 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1674 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1681 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___1536 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1537 Int) (temp___1539 Int)) (forall ((temp___1538 (Array Int (Array Int et1))) (temp___1540 (Array Int (Array Int et1)))) (let ((temp___1535 (temp___1534 temp___1536 temp___1537 temp___1538 temp___1539 temp___1540))) (=> (and (dynamic_invariant2 temp___1537 true true true true) (dynamic_invariant2 temp___1539 true true true true)) (forall ((temp___1541 Int)) (ite (= temp___1541 temp___1539) (= (select temp___1535 temp___1541) temp___1540) (ite (= temp___1541 temp___1537) (= (select temp___1535 temp___1541) temp___1538) (= (select temp___1535 temp___1541) (select temp___1536 temp___1541)))))))))))
(assert (forall ((temp___1544 (Array Int (Array Int et1)))) (forall ((temp___1545 Int)) (forall ((temp___1546 (Array Int et1))) (let ((temp___1543 (temp___1542 temp___1544 temp___1545 temp___1546))) (=> (dynamic_invariant1 temp___1545 true true true true) (forall ((temp___1547 Int)) (ite (= temp___1547 temp___1545) (= (select temp___1543 temp___1547) temp___1546) (= (select temp___1543 temp___1547) (select temp___1544 temp___1547))))))))))
(assert (forall ((temp___1551 (Array Int et1))) (forall ((temp___1552 Int) (temp___1553 Int)) (let ((temp___1550 (temp___1549 temp___1551 temp___1552 temp___1553))) (=> (and (dynamic_invariant temp___1552 true true true true) (dynamic_invariant3 temp___1553 true true true true)) (forall ((temp___1554 Int)) (ite (= temp___1554 temp___1552) (= (to_rep (select temp___1550 temp___1554)) temp___1553) (= (select temp___1550 temp___1554) (select temp___1551 temp___1554)))))))))
(assert (forall ((temp___1559 (Array Int (Array Int et1)))) (forall ((temp___1560 Int)) (forall ((temp___1561 (Array Int et1))) (let ((temp___1558 (temp___1557 temp___1559 temp___1560 temp___1561))) (=> (dynamic_invariant1 temp___1560 true true true true) (forall ((temp___1562 Int)) (ite (= temp___1562 temp___1560) (= (select temp___1558 temp___1562) temp___1561) (= (select temp___1558 temp___1562) (select temp___1559 temp___1562))))))))))
(assert (forall ((temp___1566 (Array Int et1))) (forall ((temp___1567 Int) (temp___1568 Int)) (let ((temp___1565 (temp___1564 temp___1566 temp___1567 temp___1568))) (=> (and (dynamic_invariant temp___1567 true true true true) (dynamic_invariant3 temp___1568 true true true true)) (forall ((temp___1569 Int)) (ite (= temp___1569 temp___1567) (= (to_rep (select temp___1565 temp___1569)) temp___1568) (= (select temp___1565 temp___1569) (select temp___1566 temp___1569)))))))))
(assert (forall ((temp___1575 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1576 Int) (temp___1578 Int)) (forall ((temp___1577 (Array Int (Array Int et1))) (temp___1579 (Array Int (Array Int et1)))) (let ((temp___1574 (temp___1573 temp___1575 temp___1576 temp___1577 temp___1578 temp___1579))) (=> (and (dynamic_invariant2 temp___1576 true true true true) (dynamic_invariant2 temp___1578 true true true true)) (forall ((temp___1580 Int)) (ite (= temp___1580 temp___1578) (= (select temp___1574 temp___1580) temp___1579) (ite (= temp___1580 temp___1576) (= (select temp___1574 temp___1580) temp___1577) (= (select temp___1574 temp___1580) (select temp___1575 temp___1580)))))))))))
(assert (forall ((temp___1583 (Array Int (Array Int et1)))) (forall ((temp___1584 Int)) (forall ((temp___1585 (Array Int et1))) (let ((temp___1582 (temp___1581 temp___1583 temp___1584 temp___1585))) (=> (dynamic_invariant1 temp___1584 true true true true) (forall ((temp___1586 Int)) (ite (= temp___1586 temp___1584) (= (select temp___1582 temp___1586) temp___1585) (= (select temp___1582 temp___1586) (select temp___1583 temp___1586))))))))))
(assert (forall ((temp___1590 (Array Int et1))) (forall ((temp___1591 Int) (temp___1592 Int)) (let ((temp___1589 (temp___1588 temp___1590 temp___1591 temp___1592))) (=> (and (dynamic_invariant temp___1591 true true true true) (dynamic_invariant3 temp___1592 true true true true)) (forall ((temp___1593 Int)) (ite (= temp___1593 temp___1591) (= (to_rep (select temp___1589 temp___1593)) temp___1592) (= (select temp___1589 temp___1593) (select temp___1590 temp___1593)))))))))
(assert (forall ((temp___1598 (Array Int (Array Int et1)))) (forall ((temp___1599 Int)) (forall ((temp___1600 (Array Int et1))) (let ((temp___1597 (temp___1596 temp___1598 temp___1599 temp___1600))) (=> (dynamic_invariant1 temp___1599 true true true true) (forall ((temp___1601 Int)) (ite (= temp___1601 temp___1599) (= (select temp___1597 temp___1601) temp___1600) (= (select temp___1597 temp___1601) (select temp___1598 temp___1601))))))))))
(assert (forall ((temp___1605 (Array Int et1))) (forall ((temp___1606 Int) (temp___1607 Int)) (let ((temp___1604 (temp___1603 temp___1605 temp___1606 temp___1607))) (=> (and (dynamic_invariant temp___1606 true true true true) (dynamic_invariant3 temp___1607 true true true true)) (forall ((temp___1608 Int)) (ite (= temp___1608 temp___1606) (= (to_rep (select temp___1604 temp___1608)) temp___1607) (= (select temp___1604 temp___1608) (select temp___1605 temp___1608)))))))))
(assert (forall ((temp___1614 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1615 Int) (temp___1617 Int)) (forall ((temp___1616 (Array Int (Array Int et1))) (temp___1618 (Array Int (Array Int et1)))) (let ((temp___1613 (temp___1612 temp___1614 temp___1615 temp___1616 temp___1617 temp___1618))) (=> (and (dynamic_invariant2 temp___1615 true true true true) (dynamic_invariant2 temp___1617 true true true true)) (forall ((temp___1619 Int)) (ite (= temp___1619 temp___1617) (= (select temp___1613 temp___1619) temp___1618) (ite (= temp___1619 temp___1615) (= (select temp___1613 temp___1619) temp___1616) (= (select temp___1613 temp___1619) (select temp___1614 temp___1619)))))))))))
(assert (forall ((temp___1622 (Array Int (Array Int et1)))) (forall ((temp___1623 Int)) (forall ((temp___1624 (Array Int et1))) (let ((temp___1621 (temp___1620 temp___1622 temp___1623 temp___1624))) (=> (dynamic_invariant1 temp___1623 true true true true) (forall ((temp___1625 Int)) (ite (= temp___1625 temp___1623) (= (select temp___1621 temp___1625) temp___1624) (= (select temp___1621 temp___1625) (select temp___1622 temp___1625))))))))))
(assert (forall ((temp___1629 (Array Int et1))) (forall ((temp___1630 Int) (temp___1631 Int)) (let ((temp___1628 (temp___1627 temp___1629 temp___1630 temp___1631))) (=> (and (dynamic_invariant temp___1630 true true true true) (dynamic_invariant3 temp___1631 true true true true)) (forall ((temp___1632 Int)) (ite (= temp___1632 temp___1630) (= (to_rep (select temp___1628 temp___1632)) temp___1631) (= (select temp___1628 temp___1632) (select temp___1629 temp___1632)))))))))
(assert (forall ((temp___1637 (Array Int (Array Int et1)))) (forall ((temp___1638 Int)) (forall ((temp___1639 (Array Int et1))) (let ((temp___1636 (temp___1635 temp___1637 temp___1638 temp___1639))) (=> (dynamic_invariant1 temp___1638 true true true true) (forall ((temp___1640 Int)) (ite (= temp___1640 temp___1638) (= (select temp___1636 temp___1640) temp___1639) (= (select temp___1636 temp___1640) (select temp___1637 temp___1640))))))))))
(assert (forall ((temp___1644 (Array Int et1))) (forall ((temp___1645 Int) (temp___1646 Int)) (let ((temp___1643 (temp___1642 temp___1644 temp___1645 temp___1646))) (=> (and (dynamic_invariant temp___1645 true true true true) (dynamic_invariant3 temp___1646 true true true true)) (forall ((temp___1647 Int)) (ite (= temp___1647 temp___1645) (= (to_rep (select temp___1643 temp___1647)) temp___1646) (= (select temp___1643 temp___1647) (select temp___1644 temp___1647)))))))))
(assert (forall ((temp___1653 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1654 Int) (temp___1656 Int)) (forall ((temp___1655 (Array Int (Array Int et1))) (temp___1657 (Array Int (Array Int et1)))) (let ((temp___1652 (temp___1651 temp___1653 temp___1654 temp___1655 temp___1656 temp___1657))) (=> (and (dynamic_invariant2 temp___1654 true true true true) (dynamic_invariant2 temp___1656 true true true true)) (forall ((temp___1658 Int)) (ite (= temp___1658 temp___1656) (= (select temp___1652 temp___1658) temp___1657) (ite (= temp___1658 temp___1654) (= (select temp___1652 temp___1658) temp___1655) (= (select temp___1652 temp___1658) (select temp___1653 temp___1658)))))))))))
(assert (forall ((temp___1661 (Array Int (Array Int et1)))) (forall ((temp___1662 Int)) (forall ((temp___1663 (Array Int et1))) (let ((temp___1660 (temp___1659 temp___1661 temp___1662 temp___1663))) (=> (dynamic_invariant1 temp___1662 true true true true) (forall ((temp___1664 Int)) (ite (= temp___1664 temp___1662) (= (select temp___1660 temp___1664) temp___1663) (= (select temp___1660 temp___1664) (select temp___1661 temp___1664))))))))))
(assert (forall ((temp___1668 (Array Int et1))) (forall ((temp___1669 Int) (temp___1670 Int)) (let ((temp___1667 (temp___1666 temp___1668 temp___1669 temp___1670))) (=> (and (dynamic_invariant temp___1669 true true true true) (dynamic_invariant3 temp___1670 true true true true)) (forall ((temp___1671 Int)) (ite (= temp___1671 temp___1669) (= (to_rep (select temp___1667 temp___1671)) temp___1670) (= (select temp___1667 temp___1671) (select temp___1668 temp___1671)))))))))
(assert (forall ((temp___1676 (Array Int (Array Int et1)))) (forall ((temp___1677 Int)) (forall ((temp___1678 (Array Int et1))) (let ((temp___1675 (temp___1674 temp___1676 temp___1677 temp___1678))) (=> (dynamic_invariant1 temp___1677 true true true true) (forall ((temp___1679 Int)) (ite (= temp___1679 temp___1677) (= (select temp___1675 temp___1679) temp___1678) (= (select temp___1675 temp___1679) (select temp___1676 temp___1679))))))))))
(assert (forall ((temp___1683 (Array Int et1))) (forall ((temp___1684 Int) (temp___1685 Int)) (let ((temp___1682 (temp___1681 temp___1683 temp___1684 temp___1685))) (=> (and (dynamic_invariant temp___1684 true true true true) (dynamic_invariant3 temp___1685 true true true true)) (forall ((temp___1686 Int)) (ite (= temp___1686 temp___1684) (= (to_rep (select temp___1682 temp___1686)) temp___1685) (= (select temp___1682 temp___1686) (select temp___1683 temp___1686)))))))))
(declare-const a (Array Int (Array Int (Array Int et1))))
(declare-const k_next Int)
(declare-const f Int)
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 (Array Int (Array Int et1)))
(declare-const o3 (Array Int (Array Int (Array Int et1))))
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 et1)
(declare-const o7 (Array Int et1))
(declare-const o8 (Array Int (Array Int et1)))
(declare-const o9 (Array Int (Array Int (Array Int et1))))
(declare-const o10 Int)
(declare-const result (Array Int (Array Int (Array Int et1))))
(declare-const a1 (Array Int (Array Int (Array Int et1))))
(declare-const result1 Int)
(declare-const k_next1 Int)
(declare-const result2 Int)
(declare-const k_next2 Int)
(declare-const result3 Int)
(declare-const f1 Int)
(declare-const result4 Int)
(declare-const f2 Int)
(declare-const result5 (Array Int (Array Int (Array Int et1))))
(declare-const a2 (Array Int (Array Int (Array Int et1))))
(declare-const a3 (Array Int (Array Int (Array Int et1))))
(declare-const k_next3 Int)
(declare-const f3 Int)
(declare-const a4 (Array Int (Array Int (Array Int et1))))
(declare-const k_next4 Int)
(declare-const f4 Int)
(define-fun f5 () int__ref (mk_int__ref f))
(define-fun k_next5 () int__ref (mk_int__ref k_next))
(assert (in_range i))
(assert (in_range1 j))
(assert (in_range2 k))
(assert (in_range3 e))
(assert (=> (<= 1 16) (in_range2 k_next)))
(assert (=> (<= 0 99) (in_range3 f)))
(assert (= (to_rep o) e))
(assert (= o1 (store (select (select a k) j) i o)))
(assert (= o2 (store (select a k) j o1)))
(assert (= o3 (store a k o2)))
(assert (= (mk_map__ref2 result) (mk_map__ref2 a)))
(assert (= a1 o3))
(assert (=> (= k 16) (= (mk_int__ref result1) k_next5)))
(assert (=> (= k 16) (= k_next1 1)))
(assert (=> (not (= k 16)) (and (= o4 (+ k 1)) (in_range2 (+ k 1)))))
(assert (=> (not (= k 16)) (= (mk_int__ref result2) k_next5)))
(assert (=> (not (= k 16)) (= k_next2 o4)))
(assert (=> (not (= k 16)) (= k_next1 k_next2)))
(assert (=> (= e 0) (= (mk_int__ref result3) f5)))
(assert (=> (= e 0) (= f1 99)))
(assert (=> (not (= e 0)) (and (= o5 (- e 1)) (in_range3 (- e 1)))))
(assert (=> (not (= e 0)) (= (mk_int__ref result4) f5)))
(assert (=> (not (= e 0)) (= f2 o5)))
(assert (=> (not (= e 0)) (= f1 f2)))
(assert (= (to_rep o6) f1))
(assert (= o7 (store (select (select a1 k_next1) j) i o6)))
(assert (= o8 (store (select a1 k_next1) j o7)))
(assert (= o9 (store a1 k_next1 o8)))
(assert (= a1 result5))
(assert (= a2 o9))
(assert (= f1 f3))
(assert (= k_next1 k_next3))
(assert (= a2 a3))
(assert (= f4 f1))
(assert (= k_next4 k_next1))
(assert (= a4 a2))
(assert (< k 16))
(assert (< 0 e))
(assert (and (= o10 (- e 1)) (in_range3 (- e 1))))
(assert (not (<= 1 (+ k 1))))
(check-sat)
(exit)
