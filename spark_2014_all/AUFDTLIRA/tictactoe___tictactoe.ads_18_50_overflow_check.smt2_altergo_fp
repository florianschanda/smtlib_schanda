(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type pos

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : pos, pos -> bool

logic dummy1 : pos

type pos__ref = { pos__content : pos
}

function pos__ref___projection(a: pos__ref) : pos = (a).pos__content

type slot

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : slot, slot -> bool

logic dummy2 : slot

type slot__ref = { slot__content : slot
}

function slot__ref___projection(a: slot__ref) : slot = (a).slot__content

logic to_rep : slot -> int

logic of_rep : int -> slot

axiom inversion_axiom : (forall x:slot [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:slot [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,slot) farray
}

logic slide : (int,slot) farray, int, int -> (int,slot) farray

axiom slide_eq :
  (forall a:(int,slot) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,slot) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,slot) farray, int, int, (int,slot) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,slot) farray. forall a__first:int. forall a__last:int.
  forall b:(int,slot) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep((a[temp___idx_173])) = to_rep((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep((a[temp___idx_173])) = to_rep((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep((a[temp___idx_173])) = to_rep((b[((b__first - a__first) + temp___idx_173)])))))))))

logic dummy3 : (int,slot) farray

logic value__size : int

logic object__size : (int,slot) farray -> int

logic value__component__size : int

logic object__component__size : (int,slot) farray -> int

logic value__alignment : int

logic object__alignment : (int,slot) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,slot) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,slot) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,slot) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,slot) farray, (int,slot) farray -> bool

type map__ref1 = { map__content1 : (int,(int,slot) farray) farray
}

logic slide1 : (int,(int,slot) farray) farray, int,
  int -> (int,(int,slot) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,slot) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,slot) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,(int,slot) farray) farray, int, int,
  (int,(int,slot) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,slot) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,slot) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_174:int. ((((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) and (bool_eq4((a[temp___idx_174]), 1, 3,
  (b[((b__first - a__first) + temp___idx_174)]), 1, 3) = true)) or
  (not ((a__first <= temp___idx_174) and (temp___idx_174 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq4((a[temp___idx_174]), 1, 3,
  (b[((b__first - a__first) + temp___idx_174)]), 1, 3) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq4((a[temp___idx_174]), 1, 3,
  (b[((b__first - a__first) + temp___idx_174)]), 1, 3) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic one_free_slot : int, int, (int,(int,slot) farray) farray -> int

logic one_free_slot__function_guard : int, int, int,
  (int,(int,slot) farray) farray -> prop

axiom one_free_slot__post_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [one_free_slot(x, y, tictactoe__my_board)]. ((in_range1(x) and
  in_range1(y)) -> in_range(one_free_slot(x, y, tictactoe__my_board)))))

axiom one_free_slot__def_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [one_free_slot(x, y, tictactoe__my_board)]. ((in_range1(x) and
  in_range1(y)) -> (((to_rep(((tictactoe__my_board[x])[y])) = 0) ->
  (one_free_slot(x, y, tictactoe__my_board) = 1)) and
  ((not (to_rep(((tictactoe__my_board[x])[y])) = 0)) -> (one_free_slot(x, y,
  tictactoe__my_board) = 0))))))

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall my_board:(int,(int,slot) farray) farray. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall o6:int. forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall o12:int. forall o13:int. forall o14:int.
  forall o15:int. forall o16:int. forall o17:int. forall o18:int.
  forall o19:int. forall o20:int. forall o21:int. (in_range1(x) ->
  (in_range1(y) -> ((((3 <= x) and (((((3 <= y) and ((o18 = one_free_slot(3,
  3, my_board)) and (in_range(o18) and (((to_rep(((my_board[3])[3])) = 0) and
  (o18 = 1)) or ((not (to_rep(((my_board[3])[3])) = 0)) and (o18 = 0)))))) or
  ((not (3 <= y)) and (o18 = 0))) and ((((((2 <= y) and
  ((o15 = one_free_slot(3, 2, my_board)) and (in_range(o15) and
  (((to_rep(((my_board[3])[2])) = 0) and (o15 = 1)) or
  ((not (to_rep(((my_board[3])[2])) = 0)) and (o15 = 0)))))) or
  ((not (2 <= y)) and (o15 = 0))) and (((o16 = one_free_slot(3, 1,
  my_board)) and (in_range(o16) and (((to_rep(((my_board[3])[1])) = 0) and
  (o16 = 1)) or ((not (to_rep(((my_board[3])[1])) = 0)) and (o16 = 0))))) and
  (o17 = (o16 + o15)))) and ((o19 = o17) and in_range(o17))) and
  (o20 = (o19 + o18)))) and ((o21 = o20) and in_range(o20)))) or
  ((not (3 <= x)) and (o21 = 0))) -> (((((2 <= x) and (((((3 <= y) and
  ((o9 = one_free_slot(2, 3, my_board)) and (in_range(o9) and
  (((to_rep(((my_board[2])[3])) = 0) and (o9 = 1)) or
  ((not (to_rep(((my_board[2])[3])) = 0)) and (o9 = 0)))))) or
  ((not (3 <= y)) and (o9 = 0))) and ((((((2 <= y) and
  ((o6 = one_free_slot(2, 2, my_board)) and (in_range(o6) and
  (((to_rep(((my_board[2])[2])) = 0) and (o6 = 1)) or
  ((not (to_rep(((my_board[2])[2])) = 0)) and (o6 = 0)))))) or
  ((not (2 <= y)) and (o6 = 0))) and (((o7 = one_free_slot(2, 1,
  my_board)) and (in_range(o7) and (((to_rep(((my_board[2])[1])) = 0) and
  (o7 = 1)) or ((not (to_rep(((my_board[2])[1])) = 0)) and (o7 = 0))))) and
  (o8 = (o7 + o6)))) and ((o10 = o8) and in_range(o8))) and
  (o11 = (o10 + o9)))) and ((o12 = o11) and in_range(o11)))) or
  ((not (2 <= x)) and (o12 = 0))) and ((((((3 <= y) and
  ((o3 = one_free_slot(1, 3, my_board)) and (in_range(o3) and
  (((to_rep(((my_board[1])[3])) = 0) and (o3 = 1)) or
  ((not (to_rep(((my_board[1])[3])) = 0)) and (o3 = 0)))))) or
  ((not (3 <= y)) and (o3 = 0))) and ((((((2 <= y) and ((o = one_free_slot(1,
  2, my_board)) and (in_range(o) and (((to_rep(((my_board[1])[2])) = 0) and
  (o = 1)) or ((not (to_rep(((my_board[1])[2])) = 0)) and (o = 0)))))) or
  ((not (2 <= y)) and (o = 0))) and (((o1 = one_free_slot(1, 1,
  my_board)) and (in_range(o1) and (((to_rep(((my_board[1])[1])) = 0) and
  (o1 = 1)) or ((not (to_rep(((my_board[1])[1])) = 0)) and (o1 = 0))))) and
  (o2 = (o1 + o)))) and ((o4 = o2) and in_range(o2))) and
  (o5 = (o4 + o3)))) and ((o13 = o5) and in_range(o5))) and
  (o14 = (o13 + o12)))) -> in_range(o14))))))
