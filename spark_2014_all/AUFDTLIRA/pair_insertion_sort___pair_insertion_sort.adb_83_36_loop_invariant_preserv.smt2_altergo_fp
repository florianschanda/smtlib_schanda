(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483646))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type arr__ref = { arr__content : us_t
}

function arr__ref___projection(a: arr__ref) : us_t = (a).arr__content

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

logic occ : us_t, int -> int

logic occ__function_guard : int, us_t, int -> prop

axiom is_perm__post_axiom : true

axiom is_perm__def_axiom :
  (forall a:(int,integer) farray. forall a1:t. forall b:(int,integer) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (forall e:int. ((((- 2147483648) <= e) and (e <= 2147483647)) -> (occ({
  elts = a; rt = a1 }, e) = occ({ elts = b; rt = b1 }, e))))))

logic sorted : us_t, int, int -> bool

logic sorted__function_guard : bool, us_t, int, int -> prop

axiom sorted__post_axiom : true

axiom sorted__def_axiom :
  (forall a:(int,integer) farray. forall a1:t.
  (forall i:int. forall j:int [sorted({ elts = a; rt = a1 }, i, j)].
  ((sorted({ elts = a; rt = a1 }, i, j) = true) <->
  (forall k:int. (((i <= k) and (k <= (j - 1))) ->
  (to_rep((a[k])) <= to_rep((a[(k + 1)]))))))))

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type tTbSP1__ref = { tTbSP1__content : integer
}

function tTbSP1__ref___projection(a: tTbSP1__ref) : integer =
  (a).tTbSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,integer) farray

logic dummy6 : t1

type tbS__ref = { tbS__content : us_t1
}

function tbS__ref___projection(a: tbS__ref) : us_t1 = (a).tbS__content

logic b : (int,integer) farray

logic b1 : t1

logic attr__ATTRIBUTE_ADDRESS6 : int

type nb_occ

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : nb_occ, nb_occ -> bool

logic dummy7 : nb_occ

type nb_occ__ref = { nb_occ__content : nb_occ
}

function nb_occ__ref___projection(a: nb_occ__ref) : nb_occ =
  (a).nb_occ__content

logic remove_last : us_t -> us_t

logic remove_last__function_guard : us_t, us_t -> prop

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t17s__ref = { t17s__content : integer
}

function t17s__ref___projection(a: t17s__ref) : integer = (a).t17s__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,integer) farray

logic dummy10 : t2

type t18s__ref = { t18s__content : us_t2
}

function t18s__ref___projection(a: t18s__ref) : us_t2 = (a).t18s__content

axiom remove_last__post_axiom :
  (forall a:(int,integer) farray. forall a1:t [remove_last({ elts = a; rt =
  a1 })]. (((to_rep(first(a1)) = 0) and (0 <  length({ elts = a; rt = a1
  }))) -> (dynamic_property(0, 2147483646, to_rep(first((remove_last({ elts =
  a; rt = a1 })).rt)), to_rep(last((remove_last({ elts = a; rt = a1
  })).rt))) and (to_rep(first((remove_last({ elts = a; rt = a1
  })).rt)) = 0))))

axiom remove_last__def_axiom :
  (forall a:(int,integer) farray. forall a1:t [remove_last({ elts = a; rt =
  a1 })]. ((to_rep(first(a1)) = 0) -> (remove_last({ elts = a; rt = a1 }) = {
  elts = a; rt = mk(to_rep(first4(mk2(to_rep(first(a1)),
  (to_rep(last(a1)) - 1)))), to_rep(last4(mk2(to_rep(first(a1)),
  (to_rep(last(a1)) - 1))))) })))

logic occ_def : us_t, int -> int

logic occ_def__function_guard : int, us_t, int -> prop

axiom occ_def__def_axiom :
  (forall a:(int,integer) farray. forall a1:t.
  (forall e:int [occ_def({ elts = a; rt = a1 }, e)].
  (((to_rep(first(a1)) = 0) and in_range1(e)) -> (((length({ elts = a; rt =
  a1 }) = 0) -> (occ_def({ elts = a; rt = a1 }, e) = 0)) and ((not (length({
  elts = a; rt = a1 }) = 0)) -> (((to_rep((a[to_rep(last(a1))])) = e) ->
  (occ_def({ elts = a; rt = a1 }, e) = (occ_def(remove_last({ elts = a; rt =
  a1 }), e) + 1))) and ((not (to_rep((a[to_rep(last(a1))])) = e)) ->
  (occ_def({ elts = a; rt = a1 }, e) = occ_def(remove_last({ elts = a; rt =
  a1 }), e)))))))))

axiom occ__post_axiom :
  (forall a:(int,integer) farray. forall a1:t.
  (forall e:int [occ({ elts = a; rt = a1 }, e)].
  (((to_rep(first(a1)) = 0) and in_range1(e)) -> ((occ({ elts = a; rt = a1 },
  e) <= length({ elts = a; rt = a1 })) and in_range3(occ({ elts = a; rt = a1
  }, e))))))

axiom occ__def_axiom :
  (forall a:(int,integer) farray. forall a1:t.
  (forall e:int [occ({ elts = a; rt = a1 }, e)].
  (((to_rep(first(a1)) = 0) and in_range1(e)) -> (occ({ elts = a; rt = a1 },
  e) = occ_def({ elts = a; rt = a1 }, e)))))

logic a : (int,integer) farray

logic i : int

logic j : int

logic x : int

logic y : int

logic z : int

logic temp___253 : (int,integer) farray

logic temp___2531 : t1

logic pair_insertion_sort__sort__b__assume : (int,integer) farray

logic pair_insertion_sort__sort__b__assume1 : t1

logic o : int

logic o1 : int

logic o2 : int

logic temp___279 : int

logic temp___278 : (int,integer) farray

logic temp___275 : int

logic temp___274 : int

logic temp___273 : int

logic temp___272 : int

logic o3 : int

logic o4 : integer

logic o5 : int

logic temp___254 : int

logic o6 : int

logic o7 : integer

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : integer

logic o12 : int

logic temp___258 : (int,integer) farray

logic temp___255 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic us : bool

logic o19 : int

logic o20 : int

logic us1 : bool

logic temp___259 : int

logic temp___260 : int

logic o21 : int

logic o22 : integer

logic o23 : int

logic temp___261 : int

logic temp___262 : int

logic o24 : int

logic o25 : integer

logic o26 : int

logic o27 : bool

logic o28 : int

logic o29 : integer

logic o30 : int

logic temp___263 : int

logic o31 : int

logic o32 : integer

logic o33 : int

logic o34 : bool

logic o35 : bool

logic o36 : bool

logic o37 : int

logic o38 : int

logic o39 : integer

logic o40 : int

logic o41 : bool

logic o42 : int

logic o43 : int

logic o44 : int

logic temp___264 : int

logic o45 : int

logic o46 : integer

logic o47 : int

logic o48 : bool

logic o49 : int

logic o50 : int

logic o51 : int

logic o52 : int

logic o53 : int

logic o54 : integer

logic o55 : int

logic temp___268 : (int,integer) farray

logic temp___265 : int

logic o56 : int

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : int

logic us2 : bool

logic o62 : int

logic o63 : int

logic us3 : bool

logic temp___269 : int

logic temp___270 : int

logic o64 : int

logic o65 : integer

logic o66 : int

logic temp___271 : int

logic o67 : int

logic o68 : int

logic o69 : integer

logic o70 : int

logic o71 : bool

logic o72 : int

logic o73 : int

logic o74 : int

logic o75 : int

logic o76 : int

logic o77 : int

logic o78 : int

logic o79 : int

logic us4 : bool

logic o80 : int

logic o81 : int

logic o82 : int

logic o83 : int

logic o84 : bool

logic o85 : int

logic o86 : integer

logic o87 : int

logic temp___2541 : int

logic o88 : int

logic o89 : integer

logic o90 : int

logic o91 : int

logic o92 : int

logic o93 : integer

logic o94 : int

logic temp___2581 : (int,integer) farray

logic temp___2551 : int

logic o95 : int

logic o96 : int

logic o97 : int

logic o98 : int

logic o99 : int

logic o100 : int

logic us5 : bool

logic o101 : int

logic o102 : int

logic us6 : bool

logic temp___2591 : int

logic temp___2601 : int

logic o103 : int

logic o104 : integer

logic o105 : int

logic temp___2611 : int

logic temp___2621 : int

logic o106 : int

logic o107 : integer

logic o108 : int

logic o109 : bool

logic o110 : int

logic o111 : integer

logic o112 : int

logic temp___2631 : int

logic o113 : int

logic o114 : integer

logic o115 : int

logic o116 : bool

logic o117 : bool

logic o118 : bool

logic o119 : int

logic o120 : int

logic o121 : integer

logic o122 : int

logic o123 : bool

logic o124 : int

logic o125 : int

logic o126 : int

logic temp___2641 : int

logic o127 : int

logic o128 : integer

logic o129 : int

logic o130 : bool

logic o131 : int

logic o132 : int

logic o133 : int

logic o134 : int

logic o135 : int

logic o136 : integer

logic o137 : int

logic temp___2681 : (int,integer) farray

logic temp___2651 : int

logic o138 : int

logic o139 : int

logic o140 : int

logic o141 : int

logic o142 : int

logic o143 : int

logic us7 : bool

logic o144 : int

logic o145 : int

logic us8 : bool

logic temp___2691 : int

logic temp___2701 : int

logic o146 : int

logic o147 : integer

logic o148 : int

logic temp___2711 : int

logic o149 : int

logic o150 : int

logic o151 : integer

logic o152 : int

logic o153 : bool

logic o154 : int

logic o155 : int

logic o156 : int

logic o157 : int

logic o158 : int

logic o159 : int

logic o160 : int

logic o161 : integer

logic o162 : int

logic o163 : int

logic o164 : int

logic o165 : integer

logic o166 : int

logic temp___283 : (int,integer) farray

logic temp___280 : int

logic o167 : int

logic o168 : int

logic o169 : int

logic o170 : int

logic o171 : int

logic o172 : int

logic us9 : bool

logic o173 : int

logic o174 : int

logic o175 : int

logic o176 : int

logic us10 : bool

logic temp___284 : int

logic temp___285 : int

logic o177 : int

logic o178 : integer

logic o179 : int

logic temp___286 : int

logic o180 : int

logic o181 : int

logic o182 : integer

logic o183 : int

logic o184 : bool

logic o185 : int

logic o186 : int

logic o187 : int

logic o188 : int

logic o189 : int

logic o190 : int

logic a1 : (int,integer) farray

logic j1 : int

logic x1 : int

logic y1 : int

logic z1 : int

logic result : int

logic i1 : int

logic result1 : bool

logic result2 : int

logic x2 : int

logic result3 : int

logic y2 : int

logic result4 : int

logic z2 : int

logic result5 : int

logic x3 : int

logic result6 : int

logic y3 : int

logic result7 : int

logic j2 : int

logic result8 : bool

logic a2 : (int,integer) farray

logic a3 : (int,integer) farray

logic j3 : int

logic result9 : int

logic j4 : int

logic result10 : bool

logic a4 : (int,integer) farray

logic a5 : (int,integer) farray

logic j5 : int

logic a6 : (int,integer) farray

logic j6 : int

logic a7 : (int,integer) farray

logic j7 : int

logic a8 : (int,integer) farray

logic j8 : int

logic a9 : (int,integer) farray

logic j9 : int

logic a10 : (int,integer) farray

logic j10 : int

logic result11 : bool

logic a11 : (int,integer) farray

logic a12 : (int,integer) farray

logic a13 : (int,integer) farray

logic result12 : bool

logic a14 : (int,integer) farray

logic a15 : (int,integer) farray

logic j11 : int

logic result13 : int

logic j12 : int

logic result14 : bool

logic a16 : (int,integer) farray

logic a17 : (int,integer) farray

logic j13 : int

logic a18 : (int,integer) farray

logic j14 : int

logic a19 : (int,integer) farray

logic j15 : int

logic a20 : (int,integer) farray

logic j16 : int

logic a21 : (int,integer) farray

logic j17 : int

logic a22 : (int,integer) farray

logic j18 : int

logic a23 : (int,integer) farray

logic j19 : int

logic a24 : (int,integer) farray

logic j20 : int

logic a25 : (int,integer) farray

logic i2 : int

logic j21 : int

logic x4 : int

logic y4 : int

logic z3 : int

logic result15 : int

logic i3 : int

logic result16 : bool

logic result17 : int

logic x5 : int

logic result18 : int

logic y5 : int

logic result19 : int

logic z4 : int

logic result20 : int

logic x6 : int

logic result21 : int

logic y6 : int

logic x7 : int

logic y7 : int

logic z5 : int

logic x8 : int

logic y8 : int

logic z6 : int

logic result22 : int

logic j22 : int

logic result23 : bool

logic a26 : (int,integer) farray

logic a27 : (int,integer) farray

logic j23 : int

logic result24 : int

logic j24 : int

logic result25 : bool

logic a28 : (int,integer) farray

logic a29 : (int,integer) farray

logic j25 : int

logic a30 : (int,integer) farray

logic j26 : int

logic a31 : (int,integer) farray

logic j27 : int

logic a32 : (int,integer) farray

logic j28 : int

logic a33 : (int,integer) farray

logic j29 : int

logic a34 : (int,integer) farray

logic j30 : int

logic a35 : (int,integer) farray

logic j31 : int

logic a36 : (int,integer) farray

logic j32 : int

logic result26 : bool

logic a37 : (int,integer) farray

logic a38 : (int,integer) farray

logic a39 : (int,integer) farray

logic result27 : bool

logic a40 : (int,integer) farray

logic a41 : (int,integer) farray

logic j33 : int

logic result28 : int

logic j34 : int

logic result29 : bool

logic a42 : (int,integer) farray

logic a43 : (int,integer) farray

logic j35 : int

logic a44 : (int,integer) farray

logic j36 : int

logic a45 : (int,integer) farray

logic j37 : int

logic a46 : (int,integer) farray

logic j38 : int

logic a47 : (int,integer) farray

logic j39 : int

logic a48 : (int,integer) farray

logic j40 : int

logic a49 : (int,integer) farray

logic j41 : int

logic a50 : (int,integer) farray

logic j42 : int

logic a51 : (int,integer) farray

logic i4 : int

logic j43 : int

logic x9 : int

logic y9 : int

logic z7 : int

logic a52 : (int,integer) farray

logic i5 : int

logic j44 : int

logic x10 : int

logic y10 : int

logic z8 : int

logic a53 : (int,integer) farray

logic i6 : int

logic j45 : int

logic x11 : int

logic y11 : int

logic z9 : int

logic a54 : (int,integer) farray

logic i7 : int

logic j46 : int

logic x12 : int

logic y12 : int

logic z10 : int

logic a55 : (int,integer) farray

logic i8 : int

logic j47 : int

logic x13 : int

logic y13 : int

logic z11 : int

logic a56 : (int,integer) farray

logic i9 : int

logic j48 : int

logic x14 : int

logic y14 : int

logic z12 : int

logic result30 : bool

logic result31 : int

logic y15 : int

logic result32 : int

logic j49 : int

logic result33 : bool

logic a57 : (int,integer) farray

logic a58 : (int,integer) farray

logic j50 : int

logic result34 : int

logic j51 : int

logic result35 : bool

logic a59 : (int,integer) farray

logic a60 : (int,integer) farray

logic j52 : int

logic a61 : (int,integer) farray

logic j53 : int

logic a62 : (int,integer) farray

logic j54 : int

logic a63 : (int,integer) farray

logic j55 : int

logic a64 : (int,integer) farray

logic j56 : int

logic a65 : (int,integer) farray

logic j57 : int

logic a66 : (int,integer) farray

logic j58 : int

logic a67 : (int,integer) farray

logic j59 : int

logic a68 : (int,integer) farray

logic j60 : int

logic y16 : int

logic a69 : (int,integer) farray

logic j61 : int

logic y17 : int

logic a70 : (int,integer) farray

logic i10 : int

logic j62 : int

logic x15 : int

logic y18 : int

logic z13 : int

logic a71 : (int,integer) farray

logic i11 : int

logic j63 : int

logic x16 : int

logic y19 : int

logic z14 : int

logic result36 : bool

axiom H : (dynamic_property(0, 2147483646, to_rep(a__first),
  to_rep(a__last)) and (to_rep(a__first) = 0))

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range1(i))

axiom H2 : (((- 2147483648) <= 2147483647) -> in_range1(j))

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(x))

axiom H4 : (((- 2147483648) <= 2147483647) -> in_range1(y))

axiom H5 : (((- 2147483648) <= 2147483647) -> in_range1(z))

axiom H6 : true

axiom H7 : (slide(a, to_rep(a__first), to_rep(a__first)) = temp___253)

axiom H8 : (mk1(to_rep(a__first), to_rep(a__last)) = temp___2531)

axiom H9 : (to_rep(first2(temp___2531)) = 0)

axiom H10 : ((pair_insertion_sort__sort__b__assume = temp___253) and
  (pair_insertion_sort__sort__b__assume1 = temp___2531))

axiom H11 : ((pair_insertion_sort__sort__b__assume = b) and
  (pair_insertion_sort__sort__b__assume1 = b1))

axiom H12 : ((dynamic_property2(to_rep(a__first), to_rep(a__last),
  to_rep(first2(b1)), to_rep(last2(b1))) and
  ((to_rep(first2(b1)) = to_rep(a__first)) and
  (to_rep(last2(b1)) = to_rep(a__last)))) and (to_rep(first2(b1)) = 0))

axiom H13 : (result = i)

axiom H14 : (i1 = 0)

axiom H15 : ((to_rep(a__first) <= to_rep(a__last)) ->
  (o = ((to_rep(a__last) - to_rep(a__first)) + 1)))

axiom H16 : ((not (to_rep(a__first) <= to_rep(a__last))) -> (o = 0))

axiom H17 : ((o1 = o) and in_range1(o))

axiom H18 : (o2 = (o1 - 1))

axiom H19 : (((i1 <  o2) -> (result1 = true)) and ((not (i1 <  o2)) ->
  (result1 = false)))

axiom H20 : (result1 = true)

axiom H21 : ((to_rep(a__first) <= i1) and (i1 <= to_rep(a__last)))

axiom H22 : (o3 = i1)

axiom H23 : (o4 = (a[o3]))

axiom H24 : (o5 = to_rep(o4))

axiom H25 : (result2 = x)

axiom H26 : (x2 = o5)

axiom H27 : ((temp___254 = (i1 + 1)) and in_range1((i1 + 1)))

axiom H28 : ((to_rep(a__first) <= temp___254) and
  (temp___254 <= to_rep(a__last)))

axiom H29 : (o6 = temp___254)

axiom H30 : (o7 = (a[o6]))

axiom H31 : (o8 = to_rep(o7))

axiom H32 : (result3 = y)

axiom H33 : (y2 = o8)

axiom H34 : ((x2 <  y2) -> (result4 = z))

axiom H35 : ((x2 <  y2) -> (z2 = x2))

axiom H36 : ((x2 <  y2) -> (x2 = result5))

axiom H37 : ((x2 <  y2) -> (x3 = y2))

axiom H38 : ((x2 <  y2) -> (y2 = result6))

axiom H39 : ((x2 <  y2) -> (y3 = z2))

axiom H40 : ((not (x2 <  y2)) -> (z2 = z))

axiom H41 : ((not (x2 <  y2)) -> (y3 = y2))

axiom H42 : ((not (x2 <  y2)) -> (x3 = x2))

axiom H43 : ((not (x2 <  y2)) -> (z2 = z1))

axiom H44 : ((not (x2 <  y2)) -> (y3 = y2))

axiom H45 : ((not (x2 <  y2)) -> (x3 = x2))

axiom H46 : ((o9 = (i1 - 1)) and in_range1((i1 - 1)))

axiom H47 : (result7 = j)

axiom H48 : (j2 = o9)

axiom H49 : ((0 <= j2) -> ((to_rep(a__first) <= j2) and
  (j2 <= to_rep(a__last))))

axiom H50 : ((0 <= j2) -> (o10 = j2))

axiom H51 : ((0 <= j2) -> (o11 = (a[o10])))

axiom H52 : ((0 <= j2) -> (o12 = to_rep(o11)))

axiom H53 : ((0 <= j2) -> (((x3 <  o12) -> (result8 = true)) and
  ((not (x3 <  o12)) -> (result8 = false))))

axiom H54 : ((not (0 <= j2)) -> (result8 = false))

axiom H55 : (result8 = true)

axiom H56 : ((o15 = j2) and in_range2(j2))

axiom H57 : ((o13 = (j2 + 2)) and in_range1((j2 + 2)))

axiom H58 : ((o14 = o13) and in_range2(o13))

axiom H59 : (((is_perm({ elts = a; rt = mk(to_rep(a__first), to_rep(a__last))
  }, { elts = a2; rt = mk(to_rep(a__first), to_rep(a__last)) }) = true) and
  ((to_rep((a2[o14])) = to_rep((a[o15]))) and
  ((to_rep((a2[o15])) = to_rep((a[o14]))) and
  (forall z15:int. (((to_rep(a__first) <= z15) and
  (z15 <= to_rep(a__last))) -> (((not (z15 = o14)) and (not (z15 = o15))) ->
  (to_rep((a2[z15])) = to_rep((a[z15]))))))))) and (to_rep(a__first) = 0))

axiom H60 : ((0 <= j3) and (((to_rep(a__first) <= to_rep(a__last)) ->
  (j3 <= (((to_rep(a__last) - to_rep(a__first)) + 1) - 3))) and
  ((not (to_rep(a__first) <= to_rep(a__last))) -> (j3 <= (0 - 3)))))

axiom H61 : (sorted({ elts = a3; rt = mk(to_rep(a__first), to_rep(a__last))
  }, 0, (j3 - 1)) = true)

axiom H62 : (sorted({ elts = a3; rt = mk(to_rep(a__first), to_rep(a__last))
  }, (j3 + 2), (i1 + 1)) = true)

axiom H63 : ((0 <  j3) -> (to_rep((a3[(j3 - 1)])) <= to_rep((a3[(j3 + 2)]))))

axiom H64 : (x3 <  to_rep((a3[(j3 + 2)])))

axiom H65 : (is_perm({ elts = b; rt = mk(to_rep(first2(b1)),
  to_rep(last2(b1))) }, { elts = a3; rt = mk(to_rep(a__first),
  to_rep(a__last)) }) = true)

axiom H66 : (((to_rep((a3[j3])) = x3) and (to_rep((a3[(j3 + 1)])) = y3)) or
  ((to_rep((a3[j3])) = y3) and (to_rep((a3[(j3 + 1)])) = x3)))

axiom H67 : ((((- 2147483648) <= 2147483647) -> in_range1(j3)) and
  (to_rep(a__first) = 0))

axiom H68 : ((o37 = (j3 - 1)) and in_range1((j3 - 1)))

axiom H69 : (j3 = result9)

axiom H70 : (j4 = o37)

axiom H71 : ((0 <= j4) -> ((to_rep(a__first) <= j4) and
  (j4 <= to_rep(a__last))))

axiom H72 : ((0 <= j4) -> (o38 = j4))

axiom H73 : ((0 <= j4) -> (o39 = (a3[o38])))

axiom H74 : ((0 <= j4) -> (o40 = to_rep(o39)))

axiom H75 : ((0 <= j4) -> (((x3 <  o40) -> (o41 = true)) and
  ((not (x3 <  o40)) -> (o41 = false))))

axiom H76 : ((not (0 <= j4)) -> (o41 = false))

axiom H77 : (((not (o41 = true)) -> (result10 = true)) and ((o41 = true) ->
  (result10 = false)))

axiom H78 : (not (result10 = true))

axiom H79 : ((o44 = j4) and in_range2(j4))

axiom H80 : ((o42 = (j4 + 2)) and in_range1((j4 + 2)))

axiom H81 : ((o43 = o42) and in_range2(o42))

axiom H82 : (((is_perm({ elts = a3; rt = mk(to_rep(a__first),
  to_rep(a__last)) }, { elts = a4; rt = mk(to_rep(a__first), to_rep(a__last))
  }) = true) and ((to_rep((a4[o43])) = to_rep((a3[o44]))) and
  ((to_rep((a4[o44])) = to_rep((a3[o43]))) and
  (forall z15:int. (((to_rep(a__first) <= z15) and
  (z15 <= to_rep(a__last))) -> (((not (z15 = o43)) and (not (z15 = o44))) ->
  (to_rep((a4[z15])) = to_rep((a3[z15]))))))))) and (to_rep(a__first) = 0))

 (* File "pair_insertion_sort.ads", line 7, characters 0-0 *)
goal WP_parameter_def : (((to_rep((a4[j4])) = x3) and
  (to_rep((a4[(j4 + 1)])) = y3)) or ((to_rep((a4[j4])) = y3) and
  (to_rep((a4[(j4 + 1)])) = x3)))
