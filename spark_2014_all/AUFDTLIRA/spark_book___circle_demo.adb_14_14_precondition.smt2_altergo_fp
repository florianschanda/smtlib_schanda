(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type coordinate_type

predicate in_range3(x: int) = (((- 100) <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : coordinate_type, coordinate_type -> bool

logic dummy5 : coordinate_type

type coordinate_type__ref = { coordinate_type__content : coordinate_type
}

function coordinate_type__ref___projection(a: coordinate_type__ref) : coordinate_type =
  (a).coordinate_type__content

logic to_rep2 : coordinate_type -> int

logic of_rep2 : int -> coordinate_type

axiom inversion_axiom2 :
  (forall x:coordinate_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:coordinate_type [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type radius_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : radius_type, radius_type -> bool

logic dummy6 : radius_type

type radius_type__ref = { radius_type__content : radius_type
}

function radius_type__ref___projection(a: radius_type__ref) : radius_type =
  (a).radius_type__content

logic to_rep3 : radius_type -> int

logic of_rep3 : int -> radius_type

axiom inversion_axiom3 :
  (forall x:radius_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:radius_type [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__shapes5__circle__center_x : coordinate_type;
rec__shapes5__circle__center_y : coordinate_type;
rec__shapes5__circle__radius : radius_type
}

function us_split_fields_Center_X__projection(a: us_split_fields) : coordinate_type =
  (a).rec__shapes5__circle__center_x

function us_split_fields_Center_Y__projection(a: us_split_fields) : coordinate_type =
  (a).rec__shapes5__circle__center_y

function us_split_fields_Radius__projection(a: us_split_fields) : radius_type =
  (a).rec__shapes5__circle__radius

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__shapes5__circle__center_x) = to_rep2(((b).us_split_fields1).rec__shapes5__circle__center_x)) and
  (to_rep2(((a).us_split_fields1).rec__shapes5__circle__center_y) = to_rep2(((b).us_split_fields1).rec__shapes5__circle__center_y))) and
  (to_rep3(((a).us_split_fields1).rec__shapes5__circle__radius) = to_rep3(((b).us_split_fields1).rec__shapes5__circle__radius))) ->
  (bool_eq8(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__shapes5__circle__center_x) = to_rep2(((b).us_split_fields1).rec__shapes5__circle__center_x)) and
  (to_rep2(((a).us_split_fields1).rec__shapes5__circle__center_y) = to_rep2(((b).us_split_fields1).rec__shapes5__circle__center_y))) and
  (to_rep3(((a).us_split_fields1).rec__shapes5__circle__radius) = to_rep3(((b).us_split_fields1).rec__shapes5__circle__radius)))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:coordinate_type. forall a1:coordinate_type.
  forall a2:radius_type. (0 <= object__size1({ us_split_fields1 = {
  rec__shapes5__circle__center_x = a; rec__shapes5__circle__center_y = a1;
  rec__shapes5__circle__radius = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:coordinate_type. forall a1:coordinate_type.
  forall a2:radius_type. (0 <= object__alignment1({ us_split_fields1 = {
  rec__shapes5__circle__center_x = a; rec__shapes5__circle__center_y = a1;
  rec__shapes5__circle__radius = a2 } })))

logic shapes5__circle__center_x__first__bit : int

logic shapes5__circle__center_x__last__bit : int

logic shapes5__circle__center_x__position : int

axiom shapes5__circle__center_x__first__bit_axiom :
  (0 <= shapes5__circle__center_x__first__bit)

axiom shapes5__circle__center_x__last__bit_axiom :
  (shapes5__circle__center_x__first__bit <  shapes5__circle__center_x__last__bit)

axiom shapes5__circle__center_x__position_axiom :
  (0 <= shapes5__circle__center_x__position)

logic shapes5__circle__center_y__first__bit : int

logic shapes5__circle__center_y__last__bit : int

logic shapes5__circle__center_y__position : int

axiom shapes5__circle__center_y__first__bit_axiom :
  (0 <= shapes5__circle__center_y__first__bit)

axiom shapes5__circle__center_y__last__bit_axiom :
  (shapes5__circle__center_y__first__bit <  shapes5__circle__center_y__last__bit)

axiom shapes5__circle__center_y__position_axiom :
  (0 <= shapes5__circle__center_y__position)

logic shapes5__circle__radius__first__bit : int

logic shapes5__circle__radius__last__bit : int

logic shapes5__circle__radius__position : int

axiom shapes5__circle__radius__first__bit_axiom :
  (0 <= shapes5__circle__radius__first__bit)

axiom shapes5__circle__radius__last__bit_axiom :
  (shapes5__circle__radius__first__bit <  shapes5__circle__radius__last__bit)

axiom shapes5__circle__radius__position_axiom :
  (0 <= shapes5__circle__radius__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : coordinate_type

logic dummy8 : coordinate_type

logic dummy9 : radius_type

type circle__ref = { circle__content : us_rep
}

function circle__ref___projection(a: circle__ref) : us_rep =
  (a).circle__content

logic attr__ATTRIBUTE_ADDRESS : int

logic in_bounds : us_rep, int -> bool

logic in_bounds__function_guard : bool, us_rep, int -> prop

logic make_circle : int, int, int, int -> us_rep

logic make_circle__function_guard : us_rep, int, int, int, int -> prop

axiom make_circle__post_axiom :
  (forall x:int. forall y:int. forall radius:int.
  forall shapes5__wild_man:int [make_circle(x, y, radius,
  shapes5__wild_man)]. ((((in_range3(x) and in_range3(y)) and
  in_range4(radius)) and in_range(shapes5__wild_man)) ->
  (in_bounds(make_circle(x, y, radius, shapes5__wild_man),
  shapes5__wild_man) = true)))

logic inside_circle : int, int, us_rep, int -> bool

logic inside_circle__function_guard : bool, int, int, us_rep, int -> prop

axiom inside_circle__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___String_Literal_602 : unit -> (int,character) farray

axiom temp___String_Literal_602__def_axiom :
  (((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_602(void)[1])) = 84) and
  (to_rep((temp___String_Literal_602(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_602(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_602(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_602(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_602(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_602(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_602(void)[8])) = 103)) and
  (to_rep((temp___String_Literal_602(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_602(void)[10])) = 110)) and
  (to_rep((temp___String_Literal_602(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_602(void)[12])) = 105)) and
  (to_rep((temp___String_Literal_602(void)[13])) = 115)) and
  (to_rep((temp___String_Literal_602(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_602(void)[15])) = 110)) and
  (to_rep((temp___String_Literal_602(void)[16])) = 111)) and
  (to_rep((temp___String_Literal_602(void)[17])) = 116)) and
  (to_rep((temp___String_Literal_602(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_602(void)[19])) = 105)) and
  (to_rep((temp___String_Literal_602(void)[20])) = 110)) and
  (to_rep((temp___String_Literal_602(void)[21])) = 115)) and
  (to_rep((temp___String_Literal_602(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_602(void)[23])) = 100)) and
  (to_rep((temp___String_Literal_602(void)[24])) = 101)) and
  (to_rep((temp___String_Literal_602(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_602(void)[26])) = 116)) and
  (to_rep((temp___String_Literal_602(void)[27])) = 104)) and
  (to_rep((temp___String_Literal_602(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_602(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_602(void)[30])) = 99)) and
  (to_rep((temp___String_Literal_602(void)[31])) = 105)) and
  (to_rep((temp___String_Literal_602(void)[32])) = 114)) and
  (to_rep((temp___String_Literal_602(void)[33])) = 99)) and
  (to_rep((temp___String_Literal_602(void)[34])) = 108)) and
  (to_rep((temp___String_Literal_602(void)[35])) = 101))

logic temp___String_Literal_603 : unit -> (int,character) farray

axiom temp___String_Literal_603__def_axiom :
  (((((((((((((((((((((((((((((((to_rep((temp___String_Literal_603(void)[1])) = 84) and
  (to_rep((temp___String_Literal_603(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_603(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_603(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_603(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_603(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_603(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_603(void)[8])) = 103)) and
  (to_rep((temp___String_Literal_603(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_603(void)[10])) = 110)) and
  (to_rep((temp___String_Literal_603(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_603(void)[12])) = 105)) and
  (to_rep((temp___String_Literal_603(void)[13])) = 115)) and
  (to_rep((temp___String_Literal_603(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_603(void)[15])) = 105)) and
  (to_rep((temp___String_Literal_603(void)[16])) = 110)) and
  (to_rep((temp___String_Literal_603(void)[17])) = 115)) and
  (to_rep((temp___String_Literal_603(void)[18])) = 105)) and
  (to_rep((temp___String_Literal_603(void)[19])) = 100)) and
  (to_rep((temp___String_Literal_603(void)[20])) = 101)) and
  (to_rep((temp___String_Literal_603(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_603(void)[22])) = 116)) and
  (to_rep((temp___String_Literal_603(void)[23])) = 104)) and
  (to_rep((temp___String_Literal_603(void)[24])) = 101)) and
  (to_rep((temp___String_Literal_603(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_603(void)[26])) = 99)) and
  (to_rep((temp___String_Literal_603(void)[27])) = 105)) and
  (to_rep((temp___String_Literal_603(void)[28])) = 114)) and
  (to_rep((temp___String_Literal_603(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_603(void)[30])) = 108)) and
  (to_rep((temp___String_Literal_603(void)[31])) = 101))

axiom in_bounds__post_axiom : true

 (* File "shapes5.ads", line 21, characters 0-0 *)
goal WP_parameter_def :
  (forall wild_man:int. forall my_circle__split_fields:coordinate_type.
  forall my_circle__split_fields1:coordinate_type.
  forall my_circle__split_fields2:radius_type.
  forall temp___601:coordinate_type. forall temp___6011:coordinate_type.
  forall temp___6012:radius_type. forall result:coordinate_type.
  forall result1:coordinate_type. forall result2:radius_type.
  forall my_circle__split_fields3:coordinate_type.
  forall my_circle__split_fields4:coordinate_type.
  forall my_circle__split_fields5:radius_type. (in_range(wild_man) -> (((({
  us_split_fields1 = { rec__shapes5__circle__center_x = temp___601;
  rec__shapes5__circle__center_y = temp___6011;
  rec__shapes5__circle__radius = temp___6012 } } = make_circle(0, 0, 5,
  wild_man)) and (in_bounds({ us_split_fields1 = {
  rec__shapes5__circle__center_x = temp___601;
  rec__shapes5__circle__center_y = temp___6011;
  rec__shapes5__circle__radius = temp___6012 } }, wild_man) = true)) and
  (((result = my_circle__split_fields) and
  ((result1 = my_circle__split_fields1) and
  (result2 = my_circle__split_fields2))) and
  ((temp___601 = my_circle__split_fields3) and
  ((temp___6011 = my_circle__split_fields4) and
  (temp___6012 = my_circle__split_fields5))))) -> (in_bounds({
  us_split_fields1 = { rec__shapes5__circle__center_x =
  my_circle__split_fields3; rec__shapes5__circle__center_y =
  my_circle__split_fields4; rec__shapes5__circle__radius =
  my_circle__split_fields5 } }, wild_man) = true))))
