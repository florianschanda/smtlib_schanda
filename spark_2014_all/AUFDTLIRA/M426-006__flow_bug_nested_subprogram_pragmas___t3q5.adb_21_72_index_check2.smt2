(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range1 temp___expr_166)))
(declare-sort contents_type 0)
(declare-fun contents_typeqtint (contents_type) Int)
(assert (forall ((i contents_type)) (and (<= (- 1000) (contents_typeqtint i)) (<= (contents_typeqtint i) 1000))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 1000) x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (contents_type contents_type) Bool)
(declare-const dummy1 contents_type)
(declare-datatypes () ((contents_type__ref (mk_contents_type__ref (contents_type__content contents_type)))))
(define-fun contents_type__ref___projection ((a contents_type__ref)) contents_type (contents_type__content a))
(define-fun to_rep ((x contents_type)) Int (contents_typeqtint x))
(declare-fun of_rep (Int) contents_type)
(assert (forall ((x contents_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x contents_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int contents_type))))))
(declare-fun slide ((Array Int contents_type) Int Int) (Array Int contents_type))
(assert (forall ((a (Array Int contents_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int contents_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int contents_type)) (a__first Int) (a__last Int) (b (Array Int contents_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int contents_type)) (b (Array Int contents_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const arr (Array Int contents_type))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const l Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const u Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort tbase_index_typeB 0)
(declare-fun tbase_index_typeBqtint (tbase_index_typeB) Int)
(assert (forall ((i tbase_index_typeB)) (and (<= (- 128) (tbase_index_typeBqtint i)) (<= (tbase_index_typeBqtint i) 127))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tbase_index_typeB tbase_index_typeB) Bool)
(declare-const dummy2 tbase_index_typeB)
(declare-datatypes () ((tbase_index_typeB__ref (mk_tbase_index_typeB__ref (tbase_index_typeB__content tbase_index_typeB)))))
(define-fun tbase_index_typeB__ref___projection ((a tbase_index_typeB__ref)) tbase_index_typeB (tbase_index_typeB__content a))
(define-fun to_rep1 ((x tbase_index_typeB)) Int (tbase_index_typeBqtint x))
(declare-fun of_rep1 (Int) tbase_index_typeB)
(assert (forall ((x tbase_index_typeB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tbase_index_typeB)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tbase_index_typeB tbase_index_typeB) Bool)
(declare-const dummy3 tbase_index_typeB)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content tbase_index_typeB)))))
(define-fun t7b__ref___projection ((a t7b__ref)) tbase_index_typeB (t7b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 1000) 1000)) (in_range2 temp___expr_173)))
(declare-const k Int)
(declare-const x Int)
(declare-const result Int)
(declare-const k1 Int)
(assert (in_range1 l))
(assert (in_range1 u))
(assert (and (and (<= 1 l) (< l u)) (<= u 100)))
(assert (=> (<= 1 100) (in_range1 k)))
(assert (= (mk_int__ref result) (mk_int__ref k)))
(assert (= k1 l))
(assert (<= l x))
(assert (<= x l))
(assert (not (<= 1 x)))
(check-sat)
(exit)
