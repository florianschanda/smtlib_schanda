(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort elementtype 0)
(declare-fun elementtypeqtint (elementtype) Int)
(assert (forall ((i elementtype)) (and (<= 0 (elementtypeqtint i)) (<= (elementtypeqtint i) 1000))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (elementtype elementtype) Bool)
(declare-const dummy elementtype)
(declare-datatypes () ((elementtype__ref (mk_elementtype__ref (elementtype__content elementtype)))))
(define-fun elementtype__ref___projection ((a elementtype__ref)) elementtype (elementtype__content a))
(define-fun to_rep ((x elementtype)) Int (elementtypeqtint x))
(declare-fun of_rep (Int) elementtype)
(assert (forall ((x elementtype)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x elementtype)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort indextype 0)
(declare-fun indextypeqtint (indextype) Int)
(assert (forall ((i indextype)) (and (<= 1 (indextypeqtint i)) (<= (indextypeqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (indextype indextype) Bool)
(declare-const dummy1 indextype)
(declare-datatypes () ((indextype__ref (mk_indextype__ref (indextype__content indextype)))))
(define-fun indextype__ref___projection ((a indextype__ref)) indextype (indextype__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range2 temp___expr_166)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int elementtype))))))
(declare-fun slide ((Array Int elementtype) Int Int) (Array Int elementtype))
(assert (forall ((a (Array Int elementtype))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int elementtype))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int elementtype)) (a__first Int) (a__last Int) (b (Array Int elementtype)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int elementtype)) (b (Array Int elementtype))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const l Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const u Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content integer)))))
(define-fun t1b__ref___projection ((a t1b__ref)) integer (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 1000)) (in_range1 temp___expr_159)))
(declare-const rliteral elementtype)
(assert (= (elementtypeqtint rliteral) 0))
(declare-const a (Array Int elementtype))
(declare-const i Int)
(declare-const temp___187 (Array Int elementtype))
(declare-const temp___186 Int)
(declare-const temp___184 (Array Int elementtype))
(declare-const n Int)
(declare-const o Bool)
(declare-const a1 (Array Int elementtype))
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 (Array Int elementtype))
(declare-const a2 (Array Int elementtype))
(declare-const a3 (Array Int elementtype))
(declare-const i2 Int)
(declare-const a4 (Array Int elementtype))
(declare-const i3 Int)
(declare-const a5 (Array Int elementtype))
(declare-const i4 Int)
(declare-const a6 (Array Int elementtype))
(declare-const i5 Int)
(declare-const a7 (Array Int elementtype))
(declare-const i6 Int)
(declare-const a8 (Array Int elementtype))
(declare-const i7 Int)
(declare-const a9 (Array Int elementtype))
(declare-const i8 Int)
(define-fun i9 () int__ref (mk_int__ref i5))
(define-fun a10 () map__ref (mk_map__ref a6))
(define-fun a11 () map__ref (mk_map__ref a))
(assert (in_range2 l))
(assert (in_range2 u))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 l))
(assert (=> (and (<= l i1) (<= i1 u)) (= temp___187 a)))
(assert (=> (and (<= l i1) (<= i1 u)) (= temp___186 i1)))
(assert (=> (and (<= l i1) (<= i1 u)) (= temp___184 a)))
(assert (=> (and (<= l i1) (<= i1 u)) (= (mk_map__ref result1) a11)))
(assert (=> (and (<= l i1) (<= i1 u)) (= a2 (store a i1 rliteral))))
(assert (=> (and (<= l i1) (<= i1 u)) (and (forall ((n1 Int)) (=> (and (<= l n1) (<= n1 i2)) (= (to_rep (select a3 n1)) 0))) (forall ((n1 Int)) (=> (and (<= 1 n1) (<= n1 100)) (=> (or (< n1 l) (< i2 n1)) (= (to_rep (select a3 n1)) (to_rep (select temp___187 n1)))))))))
(assert (=> (and (<= l i1) (<= i1 u)) (and (and (forall ((temp___185 Int)) (=> (and (<= 1 temp___185) (<= temp___185 100)) (=> (or (< u temp___185) (or (< temp___185 l) (< i2 temp___185))) (= (select a3 temp___185) (select temp___184 temp___185))))) (=> (<= l u) (dynamic_property l u i2))) (and (<= l i2) (<= i2 u)))))
(assert (=> (and (<= l i1) (<= i1 u)) (= i2 u)))
(assert (=> (and (<= l i1) (<= i1 u)) (= i2 i3)))
(assert (=> (and (<= l i1) (<= i1 u)) (= a3 a4)))
(assert (=> (and (<= l i1) (<= i1 u)) (= i4 i2)))
(assert (=> (and (<= l i1) (<= i1 u)) (= a5 a3)))
(assert (=> (and (<= l i1) (<= i1 u)) (= i9 (mk_int__ref i3))))
(assert (=> (and (<= l i1) (<= i1 u)) (= a10 (mk_map__ref a4))))
(assert (=> (and (<= l i1) (<= i1 u)) (= i6 i4)))
(assert (=> (and (<= l i1) (<= i1 u)) (= a7 a5)))
(assert (=> (not (and (<= l i1) (<= i1 u))) (= i1 i5)))
(assert (=> (not (and (<= l i1) (<= i1 u))) (= a10 a11)))
(assert (=> (not (and (<= l i1) (<= i1 u))) (= i6 i1)))
(assert (=> (not (and (<= l i1) (<= i1 u))) (= a7 a1)))
(assert (= (mk_int__ref i7) i9))
(assert (= (mk_map__ref a8) a10))
(assert (= i8 i6))
(assert (= a9 a7))
(assert (= (= o true) (forall ((n1 Int)) (=> (and (<= 1 n1) (<= n1 100)) (=> (or (< n1 l) (< u n1)) (= (to_rep (select a8 n1)) (to_rep (select a n1))))))))
(assert (<= l n))
(assert (<= n u))
(assert (not (<= n 100)))
(check-sat)
(exit)
