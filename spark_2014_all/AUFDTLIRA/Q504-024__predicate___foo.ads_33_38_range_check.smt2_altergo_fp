(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type cpu_range

predicate in_range(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : cpu_range, cpu_range -> bool

logic dummy : cpu_range

type cpu_range__ref = { cpu_range__content : cpu_range
}

function cpu_range__ref___projection(a: cpu_range__ref) : cpu_range =
  (a).cpu_range__content

logic cpu_id : int

logic attr__ATTRIBUTE_ADDRESS : int

type max_lsid_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : max_lsid_type, max_lsid_type -> bool

logic dummy1 : max_lsid_type

type max_lsid_type__ref = { max_lsid_type__content : max_lsid_type
}

function max_lsid_type__ref___projection(a: max_lsid_type__ref) : max_lsid_type =
  (a).max_lsid_type__content

logic to_rep : max_lsid_type -> int

logic of_rep : int -> max_lsid_type

axiom inversion_axiom :
  (forall x:max_lsid_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:max_lsid_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,max_lsid_type) farray
}

logic slide : (int,max_lsid_type) farray, int,
  int -> (int,max_lsid_type) farray

axiom slide_eq :
  (forall a:(int,max_lsid_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,max_lsid_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,max_lsid_type) farray, int, int,
  (int,max_lsid_type) farray, int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,max_lsid_type) farray. forall a__first:int.
  forall a__last:int. forall b:(int,max_lsid_type) farray.
  forall b__first:int. forall b__last:int [bool_eq3(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,max_lsid_type) farray. forall b:(int,max_lsid_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic cpu_lsid_last : (int,max_lsid_type) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic foo__cpu_lsid_last__aggregate_def : int,
  int -> (int,max_lsid_type) farray

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type tmax_lsid_typeB

predicate in_range3(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tmax_lsid_typeB, tmax_lsid_typeB -> bool

logic dummy3 : tmax_lsid_typeB

type tmax_lsid_typeB__ref = { tmax_lsid_typeB__content : tmax_lsid_typeB
}

function tmax_lsid_typeB__ref___projection(a: tmax_lsid_typeB__ref) : tmax_lsid_typeB =
  (a).tmax_lsid_typeB__content

logic to_rep1 : tmax_lsid_typeB -> int

logic of_rep1 : int -> tmax_lsid_typeB

axiom inversion_axiom1 :
  (forall x:tmax_lsid_typeB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:tmax_lsid_typeB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_159:int. ((((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) and
  (to_rep2((a[temp___idx_159])) = to_rep2((b[((b__first - a__first) + temp___idx_159)])))) or
  (not ((a__first <= temp___idx_159) and (temp___idx_159 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep2((a[temp___idx_159])) = to_rep2((b[((b__first - a__first) + temp___idx_159)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep2((a[temp___idx_159])) = to_rep2((b[((b__first - a__first) + temp___idx_159)])))))))))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tmax_lsid_typeB, tmax_lsid_typeB -> bool

logic dummy4 : tmax_lsid_typeB

type t8s__ref = { t8s__content : tmax_lsid_typeB
}

function t8s__ref___projection(a: t8s__ref) : tmax_lsid_typeB =
  (a).t8s__content

type t

logic first : t -> tmax_lsid_typeB

logic last : t -> tmax_lsid_typeB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,natural) farray

logic dummy6 : t

type t9s__ref = { t9s__content : us_t
}

function t9s__ref___projection(a: t9s__ref) : us_t = (a).t9s__content

type us_split_discrs = { rec__foo__subject_state__max_id : max_lsid_type
}

function us_split_discrs___projection(a: us_split_discrs) : max_lsid_type =
  (a).rec__foo__subject_state__max_id

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__foo__subject_state__states : us_t
}

function us_split_fields_States__projection(a: us_split_fields) : us_t =
  (a).rec__foo__subject_state__states

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__foo__subject_state__max_id) = to_rep(((b).us_split_discrs1).rec__foo__subject_state__max_id)) and
  (bool_eq8(((a).us_split_fields1).rec__foo__subject_state__states,
  ((b).us_split_fields1).rec__foo__subject_state__states) = true)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__foo__subject_state__max_id) = to_rep(((b).us_split_discrs1).rec__foo__subject_state__max_id)) and
  (bool_eq8(((a).us_split_fields1).rec__foo__subject_state__states,
  ((b).us_split_fields1).rec__foo__subject_state__states) = true))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:max_lsid_type. forall a1:(int,natural) farray. forall a2:t.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__foo__subject_state__max_id = a }; us_split_fields1 = {
  rec__foo__subject_state__states = { elts = a1; rt = a2 } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:max_lsid_type. forall a1:(int,natural) farray. forall a2:t.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__foo__subject_state__max_id = a }; us_split_fields1 = {
  rec__foo__subject_state__states = { elts = a1; rt = a2 } } })))

logic foo__subject_state__max_id__first__bit : int

logic foo__subject_state__max_id__last__bit : int

logic foo__subject_state__max_id__position : int

axiom foo__subject_state__max_id__first__bit_axiom :
  (0 <= foo__subject_state__max_id__first__bit)

axiom foo__subject_state__max_id__last__bit_axiom :
  (foo__subject_state__max_id__first__bit <  foo__subject_state__max_id__last__bit)

axiom foo__subject_state__max_id__position_axiom :
  (0 <= foo__subject_state__max_id__position)

logic foo__subject_state__states__first__bit : int

logic foo__subject_state__states__last__bit : int

logic foo__subject_state__states__position : int

axiom foo__subject_state__states__first__bit_axiom :
  (0 <= foo__subject_state__states__first__bit)

axiom foo__subject_state__states__last__bit_axiom :
  (foo__subject_state__states__first__bit <  foo__subject_state__states__last__bit)

axiom foo__subject_state__states__position_axiom :
  (0 <= foo__subject_state__states__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : max_lsid_type

logic dummy8 : (int,natural) farray

logic dummy9 : t

type subject_state__ref = { subject_state__content : us_rep
}

function subject_state__ref___projection(a: subject_state__ref) : us_rep =
  (a).subject_state__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : tmax_lsid_typeB, tmax_lsid_typeB -> bool

logic dummy10 : tmax_lsid_typeB

type tT10sP1__ref = { tT10sP1__content : tmax_lsid_typeB
}

function tT10sP1__ref___projection(a: tT10sP1__ref) : tmax_lsid_typeB =
  (a).tT10sP1__content

type t1

logic first2 : t1 -> tmax_lsid_typeB

logic last2 : t1 -> tmax_lsid_typeB

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,natural) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy11 : (int,natural) farray

logic dummy12 : t1

type t10s__ref = { t10s__content : us_t1
}

function t10s__ref___projection(a: t10s__ref) : us_t1 = (a).t10s__content

type us_split_fields2 = { rec__foo__subject_state__states1 : us_t1
}

function us_split_fields_States__2__projection(a: us_split_fields2) : us_t1 =
  (a).rec__foo__subject_state__states1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__foo__subject_state__states =
  of_array(to_array1(((a).us_split_fields3).rec__foo__subject_state__states1),
  first3(((a).us_split_fields3).rec__foo__subject_state__states1),
  last3(((a).us_split_fields3).rec__foo__subject_state__states1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__foo__subject_state__states1 =
  of_array1(to_array(((r).us_split_fields1).rec__foo__subject_state__states),
  first1(((r).us_split_fields1).rec__foo__subject_state__states),
  last1(((r).us_split_fields1).rec__foo__subject_state__states)) } }

logic bool_eq12 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq12(a, b)].
  ((((to_rep(((a).us_split_discrs2).rec__foo__subject_state__max_id) = to_rep(((b).us_split_discrs2).rec__foo__subject_state__max_id)) and
  (bool_eq11(((a).us_split_fields3).rec__foo__subject_state__states1,
  ((b).us_split_fields3).rec__foo__subject_state__states1) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs2).rec__foo__subject_state__max_id) = to_rep(((b).us_split_discrs2).rec__foo__subject_state__max_id)) and
  (bool_eq11(((a).us_split_fields3).rec__foo__subject_state__states1,
  ((b).us_split_fields3).rec__foo__subject_state__states1) = true))) ->
  (bool_eq12(a, b) = false))))

predicate in_range4(rec__foo__subject_state__max_id1: int, a: us_rep) =
  (rec__foo__subject_state__max_id1 = to_rep(((a).us_split_discrs1).rec__foo__subject_state__max_id))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:max_lsid_type. forall a1:(int,natural) farray. forall a2:t1.
  (0 <= object__size3({ us_split_discrs2 = {
  rec__foo__subject_state__max_id = a }; us_split_fields3 = {
  rec__foo__subject_state__states1 = { elts1 = a1; rt1 = a2 } } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:max_lsid_type. forall a1:(int,natural) farray. forall a2:t1.
  (0 <= object__alignment3({ us_split_discrs2 = {
  rec__foo__subject_state__max_id = a }; us_split_fields3 = {
  rec__foo__subject_state__states1 = { elts1 = a1; rt1 = a2 } } })))

logic foo__subject_state__max_id__first__bit1 : int

logic foo__subject_state__max_id__last__bit1 : int

logic foo__subject_state__max_id__position1 : int

axiom foo__subject_state__max_id__first__bit_axiom1 :
  (0 <= foo__subject_state__max_id__first__bit1)

axiom foo__subject_state__max_id__last__bit_axiom1 :
  (foo__subject_state__max_id__first__bit1 <  foo__subject_state__max_id__last__bit1)

axiom foo__subject_state__max_id__position_axiom1 :
  (0 <= foo__subject_state__max_id__position1)

logic foo__subject_state__states__first__bit1 : int

logic foo__subject_state__states__last__bit1 : int

logic foo__subject_state__states__position1 : int

axiom foo__subject_state__states__first__bit_axiom1 :
  (0 <= foo__subject_state__states__first__bit1)

axiom foo__subject_state__states__last__bit_axiom1 :
  (foo__subject_state__states__first__bit1 <  foo__subject_state__states__last__bit1)

axiom foo__subject_state__states__position_axiom1 :
  (0 <= foo__subject_state__states__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy13 : max_lsid_type

logic dummy14 : (int,natural) farray

logic dummy15 : t1

type tstatesS__ref = { tstatesS__content : us_rep1
}

function tstatesS__ref___projection(a: tstatesS__ref) : us_rep1 =
  (a).tstatesS__content

logic states__split_discrs : max_lsid_type

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom cpu_lsid_last__def_axiom :
  (cpu_lsid_last = foo__cpu_lsid_last__aggregate_def(3, 4))

axiom def_axiom :
  (forall temp___156:int. forall temp___157:int. ((in_range1(temp___156) and
  in_range1(temp___157)) ->
  ((to_rep((foo__cpu_lsid_last__aggregate_def(temp___156,
  temp___157)[0])) = temp___156) and
  (to_rep((foo__cpu_lsid_last__aggregate_def(temp___156,
  temp___157)[1])) = temp___157))))

 (* File "foo.ads", line 44, characters 0-0 *)
goal WP_parameter_def :
  (forall temp___max_id_241:int. (((0 <= 1) -> in_range(cpu_id)) ->
  ((foo__cpu_lsid_last__aggregate_def(3, 4) = cpu_lsid_last) ->
  (in_range1(temp___max_id_241) ->
  in_range1(to_rep((cpu_lsid_last[cpu_id])))))))
