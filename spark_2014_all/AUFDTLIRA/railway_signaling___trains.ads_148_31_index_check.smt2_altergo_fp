(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type track_id

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : track_id, track_id -> bool

logic dummy : track_id

type track_id__ref = { track_id__content : track_id
}

function track_id__ref___projection(a: track_id__ref) : track_id =
  (a).track_id__content

type train_id

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : train_id, train_id -> bool

logic dummy1 : train_id

type train_id__ref = { train_id__content : train_id
}

function train_id__ref___projection(a: train_id__ref) : train_id =
  (a).train_id__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : track_id -> int

logic of_rep1 : int -> track_id

axiom inversion_axiom1 :
  (forall x:track_id [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:track_id [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__trains__train_position__track_begin : track_id;
rec__trains__train_position__pos_begin : natural;
rec__trains__train_position__track_end : track_id
}

function us_split_fields_Track_Begin__projection(a: us_split_fields) : track_id =
  (a).rec__trains__train_position__track_begin

function us_split_fields_Pos_Begin__projection(a: us_split_fields) : natural =
  (a).rec__trains__train_position__pos_begin

function us_split_fields_Track_End__projection(a: us_split_fields) : track_id =
  (a).rec__trains__train_position__track_end

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep1(((a).us_split_fields1).rec__trains__train_position__track_begin) = to_rep1(((b).us_split_fields1).rec__trains__train_position__track_begin)) and
  (to_rep(((a).us_split_fields1).rec__trains__train_position__pos_begin) = to_rep(((b).us_split_fields1).rec__trains__train_position__pos_begin))) and
  (to_rep1(((a).us_split_fields1).rec__trains__train_position__track_end) = to_rep1(((b).us_split_fields1).rec__trains__train_position__track_end))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields1).rec__trains__train_position__track_begin) = to_rep1(((b).us_split_fields1).rec__trains__train_position__track_begin)) and
  (to_rep(((a).us_split_fields1).rec__trains__train_position__pos_begin) = to_rep(((b).us_split_fields1).rec__trains__train_position__pos_begin))) and
  (to_rep1(((a).us_split_fields1).rec__trains__train_position__track_end) = to_rep1(((b).us_split_fields1).rec__trains__train_position__track_end)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:track_id. forall a1:natural. forall a2:track_id.
  (0 <= object__size({ us_split_fields1 = {
  rec__trains__train_position__track_begin = a;
  rec__trains__train_position__pos_begin = a1;
  rec__trains__train_position__track_end = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:track_id. forall a1:natural. forall a2:track_id.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__trains__train_position__track_begin = a;
  rec__trains__train_position__pos_begin = a1;
  rec__trains__train_position__track_end = a2 } })))

logic trains__train_position__track_begin__first__bit : int

logic trains__train_position__track_begin__last__bit : int

logic trains__train_position__track_begin__position : int

axiom trains__train_position__track_begin__first__bit_axiom :
  (0 <= trains__train_position__track_begin__first__bit)

axiom trains__train_position__track_begin__last__bit_axiom :
  (trains__train_position__track_begin__first__bit <  trains__train_position__track_begin__last__bit)

axiom trains__train_position__track_begin__position_axiom :
  (0 <= trains__train_position__track_begin__position)

logic trains__train_position__pos_begin__first__bit : int

logic trains__train_position__pos_begin__last__bit : int

logic trains__train_position__pos_begin__position : int

axiom trains__train_position__pos_begin__first__bit_axiom :
  (0 <= trains__train_position__pos_begin__first__bit)

axiom trains__train_position__pos_begin__last__bit_axiom :
  (trains__train_position__pos_begin__first__bit <  trains__train_position__pos_begin__last__bit)

axiom trains__train_position__pos_begin__position_axiom :
  (0 <= trains__train_position__pos_begin__position)

logic trains__train_position__track_end__first__bit : int

logic trains__train_position__track_end__last__bit : int

logic trains__train_position__track_end__position : int

axiom trains__train_position__track_end__first__bit_axiom :
  (0 <= trains__train_position__track_end__first__bit)

axiom trains__train_position__track_end__last__bit_axiom :
  (trains__train_position__track_end__first__bit <  trains__train_position__track_end__last__bit)

axiom trains__train_position__track_end__position_axiom :
  (0 <= trains__train_position__track_end__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : track_id

logic dummy4 : natural

logic dummy5 : track_id

type train_position__ref = { train_position__content : us_rep
}

function train_position__ref___projection(a: train_position__ref) : us_rep =
  (a).train_position__content

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_204:int. ((((a__first <= temp___idx_204) and
  (temp___idx_204 <= a__last)) and (bool_eq5((a[temp___idx_204]),
  (b[((b__first - a__first) + temp___idx_204)])) = true)) or
  (not ((a__first <= temp___idx_204) and (temp___idx_204 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_204:int. (((a__first <= temp___idx_204) and
  (temp___idx_204 <= a__last)) -> (bool_eq5((a[temp___idx_204]),
  (b[((b__first - a__first) + temp___idx_204)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_204:int. (((a__first <= temp___idx_204) and
  (temp___idx_204 <= a__last)) -> (bool_eq5((a[temp___idx_204]),
  (b[((b__first - a__first) + temp___idx_204)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type signal

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : signal, signal -> bool

logic dummy6 : signal

type signal__ref = { signal__content : signal
}

function signal__ref___projection(a: signal__ref) : signal =
  (a).signal__content

logic to_rep2 : signal -> int

logic of_rep2 : int -> signal

axiom inversion_axiom2 :
  (forall x:signal [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:signal [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,signal) farray
}

logic slide1 : (int,signal) farray, int, int -> (int,signal) farray

axiom slide_eq1 :
  (forall a:(int,signal) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,signal) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,signal) farray, int, int, (int,signal) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,signal) farray. forall a__first:int. forall a__last:int.
  forall b:(int,signal) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_205:int. ((((a__first <= temp___idx_205) and
  (temp___idx_205 <= a__last)) and
  (to_rep2((a[temp___idx_205])) = to_rep2((b[((b__first - a__first) + temp___idx_205)])))) or
  (not ((a__first <= temp___idx_205) and (temp___idx_205 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_205:int. (((a__first <= temp___idx_205) and
  (temp___idx_205 <= a__last)) ->
  (to_rep2((a[temp___idx_205])) = to_rep2((b[((b__first - a__first) + temp___idx_205)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,signal) farray. forall b:(int,signal) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_205:int. (((a__first <= temp___idx_205) and
  (temp___idx_205 <= a__last)) ->
  (to_rep2((a[temp___idx_205])) = to_rep2((b[((b__first - a__first) + temp___idx_205)])))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic get_previous_track : us_rep, int -> int

logic get_previous_track__function_guard : int, us_rep, int -> prop

type location

predicate in_range5(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : location, location -> bool

logic dummy7 : location

type location__ref = { location__content : location
}

function location__ref___projection(a: location__ref) : location =
  (a).location__content

logic to_rep3 : location -> int

logic of_rep3 : int -> location

axiom inversion_axiom3 :
  (forall x:location [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:location [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type positive

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : positive, positive -> bool

logic dummy8 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep4 : positive -> int

logic of_rep4 : int -> positive

axiom inversion_axiom4 :
  (forall x:positive [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:positive [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields2 = { rec__trains__track__from : location;
rec__trains__track__to : location; rec__trains__track__length : positive
}

function us_split_fields_From__projection(a: us_split_fields2) : location =
  (a).rec__trains__track__from

function us_split_fields_To__projection(a: us_split_fields2) : location =
  (a).rec__trains__track__to

function us_split_fields_Length__projection(a: us_split_fields2) : positive =
  (a).rec__trains__track__length

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  (((((to_rep3(((a).us_split_fields3).rec__trains__track__from) = to_rep3(((b).us_split_fields3).rec__trains__track__from)) and
  (to_rep3(((a).us_split_fields3).rec__trains__track__to) = to_rep3(((b).us_split_fields3).rec__trains__track__to))) and
  (to_rep4(((a).us_split_fields3).rec__trains__track__length) = to_rep4(((b).us_split_fields3).rec__trains__track__length))) ->
  (bool_eq11(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_fields3).rec__trains__track__from) = to_rep3(((b).us_split_fields3).rec__trains__track__from)) and
  (to_rep3(((a).us_split_fields3).rec__trains__track__to) = to_rep3(((b).us_split_fields3).rec__trains__track__to))) and
  (to_rep4(((a).us_split_fields3).rec__trains__track__length) = to_rep4(((b).us_split_fields3).rec__trains__track__length)))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:location. forall a1:location. forall a2:positive.
  (0 <= object__size1({ us_split_fields3 = { rec__trains__track__from = a;
  rec__trains__track__to = a1; rec__trains__track__length = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:location. forall a1:location. forall a2:positive.
  (0 <= object__alignment1({ us_split_fields3 = { rec__trains__track__from =
  a; rec__trains__track__to = a1; rec__trains__track__length = a2 } })))

logic trains__track__from__first__bit : int

logic trains__track__from__last__bit : int

logic trains__track__from__position : int

axiom trains__track__from__first__bit_axiom :
  (0 <= trains__track__from__first__bit)

axiom trains__track__from__last__bit_axiom :
  (trains__track__from__first__bit <  trains__track__from__last__bit)

axiom trains__track__from__position_axiom :
  (0 <= trains__track__from__position)

logic trains__track__to__first__bit : int

logic trains__track__to__last__bit : int

logic trains__track__to__position : int

axiom trains__track__to__first__bit_axiom :
  (0 <= trains__track__to__first__bit)

axiom trains__track__to__last__bit_axiom :
  (trains__track__to__first__bit <  trains__track__to__last__bit)

axiom trains__track__to__position_axiom : (0 <= trains__track__to__position)

logic trains__track__length__first__bit : int

logic trains__track__length__last__bit : int

logic trains__track__length__position : int

axiom trains__track__length__first__bit_axiom :
  (0 <= trains__track__length__first__bit)

axiom trains__track__length__last__bit_axiom :
  (trains__track__length__first__bit <  trains__track__length__last__bit)

axiom trains__track__length__position_axiom :
  (0 <= trains__track__length__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy9 : location

logic dummy10 : location

logic dummy11 : positive

type track__ref = { track__content : us_rep1
}

function track__ref___projection(a: track__ref) : us_rep1 =
  (a).track__content

type track_opt_id

predicate in_range7(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : track_opt_id, track_opt_id -> bool

logic dummy12 : track_opt_id

type track_opt_id__ref = { track_opt_id__content : track_opt_id
}

function track_opt_id__ref___projection(a: track_opt_id__ref) : track_opt_id =
  (a).track_opt_id__content

logic to_rep5 : track_opt_id -> int

logic of_rep5 : int -> track_opt_id

axiom inversion_axiom5 :
  (forall x:track_opt_id [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:track_opt_id [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

type map__ref2 = { map__content2 : (int,us_rep1) farray
}

logic slide2 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq2 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq13 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq11((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq11((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq13(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq11((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic tracks : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

type prev_id

predicate in_range8(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : prev_id, prev_id -> bool

logic dummy13 : prev_id

type prev_id__ref = { prev_id__content : prev_id
}

function prev_id__ref___projection(a: prev_id__ref) : prev_id =
  (a).prev_id__content

type map__ref3 = { map__content3 : (int,track_opt_id) farray
}

logic slide3 : (int,track_opt_id) farray, int,
  int -> (int,track_opt_id) farray

axiom slide_eq3 :
  (forall a:(int,track_opt_id) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,track_opt_id) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq15 : (int,track_opt_id) farray, int, int,
  (int,track_opt_id) farray, int, int -> bool

axiom bool_eq_def14 :
  (forall a:(int,track_opt_id) farray. forall a__first:int.
  forall a__last:int. forall b:(int,track_opt_id) farray.
  forall b__first:int. forall b__last:int [bool_eq15(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_165:int. ((((a__first <= temp___idx_165) and
  (temp___idx_165 <= a__last)) and
  (to_rep5((a[temp___idx_165])) = to_rep5((b[((b__first - a__first) + temp___idx_165)])))) or
  (not ((a__first <= temp___idx_165) and (temp___idx_165 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_165:int. (((a__first <= temp___idx_165) and
  (temp___idx_165 <= a__last)) ->
  (to_rep5((a[temp___idx_165])) = to_rep5((b[((b__first - a__first) + temp___idx_165)]))))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,track_opt_id) farray. forall b:(int,track_opt_id) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_165:int. (((a__first <= temp___idx_165) and
  (temp___idx_165 <= a__last)) ->
  (to_rep5((a[temp___idx_165])) = to_rep5((b[((b__first - a__first) + temp___idx_165)])))))))))

logic dummy14 : (int,track_opt_id) farray

logic value__size2 : int

logic object__size2 : (int,track_opt_id) farray -> int

logic value__component__size : int

logic object__component__size : (int,track_opt_id) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,track_opt_id) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,track_opt_id) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,track_opt_id) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,track_opt_id) farray. (0 <= object__alignment2(a)))

logic user_eq10 : (int,track_opt_id) farray,
  (int,track_opt_id) farray -> bool

type map__ref4 = { map__content4 : (int,(int,track_opt_id) farray) farray
}

logic slide4 : (int,(int,track_opt_id) farray) farray, int,
  int -> (int,(int,track_opt_id) farray) farray

axiom slide_eq4 :
  (forall a:(int,(int,track_opt_id) farray) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,(int,track_opt_id) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq16 : (int,(int,track_opt_id) farray) farray, int, int,
  (int,(int,track_opt_id) farray) farray, int, int -> bool

axiom bool_eq_def15 :
  (forall a:(int,(int,track_opt_id) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,track_opt_id) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq16(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_166:int. ((((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) and (bool_eq15((a[temp___idx_166]), 1, 3,
  (b[((b__first - a__first) + temp___idx_166)]), 1, 3) = true)) or
  (not ((a__first <= temp___idx_166) and (temp___idx_166 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_166:int. (((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) -> (bool_eq15((a[temp___idx_166]), 1, 3,
  (b[((b__first - a__first) + temp___idx_166)]), 1, 3) = true))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,(int,track_opt_id) farray) farray.
  forall b:(int,(int,track_opt_id) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_166:int. (((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) -> (bool_eq15((a[temp___idx_166]), 1, 3,
  (b[((b__first - a__first) + temp___idx_166)]), 1, 3) = true)))))))

logic previous_tracks : (int,(int,track_opt_id) farray) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom get_previous_track__post_axiom :
  (forall position:track_id. forall position1:natural.
  forall position2:track_id.
  (forall id:int [get_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id)].
  (in_range8(id) -> in_range7(get_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id)))))

axiom get_previous_track__def_axiom :
  (forall position:track_id. forall position1:natural.
  forall position2:track_id.
  (forall id:int [get_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id)].
  (in_range8(id) -> (get_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } },
  id) = to_rep5(((previous_tracks[to_rep3((((tracks[to_rep1(position2)])).us_split_fields3).rec__trains__track__from)])[id]))))))

logic get_other_previous_track : us_rep, int -> int

logic get_other_previous_track__function_guard : int, us_rep, int -> prop

axiom get_other_previous_track__post_axiom :
  (forall position:track_id. forall position1:natural.
  forall position2:track_id.
  (forall id:int [get_other_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id)].
  (in_range8(id) -> in_range7(get_other_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id)))))

axiom get_other_previous_track__def_axiom :
  (forall position:track_id. forall position1:natural.
  forall position2:track_id.
  (forall id:int [get_other_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id)].
  (in_range8(id) ->
  (((to_rep5(((previous_tracks[to_rep3((((tracks[to_rep1(position)])).us_split_fields3).rec__trains__track__from)])[id])) = to_rep1(position2)) ->
  (get_other_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } }, id) = 0)) and
  ((not (to_rep5(((previous_tracks[to_rep3((((tracks[to_rep1(position)])).us_split_fields3).rec__trains__track__from)])[id])) = to_rep1(position2))) ->
  (get_other_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = position;
  rec__trains__train_position__pos_begin = position1;
  rec__trains__train_position__track_end = position2 } },
  id) = to_rep5(((previous_tracks[to_rep3((((tracks[to_rep1(position)])).us_split_fields3).rec__trains__track__from)])[id]))))))))

logic trains__tracks__aggregate_def : us_rep1, us_rep1, us_rep1, us_rep1,
  us_rep1, us_rep1, us_rep1, us_rep1 -> (int,us_rep1) farray

axiom tracks__def_axiom : (tracks = trains__tracks__aggregate_def({
  us_split_fields3 = { rec__trains__track__from = of_rep3(1);
  rec__trains__track__to = of_rep3(2); rec__trains__track__length =
  of_rep4(10) } }, { us_split_fields3 = { rec__trains__track__from =
  of_rep3(1); rec__trains__track__to = of_rep3(3);
  rec__trains__track__length = of_rep4(10) } }, { us_split_fields3 = {
  rec__trains__track__from = of_rep3(2); rec__trains__track__to = of_rep3(3);
  rec__trains__track__length = of_rep4(10) } }, { us_split_fields3 = {
  rec__trains__track__from = of_rep3(2); rec__trains__track__to = of_rep3(5);
  rec__trains__track__length = of_rep4(10) } }, { us_split_fields3 = {
  rec__trains__track__from = of_rep3(3); rec__trains__track__to = of_rep3(4);
  rec__trains__track__length = of_rep4(10) } }, { us_split_fields3 = {
  rec__trains__track__from = of_rep3(3); rec__trains__track__to = of_rep3(5);
  rec__trains__track__length = of_rep4(10) } }, { us_split_fields3 = {
  rec__trains__track__from = of_rep3(4); rec__trains__track__to = of_rep3(5);
  rec__trains__track__length = of_rep4(10) } }, { us_split_fields3 = {
  rec__trains__track__from = of_rep3(5); rec__trains__track__to = of_rep3(1);
  rec__trains__track__length = of_rep4(10) } }))

axiom def_axiom :
  (forall temp___156:location. forall temp___1561:location.
  forall temp___1562:positive. forall temp___157:location.
  forall temp___1571:location. forall temp___1572:positive.
  forall temp___158:location. forall temp___1581:location.
  forall temp___1582:positive. forall temp___159:location.
  forall temp___1591:location. forall temp___1592:positive.
  forall temp___160:location. forall temp___1601:location.
  forall temp___1602:positive. forall temp___161:location.
  forall temp___1611:location. forall temp___1612:positive.
  forall temp___162:location. forall temp___1621:location.
  forall temp___1622:positive. forall temp___163:location.
  forall temp___1631:location. forall temp___1632:positive.
  (((((((((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[1]) = { us_split_fields3 = { rec__trains__track__from =
  temp___156; rec__trains__track__to = temp___1561;
  rec__trains__track__length = temp___1562 } }) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[2]) = { us_split_fields3 = { rec__trains__track__from =
  temp___157; rec__trains__track__to = temp___1571;
  rec__trains__track__length = temp___1572 } })) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[3]) = { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } })) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[4]) = { us_split_fields3 = { rec__trains__track__from =
  temp___159; rec__trains__track__to = temp___1591;
  rec__trains__track__length = temp___1592 } })) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[5]) = { us_split_fields3 = { rec__trains__track__from =
  temp___160; rec__trains__track__to = temp___1601;
  rec__trains__track__length = temp___1602 } })) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[6]) = { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } })) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[7]) = { us_split_fields3 = { rec__trains__track__from =
  temp___162; rec__trains__track__to = temp___1621;
  rec__trains__track__length = temp___1622 } })) and
  ((trains__tracks__aggregate_def({ us_split_fields3 = {
  rec__trains__track__from = temp___156; rec__trains__track__to =
  temp___1561; rec__trains__track__length = temp___1562 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___157;
  rec__trains__track__to = temp___1571; rec__trains__track__length =
  temp___1572 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___158; rec__trains__track__to = temp___1581;
  rec__trains__track__length = temp___1582 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___159; rec__trains__track__to =
  temp___1591; rec__trains__track__length = temp___1592 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___160;
  rec__trains__track__to = temp___1601; rec__trains__track__length =
  temp___1602 } }, { us_split_fields3 = { rec__trains__track__from =
  temp___161; rec__trains__track__to = temp___1611;
  rec__trains__track__length = temp___1612 } }, { us_split_fields3 = {
  rec__trains__track__from = temp___162; rec__trains__track__to =
  temp___1621; rec__trains__track__length = temp___1622 } }, {
  us_split_fields3 = { rec__trains__track__from = temp___163;
  rec__trains__track__to = temp___1631; rec__trains__track__length =
  temp___1632 } })[8]) = { us_split_fields3 = { rec__trains__track__from =
  temp___163; rec__trains__track__to = temp___1631;
  rec__trains__track__length = temp___1632 } })))

logic trains__previous_tracks__aggregate_def : (int,track_opt_id) farray,
  (int,track_opt_id) farray, (int,track_opt_id) farray,
  (int,track_opt_id) farray,
  (int,track_opt_id) farray -> (int,(int,track_opt_id) farray) farray

logic temp___174 : int, int, int -> (int,track_opt_id) farray

logic temp___180 : int, int, int -> (int,track_opt_id) farray

logic temp___186 : int, int, int -> (int,track_opt_id) farray

logic temp___192 : int, int, int -> (int,track_opt_id) farray

logic temp___198 : int, int, int -> (int,track_opt_id) farray

axiom previous_tracks__def_axiom :
  (previous_tracks = trains__previous_tracks__aggregate_def(temp___174(8, 0,
  0), temp___180(1, 0, 0), temp___186(2, 3, 0), temp___192(5, 0, 0),
  temp___198(4, 6, 7)))

axiom def_axiom1 :
  (forall temp___168:(int,track_opt_id) farray.
  forall temp___169:(int,track_opt_id) farray.
  forall temp___170:(int,track_opt_id) farray.
  forall temp___171:(int,track_opt_id) farray.
  forall temp___172:(int,track_opt_id) farray.
  ((((((trains__previous_tracks__aggregate_def(temp___168, temp___169,
  temp___170, temp___171, temp___172)[1]) = temp___168) and
  ((trains__previous_tracks__aggregate_def(temp___168, temp___169,
  temp___170, temp___171, temp___172)[2]) = temp___169)) and
  ((trains__previous_tracks__aggregate_def(temp___168, temp___169,
  temp___170, temp___171, temp___172)[3]) = temp___170)) and
  ((trains__previous_tracks__aggregate_def(temp___168, temp___169,
  temp___170, temp___171, temp___172)[4]) = temp___171)) and
  ((trains__previous_tracks__aggregate_def(temp___168, temp___169,
  temp___170, temp___171, temp___172)[5]) = temp___172)))

axiom def_axiom2 :
  (forall temp___176:int. forall temp___177:int. forall temp___178:int.
  (((in_range7(temp___176) and in_range7(temp___177)) and
  in_range7(temp___178)) -> (((to_rep5((temp___174(temp___176, temp___177,
  temp___178)[1])) = temp___176) and (to_rep5((temp___174(temp___176,
  temp___177, temp___178)[2])) = temp___177)) and
  (to_rep5((temp___174(temp___176, temp___177,
  temp___178)[3])) = temp___178))))

axiom def_axiom3 :
  (forall temp___182:int. forall temp___183:int. forall temp___184:int.
  (((in_range7(temp___182) and in_range7(temp___183)) and
  in_range7(temp___184)) -> (((to_rep5((temp___180(temp___182, temp___183,
  temp___184)[1])) = temp___182) and (to_rep5((temp___180(temp___182,
  temp___183, temp___184)[2])) = temp___183)) and
  (to_rep5((temp___180(temp___182, temp___183,
  temp___184)[3])) = temp___184))))

axiom def_axiom4 :
  (forall temp___188:int. forall temp___189:int. forall temp___190:int.
  (((in_range7(temp___188) and in_range7(temp___189)) and
  in_range7(temp___190)) -> (((to_rep5((temp___186(temp___188, temp___189,
  temp___190)[1])) = temp___188) and (to_rep5((temp___186(temp___188,
  temp___189, temp___190)[2])) = temp___189)) and
  (to_rep5((temp___186(temp___188, temp___189,
  temp___190)[3])) = temp___190))))

axiom def_axiom5 :
  (forall temp___194:int. forall temp___195:int. forall temp___196:int.
  (((in_range7(temp___194) and in_range7(temp___195)) and
  in_range7(temp___196)) -> (((to_rep5((temp___192(temp___194, temp___195,
  temp___196)[1])) = temp___194) and (to_rep5((temp___192(temp___194,
  temp___195, temp___196)[2])) = temp___195)) and
  (to_rep5((temp___192(temp___194, temp___195,
  temp___196)[3])) = temp___196))))

axiom def_axiom6 :
  (forall temp___200:int. forall temp___201:int. forall temp___202:int.
  (((in_range7(temp___200) and in_range7(temp___201)) and
  in_range7(temp___202)) -> (((to_rep5((temp___198(temp___200, temp___201,
  temp___202)[1])) = temp___200) and (to_rep5((temp___198(temp___200,
  temp___201, temp___202)[2])) = temp___201)) and
  (to_rep5((temp___198(temp___200, temp___201,
  temp___202)[3])) = temp___202))))

 (* File "trains.ads", line 144, characters 0-0 *)
goal WP_parameter_def :
  (forall cur_num_trains:int. forall trains:(int,us_rep) farray.
  forall train:int. forall id:int. forall o:int. forall o1:track_id.
  forall o2:natural. forall o3:track_id. forall o4:int. forall o5:bool.
  forall o6:int. forall o7:track_id. forall o8:natural. forall o9:track_id.
  forall temp___370:int. forall result:bool. (in_range2(cur_num_trains) ->
  (((1 <= train) and (train <= cur_num_trains)) -> (((1 <= id) and
  (id <= 3)) -> ((((((((1 <= train) and (train <= 10)) and (o = train)) and
  ({ us_split_fields1 = { rec__trains__train_position__track_begin = o1;
  rec__trains__train_position__pos_begin = o2;
  rec__trains__train_position__track_end = o3 } } = (trains[o]))) and
  ((o4 = get_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = o1;
  rec__trains__train_position__pos_begin = o2;
  rec__trains__train_position__track_end = o3 } }, id)) and
  (in_range7(o4) and
  (o4 = to_rep5(((previous_tracks[to_rep3((((tracks[to_rep1(o3)])).us_split_fields3).rec__trains__track__from)])[id])))))) and
  (((o4 = 0) and (o5 = true)) or ((not (o4 = 0)) and (o5 = false)))) and
  (((not (o5 = true)) and (result = true)) or ((o5 = true) and
  (result = false)))) -> ((result = true) -> ((((((1 <= train) and
  (train <= 10)) and (o6 = train)) and ({ us_split_fields1 = {
  rec__trains__train_position__track_begin = o7;
  rec__trains__train_position__pos_begin = o8;
  rec__trains__train_position__track_end = o9 } } = (trains[o6]))) and
  ((temp___370 = get_previous_track({ us_split_fields1 = {
  rec__trains__train_position__track_begin = o7;
  rec__trains__train_position__pos_begin = o8;
  rec__trains__train_position__track_end = o9 } }, id)) and
  (in_range7(temp___370) and
  (temp___370 = to_rep5(((previous_tracks[to_rep3((((tracks[to_rep1(o9)])).us_split_fields3).rec__trains__track__from)])[id])))))) ->
  (1 <= temp___370))))))))
