(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic a_old : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___267 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___360 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___370 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___384 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___394 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___408 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___418 : (int,integer) farray, int, int, int, int, int,
  int -> (int,integer) farray

axiom def_axiom :
  (forall temp___269:(int,integer) farray.
  (forall temp___270:int. forall temp___271:int. forall temp___272:int.
  forall temp___273:int. forall temp___274:int. forall temp___275:int.
  ((((((in_range1(temp___270) and in_range1(temp___271)) and
  in_range1(temp___272)) and in_range1(temp___273)) and
  in_range1(temp___274)) and in_range1(temp___275)) ->
  (forall temp___276:int. (((temp___276 = temp___274) ->
  (to_rep((temp___267(temp___269, temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275)[temp___276])) = temp___275)) and
  ((not (temp___276 = temp___274)) -> (((temp___276 = temp___272) ->
  (to_rep((temp___267(temp___269, temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275)[temp___276])) = temp___273)) and
  ((not (temp___276 = temp___272)) -> (((temp___276 = temp___270) ->
  (to_rep((temp___267(temp___269, temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275)[temp___276])) = temp___271)) and
  ((not (temp___276 = temp___270)) -> ((temp___267(temp___269, temp___270,
  temp___271, temp___272, temp___273, temp___274,
  temp___275)[temp___276]) = (temp___269[temp___276]))))))))))))

axiom def_axiom1 :
  (forall temp___362:(int,integer) farray.
  (forall temp___363:int. forall temp___364:int. forall temp___365:int.
  forall temp___366:int. forall temp___367:int. forall temp___368:int.
  ((((((in_range1(temp___363) and in_range1(temp___364)) and
  in_range1(temp___365)) and in_range1(temp___366)) and
  in_range1(temp___367)) and in_range1(temp___368)) ->
  (forall temp___369:int. (((temp___369 = temp___367) ->
  (to_rep((temp___360(temp___362, temp___363, temp___364, temp___365,
  temp___366, temp___367, temp___368)[temp___369])) = temp___368)) and
  ((not (temp___369 = temp___367)) -> (((temp___369 = temp___365) ->
  (to_rep((temp___360(temp___362, temp___363, temp___364, temp___365,
  temp___366, temp___367, temp___368)[temp___369])) = temp___366)) and
  ((not (temp___369 = temp___365)) -> (((temp___369 = temp___363) ->
  (to_rep((temp___360(temp___362, temp___363, temp___364, temp___365,
  temp___366, temp___367, temp___368)[temp___369])) = temp___364)) and
  ((not (temp___369 = temp___363)) -> ((temp___360(temp___362, temp___363,
  temp___364, temp___365, temp___366, temp___367,
  temp___368)[temp___369]) = (temp___362[temp___369]))))))))))))

axiom def_axiom2 :
  (forall temp___372:(int,integer) farray.
  (forall temp___373:int. forall temp___374:int. forall temp___375:int.
  forall temp___376:int. forall temp___377:int. forall temp___378:int.
  ((((((in_range1(temp___373) and in_range1(temp___374)) and
  in_range1(temp___375)) and in_range1(temp___376)) and
  in_range1(temp___377)) and in_range1(temp___378)) ->
  (forall temp___379:int. (((temp___379 = temp___377) ->
  (to_rep((temp___370(temp___372, temp___373, temp___374, temp___375,
  temp___376, temp___377, temp___378)[temp___379])) = temp___378)) and
  ((not (temp___379 = temp___377)) -> (((temp___379 = temp___375) ->
  (to_rep((temp___370(temp___372, temp___373, temp___374, temp___375,
  temp___376, temp___377, temp___378)[temp___379])) = temp___376)) and
  ((not (temp___379 = temp___375)) -> (((temp___379 = temp___373) ->
  (to_rep((temp___370(temp___372, temp___373, temp___374, temp___375,
  temp___376, temp___377, temp___378)[temp___379])) = temp___374)) and
  ((not (temp___379 = temp___373)) -> ((temp___370(temp___372, temp___373,
  temp___374, temp___375, temp___376, temp___377,
  temp___378)[temp___379]) = (temp___372[temp___379]))))))))))))

axiom def_axiom3 :
  (forall temp___386:(int,integer) farray.
  (forall temp___387:int. forall temp___388:int. forall temp___389:int.
  forall temp___390:int. forall temp___391:int. forall temp___392:int.
  ((((((in_range1(temp___387) and in_range1(temp___388)) and
  in_range1(temp___389)) and in_range1(temp___390)) and
  in_range1(temp___391)) and in_range1(temp___392)) ->
  (forall temp___393:int. (((temp___393 = temp___391) ->
  (to_rep((temp___384(temp___386, temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392)[temp___393])) = temp___392)) and
  ((not (temp___393 = temp___391)) -> (((temp___393 = temp___389) ->
  (to_rep((temp___384(temp___386, temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392)[temp___393])) = temp___390)) and
  ((not (temp___393 = temp___389)) -> (((temp___393 = temp___387) ->
  (to_rep((temp___384(temp___386, temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392)[temp___393])) = temp___388)) and
  ((not (temp___393 = temp___387)) -> ((temp___384(temp___386, temp___387,
  temp___388, temp___389, temp___390, temp___391,
  temp___392)[temp___393]) = (temp___386[temp___393]))))))))))))

axiom def_axiom4 :
  (forall temp___396:(int,integer) farray.
  (forall temp___397:int. forall temp___398:int. forall temp___399:int.
  forall temp___400:int. forall temp___401:int. forall temp___402:int.
  ((((((in_range1(temp___397) and in_range1(temp___398)) and
  in_range1(temp___399)) and in_range1(temp___400)) and
  in_range1(temp___401)) and in_range1(temp___402)) ->
  (forall temp___403:int. (((temp___403 = temp___401) ->
  (to_rep((temp___394(temp___396, temp___397, temp___398, temp___399,
  temp___400, temp___401, temp___402)[temp___403])) = temp___402)) and
  ((not (temp___403 = temp___401)) -> (((temp___403 = temp___399) ->
  (to_rep((temp___394(temp___396, temp___397, temp___398, temp___399,
  temp___400, temp___401, temp___402)[temp___403])) = temp___400)) and
  ((not (temp___403 = temp___399)) -> (((temp___403 = temp___397) ->
  (to_rep((temp___394(temp___396, temp___397, temp___398, temp___399,
  temp___400, temp___401, temp___402)[temp___403])) = temp___398)) and
  ((not (temp___403 = temp___397)) -> ((temp___394(temp___396, temp___397,
  temp___398, temp___399, temp___400, temp___401,
  temp___402)[temp___403]) = (temp___396[temp___403]))))))))))))

axiom def_axiom5 :
  (forall temp___410:(int,integer) farray.
  (forall temp___411:int. forall temp___412:int. forall temp___413:int.
  forall temp___414:int. forall temp___415:int. forall temp___416:int.
  ((((((in_range1(temp___411) and in_range1(temp___412)) and
  in_range1(temp___413)) and in_range1(temp___414)) and
  in_range1(temp___415)) and in_range1(temp___416)) ->
  (forall temp___417:int. (((temp___417 = temp___415) ->
  (to_rep((temp___408(temp___410, temp___411, temp___412, temp___413,
  temp___414, temp___415, temp___416)[temp___417])) = temp___416)) and
  ((not (temp___417 = temp___415)) -> (((temp___417 = temp___413) ->
  (to_rep((temp___408(temp___410, temp___411, temp___412, temp___413,
  temp___414, temp___415, temp___416)[temp___417])) = temp___414)) and
  ((not (temp___417 = temp___413)) -> (((temp___417 = temp___411) ->
  (to_rep((temp___408(temp___410, temp___411, temp___412, temp___413,
  temp___414, temp___415, temp___416)[temp___417])) = temp___412)) and
  ((not (temp___417 = temp___411)) -> ((temp___408(temp___410, temp___411,
  temp___412, temp___413, temp___414, temp___415,
  temp___416)[temp___417]) = (temp___410[temp___417]))))))))))))

axiom def_axiom6 :
  (forall temp___420:(int,integer) farray.
  (forall temp___421:int. forall temp___422:int. forall temp___423:int.
  forall temp___424:int. forall temp___425:int. forall temp___426:int.
  ((((((in_range1(temp___421) and in_range1(temp___422)) and
  in_range1(temp___423)) and in_range1(temp___424)) and
  in_range1(temp___425)) and in_range1(temp___426)) ->
  (forall temp___427:int. (((temp___427 = temp___425) ->
  (to_rep((temp___418(temp___420, temp___421, temp___422, temp___423,
  temp___424, temp___425, temp___426)[temp___427])) = temp___426)) and
  ((not (temp___427 = temp___425)) -> (((temp___427 = temp___423) ->
  (to_rep((temp___418(temp___420, temp___421, temp___422, temp___423,
  temp___424, temp___425, temp___426)[temp___427])) = temp___424)) and
  ((not (temp___427 = temp___423)) -> (((temp___427 = temp___421) ->
  (to_rep((temp___418(temp___420, temp___421, temp___422, temp___423,
  temp___424, temp___425, temp___426)[temp___427])) = temp___422)) and
  ((not (temp___427 = temp___421)) -> ((temp___418(temp___420, temp___421,
  temp___422, temp___423, temp___424, temp___425,
  temp___426)[temp___427]) = (temp___420[temp___427]))))))))))))

 (* File "simple_arrays.adb", line 164, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall o:integer.
  forall o1:(int,integer) farray. forall o2:integer.
  forall o3:(int,integer) farray. forall o4:integer.
  forall o5:(int,integer) farray. forall result:(int,integer) farray.
  forall a1:(int,integer) farray. forall result1:(int,integer) farray.
  forall a2:(int,integer) farray. forall result2:(int,integer) farray.
  forall a3:(int,integer) farray. forall a4:(int,integer) farray.
  forall a5:(int,integer) farray. ((in_range1(i) and (in_range1(j) and
  (in_range1(k) and ((((not (i = j)) and (not (j = k))) and
  (not (k = i))) and (((a = a_old) and ((((to_rep(o) = 3) and
  (o1 = (a[k <- o]))) and (({ map__content = result } = { map__content = a
  }) and (a1 = o1))) and ((((to_rep(o2) = 2) and (o3 = (a1[j <- o2]))) and
  ((a1 = result1) and (a2 = o3))) and ((((to_rep(o4) = 1) and
  (o5 = (a2[i <- o4]))) and ((a2 = result2) and (a3 = o5))) and
  ((bool_eq3(temp___360(a_old, i, 1, j, 2, k, 3), (- 2147483648), 2147483647,
  temp___370(a_old, i, 1, k, 3, j, 2), (- 2147483648),
  2147483647) = true) and ((bool_eq3(temp___384(a_old, i, 1, k, 3, j, 2),
  (- 2147483648), 2147483647, temp___394(a_old, k, 3, i, 1, j, 2),
  (- 2147483648), 2147483647) = true) and (bool_eq3(temp___408(a_old, k, 3,
  i, 1, j, 2), (- 2147483648), 2147483647, temp___418(a_old, k, 3, j, 2, i,
  1), (- 2147483648), 2147483647) = true))))))) and ((a3 = a4) and
  (a5 = a3))))))) -> (bool_eq3(a4, (- 2147483648), 2147483647, temp___267(a,
  i, 1, j, 2, k, 3), (- 2147483648), 2147483647) = true)))
