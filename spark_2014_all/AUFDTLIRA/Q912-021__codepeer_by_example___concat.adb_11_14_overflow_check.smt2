(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq1 (us_t us_t) Bool)
(declare-const dummy1 us_t)
(declare-datatypes () ((arr__ref (mk_arr__ref (arr__content us_t)))))
(define-fun arr__ref___projection ((a arr__ref)) us_t (arr__content a))
(define-fun dynamic_invariant1 ((temp___expr_159 us_t) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (not (= temp___skip_constant_156 true)) (dynamic_property (- 2147483648) 2147483647 (first1 temp___expr_159) (last1 temp___expr_159))))
(declare-const x us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const z__first integer)
(declare-const z__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const z (Array Int integer))
(declare-const k Int)
(declare-const j Int)
(declare-const j1 Int)
(declare-const temp___202 Int)
(declare-const temp___200 (Array Int integer))
(declare-const o integer)
(declare-const o1 Int)
(declare-const o2 (Array Int integer))
(declare-const o3 Int)
(declare-const o4 integer)
(declare-const o5 Int)
(declare-const o6 (Array Int integer))
(declare-const z1 (Array Int integer))
(declare-const result Int)
(declare-const k1 Int)
(declare-const result1 Int)
(declare-const j2 Int)
(declare-const z2 (Array Int integer))
(declare-const k2 Int)
(declare-const j3 Int)
(declare-const result2 (Array Int integer))
(declare-const z3 (Array Int integer))
(declare-const result3 Int)
(declare-const k3 Int)
(declare-const z4 (Array Int integer))
(declare-const k4 Int)
(declare-const j4 Int)
(declare-const z5 (Array Int integer))
(declare-const k5 Int)
(declare-const j5 Int)
(declare-const z6 (Array Int integer))
(declare-const k6 Int)
(declare-const j6 Int)
(declare-const z7 (Array Int integer))
(declare-const k7 Int)
(declare-const j7 Int)
(declare-const result4 Int)
(declare-const j8 Int)
(declare-const z8 (Array Int integer))
(declare-const k8 Int)
(declare-const j9 Int)
(declare-const result5 (Array Int integer))
(declare-const z9 (Array Int integer))
(define-fun z10 () map__ref (mk_map__ref z6))
(assert (dynamic_invariant1 x true false true true))
(assert (dynamic_invariant1 y true false true true))
(assert (dynamic_property (- 2147483648) 2147483647 (to_rep z__first) (to_rep z__last)))
(assert (= result k))
(assert (= k1 1))
(assert (in_range1 k1))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j2 (to_rep (first (rt x)))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= temp___202 k1)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= temp___200 z)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (and (=> (<= (- 2147483648) 2147483647) (in_range1 k2)) (and (<= (to_rep (first (rt x))) j3) (<= j3 (to_rep (last (rt x))))))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= (to_rep o) (to_rep (select (elts x) j3)))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (and (<= (to_rep z__first) k2) (<= k2 (to_rep z__last)))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= o1 k2)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= o2 (store z2 o1 o))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= z2 result2)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= z3 o2)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (and (= o3 (+ k2 1)) (in_range1 (+ k2 1)))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= result3 k2)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= k3 o3)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= j3 (to_rep (last (rt x))))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= j3 j4)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= k3 k4)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= z3 z4)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= j5 j3)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= k5 k3)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= z5 z3)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= (mk_int__ref j6) (mk_int__ref j4))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= (mk_int__ref k6) (mk_int__ref k4))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= z10 (mk_map__ref z4))))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= j7 j5)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= k7 k5)))
(assert (=> (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x))))) (= z7 z5)))
(assert (=> (not (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x)))))) (= j2 j6)))
(assert (=> (not (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x)))))) (= k1 k6)))
(assert (=> (not (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x)))))) (= z10 (mk_map__ref z))))
(assert (=> (not (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x)))))) (= j7 j2)))
(assert (=> (not (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x)))))) (= k7 k1)))
(assert (=> (not (and (<= (to_rep (first (rt x))) j2) (<= j2 (to_rep (last (rt x)))))) (= z7 z1)))
(assert (= result4 j1))
(assert (= j8 (to_rep (first (rt y)))))
(assert (<= (to_rep (first (rt y))) j8))
(assert (<= j8 (to_rep (last (rt y)))))
(assert (and (=> (<= (- 2147483648) 2147483647) (in_range1 k8)) (and (<= (to_rep (first (rt y))) j9) (<= j9 (to_rep (last (rt y)))))))
(assert (= (to_rep o4) (to_rep (select (elts y) j9))))
(assert (and (<= (to_rep z__first) k8) (<= k8 (to_rep z__last))))
(assert (= o5 k8))
(assert (= o6 (store z8 o5 o4)))
(assert (= result5 z8))
(assert (= z9 o6))
(assert (not (in_range1 (+ k8 1))))
(check-sat)
(exit)
