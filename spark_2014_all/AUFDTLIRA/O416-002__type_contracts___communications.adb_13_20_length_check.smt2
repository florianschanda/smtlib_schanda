(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort tdayP1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tdayP1 tdayP1) Bool)
(declare-const dummy3 tdayP1)
(declare-datatypes () ((tdayP1__ref (mk_tdayP1__ref (tdayP1__content tdayP1)))))
(define-fun tdayP1__ref___projection ((a tdayP1__ref)) tdayP1 (tdayP1__content a))
(declare-const dummy4 (Array Int character))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__messages__message__sent (Array Int character)) (rec__messages__message__received (Array Int character))))))
(define-fun us_split_fields_Sent__projection ((a us_split_fields)) (Array Int character) (rec__messages__message__sent a))
(define-fun us_split_fields_Received__projection ((a us_split_fields)) (Array Int character) (rec__messages__message__received a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__messages__message__sent (us_split_fields1 a)) 1 10 (rec__messages__message__sent (us_split_fields1 b)) 1 10) true) (= (bool_eq (rec__messages__message__received (us_split_fields1 a)) 1 10 (rec__messages__message__received (us_split_fields1 b)) 1 10) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const messages__message__sent__first__bit Int)
(declare-const messages__message__sent__last__bit Int)
(declare-const messages__message__sent__position Int)
(assert (<= 0 messages__message__sent__first__bit))
(assert (< messages__message__sent__first__bit messages__message__sent__last__bit))
(assert (<= 0 messages__message__sent__position))
(declare-const messages__message__received__first__bit Int)
(declare-const messages__message__received__last__bit Int)
(declare-const messages__message__received__position Int)
(assert (<= 0 messages__message__received__first__bit))
(assert (< messages__message__received__first__bit messages__message__received__last__bit))
(assert (<= 0 messages__message__received__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((message__ref (mk_message__ref (message__content us_rep)))))
(define-fun message__ref___projection ((a message__ref)) us_rep (message__content a))
(define-fun dynamic_invariant ((temp___expr_173 us_rep) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (= temp___do_toplevel_171 true) (=> (= temp___is_init_169 true) (<= (let ((temp___176 (rec__messages__message__received (us_split_fields1 temp___expr_173)))) (let ((temp___175 (rec__messages__message__sent (us_split_fields1 temp___expr_173)))) (compare temp___175 1 10 temp___176 1 10))) 0))))
(define-fun dynamic_predicate ((temp___187 us_rep)) Bool (<= (let ((temp___190 (rec__messages__message__received (us_split_fields1 temp___187)))) (let ((temp___189 (rec__messages__message__sent (us_split_fields1 temp___187)))) (compare temp___189 1 10 temp___190 1 10))) 0))
(declare-const i1s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range low) (in_range high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int us_rep)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))
(define-fun of_array ((a (Array Int us_rep)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int us_rep)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int us_rep)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int us_rep)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t) (y us_t)) Bool (bool_eq2 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq6 (us_t us_t) Bool)
(declare-const dummy6 us_t)
(declare-datatypes () ((message_arr__ref (mk_message_arr__ref (message_arr__content us_t)))))
(define-fun message_arr__ref___projection ((a message_arr__ref)) us_t (message_arr__content a))
(define-fun dynamic_invariant1 ((temp___expr_203 us_t) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool) (temp___do_typ_inv_202 Bool)) Bool (and (=> (not (= temp___skip_constant_200 true)) (dynamic_property (- 2147483648) 2147483647 (first1 temp___expr_203) (last1 temp___expr_203))) (forall ((temp___204 Int)) (=> (and (<= (first1 temp___expr_203) temp___204) (<= temp___204 (last1 temp___expr_203))) (=> (= temp___is_init_199 true) (let ((temp___205 (select (to_array temp___expr_203) temp___204))) (<= (let ((temp___207 (rec__messages__message__received (us_split_fields1 temp___205)))) (let ((temp___206 (rec__messages__message__sent (us_split_fields1 temp___205)))) (compare temp___206 1 10 temp___207 1 10))) 0)))))))
(declare-fun to_rep2 (positive) Int)
(declare-fun of_rep2 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x positive)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___projection ((a t3s__ref)) integer (t3s__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int us_rep)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int us_rep) (elts1 a))
(define-fun of_array1 ((a (Array Int us_rep)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int us_rep)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq4 ((x us_t1) (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t1)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t1 (t4s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__communications__communication__num positive)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) positive (rec__communications__communication__num a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__communications__communication__msgs us_t1)))))
(define-fun us_split_fields_Msgs__projection ((a us_split_fields2)) us_t1 (rec__communications__communication__msgs a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq5 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep2 (rec__communications__communication__num (us_split_discrs1 a))) (to_rep2 (rec__communications__communication__num (us_split_discrs1 b)))) (= (bool_eq4 (rec__communications__communication__msgs (us_split_fields3 a)) (rec__communications__communication__msgs (us_split_fields3 b))) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const communications__communication__num__first__bit Int)
(declare-const communications__communication__num__last__bit Int)
(declare-const communications__communication__num__position Int)
(assert (<= 0 communications__communication__num__first__bit))
(assert (< communications__communication__num__first__bit communications__communication__num__last__bit))
(assert (<= 0 communications__communication__num__position))
(declare-const communications__communication__msgs__first__bit Int)
(declare-const communications__communication__msgs__last__bit Int)
(declare-const communications__communication__msgs__position Int)
(assert (<= 0 communications__communication__msgs__first__bit))
(assert (< communications__communication__msgs__first__bit communications__communication__msgs__last__bit))
(assert (<= 0 communications__communication__msgs__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((communication__ref (mk_communication__ref (communication__content us_rep1)))))
(define-fun communication__ref___projection ((a communication__ref)) us_rep1 (communication__content a))
(define-fun dynamic_invariant2 ((temp___expr_214 us_rep1) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool (let ((temp___215 (rec__communications__communication__num (us_split_discrs1 temp___expr_214)))) (and (and (dynamic_property2 1 (to_rep2 temp___215) (first3 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214))) (last3 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214)))) (and (= (first3 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214))) 1) (= (last3 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214))) (to_rep2 temp___215)))) (forall ((temp___216 Int)) (=> (and (<= (first3 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214))) temp___216) (<= temp___216 (last3 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214))))) (=> (= temp___is_init_210 true) (let ((temp___217 (select (to_array1 (rec__communications__communication__msgs (us_split_fields3 temp___expr_214))) temp___216))) (<= (let ((temp___219 (rec__messages__message__received (us_split_fields1 temp___217)))) (let ((temp___218 (rec__messages__message__sent (us_split_fields1 temp___217)))) (compare temp___218 1 10 temp___219 1 10))) 0))))))))
(define-fun type_invariant ((temp___222 us_rep1)) Bool (forall ((idx Int)) (=> (and (<= 1 idx) (<= idx (- (to_rep2 (rec__communications__communication__num (us_split_discrs1 temp___222))) 1))) (<= (let ((temp___227 (rec__messages__message__received (us_split_fields1 (let ((temp___225 (rec__communications__communication__msgs (us_split_fields3 temp___222)))) (select (to_array1 temp___225) (+ idx 1))))))) (let ((temp___226 (rec__messages__message__received (us_split_fields1 (let ((temp___224 (rec__communications__communication__msgs (us_split_fields3 temp___222)))) (select (to_array1 temp___224) idx)))))) (compare temp___226 1 10 temp___227 1 10))) 0))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq10 (integer integer) Bool)
(declare-const dummy10 integer)
(declare-datatypes () ((tT8bP1__ref (mk_tT8bP1__ref (tT8bP1__content integer)))))
(define-fun tT8bP1__ref___projection ((a1 tT8bP1__ref)) integer (tT8bP1__content a1))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first4 (mk2 f l))) f) (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int us_rep)) (rt2 t2)))))
(define-fun to_array2 ((a1 us_t2)) (Array Int us_rep) (elts2 a1))
(define-fun of_array2 ((a1 (Array Int us_rep)) (f Int) (l Int)) us_t2 (mk___t2 a1 (mk2 f l)))
(define-fun first5 ((a1 us_t2)) Int (to_rep1 (first4 (rt2 a1))))
(define-fun last5 ((a1 us_t2)) Int (to_rep1 (last4 (rt2 a1))))
(define-fun length2 ((a1 us_t2)) Int (ite (<= (first5 a1) (last5 a1)) (+ (- (last5 a1) (first5 a1)) 1) 0))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array Int us_rep)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int us_rep)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array Int us_rep)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a1 (Array Int us_rep))) (<= 0 (object__size5 a1))))
(assert (<= 0 value__component__size3))
(assert (forall ((a1 (Array Int us_rep))) (<= 0 (object__component__size3 a1))))
(assert (<= 0 value__alignment5))
(assert (forall ((a1 (Array Int us_rep))) (<= 0 (object__alignment5 a1))))
(define-fun bool_eq6 ((x us_t2) (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep1 (first4 (rt2 x))) (to_rep1 (last4 (rt2 x))) (elts2 y) (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))
(declare-fun user_eq11 (us_t2 us_t2) Bool)
(declare-const dummy11 us_t2)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content us_t2)))))
(define-fun t8b__ref___projection ((a1 t8b__ref)) us_t2 (t8b__content a1))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__communications__communication__msgs1 us_t2)))))
(define-fun us_split_fields_Msgs__2__projection ((a1 us_split_fields4)) us_t2 (rec__communications__communication__msgs1 a1))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a1 us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a1))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs2 us_split_discrs) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___4__projection ((a1 us_rep2)) us_split_discrs (us_split_discrs2 a1))
(define-fun us_rep___5__projection ((a1 us_rep2)) us_split_fields4 (us_split_fields5 a1))
(define-fun to_base ((a1 us_rep2)) us_rep1 (mk___rep1 (us_split_discrs2 a1) (mk___split_fields1 (let ((temp___158 (rec__communications__communication__msgs1 (us_split_fields5 a1)))) (of_array1 (to_array2 temp___158) (first5 temp___158) (last5 temp___158))))))
(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep2 (us_split_discrs1 r) (mk___split_fields2 (let ((temp___157 (rec__communications__communication__msgs (us_split_fields3 r)))) (of_array2 (to_array1 temp___157) (first3 temp___157) (last3 temp___157))))))
(define-fun bool_eq7 ((a1 us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep2 (rec__communications__communication__num (us_split_discrs2 a1))) (to_rep2 (rec__communications__communication__num (us_split_discrs2 b)))) (= (bool_eq6 (rec__communications__communication__msgs1 (us_split_fields5 a1)) (rec__communications__communication__msgs1 (us_split_fields5 b))) true)) true false))
(define-fun in_range4 ((rec__communications__communication__num1 Int) (a1 us_rep1)) Bool (= rec__communications__communication__num1 (to_rep2 (rec__communications__communication__num (us_split_discrs1 a1)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a1 us_rep2)) (<= 0 (object__size6 a1))))
(assert (<= 0 value__alignment6))
(assert (forall ((a1 us_rep2)) (<= 0 (object__alignment6 a1))))
(declare-const communications__communication__num__first__bit1 Int)
(declare-const communications__communication__num__last__bit1 Int)
(declare-const communications__communication__num__position1 Int)
(assert (<= 0 communications__communication__num__first__bit1))
(assert (< communications__communication__num__first__bit1 communications__communication__num__last__bit1))
(assert (<= 0 communications__communication__num__position1))
(declare-const communications__communication__msgs__first__bit1 Int)
(declare-const communications__communication__msgs__last__bit1 Int)
(declare-const communications__communication__msgs__position1 Int)
(assert (<= 0 communications__communication__msgs__first__bit1))
(assert (< communications__communication__msgs__first__bit1 communications__communication__msgs__last__bit1))
(assert (<= 0 communications__communication__msgs__position1))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((tcomsS__ref (mk_tcomsS__ref (tcomsS__content us_rep2)))))
(define-fun tcomsS__ref___projection ((a1 tcomsS__ref)) us_rep2 (tcomsS__content a1))
(define-fun dynamic_invariant3 ((temp___expr_296 us_rep2) (temp___is_init_292 Bool) (temp___skip_constant_293 Bool) (temp___do_toplevel_294 Bool) (temp___do_typ_inv_295 Bool)) Bool (and (=> (not (= temp___skip_constant_293 true)) (in_range4 (length a) (to_base temp___expr_296))) (and (and (dynamic_property4 1 (length a) (first5 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296))) (last5 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296)))) (and (= (first5 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296))) 1) (= (last5 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296))) (length a)))) (forall ((temp___298 Int)) (=> (and (<= (first5 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296))) temp___298) (<= temp___298 (last5 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296))))) (=> (= temp___is_init_292 true) (let ((temp___299 (select (to_array2 (rec__communications__communication__msgs1 (us_split_fields5 temp___expr_296))) temp___298))) (<= (let ((temp___301 (rec__messages__message__received (us_split_fields1 temp___299)))) (let ((temp___300 (rec__messages__message__sent (us_split_fields1 temp___299)))) (compare temp___300 1 10 temp___301 1 10))) 0))))))))
(define-fun default_initial_assumption ((temp___expr_304 us_rep2) (temp___skip_top_level_305 Bool)) Bool (= (to_rep2 (rec__communications__communication__num (us_split_discrs2 temp___expr_304))) (length a)))
(declare-const coms__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(declare-const coms__split_fields (Array Int us_rep))
(declare-const coms__split_fields1 t2)
(declare-const o Int)
(declare-const us Int)
(assert (let ((temp___174 i1s)) (<= (compare (rec__messages__message__sent (us_split_fields1 temp___174)) 1 10 (rec__messages__message__received (us_split_fields1 temp___174)) 1 10) 0)))
(assert (dynamic_invariant1 a true false true true))
(assert (and (= o (length a)) (in_range (length a))))
(assert (and (= us o) (in_range1 o)))
(assert (= (to_rep2 (rec__communications__communication__num coms__split_discrs)) (length a)))
(assert (dynamic_invariant3 (mk___rep2 coms__split_discrs (mk___split_fields2 (mk___t2 coms__split_fields coms__split_fields1))) false false true true))
(assert (not (= (ite (<= (to_rep1 (first (rt a))) (to_rep1 (last (rt a)))) (+ (- (to_rep1 (last (rt a))) (to_rep1 (first (rt a)))) 1) 0) (ite (<= 1 (length a)) (+ (- (length a) 1) 1) 0))))
(check-sat)
(exit)
