(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort value_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (value_type value_type) Bool)
(declare-const dummy1 value_type)
(declare-datatypes () ((value_type__ref (mk_value_type__ref (value_type__content value_type)))))
(define-fun value_type__ref___projection ((a value_type__ref)) value_type (value_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 2147483647)) (in_range2 temp___expr_208)))
(declare-sort tnumber_list_typeD1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tnumber_list_typeD1 tnumber_list_typeD1) Bool)
(declare-const dummy2 tnumber_list_typeD1)
(declare-datatypes () ((tnumber_list_typeD1__ref (mk_tnumber_list_typeD1__ref (tnumber_list_typeD1__content tnumber_list_typeD1)))))
(define-fun tnumber_list_typeD1__ref___projection ((a tnumber_list_typeD1__ref)) tnumber_list_typeD1 (tnumber_list_typeD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-sort nearest_mode 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (nearest_mode nearest_mode) Bool)
(declare-const dummy3 nearest_mode)
(declare-datatypes () ((nearest_mode__ref (mk_nearest_mode__ref (nearest_mode__content nearest_mode)))))
(define-fun nearest_mode__ref___projection ((a nearest_mode__ref)) nearest_mode (nearest_mode__content a))
(define-fun dynamic_invariant2 ((temp___expr_225 Int) (temp___is_init_221 Bool) (temp___skip_constant_222 Bool) (temp___do_toplevel_223 Bool) (temp___do_typ_inv_224 Bool)) Bool (=> (or (= temp___is_init_221 true) (<= 0 2)) (in_range4 temp___expr_225)))
(declare-fun has_true ((Array Int Bool) Int Int) Bool)
(declare-fun has_true__function_guard (Bool (Array Int Bool) Int Int) Bool)
(assert true)
(assert (forall ((number_list (Array Int Bool))) (forall ((low Int) (high Int)) (! (= (= (has_true number_list low high) true) (exists ((v Int)) (and (and (<= low v) (<= v high)) (= (select number_list v) true)))) :pattern ((has_true number_list low high))))))
(declare-const number_list (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const mode Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const value Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const right Int)
(declare-const left Int)
(declare-const right_is_out Bool)
(declare-const left_is_out Bool)
(declare-const test_prime_and_coprime_numbers__p__nearest_number__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const temp___271 Bool)
(declare-const temp___270 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const test_prime_and_coprime_numbers__p__nearest_number__result1 Int)
(declare-const result Int)
(declare-const right1 Int)
(declare-const result1 Int)
(declare-const left1 Int)
(declare-const result2 Bool)
(declare-const test_prime_and_coprime_numbers__p__nearest_number__result2 Int)
(declare-const result3 Int)
(declare-const right2 Int)
(declare-const result4 Bool)
(declare-const right_is_out1 Bool)
(declare-const result5 Bool)
(declare-const right3 Int)
(declare-const right_is_out2 Bool)
(declare-const result6 Int)
(declare-const right4 Int)
(declare-const result7 Bool)
(declare-const right_is_out3 Bool)
(declare-const result8 Bool)
(declare-const right_is_out4 Bool)
(declare-const right_is_out5 Bool)
(declare-const right5 Int)
(declare-const right_is_out6 Bool)
(declare-const right6 Int)
(declare-const right_is_out7 Bool)
(declare-const right7 Int)
(declare-const right_is_out8 Bool)
(declare-const right8 Int)
(declare-const right_is_out9 Bool)
(declare-const right9 Int)
(declare-const right_is_out10 Bool)
(declare-const right10 Int)
(declare-const right_is_out11 Bool)
(declare-const result9 bool__ref)
(declare-const right_is_out12 Bool)
(declare-const right11 int__ref)
(declare-const right_is_out13 bool__ref)
(declare-const right12 Int)
(declare-const right_is_out14 Bool)
(declare-const result10 int__ref)
(declare-const left2 Int)
(declare-const result11 bool__ref)
(declare-const left_is_out1 Bool)
(declare-const result12 Bool)
(declare-const left3 Int)
(declare-const left_is_out2 Bool)
(declare-const result13 int__ref)
(declare-const left4 Int)
(declare-const result14 bool__ref)
(declare-const left_is_out3 Bool)
(declare-const result15 Bool)
(declare-const left5 int__ref)
(declare-const left_is_out4 bool__ref)
(declare-const left6 Int)
(declare-const left_is_out5 Bool)
(define-fun right_is_out15 () bool__ref (mk_bool__ref right_is_out10))
(define-fun right13 () int__ref (mk_int__ref right9))
(define-fun right_is_out16 () bool__ref (mk_bool__ref right_is_out8))
(define-fun right14 () int__ref (mk_int__ref right7))
(define-fun right_is_out17 () bool__ref (mk_bool__ref right_is_out6))
(define-fun right_is_out18 () bool__ref (mk_bool__ref right_is_out))
(assert (in_range4 mode))
(assert (in_range2 value))
(assert (and (and (<= 0 value) (<= value 100000)) (ite (= mode 0) (= (has_true number_list value 100000) true) (ite (= mode 1) (= (has_true number_list 0 value) true) (= (has_true number_list 0 100000) true)))))
(assert (= (mk_int__ref result) (mk_int__ref right)))
(assert (= right1 0))
(assert (in_range1 right1))
(assert (= (mk_int__ref result1) (mk_int__ref left)))
(assert (= left1 0))
(assert (in_range1 left1))
(assert (and (<= 0 value) (<= value 100000)))
(assert (= o value))
(assert (= result2 (select number_list o)))
(assert (not (= result2 true)))
(assert (= test_prime_and_coprime_numbers__p__nearest_number__result2 test_prime_and_coprime_numbers__p__nearest_number__result))
(assert (= test_prime_and_coprime_numbers__p__nearest_number__result2 test_prime_and_coprime_numbers__p__nearest_number__result1))
(assert (=> (or (= mode 0) (= mode 2)) (and (= o1 value) (not (= value 2147483647)))))
(assert (=> (or (= mode 0) (= mode 2)) (= o2 (+ o1 1))))
(assert (=> (or (= mode 0) (= mode 2)) (= right1 result3)))
(assert (=> (or (= mode 0) (= mode 2)) (= right2 o2)))
(assert (=> (or (= mode 0) (= mode 2)) (= temp___271 right_is_out)))
(assert (=> (or (= mode 0) (= mode 2)) (= temp___270 right2)))
(assert (=> (or (= mode 0) (= mode 2)) (= (mk_bool__ref result4) right_is_out18)))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out1 (ite (< 100000 right2) true false))))
(assert (=> (or (= mode 0) (= mode 2)) (or (and (and (and (= right_is_out1 right_is_out6) (= right2 right5)) (and (= right_is_out7 right_is_out1) (= right6 right2))) (and (ite (= right_is_out1 true) (= result5 true) (and (and (and (<= 0 right2) (<= right2 100000)) (= o3 right2)) (= result5 (select number_list o3)))) (= result5 true))) (and (and (ite (= right_is_out1 true) (= result5 true) (and (and (and (<= 0 right2) (<= right2 100000)) (= o3 right2)) (= result5 (select number_list o3)))) (not (= result5 true))) (and (and (and (= right_is_out17 (mk_bool__ref right_is_out4)) (= right4 right5)) (and (= right_is_out7 right_is_out5) (= right6 right4))) (and (and (and (<= (+ value 1) right3) (<= right3 100000)) (forall ((v Int)) (=> (and (<= value v) (<= v right3)) (not (= (select number_list v) true))))) (and (=> (<= (- 2147483648) 2147483647) (in_range1 right3)) (and (and (and (and (= o4 right3) (not (= right3 2147483647))) (= o5 (+ o4 1))) (and (= right3 result6) (= right4 o5))) (and (and (= right_is_out3 right_is_out4) (= right_is_out5 right_is_out3)) (and (and (= right_is_out2 result7) (= right_is_out3 (ite (< 100000 right4) true false))) (and (ite (= right_is_out3 true) (= result8 true) (and (and (and (<= 0 right4) (<= right4 100000)) (= o6 right4)) (= result8 (select number_list o6)))) (= result8 true))))))))))))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out16 right_is_out17)))
(assert (=> (or (= mode 0) (= mode 2)) (= right14 (mk_int__ref right5))))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out9 right_is_out7)))
(assert (=> (or (= mode 0) (= mode 2)) (= right8 right6)))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out15 right_is_out16)))
(assert (=> (or (= mode 0) (= mode 2)) (= right13 right14)))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out11 right_is_out9)))
(assert (=> (or (= mode 0) (= mode 2)) (= right10 right8)))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out13 right_is_out15)))
(assert (=> (or (= mode 0) (= mode 2)) (= right11 right13)))
(assert (=> (or (= mode 0) (= mode 2)) (= right_is_out14 right_is_out11)))
(assert (=> (or (= mode 0) (= mode 2)) (= right12 right10)))
(assert (=> (not (or (= mode 0) (= mode 2))) (= result9 right_is_out18)))
(assert (=> (not (or (= mode 0) (= mode 2))) (= right_is_out12 (distinct 1 0))))
(assert (=> (not (or (= mode 0) (= mode 2))) (= right_is_out13 (mk_bool__ref right_is_out12))))
(assert (=> (not (or (= mode 0) (= mode 2))) (= right11 (mk_int__ref right1))))
(assert (=> (not (or (= mode 0) (= mode 2))) (= right_is_out14 right_is_out12)))
(assert (=> (not (or (= mode 0) (= mode 2))) (= right12 right1)))
(assert (or (= mode 1) (= mode 2)))
(assert (and (= o7 value) (not (= value (- 2147483648)))))
(assert (= o8 (- o7 1)))
(assert (= result10 (mk_int__ref left1)))
(assert (= left2 o8))
(assert (= result11 (mk_bool__ref left_is_out)))
(assert (= left_is_out1 (ite (< left2 0) true false)))
(assert (=> (= left_is_out1 true) (= result12 true)))
(assert (=> (not (= left_is_out1 true)) (and (<= 0 left2) (<= left2 100000))))
(assert (=> (not (= left_is_out1 true)) (= o9 left2)))
(assert (=> (not (= left_is_out1 true)) (= result12 (select number_list o9))))
(assert (not (= result12 true)))
(assert (and (<= 0 left3) (<= left3 (- value 1))))
(assert (forall ((v Int)) (=> (and (<= left3 v) (<= v value)) (not (= (select number_list v) true)))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 left3)))
(assert (and (= o10 left3) (not (= left3 (- 2147483648)))))
(assert (= o11 (- o10 1)))
(assert (= result13 (mk_int__ref left3)))
(assert (= left4 o11))
(assert (= result14 (mk_bool__ref left_is_out2)))
(assert (= left_is_out3 (ite (< left4 0) true false)))
(assert (=> (= left_is_out3 true) (= result15 true)))
(assert (=> (not (= left_is_out3 true)) (and (<= 0 left4) (<= left4 100000))))
(assert (=> (not (= left_is_out3 true)) (= o12 left4)))
(assert (=> (not (= left_is_out3 true)) (= result15 (select number_list o12))))
(assert (not (= result15 true)))
(assert (= left_is_out4 (mk_bool__ref left_is_out3)))
(assert (= left5 (mk_int__ref left4)))
(assert (= left_is_out5 left_is_out3))
(assert (= left6 left4))
(declare-const v Int)
(assert (<= (int__content left5) v))
(assert (<= v value))
(assert (not (not (= (select number_list v) true))))
(check-sat)
(exit)
