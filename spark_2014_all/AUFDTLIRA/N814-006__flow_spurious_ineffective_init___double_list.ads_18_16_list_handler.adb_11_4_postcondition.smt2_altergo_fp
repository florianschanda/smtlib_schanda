(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type element_type

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element_type, element_type -> bool

logic dummy : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic to_rep : element_type -> int

logic of_rep : int -> element_type

axiom inversion_axiom :
  (forall x:element_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

logic to_rep1 : index_type -> int

logic of_rep1 : int -> index_type

axiom inversion_axiom1 :
  (forall x:index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_handler__integer_list__list_node__value :
element_type; rec__list_handler__integer_list__list_node__next : index_type;
rec__list_handler__integer_list__list_node__previous : index_type
}

function us_split_fields_Value__projection(a: us_split_fields) : element_type =
  (a).rec__list_handler__integer_list__list_node__value

function us_split_fields_Next__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__list_node__next

function us_split_fields_Previous__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__list_node__previous

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__list_handler__integer_list__list_node__value) = to_rep(((b).us_split_fields1).rec__list_handler__integer_list__list_node__value)) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__next) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__next))) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__previous) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__previous))) ->
  (bool_eq4(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__list_handler__integer_list__list_node__value) = to_rep(((b).us_split_fields1).rec__list_handler__integer_list__list_node__value)) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__next) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__next))) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__previous) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__previous)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:element_type. forall a1:index_type. forall a2:index_type.
  (0 <= object__size({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = a;
  rec__list_handler__integer_list__list_node__next = a1;
  rec__list_handler__integer_list__list_node__previous = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:element_type. forall a1:index_type. forall a2:index_type.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = a;
  rec__list_handler__integer_list__list_node__next = a1;
  rec__list_handler__integer_list__list_node__previous = a2 } })))

logic list_handler__integer_list__list_node__value__first__bit : int

logic list_handler__integer_list__list_node__value__last__bit : int

logic list_handler__integer_list__list_node__value__position : int

axiom list_handler__integer_list__list_node__value__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__value__first__bit)

axiom list_handler__integer_list__list_node__value__last__bit_axiom :
  (list_handler__integer_list__list_node__value__first__bit <  list_handler__integer_list__list_node__value__last__bit)

axiom list_handler__integer_list__list_node__value__position_axiom :
  (0 <= list_handler__integer_list__list_node__value__position)

logic list_handler__integer_list__list_node__next__first__bit : int

logic list_handler__integer_list__list_node__next__last__bit : int

logic list_handler__integer_list__list_node__next__position : int

axiom list_handler__integer_list__list_node__next__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__next__first__bit)

axiom list_handler__integer_list__list_node__next__last__bit_axiom :
  (list_handler__integer_list__list_node__next__first__bit <  list_handler__integer_list__list_node__next__last__bit)

axiom list_handler__integer_list__list_node__next__position_axiom :
  (0 <= list_handler__integer_list__list_node__next__position)

logic list_handler__integer_list__list_node__previous__first__bit : int

logic list_handler__integer_list__list_node__previous__last__bit : int

logic list_handler__integer_list__list_node__previous__position : int

axiom list_handler__integer_list__list_node__previous__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__previous__first__bit)

axiom list_handler__integer_list__list_node__previous__last__bit_axiom :
  (list_handler__integer_list__list_node__previous__first__bit <  list_handler__integer_list__list_node__previous__last__bit)

axiom list_handler__integer_list__list_node__previous__position_axiom :
  (0 <= list_handler__integer_list__list_node__previous__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : element_type

logic dummy3 : index_type

logic dummy4 : index_type

type list_node__ref = { list_node__content : us_rep
}

function list_node__ref___projection(a: list_node__ref) : us_rep =
  (a).list_node__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq5(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type map__ref1 = { map__content1 : (int,index_type) farray
}

logic slide1 : (int,index_type) farray, int, int -> (int,index_type) farray

axiom slide_eq1 :
  (forall a:(int,index_type) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,index_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,index_type) farray, int, int, (int,index_type) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,index_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,index_type) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic size : int -> int

logic size__function_guard : int, int -> prop

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

axiom size__post_axiom :
  (forall list_handler__integer_list__count:int
  [size(list_handler__integer_list__count)].
  (in_range2(list_handler__integer_list__count) ->
  in_range3(size(list_handler__integer_list__count))))

axiom size__def_axiom :
  (forall list_handler__integer_list__count:int
  [size(list_handler__integer_list__count)].
  (in_range2(list_handler__integer_list__count) ->
  (size(list_handler__integer_list__count) = list_handler__integer_list__count)))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___242 : us_rep -> (int,us_rep) farray

logic temp___246 : int -> (int,index_type) farray

axiom def_axiom :
  (forall temp___244:element_type. forall temp___2441:index_type.
  forall temp___2442:index_type.
  (forall temp___245:int. ((temp___242({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = temp___244;
  rec__list_handler__integer_list__list_node__next = temp___2441;
  rec__list_handler__integer_list__list_node__previous = temp___2442 }
  })[temp___245]) = { us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = temp___244;
  rec__list_handler__integer_list__list_node__next = temp___2441;
  rec__list_handler__integer_list__list_node__previous = temp___2442 } })))

axiom def_axiom1 :
  (forall temp___248:int. (in_range2(temp___248) ->
  (forall temp___249:int.
  (to_rep1((temp___246(temp___248)[temp___249])) = temp___248))))

 (* File "double_list.adb", line 33, characters 0-0 *)
goal WP_parameter_def :
  (forall count:int. forall free:int. forall count1:int. forall free1:int.
  ((((0 <= 128) -> in_range2(count)) and (((0 <= 128) -> in_range2(free)) and
  ((count1 = 0) and (in_range2(count1) and in_range2(free1))))) ->
  (size(count1) = 0)))
