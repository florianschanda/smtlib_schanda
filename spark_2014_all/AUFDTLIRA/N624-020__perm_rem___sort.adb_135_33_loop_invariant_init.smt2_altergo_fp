(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type true_bool

predicate in_range2(x: int) = ((1 <= x) and (x <= 1))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : true_bool, true_bool -> bool

logic dummy1 : true_bool

type true_bool__ref = { true_bool__content : true_bool
}

function true_bool__ref___projection(a: true_bool__ref) : true_bool =
  (a).true_bool__content

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : natural, natural -> bool

logic dummy3 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : index, index -> bool

logic dummy4 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range5(low) and in_range5(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq7((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,natural) farray

logic dummy6 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

logic remove : us_t, int -> us_t

logic remove__function_guard : us_t, us_t, int -> prop

axiom is_perm__def_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (((length({ elts = a; rt = a1 }) = 0) and (length({ elts = b; rt = b1
  }) = 0)) or
  (exists ia:int. (((to_rep(first(a1)) <= ia) and
  (ia <= to_rep(last(a1)))) and
  (exists ib:int. (((to_rep(first(b1)) <= ib) and
  (ib <= to_rep(last(b1)))) and ((to_rep1((a[ia])) = to_rep1((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))))

logic perm_reflexive : us_t, us_t -> int

logic perm_reflexive__function_guard : int, us_t, us_t -> prop

axiom perm_reflexive__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [perm_reflexive({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and (bool_eq7(a, to_rep(first(a1)), to_rep(last(a1)), b,
  to_rep(first(b1)), to_rep(last(b1))) = true))) ->
  (((of_int(perm_reflexive({ elts = a; rt = a1 }, { elts = b; rt = b1
  })) = true) -> (is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1
  }) = true)) and in_range2(perm_reflexive({ elts = a; rt = a1 }, { elts = b;
  rt = b1 })))))

logic perm_transitive : us_t, us_t, us_t -> int

logic perm_transitive__function_guard : int, us_t, us_t, us_t -> prop

axiom perm_transitive__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t. forall c:(int,natural) farray. forall c1:t [perm_transitive({
  elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts = c; rt = c1 })].
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and ((invariant__({ elts = c; rt = c1 }) = true) and
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) and
  (is_perm({ elts = b; rt = b1 }, { elts = c; rt = c1 }) = true))))) ->
  (((of_int(perm_transitive({ elts = a; rt = a1 }, { elts = b; rt = b1 }, {
  elts = c; rt = c1 })) = true) -> (is_perm({ elts = a; rt = a1 }, { elts =
  c; rt = c1 }) = true)) and in_range2(perm_transitive({ elts = a; rt = a1 },
  { elts = b; rt = b1 }, { elts = c; rt = c1 })))))

type tarray_typeP1

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tarray_typeP1, tarray_typeP1 -> bool

logic dummy7 : tarray_typeP1

type tarray_typeP1__ref = { tarray_typeP1__content : tarray_typeP1
}

function tarray_typeP1__ref___projection(a: tarray_typeP1__ref) : tarray_typeP1 =
  (a).tarray_typeP1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic index_of_minimum : (int,natural) farray, int, int -> int

logic index_of_minimum__function_guard : int, (int,natural) farray, int,
  int -> prop

axiom index_of_minimum__post_axiom :
  (forall values:(int,natural) farray.
  (forall first2:int. forall last2:int [index_of_minimum(values, first2,
  last2)]. (((in_range5(first2) and in_range5(last2)) and
  ((first2 <= last2) and (((1 <= first2) and (first2 <= 100)) and
  ((1 <= last2) and (last2 <= 100))))) ->
  (((first2 <= index_of_minimum(values, first2, last2)) and
  (index_of_minimum(values, first2, last2) <= last2)) and
  in_range1(index_of_minimum(values, first2, last2))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic init : (int,natural) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type t11b

predicate in_range7(x: int) = ((1 <= x) and (x <= 99))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : t11b, t11b -> bool

logic dummy8 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref___projection(a: t11b__ref) : t11b = (a).t11b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep(first(a1)) = 1) and (0 <= to_rep(last(a1))))))

axiom remove__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i:int [remove({ elts = a; rt = a1 }, i)]. ((in_range5(i) and
  ((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep(first(a1)) <= i) and (i <= to_rep(last(a1)))))) ->
  (((invariant__(remove({ elts = a; rt = a1 }, i)) = true) and
  ((to_rep(last((remove({ elts = a; rt = a1 },
  i)).rt)) = (to_rep(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i - 1))) ->
   (to_rep1((a[k])) = to_rep1(((remove({ elts = a; rt = a1 },
   i)).elts[k]))))) and
  ((forall k:int. ((((i + 1) <= k) and (k <= to_rep(last(a1)))) ->
   (to_rep1((a[k])) = to_rep1(((remove({ elts = a; rt = a1 },
   i)).elts[(k - 1)]))))) and
  (forall k:int. (((i <= k) and (k <= (to_rep(last(a1)) - 1))) ->
  (to_rep1((a[(k + 1)])) = to_rep1(((remove({ elts = a; rt = a1 },
  i)).elts[k]))))))))) and dynamic_property(1, 100, to_rep(first((remove({
  elts = a; rt = a1 }, i)).rt)), to_rep(last((remove({ elts = a; rt = a1 },
  i)).rt)))))))

 (* File "sort.adb", line 92, characters 0-0 *)
goal WP_parameter_def :
  (forall values:(int,natural) farray. forall smallest:int.
  forall prec:(int,natural) farray. forall hr:int. forall current:int.
  forall o:int. forall o1:int. forall o2:int.
  forall values1:(int,natural) farray. forall result:(int,natural) farray.
  forall prec1:(int,natural) farray. forall result1:int. forall hr1:int.
  forall result2:int. forall current1:int. forall result3:int.
  forall smallest1:int. forall result4:(int,natural) farray.
  forall prec2:(int,natural) farray. forall values2:(int,natural) farray.
  forall result5:int. forall hr2:int. (((1 <= 2147483647) ->
  in_range1(smallest)) -> ((values = init) -> ((({ map__content = result
  } = { map__content = prec }) and (prec1 = values)) -> (((1 <= 1) ->
  in_range2(hr)) -> ((((o = perm_reflexive({ elts = values; rt = mk(1, 100)
  }, { elts = values; rt = mk(1, 100) })) and (in_range2(o) and
  ((of_int(o) = true) -> (is_perm({ elts = values; rt = mk(1, 100) }, {
  elts = values; rt = mk(1, 100) }) = true)))) and (({ int__content = result1
  } = { int__content = hr }) and (hr1 = o))) -> ((({ int__content = result2
  } = { int__content = current }) and (current1 = 1)) ->
  (((1 <= current1) and (current1 <= 99)) ->
  ((((o1 = index_of_minimum(values, current1, 100)) and (in_range1(o1) and
  ((current1 <= o1) and (o1 <= 100)))) and (({ int__content = result3 } = {
  int__content = smallest }) and (smallest1 = o1))) ->
  ((((not (smallest1 = current1)) and (((prec1 = result4) and
  (prec2 = values)) and ((is_perm({ elts = values; rt = mk(1, 100) }, {
  elts = values2; rt = mk(1, 100) }) = true) and (((o2 = perm_transitive({
  elts = init; rt = mk(1, 100) }, { elts = prec2; rt = mk(1, 100) }, { elts =
  values2; rt = mk(1, 100) })) and (in_range2(o2) and ((of_int(o2) = true) ->
  (is_perm({ elts = init; rt = mk(1, 100) }, { elts = values2; rt = mk(1,
  100) }) = true)))) and ((hr1 = result5) and (hr2 = o2)))))) or
  ((smallest1 = current1) and (((hr2 = hr1) and ((prec2 = prec1) and
  (values2 = values))) and ((hr2 = hr1) and ((prec2 = prec1) and
  (values2 = values1)))))) -> (is_perm({ elts = values; rt = mk(1, 100) }, {
  elts = values2; rt = mk(1, 100) }) = true)))))))))))
