(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort it2 0)
(declare-fun it2qtint (it2) Int)
(assert (forall ((i it2)) (and (<= 5 (it2qtint i)) (<= (it2qtint i) 50))))
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range1 temp___expr_183)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (et1 et1) Bool)
(declare-const dummy2 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant2 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range2 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun temp_____aggregate_def_1026 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1034 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1041 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1049 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1057 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1064 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1072 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1080 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1087 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1095 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1103 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1110 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_4698 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_4704 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___4700 (Array Int (Array Int et1)))) (forall ((temp___4701 Int)) (forall ((temp___4702 (Array Int et1))) (let ((temp___4699 (temp_____aggregate_def_4698 temp___4700 temp___4701 temp___4702))) (=> (dynamic_invariant1 temp___4701 true true true true) (forall ((temp___4703 Int)) (ite (= temp___4703 temp___4701) (= (select temp___4699 temp___4703) temp___4702) (= (select temp___4699 temp___4703) (select temp___4700 temp___4703))))))))))
(assert (forall ((temp___4706 (Array Int et1))) (forall ((temp___4707 Int) (temp___4708 Int)) (let ((temp___4705 (temp_____aggregate_def_4704 temp___4706 temp___4707 temp___4708))) (=> (and (dynamic_invariant temp___4707 true true true true) (dynamic_invariant2 temp___4708 true true true true)) (forall ((temp___4709 Int)) (ite (= temp___4709 temp___4707) (= (to_rep (select temp___4705 temp___4709)) temp___4708) (= (select temp___4705 temp___4709) (select temp___4706 temp___4709)))))))))
(assert (forall ((temp___1028 (Array Int (Array Int et1)))) (forall ((temp___1029 Int) (temp___1031 Int)) (forall ((temp___1030 (Array Int et1)) (temp___1032 (Array Int et1))) (let ((temp___1027 (temp_____aggregate_def_1026 temp___1028 temp___1029 temp___1030 temp___1031 temp___1032))) (=> (and (dynamic_invariant1 temp___1029 true true true true) (dynamic_invariant1 temp___1031 true true true true)) (forall ((temp___1033 Int)) (ite (= temp___1033 temp___1031) (= (select temp___1027 temp___1033) temp___1032) (ite (= temp___1033 temp___1029) (= (select temp___1027 temp___1033) temp___1030) (= (select temp___1027 temp___1033) (select temp___1028 temp___1033)))))))))))
(assert (forall ((temp___1036 (Array Int et1))) (forall ((temp___1037 Int) (temp___1038 Int)) (let ((temp___1035 (temp_____aggregate_def_1034 temp___1036 temp___1037 temp___1038))) (=> (and (dynamic_invariant temp___1037 true true true true) (dynamic_invariant2 temp___1038 true true true true)) (forall ((temp___1039 Int)) (ite (= temp___1039 temp___1037) (= (to_rep (select temp___1035 temp___1039)) temp___1038) (= (select temp___1035 temp___1039) (select temp___1036 temp___1039)))))))))
(assert (forall ((temp___1043 (Array Int et1))) (forall ((temp___1044 Int) (temp___1045 Int)) (let ((temp___1042 (temp_____aggregate_def_1041 temp___1043 temp___1044 temp___1045))) (=> (and (dynamic_invariant temp___1044 true true true true) (dynamic_invariant2 temp___1045 true true true true)) (forall ((temp___1046 Int)) (ite (= temp___1046 temp___1044) (= (to_rep (select temp___1042 temp___1046)) temp___1045) (= (select temp___1042 temp___1046) (select temp___1043 temp___1046)))))))))
(assert (forall ((temp___1051 (Array Int (Array Int et1)))) (forall ((temp___1052 Int) (temp___1054 Int)) (forall ((temp___1053 (Array Int et1)) (temp___1055 (Array Int et1))) (let ((temp___1050 (temp_____aggregate_def_1049 temp___1051 temp___1052 temp___1053 temp___1054 temp___1055))) (=> (and (dynamic_invariant1 temp___1052 true true true true) (dynamic_invariant1 temp___1054 true true true true)) (forall ((temp___1056 Int)) (ite (= temp___1056 temp___1054) (= (select temp___1050 temp___1056) temp___1055) (ite (= temp___1056 temp___1052) (= (select temp___1050 temp___1056) temp___1053) (= (select temp___1050 temp___1056) (select temp___1051 temp___1056)))))))))))
(assert (forall ((temp___1059 (Array Int et1))) (forall ((temp___1060 Int) (temp___1061 Int)) (let ((temp___1058 (temp_____aggregate_def_1057 temp___1059 temp___1060 temp___1061))) (=> (and (dynamic_invariant temp___1060 true true true true) (dynamic_invariant2 temp___1061 true true true true)) (forall ((temp___1062 Int)) (ite (= temp___1062 temp___1060) (= (to_rep (select temp___1058 temp___1062)) temp___1061) (= (select temp___1058 temp___1062) (select temp___1059 temp___1062)))))))))
(declare-const rliteral et1)
(assert (= (et1qtint rliteral) 99))
(assert (forall ((temp___1066 (Array Int et1))) (forall ((temp___1067 Int) (temp___1068 Int)) (let ((temp___1065 (temp_____aggregate_def_1064 temp___1066 temp___1067 temp___1068))) (=> (and (dynamic_invariant temp___1067 true true true true) (dynamic_invariant2 temp___1068 true true true true)) (forall ((temp___1069 Int)) (ite (= temp___1069 temp___1067) (= (select temp___1065 temp___1069) rliteral) (= (select temp___1065 temp___1069) (select temp___1066 temp___1069)))))))))
(assert (forall ((temp___1074 (Array Int (Array Int et1)))) (forall ((temp___1075 Int) (temp___1077 Int)) (forall ((temp___1076 (Array Int et1)) (temp___1078 (Array Int et1))) (let ((temp___1073 (temp_____aggregate_def_1072 temp___1074 temp___1075 temp___1076 temp___1077 temp___1078))) (=> (and (dynamic_invariant1 temp___1075 true true true true) (dynamic_invariant1 temp___1077 true true true true)) (forall ((temp___1079 Int)) (ite (= temp___1079 temp___1077) (= (select temp___1073 temp___1079) temp___1078) (ite (= temp___1079 temp___1075) (= (select temp___1073 temp___1079) temp___1076) (= (select temp___1073 temp___1079) (select temp___1074 temp___1079)))))))))))
(assert (forall ((temp___1082 (Array Int et1))) (forall ((temp___1083 Int) (temp___1084 Int)) (let ((temp___1081 (temp_____aggregate_def_1080 temp___1082 temp___1083 temp___1084))) (=> (and (dynamic_invariant temp___1083 true true true true) (dynamic_invariant2 temp___1084 true true true true)) (forall ((temp___1085 Int)) (ite (= temp___1085 temp___1083) (= (to_rep (select temp___1081 temp___1085)) temp___1084) (= (select temp___1081 temp___1085) (select temp___1082 temp___1085)))))))))
(assert (forall ((temp___1089 (Array Int et1))) (forall ((temp___1090 Int) (temp___1091 Int)) (let ((temp___1088 (temp_____aggregate_def_1087 temp___1089 temp___1090 temp___1091))) (=> (and (dynamic_invariant temp___1090 true true true true) (dynamic_invariant2 temp___1091 true true true true)) (forall ((temp___1092 Int)) (ite (= temp___1092 temp___1090) (= (to_rep (select temp___1088 temp___1092)) temp___1091) (= (select temp___1088 temp___1092) (select temp___1089 temp___1092)))))))))
(assert (forall ((temp___1097 (Array Int (Array Int et1)))) (forall ((temp___1098 Int) (temp___1100 Int)) (forall ((temp___1099 (Array Int et1)) (temp___1101 (Array Int et1))) (let ((temp___1096 (temp_____aggregate_def_1095 temp___1097 temp___1098 temp___1099 temp___1100 temp___1101))) (=> (and (dynamic_invariant1 temp___1098 true true true true) (dynamic_invariant1 temp___1100 true true true true)) (forall ((temp___1102 Int)) (ite (= temp___1102 temp___1100) (= (select temp___1096 temp___1102) temp___1101) (ite (= temp___1102 temp___1098) (= (select temp___1096 temp___1102) temp___1099) (= (select temp___1096 temp___1102) (select temp___1097 temp___1102)))))))))))
(assert (forall ((temp___1105 (Array Int et1))) (forall ((temp___1106 Int) (temp___1107 Int)) (let ((temp___1104 (temp_____aggregate_def_1103 temp___1105 temp___1106 temp___1107))) (=> (and (dynamic_invariant temp___1106 true true true true) (dynamic_invariant2 temp___1107 true true true true)) (forall ((temp___1108 Int)) (ite (= temp___1108 temp___1106) (= (to_rep (select temp___1104 temp___1108)) temp___1107) (= (select temp___1104 temp___1108) (select temp___1105 temp___1108)))))))))
(assert (forall ((temp___1112 (Array Int et1))) (forall ((temp___1113 Int) (temp___1114 Int)) (let ((temp___1111 (temp_____aggregate_def_1110 temp___1112 temp___1113 temp___1114))) (=> (and (dynamic_invariant temp___1113 true true true true) (dynamic_invariant2 temp___1114 true true true true)) (forall ((temp___1115 Int)) (ite (= temp___1115 temp___1113) (= (select temp___1111 temp___1115) rliteral) (= (select temp___1111 temp___1115) (select temp___1112 temp___1115)))))))))
(declare-const a (Array Int (Array Int et1)))
(declare-const j_next Int)
(declare-const f Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 et1)
(declare-const o3 (Array Int et1))
(declare-const o4 (Array Int (Array Int et1)))
(declare-const o5 Int)
(declare-const o6 (Array Int et1))
(declare-const o7 (Array Int et1))
(declare-const o8 Int)
(declare-const temp___4726 (Array Int (Array Int et1)))
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 (Array Int et1))
(declare-const o12 (Array Int et1))
(declare-const o13 Int)
(declare-const temp___4721 (Array Int (Array Int et1)))
(declare-const t (Array Int (Array Int et1)))
(declare-const a1 (Array Int (Array Int et1)))
(declare-const result Int)
(declare-const j_next1 Int)
(declare-const result1 Int)
(declare-const j_next2 Int)
(declare-const result2 Int)
(declare-const f1 Int)
(declare-const result3 Int)
(declare-const f2 Int)
(declare-const result4 (Array Int (Array Int et1)))
(declare-const a2 (Array Int (Array Int et1)))
(declare-const a3 (Array Int (Array Int et1)))
(declare-const j_next3 Int)
(declare-const f3 Int)
(declare-const t1 (Array Int (Array Int et1)))
(declare-const a4 (Array Int (Array Int et1)))
(declare-const j_next4 Int)
(declare-const f4 Int)
(declare-const t2 (Array Int (Array Int et1)))
(declare-const result5 Bool)
(declare-const result6 Bool)
(define-fun f5 () int__ref (mk_int__ref f))
(define-fun j_next5 () int__ref (mk_int__ref j_next))
(assert (in_range i))
(assert (in_range1 j))
(assert (in_range2 e))
(assert (=> (<= 5 50) (in_range1 j_next)))
(assert (=> (<= 0 99) (in_range2 f)))
(assert (= (bool_eq1 a1 5 50 (temp_____aggregate_def_4698 t j (temp_____aggregate_def_4704 (select t j) i e)) 5 50) true))
(assert (=> (= j 50) (= (mk_int__ref result) j_next5)))
(assert (=> (= j 50) (= j_next1 5)))
(assert (=> (not (= j 50)) (and (= o (+ j 1)) (in_range1 (+ j 1)))))
(assert (=> (not (= j 50)) (= (mk_int__ref result1) j_next5)))
(assert (=> (not (= j 50)) (= j_next2 o)))
(assert (=> (not (= j 50)) (= j_next1 j_next2)))
(assert (=> (= e 0) (= (mk_int__ref result2) f5)))
(assert (=> (= e 0) (= f1 99)))
(assert (=> (not (= e 0)) (and (= o1 (- e 1)) (in_range2 (- e 1)))))
(assert (=> (not (= e 0)) (= (mk_int__ref result3) f5)))
(assert (=> (not (= e 0)) (= f2 o1)))
(assert (=> (not (= e 0)) (= f1 f2)))
(assert (= (to_rep o2) f1))
(assert (= o3 (store (select a1 j_next1) i o2)))
(assert (= o4 (store a1 j_next1 o3)))
(assert (= a1 result4))
(assert (= a2 o4))
(assert (= t t1))
(assert (= f1 f3))
(assert (= j_next1 j_next3))
(assert (= a2 a3))
(assert (= t2 t))
(assert (= f4 f1))
(assert (= j_next4 j_next1))
(assert (= a4 a2))
(assert (=> (< j 50) (=> (< 0 e) (and (= o10 (- e 1)) (in_range2 (- e 1))))))
(assert (=> (< j 50) (=> (< 0 e) (and (<= 5 (+ j 1)) (<= (+ j 1) 50)))))
(assert (=> (< j 50) (=> (< 0 e) (= o9 (+ j 1)))))
(assert (=> (< j 50) (=> (< 0 e) (= o11 (select a o9)))))
(assert (=> (< j 50) (=> (< 0 e) (= o12 (temp_____aggregate_def_1041 o11 i o10)))))
(assert (=> (< j 50) (=> (< 0 e) (and (= o13 (+ j 1)) (in_range1 (+ j 1))))))
(assert (=> (< j 50) (=> (< 0 e) (= temp___4721 (temp_____aggregate_def_1026 a j (temp_____aggregate_def_1034 (select a j) i e) o13 o12)))))
(assert (=> (< j 50) (=> (< 0 e) (= result6 (bool_eq1 a3 5 50 temp___4721 5 50)))))
(assert (=> (< j 50) (=> (not (< 0 e)) (= result6 false))))
(assert (=> (< j 50) (=> (= result6 true) (= result5 true))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (and (<= 5 (+ j 1)) (<= (+ j 1) 50))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (= o5 (+ j 1))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (= o6 (select a o5))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (= o7 (temp_____aggregate_def_1064 o6 i 99))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (and (= o8 (+ j 1)) (in_range1 (+ j 1)))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (= temp___4726 (temp_____aggregate_def_1049 a j (temp_____aggregate_def_1057 (select a j) i e) o8 o7))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (= e 0) (= result5 (bool_eq1 a3 5 50 temp___4726 5 50))))))
(assert (=> (< j 50) (=> (not (= result6 true)) (=> (not (= e 0)) (= result5 false)))))
(assert (=> (not (< j 50)) (= result5 false)))
(assert (not (= result5 true)))
(assert (= j 50))
(assert (< 0 e))
(assert (not (in_range2 (- e 1))))
(check-sat)
(exit)
