(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 1 100)) (in_range1 temp___expr_150)))
(declare-sort extended_index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (extended_index_type extended_index_type) Bool)
(declare-const dummy1 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_156 Int) (temp___is_init_153 Bool) (temp___skip_constant_154 Bool) (temp___do_toplevel_155 Bool)) Bool (=> (or (= temp___is_init_153 true) (<= 0 100)) (in_range2 temp___expr_156)))
(declare-fun to_rep (extended_index_type) Int)
(declare-fun of_rep (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x extended_index_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort position_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (position_type position_type) Bool)
(declare-const dummy2 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep1 (position_type) Int)
(declare-fun of_rep1 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x position_type)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort direction 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (direction direction) Bool)
(declare-const dummy3 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (count_type count_type) Bool)
(declare-const dummy5 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 0 2147483647)) (in_range5 temp___expr_144)))
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption ((temp___expr_199 us_rep) (temp___skip_top_level_200 Bool)) Bool (=> (not (= temp___skip_top_level_200 true)) (= (length temp___expr_199) 0)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false true))) :pattern ((length container)))))
(define-fun ole ((left us_rep) (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tree_model__path_type__a us_rep) (rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep (rec__tree_model__path_type__a a))
(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool (rec__tree_model__path_type__k a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq4 (rec__tree_model__path_type__a (us_split_fields1 a)) (rec__tree_model__path_type__a (us_split_fields1 b))) true) (= (rec__tree_model__path_type__k (us_split_fields1 a)) (rec__tree_model__path_type__k (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const tree_model__path_type__a__first__bit Int)
(declare-const tree_model__path_type__a__last__bit Int)
(declare-const tree_model__path_type__a__position Int)
(assert (<= 0 tree_model__path_type__a__first__bit))
(assert (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))
(assert (<= 0 tree_model__path_type__a__position))
(declare-const tree_model__path_type__k__first__bit Int)
(declare-const tree_model__path_type__k__last__bit Int)
(declare-const tree_model__path_type__k__position Int)
(assert (<= 0 tree_model__path_type__k__first__bit))
(assert (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))
(assert (<= 0 tree_model__path_type__k__position))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 (path_type__content a))
(declare-fun is_concat (us_rep us_rep us_rep) Bool)
(declare-fun is_concat__function_guard (Bool us_rep us_rep us_rep) Bool)
(assert true)
(assert (forall ((q us_rep) (v us_rep) (p us_rep)) (! (= (= (is_concat q v p) true) (and (and (and (= (- (length p) (length v)) (length q)) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length q))) (= (get p i) (get q i))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length v))) (= (get p (+ i (length q))) (get v i))))) (forall ((i Int)) (=> (and (<= (+ (length q) 1) i) (<= i (length p))) (= (get v (- i (length q))) (get p i)))))) :pattern ((is_concat q v p)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))
(assert (forall ((v us_rep1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-fun oeq1 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-fun oeq__function_guard1 (Bool (Array Int us_rep1) (Array Int us_rep1)) Bool)
(define-fun dynamic_invariant3 ((temp___expr_216 (Array Int us_rep1)) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int)) (=> (and (<= 1 temp___217) (<= temp___217 100)) (=> (= temp___is_init_213 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_216 temp___217)))) 100)))))
(define-fun default_initial_assumption1 ((temp___expr_219 (Array Int us_rep1)) (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int)) (=> (and (<= 1 temp___221) (<= temp___221 100)) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_219 temp___221)))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___expr_219 temp___221))) (of_int 0))))))
(assert true)
(assert (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1))) (! (= (= (oeq1 m1 m2) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i))) (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true) (= (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true)))))) :pattern ((oeq1 m1 m2)))))
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 a))) (to_rep (rec__binary_trees__cell__left (us_split_fields3 b)))) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 a))) (to_rep (rec__binary_trees__cell__right (us_split_fields3 b))))) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 a))) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 b))))) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))
(assert (forall ((v us_rep2)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq3 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq3 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true))))))))
(declare-const dummy8 (Array Int us_rep2))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep2)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep2)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep2)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 ((Array Int us_rep2) (Array Int us_rep2)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields5 a))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 b)))) (= (bool_eq4 (rec__binary_trees__forest__c (us_split_fields5 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields5 b)) 1 100) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep3) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep3) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content a))
(declare-fun size (us_rep3) Int)
(declare-fun size__function_guard (Int us_rep3) Bool)
(declare-fun tree_structure (us_rep3) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption2 ((temp___expr_275 us_rep3) (temp___skip_top_level_276 Bool)) Bool (and (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields5 temp___expr_275))) 0) (forall ((temp___278 Int)) (=> (and (<= 1 temp___278) (<= temp___278 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 2))))) (=> (not (= temp___skip_top_level_276 true)) (= (size temp___expr_275) 0))))
(define-fun type_invariant ((temp___281 us_rep3)) Bool (= (tree_structure temp___281) true))
(declare-fun model__ (us_rep3 Int) (Array Int us_rep1))
(declare-fun model____function_guard ((Array Int us_rep1) us_rep3 Int) Bool)
(declare-fun valid_root (us_rep3 Int) Bool)
(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)
(declare-fun parent (us_rep3 Int) Int)
(declare-fun parent__function_guard (Int us_rep3 Int) Bool)
(declare-fun position (us_rep3 Int) Int)
(declare-fun position__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((f us_rep3)) (forall ((root Int)) (! (=> (and (and (dynamic_invariant root true true true) (type_invariant f)) (= (valid_root f root) true)) (let ((result (model__ f root))) (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result root)))) 0) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= i root)) (ite (and (not (= (parent f i) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result (parent f i)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)))))) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= i root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select result (parent f i)))) (position f i) (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select result i))) (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true)) (= j i))))))))))) (dynamic_invariant3 result true false true)))) :pattern ((model__ f root))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const root Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const v Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const r256b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-sort tcount_typeB 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq10 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy10 tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-fun to_rep2 (tcount_typeB) Int)
(declare-fun of_rep2 (Int) tcount_typeB)
(assert (forall ((x tcount_typeB)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x tcount_typeB)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy11 tcount_typeB)
(declare-datatypes () ((t257b__ref (mk_t257b__ref (t257b__content tcount_typeB)))))
(define-fun t257b__ref___projection ((a t257b__ref)) tcount_typeB (t257b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(assert (forall ((f us_rep3)) (! (=> (type_invariant f) (dynamic_invariant1 (size f) true false true)) :pattern ((size f)))))
(assert (forall ((f us_rep3)) (! (= (size f) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))) :pattern ((size f)))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (and (dynamic_invariant i true true true) (type_invariant f)) (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (= (= (valid_root f i) true) (and (<= i (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___288 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___288 i))))) 2))) :pattern ((valid_root f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (and (dynamic_invariant i true true true) (type_invariant f)) (let ((result (parent f i))) (and (and (=> (= (valid_root f i) true) (= result 0)) (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false true)))) :pattern ((parent f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (dynamic_invariant i true true true) (= (parent f i) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___292 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___292 i))))))) :pattern ((parent f i))))))
(define-fun dynamic_invariant4 ((temp___expr_168 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool)) Bool (=> (or (= temp___is_init_165 true) (<= 0 1)) (in_range4 temp___expr_168)))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant i true true true) (type_invariant f)) (not (= (parent f i) 0))) (dynamic_invariant4 (position f i) true false true)) :pattern ((position f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (dynamic_invariant i true true true) (= (position f i) (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___296 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___296 i))))))) :pattern ((position f i))))))
(define-fun default_initial_assumption3 ((temp___expr_259 us_rep2) (temp___skip_top_level_260 Bool)) Bool (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 temp___expr_259))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 temp___expr_259))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 temp___expr_259))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 temp___expr_259))) 2)))
(define-fun default_initial_assumption4 ((temp___expr_266 (Array Int us_rep2)) (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int)) (=> (and (<= 1 temp___268) (<= temp___268 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select temp___expr_266 temp___268)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select temp___expr_266 temp___268)))) 2)))))
(assert true)
(assert (forall ((f us_rep3)) (! (= (= (tree_structure f) true) (and (and (and (and (and (and (and (and (forall ((i Int)) (=> (and (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))) 1) i) (<= i 100)) (= (bool_eq3 (let ((temp___397 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___397 i)) (mk___rep1 (mk___split_fields1 (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___398 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___398 i)))))) (<= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___398 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___398 i))))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___399 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___399 i)))))) (<= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___399 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___399 i))))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___400 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___400 i)))))) (<= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___400 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___400 i))))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___402 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___402 i))))) 2) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___401 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___401 i))))) 0))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___407 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___407 i))))) 0)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___403 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___403 (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___404 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___404 i)))))))))) 0) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___405 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___405 (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___406 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___406 i)))))))))) i)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___412 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___412 i))))) 0)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___408 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___408 (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___409 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___409 i)))))))))) 1) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___410 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___410 (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___411 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___411 i)))))))))) i)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___415 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___415 i))))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___416 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___416 i))))) 0)) (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___413 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___413 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___414 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___414 i)))))))))) i))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___419 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___419 i))))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___420 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___420 i))))) 1)) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___417 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___417 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___418 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___418 i)))))))))) i)))))) :pattern ((tree_structure f)))))
(define-fun dynamic_invariant5 ((temp___expr_162 Int) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool)) Bool (=> (or (= temp___is_init_159 true) (<= 0 2)) (in_range3 temp___expr_162)))
(define-fun dynamic_invariant6 ((temp___expr_205 us_rep1) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true) (=> (= temp___is_init_202 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_205))) 100))))
(define-fun default_initial_assumption5 ((temp___expr_207 us_rep1) (temp___skip_top_level_208 Bool)) Bool (and (= (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_207))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 temp___expr_207)) (of_int 0))))
(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___211))) 100))
(define-fun olt ((left us_rep) (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (forall ((d Int)) (! (= (= (is_add s1 d s2) true) (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true)) (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2))))))
(declare-sort extended_index 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (extended_index extended_index) Bool)
(declare-const dummy12 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant7 ((temp___expr_192 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 0 2147483647)) (in_range7 temp___expr_192)))
(declare-sort element_type 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq13 (element_type element_type) Bool)
(declare-const dummy13 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant8 ((temp___expr_186 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 0 1)) (in_range8 temp___expr_186)))
(assert (forall ((container us_rep)) (forall ((position1 Int)) (! (=> (and (dynamic_invariant7 position1 true true true) (and (<= 1 position1) (<= position1 (last container)))) (dynamic_invariant8 (get container position1) true false true)) :pattern ((get container position1))))))
(declare-const f__split_fields extended_index_type)
(declare-const f__split_fields1 (Array Int us_rep2))
(declare-const f_old__split_fields extended_index_type)
(declare-const f_old__split_fields1 (Array Int us_rep2))
(declare-const n Int)
(declare-const ki Int)
(declare-const r Int)
(declare-const j Int)
(declare-const j1 Int)
(declare-const temp___1690 (Array Int us_rep1))
(declare-const o Int)
(declare-const o1 extended_index_type)
(declare-const o2 extended_index_type)
(declare-const o3 extended_index_type)
(declare-const o4 position_type)
(declare-const o5 extended_index_type)
(declare-const o6 extended_index_type)
(declare-const o7 extended_index_type)
(declare-const o8 position_type)
(declare-const o9 extended_index_type)
(declare-const temp___1692 Int)
(declare-const o10 Int)
(declare-const o11 us_rep)
(declare-const o12 Bool)
(declare-const o13 us_rep)
(declare-const o14 Bool)
(declare-const o15 Int)
(declare-const o16 extended_index_type)
(declare-const o17 extended_index_type)
(declare-const o18 extended_index_type)
(declare-const o19 position_type)
(declare-const o20 extended_index_type)
(declare-const o21 extended_index_type)
(declare-const o22 extended_index_type)
(declare-const o23 position_type)
(declare-const o24 extended_index_type)
(declare-const o25 Int)
(declare-const o26 Bool)
(declare-const o27 Int)
(declare-const o28 extended_index_type)
(declare-const o29 extended_index_type)
(declare-const o30 extended_index_type)
(declare-const o31 position_type)
(declare-const o32 extended_index_type)
(declare-const o33 extended_index_type)
(declare-const o34 extended_index_type)
(declare-const o35 position_type)
(declare-const o36 position_type)
(declare-const o37 Int)
(declare-const i Int)
(declare-const temp___1445 (Array Int us_rep1))
(declare-const o38 Int)
(declare-const o39 us_rep)
(declare-const o40 Bool)
(declare-const o41 us_split_fields)
(declare-const o42 us_rep)
(declare-const temp___1446 (Array Int us_rep1))
(declare-const o43 us_rep1)
(declare-const o44 us_split_fields)
(declare-const o45 us_rep)
(declare-const temp___1444 (Array Int us_rep1))
(declare-const o46 us_rep1)
(declare-const o47 us_split_fields)
(declare-const o48 Bool)
(declare-const temp___1440 (Array Int us_rep1))
(declare-const temp___1441 (Array Int us_rep1))
(declare-const o49 Int)
(declare-const o50 us_rep1)
(declare-const o51 us_split_fields)
(declare-const o52 us_rep)
(declare-const temp___1523 Int)
(declare-const i1 Int)
(declare-const temp___1530 (Array Int us_rep1))
(declare-const o53 us_rep1)
(declare-const o54 us_split_fields)
(declare-const o55 us_rep)
(declare-const o56 Int)
(declare-const temp___1529 (Array Int us_rep1))
(declare-const o57 us_rep1)
(declare-const o58 us_split_fields)
(declare-const temp___1528 (Array Int us_rep1))
(declare-const o59 Int)
(declare-const o60 us_rep1)
(declare-const o61 us_split_fields)
(declare-const o62 us_rep)
(declare-const o63 Int)
(declare-const temp___1526 (Array Int us_rep1))
(declare-const o64 Int)
(declare-const o65 us_rep1)
(declare-const o66 us_split_fields)
(declare-const o67 us_rep)
(declare-const temp___1527 (Array Int us_rep1))
(declare-const o68 us_rep1)
(declare-const o69 us_split_fields)
(declare-const o70 us_rep)
(declare-const o71 Int)
(declare-const o72 Int)
(declare-const i2 Int)
(declare-const temp___1547 (Array Int us_rep1))
(declare-const o73 us_rep1)
(declare-const o74 us_split_fields)
(declare-const o75 us_rep)
(declare-const o76 Int)
(declare-const temp___1546 (Array Int us_rep1))
(declare-const o77 us_rep1)
(declare-const o78 us_split_fields)
(declare-const i3 Int)
(declare-const temp___1557 (Array Int us_rep1))
(declare-const o79 Int)
(declare-const o80 us_rep2)
(declare-const o81 us_split_fields2)
(declare-const o82 extended_index_type)
(declare-const temp___1559 Int)
(declare-const o83 Int)
(declare-const o84 us_rep1)
(declare-const o85 us_split_fields)
(declare-const o86 Int)
(declare-const o87 Int)
(declare-const temp___1556 (Array Int us_rep1))
(declare-const o88 us_rep1)
(declare-const o89 us_split_fields)
(declare-const o90 us_rep)
(declare-const o91 Int)
(declare-const o92 Int)
(declare-const o93 Int)
(declare-const temp___1555 (Array Int us_rep1))
(declare-const o94 us_rep1)
(declare-const o95 us_split_fields)
(declare-const i4 Int)
(declare-const temp___1574 (Array Int us_rep1))
(declare-const o96 us_rep1)
(declare-const o97 us_split_fields)
(declare-const o98 us_rep)
(declare-const o99 Int)
(declare-const temp___1573 (Array Int us_rep1))
(declare-const o100 us_rep1)
(declare-const o101 us_split_fields)
(declare-const temp___1572 (Array Int us_rep1))
(declare-const o102 us_rep1)
(declare-const o103 us_split_fields)
(declare-const temp___1571 (Array Int us_rep1))
(declare-const o104 us_rep1)
(declare-const o105 us_split_fields)
(declare-const o106 us_rep)
(declare-const i5 Int)
(declare-const temp___1590 (Array Int us_rep1))
(declare-const o107 us_rep1)
(declare-const o108 us_split_fields)
(declare-const o109 us_rep)
(declare-const o110 Int)
(declare-const temp___1589 (Array Int us_rep1))
(declare-const o111 us_rep1)
(declare-const o112 us_split_fields)
(declare-const o113 Int)
(declare-const o114 Int)
(declare-const temp___1588 (Array Int us_rep1))
(declare-const o115 us_rep1)
(declare-const o116 us_split_fields)
(declare-const temp___1585 (Array Int us_rep1))
(declare-const o117 Int)
(declare-const o118 us_rep1)
(declare-const o119 us_split_fields)
(declare-const o120 us_rep)
(declare-const o121 Int)
(declare-const o122 Int)
(declare-const temp___1586 (Array Int us_rep1))
(declare-const o123 us_rep1)
(declare-const o124 us_split_fields)
(declare-const o125 us_rep)
(declare-const temp___1587 (Array Int us_rep1))
(declare-const o126 us_rep1)
(declare-const o127 us_split_fields)
(declare-const o128 us_rep)
(declare-const temp___1487 Int)
(declare-const temp___1464 (Array Int us_rep1))
(declare-const o129 us_rep1)
(declare-const o130 us_split_fields)
(declare-const temp___1463 (Array Int us_rep1))
(declare-const o131 us_rep1)
(declare-const o132 us_split_fields)
(declare-const o133 us_rep)
(declare-const o134 Int)
(declare-const temp___1462 (Array Int us_rep1))
(declare-const o135 us_rep1)
(declare-const o136 us_split_fields)
(declare-const temp___1465 (Array Int us_rep1))
(declare-const o137 Int)
(declare-const o138 us_rep1)
(declare-const o139 us_split_fields)
(declare-const o140 us_rep)
(declare-const temp___1468 (Array Int us_rep1))
(declare-const o141 Int)
(declare-const o142 us_rep1)
(declare-const o143 us_split_fields)
(declare-const o144 us_rep)
(declare-const temp___1471 (Array Int us_rep1))
(declare-const o145 us_rep1)
(declare-const o146 us_split_fields)
(declare-const o147 us_rep)
(declare-const temp___1472 (Array Int us_rep1))
(declare-const o148 us_rep1)
(declare-const o149 us_split_fields)
(declare-const o150 us_rep)
(declare-const o151 Int)
(declare-const o152 Int)
(declare-const o153 Int)
(declare-const temp___1476 (Array Int us_rep1))
(declare-const o154 us_rep1)
(declare-const o155 us_split_fields)
(declare-const temp___1475 (Array Int us_rep1))
(declare-const o156 us_rep1)
(declare-const o157 us_split_fields)
(declare-const o158 us_rep)
(declare-const o159 Int)
(declare-const temp___1474 (Array Int us_rep1))
(declare-const o160 us_rep1)
(declare-const o161 us_split_fields)
(declare-const o162 Bool)
(declare-const o163 Int)
(declare-const o164 Int)
(declare-const temp___1477 (Array Int us_rep1))
(declare-const o165 Int)
(declare-const o166 us_rep1)
(declare-const o167 us_split_fields)
(declare-const o168 us_rep)
(declare-const temp___1480 (Array Int us_rep1))
(declare-const o169 Int)
(declare-const o170 us_rep1)
(declare-const o171 us_split_fields)
(declare-const o172 us_rep)
(declare-const o173 Int)
(declare-const o174 Int)
(declare-const temp___1483 (Array Int us_rep1))
(declare-const o175 us_rep1)
(declare-const o176 us_split_fields)
(declare-const o177 us_rep)
(declare-const temp___1484 (Array Int us_rep1))
(declare-const o178 us_rep1)
(declare-const o179 us_split_fields)
(declare-const o180 us_rep)
(declare-const temp___1485 (Array Int us_rep1))
(declare-const o181 Int)
(declare-const o182 us_rep1)
(declare-const o183 us_split_fields)
(declare-const o184 us_rep)
(declare-const o185 Int)
(declare-const i6 Int)
(declare-const temp___1492 (Array Int us_rep1))
(declare-const o186 Int)
(declare-const o187 us_rep1)
(declare-const o188 us_split_fields)
(declare-const o189 us_rep)
(declare-const o190 Int)
(declare-const temp___1491 (Array Int us_rep1))
(declare-const o191 Int)
(declare-const o192 us_rep1)
(declare-const o193 us_split_fields)
(declare-const temp___1490 (Array Int us_rep1))
(declare-const o194 Int)
(declare-const o195 us_rep1)
(declare-const o196 us_split_fields)
(declare-const temp___1488 (Array Int us_rep1))
(declare-const temp___1489 (Array Int us_rep1))
(declare-const o197 Int)
(declare-const o198 us_rep1)
(declare-const o199 us_split_fields)
(declare-const o200 us_rep)
(declare-const i7 Int)
(declare-const temp___1508 (Array Int us_rep1))
(declare-const o201 Int)
(declare-const o202 us_rep1)
(declare-const o203 us_split_fields)
(declare-const o204 us_rep)
(declare-const o205 Int)
(declare-const temp___1507 (Array Int us_rep1))
(declare-const o206 Int)
(declare-const o207 us_rep1)
(declare-const o208 us_split_fields)
(declare-const o209 Int)
(declare-const o210 Int)
(declare-const temp___1506 (Array Int us_rep1))
(declare-const o211 Int)
(declare-const o212 us_rep1)
(declare-const o213 us_split_fields)
(declare-const temp___1503 (Array Int us_rep1))
(declare-const o214 Int)
(declare-const o215 us_rep1)
(declare-const o216 us_split_fields)
(declare-const o217 us_rep)
(declare-const o218 Int)
(declare-const o219 Int)
(declare-const temp___1504 (Array Int us_rep1))
(declare-const o220 Int)
(declare-const o221 us_rep1)
(declare-const o222 us_split_fields)
(declare-const o223 us_rep)
(declare-const temp___1505 (Array Int us_rep1))
(declare-const o224 Int)
(declare-const o225 us_rep1)
(declare-const o226 us_split_fields)
(declare-const o227 us_rep)
(declare-const temp___14641 (Array Int us_rep1))
(declare-const o228 us_rep1)
(declare-const o229 us_split_fields)
(declare-const temp___14631 (Array Int us_rep1))
(declare-const o230 us_rep1)
(declare-const o231 us_split_fields)
(declare-const o232 us_rep)
(declare-const o233 Int)
(declare-const temp___14621 (Array Int us_rep1))
(declare-const o234 us_rep1)
(declare-const o235 us_split_fields)
(declare-const temp___14651 (Array Int us_rep1))
(declare-const o236 Int)
(declare-const o237 us_rep1)
(declare-const o238 us_split_fields)
(declare-const o239 us_rep)
(declare-const temp___14681 (Array Int us_rep1))
(declare-const o240 Int)
(declare-const o241 us_rep1)
(declare-const o242 us_split_fields)
(declare-const o243 us_rep)
(declare-const temp___14711 (Array Int us_rep1))
(declare-const o244 us_rep1)
(declare-const o245 us_split_fields)
(declare-const o246 us_rep)
(declare-const temp___14721 (Array Int us_rep1))
(declare-const o247 us_rep1)
(declare-const o248 us_split_fields)
(declare-const o249 us_rep)
(declare-const o250 Int)
(declare-const o251 Int)
(declare-const o252 Int)
(declare-const temp___14761 (Array Int us_rep1))
(declare-const o253 us_rep1)
(declare-const o254 us_split_fields)
(declare-const temp___14751 (Array Int us_rep1))
(declare-const o255 us_rep1)
(declare-const o256 us_split_fields)
(declare-const o257 us_rep)
(declare-const o258 Int)
(declare-const temp___14741 (Array Int us_rep1))
(declare-const o259 us_rep1)
(declare-const o260 us_split_fields)
(declare-const o261 Bool)
(declare-const o262 Int)
(declare-const o263 Int)
(declare-const temp___14771 (Array Int us_rep1))
(declare-const o264 Int)
(declare-const o265 us_rep1)
(declare-const o266 us_split_fields)
(declare-const o267 us_rep)
(declare-const temp___14801 (Array Int us_rep1))
(declare-const o268 Int)
(declare-const o269 us_rep1)
(declare-const o270 us_split_fields)
(declare-const o271 us_rep)
(declare-const o272 Int)
(declare-const o273 Int)
(declare-const temp___14831 (Array Int us_rep1))
(declare-const o274 us_rep1)
(declare-const o275 us_split_fields)
(declare-const o276 us_rep)
(declare-const temp___14841 (Array Int us_rep1))
(declare-const o277 us_rep1)
(declare-const o278 us_split_fields)
(declare-const o279 us_rep)
(declare-const temp___14851 (Array Int us_rep1))
(declare-const o280 Int)
(declare-const o281 us_rep1)
(declare-const o282 us_split_fields)
(declare-const o283 us_rep)
(declare-const o284 Int)
(declare-const i8 Int)
(declare-const o285 Int)
(declare-const o286 Int)
(declare-const temp___1606 (Array Int us_rep1))
(declare-const o287 us_rep1)
(declare-const o288 us_split_fields)
(declare-const i9 Int)
(declare-const temp___1615 (Array Int us_rep1))
(declare-const o289 us_rep1)
(declare-const o290 us_split_fields)
(declare-const temp___1613 (Array Int us_rep1))
(declare-const o291 Int)
(declare-const o292 us_rep1)
(declare-const o293 us_split_fields)
(declare-const o294 us_rep)
(declare-const temp___1614 (Array Int us_rep1))
(declare-const o295 us_rep1)
(declare-const o296 us_split_fields)
(declare-const o297 us_rep)
(declare-const o298 Int)
(declare-const o299 Int)
(declare-const temp___1627 Int)
(declare-const o300 Int)
(declare-const o301 Int)
(declare-const p Int)
(declare-const o302 Int)
(declare-const o303 us_rep2)
(declare-const o304 us_split_fields2)
(declare-const o305 position_type)
(declare-const o306 Int)
(declare-const o307 Bool)
(declare-const o308 Int)
(declare-const o309 Int)
(declare-const o310 Int)
(declare-const o311 Int)
(declare-const o312 (Array Int us_rep1))
(declare-const o313 Int)
(declare-const o314 Int)
(declare-const r1 Int)
(declare-const o315 Int)
(declare-const o316 us_rep2)
(declare-const o317 us_split_fields2)
(declare-const o318 position_type)
(declare-const o319 Int)
(declare-const o320 Bool)
(declare-const o321 Int)
(declare-const o322 Int)
(declare-const o323 Int)
(declare-const o324 Int)
(declare-const o325 (Array Int us_rep1))
(declare-const i10 Int)
(declare-const o326 Int)
(declare-const o327 Int)
(declare-const temp___1638 (Array Int us_rep1))
(declare-const o328 us_rep1)
(declare-const o329 us_split_fields)
(declare-const temp___1635 (Array Int us_rep1))
(declare-const o330 Int)
(declare-const o331 us_rep1)
(declare-const o332 us_split_fields)
(declare-const o333 us_rep)
(declare-const o334 Int)
(declare-const o335 Int)
(declare-const temp___1636 (Array Int us_rep1))
(declare-const o336 us_rep1)
(declare-const o337 us_split_fields)
(declare-const o338 us_rep)
(declare-const temp___1637 (Array Int us_rep1))
(declare-const o339 us_rep1)
(declare-const o340 us_split_fields)
(declare-const o341 us_rep)
(declare-const i11 Int)
(declare-const temp___1645 (Array Int us_rep1))
(declare-const o342 us_rep1)
(declare-const o343 us_split_fields)
(declare-const temp___1644 (Array Int us_rep1))
(declare-const o344 us_rep1)
(declare-const o345 us_split_fields)
(declare-const o346 us_rep)
(declare-const i12 Int)
(declare-const o347 Int)
(declare-const o348 Int)
(declare-const temp___1650 (Array Int us_rep1))
(declare-const o349 us_rep1)
(declare-const o350 us_split_fields)
(declare-const i13 Int)
(declare-const temp___1654 (Array Int us_rep1))
(declare-const o351 us_rep1)
(declare-const o352 us_split_fields)
(declare-const i14 Int)
(declare-const temp___1661 (Array Int us_rep1))
(declare-const o353 us_rep1)
(declare-const o354 us_split_fields)
(declare-const temp___1659 (Array Int us_rep1))
(declare-const o355 Int)
(declare-const o356 us_rep1)
(declare-const o357 us_split_fields)
(declare-const o358 us_rep)
(declare-const temp___1660 (Array Int us_rep1))
(declare-const o359 us_rep1)
(declare-const o360 us_split_fields)
(declare-const o361 us_rep)
(declare-const o362 Int)
(declare-const o363 Int)
(declare-const temp___1667 (Array Int us_rep1))
(declare-const o364 Int)
(declare-const o365 us_rep1)
(declare-const o366 us_split_fields)
(declare-const ki1 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Bool)
(declare-const result8 int__ref)
(declare-const n1 Int)
(declare-const n2 Int)
(declare-const ki2 Int)
(declare-const result9 Bool)
(declare-const result10 Bool)
(declare-const result11 Bool)
(declare-const result12 Bool)
(declare-const result13 Bool)
(declare-const result14 Bool)
(declare-const result15 Bool)
(declare-const result16 Bool)
(declare-const result17 Bool)
(declare-const result18 Bool)
(declare-const result19 Bool)
(declare-const result20 Bool)
(declare-const result21 Bool)
(declare-const result22 Bool)
(declare-const result23 Bool)
(declare-const result24 int__ref)
(declare-const ki3 Int)
(declare-const result25 Bool)
(declare-const result26 Bool)
(declare-const result27 Bool)
(declare-const result28 Bool)
(declare-const result29 Bool)
(declare-const result30 Bool)
(declare-const ki4 Int)
(declare-const result31 Bool)
(declare-const result32 Bool)
(declare-const result33 Bool)
(declare-const result34 Bool)
(declare-const result35 Bool)
(declare-const result36 Bool)
(declare-const result37 int__ref)
(declare-const ki5 Int)
(declare-const result38 Bool)
(declare-const result39 Bool)
(declare-const result40 Bool)
(declare-const result41 Bool)
(declare-const result42 Bool)
(declare-const result43 Bool)
(declare-const ki6 int__ref)
(declare-const ki7 Int)
(declare-const ki8 int__ref)
(declare-const ki9 Int)
(declare-const result44 int__ref)
(declare-const n3 Int)
(declare-const n4 int__ref)
(declare-const ki10 int__ref)
(declare-const n5 Int)
(declare-const ki11 Int)
(declare-const n6 int__ref)
(declare-const ki12 int__ref)
(declare-const n7 Int)
(declare-const ki13 Int)
(declare-const n8 int__ref)
(declare-const ki14 int__ref)
(declare-const n9 Int)
(declare-const ki15 Int)
(declare-const result45 Bool)
(declare-const result46 Bool)
(declare-const result47 Bool)
(declare-const result48 int__ref)
(declare-const r2 Int)
(declare-const r3 Int)
(declare-const result49 Bool)
(declare-const result50 int__ref)
(declare-const r4 Int)
(declare-const r5 int__ref)
(declare-const r6 Int)
(declare-const r7 int__ref)
(declare-const r8 Int)
(declare-const r9 int__ref)
(declare-const r10 Int)
(declare-const r11 int__ref)
(declare-const r12 Int)
(declare-const n10 int__ref)
(declare-const ki16 int__ref)
(declare-const r13 int__ref)
(declare-const n11 Int)
(declare-const ki17 Int)
(declare-const r14 Int)
(declare-const result51 Bool)
(declare-const result52 Bool)
(declare-const result53 Bool)
(declare-const result54 Bool)
(declare-const result55 Bool)
(declare-const result56 Bool)
(declare-const result57 Bool)
(declare-const result58 Bool)
(declare-const result59 Bool)
(declare-const result60 Bool)
(declare-const result61 Bool)
(declare-const result62 Bool)
(declare-const result63 Bool)
(assert (in_range1 root))
(assert (in_range2 v))
(assert (and (= (tree_structure (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true) (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))
(assert (and (= (to_rep f__split_fields) (to_rep f_old__split_fields)) (and (<= root (to_rep f__split_fields)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f_old__split_fields1 root)))) 2) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f__split_fields1 root)))) 2) (and (not (= v root)) (and (and (<= 1 v) (<= v (to_rep f__split_fields))) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f_old__split_fields1 v)))) 2) (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 v)))) 0)) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 v))))))) true) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 v)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 i15)))) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f_old__split_fields1 i15)))))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 v)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f__split_fields1 i15)))) (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f_old__split_fields1 i15)))))))) (and (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (not (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) j2))) true)) (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select f__split_fields1 j2)))) (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select f_old__split_fields1 j2)))))))) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (not (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) j2))) true)) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select f__split_fields1 j2)))) (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select f_old__split_fields1 j2)))))))))))))))))))))
(assert (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) true) (= (ole (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) v))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15)))) true)) (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 i15)))) 0))) (or (= i15 v) (= (ole (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) v))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 i15)))))))) true))))))
(assert (= result8 (mk_int__ref n)))
(assert (= n1 1))
(assert (<= 1 n1))
(assert (<= n1 100))
(assert (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (and (and (< 0 (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) v))))) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) true)) (<= (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15)))) (- n2 1))) (ite (= (ole (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) v))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15)))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) v) i15))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) i15))) true))))))
(assert (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) i15))) true) (<= (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) i15)))) (- n2 1))) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) true)))))
(assert (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) v) i15))) true) (<= (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) v) i15)))) (- n2 1))) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 v))))))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) true)))))
(assert (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) true) (<= (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15)))) (- n2 1))) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) i15))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root) i15)))) true))))))
(assert (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15))) true) (<= (length (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15)))) (- n2 1))) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) v) i15))) true) (= (is_concat (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) v))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) v) i15))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i15)))) true))))))
(assert (and (=> (<= 1 100) (in_range1 n2)) (and (<= 1 n2) (<= n2 100))))
(assert (= result24 (mk_int__ref ki2)))
(assert (= ki3 1))
(assert (<= 1 ki3))
(assert (<= ki3 100))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))
(assert (and (= temp___1462 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1462 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1462 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1462 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1462 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1462 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1462 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1462 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1462 j2)))) true)) (= j2 i15))))))))))))))
(assert (= o135 (select temp___1462 ki3)))
(assert (= o136 (us_split_fields1 o135)))
(assert (= result27 (rec__tree_model__path_type__k o136)))
(assert (=> (= result27 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))
(assert (=> (= result27 true) (and (= temp___1463 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1463 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1463 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1463 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1463 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1463 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1463 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1463 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1463 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result27 true) (= o131 (select temp___1463 ki3))))
(assert (=> (= result27 true) (= o132 (us_split_fields1 o131))))
(assert (=> (= result27 true) (= o133 (rec__tree_model__path_type__a o132))))
(assert (=> (= result27 true) (and (= o134 (length o133)) (and (in_range5 o134) (<= (+ 0 o134) 2147483647)))))
(assert (=> (= result27 true) (= result26 (ite (= o134 n2) true false))))
(assert (=> (not (= result27 true)) (= result26 false)))
(assert (=> (= result26 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))
(assert (=> (= result26 true) (and (= temp___1464 (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root)) (and (dynamic_invariant3 temp___1464 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1464 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1464 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1464 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1464 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1464 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1464 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1464 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result26 true) (= o129 (select temp___1464 ki3))))
(assert (=> (= result26 true) (= o130 (us_split_fields1 o129))))
(assert (=> (= result26 true) (= result25 (rec__tree_model__path_type__k o130))))
(assert (=> (not (= result26 true)) (= result25 false)))
(assert (=> (= result25 true) (and (= o151 (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f__split_fields1 ki3))))) (in_range4 (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f__split_fields1 ki3))))))))
(assert (=> (= result25 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))
(assert (=> (= result25 true) (and (= temp___1472 (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root)) (and (dynamic_invariant3 temp___1472 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1472 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1472 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1472 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1472 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1472 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1472 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1472 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result25 true) (= o148 (select temp___1472 ki3))))
(assert (=> (= result25 true) (= o149 (us_split_fields1 o148))))
(assert (=> (= result25 true) (= o150 (rec__tree_model__path_type__a o149))))
(assert (=> (= result25 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))
(assert (=> (= result25 true) (and (= temp___1471 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1471 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1471 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1471 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1471 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1471 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1471 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1471 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1471 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result25 true) (= o145 (select temp___1471 ki3))))
(assert (=> (= result25 true) (= o146 (us_split_fields1 o145))))
(assert (=> (= result25 true) (= o147 (rec__tree_model__path_type__a o146))))
(assert (=> (= result25 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))
(assert (=> (= result25 true) (and (= temp___1468 (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) root)) (and (dynamic_invariant3 temp___1468 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1468 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1468 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1468 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1468 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1468 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1468 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1468 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result25 true) (and (<= 1 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 ki3))))) (<= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 ki3)))) 100))))
(assert (=> (= result25 true) (= o141 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 ki3)))))))
(assert (=> (= result25 true) (= o142 (select temp___1468 o141))))
(assert (=> (= result25 true) (= o143 (us_split_fields1 o142))))
(assert (=> (= result25 true) (= o144 (rec__tree_model__path_type__a o143))))
(assert (=> (= result25 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))
(assert (=> (= result25 true) (and (= temp___1465 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1465 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1465 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1465 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1465 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1465 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1465 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1465 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1465 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result25 true) (and (<= 1 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 ki3))))) (<= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 ki3)))) 100))))
(assert (=> (= result25 true) (= o137 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 ki3)))))))
(assert (=> (= result25 true) (= o138 (select temp___1465 o137))))
(assert (=> (= result25 true) (= o139 (us_split_fields1 o138))))
(assert (=> (= result25 true) (= o140 (rec__tree_model__path_type__a o139))))
(assert (=> (= result25 true) (= (oeq o147 o150) true)))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))
(assert (and (= temp___1474 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1474 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1474 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1474 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1474 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1474 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1474 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1474 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1474 j2)))) true)) (= j2 i15))))))))))))))
(assert (= o160 (select temp___1474 ki3)))
(assert (= o161 (us_split_fields1 o160)))
(assert (= result30 (rec__tree_model__path_type__k o161)))
(assert (=> (= result30 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))
(assert (=> (= result30 true) (and (= temp___1475 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1475 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1475 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1475 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1475 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1475 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1475 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1475 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1475 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result30 true) (= o156 (select temp___1475 ki3))))
(assert (=> (= result30 true) (= o157 (us_split_fields1 o156))))
(assert (=> (= result30 true) (= o158 (rec__tree_model__path_type__a o157))))
(assert (=> (= result30 true) (and (= o159 (length o158)) (and (in_range5 o159) (<= (+ 0 o159) 2147483647)))))
(assert (=> (= result30 true) (= result29 (ite (= o159 n2) true false))))
(assert (=> (not (= result30 true)) (= result29 false)))
(assert (=> (= result29 true) (and (= o152 v) (in_range1 v))))
(assert (=> (= result29 true) (= (tree_structure (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))
(assert (=> (= result29 true) (and (= o153 v) (in_range1 v))))
(assert (=> (= result29 true) (and (= temp___1476 (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) o153)) (and (dynamic_invariant3 temp___1476 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 o153))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1476 o153)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 o153)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 i15))) true) (not (= i15 o153))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1476 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1476 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1476 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1476 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1476 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1476 j2)))) true)) (= j2 i15)))))))))))))))
(assert (=> (= result29 true) (= o154 (select temp___1476 ki3))))
(assert (=> (= result29 true) (= o155 (us_split_fields1 o154))))
(assert (=> (= result29 true) (= o162 (rec__tree_model__path_type__k o155))))
(assert (=> (not (= result29 true)) (= o162 false)))
(assert (= result28 (ite (and (= o162 true) (not (= ki3 v))) true false)))
(assert (= result28 true))
(assert (and (= o185 (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f__split_fields1 ki3))))) (in_range4 (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select f__split_fields1 ki3)))))))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))
(assert (and (= temp___1485 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1485 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1485 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1485 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1485 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1485 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1485 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1485 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1485 j2)))) true)) (= j2 i15))))))))))))))
(assert (and (<= 1 v) (<= v 100)))
(assert (= o181 v))
(assert (= o182 (select temp___1485 o181)))
(assert (= o183 (us_split_fields1 o182)))
(assert (= o184 (rec__tree_model__path_type__a o183)))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))
(assert (and (= temp___1484 (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)) (and (dynamic_invariant3 temp___1484 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1484 root)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 root)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 i15))) true) (not (= i15 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1484 (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1484 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1484 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1484 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1484 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1484 j2)))) true)) (= j2 i15))))))))))))))
(assert (= o178 (select temp___1484 ki3)))
(assert (= o179 (us_split_fields1 o178)))
(assert (= o180 (rec__tree_model__path_type__a o179)))
(assert (and (= o173 v) (in_range1 v)))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true))
(assert (and (= o174 v) (in_range1 v)))
(assert (and (= temp___1483 (model__ (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) o174)) (and (dynamic_invariant3 temp___1483 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 o174))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1483 o174)))) 0) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (not (= i15 o174)) (ite (and (not (= (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 i15))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 i15))) true)))))) (and (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 i15))) true) (not (= i15 o174))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___1483 (parent (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15)))) (position (mk___rep2 (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i15) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1483 i15)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___1483 i15)))) 0)))) (forall ((i15 Int)) (=> (and (<= 1 i15) (<= i15 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 i15))) true) (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___1483 j2))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___1483 i15))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___1483 j2)))) true)) (= j2 i15))))))))))))))
(assert (= o175 (select temp___1483 ki3)))
(assert (= o176 (us_split_fields1 o175)))
(assert (= o177 (rec__tree_model__path_type__a o176)))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))
(assert (not (= (valid_root (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) true)))
(check-sat)
(exit)
