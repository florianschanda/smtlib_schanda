(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tinteger_32B

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tinteger_32B, tinteger_32B -> bool

logic dummy : tinteger_32B

type tinteger_32B__ref = { tinteger_32B__content : tinteger_32B
}

function tinteger_32B__ref___projection(a: tinteger_32B__ref) : tinteger_32B =
  (a).tinteger_32B__content

type integer_32

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer_32, integer_32 -> bool

logic dummy1 : integer_32

type integer_32__ref = { integer_32__content : integer_32
}

function integer_32__ref___2__projection(a: integer_32__ref) : integer_32 =
  (a).integer_32__content

logic to_rep : integer_32 -> int

logic of_rep : int -> integer_32

axiom inversion_axiom :
  (forall x:integer_32 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer_32 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer_32) farray
}

logic slide : (int,integer_32) farray, int, int -> (int,integer_32) farray

axiom slide_eq :
  (forall a:(int,integer_32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer_32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer_32) farray, int, int, (int,integer_32) farray,
  int, int -> (int,integer_32) farray

axiom concat_def :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer_32, int -> (int,integer_32) farray

axiom singleton_def :
  (forall v:integer_32.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer_32) farray, int, int, (int,integer_32) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer_32) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer_32) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer_32) farray, int, int, (int,integer_32) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic x : (int,integer_32) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (int,integer_32) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic sum : (int,integer_32) farray

logic i : int

logic langley__add__result : (int,integer_32) farray

logic o : int

logic o1 : integer_32

logic o2 : (int,integer_32) farray

logic o3 : int

logic o4 : integer_32

logic o5 : (int,integer_32) farray

logic o6 : int

logic o7 : integer_32

logic o8 : (int,integer_32) farray

logic o9 : int

logic o10 : integer_32

logic o11 : (int,integer_32) farray

logic o12 : int

logic o13 : integer_32

logic o14 : (int,integer_32) farray

logic o15 : int

logic o16 : integer_32

logic o17 : (int,integer_32) farray

logic o18 : int

logic o19 : integer_32

logic o20 : (int,integer_32) farray

logic o21 : int

logic o22 : integer_32

logic o23 : (int,integer_32) farray

logic o24 : int

logic o25 : integer_32

logic o26 : (int,integer_32) farray

logic o27 : int

logic o28 : integer_32

logic o29 : (int,integer_32) farray

logic i1 : int

logic o30 : int

logic result : int

logic i2 : int

logic result1 : (int,integer_32) farray

logic sum1 : (int,integer_32) farray

logic result2 : int

logic i3 : int

logic result3 : (int,integer_32) farray

logic sum2 : (int,integer_32) farray

logic result4 : int

logic i4 : int

logic result5 : (int,integer_32) farray

logic sum3 : (int,integer_32) farray

logic result6 : int

logic i5 : int

logic result7 : (int,integer_32) farray

logic sum4 : (int,integer_32) farray

logic result8 : int

logic i6 : int

logic result9 : (int,integer_32) farray

logic sum5 : (int,integer_32) farray

logic result10 : int

logic i7 : int

logic result11 : (int,integer_32) farray

logic sum6 : (int,integer_32) farray

logic result12 : int

logic i8 : int

logic result13 : (int,integer_32) farray

logic sum7 : (int,integer_32) farray

logic result14 : int

logic i9 : int

logic result15 : (int,integer_32) farray

logic sum8 : (int,integer_32) farray

logic result16 : int

logic i10 : int

logic result17 : (int,integer_32) farray

logic sum9 : (int,integer_32) farray

logic result18 : int

logic i11 : int

logic result19 : (int,integer_32) farray

logic sum10 : (int,integer_32) farray

logic result20 : (int,integer_32) farray

logic langley__add__result1 : (int,integer_32) farray

logic langley__add__result2 : (int,integer_32) farray

logic langley__add__result3 : (int,integer_32) farray

logic sum11 : (int,integer_32) farray

logic i12 : int

logic langley__add__result4 : (int,integer_32) farray

logic sum12 : (int,integer_32) farray

logic i13 : int

logic langley__add__result5 : (int,integer_32) farray

axiom H :
  (forall i14:int. (((0 <= i14) and (i14 <= 9)) ->
  ((((to_rep((x[i14])) <  1073741824) and
  ((- 1073741824) <  to_rep((x[i14])))) and
  (to_rep((y[i14])) <  1073741824)) and
  ((- 1073741824) <  to_rep((y[i14]))))))

axiom H1 : (result = i)

axiom H2 : (i2 = 0)

axiom H3 : ((o = (to_rep((x[i2])) + to_rep((y[i2])))) and
  in_range1((to_rep((x[i2])) + to_rep((y[i2])))))

axiom H4 : (to_rep(o1) = o)

axiom H5 : (o2 = (sum[i2 <- o1]))

axiom H6 : (result1 = sum)

axiom H7 : (sum1 = o2)

axiom H8 : (i2 = result2)

axiom H9 : (i3 = 1)

axiom H10 : ((o3 = (to_rep((x[i3])) + to_rep((y[i3])))) and
  in_range1((to_rep((x[i3])) + to_rep((y[i3])))))

axiom H11 : (to_rep(o4) = o3)

axiom H12 : (o5 = (sum1[i3 <- o4]))

axiom H13 : (sum1 = result3)

axiom H14 : (sum2 = o5)

axiom H15 : (i3 = result4)

axiom H16 : (i4 = 2)

axiom H17 : ((o6 = (to_rep((x[i4])) + to_rep((y[i4])))) and
  in_range1((to_rep((x[i4])) + to_rep((y[i4])))))

axiom H18 : (to_rep(o7) = o6)

axiom H19 : (o8 = (sum2[i4 <- o7]))

axiom H20 : (sum2 = result5)

axiom H21 : (sum3 = o8)

axiom H22 : (i4 = result6)

axiom H23 : (i5 = 3)

axiom H24 : ((o9 = (to_rep((x[i5])) + to_rep((y[i5])))) and
  in_range1((to_rep((x[i5])) + to_rep((y[i5])))))

axiom H25 : (to_rep(o10) = o9)

axiom H26 : (o11 = (sum3[i5 <- o10]))

axiom H27 : (sum3 = result7)

axiom H28 : (sum4 = o11)

axiom H29 : (i5 = result8)

axiom H30 : (i6 = 4)

axiom H31 : ((o12 = (to_rep((x[i6])) + to_rep((y[i6])))) and
  in_range1((to_rep((x[i6])) + to_rep((y[i6])))))

axiom H32 : (to_rep(o13) = o12)

axiom H33 : (o14 = (sum4[i6 <- o13]))

axiom H34 : (sum4 = result9)

axiom H35 : (sum5 = o14)

axiom H36 : (i6 = result10)

axiom H37 : (i7 = 5)

axiom H38 : ((o15 = (to_rep((x[i7])) + to_rep((y[i7])))) and
  in_range1((to_rep((x[i7])) + to_rep((y[i7])))))

axiom H39 : (to_rep(o16) = o15)

axiom H40 : (o17 = (sum5[i7 <- o16]))

axiom H41 : (sum5 = result11)

axiom H42 : (sum6 = o17)

axiom H43 : (i7 = result12)

axiom H44 : (i8 = 6)

axiom H45 : ((o18 = (to_rep((x[i8])) + to_rep((y[i8])))) and
  in_range1((to_rep((x[i8])) + to_rep((y[i8])))))

axiom H46 : (to_rep(o19) = o18)

axiom H47 : (o20 = (sum6[i8 <- o19]))

axiom H48 : (sum6 = result13)

axiom H49 : (sum7 = o20)

axiom H50 : (i8 = result14)

axiom H51 : (i9 = 7)

axiom H52 : ((o21 = (to_rep((x[i9])) + to_rep((y[i9])))) and
  in_range1((to_rep((x[i9])) + to_rep((y[i9])))))

axiom H53 : (to_rep(o22) = o21)

axiom H54 : (o23 = (sum7[i9 <- o22]))

axiom H55 : (sum7 = result15)

axiom H56 : (sum8 = o23)

axiom H57 : (i9 = result16)

axiom H58 : (i10 = 8)

axiom H59 : ((o24 = (to_rep((x[i10])) + to_rep((y[i10])))) and
  in_range1((to_rep((x[i10])) + to_rep((y[i10])))))

axiom H60 : (to_rep(o25) = o24)

axiom H61 : (o26 = (sum8[i10 <- o25]))

axiom H62 : (sum8 = result17)

axiom H63 : (sum9 = o26)

axiom H64 : (result18 = i10)

axiom H65 : (i11 = 9)

axiom H66 : ((o27 = (to_rep((x[i11])) + to_rep((y[i11])))) and
  in_range1((to_rep((x[i11])) + to_rep((y[i11])))))

axiom H67 : (to_rep(o28) = o27)

axiom H68 : (o29 = (sum9[i11 <- o28]))

axiom H69 : (result19 = sum9)

axiom H70 : (sum10 = o29)

axiom H71 : (langley__add__result2 = langley__add__result1)

axiom H72 : (langley__add__result3 = langley__add__result1)

axiom H73 : (result20 = langley__add__result)

axiom H74 : (langley__add__result1 = sum10)

axiom H75 : (langley__add__result4 = langley__add__result2)

axiom H76 : (i12 = i11)

axiom H77 : (sum11 = sum10)

axiom H78 : (langley__add__result5 = langley__add__result3)

axiom H79 : (i13 = i11)

axiom H80 : (sum12 = sum10)

axiom H81 : (0 <= i1)

axiom H82 : (i1 <= 9)

 (* File "langley.adb", line 3, characters 0-0 *)
goal WP_parameter_def : in_range1((to_rep((x[i1])) + to_rep((y[i1]))))
