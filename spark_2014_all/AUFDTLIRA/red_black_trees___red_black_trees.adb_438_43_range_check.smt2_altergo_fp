(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type index_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : extended_index_type, extended_index_type -> bool

logic dummy2 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep

logic dummy5 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq7 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type set__ref = { set__content : us_rep2
}

function set__ref___projection(a: set__ref) : us_rep2 = (a).set__content

logic oeq : us_rep2, us_rep2 -> bool

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic ole : us_rep2, us_rep2 -> bool

logic ole__function_guard : bool, us_rep2, us_rep2 -> prop

axiom oeq__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [oeq(left, right)]. ((oeq(left,
  right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

type value_set__ref = { value_set__content : us_rep2
}

function value_set__ref___projection(a: value_set__ref) : us_rep2 =
  (a).value_set__content

logic is_add__2 : us_rep2, int, us_rep2 -> bool

logic is_add__2__function_guard : bool, us_rep2, int, us_rep2 -> prop

logic contains : us_rep2, int -> bool

logic contains__function_guard : bool, us_rep2, int -> prop

logic included_except : us_rep2, us_rep2, int -> bool

logic included_except__function_guard : bool, us_rep2, us_rep2, int -> prop

axiom is_add__2__post_axiom : true

axiom is_add__2__def_axiom :
  (forall s1:us_rep2. forall s2:us_rep2.
  (forall e:int [is_add__2(s1, e, s2)]. ((is_add__2(s1, e, s2) = true) <->
  ((((not (contains(s1, e) = true)) and (contains(s2, e) = true)) and
  (ole(s1, s2) = true)) and (included_except(s2, s1, e) = true)))))

type position_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : position_type, position_type -> bool

logic dummy7 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep3, us_rep3 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq10(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq10(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size3({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment3({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy8 : extended_index_type

logic dummy9 : extended_index_type

logic dummy10 : extended_index_type

logic dummy11 : position_type

type cell__ref = { cell__content : us_rep3
}

function cell__ref___projection(a: cell__ref) : us_rep3 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep3) farray
}

logic slide1 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq1 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq11 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy12 : (int,us_rep3) farray

logic value__size4 : int

logic object__size4 : (int,us_rep3) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep3) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,us_rep3) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,us_rep3) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep3) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,us_rep3) farray. (0 <= object__alignment4(a)))

logic user_eq8 : (int,us_rep3) farray, (int,us_rep3) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep3) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep3) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep4 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep4) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep4, us_rep4 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq12(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:extended_index_type. forall a1:(int,us_rep3) farray.
  (0 <= object__size5({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:extended_index_type. forall a1:(int,us_rep3) farray.
  (0 <= object__alignment5({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq9 : us_rep4, us_rep4 -> bool

logic dummy13 : extended_index_type

logic dummy14 : (int,us_rep3) farray

type forest__ref = { forest__content : us_rep4
}

function forest__ref___projection(a: forest__ref) : us_rep4 =
  (a).forest__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : natural, int -> (int,natural) farray

axiom singleton_def2 :
  (forall v:natural.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq13 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq13(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq13(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq13(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic dummy15 : (int,natural) farray

logic value__size6 : int

logic object__size6 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,natural) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__alignment6(a)))

logic user_eq10 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields6 = { rec__search_trees__search_tree__root :
extended_index_type; rec__search_trees__search_tree__struct : us_rep4;
rec__search_trees__search_tree__values : (int,natural) farray
}

function us_split_fields_Root__projection(a: us_split_fields6) : extended_index_type =
  (a).rec__search_trees__search_tree__root

function us_split_fields_Struct__projection(a: us_split_fields6) : us_rep4 =
  (a).rec__search_trees__search_tree__struct

function us_split_fields_Values__projection(a: us_split_fields6) : (int,natural) farray =
  (a).rec__search_trees__search_tree__values

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep5 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep5) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq14 : us_rep5, us_rep5 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq14(a, b)].
  (((((to_rep(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq12(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq13(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true)) -> (bool_eq14(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq12(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq13(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true))) -> (bool_eq14(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep5 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep5 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  (0 <= object__size7({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  (0 <= object__alignment7({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

logic search_trees__search_tree__root__first__bit : int

logic search_trees__search_tree__root__last__bit : int

logic search_trees__search_tree__root__position : int

axiom search_trees__search_tree__root__first__bit_axiom :
  (0 <= search_trees__search_tree__root__first__bit)

axiom search_trees__search_tree__root__last__bit_axiom :
  (search_trees__search_tree__root__first__bit <  search_trees__search_tree__root__last__bit)

axiom search_trees__search_tree__root__position_axiom :
  (0 <= search_trees__search_tree__root__position)

logic search_trees__search_tree__struct__first__bit : int

logic search_trees__search_tree__struct__last__bit : int

logic search_trees__search_tree__struct__position : int

axiom search_trees__search_tree__struct__first__bit_axiom :
  (0 <= search_trees__search_tree__struct__first__bit)

axiom search_trees__search_tree__struct__last__bit_axiom :
  (search_trees__search_tree__struct__first__bit <  search_trees__search_tree__struct__last__bit)

axiom search_trees__search_tree__struct__position_axiom :
  (0 <= search_trees__search_tree__struct__position)

logic search_trees__search_tree__values__first__bit : int

logic search_trees__search_tree__values__last__bit : int

logic search_trees__search_tree__values__position : int

axiom search_trees__search_tree__values__first__bit_axiom :
  (0 <= search_trees__search_tree__values__first__bit)

axiom search_trees__search_tree__values__last__bit_axiom :
  (search_trees__search_tree__values__first__bit <  search_trees__search_tree__values__last__bit)

axiom search_trees__search_tree__values__position_axiom :
  (0 <= search_trees__search_tree__values__position)

logic user_eq11 : us_rep5, us_rep5 -> bool

logic dummy16 : extended_index_type

logic dummy17 : extended_index_type

logic dummy18 : (int,us_rep3) farray

logic dummy19 : (int,natural) farray

type search_tree__ref = { search_tree__content : us_rep5
}

function search_tree__ref___projection(a: search_tree__ref) : us_rep5 =
  (a).search_tree__content

logic size : us_rep5 -> int

logic size__function_guard : int, us_rep5 -> prop

logic size1 : us_rep4 -> int

logic size__function_guard1 : int, us_rep4 -> prop

logic valid_root : us_rep4, int -> bool

logic valid_root__function_guard : bool, us_rep4, int -> prop

logic tree_structure : us_rep4 -> bool

logic tree_structure__function_guard : bool, us_rep4 -> prop

logic ordered_leafs : us_rep4, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep4, int,
  (int,natural) farray -> prop

logic temp___390 : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___392:int.
  (forall temp___393:int.
  ((temp___390(temp___392)[temp___393]) = of_rep2(temp___392))))

axiom size__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> in_range3(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom size__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }))))

logic root : us_rep5 -> int

logic root__function_guard : int, us_rep5 -> prop

axiom root__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) -> in_range2(root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom root__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (root({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = to_rep(t))))

logic parent : us_rep5, int -> int

logic parent__function_guard : int, us_rep5, int -> prop

logic parent1 : us_rep4, int -> int

logic parent__function_guard1 : int, us_rep4, int -> prop

axiom parent__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) -> (((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (parent({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0)) and
  in_range3(parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i))))))

axiom parent__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) -> (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

type direction

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq12 : direction, direction -> bool

logic dummy20 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic position : us_rep4, int -> int

logic position__function_guard : int, us_rep4, int -> prop

logic position1 : us_rep5, int -> int

logic position__function_guard1 : int, us_rep5, int -> prop

axiom position__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and (not (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0))) ->
  in_range5(position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)))))

axiom position__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) -> (position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = position({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

logic model__ : us_rep5 -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep5 -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic model__1 : us_rep4, int -> (int,us_rep1) farray

logic model____function_guard1 : (int,us_rep1) farray, us_rep4, int -> prop

axiom model____post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) ->
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))

axiom model____def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep(t)))))

logic peek : us_rep5, int, int -> int

logic peek__function_guard : int, us_rep5, int, int -> prop

logic peek1 : us_rep4, int, int -> int

logic peek__function_guard1 : int, us_rep4, int, int -> prop

axiom peek__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)]. ((((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and in_range5(d)) and ((not (size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0)) and ((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
  in_range3(peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)))))

axiom peek__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and in_range5(d)) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d) = peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i, d)))))

logic values : us_rep5 -> us_rep2

logic values__function_guard : us_rep2, us_rep5 -> prop

axiom values__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [values({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> ((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (is_empty(values({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })) = true))))

type color_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq13 : color_type, color_type -> bool

logic dummy21 : color_type

type color_type__ref = { color_type__content : color_type
}

function color_type__ref___projection(a: color_type__ref) : color_type =
  (a).color_type__content

logic to_rep3 : color_type -> int

logic of_rep3 : int -> color_type

axiom inversion_axiom3 :
  (forall x:color_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:color_type [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref3 = { map__content3 : (int,color_type) farray
}

logic slide3 : (int,color_type) farray, int, int -> (int,color_type) farray

axiom slide_eq3 :
  (forall a:(int,color_type) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,color_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> (int,color_type) farray

axiom concat_def3 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : color_type, int -> (int,color_type) farray

axiom singleton_def3 :
  (forall v:color_type.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq17 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> bool

axiom bool_eq_def14 :
  (forall a:(int,color_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,color_type) farray. forall b__first:int. forall b__last:int
  [bool_eq17(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)]))))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))))))))

logic compare1 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq17(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq17(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq17(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

logic dummy22 : (int,color_type) farray

logic value__size8 : int

logic object__size8 : (int,color_type) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,color_type) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,color_type) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,color_type) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,color_type) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,color_type) farray. (0 <= object__alignment8(a)))

logic user_eq14 : (int,color_type) farray, (int,color_type) farray -> bool

type us_split_fields8 = { rec__red_black_trees__rbt__struct : us_rep5;
rec__red_black_trees__rbt__color : (int,color_type) farray
}

function us_split_fields_Struct__2__projection(a: us_split_fields8) : us_rep5 =
  (a).rec__red_black_trees__rbt__struct

function us_split_fields_Color__projection(a: us_split_fields8) : (int,color_type) farray =
  (a).rec__red_black_trees__rbt__color

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep6 = { us_split_fields9 : us_split_fields8
}

function us_rep___5__projection(a: us_rep6) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq18 : us_rep6, us_rep6 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq18(a, b)].
  ((((bool_eq14(((a).us_split_fields9).rec__red_black_trees__rbt__struct,
  ((b).us_split_fields9).rec__red_black_trees__rbt__struct) = true) and
  (bool_eq17(((a).us_split_fields9).rec__red_black_trees__rbt__color, 1, 100,
  ((b).us_split_fields9).rec__red_black_trees__rbt__color, 1,
  100) = true)) -> (bool_eq18(a, b) = true)) and
  ((not ((bool_eq14(((a).us_split_fields9).rec__red_black_trees__rbt__struct,
  ((b).us_split_fields9).rec__red_black_trees__rbt__struct) = true) and
  (bool_eq17(((a).us_split_fields9).rec__red_black_trees__rbt__color, 1, 100,
  ((b).us_split_fields9).rec__red_black_trees__rbt__color, 1,
  100) = true))) -> (bool_eq18(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  forall a4:(int,color_type) farray. (0 <= object__size9({ us_split_fields9 =
  { rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } };
  rec__red_black_trees__rbt__color = a4 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  forall a4:(int,color_type) farray. (0 <= object__alignment9({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } };
  rec__red_black_trees__rbt__color = a4 } })))

logic red_black_trees__rbt__struct__first__bit : int

logic red_black_trees__rbt__struct__last__bit : int

logic red_black_trees__rbt__struct__position : int

axiom red_black_trees__rbt__struct__first__bit_axiom :
  (0 <= red_black_trees__rbt__struct__first__bit)

axiom red_black_trees__rbt__struct__last__bit_axiom :
  (red_black_trees__rbt__struct__first__bit <  red_black_trees__rbt__struct__last__bit)

axiom red_black_trees__rbt__struct__position_axiom :
  (0 <= red_black_trees__rbt__struct__position)

logic red_black_trees__rbt__color__first__bit : int

logic red_black_trees__rbt__color__last__bit : int

logic red_black_trees__rbt__color__position : int

axiom red_black_trees__rbt__color__first__bit_axiom :
  (0 <= red_black_trees__rbt__color__first__bit)

axiom red_black_trees__rbt__color__last__bit_axiom :
  (red_black_trees__rbt__color__first__bit <  red_black_trees__rbt__color__last__bit)

axiom red_black_trees__rbt__color__position_axiom :
  (0 <= red_black_trees__rbt__color__position)

logic user_eq15 : us_rep6, us_rep6 -> bool

logic dummy23 : extended_index_type

logic dummy24 : extended_index_type

logic dummy25 : (int,us_rep3) farray

logic dummy26 : (int,natural) farray

logic dummy27 : (int,color_type) farray

type rbt__ref = { rbt__content : us_rep6
}

function rbt__ref___projection(a: rbt__ref) : us_rep6 = (a).rbt__content

logic invariant__ : us_rep6 -> bool

logic invariant____function_guard : bool, us_rep6 -> prop

logic temp___502 : int -> (int,color_type) farray

axiom def_axiom1 :
  (forall temp___504:int.
  (forall temp___505:int.
  ((temp___502(temp___504)[temp___505]) = of_rep3(temp___504))))

logic size2 : us_rep6 -> int

logic size__function_guard2 : int, us_rep6 -> prop

axiom size__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [size2({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true)) -> in_range3(size2({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }))))

axiom size__def_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [size2({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (size2({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

logic values1 : us_rep6 -> us_rep2

logic values__function_guard1 : us_rep2, us_rep6 -> prop

axiom values__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true)) -> ((size2({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = 0) -> (is_empty(values1({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })) = true))))

axiom values__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

logic contains1 : us_rep6, int -> bool

logic contains__function_guard1 : bool, us_rep6, int -> prop

logic contains2 : us_rep5, int -> bool

logic contains__function_guard2 : bool, us_rep5, int -> prop

axiom contains__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall v:int [contains1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range1(v)) and (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true)) -> ((contains1({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v) = true) <->
  (contains(values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }), v) = true)))))

axiom contains__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall v:int [contains1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v)]. ((contains1({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v) = true) <-> (contains2({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, v) = true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic color : us_rep6, int -> int

logic color__function_guard : int, us_rep6, int -> prop

axiom color__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall i:int [color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range3(i)) -> in_range6(color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i)))))

axiom color__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall i:int [color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range3(i)) -> (((i = 0) -> (color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i) = 0)) and ((not (i = 0)) ->
  (color({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i) = to_rep3((t4[i]))))))))

logic same_nb_blacks : us_rep6 -> bool

logic same_nb_blacks__function_guard : bool, us_rep6 -> prop

type us_split_fields10 = { rec__red_black_trees__black_count__status : bool;
rec__red_black_trees__black_count__depth : extended_index_type;
rec__red_black_trees__black_count__count : extended_index_type
}

function us_split_fields_Status__projection(a: us_split_fields10) : bool =
  (a).rec__red_black_trees__black_count__status

function us_split_fields_Depth__projection(a: us_split_fields10) : extended_index_type =
  (a).rec__red_black_trees__black_count__depth

function us_split_fields_Count__projection(a: us_split_fields10) : extended_index_type =
  (a).rec__red_black_trees__black_count__count

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep7 = { us_split_fields11 : us_split_fields10
}

function us_rep___6__projection(a: us_rep7) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq19 : us_rep7, us_rep7 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq19(a, b)].
  (((((((a).us_split_fields11).rec__red_black_trees__black_count__status = ((b).us_split_fields11).rec__red_black_trees__black_count__status) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__depth) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__depth))) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__count))) ->
  (bool_eq19(a, b) = true)) and
  ((not (((((a).us_split_fields11).rec__red_black_trees__black_count__status = ((b).us_split_fields11).rec__red_black_trees__black_count__status) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__depth) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__depth))) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__count)))) ->
  (bool_eq19(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep7 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep7 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:bool. forall a1:extended_index_type.
  forall a2:extended_index_type. (0 <= object__size10({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = a;
  rec__red_black_trees__black_count__depth = a1;
  rec__red_black_trees__black_count__count = a2 } })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:bool. forall a1:extended_index_type.
  forall a2:extended_index_type. (0 <= object__alignment10({
  us_split_fields11 = { rec__red_black_trees__black_count__status = a;
  rec__red_black_trees__black_count__depth = a1;
  rec__red_black_trees__black_count__count = a2 } })))

logic red_black_trees__black_count__status__first__bit : int

logic red_black_trees__black_count__status__last__bit : int

logic red_black_trees__black_count__status__position : int

axiom red_black_trees__black_count__status__first__bit_axiom :
  (0 <= red_black_trees__black_count__status__first__bit)

axiom red_black_trees__black_count__status__last__bit_axiom :
  (red_black_trees__black_count__status__first__bit <  red_black_trees__black_count__status__last__bit)

axiom red_black_trees__black_count__status__position_axiom :
  (0 <= red_black_trees__black_count__status__position)

logic red_black_trees__black_count__depth__first__bit : int

logic red_black_trees__black_count__depth__last__bit : int

logic red_black_trees__black_count__depth__position : int

axiom red_black_trees__black_count__depth__first__bit_axiom :
  (0 <= red_black_trees__black_count__depth__first__bit)

axiom red_black_trees__black_count__depth__last__bit_axiom :
  (red_black_trees__black_count__depth__first__bit <  red_black_trees__black_count__depth__last__bit)

axiom red_black_trees__black_count__depth__position_axiom :
  (0 <= red_black_trees__black_count__depth__position)

logic red_black_trees__black_count__count__first__bit : int

logic red_black_trees__black_count__count__last__bit : int

logic red_black_trees__black_count__count__position : int

axiom red_black_trees__black_count__count__first__bit_axiom :
  (0 <= red_black_trees__black_count__count__first__bit)

axiom red_black_trees__black_count__count__last__bit_axiom :
  (red_black_trees__black_count__count__first__bit <  red_black_trees__black_count__count__last__bit)

axiom red_black_trees__black_count__count__position_axiom :
  (0 <= red_black_trees__black_count__count__position)

logic user_eq16 : us_rep7, us_rep7 -> bool

logic dummy28 : bool

logic dummy29 : extended_index_type

logic dummy30 : extended_index_type

type black_count__ref = { black_count__content : us_rep7
}

function black_count__ref___projection(a: black_count__ref) : us_rep7 =
  (a).black_count__content

type map__ref4 = { map__content4 : (int,us_rep7) farray
}

logic slide4 : (int,us_rep7) farray, int, int -> (int,us_rep7) farray

axiom slide_eq4 :
  (forall a:(int,us_rep7) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep7) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,us_rep7) farray, int, int, (int,us_rep7) farray, int,
  int -> (int,us_rep7) farray

axiom concat_def4 :
  (forall a:(int,us_rep7) farray. forall b:(int,us_rep7) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : us_rep7, int -> (int,us_rep7) farray

axiom singleton_def4 :
  (forall v1:bool. forall v2:extended_index_type.
  forall v3:extended_index_type.
  (forall i:int [(singleton4({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = v1;
  rec__red_black_trees__black_count__depth = v2;
  rec__red_black_trees__black_count__count = v3 } }, i)[i])]. ((singleton4({
  us_split_fields11 = { rec__red_black_trees__black_count__status = v1;
  rec__red_black_trees__black_count__depth = v2;
  rec__red_black_trees__black_count__count = v3 } }, i)[i]) = {
  us_split_fields11 = { rec__red_black_trees__black_count__status = v1;
  rec__red_black_trees__black_count__depth = v2;
  rec__red_black_trees__black_count__count = v3 } })))

logic bool_eq20 : (int,us_rep7) farray, int, int, (int,us_rep7) farray, int,
  int -> bool

axiom bool_eq_def17 :
  (forall a:(int,us_rep7) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep7) farray. forall b__first:int. forall b__last:int
  [bool_eq20(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_136:int. ((((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) and (bool_eq19((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true)) or
  (not ((a__first <= temp___idx_136) and (temp___idx_136 <= a__last)))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) -> (bool_eq19((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true))))) -> (bool_eq20(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,us_rep7) farray. forall b:(int,us_rep7) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq20(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) -> (bool_eq19((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true)))))))

logic nb_blacks : us_rep6 -> (int,us_rep7) farray

logic nb_blacks__function_guard : (int,us_rep7) farray, us_rep6 -> prop

axiom same_nb_blacks__post_axiom : true

axiom same_nb_blacks__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((same_nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true) <-> ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) or
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__status = true)))))))

logic eq : us_rep7, us_rep7 -> bool

logic eq__function_guard : bool, us_rep7, us_rep7 -> prop

axiom eq__post_axiom : true

axiom eq__def_axiom :
  (forall x:bool. forall x1:extended_index_type.
  forall x2:extended_index_type. forall y:bool.
  forall y1:extended_index_type. forall y2:extended_index_type [eq({
  us_split_fields11 = { rec__red_black_trees__black_count__status = x;
  rec__red_black_trees__black_count__depth = x1;
  rec__red_black_trees__black_count__count = x2 } }, { us_split_fields11 = {
  rec__red_black_trees__black_count__status = y;
  rec__red_black_trees__black_count__depth = y1;
  rec__red_black_trees__black_count__count = y2 } })]. ((eq({
  us_split_fields11 = { rec__red_black_trees__black_count__status = x;
  rec__red_black_trees__black_count__depth = x1;
  rec__red_black_trees__black_count__count = x2 } }, { us_split_fields11 = {
  rec__red_black_trees__black_count__status = y;
  rec__red_black_trees__black_count__depth = y1;
  rec__red_black_trees__black_count__count = y2 } }) = true) <->
  (((x = true) <-> (y = true)) and (to_rep(x2) = to_rep(y2)))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom nb_blacks__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) ->
  ((bool_eq19((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[0]), { us_split_fields11 = {
  rec__red_black_trees__black_count__status = of_int(1);
  rec__red_black_trees__black_count__depth = of_rep(0);
  rec__red_black_trees__black_count__count = of_rep(0) } }) = true) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__status = true) <->
  (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  1)])).us_split_fields11).rec__red_black_trees__black_count__count))) and
  (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__depth) = (1 + max(to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth),
  to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth))))) and
  (((to_rep3((t4[i])) = 0) -> (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__count) = (1 + to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count)))) and
  ((not (to_rep3((t4[i])) = 0)) -> (to_rep((((nb_blacks({ us_split_fields9 =
  { rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__count) = (0 + to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c61b : extended_index_type

logic c61b1 : extended_index_type

logic c61b2 : (int,us_rep3) farray

logic c61b3 : (int,natural) farray

logic c61b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c62b : extended_index_type

logic c62b1 : extended_index_type

logic c62b2 : (int,us_rep3) farray

logic c62b3 : (int,natural) farray

logic c62b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic c67b : extended_index_type

logic c67b1 : extended_index_type

logic c67b2 : (int,us_rep3) farray

logic c67b3 : (int,natural) farray

logic c67b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic c68b : extended_index_type

logic c68b1 : extended_index_type

logic c68b2 : (int,us_rep3) farray

logic c68b3 : (int,natural) farray

logic c68b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic c75b : extended_index_type

logic c75b1 : extended_index_type

logic c75b2 : (int,us_rep3) farray

logic c75b3 : (int,natural) farray

logic c75b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS11 : int

logic c76b : extended_index_type

logic c76b1 : extended_index_type

logic c76b2 : (int,us_rep3) farray

logic c76b3 : (int,natural) farray

logic c76b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS12 : int

logic c77b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic c81b : extended_index_type

logic c81b1 : extended_index_type

logic c81b2 : (int,us_rep3) farray

logic c81b3 : (int,natural) farray

logic c81b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS15 : int

logic c82b : extended_index_type

logic c82b1 : extended_index_type

logic c82b2 : (int,us_rep3) farray

logic c82b3 : (int,natural) farray

logic c82b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c83b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic c87b : extended_index_type

logic c87b1 : extended_index_type

logic c87b2 : (int,us_rep3) farray

logic c87b3 : (int,natural) farray

logic c87b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS20 : int

logic c88b : extended_index_type

logic c88b1 : extended_index_type

logic c88b2 : (int,us_rep3) farray

logic c88b3 : (int,natural) farray

logic c88b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS21 : int

logic c89b : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic y1 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic c94b : extended_index_type

logic c94b1 : extended_index_type

logic c94b2 : (int,us_rep3) farray

logic c94b3 : (int,natural) farray

logic c94b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS25 : int

logic c95b : extended_index_type

logic c95b1 : extended_index_type

logic c95b2 : (int,us_rep3) farray

logic c95b3 : (int,natural) farray

logic c95b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS26 : int

logic c96b : int

logic attr__ATTRIBUTE_ADDRESS27 : int

logic attr__ATTRIBUTE_ADDRESS28 : int

logic c100b : extended_index_type

logic c100b1 : extended_index_type

logic c100b2 : (int,us_rep3) farray

logic c100b3 : (int,natural) farray

logic c100b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS29 : int

logic c101b : extended_index_type

logic c101b1 : extended_index_type

logic c101b2 : (int,us_rep3) farray

logic c101b3 : (int,natural) farray

logic c101b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS30 : int

logic c102b : int

logic attr__ATTRIBUTE_ADDRESS31 : int

logic y2 : int

logic attr__ATTRIBUTE_ADDRESS32 : int

logic attr__ATTRIBUTE_ADDRESS33 : int

logic c106b : extended_index_type

logic c106b1 : extended_index_type

logic c106b2 : (int,us_rep3) farray

logic c106b3 : (int,natural) farray

logic c106b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS34 : int

logic c107b : extended_index_type

logic c107b1 : extended_index_type

logic c107b2 : (int,us_rep3) farray

logic c107b3 : (int,natural) farray

logic c107b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS35 : int

logic c108b : int

logic attr__ATTRIBUTE_ADDRESS36 : int

logic y3 : int

logic attr__ATTRIBUTE_ADDRESS37 : int

logic attr__ATTRIBUTE_ADDRESS38 : int

logic c114b : extended_index_type

logic c114b1 : extended_index_type

logic c114b2 : (int,us_rep3) farray

logic c114b3 : (int,natural) farray

logic c114b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS39 : int

logic c115b : extended_index_type

logic c115b1 : extended_index_type

logic c115b2 : (int,us_rep3) farray

logic c115b3 : (int,natural) farray

logic c115b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS40 : int

logic attr__ATTRIBUTE_ADDRESS41 : int

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((invariant__({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true) <->
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((parent({
   us_split_fields7 = { rec__search_trees__search_tree__root = t;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
   rec__search_trees__search_tree__values = t3 } }, i) = 0) or
   (to_rep3((t4[parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
   rec__search_trees__search_tree__values = t3 } }, i)])) = 1)) ->
   (to_rep3((t4[i])) = 0)))) and
  (same_nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true))))

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type count_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y4:int [bool_eq21(x, y4)]. (((x = y4) ->
  (bool_eq21(x, y4) = true)) and ((not (x = y4)) -> (bool_eq21(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq17 : count_type, count_type -> bool

logic dummy31 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom contains__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall v1:int [contains2({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, v1)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range1(v1)) -> ((contains2({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, v1) = true) <->
  (contains(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }), v1) = true)))))

axiom ordered_leafs__post_axiom : true

axiom size__post_axiom2 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray [size1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range3(size1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) -> ((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i) -> (not (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true))))))

axiom parent__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) -> ((((valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true) -> (parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0)) and ((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) = 0) -> (parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0))) and in_range3(parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i))))))

axiom position__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) and (not (parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range5(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom peek__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int. forall d:int [peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) and in_range5(d)) -> (((((not (peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = 0)) -> ((position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = d) and (parent1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = i))) and ((peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d) = 0) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((parent1({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i) -> (not (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = d))))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, j) = i) and (position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, j) = d)) -> (peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = j))))) and in_range3(peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d))))))

axiom model____post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall root1:int [model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(root1)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1) = true)) -> ((((((model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)[root1])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[root1])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root1)) ->
   ((((not (parent1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root1)[parent1({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent1({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root1)[parent1({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root1))) -> (is_add((((model__1({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[parent1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root1)))) -> (length((((model__1({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

axiom tree_structure__post_axiom : true

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y4:int [bool_eq22(x, y4)]. (((x = y4) ->
  (bool_eq22(x, y4) = true)) and ((not (x = y4)) -> (bool_eq22(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq18 : extended_index, extended_index -> bool

logic dummy32 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range7(length(container))))

type element_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y4:int [bool_eq23(x, y4)]. (((x = y4) ->
  (bool_eq23(x, y4) = true)) and ((not (x = y4)) -> (bool_eq23(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq19 : element_type, element_type -> bool

logic dummy33 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position2:int [get(container, position2)].
  ((in_range8(position2) and ((1 <= position2) and
  (position2 <= (0 + length(container))))) -> in_range9(get(container,
  position2)))))

type element_type1

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y4:int [bool_eq24(x, y4)]. (((x = y4) ->
  (bool_eq24(x, y4) = true)) and ((not (x = y4)) -> (bool_eq24(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq20 : element_type1, element_type1 -> bool

logic dummy34 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom contains__post_axiom2 :
  (forall container:us_rep2.
  (forall item:int [contains(container, item)]. (in_range10(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range10(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  in_range7(length1(container)))

axiom ole__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range10(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range10(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length1(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep2. forall right:us_rep2.
  (forall item:int [included_except(left, right, item)]. (in_range10(item) ->
  ((included_except(left, right, item) = true) <->
  (forall e:int. ((in_range10(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

logic t__split_fields : extended_index_type

logic t__split_fields1 : extended_index_type

logic t__split_fields2 : (int,us_rep3) farray

logic t__split_fields3 : (int,natural) farray

logic t__split_fields4 : (int,color_type) farray

logic x : int

logic y4 : int

logic t_old__split_fields : extended_index_type

logic t_old__split_fields1 : extended_index_type

logic t_old__split_fields2 : (int,us_rep3) farray

logic t_old__split_fields3 : (int,natural) farray

logic t_old__split_fields4 : (int,color_type) farray

logic n : int

logic n1 : int

logic n2 : int

logic n3 : int

logic n4 : int

logic n5 : int

logic n6 : int

logic n7 : int

logic n8 : int

logic o : int

logic temp___587 : int

logic i : int

logic o1 : int

logic o2 : bool

logic temp___591 : (int,us_rep7) farray

logic o3 : bool

logic o4 : extended_index_type

logic o5 : extended_index_type

logic o6 : bool

logic o7 : extended_index_type

logic o8 : extended_index_type

logic o9 : extended_index_type

logic o10 : int

logic temp___590 : (int,us_rep1) farray

logic o11 : us_rep

logic o12 : bool

logic o13 : us_rep

logic o14 : bool

logic temp___588 : (int,us_rep7) farray

logic temp___589 : (int,us_rep7) farray

logic o15 : bool

logic o16 : extended_index_type

logic o17 : extended_index_type

logic o18 : color_type

logic o19 : int

logic o20 : (int,color_type) farray

logic o21 : extended_index_type

logic o22 : extended_index_type

logic o23 : (int,us_rep3) farray

logic o24 : (int,natural) farray

logic o25 : (int,color_type) farray

logic temp___604 : extended_index_type

logic temp___6041 : extended_index_type

logic temp___6042 : (int,us_rep3) farray

logic temp___6043 : (int,natural) farray

logic temp___6044 : (int,color_type) farray

logic o26 : int

logic temp___605 : int

logic i1 : int

logic o27 : int

logic o28 : bool

logic temp___609 : (int,us_rep7) farray

logic o29 : bool

logic o30 : extended_index_type

logic o31 : extended_index_type

logic o32 : bool

logic o33 : extended_index_type

logic o34 : extended_index_type

logic o35 : extended_index_type

logic o36 : int

logic temp___608 : (int,us_rep1) farray

logic o37 : us_rep

logic o38 : bool

logic o39 : us_rep

logic o40 : bool

logic temp___606 : (int,us_rep7) farray

logic temp___607 : (int,us_rep7) farray

logic o41 : bool

logic o42 : extended_index_type

logic o43 : extended_index_type

logic i2 : int

logic temp___622 : int

logic o44 : int

logic o45 : int

logic o46 : int

logic o47 : int

logic o48 : int

logic o49 : bool

logic temp___937 : int

logic temp___936 : extended_index_type

logic temp___9361 : extended_index_type

logic temp___9362 : (int,us_rep3) farray

logic temp___9363 : (int,natural) farray

logic temp___9364 : (int,color_type) farray

logic temp___933 : extended_index_type

logic temp___9331 : extended_index_type

logic temp___9332 : (int,us_rep3) farray

logic temp___9333 : (int,natural) farray

logic temp___9334 : (int,color_type) farray

logic temp___935 : int

logic us : int

logic temp___938 : int

logic temp___932 : int

logic temp___948 : us_rep2

logic o50 : int

logic temp___939 : (int,us_rep1) farray

logic o51 : int

logic i3 : int

logic temp___943 : int

logic o52 : int

logic o53 : int

logic o54 : int

logic o55 : int

logic o56 : int

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : int

logic o62 : int

logic o63 : int

logic o64 : color_type

logic o65 : int

logic o66 : (int,color_type) farray

logic o67 : extended_index_type

logic o68 : extended_index_type

logic o69 : (int,us_rep3) farray

logic o70 : (int,natural) farray

logic o71 : (int,color_type) farray

logic temp___892 : extended_index_type

logic temp___8921 : extended_index_type

logic temp___8922 : (int,us_rep3) farray

logic temp___8923 : (int,natural) farray

logic temp___8924 : (int,color_type) farray

logic o72 : int

logic temp___894 : int

logic o73 : color_type

logic o74 : int

logic o75 : (int,color_type) farray

logic o76 : extended_index_type

logic o77 : extended_index_type

logic o78 : (int,us_rep3) farray

logic o79 : (int,natural) farray

logic o80 : (int,color_type) farray

logic temp___896 : extended_index_type

logic temp___8961 : extended_index_type

logic temp___8962 : (int,us_rep3) farray

logic temp___8963 : (int,natural) farray

logic temp___8964 : (int,color_type) farray

logic o81 : int

logic temp___898 : int

logic o82 : color_type

logic o83 : int

logic o84 : (int,color_type) farray

logic o85 : extended_index_type

logic o86 : extended_index_type

logic o87 : (int,us_rep3) farray

logic o88 : (int,natural) farray

logic o89 : (int,color_type) farray

logic temp___900 : extended_index_type

logic temp___9001 : extended_index_type

logic temp___9002 : (int,us_rep3) farray

logic temp___9003 : (int,natural) farray

logic temp___9004 : (int,color_type) farray

logic o90 : int

logic o91 : int

logic o92 : int

logic o93 : int

logic red_black_trees__insert__L_8__C77b__assume : int

logic temp___908 : int

logic i4 : int

logic temp___915 : (int,us_rep7) farray

logic o94 : bool

logic o95 : extended_index_type

logic o96 : extended_index_type

logic o97 : bool

logic o98 : extended_index_type

logic o99 : extended_index_type

logic o100 : extended_index_type

logic o101 : int

logic temp___914 : (int,us_rep1) farray

logic o102 : us_rep

logic o103 : bool

logic o104 : us_rep

logic o105 : bool

logic o106 : int

logic temp___909 : (int,us_rep7) farray

logic temp___910 : (int,us_rep7) farray

logic o107 : bool

logic o108 : extended_index_type

logic o109 : extended_index_type

logic o110 : bool

logic o111 : extended_index_type

logic o112 : extended_index_type

logic o113 : extended_index_type

logic temp___911 : (int,us_rep7) farray

logic o114 : bool

logic o115 : extended_index_type

logic o116 : extended_index_type

logic o117 : bool

logic o118 : extended_index_type

logic o119 : extended_index_type

logic o120 : extended_index_type

logic o121 : int

logic o122 : int

logic o123 : int

logic o124 : bool

logic temp___912 : (int,us_rep7) farray

logic temp___913 : (int,us_rep7) farray

logic o125 : bool

logic o126 : extended_index_type

logic o127 : extended_index_type

logic temp___901 : (int,us_rep7) farray

logic o128 : bool

logic o129 : extended_index_type

logic o130 : extended_index_type

logic o131 : bool

logic o132 : extended_index_type

logic o133 : extended_index_type

logic o134 : extended_index_type

logic o135 : int

logic temp___902 : (int,us_rep7) farray

logic temp___904 : (int,us_rep7) farray

logic temp___905 : (int,us_rep7) farray

logic o136 : bool

logic o137 : extended_index_type

logic o138 : extended_index_type

logic o139 : bool

logic o140 : extended_index_type

logic o141 : extended_index_type

logic o142 : extended_index_type

logic o143 : int

logic o144 : int

logic o145 : int

logic o146 : int

logic o147 : int

logic o148 : int

logic o149 : int

logic o150 : int

logic red_black_trees__insert__L_8__C83b__assume : int

logic o151 : int

logic red_black_trees__insert__L_8__B84b__y__assume : int

logic temp___794 : int

logic i5 : int

logic temp___798 : (int,us_rep7) farray

logic o152 : bool

logic o153 : extended_index_type

logic o154 : extended_index_type

logic o155 : bool

logic o156 : extended_index_type

logic o157 : extended_index_type

logic o158 : extended_index_type

logic o159 : int

logic temp___797 : (int,us_rep1) farray

logic o160 : us_rep

logic o161 : bool

logic o162 : us_rep

logic o163 : bool

logic o164 : bool

logic temp___795 : (int,us_rep7) farray

logic temp___796 : (int,us_rep7) farray

logic o165 : bool

logic o166 : extended_index_type

logic o167 : extended_index_type

logic temp___809 : (int,us_rep7) farray

logic o168 : bool

logic o169 : extended_index_type

logic o170 : extended_index_type

logic o171 : bool

logic o172 : extended_index_type

logic o173 : extended_index_type

logic o174 : extended_index_type

logic o175 : int

logic temp___807 : (int,us_rep7) farray

logic temp___808 : (int,us_rep7) farray

logic o176 : bool

logic o177 : extended_index_type

logic o178 : extended_index_type

logic temp___784 : (int,us_rep7) farray

logic o179 : bool

logic o180 : extended_index_type

logic o181 : extended_index_type

logic o182 : bool

logic o183 : extended_index_type

logic o184 : extended_index_type

logic o185 : extended_index_type

logic o186 : int

logic temp___782 : (int,us_rep7) farray

logic temp___783 : (int,us_rep7) farray

logic o187 : bool

logic o188 : extended_index_type

logic o189 : extended_index_type

logic temp___790 : (int,us_rep7) farray

logic o190 : int

logic o191 : bool

logic o192 : extended_index_type

logic o193 : extended_index_type

logic o194 : bool

logic o195 : extended_index_type

logic o196 : extended_index_type

logic o197 : extended_index_type

logic o198 : int

logic temp___788 : (int,us_rep7) farray

logic temp___789 : (int,us_rep7) farray

logic o199 : int

logic o200 : bool

logic o201 : extended_index_type

logic o202 : extended_index_type

logic o203 : int

logic o204 : int

logic o205 : int

logic o206 : int

logic o207 : int

logic o208 : int

logic o209 : int

logic o210 : int

logic o211 : int

logic o212 : int

logic temp___817 : int

logic o213 : color_type

logic o214 : int

logic o215 : (int,color_type) farray

logic o216 : extended_index_type

logic o217 : extended_index_type

logic o218 : (int,us_rep3) farray

logic o219 : (int,natural) farray

logic o220 : (int,color_type) farray

logic temp___819 : extended_index_type

logic temp___8191 : extended_index_type

logic temp___8192 : (int,us_rep3) farray

logic temp___8193 : (int,natural) farray

logic temp___8194 : (int,color_type) farray

logic o221 : int

logic o222 : int

logic o223 : int

logic temp___821 : int

logic o224 : color_type

logic o225 : int

logic o226 : (int,color_type) farray

logic o227 : extended_index_type

logic o228 : extended_index_type

logic o229 : (int,us_rep3) farray

logic o230 : (int,natural) farray

logic o231 : (int,color_type) farray

logic temp___823 : extended_index_type

logic temp___8231 : extended_index_type

logic temp___8232 : (int,us_rep3) farray

logic temp___8233 : (int,natural) farray

logic temp___8234 : (int,color_type) farray

logic o232 : int

logic o233 : int

logic o234 : int

logic o235 : int

logic o236 : int

logic o237 : int

logic o238 : int

logic o239 : int

logic o240 : int

logic red_black_trees__insert__L_8__C89b__assume : int

logic o241 : int

logic red_black_trees__insert__L_8__B90b__y__assume : int

logic temp___826 : (int,us_rep1) farray

logic temp___852 : int

logic i6 : int

logic temp___856 : (int,us_rep7) farray

logic o242 : bool

logic o243 : extended_index_type

logic o244 : extended_index_type

logic o245 : bool

logic o246 : extended_index_type

logic o247 : extended_index_type

logic o248 : extended_index_type

logic o249 : int

logic temp___855 : (int,us_rep1) farray

logic o250 : us_rep

logic o251 : bool

logic o252 : us_rep

logic o253 : bool

logic o254 : bool

logic o255 : bool

logic temp___853 : (int,us_rep7) farray

logic temp___854 : (int,us_rep7) farray

logic o256 : bool

logic o257 : extended_index_type

logic o258 : extended_index_type

logic temp___868 : (int,us_rep7) farray

logic o259 : bool

logic o260 : extended_index_type

logic o261 : extended_index_type

logic o262 : bool

logic o263 : extended_index_type

logic o264 : extended_index_type

logic o265 : extended_index_type

logic o266 : int

logic temp___865 : (int,us_rep7) farray

logic temp___866 : (int,us_rep7) farray

logic o267 : bool

logic o268 : extended_index_type

logic o269 : extended_index_type

logic o270 : bool

logic o271 : extended_index_type

logic o272 : extended_index_type

logic o273 : extended_index_type

logic temp___867 : (int,us_rep7) farray

logic o274 : bool

logic o275 : extended_index_type

logic o276 : extended_index_type

logic o277 : bool

logic o278 : extended_index_type

logic o279 : extended_index_type

logic o280 : extended_index_type

logic o281 : int

logic o282 : int

logic o283 : bool

logic temp___876 : (int,us_rep7) farray

logic o284 : bool

logic o285 : extended_index_type

logic o286 : extended_index_type

logic o287 : bool

logic o288 : extended_index_type

logic o289 : extended_index_type

logic o290 : extended_index_type

logic o291 : int

logic temp___873 : (int,us_rep7) farray

logic temp___874 : (int,us_rep7) farray

logic o292 : bool

logic o293 : extended_index_type

logic o294 : extended_index_type

logic o295 : bool

logic o296 : extended_index_type

logic o297 : extended_index_type

logic o298 : extended_index_type

logic temp___875 : (int,us_rep7) farray

logic o299 : bool

logic o300 : extended_index_type

logic o301 : extended_index_type

logic o302 : bool

logic o303 : extended_index_type

logic o304 : extended_index_type

logic o305 : extended_index_type

logic o306 : int

logic o307 : int

logic o308 : bool

logic temp___831 : (int,us_rep7) farray

logic o309 : bool

logic o310 : extended_index_type

logic o311 : extended_index_type

logic o312 : bool

logic o313 : extended_index_type

logic o314 : extended_index_type

logic o315 : extended_index_type

logic o316 : int

logic temp___828 : (int,us_rep7) farray

logic temp___829 : (int,us_rep7) farray

logic o317 : bool

logic o318 : extended_index_type

logic o319 : extended_index_type

logic o320 : bool

logic o321 : extended_index_type

logic o322 : extended_index_type

logic o323 : extended_index_type

logic temp___830 : (int,us_rep7) farray

logic o324 : bool

logic o325 : extended_index_type

logic o326 : extended_index_type

logic o327 : bool

logic o328 : extended_index_type

logic o329 : extended_index_type

logic o330 : extended_index_type

logic o331 : int

logic o332 : int

logic o333 : int

logic o334 : bool

logic temp___839 : (int,us_rep7) farray

logic o335 : bool

logic o336 : extended_index_type

logic o337 : extended_index_type

logic o338 : bool

logic o339 : extended_index_type

logic o340 : extended_index_type

logic o341 : extended_index_type

logic o342 : int

logic temp___836 : (int,us_rep7) farray

logic temp___837 : (int,us_rep7) farray

logic o343 : bool

logic o344 : extended_index_type

logic o345 : extended_index_type

logic o346 : bool

logic o347 : extended_index_type

logic o348 : extended_index_type

logic o349 : extended_index_type

logic temp___838 : (int,us_rep7) farray

logic o350 : bool

logic o351 : extended_index_type

logic o352 : extended_index_type

logic o353 : bool

logic o354 : extended_index_type

logic o355 : extended_index_type

logic o356 : extended_index_type

logic o357 : int

logic o358 : int

logic o359 : int

logic o360 : bool

logic temp___847 : (int,us_rep7) farray

logic o361 : int

logic o362 : bool

logic o363 : extended_index_type

logic o364 : extended_index_type

logic o365 : bool

logic o366 : extended_index_type

logic o367 : extended_index_type

logic o368 : extended_index_type

logic o369 : int

logic temp___844 : (int,us_rep7) farray

logic temp___845 : (int,us_rep7) farray

logic o370 : int

logic o371 : bool

logic o372 : extended_index_type

logic o373 : extended_index_type

logic o374 : bool

logic o375 : extended_index_type

logic o376 : extended_index_type

logic o377 : extended_index_type

logic temp___846 : (int,us_rep7) farray

logic o378 : int

logic o379 : bool

logic o380 : extended_index_type

logic o381 : extended_index_type

logic o382 : bool

logic o383 : extended_index_type

logic o384 : extended_index_type

logic o385 : extended_index_type

logic o386 : int

logic o387 : int

logic o388 : bool

logic o389 : int

logic i7 : int

logic temp___885 : int

logic o390 : int

logic o391 : int

logic o392 : int

logic o393 : int

logic o394 : int

logic o395 : int

logic o396 : int

logic o397 : int

logic o398 : color_type

logic o399 : int

logic o400 : (int,color_type) farray

logic o401 : extended_index_type

logic o402 : extended_index_type

logic o403 : (int,us_rep3) farray

logic o404 : (int,natural) farray

logic o405 : (int,color_type) farray

logic temp___740 : extended_index_type

logic temp___7401 : extended_index_type

logic temp___7402 : (int,us_rep3) farray

logic temp___7403 : (int,natural) farray

logic temp___7404 : (int,color_type) farray

logic o406 : int

logic temp___742 : int

logic o407 : color_type

logic o408 : int

logic o409 : (int,color_type) farray

logic o410 : extended_index_type

logic o411 : extended_index_type

logic o412 : (int,us_rep3) farray

logic o413 : (int,natural) farray

logic o414 : (int,color_type) farray

logic temp___744 : extended_index_type

logic temp___7441 : extended_index_type

logic temp___7442 : (int,us_rep3) farray

logic temp___7443 : (int,natural) farray

logic temp___7444 : (int,color_type) farray

logic o415 : int

logic temp___746 : int

logic o416 : color_type

logic o417 : int

logic o418 : (int,color_type) farray

logic o419 : extended_index_type

logic o420 : extended_index_type

logic o421 : (int,us_rep3) farray

logic o422 : (int,natural) farray

logic o423 : (int,color_type) farray

logic temp___748 : extended_index_type

logic temp___7481 : extended_index_type

logic temp___7482 : (int,us_rep3) farray

logic temp___7483 : (int,natural) farray

logic temp___7484 : (int,color_type) farray

logic o424 : int

logic o425 : int

logic o426 : int

logic o427 : int

logic red_black_trees__insert__L_8__C96b__assume : int

logic temp___756 : int

logic i8 : int

logic temp___763 : (int,us_rep7) farray

logic o428 : bool

logic o429 : extended_index_type

logic o430 : extended_index_type

logic o431 : bool

logic o432 : extended_index_type

logic o433 : extended_index_type

logic o434 : extended_index_type

logic o435 : int

logic temp___762 : (int,us_rep1) farray

logic o436 : us_rep

logic o437 : bool

logic o438 : us_rep

logic o439 : bool

logic o440 : int

logic temp___757 : (int,us_rep7) farray

logic temp___758 : (int,us_rep7) farray

logic o441 : bool

logic o442 : extended_index_type

logic o443 : extended_index_type

logic o444 : bool

logic o445 : extended_index_type

logic o446 : extended_index_type

logic o447 : extended_index_type

logic temp___759 : (int,us_rep7) farray

logic o448 : bool

logic o449 : extended_index_type

logic o450 : extended_index_type

logic o451 : bool

logic o452 : extended_index_type

logic o453 : extended_index_type

logic o454 : extended_index_type

logic o455 : int

logic o456 : int

logic o457 : int

logic o458 : bool

logic temp___760 : (int,us_rep7) farray

logic temp___761 : (int,us_rep7) farray

logic o459 : bool

logic o460 : extended_index_type

logic o461 : extended_index_type

logic temp___749 : (int,us_rep7) farray

logic o462 : bool

logic o463 : extended_index_type

logic o464 : extended_index_type

logic o465 : bool

logic o466 : extended_index_type

logic o467 : extended_index_type

logic o468 : extended_index_type

logic o469 : int

logic temp___750 : (int,us_rep7) farray

logic temp___752 : (int,us_rep7) farray

logic temp___753 : (int,us_rep7) farray

logic o470 : bool

logic o471 : extended_index_type

logic o472 : extended_index_type

logic o473 : bool

logic o474 : extended_index_type

logic o475 : extended_index_type

logic o476 : extended_index_type

logic o477 : int

logic o478 : int

logic o479 : int

logic o480 : int

logic o481 : int

logic o482 : int

logic o483 : int

logic o484 : int

logic red_black_trees__insert__L_8__C102b__assume : int

logic o485 : int

logic red_black_trees__insert__L_8__B103b__y__assume : int

logic temp___642 : int

logic i9 : int

logic temp___646 : (int,us_rep7) farray

logic o486 : bool

logic o487 : extended_index_type

logic o488 : extended_index_type

logic o489 : bool

logic o490 : extended_index_type

logic o491 : extended_index_type

logic o492 : extended_index_type

logic o493 : int

logic temp___645 : (int,us_rep1) farray

logic o494 : us_rep

logic o495 : bool

logic o496 : us_rep

logic o497 : bool

logic o498 : bool

logic temp___643 : (int,us_rep7) farray

logic temp___644 : (int,us_rep7) farray

logic o499 : bool

logic o500 : extended_index_type

logic o501 : extended_index_type

logic temp___657 : (int,us_rep7) farray

logic o502 : bool

logic o503 : extended_index_type

logic o504 : extended_index_type

logic o505 : bool

logic o506 : extended_index_type

logic o507 : extended_index_type

logic o508 : extended_index_type

logic o509 : int

logic temp___655 : (int,us_rep7) farray

logic temp___656 : (int,us_rep7) farray

logic o510 : bool

logic o511 : extended_index_type

logic o512 : extended_index_type

logic temp___632 : (int,us_rep7) farray

logic o513 : bool

logic o514 : extended_index_type

logic o515 : extended_index_type

logic o516 : bool

logic o517 : extended_index_type

logic o518 : extended_index_type

logic o519 : extended_index_type

logic o520 : int

logic temp___630 : (int,us_rep7) farray

logic temp___631 : (int,us_rep7) farray

logic o521 : bool

logic o522 : extended_index_type

logic o523 : extended_index_type

logic temp___638 : (int,us_rep7) farray

logic o524 : int

logic o525 : bool

logic o526 : extended_index_type

logic o527 : extended_index_type

logic o528 : bool

logic o529 : extended_index_type

logic o530 : extended_index_type

logic o531 : extended_index_type

logic o532 : int

logic temp___636 : (int,us_rep7) farray

logic temp___637 : (int,us_rep7) farray

logic o533 : int

logic o534 : bool

logic o535 : extended_index_type

logic o536 : extended_index_type

logic o537 : int

logic o538 : int

logic o539 : int

logic o540 : int

logic o541 : int

logic o542 : int

logic o543 : int

logic o544 : int

logic o545 : int

logic o546 : int

logic temp___665 : int

logic o547 : color_type

logic o548 : int

logic o549 : (int,color_type) farray

logic o550 : extended_index_type

logic o551 : extended_index_type

logic o552 : (int,us_rep3) farray

logic o553 : (int,natural) farray

logic o554 : (int,color_type) farray

logic temp___667 : extended_index_type

logic temp___6671 : extended_index_type

logic temp___6672 : (int,us_rep3) farray

logic temp___6673 : (int,natural) farray

logic temp___6674 : (int,color_type) farray

logic o555 : int

logic o556 : int

logic o557 : int

logic temp___669 : int

logic o558 : color_type

logic o559 : int

logic o560 : (int,color_type) farray

logic o561 : extended_index_type

logic o562 : extended_index_type

logic o563 : (int,us_rep3) farray

logic o564 : (int,natural) farray

logic o565 : (int,color_type) farray

logic temp___671 : extended_index_type

logic temp___6711 : extended_index_type

logic temp___6712 : (int,us_rep3) farray

logic temp___6713 : (int,natural) farray

logic temp___6714 : (int,color_type) farray

logic o566 : int

logic o567 : int

logic o568 : int

logic o569 : int

logic o570 : int

logic o571 : int

logic o572 : int

logic o573 : int

logic o574 : int

logic red_black_trees__insert__L_8__C108b__assume : int

logic o575 : int

logic red_black_trees__insert__L_8__B109b__y__assume : int

logic temp___674 : (int,us_rep1) farray

logic temp___700 : int

logic i10 : int

logic temp___704 : (int,us_rep7) farray

logic o576 : bool

logic o577 : extended_index_type

logic o578 : extended_index_type

logic o579 : bool

logic o580 : extended_index_type

logic o581 : extended_index_type

logic o582 : extended_index_type

logic o583 : int

logic temp___703 : (int,us_rep1) farray

logic o584 : us_rep

logic o585 : bool

logic o586 : us_rep

logic o587 : bool

logic o588 : bool

logic o589 : bool

logic temp___701 : (int,us_rep7) farray

logic temp___702 : (int,us_rep7) farray

logic o590 : bool

logic o591 : extended_index_type

logic o592 : extended_index_type

logic temp___716 : (int,us_rep7) farray

logic o593 : bool

logic o594 : extended_index_type

logic o595 : extended_index_type

logic o596 : bool

logic o597 : extended_index_type

logic o598 : extended_index_type

logic o599 : extended_index_type

logic o600 : int

logic temp___713 : (int,us_rep7) farray

logic temp___714 : (int,us_rep7) farray

logic o601 : bool

logic o602 : extended_index_type

logic o603 : extended_index_type

logic o604 : bool

logic o605 : extended_index_type

logic o606 : extended_index_type

logic o607 : extended_index_type

logic temp___715 : (int,us_rep7) farray

logic o608 : bool

logic o609 : extended_index_type

logic o610 : extended_index_type

logic o611 : bool

logic o612 : extended_index_type

logic o613 : extended_index_type

logic o614 : extended_index_type

logic o615 : int

logic o616 : int

logic o617 : bool

logic temp___724 : (int,us_rep7) farray

logic o618 : bool

logic o619 : extended_index_type

logic o620 : extended_index_type

logic o621 : bool

logic o622 : extended_index_type

logic o623 : extended_index_type

logic o624 : extended_index_type

logic o625 : int

logic temp___721 : (int,us_rep7) farray

logic temp___722 : (int,us_rep7) farray

logic o626 : bool

logic o627 : extended_index_type

logic o628 : extended_index_type

logic o629 : bool

logic o630 : extended_index_type

logic o631 : extended_index_type

logic o632 : extended_index_type

logic temp___723 : (int,us_rep7) farray

logic o633 : bool

logic o634 : extended_index_type

logic o635 : extended_index_type

logic o636 : bool

logic o637 : extended_index_type

logic o638 : extended_index_type

logic o639 : extended_index_type

logic o640 : int

logic o641 : int

logic o642 : bool

logic temp___679 : (int,us_rep7) farray

logic o643 : bool

logic o644 : extended_index_type

logic o645 : extended_index_type

logic o646 : bool

logic o647 : extended_index_type

logic o648 : extended_index_type

logic o649 : extended_index_type

logic o650 : int

logic temp___676 : (int,us_rep7) farray

logic temp___677 : (int,us_rep7) farray

logic o651 : bool

logic o652 : extended_index_type

logic o653 : extended_index_type

logic o654 : bool

logic o655 : extended_index_type

logic o656 : extended_index_type

logic o657 : extended_index_type

logic temp___678 : (int,us_rep7) farray

logic o658 : bool

logic o659 : extended_index_type

logic o660 : extended_index_type

logic o661 : bool

logic o662 : extended_index_type

logic o663 : extended_index_type

logic o664 : extended_index_type

logic o665 : int

logic o666 : int

logic o667 : int

logic o668 : bool

logic temp___687 : (int,us_rep7) farray

logic o669 : bool

logic o670 : extended_index_type

logic o671 : extended_index_type

logic o672 : bool

logic o673 : extended_index_type

logic o674 : extended_index_type

logic o675 : extended_index_type

logic o676 : int

logic temp___684 : (int,us_rep7) farray

logic temp___685 : (int,us_rep7) farray

logic o677 : bool

logic o678 : extended_index_type

logic o679 : extended_index_type

logic o680 : bool

logic o681 : extended_index_type

logic o682 : extended_index_type

logic o683 : extended_index_type

logic temp___686 : (int,us_rep7) farray

logic o684 : bool

logic o685 : extended_index_type

logic o686 : extended_index_type

logic o687 : bool

logic o688 : extended_index_type

logic o689 : extended_index_type

logic o690 : extended_index_type

logic o691 : int

logic o692 : int

logic o693 : int

logic o694 : bool

logic temp___695 : (int,us_rep7) farray

logic o695 : int

logic o696 : bool

logic o697 : extended_index_type

logic o698 : extended_index_type

logic o699 : bool

logic o700 : extended_index_type

logic o701 : extended_index_type

logic o702 : extended_index_type

logic o703 : int

logic temp___692 : (int,us_rep7) farray

logic temp___693 : (int,us_rep7) farray

logic o704 : int

logic o705 : bool

logic o706 : extended_index_type

logic o707 : extended_index_type

logic o708 : bool

logic o709 : extended_index_type

logic o710 : extended_index_type

logic o711 : extended_index_type

logic temp___694 : (int,us_rep7) farray

logic o712 : int

logic o713 : bool

logic o714 : extended_index_type

logic o715 : extended_index_type

logic o716 : bool

logic o717 : extended_index_type

logic o718 : extended_index_type

logic o719 : extended_index_type

logic o720 : int

logic o721 : int

logic o722 : bool

logic o723 : int

logic i11 : int

logic temp___733 : int

logic o724 : int

logic o725 : int

logic o726 : int

logic o727 : int

logic o728 : int

logic o729 : bool

logic o730 : bool

logic i12 : int

logic temp___952 : int

logic o731 : int

logic o732 : int

logic o733 : bool

logic o734 : color_type

logic o735 : int

logic o736 : (int,color_type) farray

logic o737 : extended_index_type

logic o738 : extended_index_type

logic o739 : (int,us_rep3) farray

logic o740 : (int,natural) farray

logic o741 : (int,color_type) farray

logic temp___959 : extended_index_type

logic temp___9591 : extended_index_type

logic temp___9592 : (int,us_rep3) farray

logic temp___9593 : (int,natural) farray

logic temp___9594 : (int,color_type) farray

logic o742 : int

logic temp___960 : int

logic i13 : int

logic o743 : int

logic o744 : bool

logic temp___964 : (int,us_rep7) farray

logic o745 : bool

logic o746 : extended_index_type

logic o747 : extended_index_type

logic o748 : bool

logic o749 : extended_index_type

logic o750 : extended_index_type

logic o751 : extended_index_type

logic o752 : int

logic temp___963 : (int,us_rep1) farray

logic o753 : us_rep

logic o754 : bool

logic o755 : us_rep

logic o756 : bool

logic temp___961 : (int,us_rep7) farray

logic temp___962 : (int,us_rep7) farray

logic o757 : bool

logic o758 : extended_index_type

logic o759 : extended_index_type

logic o760 : us_rep2

logic o761 : us_rep2

logic y5 : int

logic n9 : int

logic n10 : int

logic n11 : int

logic n12 : int

logic n13 : int

logic n14 : int

logic n15 : int

logic n16 : int

logic n17 : int

logic result : extended_index_type

logic result1 : extended_index_type

logic result2 : (int,us_rep3) farray

logic result3 : (int,natural) farray

logic result4 : (int,color_type) farray

logic t_old__split_fields5 : extended_index_type

logic t_old__split_fields6 : extended_index_type

logic t_old__split_fields7 : (int,us_rep3) farray

logic t_old__split_fields8 : (int,natural) farray

logic t_old__split_fields9 : (int,color_type) farray

logic x1 : int

logic search_trees__insert__t__fields : extended_index_type

logic search_trees__insert__t__fields1 : extended_index_type

logic search_trees__insert__t__fields2 : (int,us_rep3) farray

logic search_trees__insert__t__fields3 : (int,natural) farray

logic result5 : extended_index_type

logic result6 : extended_index_type

logic result7 : (int,us_rep3) farray

logic result8 : (int,natural) farray

logic result9 : (int,color_type) farray

logic t__split_fields5 : extended_index_type

logic t__split_fields6 : extended_index_type

logic t__split_fields7 : (int,us_rep3) farray

logic t__split_fields8 : (int,natural) farray

logic t__split_fields9 : (int,color_type) farray

logic result10 : bool

logic result11 : int

logic n18 : int

logic n19 : int

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic result15 : int

logic n20 : int

logic n21 : int

logic n22 : int

logic n23 : int

logic n24 : int

logic n25 : int

logic n26 : int

logic n27 : int

logic n28 : int

logic n29 : int

logic n30 : int

logic result16 : extended_index_type

logic result17 : extended_index_type

logic result18 : (int,us_rep3) farray

logic result19 : (int,natural) farray

logic result20 : (int,color_type) farray

logic t__split_fields10 : extended_index_type

logic t__split_fields11 : extended_index_type

logic t__split_fields12 : (int,us_rep3) farray

logic t__split_fields13 : (int,natural) farray

logic t__split_fields14 : (int,color_type) farray

logic result21 : bool

logic result22 : int

logic n31 : int

logic n32 : int

logic result23 : bool

logic result24 : bool

logic result25 : bool

logic result26 : int

logic n33 : int

logic n34 : int

logic n35 : int

logic n36 : int

logic n37 : int

logic n38 : int

logic n39 : int

logic n40 : int

logic n41 : int

logic n42 : int

logic n43 : int

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic t__split_fields15 : extended_index_type

logic t__split_fields16 : extended_index_type

logic t__split_fields17 : (int,us_rep3) farray

logic t__split_fields18 : (int,natural) farray

logic t__split_fields19 : (int,color_type) farray

logic x2 : int

logic y6 : int

logic t_old__split_fields10 : extended_index_type

logic t_old__split_fields11 : extended_index_type

logic t_old__split_fields12 : (int,us_rep3) farray

logic t_old__split_fields13 : (int,natural) farray

logic t_old__split_fields14 : (int,color_type) farray

logic n44 : int

logic n45 : int

logic n46 : int

logic n47 : int

logic n48 : int

logic n49 : int

logic rho : extended_index_type

logic rho1 : extended_index_type

logic rho2 : (int,us_rep3) farray

logic rho3 : (int,natural) farray

logic rho4 : extended_index_type

logic rho5 : extended_index_type

logic rho6 : (int,us_rep3) farray

logic rho7 : (int,natural) farray

logic rho8 : extended_index_type

logic rho9 : extended_index_type

logic rho10 : (int,us_rep3) farray

logic rho11 : (int,natural) farray

logic rho12 : extended_index_type

logic rho13 : extended_index_type

logic rho14 : (int,us_rep3) farray

logic rho15 : (int,natural) farray

logic result30 : bool

logic result31 : extended_index_type

logic result32 : extended_index_type

logic result33 : (int,us_rep3) farray

logic result34 : (int,natural) farray

logic result35 : (int,color_type) farray

logic t_old__split_fields15 : extended_index_type

logic t_old__split_fields16 : extended_index_type

logic t_old__split_fields17 : (int,us_rep3) farray

logic t_old__split_fields18 : (int,natural) farray

logic t_old__split_fields19 : (int,color_type) farray

logic result36 : bool

logic result37 : int

logic y7 : int

logic result38 : bool

logic result39 : extended_index_type

logic result40 : extended_index_type

logic result41 : (int,us_rep3) farray

logic result42 : (int,natural) farray

logic result43 : (int,color_type) farray

logic t__split_fields20 : extended_index_type

logic t__split_fields21 : extended_index_type

logic t__split_fields22 : (int,us_rep3) farray

logic t__split_fields23 : (int,natural) farray

logic t__split_fields24 : (int,color_type) farray

logic result44 : extended_index_type

logic result45 : extended_index_type

logic result46 : (int,us_rep3) farray

logic result47 : (int,natural) farray

logic result48 : (int,color_type) farray

logic t__split_fields25 : extended_index_type

logic t__split_fields26 : extended_index_type

logic t__split_fields27 : (int,us_rep3) farray

logic t__split_fields28 : (int,natural) farray

logic t__split_fields29 : (int,color_type) farray

logic result49 : extended_index_type

logic result50 : extended_index_type

logic result51 : (int,us_rep3) farray

logic result52 : (int,natural) farray

logic result53 : (int,color_type) farray

logic t__split_fields30 : extended_index_type

logic t__split_fields31 : extended_index_type

logic t__split_fields32 : (int,us_rep3) farray

logic t__split_fields33 : (int,natural) farray

logic t__split_fields34 : (int,color_type) farray

logic result54 : int

logic x3 : int

logic result55 : int

logic n50 : int

logic n51 : int

logic result56 : bool

logic result57 : bool

logic result58 : bool

logic result59 : bool

logic result60 : int

logic n52 : int

logic n53 : int

logic n54 : int

logic n55 : int

logic n56 : int

logic n57 : int

logic n58 : int

logic n59 : int

logic n60 : int

logic result61 : bool

logic result62 : int

logic x4 : int

logic search_trees__left_rotate__t__fields : extended_index_type

logic search_trees__left_rotate__t__fields1 : extended_index_type

logic search_trees__left_rotate__t__fields2 : (int,us_rep3) farray

logic search_trees__left_rotate__t__fields3 : (int,natural) farray

logic result63 : extended_index_type

logic result64 : extended_index_type

logic result65 : (int,us_rep3) farray

logic result66 : (int,natural) farray

logic result67 : (int,color_type) farray

logic t__split_fields35 : extended_index_type

logic t__split_fields36 : extended_index_type

logic t__split_fields37 : (int,us_rep3) farray

logic t__split_fields38 : (int,natural) farray

logic t__split_fields39 : (int,color_type) farray

logic result68 : int

logic n61 : int

logic n62 : int

logic result69 : bool

logic result70 : bool

logic result71 : bool

logic result72 : bool

logic result73 : bool

logic result74 : int

logic n63 : int

logic n64 : int

logic n65 : int

logic n66 : int

logic n67 : int

logic n68 : int

logic n69 : int

logic result75 : extended_index_type

logic result76 : extended_index_type

logic result77 : (int,us_rep3) farray

logic result78 : (int,natural) farray

logic result79 : (int,color_type) farray

logic t_old__split_fields20 : extended_index_type

logic t_old__split_fields21 : extended_index_type

logic t_old__split_fields22 : (int,us_rep3) farray

logic t_old__split_fields23 : (int,natural) farray

logic t_old__split_fields24 : (int,color_type) farray

logic t__split_fields40 : extended_index_type

logic t__split_fields41 : extended_index_type

logic t__split_fields42 : (int,us_rep3) farray

logic t__split_fields43 : (int,natural) farray

logic t__split_fields44 : (int,color_type) farray

logic x5 : int

logic t_old__split_fields25 : extended_index_type

logic t_old__split_fields26 : extended_index_type

logic t_old__split_fields27 : (int,us_rep3) farray

logic t_old__split_fields28 : (int,natural) farray

logic t_old__split_fields29 : (int,color_type) farray

logic n70 : int

logic t__split_fields45 : extended_index_type

logic t__split_fields46 : extended_index_type

logic t__split_fields47 : (int,us_rep3) farray

logic t__split_fields48 : (int,natural) farray

logic t__split_fields49 : (int,color_type) farray

logic x6 : int

logic t_old__split_fields30 : extended_index_type

logic t_old__split_fields31 : extended_index_type

logic t_old__split_fields32 : (int,us_rep3) farray

logic t_old__split_fields33 : (int,natural) farray

logic t_old__split_fields34 : (int,color_type) farray

logic n71 : int

logic rho16 : extended_index_type

logic rho17 : extended_index_type

logic rho18 : (int,us_rep3) farray

logic rho19 : (int,natural) farray

logic result80 : extended_index_type

logic result81 : extended_index_type

logic result82 : (int,us_rep3) farray

logic result83 : (int,natural) farray

logic result84 : (int,color_type) farray

logic t__split_fields50 : extended_index_type

logic t__split_fields51 : extended_index_type

logic t__split_fields52 : (int,us_rep3) farray

logic t__split_fields53 : (int,natural) farray

logic t__split_fields54 : (int,color_type) farray

logic result85 : extended_index_type

logic result86 : extended_index_type

logic result87 : (int,us_rep3) farray

logic result88 : (int,natural) farray

logic result89 : (int,color_type) farray

logic t__split_fields55 : extended_index_type

logic t__split_fields56 : extended_index_type

logic t__split_fields57 : (int,us_rep3) farray

logic t__split_fields58 : (int,natural) farray

logic t__split_fields59 : (int,color_type) farray

logic search_trees__right_rotate__t__fields : extended_index_type

logic search_trees__right_rotate__t__fields1 : extended_index_type

logic search_trees__right_rotate__t__fields2 : (int,us_rep3) farray

logic search_trees__right_rotate__t__fields3 : (int,natural) farray

logic result90 : extended_index_type

logic result91 : extended_index_type

logic result92 : (int,us_rep3) farray

logic result93 : (int,natural) farray

logic result94 : (int,color_type) farray

logic t__split_fields60 : extended_index_type

logic t__split_fields61 : extended_index_type

logic t__split_fields62 : (int,us_rep3) farray

logic t__split_fields63 : (int,natural) farray

logic t__split_fields64 : (int,color_type) farray

logic result95 : int

logic n72 : int

logic n73 : int

logic result96 : bool

logic result97 : bool

logic result98 : bool

logic result99 : bool

logic result100 : bool

logic result101 : bool

logic result102 : bool

logic result103 : int

logic n74 : int

logic n75 : int

logic n76 : int

logic n77 : int

logic n78 : int

logic n79 : int

logic n80 : int

logic result104 : bool

logic t__split_fields65 : extended_index_type

logic t__split_fields66 : extended_index_type

logic t__split_fields67 : (int,us_rep3) farray

logic t__split_fields68 : (int,natural) farray

logic t__split_fields69 : (int,color_type) farray

logic x7 : int

logic t_old__split_fields35 : extended_index_type

logic t_old__split_fields36 : extended_index_type

logic t_old__split_fields37 : (int,us_rep3) farray

logic t_old__split_fields38 : (int,natural) farray

logic t_old__split_fields39 : (int,color_type) farray

logic n81 : int

logic n82 : int

logic n83 : int

logic t__split_fields70 : extended_index_type

logic t__split_fields71 : extended_index_type

logic t__split_fields72 : (int,us_rep3) farray

logic t__split_fields73 : (int,natural) farray

logic t__split_fields74 : (int,color_type) farray

logic x8 : int

logic t_old__split_fields40 : extended_index_type

logic t_old__split_fields41 : extended_index_type

logic t_old__split_fields42 : (int,us_rep3) farray

logic t_old__split_fields43 : (int,natural) farray

logic t_old__split_fields44 : (int,color_type) farray

logic n84 : int

logic n85 : int

logic n86 : int

logic rho20 : extended_index_type

logic rho21 : extended_index_type

logic rho22 : (int,us_rep3) farray

logic rho23 : (int,natural) farray

logic rho24 : extended_index_type

logic rho25 : extended_index_type

logic rho26 : (int,us_rep3) farray

logic rho27 : (int,natural) farray

logic result105 : int

logic y8 : int

logic result106 : bool

logic result107 : extended_index_type

logic result108 : extended_index_type

logic result109 : (int,us_rep3) farray

logic result110 : (int,natural) farray

logic result111 : (int,color_type) farray

logic t__split_fields75 : extended_index_type

logic t__split_fields76 : extended_index_type

logic t__split_fields77 : (int,us_rep3) farray

logic t__split_fields78 : (int,natural) farray

logic t__split_fields79 : (int,color_type) farray

logic result112 : extended_index_type

logic result113 : extended_index_type

logic result114 : (int,us_rep3) farray

logic result115 : (int,natural) farray

logic result116 : (int,color_type) farray

logic t__split_fields80 : extended_index_type

logic t__split_fields81 : extended_index_type

logic t__split_fields82 : (int,us_rep3) farray

logic t__split_fields83 : (int,natural) farray

logic t__split_fields84 : (int,color_type) farray

logic result117 : extended_index_type

logic result118 : extended_index_type

logic result119 : (int,us_rep3) farray

logic result120 : (int,natural) farray

logic result121 : (int,color_type) farray

logic t__split_fields85 : extended_index_type

logic t__split_fields86 : extended_index_type

logic t__split_fields87 : (int,us_rep3) farray

logic t__split_fields88 : (int,natural) farray

logic t__split_fields89 : (int,color_type) farray

logic result122 : int

logic x9 : int

logic result123 : int

logic n87 : int

logic n88 : int

logic result124 : bool

logic result125 : bool

logic result126 : bool

logic result127 : bool

logic result128 : int

logic n89 : int

logic n90 : int

logic n91 : int

logic n92 : int

logic n93 : int

logic n94 : int

logic n95 : int

logic n96 : int

logic n97 : int

logic result129 : bool

logic result130 : int

logic x10 : int

logic search_trees__right_rotate__t__fields4 : extended_index_type

logic search_trees__right_rotate__t__fields5 : extended_index_type

logic search_trees__right_rotate__t__fields6 : (int,us_rep3) farray

logic search_trees__right_rotate__t__fields7 : (int,natural) farray

logic result131 : extended_index_type

logic result132 : extended_index_type

logic result133 : (int,us_rep3) farray

logic result134 : (int,natural) farray

logic result135 : (int,color_type) farray

logic t__split_fields90 : extended_index_type

logic t__split_fields91 : extended_index_type

logic t__split_fields92 : (int,us_rep3) farray

logic t__split_fields93 : (int,natural) farray

logic t__split_fields94 : (int,color_type) farray

logic result136 : int

logic n98 : int

logic n99 : int

logic result137 : bool

logic result138 : bool

logic result139 : bool

logic result140 : bool

logic result141 : bool

logic result142 : int

logic n100 : int

logic n101 : int

logic n102 : int

logic n103 : int

logic n104 : int

logic n105 : int

logic n106 : int

logic result143 : extended_index_type

logic result144 : extended_index_type

logic result145 : (int,us_rep3) farray

logic result146 : (int,natural) farray

logic result147 : (int,color_type) farray

logic t_old__split_fields45 : extended_index_type

logic t_old__split_fields46 : extended_index_type

logic t_old__split_fields47 : (int,us_rep3) farray

logic t_old__split_fields48 : (int,natural) farray

logic t_old__split_fields49 : (int,color_type) farray

logic t__split_fields95 : extended_index_type

logic t__split_fields96 : extended_index_type

logic t__split_fields97 : (int,us_rep3) farray

logic t__split_fields98 : (int,natural) farray

logic t__split_fields99 : (int,color_type) farray

logic x11 : int

logic t_old__split_fields50 : extended_index_type

logic t_old__split_fields51 : extended_index_type

logic t_old__split_fields52 : (int,us_rep3) farray

logic t_old__split_fields53 : (int,natural) farray

logic t_old__split_fields54 : (int,color_type) farray

logic n107 : int

logic t__split_fields100 : extended_index_type

logic t__split_fields101 : extended_index_type

logic t__split_fields102 : (int,us_rep3) farray

logic t__split_fields103 : (int,natural) farray

logic t__split_fields104 : (int,color_type) farray

logic x12 : int

logic t_old__split_fields55 : extended_index_type

logic t_old__split_fields56 : extended_index_type

logic t_old__split_fields57 : (int,us_rep3) farray

logic t_old__split_fields58 : (int,natural) farray

logic t_old__split_fields59 : (int,color_type) farray

logic n108 : int

logic rho28 : extended_index_type

logic rho29 : extended_index_type

logic rho30 : (int,us_rep3) farray

logic rho31 : (int,natural) farray

logic result148 : extended_index_type

logic result149 : extended_index_type

logic result150 : (int,us_rep3) farray

logic result151 : (int,natural) farray

logic result152 : (int,color_type) farray

logic t__split_fields105 : extended_index_type

logic t__split_fields106 : extended_index_type

logic t__split_fields107 : (int,us_rep3) farray

logic t__split_fields108 : (int,natural) farray

logic t__split_fields109 : (int,color_type) farray

logic result153 : extended_index_type

logic result154 : extended_index_type

logic result155 : (int,us_rep3) farray

logic result156 : (int,natural) farray

logic result157 : (int,color_type) farray

logic t__split_fields110 : extended_index_type

logic t__split_fields111 : extended_index_type

logic t__split_fields112 : (int,us_rep3) farray

logic t__split_fields113 : (int,natural) farray

logic t__split_fields114 : (int,color_type) farray

logic search_trees__left_rotate__t__fields4 : extended_index_type

logic search_trees__left_rotate__t__fields5 : extended_index_type

logic search_trees__left_rotate__t__fields6 : (int,us_rep3) farray

logic search_trees__left_rotate__t__fields7 : (int,natural) farray

logic result158 : extended_index_type

logic result159 : extended_index_type

logic result160 : (int,us_rep3) farray

logic result161 : (int,natural) farray

logic result162 : (int,color_type) farray

logic t__split_fields115 : extended_index_type

logic t__split_fields116 : extended_index_type

logic t__split_fields117 : (int,us_rep3) farray

logic t__split_fields118 : (int,natural) farray

logic t__split_fields119 : (int,color_type) farray

logic result163 : int

logic n109 : int

logic n110 : int

logic result164 : bool

logic result165 : bool

logic result166 : bool

logic result167 : bool

logic result168 : bool

logic result169 : bool

logic result170 : bool

logic result171 : int

logic n111 : int

logic n112 : int

logic n113 : int

logic n114 : int

logic n115 : int

logic n116 : int

logic n117 : int

logic result172 : bool

logic t__split_fields120 : extended_index_type

logic t__split_fields121 : extended_index_type

logic t__split_fields122 : (int,us_rep3) farray

logic t__split_fields123 : (int,natural) farray

logic t__split_fields124 : (int,color_type) farray

logic x13 : int

logic t_old__split_fields60 : extended_index_type

logic t_old__split_fields61 : extended_index_type

logic t_old__split_fields62 : (int,us_rep3) farray

logic t_old__split_fields63 : (int,natural) farray

logic t_old__split_fields64 : (int,color_type) farray

logic n118 : int

logic n119 : int

logic n120 : int

logic t__split_fields125 : extended_index_type

logic t__split_fields126 : extended_index_type

logic t__split_fields127 : (int,us_rep3) farray

logic t__split_fields128 : (int,natural) farray

logic t__split_fields129 : (int,color_type) farray

logic x14 : int

logic t_old__split_fields65 : extended_index_type

logic t_old__split_fields66 : extended_index_type

logic t_old__split_fields67 : (int,us_rep3) farray

logic t_old__split_fields68 : (int,natural) farray

logic t_old__split_fields69 : (int,color_type) farray

logic n121 : int

logic n122 : int

logic n123 : int

logic rho32 : extended_index_type

logic rho33 : extended_index_type

logic rho34 : (int,us_rep3) farray

logic rho35 : (int,natural) farray

logic rho36 : extended_index_type

logic rho37 : extended_index_type

logic rho38 : (int,us_rep3) farray

logic rho39 : (int,natural) farray

logic t__split_fields130 : extended_index_type

logic t__split_fields131 : extended_index_type

logic t__split_fields132 : (int,us_rep3) farray

logic t__split_fields133 : (int,natural) farray

logic t__split_fields134 : (int,color_type) farray

logic x15 : int

logic y9 : int

logic t_old__split_fields70 : extended_index_type

logic t_old__split_fields71 : extended_index_type

logic t_old__split_fields72 : (int,us_rep3) farray

logic t_old__split_fields73 : (int,natural) farray

logic t_old__split_fields74 : (int,color_type) farray

logic n124 : int

logic n125 : int

logic n126 : int

logic n127 : int

logic n128 : int

logic n129 : int

logic t__split_fields135 : extended_index_type

logic t__split_fields136 : extended_index_type

logic t__split_fields137 : (int,us_rep3) farray

logic t__split_fields138 : (int,natural) farray

logic t__split_fields139 : (int,color_type) farray

logic x16 : int

logic y10 : int

logic t_old__split_fields75 : extended_index_type

logic t_old__split_fields76 : extended_index_type

logic t_old__split_fields77 : (int,us_rep3) farray

logic t_old__split_fields78 : (int,natural) farray

logic t_old__split_fields79 : (int,color_type) farray

logic n130 : int

logic n131 : int

logic n132 : int

logic n133 : int

logic n134 : int

logic n135 : int

logic rho40 : extended_index_type

logic rho41 : extended_index_type

logic rho42 : (int,us_rep3) farray

logic rho43 : (int,natural) farray

logic rho44 : extended_index_type

logic rho45 : extended_index_type

logic rho46 : (int,us_rep3) farray

logic rho47 : (int,natural) farray

logic rho48 : extended_index_type

logic rho49 : extended_index_type

logic rho50 : (int,us_rep3) farray

logic rho51 : (int,natural) farray

logic rho52 : extended_index_type

logic rho53 : extended_index_type

logic rho54 : (int,us_rep3) farray

logic rho55 : (int,natural) farray

logic result173 : bool

logic result174 : bool

logic t__split_fields140 : extended_index_type

logic t__split_fields141 : extended_index_type

logic t__split_fields142 : (int,us_rep3) farray

logic t__split_fields143 : (int,natural) farray

logic t__split_fields144 : (int,color_type) farray

logic x17 : int

logic y11 : int

logic t_old__split_fields80 : extended_index_type

logic t_old__split_fields81 : extended_index_type

logic t_old__split_fields82 : (int,us_rep3) farray

logic t_old__split_fields83 : (int,natural) farray

logic t_old__split_fields84 : (int,color_type) farray

logic n136 : int

logic n137 : int

logic n138 : int

logic n139 : int

logic n140 : int

logic n141 : int

logic t__split_fields145 : extended_index_type

logic t__split_fields146 : extended_index_type

logic t__split_fields147 : (int,us_rep3) farray

logic t__split_fields148 : (int,natural) farray

logic t__split_fields149 : (int,color_type) farray

logic x18 : int

logic y12 : int

logic t_old__split_fields85 : extended_index_type

logic t_old__split_fields86 : extended_index_type

logic t_old__split_fields87 : (int,us_rep3) farray

logic t_old__split_fields88 : (int,natural) farray

logic t_old__split_fields89 : (int,color_type) farray

logic n142 : int

logic n143 : int

logic n144 : int

logic n145 : int

logic n146 : int

logic n147 : int

logic rho56 : extended_index_type

logic rho57 : extended_index_type

logic rho58 : (int,us_rep3) farray

logic rho59 : (int,natural) farray

logic rho60 : extended_index_type

logic rho61 : extended_index_type

logic rho62 : (int,us_rep3) farray

logic rho63 : (int,natural) farray

logic rho64 : extended_index_type

logic rho65 : extended_index_type

logic rho66 : (int,us_rep3) farray

logic rho67 : (int,natural) farray

logic rho68 : extended_index_type

logic rho69 : extended_index_type

logic rho70 : (int,us_rep3) farray

logic rho71 : (int,natural) farray

logic t__split_fields150 : extended_index_type

logic t__split_fields151 : extended_index_type

logic t__split_fields152 : (int,us_rep3) farray

logic t__split_fields153 : (int,natural) farray

logic t__split_fields154 : (int,color_type) farray

logic x19 : int

logic y13 : int

logic t_old__split_fields90 : extended_index_type

logic t_old__split_fields91 : extended_index_type

logic t_old__split_fields92 : (int,us_rep3) farray

logic t_old__split_fields93 : (int,natural) farray

logic t_old__split_fields94 : (int,color_type) farray

logic n148 : int

logic n149 : int

logic n150 : int

logic n151 : int

logic n152 : int

logic n153 : int

logic t__split_fields155 : extended_index_type

logic t__split_fields156 : extended_index_type

logic t__split_fields157 : (int,us_rep3) farray

logic t__split_fields158 : (int,natural) farray

logic t__split_fields159 : (int,color_type) farray

logic x20 : int

logic y14 : int

logic t_old__split_fields95 : extended_index_type

logic t_old__split_fields96 : extended_index_type

logic t_old__split_fields97 : (int,us_rep3) farray

logic t_old__split_fields98 : (int,natural) farray

logic t_old__split_fields99 : (int,color_type) farray

logic n154 : int

logic n155 : int

logic n156 : int

logic n157 : int

logic n158 : int

logic n159 : int

logic t__split_fields160 : extended_index_type

logic t__split_fields161 : extended_index_type

logic t__split_fields162 : (int,us_rep3) farray

logic t__split_fields163 : (int,natural) farray

logic t__split_fields164 : (int,color_type) farray

logic x21 : int

logic y15 : int

logic t_old__split_fields100 : extended_index_type

logic t_old__split_fields101 : extended_index_type

logic t_old__split_fields102 : (int,us_rep3) farray

logic t_old__split_fields103 : (int,natural) farray

logic t_old__split_fields104 : (int,color_type) farray

logic n160 : int

logic n161 : int

logic n162 : int

logic n163 : int

logic n164 : int

logic n165 : int

logic t__split_fields165 : extended_index_type

logic t__split_fields166 : extended_index_type

logic t__split_fields167 : (int,us_rep3) farray

logic t__split_fields168 : (int,natural) farray

logic t__split_fields169 : (int,color_type) farray

logic x22 : int

logic y16 : int

logic t_old__split_fields105 : extended_index_type

logic t_old__split_fields106 : extended_index_type

logic t_old__split_fields107 : (int,us_rep3) farray

logic t_old__split_fields108 : (int,natural) farray

logic t_old__split_fields109 : (int,color_type) farray

logic n166 : int

logic n167 : int

logic n168 : int

logic n169 : int

logic n170 : int

logic n171 : int

logic result175 : extended_index_type

logic result176 : extended_index_type

logic result177 : (int,us_rep3) farray

logic result178 : (int,natural) farray

logic result179 : (int,color_type) farray

logic t_old__split_fields110 : extended_index_type

logic t_old__split_fields111 : extended_index_type

logic t_old__split_fields112 : (int,us_rep3) farray

logic t_old__split_fields113 : (int,natural) farray

logic t_old__split_fields114 : (int,color_type) farray

logic result180 : bool

logic result181 : bool

logic result182 : extended_index_type

logic result183 : extended_index_type

logic result184 : (int,us_rep3) farray

logic result185 : (int,natural) farray

logic result186 : (int,color_type) farray

logic t__split_fields170 : extended_index_type

logic t__split_fields171 : extended_index_type

logic t__split_fields172 : (int,us_rep3) farray

logic t__split_fields173 : (int,natural) farray

logic t__split_fields174 : (int,color_type) farray

logic result187 : bool

logic result188 : int

logic n172 : int

logic n173 : int

logic result189 : bool

logic result190 : bool

logic result191 : bool

logic result192 : int

logic n174 : int

logic n175 : int

logic n176 : int

logic n177 : int

logic n178 : int

logic n179 : int

logic n180 : int

logic n181 : int

logic n182 : int

logic n183 : int

logic n184 : int

logic t__split_fields175 : extended_index_type

logic t__split_fields176 : extended_index_type

logic t__split_fields177 : (int,us_rep3) farray

logic t__split_fields178 : (int,natural) farray

logic t__split_fields179 : (int,color_type) farray

logic x23 : int

logic y17 : int

logic t_old__split_fields115 : extended_index_type

logic t_old__split_fields116 : extended_index_type

logic t_old__split_fields117 : (int,us_rep3) farray

logic t_old__split_fields118 : (int,natural) farray

logic t_old__split_fields119 : (int,color_type) farray

logic n185 : int

logic n186 : int

logic n187 : int

logic n188 : int

logic n189 : int

logic n190 : int

logic n191 : int

logic n192 : int

logic n193 : int

logic t__split_fields180 : extended_index_type

logic t__split_fields181 : extended_index_type

logic t__split_fields182 : (int,us_rep3) farray

logic t__split_fields183 : (int,natural) farray

logic t__split_fields184 : (int,color_type) farray

logic x24 : int

logic y18 : int

logic t_old__split_fields120 : extended_index_type

logic t_old__split_fields121 : extended_index_type

logic t_old__split_fields122 : (int,us_rep3) farray

logic t_old__split_fields123 : (int,natural) farray

logic t_old__split_fields124 : (int,color_type) farray

logic n194 : int

logic n195 : int

logic n196 : int

logic n197 : int

logic n198 : int

logic n199 : int

logic n200 : int

logic n201 : int

logic n202 : int

logic t__split_fields185 : extended_index_type

logic t__split_fields186 : extended_index_type

logic t__split_fields187 : (int,us_rep3) farray

logic t__split_fields188 : (int,natural) farray

logic t__split_fields189 : (int,color_type) farray

logic x25 : int

logic y19 : int

logic t_old__split_fields125 : extended_index_type

logic t_old__split_fields126 : extended_index_type

logic t_old__split_fields127 : (int,us_rep3) farray

logic t_old__split_fields128 : (int,natural) farray

logic t_old__split_fields129 : (int,color_type) farray

logic n203 : int

logic n204 : int

logic n205 : int

logic n206 : int

logic n207 : int

logic n208 : int

logic n209 : int

logic n210 : int

logic n211 : int

logic t__split_fields190 : extended_index_type

logic t__split_fields191 : extended_index_type

logic t__split_fields192 : (int,us_rep3) farray

logic t__split_fields193 : (int,natural) farray

logic t__split_fields194 : (int,color_type) farray

logic x26 : int

logic y20 : int

logic t_old__split_fields130 : extended_index_type

logic t_old__split_fields131 : extended_index_type

logic t_old__split_fields132 : (int,us_rep3) farray

logic t_old__split_fields133 : (int,natural) farray

logic t_old__split_fields134 : (int,color_type) farray

logic n212 : int

logic n213 : int

logic n214 : int

logic n215 : int

logic n216 : int

logic n217 : int

logic n218 : int

logic n219 : int

logic n220 : int

logic result193 : bool

axiom H : ((((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 }
  }) = 0) -> (to_rep(t__split_fields) = 0)) and ((not (size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = 0)) ->
  (((not (to_rep(t__split_fields) = 0)) and (valid_root({ us_split_fields5 =
  { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } },
  to_rep(t__split_fields)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } },
  to_rep(t__split_fields), t__split_fields3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = true))

axiom H1 : in_range1(v)

axiom H2 : (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } };
  rec__red_black_trees__rbt__color = t__split_fields4 } }) = true)

axiom H3 : (size2({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } };
  rec__red_black_trees__rbt__color = t__split_fields4 } }) <  100)

axiom H4 : ((0 <= 100) -> in_range3(x))

axiom H5 : ((0 <= 100) -> in_range3(y4))

axiom H6 : (((result = t_old__split_fields) and
  (((result1 = t_old__split_fields1) and
  (result2 = t_old__split_fields2)) and
  (result3 = t_old__split_fields3))) and (result4 = t_old__split_fields4))

axiom H7 : (((t_old__split_fields5 = t__split_fields) and
  (((t_old__split_fields6 = t__split_fields1) and
  (t_old__split_fields7 = t__split_fields2)) and
  (t_old__split_fields8 = t__split_fields3))) and
  (t_old__split_fields9 = t__split_fields4))

axiom H8 : ((((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  t_old__split_fields6; rec__binary_trees__forest__c = t_old__split_fields7 }
  }) = 0) -> (to_rep(t_old__split_fields5) = 0)) and ((not (size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields6;
  rec__binary_trees__forest__c = t_old__split_fields7 } }) = 0)) ->
  (((not (to_rep(t_old__split_fields5) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields6;
  rec__binary_trees__forest__c = t_old__split_fields7 } },
  to_rep(t_old__split_fields5)) = true)) and (ordered_leafs({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields6;
  rec__binary_trees__forest__c = t_old__split_fields7 } },
  to_rep(t_old__split_fields5), t_old__split_fields8) = true)))) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  t_old__split_fields6; rec__binary_trees__forest__c = t_old__split_fields7 }
  }) = true))

axiom H9 : ((((contains(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  v) = true) -> (((((((x1 = 0) and (oeq(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }), values({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })) = true)) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j) = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((not (parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j) = 0)) -> (position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j) = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j)))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j,
  d) = peek({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j, d))))))))) and ((not (contains(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  v) = true)) -> (((bool_eq1(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  0) = true) -> ((((((not (x1 = 0)) and (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }) = 1)) and (root({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }) = x1)) and (is_add__2(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }), v, values({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })) = true)) and
  (forall i14:int. (((1 <= i14) and (i14 <= 100)) -> ((not (i14 = root({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }))) -> (not ((((model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[i14])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  (forall i14:int. (((1 <= i14) and (i14 <= 100)) -> (parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, i14) = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, i14)))))) and
  ((not (bool_eq1(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  0) = true)) -> ((((((((((((not (x1 = 0)) and ((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[x1])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  (root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }) = root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }))) and
  (size({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }) = (size({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }) + 1))) and
  (is_add__2(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }), v, values({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })) = true)) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((not (x1 = j)) -> (parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j) = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j)))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((not (x1 = j)) and
  (not (parent({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j) = 0))) -> (position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j) = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j)))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((not (x1 = j)) and
  ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (x1 = j))))))) and
  (forall d:int. (((0 <= d) and (d <= 1)) -> (peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, x1, d) = 0)))) and (peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, x1), position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, x1)) = 0)) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> (((((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (x1 = j))) and ((not (j = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, x1))) or (not (d = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = search_trees__insert__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, x1))))) -> (peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j,
  d) = peek({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__insert__t__fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } };
  rec__search_trees__search_tree__values = search_trees__insert__t__fields3 }
  }, j, d)))))))))))) and (((((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__insert__t__fields1;
  rec__binary_trees__forest__c = search_trees__insert__t__fields2 }
  }) = 0) -> (to_rep(search_trees__insert__t__fields) = 0)) and
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } }) = 0)) ->
  (((not (to_rep(search_trees__insert__t__fields) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } },
  to_rep(search_trees__insert__t__fields)) = true)) and (ordered_leafs({
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } },
  to_rep(search_trees__insert__t__fields),
  search_trees__insert__t__fields3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__insert__t__fields1; rec__binary_trees__forest__c =
  search_trees__insert__t__fields2 } }) = true)) and in_range3(x1)))

axiom H10 : (((result5 = t__split_fields) and
  (((result6 = t__split_fields1) and (result7 = t__split_fields2)) and
  (result8 = t__split_fields3))) and (result9 = t__split_fields4))

axiom H11 : (((t__split_fields5 = search_trees__insert__t__fields) and
  (((t__split_fields6 = search_trees__insert__t__fields1) and
  (t__split_fields7 = search_trees__insert__t__fields2)) and
  (t__split_fields8 = search_trees__insert__t__fields3))) and
  (t__split_fields9 = t__split_fields4))

axiom H12 : ((x1 = 0) -> (((t_old__split_fields5 = c61b) and
  (((t_old__split_fields6 = c61b1) and (t_old__split_fields7 = c61b2)) and
  (t_old__split_fields8 = c61b3))) and (t_old__split_fields9 = c61b4)))

axiom H13 : ((x1 = 0) -> ((((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c61b1; rec__binary_trees__forest__c = c61b2
  } }) = 0) -> (to_rep(c61b) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c61b1; rec__binary_trees__forest__c = c61b2
  } }) = 0)) -> (((not (to_rep(c61b) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = c61b1;
  rec__binary_trees__forest__c = c61b2 } }, to_rep(c61b)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = c61b1;
  rec__binary_trees__forest__c = c61b2 } }, to_rep(c61b),
  c61b3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = c61b1; rec__binary_trees__forest__c = c61b2
  } }) = true)))

axiom H14 : ((x1 = 0) -> (((t__split_fields5 = c62b) and
  (((t__split_fields6 = c62b1) and (t__split_fields7 = c62b2)) and
  (t__split_fields8 = c62b3))) and (t__split_fields9 = c62b4)))

axiom H15 : ((x1 = 0) -> ((((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c62b1; rec__binary_trees__forest__c = c62b2
  } }) = 0) -> (to_rep(c62b) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c62b1; rec__binary_trees__forest__c = c62b2
  } }) = 0)) -> (((not (to_rep(c62b) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = c62b1;
  rec__binary_trees__forest__c = c62b2 } }, to_rep(c62b)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = c62b1;
  rec__binary_trees__forest__c = c62b2 } }, to_rep(c62b),
  c62b3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = c62b1; rec__binary_trees__forest__c = c62b2
  } }) = true)))

axiom H16 : ((x1 = 0) -> (same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = c62b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c62b1; rec__binary_trees__forest__c = c62b2
  } }; rec__search_trees__search_tree__values = c62b3 } };
  rec__red_black_trees__rbt__color = c62b4 } }) = true))

axiom H17 : (not (x1 = 0))

axiom H18 : ((x1 = 0) -> (n29 = n27))

axiom H19 : ((x1 = 0) -> (n30 = n28))

axiom H20 : ((not (x1 = 0)) -> (n29 = n))

axiom H21 : ((not (x1 = 0)) -> (n30 = n9))

axiom H22 : (to_rep3(o18) = 1)

axiom H23 : ((1 <= x1) and (x1 <= 100))

axiom H24 : (o19 = x1)

axiom H25 : (o20 = (t__split_fields9[o19 <- o18]))

axiom H26 : (((o21 = t__split_fields5) and (((o22 = t__split_fields6) and
  (o23 = t__split_fields7)) and (o24 = t__split_fields8))) and (o25 = o20))

axiom H27 : (((temp___604 = o21) and (((temp___6041 = o22) and
  (temp___6042 = o23)) and (temp___6043 = o24))) and (temp___6044 = o25))

axiom H28 : (((result16 = t__split_fields5) and
  (((result17 = t__split_fields6) and (result18 = t__split_fields7)) and
  (result19 = t__split_fields8))) and (result20 = t__split_fields9))

axiom H29 : (((t__split_fields10 = temp___604) and
  (((t__split_fields11 = temp___6041) and
  (t__split_fields12 = temp___6042)) and
  (t__split_fields13 = temp___6043))) and (t__split_fields14 = temp___6044))

axiom H30 : (((t_old__split_fields5 = c67b) and
  (((t_old__split_fields6 = c67b1) and (t_old__split_fields7 = c67b2)) and
  (t_old__split_fields8 = c67b3))) and (t_old__split_fields9 = c67b4))

axiom H31 : ((((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  c67b1; rec__binary_trees__forest__c = c67b2 } }) = 0) ->
  (to_rep(c67b) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c67b1; rec__binary_trees__forest__c = c67b2
  } }) = 0)) -> (((not (to_rep(c67b) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = c67b1;
  rec__binary_trees__forest__c = c67b2 } }, to_rep(c67b)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = c67b1;
  rec__binary_trees__forest__c = c67b2 } }, to_rep(c67b),
  c67b3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = c67b1; rec__binary_trees__forest__c = c67b2
  } }) = true))

axiom H32 : (((t__split_fields10 = c68b) and
  (((t__split_fields11 = c68b1) and (t__split_fields12 = c68b2)) and
  (t__split_fields13 = c68b3))) and (t__split_fields14 = c68b4))

axiom H33 : ((((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  c68b1; rec__binary_trees__forest__c = c68b2 } }) = 0) ->
  (to_rep(c68b) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }) = 0)) -> (((not (to_rep(c68b) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = c68b1;
  rec__binary_trees__forest__c = c68b2 } }, to_rep(c68b)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = c68b1;
  rec__binary_trees__forest__c = c68b2 } }, to_rep(c68b),
  c68b3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }) = true))

axiom H34 : (same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = c68b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }; rec__search_trees__search_tree__values = c68b3 } };
  rec__red_black_trees__rbt__color = c68b4 } }) = true)

axiom H35 :
  (forall i14:int. (((1 <= i14) and (i14 <= 100)) -> (((not (i14 = x1)) and
  ((parent({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields10; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } },
  i14) = 0) or (to_rep3((t__split_fields14[parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields10;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } },
  i14)])) = 1))) -> (to_rep3((t__split_fields14[i14])) = 0))))

axiom H36 : ((o48 = root({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields10;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } })) and
  (in_range2(o48) and (o48 = to_rep(t__split_fields10))))

axiom H37 : (((x1 = o48) -> (o49 = true)) and ((not (x1 = o48)) ->
  (o49 = false)))

axiom H38 : (((not (o49 = true)) -> (result29 = true)) and ((o49 = true) ->
  (result29 = false)))

axiom H39 : ((result29 = true) -> ((o45 = x1) and in_range2(x1)))

axiom H40 : ((result29 = true) -> ((o46 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields10;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } }, o45)) and
  (in_range3(o46) and ((o46 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } }, o45)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields10; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } }) = 0) ->
  (o46 = 0))))))

axiom H41 : ((result29 = true) -> ((o47 = color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields10;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } };
  rec__red_black_trees__rbt__color = t__split_fields14 } }, o46)) and
  (in_range6(o47) and (((o46 = 0) -> (o47 = 0)) and ((not (o46 = 0)) ->
  (o47 = to_rep3((t__split_fields14[o46]))))))))

axiom H42 : ((result29 = true) -> (((o47 = 1) -> (result28 = true)) and
  ((not (o47 = 1)) -> (result28 = false))))

axiom H43 : ((not (result29 = true)) -> (result28 = false))

axiom H44 : (result28 = true)

axiom H45 : (not (x2 = 0))

axiom H46 : (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields10; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } }))

axiom H47 : (root({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = root({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields10; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } }))

axiom H48 : ((((model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 }
  })[x2])).us_split_fields1).rec__tree_model__path_type__k = true)

axiom H49 : (color({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } };
  rec__red_black_trees__rbt__color = t__split_fields19 } }, x2) = 1)

axiom H50 : (color({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } };
  rec__red_black_trees__rbt__color = t__split_fields19 } }, root({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } })) = 0)

axiom H51 :
  (forall i14:int. (((1 <= i14) and (i14 <= 100)) -> (((not (i14 = x2)) and
  ((parent({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } },
  i14) = 0) or (to_rep3((t__split_fields19[parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } },
  i14)])) = 1))) -> (to_rep3((t__split_fields19[i14])) = 0))))

axiom H52 : (oeq(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }), values({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields10; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields11;
  rec__binary_trees__forest__c = t__split_fields12 } };
  rec__search_trees__search_tree__values = t__split_fields13 } })) = true)

axiom H53 : (same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } };
  rec__red_black_trees__rbt__color = t__split_fields19 } }) = true)

axiom H54 : (((((0 <= 100) -> in_range3(x2)) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }) = 0) ->
  (to_rep(t__split_fields15) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }) = 0)) ->
  (((not (to_rep(t__split_fields15) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } },
  to_rep(t__split_fields15)) = true)) and (ordered_leafs({ us_split_fields5 =
  { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } },
  to_rep(t__split_fields15), t__split_fields18) = true)))) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields16; rec__binary_trees__forest__c = t__split_fields17 }
  }) = true))) and ((0 <= 100) -> in_range3(y6))) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields11;
  rec__binary_trees__forest__c = t_old__split_fields12 } }) = 0) ->
  (to_rep(t_old__split_fields10) = 0)) and ((not (size1({ us_split_fields5 =
  { rec__binary_trees__forest__s = t_old__split_fields11;
  rec__binary_trees__forest__c = t_old__split_fields12 } }) = 0)) ->
  (((not (to_rep(t_old__split_fields10) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields11;
  rec__binary_trees__forest__c = t_old__split_fields12 } },
  to_rep(t_old__split_fields10)) = true)) and (ordered_leafs({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields11;
  rec__binary_trees__forest__c = t_old__split_fields12 } },
  to_rep(t_old__split_fields10), t_old__split_fields13) = true)))) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  t_old__split_fields11; rec__binary_trees__forest__c = t_old__split_fields12
  } }) = true)))

axiom H55 : (((result31 = t_old__split_fields10) and
  (((result32 = t_old__split_fields11) and
  (result33 = t_old__split_fields12)) and
  (result34 = t_old__split_fields13))) and
  (result35 = t_old__split_fields14))

axiom H56 : (((t_old__split_fields15 = t__split_fields15) and
  (((t_old__split_fields16 = t__split_fields16) and
  (t_old__split_fields17 = t__split_fields17)) and
  (t_old__split_fields18 = t__split_fields18))) and
  (t_old__split_fields19 = t__split_fields19))

axiom H57 : ((o53 = x2) and in_range2(x2))

axiom H58 : ((o54 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o53)) and
  (in_range3(o54) and ((o54 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o53)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = 0) ->
  (o54 = 0)))))

axiom H59 : ((o55 = o54) and in_range2(o54))

axiom H60 : ((o56 = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o55)) and
  (in_range5(o56) and (o56 = position({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o55))))

axiom H61 : (((o56 = 0) -> (result36 = true)) and ((not (o56 = 0)) ->
  (result36 = false)))

axiom H62 : (result36 = true)

axiom H63 : ((o57 = x2) and in_range2(x2))

axiom H64 : ((o58 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o57)) and
  (in_range3(o58) and ((o58 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o57)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = 0) ->
  (o58 = 0)))))

axiom H65 : ((o59 = o58) and in_range2(o58))

axiom H66 : ((o60 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o59)) and
  (in_range3(o60) and ((o60 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o59)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = 0) ->
  (o60 = 0)))))

axiom H67 : ((o61 = o60) and in_range2(o60))

axiom H68 : ((o62 = peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o61,
  1)) and (in_range3(o62) and (o62 = peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o61, 1))))

axiom H69 : (result37 = y6)

axiom H70 : (y7 = o62)

axiom H71 : ((o63 = color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } };
  rec__red_black_trees__rbt__color = t__split_fields19 } }, y7)) and
  (in_range6(o63) and (((y7 = 0) -> (o63 = 0)) and ((not (y7 = 0)) ->
  (o63 = to_rep3((t__split_fields19[y7])))))))

axiom H72 : (((o63 = 1) -> (result38 = true)) and ((not (o63 = 1)) ->
  (result38 = false)))

axiom H73 : (not (result38 = true))

axiom H74 : ((o144 = x2) and in_range2(x2))

axiom H75 : ((o145 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o144)) and
  (in_range3(o145) and ((o145 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o144)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = 0) ->
  (o145 = 0)))))

axiom H76 : ((o146 = o145) and in_range2(o145))

axiom H77 : ((o147 = peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o146,
  1)) and (in_range3(o147) and (o147 = peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o146, 1))))

axiom H78 : (((x2 = o147) -> (result61 = true)) and ((not (x2 = o147)) ->
  (result61 = false)))

axiom H79 : ((result61 = true) -> ((o148 = x2) and in_range2(x2)))

axiom H80 : ((result61 = true) -> ((o149 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o148)) and
  (in_range3(o149) and ((o149 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } }, o148)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = 0) ->
  (o149 = 0))))))

axiom H81 : ((result61 = true) -> (result62 = x2))

axiom H82 : ((result61 = true) -> (x4 = o149))

axiom H83 : ((result61 = true) -> ((o150 = x4) and in_range2(x4)))

axiom H84 : ((result61 = true) -> (((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }) = size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } })) and
  ((((not (root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = o150)) ->
  (root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }) = root({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }))) and
  ((root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = o150) ->
  (root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }) = peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150,
  1)))) and ((parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, o150) = peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150,
  1)) and ((position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, o150) = 0) and ((parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150,
  1)) = parent({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150)) and
  (((not (root({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }) = o150)) ->
  (position1({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150,
  1)) = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150))) and
  (((not (peek({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150, 1),
  0) = 0)) -> ((parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150, 1),
  0)) = o150) and (position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150, 1),
  0)) = 1))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> ((((not (j = o150)) and
   ((not (parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = o150)) or (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = 0))) and ((((parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, j) = 0) or
   (not (parent({ us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, parent({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j)) = o150))) or (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, parent({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j)) = 0)) or (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = 1))) -> (parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root =
   search_trees__left_rotate__t__fields;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
   rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
   rec__search_trees__search_tree__values =
   search_trees__left_rotate__t__fields3 } }, j) = parent({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, j))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((not (j = o150)) and
   (not (parent({ us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = 0))) and ((not (parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = o150)) or (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = 0))) and (((not (parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, parent({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j)) = o150)) or (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, parent({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j)) = 0)) or (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t__split_fields15;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } },
   j) = 1))) -> (position1({ us_split_fields7 = {
   rec__search_trees__search_tree__root =
   search_trees__left_rotate__t__fields;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
   rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
   rec__search_trees__search_tree__values =
   search_trees__left_rotate__t__fields3 } }, j) = position1({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 } }, j))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   search_trees__left_rotate__t__fields;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
   rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
   rec__search_trees__search_tree__values =
   search_trees__left_rotate__t__fields3 }
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 }
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
   us_split_fields7 = { rec__search_trees__search_tree__root =
   t__split_fields15; rec__search_trees__search_tree__struct = {
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
   rec__binary_trees__forest__c = t__split_fields17 } };
   rec__search_trees__search_tree__values = t__split_fields18 }
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
   search_trees__left_rotate__t__fields;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
   rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
   rec__search_trees__search_tree__values =
   search_trees__left_rotate__t__fields3 }
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((oeq(values({ us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }), values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 }
  })) = true) and ((peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, o150, 1) = peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150, 1),
  0)) and (((not (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } },
  o150) = 0)) -> (peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150),
  position1({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } },
  o150)) = peek({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150,
  1))) and ((peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150, 1),
  0) = o150) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> ((((((not (j = o150)) or
  (d = 0)) and ((not (j = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150))) or
  (not (d = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } },
  o150))))) and ((not (j = peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields15;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, o150,
  1))) or (d = 1))) and ((((model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true)) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  search_trees__left_rotate__t__fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = search_trees__left_rotate__t__fields1;
  rec__binary_trees__forest__c = search_trees__left_rotate__t__fields2 } };
  rec__search_trees__search_tree__values =
  search_trees__left_rotate__t__fields3 } }, j, d) = peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields15; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields16;
  rec__binary_trees__forest__c = t__split_fields17 } };
  rec__search_trees__search_tree__values = t__split_fields18 } }, j, d)))))))))))))))))))))) and
  ((((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__left_rotate__t__fields1; rec__binary_trees__forest__c =
  search_trees__left_rotate__t__fields2 } }) = 0) ->
  (to_rep(search_trees__left_rotate__t__fields) = 0)) and ((not (size1({
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__left_rotate__t__fields1; rec__binary_trees__forest__c =
  search_trees__left_rotate__t__fields2 } }) = 0)) ->
  (((not (to_rep(search_trees__left_rotate__t__fields) = 0)) and
  (valid_root({ us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__left_rotate__t__fields1; rec__binary_trees__forest__c =
  search_trees__left_rotate__t__fields2 } },
  to_rep(search_trees__left_rotate__t__fields)) = true)) and (ordered_leafs({
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__left_rotate__t__fields1; rec__binary_trees__forest__c =
  search_trees__left_rotate__t__fields2 } },
  to_rep(search_trees__left_rotate__t__fields),
  search_trees__left_rotate__t__fields3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s =
  search_trees__left_rotate__t__fields1; rec__binary_trees__forest__c =
  search_trees__left_rotate__t__fields2 } }) = true))))

axiom H85 : ((result61 = true) -> (((result63 = t__split_fields15) and
  (((result64 = t__split_fields16) and (result65 = t__split_fields17)) and
  (result66 = t__split_fields18))) and (result67 = t__split_fields19)))

axiom H86 : ((result61 = true) ->
  (((t__split_fields35 = search_trees__left_rotate__t__fields) and
  (((t__split_fields36 = search_trees__left_rotate__t__fields1) and
  (t__split_fields37 = search_trees__left_rotate__t__fields2)) and
  (t__split_fields38 = search_trees__left_rotate__t__fields3))) and
  (t__split_fields39 = t__split_fields19)))

axiom H87 : ((result61 = true) -> (((t_old__split_fields15 = c81b) and
  (((t_old__split_fields16 = c81b1) and (t_old__split_fields17 = c81b2)) and
  (t_old__split_fields18 = c81b3))) and (t_old__split_fields19 = c81b4)))

axiom H88 : ((result61 = true) -> ((((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c81b1; rec__binary_trees__forest__c = c81b2
  } }) = 0) -> (to_rep(c81b) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c81b1; rec__binary_trees__forest__c = c81b2
  } }) = 0)) -> (((not (to_rep(c81b) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = c81b1;
  rec__binary_trees__forest__c = c81b2 } }, to_rep(c81b)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = c81b1;
  rec__binary_trees__forest__c = c81b2 } }, to_rep(c81b),
  c81b3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = c81b1; rec__binary_trees__forest__c = c81b2
  } }) = true)))

axiom H89 : ((result61 = true) -> (((t__split_fields35 = c82b) and
  (((t__split_fields36 = c82b1) and (t__split_fields37 = c82b2)) and
  (t__split_fields38 = c82b3))) and (t__split_fields39 = c82b4)))

axiom H90 : ((result61 = true) -> ((((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }) = 0) -> (to_rep(c82b) = 0)) and ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }) = 0)) -> (((not (to_rep(c82b) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = c82b1;
  rec__binary_trees__forest__c = c82b2 } }, to_rep(c82b)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = c82b1;
  rec__binary_trees__forest__c = c82b2 } }, to_rep(c82b),
  c82b3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }) = true)))

axiom H91 : ((result61 = true) ->
  ((red_black_trees__insert__L_8__C83b__assume = x4) and in_range2(x4)))

axiom H92 : ((result61 = true) ->
  (red_black_trees__insert__L_8__C83b__assume = c83b))

axiom H93 : ((result61 = true) -> in_range2(c83b))

axiom H94 : ((result61 = true) -> ((o151 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } }, c83b)) and
  (in_range3(o151) and ((o151 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }, c83b)) and ((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } }) = 0) ->
  (o151 = 0))))))

axiom H95 : ((result61 = true) ->
  ((red_black_trees__insert__L_8__B84b__y__assume = o151) and
  in_range2(o151)))

axiom H96 : ((result61 = true) ->
  (red_black_trees__insert__L_8__B84b__y__assume = y))

axiom H97 : ((result61 = true) -> in_range2(y))

axiom H98 : ((result61 = true) -> (same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } };
  rec__red_black_trees__rbt__color = c82b4 } }) = true))

axiom H99 : ((result61 = true) -> (((result75 = t_old__split_fields15) and
  (((result76 = t_old__split_fields16) and
  (result77 = t_old__split_fields17)) and
  (result78 = t_old__split_fields18))) and
  (result79 = t_old__split_fields19)))

axiom H100 : ((result61 = true) ->
  (((t_old__split_fields20 = t__split_fields35) and
  (((t_old__split_fields21 = t__split_fields36) and
  (t_old__split_fields22 = t__split_fields37)) and
  (t_old__split_fields23 = t__split_fields38))) and
  (t_old__split_fields24 = t__split_fields39)))

axiom H101 : ((result61 = true) -> (n70 = n68))

axiom H102 : ((result61 = true) ->
  (((t_old__split_fields25 = t_old__split_fields20) and
  (((t_old__split_fields26 = t_old__split_fields21) and
  (t_old__split_fields27 = t_old__split_fields22)) and
  (t_old__split_fields28 = t_old__split_fields23))) and
  (t_old__split_fields29 = t_old__split_fields24)))

axiom H103 : ((result61 = true) -> (x5 = x4))

axiom H104 : ((result61 = true) ->
  (((t__split_fields40 = t__split_fields35) and
  (((t__split_fields41 = t__split_fields36) and
  (t__split_fields42 = t__split_fields37)) and
  (t__split_fields43 = t__split_fields38))) and
  (t__split_fields44 = t__split_fields39)))

axiom H105 : ((result61 = true) ->
  ((rho16 = search_trees__left_rotate__t__fields) and
  (((rho17 = search_trees__left_rotate__t__fields1) and
  (rho18 = search_trees__left_rotate__t__fields2)) and
  (rho19 = search_trees__left_rotate__t__fields3))))

axiom H106 : ((result61 = true) -> (n71 = n69))

axiom H107 : ((result61 = true) ->
  (((t_old__split_fields30 = t_old__split_fields20) and
  (((t_old__split_fields31 = t_old__split_fields21) and
  (t_old__split_fields32 = t_old__split_fields22)) and
  (t_old__split_fields33 = t_old__split_fields23))) and
  (t_old__split_fields34 = t_old__split_fields24)))

axiom H108 : ((result61 = true) -> (x6 = x4))

axiom H109 : ((result61 = true) ->
  (((t__split_fields45 = t__split_fields35) and
  (((t__split_fields46 = t__split_fields36) and
  (t__split_fields47 = t__split_fields37)) and
  (t__split_fields48 = t__split_fields38))) and
  (t__split_fields49 = t__split_fields39)))

axiom H110 : ((not (result61 = true)) -> (n70 = n45))

axiom H111 : ((not (result61 = true)) ->
  (((t_old__split_fields25 = t_old__split_fields15) and
  (((t_old__split_fields26 = t_old__split_fields16) and
  (t_old__split_fields27 = t_old__split_fields17)) and
  (t_old__split_fields28 = t_old__split_fields18))) and
  (t_old__split_fields29 = t_old__split_fields19)))

axiom H112 : ((not (result61 = true)) -> (x5 = x2))

axiom H113 : ((not (result61 = true)) ->
  (((t__split_fields40 = t__split_fields15) and
  (((t__split_fields41 = t__split_fields16) and
  (t__split_fields42 = t__split_fields17)) and
  (t__split_fields43 = t__split_fields18))) and
  (t__split_fields44 = t__split_fields19)))

axiom H114 : ((not (result61 = true)) -> ((rho16 = rho) and
  (((rho17 = rho1) and (rho18 = rho2)) and (rho19 = rho3))))

axiom H115 : ((not (result61 = true)) -> (n71 = n45))

axiom H116 : ((not (result61 = true)) ->
  (((t_old__split_fields30 = t_old__split_fields15) and
  (((t_old__split_fields31 = t_old__split_fields16) and
  (t_old__split_fields32 = t_old__split_fields17)) and
  (t_old__split_fields33 = t_old__split_fields18))) and
  (t_old__split_fields34 = t_old__split_fields19)))

axiom H117 : ((not (result61 = true)) -> (x6 = x2))

axiom H118 : ((not (result61 = true)) ->
  (((t__split_fields45 = t__split_fields15) and
  (((t__split_fields46 = t__split_fields16) and
  (t__split_fields47 = t__split_fields17)) and
  (t__split_fields48 = t__split_fields18))) and
  (t__split_fields49 = t__split_fields19)))

axiom H119 : (not (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields40;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }, parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields40; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }, x5)) = 0))

axiom H120 : (not (peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields40;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }, parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields40; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }, parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields40; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }, x5)),
  0) = 0))

axiom H121 : (to_rep3(o213) = 0)

axiom H122 : ((o212 = x5) and in_range2(x5))

axiom H123 : ((temp___817 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields40;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }, o212)) and
  (in_range3(temp___817) and ((temp___817 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } }, o212)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields40; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields41;
  rec__binary_trees__forest__c = t__split_fields42 } };
  rec__search_trees__search_tree__values = t__split_fields43 } }) = 0) ->
  (temp___817 = 0)))))

axiom H124 : ((1 <= temp___817) and (temp___817 <= 100))

axiom H125 : (o214 = temp___817)

axiom H126 : (o215 = (t__split_fields44[o214 <- o213]))

axiom H127 : (((o216 = t__split_fields40) and
  (((o217 = t__split_fields41) and (o218 = t__split_fields42)) and
  (o219 = t__split_fields43))) and (o220 = o215))

axiom H128 : (((temp___819 = o216) and (((temp___8191 = o217) and
  (temp___8192 = o218)) and (temp___8193 = o219))) and (temp___8194 = o220))

axiom H129 : (((result80 = t__split_fields40) and
  (((result81 = t__split_fields41) and (result82 = t__split_fields42)) and
  (result83 = t__split_fields43))) and (result84 = t__split_fields44))

axiom H130 : (((t__split_fields50 = temp___819) and
  (((t__split_fields51 = temp___8191) and
  (t__split_fields52 = temp___8192)) and
  (t__split_fields53 = temp___8193))) and (t__split_fields54 = temp___8194))

axiom H131 : (to_rep3(o224) = 1)

axiom H132 : ((o221 = x5) and in_range2(x5))

axiom H133 : ((o222 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields50;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields51;
  rec__binary_trees__forest__c = t__split_fields52 } };
  rec__search_trees__search_tree__values = t__split_fields53 } }, o221)) and
  (in_range3(o222) and ((o222 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields51;
  rec__binary_trees__forest__c = t__split_fields52 } }, o221)) and ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields50; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields51;
  rec__binary_trees__forest__c = t__split_fields52 } };
  rec__search_trees__search_tree__values = t__split_fields53 } }) = 0) ->
  (o222 = 0)))))

 (* File "red_black_trees.ads", line 59, characters 0-0 *)
goal WP_parameter_def : in_range2(o222)
