(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type true_bool

predicate in_range3(x: int) = ((1 <= x) and (x <= 1))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : true_bool, true_bool -> bool

logic dummy2 : true_bool

type true_bool__ref = { true_bool__content : true_bool
}

function true_bool__ref___projection(a: true_bool__ref) : true_bool =
  (a).true_bool__content

type index

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : index -> int

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,natural) farray

logic dummy5 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep2(first(a1)) = 1) and (0 <= to_rep2(last(a1))))))

logic remove : us_t, int -> us_t

logic remove__function_guard : us_t, us_t, int -> prop

axiom remove__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i:int [remove({ elts = a; rt = a1 }, i)]. ((in_range4(i) and
  ((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep2(first(a1)) <= i) and (i <= to_rep2(last(a1)))))) ->
  (((invariant__(remove({ elts = a; rt = a1 }, i)) = true) and
  ((to_rep2(last((remove({ elts = a; rt = a1 },
  i)).rt)) = (to_rep2(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i - 1))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 }, i)).elts[k]))))) and
  ((forall k:int. ((((i + 1) <= k) and (k <= to_rep2(last(a1)))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 },
   i)).elts[(k - 1)]))))) and
  (forall k:int. (((i <= k) and (k <= (to_rep2(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep(((remove({ elts = a; rt = a1 },
  i)).elts[k]))))))))) and dynamic_property(1, 100, to_rep2(first((remove({
  elts = a; rt = a1 }, i)).rt)), to_rep2(last((remove({ elts = a; rt = a1 },
  i)).rt)))))))

logic remove_swap : us_t, int, int -> int

logic remove_swap__function_guard : int, us_t, int, int -> prop

axiom remove_swap__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i1:int. forall i2:int [remove_swap({ elts = a; rt = a1 }, i1, i2)].
  (((in_range4(i1) and in_range4(i2)) and ((invariant__({ elts = a; rt = a1
  }) = true) and (((to_rep2(first(a1)) <= i1) and
  (i1 <= to_rep2(last(a1)))) and (((to_rep2(first(a1)) <= i2) and
  (i2 <= to_rep2(last(a1)))) and (i1 <  i2))))) -> (((of_int(remove_swap({
  elts = a; rt = a1 }, i1, i2)) = true) -> (bool_eq6((remove(remove({ elts =
  a; rt = a1 }, i1), (i2 - 1))).elts, to_rep2(first((remove(remove({ elts =
  a; rt = a1 }, i1), (i2 - 1))).rt)), to_rep2(last((remove(remove({ elts = a;
  rt = a1 }, i1), (i2 - 1))).rt)), (remove(remove({ elts = a; rt = a1 }, i2),
  i1)).elts, to_rep2(first((remove(remove({ elts = a; rt = a1 }, i2),
  i1)).rt)), to_rep2(last((remove(remove({ elts = a; rt = a1 }, i2),
  i1)).rt))) = true)) and in_range3(remove_swap({ elts = a; rt = a1 }, i1,
  i2))))))

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

axiom is_perm__def_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (((length({ elts = a; rt = a1 }) = 0) and (length({ elts = b; rt = b1
  }) = 0)) or
  (exists ia:int. (((to_rep2(first(a1)) <= ia) and
  (ia <= to_rep2(last(a1)))) and
  (exists ib:int. (((to_rep2(first(b1)) <= ib) and
  (ib <= to_rep2(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))))

logic get_witness : us_t, us_t, int -> int

logic get_witness__function_guard : int, us_t, us_t, int -> prop

axiom get_witness__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t.
  (forall ia:int [get_witness({ elts = a; rt = a1 }, { elts = b; rt = b1 },
  ia)]. ((in_range4(ia) and ((invariant__({ elts = a; rt = a1 }) = true) and
  ((invariant__({ elts = b; rt = b1 }) = true) and
  (((to_rep2(first(a1)) <= ia) and (ia <= to_rep2(last(a1)))) and
  (exists ib:int. (((to_rep2(first(b1)) <= ib) and
  (ib <= to_rep2(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))) -> ((((to_rep2(first(b1)) <= get_witness({ elts = a;
  rt = a1 }, { elts = b; rt = b1 }, ia)) and (get_witness({ elts = a; rt = a1
  }, { elts = b; rt = b1 }, ia) <= to_rep2(last(b1)))) and
  ((to_rep((a[ia])) = to_rep((b[get_witness({ elts = a; rt = a1 }, { elts =
  b; rt = b1 }, ia)]))) and (is_perm(remove({ elts = a; rt = a1 }, ia),
  remove({ elts = b; rt = b1 }, get_witness({ elts = a; rt = a1 }, { elts =
  b; rt = b1 }, ia))) = true))) and in_range4(get_witness({ elts = a; rt = a1
  }, { elts = b; rt = b1 }, ia))))))

type us_split_fields = { rec__perm__witnesses__ia : index;
rec__perm__witnesses__ib : index
}

function us_split_fields_Ia__projection(a: us_split_fields) : index =
  (a).rec__perm__witnesses__ia

function us_split_fields_Ib__projection(a: us_split_fields) : index =
  (a).rec__perm__witnesses__ib

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__perm__witnesses__ia) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ia)) and
  (to_rep1(((a).us_split_fields1).rec__perm__witnesses__ib) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ib))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__perm__witnesses__ia) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ia)) and
  (to_rep1(((a).us_split_fields1).rec__perm__witnesses__ib) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ib)))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:index. forall a1:index. (0 <= object__size1({ us_split_fields1 =
  { rec__perm__witnesses__ia = a; rec__perm__witnesses__ib = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:index. forall a1:index. (0 <= object__alignment1({
  us_split_fields1 = { rec__perm__witnesses__ia = a;
  rec__perm__witnesses__ib = a1 } })))

logic perm__witnesses__ia__first__bit : int

logic perm__witnesses__ia__last__bit : int

logic perm__witnesses__ia__position : int

axiom perm__witnesses__ia__first__bit_axiom :
  (0 <= perm__witnesses__ia__first__bit)

axiom perm__witnesses__ia__last__bit_axiom :
  (perm__witnesses__ia__first__bit <  perm__witnesses__ia__last__bit)

axiom perm__witnesses__ia__position_axiom :
  (0 <= perm__witnesses__ia__position)

logic perm__witnesses__ib__first__bit : int

logic perm__witnesses__ib__last__bit : int

logic perm__witnesses__ib__position : int

axiom perm__witnesses__ib__first__bit_axiom :
  (0 <= perm__witnesses__ib__first__bit)

axiom perm__witnesses__ib__last__bit_axiom :
  (perm__witnesses__ib__first__bit <  perm__witnesses__ib__last__bit)

axiom perm__witnesses__ib__position_axiom :
  (0 <= perm__witnesses__ib__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : index

logic dummy7 : index

type witnesses__ref = { witnesses__content : us_rep
}

function witnesses__ref___projection(a: witnesses__ref) : us_rep =
  (a).witnesses__content

logic get_witnesses : us_t, us_t -> us_rep

logic get_witnesses__function_guard : us_rep, us_t, us_t -> prop

axiom get_witnesses__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [get_witnesses({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1
  }) = true) and (0 <  length({ elts = a; rt = a1 }))))) ->
  (((to_rep2(first(a1)) <= to_rep1(((get_witnesses({ elts = a; rt = a1 }, {
  elts = b; rt = b1 })).us_split_fields1).rec__perm__witnesses__ia)) and
  (to_rep1(((get_witnesses({ elts = a; rt = a1 }, { elts = b; rt = b1
  })).us_split_fields1).rec__perm__witnesses__ia) <= to_rep2(last(a1)))) and
  (((to_rep2(first(b1)) <= to_rep1(((get_witnesses({ elts = a; rt = a1 }, {
  elts = b; rt = b1 })).us_split_fields1).rec__perm__witnesses__ib)) and
  (to_rep1(((get_witnesses({ elts = a; rt = a1 }, { elts = b; rt = b1
  })).us_split_fields1).rec__perm__witnesses__ib) <= to_rep2(last(b1)))) and
  ((to_rep((a[to_rep1(((get_witnesses({ elts = a; rt = a1 }, { elts = b; rt =
  b1
  })).us_split_fields1).rec__perm__witnesses__ia)])) = to_rep((b[to_rep1(((get_witnesses({
  elts = a; rt = a1 }, { elts = b; rt = b1
  })).us_split_fields1).rec__perm__witnesses__ib)]))) and (is_perm(remove({
  elts = a; rt = a1 }, to_rep1(((get_witnesses({ elts = a; rt = a1 }, {
  elts = b; rt = b1 })).us_split_fields1).rec__perm__witnesses__ia)),
  remove({ elts = b; rt = b1 }, to_rep1(((get_witnesses({ elts = a; rt = a1
  }, { elts = b; rt = b1
  })).us_split_fields1).rec__perm__witnesses__ib))) = true))))))

logic shift_perm_l : us_t, us_t, us_t -> int

logic shift_perm_l__function_guard : int, us_t, us_t, us_t -> prop

axiom shift_perm_l__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t. forall c:(int,natural) farray. forall c1:t [shift_perm_l({
  elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts = c; rt = c1 })].
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and ((invariant__({ elts = c; rt = c1 }) = true) and
  ((bool_eq6(a, to_rep2(first(a1)), to_rep2(last(a1)), c, to_rep2(first(c1)),
  to_rep2(last(c1))) = true) and (is_perm({ elts = a; rt = a1 }, { elts = b;
  rt = b1 }) = true))))) -> (((of_int(shift_perm_l({ elts = a; rt = a1 }, {
  elts = b; rt = b1 }, { elts = c; rt = c1 })) = true) -> (is_perm({ elts =
  c; rt = c1 }, { elts = b; rt = b1 }) = true)) and in_range3(shift_perm_l({
  elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts = c; rt = c1 })))))

logic shift_perm_r : us_t, us_t, us_t -> int

logic shift_perm_r__function_guard : int, us_t, us_t, us_t -> prop

axiom shift_perm_r__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t. forall c:(int,natural) farray. forall c1:t [shift_perm_r({
  elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts = c; rt = c1 })].
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and ((invariant__({ elts = c; rt = c1 }) = true) and
  ((bool_eq6(c, to_rep2(first(c1)), to_rep2(last(c1)), b, to_rep2(first(b1)),
  to_rep2(last(b1))) = true) and (is_perm({ elts = a; rt = a1 }, { elts = b;
  rt = b1 }) = true))))) -> (((of_int(shift_perm_r({ elts = a; rt = a1 }, {
  elts = b; rt = b1 }, { elts = c; rt = c1 })) = true) -> (is_perm({ elts =
  a; rt = a1 }, { elts = c; rt = c1 }) = true)) and in_range3(shift_perm_r({
  elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts = c; rt = c1 })))))

logic a : (int,natural) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,natural) farray

logic b1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic extended_perm : us_t, us_t -> int

logic extended_perm__function_guard : int, us_t, us_t -> prop

logic w : index

logic w1 : index

logic attr__ATTRIBUTE_ADDRESS2 : int

logic aa : (int,natural) farray

logic aa1 : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic bb : (int,natural) farray

logic bb1 : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t125b__ref = { t125b__content : integer
}

function t125b__ref___projection(a2: t125b__ref) : integer =
  (a2).t125b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom w__def_axiom : ({ us_split_fields1 = { rec__perm__witnesses__ia = w;
  rec__perm__witnesses__ib = w1 } } = get_witnesses({ elts = a; rt = a1 }, {
  elts = b; rt = b1 }))

axiom aa__def_axiom : ({ elts = aa; rt = aa1 } = remove({ elts = a; rt = a1
  }, to_rep1(w)))

axiom bb__def_axiom : ({ elts = bb; rt = bb1 } = remove({ elts = b; rt = b1
  }, to_rep1(w1)))

logic ih : int

logic ia : int

logic ib : int

logic perm__extended_perm__result : int

logic perm__extended_perm__B_6__w__assume : index

logic perm__extended_perm__B_6__w__assume1 : index

logic perm__extended_perm__B_6__aa__assume : (int,natural) farray

logic perm__extended_perm__B_6__aa__assume1 : t

logic perm__extended_perm__B_6__bb__assume : (int,natural) farray

logic perm__extended_perm__B_6__bb__assume1 : t

logic o : int

logic temp___595 : int

logic temp___594 : int

logic temp___593 : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : (int,natural) farray

logic o7 : t

logic o8 : (int,natural) farray

logic o9 : t

logic o10 : int

logic o11 : (int,natural) farray

logic o12 : t

logic o13 : int

logic o14 : (int,natural) farray

logic o15 : t

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : (int,natural) farray

logic o20 : t

logic o21 : int

logic o22 : (int,natural) farray

logic o23 : t

logic o24 : (int,natural) farray

logic o25 : t

logic o26 : (int,natural) farray

logic o27 : t

logic o28 : int

logic o29 : (int,natural) farray

logic o30 : t

logic o31 : int

logic o32 : int

logic o33 : (int,natural) farray

logic o34 : t

logic o35 : int

logic o36 : (int,natural) farray

logic o37 : t

logic o38 : (int,natural) farray

logic o39 : t

logic o40 : int

logic o41 : (int,natural) farray

logic o42 : t

logic us : bool

logic o43 : int

logic o44 : (int,natural) farray

logic o45 : t

logic o46 : (int,natural) farray

logic o47 : t

logic us1 : bool

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : (int,natural) farray

logic o52 : t

logic o53 : int

logic o54 : (int,natural) farray

logic o55 : t

logic o56 : int

logic o57 : (int,natural) farray

logic o58 : t

logic o59 : (int,natural) farray

logic o60 : t

logic o61 : (int,natural) farray

logic o62 : t

logic o63 : int

logic o64 : int

logic o65 : (int,natural) farray

logic o66 : t

logic o67 : int

logic o68 : (int,natural) farray

logic o69 : t

logic o70 : (int,natural) farray

logic o71 : t

logic o72 : (int,natural) farray

logic o73 : t

logic us2 : bool

logic o74 : int

logic o75 : (int,natural) farray

logic o76 : t

logic o77 : (int,natural) farray

logic o78 : t

logic us3 : bool

logic o79 : int

logic o80 : int

logic o81 : int

logic o82 : int

logic o83 : int

logic o84 : int

logic o85 : int

logic o86 : (int,natural) farray

logic o87 : t

logic o88 : (int,natural) farray

logic o89 : t

logic o90 : int

logic o91 : (int,natural) farray

logic o92 : t

logic o93 : (int,natural) farray

logic o94 : t

logic o95 : int

logic o96 : int

logic o97 : int

logic o98 : (int,natural) farray

logic o99 : t

logic o100 : (int,natural) farray

logic o101 : t

logic o102 : (int,natural) farray

logic o103 : t

logic o104 : (int,natural) farray

logic o105 : t

logic o106 : int

logic o107 : (int,natural) farray

logic o108 : t

logic o109 : int

logic o110 : int

logic o111 : (int,natural) farray

logic o112 : t

logic o113 : (int,natural) farray

logic o114 : t

logic o115 : (int,natural) farray

logic o116 : t

logic o117 : int

logic o118 : (int,natural) farray

logic o119 : t

logic us4 : bool

logic o120 : int

logic o121 : (int,natural) farray

logic o122 : t

logic o123 : (int,natural) farray

logic o124 : t

logic us5 : bool

logic o125 : int

logic o126 : int

logic o127 : int

logic o128 : (int,natural) farray

logic o129 : t

logic o130 : (int,natural) farray

logic o131 : t

logic o132 : int

logic o133 : (int,natural) farray

logic o134 : t

logic o135 : (int,natural) farray

logic o136 : t

logic o137 : (int,natural) farray

logic o138 : t

logic o139 : int

logic o140 : int

logic o141 : (int,natural) farray

logic o142 : t

logic o143 : (int,natural) farray

logic o144 : t

logic o145 : (int,natural) farray

logic o146 : t

logic o147 : (int,natural) farray

logic o148 : t

logic us6 : bool

logic o149 : int

logic o150 : (int,natural) farray

logic o151 : t

logic o152 : (int,natural) farray

logic o153 : t

logic us7 : bool

logic ib1 : int

logic o154 : int

logic o155 : (int,natural) farray

logic o156 : t

logic o157 : int

logic o158 : (int,natural) farray

logic o159 : t

logic o160 : int

logic o161 : natural

logic o162 : int

logic o163 : natural

logic o164 : int

logic o165 : int

logic k : int

logic ib2 : int

logic o166 : int

logic o167 : (int,natural) farray

logic o168 : t

logic o169 : int

logic o170 : (int,natural) farray

logic o171 : t

logic o172 : int

logic o173 : natural

logic o174 : int

logic o175 : natural

logic o176 : int

logic o177 : int

logic o178 : int

logic o179 : int

logic o180 : int

logic o181 : int

logic o182 : int

logic o183 : (int,natural) farray

logic o184 : t

logic o185 : (int,natural) farray

logic o186 : t

logic o187 : int

logic o188 : (int,natural) farray

logic o189 : t

logic o190 : int

logic o191 : (int,natural) farray

logic o192 : t

logic o193 : int

logic o194 : int

logic o195 : int

logic o196 : (int,natural) farray

logic o197 : t

logic o198 : int

logic o199 : (int,natural) farray

logic o200 : t

logic o201 : (int,natural) farray

logic o202 : t

logic o203 : (int,natural) farray

logic o204 : t

logic o205 : int

logic o206 : (int,natural) farray

logic o207 : t

logic o208 : int

logic o209 : int

logic o210 : (int,natural) farray

logic o211 : t

logic o212 : int

logic o213 : (int,natural) farray

logic o214 : t

logic o215 : (int,natural) farray

logic o216 : t

logic o217 : int

logic o218 : (int,natural) farray

logic o219 : t

logic us8 : bool

logic o220 : int

logic o221 : (int,natural) farray

logic o222 : t

logic o223 : (int,natural) farray

logic o224 : t

logic us9 : bool

logic o225 : int

logic o226 : int

logic o227 : int

logic o228 : (int,natural) farray

logic o229 : t

logic o230 : int

logic o231 : (int,natural) farray

logic o232 : t

logic o233 : int

logic o234 : (int,natural) farray

logic o235 : t

logic o236 : (int,natural) farray

logic o237 : t

logic o238 : (int,natural) farray

logic o239 : t

logic o240 : int

logic o241 : int

logic o242 : (int,natural) farray

logic o243 : t

logic o244 : int

logic o245 : (int,natural) farray

logic o246 : t

logic o247 : (int,natural) farray

logic o248 : t

logic o249 : (int,natural) farray

logic o250 : t

logic us10 : bool

logic o251 : int

logic o252 : (int,natural) farray

logic o253 : t

logic o254 : (int,natural) farray

logic o255 : t

logic us11 : bool

logic o256 : int

logic o257 : int

logic o258 : int

logic o259 : int

logic o260 : int

logic o261 : int

logic o262 : int

logic o263 : (int,natural) farray

logic o264 : t

logic o265 : (int,natural) farray

logic o266 : t

logic o267 : int

logic o268 : (int,natural) farray

logic o269 : t

logic o270 : (int,natural) farray

logic o271 : t

logic o272 : int

logic o273 : int

logic o274 : int

logic o275 : (int,natural) farray

logic o276 : t

logic o277 : (int,natural) farray

logic o278 : t

logic o279 : (int,natural) farray

logic o280 : t

logic o281 : (int,natural) farray

logic o282 : t

logic o283 : int

logic o284 : (int,natural) farray

logic o285 : t

logic o286 : int

logic o287 : int

logic o288 : (int,natural) farray

logic o289 : t

logic o290 : (int,natural) farray

logic o291 : t

logic o292 : (int,natural) farray

logic o293 : t

logic o294 : int

logic o295 : (int,natural) farray

logic o296 : t

logic us12 : bool

logic o297 : int

logic o298 : (int,natural) farray

logic o299 : t

logic o300 : (int,natural) farray

logic o301 : t

logic us13 : bool

logic o302 : int

logic o303 : int

logic o304 : int

logic o305 : (int,natural) farray

logic o306 : t

logic o307 : (int,natural) farray

logic o308 : t

logic o309 : int

logic o310 : (int,natural) farray

logic o311 : t

logic o312 : (int,natural) farray

logic o313 : t

logic o314 : (int,natural) farray

logic o315 : t

logic o316 : int

logic o317 : int

logic o318 : (int,natural) farray

logic o319 : t

logic o320 : (int,natural) farray

logic o321 : t

logic o322 : (int,natural) farray

logic o323 : t

logic o324 : (int,natural) farray

logic o325 : t

logic us14 : bool

logic o326 : int

logic o327 : (int,natural) farray

logic o328 : t

logic o329 : (int,natural) farray

logic o330 : t

logic us15 : bool

logic ib3 : int

logic o331 : int

logic o332 : (int,natural) farray

logic o333 : t

logic o334 : int

logic o335 : (int,natural) farray

logic o336 : t

logic o337 : int

logic o338 : natural

logic o339 : int

logic o340 : natural

logic o341 : int

logic o342 : int

logic ia1 : int

logic ib4 : int

logic o343 : int

logic o344 : (int,natural) farray

logic o345 : t

logic o346 : int

logic o347 : (int,natural) farray

logic o348 : t

logic o349 : int

logic o350 : natural

logic o351 : int

logic o352 : natural

logic o353 : int

logic o354 : int

logic ih1 : int

logic ia2 : int

logic ib5 : int

logic perm__extended_perm__result1 : int

logic result : bool

logic result1 : bool

logic result2 : int

logic perm__extended_perm__result2 : int

logic result3 : int

logic ih2 : int

logic result4 : int

logic ia3 : int

logic result5 : int

logic ib6 : int

logic result6 : int

logic ih3 : int

logic result7 : int

logic ib7 : int

logic result8 : int

logic ih4 : int

logic result9 : int

logic ih5 : int

logic result10 : int

logic ih6 : int

logic result11 : int

logic ib8 : int

logic result12 : int

logic ih7 : int

logic result13 : int

logic ih8 : int

logic result14 : int

logic ih9 : int

logic result15 : int

logic ib9 : int

logic result16 : int

logic ih10 : int

logic result17 : int

logic ih11 : int

logic result18 : int

logic ih12 : int

logic result19 : int

logic ib10 : int

logic result20 : int

logic ih13 : int

logic result21 : int

logic ih14 : int

logic result22 : bool

logic ih15 : int

logic ia4 : int

logic ib11 : int

logic result23 : bool

logic result24 : int

logic ia5 : int

logic result25 : int

logic ib12 : int

logic result26 : int

logic ih16 : int

logic result27 : int

logic ib13 : int

logic result28 : int

logic ih17 : int

logic result29 : int

logic ih18 : int

logic result30 : int

logic ih19 : int

logic result31 : int

logic ib14 : int

logic result32 : int

logic ih20 : int

logic result33 : int

logic ih21 : int

logic result34 : int

logic ih22 : int

logic result35 : int

logic ib15 : int

logic result36 : int

logic ih23 : int

logic result37 : int

logic ih24 : int

logic result38 : int

logic ih25 : int

logic result39 : int

logic ib16 : int

logic result40 : int

logic ih26 : int

logic result41 : int

logic ih27 : int

logic result42 : bool

logic ih28 : int

logic ia6 : int

logic ib17 : int

logic ih29 : int

logic ia7 : int

logic ib18 : int

logic ih30 : int

logic ia8 : int

logic ib19 : int

logic ih31 : int

logic ia9 : int

logic ib20 : int

logic ih32 : int

logic ia10 : int

logic ib21 : int

logic ih33 : int

logic ia11 : int

logic ib22 : int

logic result43 : int

logic perm__extended_perm__result3 : int

logic ih34 : int

logic ia12 : int

logic ib23 : int

logic perm__extended_perm__result4 : int

logic ih35 : int

logic ia13 : int

logic ib24 : int

logic perm__extended_perm__result5 : int

logic ih36 : int

logic ia14 : int

logic ib25 : int

logic perm__extended_perm__result6 : int

logic ih37 : int

logic ia15 : int

logic ib26 : int

logic perm__extended_perm__result7 : int

logic ih38 : int

logic ia16 : int

logic ib27 : int

logic perm__extended_perm__result8 : int

logic ih39 : int

logic ia17 : int

logic ib28 : int

logic perm__extended_perm__result9 : int

logic result44 : bool

axiom H : dynamic_property(1, 100, to_rep2(first(a1)), to_rep2(last(a1)))

axiom H1 : dynamic_property(1, 100, to_rep2(first(b1)), to_rep2(last(b1)))

axiom H2 : ((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({
  elts = b; rt = b1 }) = true) and (is_perm({ elts = a; rt = a1 }, { elts =
  b; rt = b1 }) = true)))

axiom H3 : (not (length({ elts = a; rt = a1 }) = 0))

axiom H4 : (perm__extended_perm__result2 = perm__extended_perm__result)

axiom H5 : (perm__extended_perm__result2 = perm__extended_perm__result1)

axiom H6 : (({ us_split_fields1 = { rec__perm__witnesses__ia =
  perm__extended_perm__B_6__w__assume; rec__perm__witnesses__ib =
  perm__extended_perm__B_6__w__assume1 } } = get_witnesses({ elts = a; rt =
  a1 }, { elts = b; rt = b1 })) and
  (((to_rep2(first(a1)) <= to_rep1(perm__extended_perm__B_6__w__assume)) and
  (to_rep1(perm__extended_perm__B_6__w__assume) <= to_rep2(last(a1)))) and
  (((to_rep2(first(b1)) <= to_rep1(perm__extended_perm__B_6__w__assume1)) and
  (to_rep1(perm__extended_perm__B_6__w__assume1) <= to_rep2(last(b1)))) and
  ((to_rep((a[to_rep1(perm__extended_perm__B_6__w__assume)])) = to_rep((b[to_rep1(perm__extended_perm__B_6__w__assume1)]))) and
  (is_perm(remove({ elts = a; rt = a1 },
  to_rep1(perm__extended_perm__B_6__w__assume)), remove({ elts = b; rt = b1
  }, to_rep1(perm__extended_perm__B_6__w__assume1))) = true)))))

axiom H7 : ((perm__extended_perm__B_6__w__assume = w) and
  (perm__extended_perm__B_6__w__assume1 = w1))

axiom H8 : (({ elts = perm__extended_perm__B_6__aa__assume; rt =
  perm__extended_perm__B_6__aa__assume1 } = remove({ elts = a; rt = a1 },
  to_rep1(w))) and (dynamic_property(1, 100,
  to_rep2(first(perm__extended_perm__B_6__aa__assume1)),
  to_rep2(last(perm__extended_perm__B_6__aa__assume1))) and ((invariant__({
  elts = perm__extended_perm__B_6__aa__assume; rt =
  perm__extended_perm__B_6__aa__assume1 }) = true) and
  ((to_rep2(last(perm__extended_perm__B_6__aa__assume1)) = (to_rep2(last(a1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (to_rep1(w) - 1))) ->
   (to_rep((a[k1])) = to_rep((perm__extended_perm__B_6__aa__assume[k1]))))) and
  ((forall k1:int. ((((to_rep1(w) + 1) <= k1) and
   (k1 <= to_rep2(last(a1)))) ->
   (to_rep((a[k1])) = to_rep((perm__extended_perm__B_6__aa__assume[(k1 - 1)]))))) and
  (forall k1:int. (((to_rep1(w) <= k1) and
  (k1 <= (to_rep2(last(a1)) - 1))) ->
  (to_rep((a[(k1 + 1)])) = to_rep((perm__extended_perm__B_6__aa__assume[k1])))))))))))

axiom H9 : ((perm__extended_perm__B_6__aa__assume = aa) and
  (perm__extended_perm__B_6__aa__assume1 = aa1))

axiom H10 : dynamic_property(1, 100, to_rep2(first(aa1)), to_rep2(last(aa1)))

axiom H11 : (({ elts = perm__extended_perm__B_6__bb__assume; rt =
  perm__extended_perm__B_6__bb__assume1 } = remove({ elts = b; rt = b1 },
  to_rep1(w1))) and (dynamic_property(1, 100,
  to_rep2(first(perm__extended_perm__B_6__bb__assume1)),
  to_rep2(last(perm__extended_perm__B_6__bb__assume1))) and ((invariant__({
  elts = perm__extended_perm__B_6__bb__assume; rt =
  perm__extended_perm__B_6__bb__assume1 }) = true) and
  ((to_rep2(last(perm__extended_perm__B_6__bb__assume1)) = (to_rep2(last(b1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (to_rep1(w1) - 1))) ->
   (to_rep((b[k1])) = to_rep((perm__extended_perm__B_6__bb__assume[k1]))))) and
  ((forall k1:int. ((((to_rep1(w1) + 1) <= k1) and
   (k1 <= to_rep2(last(b1)))) ->
   (to_rep((b[k1])) = to_rep((perm__extended_perm__B_6__bb__assume[(k1 - 1)]))))) and
  (forall k1:int. (((to_rep1(w1) <= k1) and
  (k1 <= (to_rep2(last(b1)) - 1))) ->
  (to_rep((b[(k1 + 1)])) = to_rep((perm__extended_perm__B_6__bb__assume[k1])))))))))))

axiom H12 : ((perm__extended_perm__B_6__bb__assume = bb) and
  (perm__extended_perm__B_6__bb__assume1 = bb1))

axiom H13 : dynamic_property(1, 100, to_rep2(first(bb1)), to_rep2(last(bb1)))

axiom H14 : ((o = extended_perm({ elts = aa; rt = aa1 }, { elts = bb; rt =
  bb1 })) and (in_range3(o) and ((of_int(o) = true) ->
  (forall ia18:int. (((to_rep2(first(aa1)) <= ia18) and
  (ia18 <= to_rep2(last(aa1)))) ->
  (exists ib29:int. (((to_rep2(first(bb1)) <= ib29) and
  (ib29 <= to_rep2(last(bb1)))) and
  ((to_rep((aa[ia18])) = to_rep((bb[ib29]))) and (is_perm(remove({ elts = aa;
  rt = aa1 }, ia18), remove({ elts = bb; rt = bb1 }, ib29)) = true)))))))))

axiom H15 : (result3 = ih)

axiom H16 : (ih2 = o)

axiom H17 : in_range3(ih2)

axiom H18 : (of_int(ih2) = true)

axiom H19 : (result4 = ia)

axiom H20 : (ia3 = to_rep2(first(a1)))

axiom H21 : (to_rep2(first(a1)) <= ia3)

axiom H22 : (ia3 <= to_rep2(last(a1)))

axiom H23 : ((1 <= 100) -> in_range4(ib))

axiom H24 : (not (ia3 = to_rep1(w)))

axiom H25 : (ia3 <  to_rep1(w))

axiom H26 : ((o1 = ia3) and in_range4(ia3))

axiom H27 : ((o2 = remove_swap({ elts = a; rt = a1 }, o1, to_rep1(w))) and
  (in_range3(o2) and ((of_int(o2) = true) -> (bool_eq6((remove(remove({
  elts = a; rt = a1 }, o1), (to_rep1(w) - 1))).elts,
  to_rep2(first((remove(remove({ elts = a; rt = a1 }, o1),
  (to_rep1(w) - 1))).rt)), to_rep2(last((remove(remove({ elts = a; rt = a1 },
  o1), (to_rep1(w) - 1))).rt)), (remove(remove({ elts = a; rt = a1 },
  to_rep1(w)), o1)).elts, to_rep2(first((remove(remove({ elts = a; rt = a1 },
  to_rep1(w)), o1)).rt)), to_rep2(last((remove(remove({ elts = a; rt = a1 },
  to_rep1(w)), o1)).rt))) = true))))

axiom H28 : (result6 = ih2)

axiom H29 : (ih3 = o2)

axiom H30 : (of_int(ih3) = true)

axiom H31 : ((o3 = ia3) and in_range4(ia3))

axiom H32 : ((o4 = get_witness({ elts = aa; rt = aa1 }, { elts = bb; rt = bb1
  }, o3)) and (in_range4(o4) and (((to_rep2(first(bb1)) <= o4) and
  (o4 <= to_rep2(last(bb1)))) and ((to_rep((aa[o3])) = to_rep((bb[o4]))) and
  (is_perm(remove({ elts = aa; rt = aa1 }, o3), remove({ elts = bb; rt = bb1
  }, o4)) = true)))))

axiom H33 : (result7 = ib)

axiom H34 : (ib7 = o4)

axiom H35 : ((o13 = (to_rep1(w) - 1)) and in_range4((to_rep1(w) - 1)))

axiom H36 : ((o10 = ia3) and in_range4(ia3))

axiom H37 : (({ elts = o11; rt = o12 } = remove({ elts = a; rt = a1 },
  o10)) and (dynamic_property(1, 100, to_rep2(first(o12)),
  to_rep2(last(o12))) and ((invariant__({ elts = o11; rt = o12 }) = true) and
  ((to_rep2(last(o12)) = (to_rep2(last(a1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (o10 - 1))) ->
   (to_rep((a[k1])) = to_rep((o11[k1]))))) and
  ((forall k1:int. ((((o10 + 1) <= k1) and (k1 <= to_rep2(last(a1)))) ->
   (to_rep((a[k1])) = to_rep((o11[(k1 - 1)]))))) and
  (forall k1:int. (((o10 <= k1) and (k1 <= (to_rep2(last(a1)) - 1))) ->
  (to_rep((a[(k1 + 1)])) = to_rep((o11[k1])))))))))))

axiom H38 : (({ elts = o14; rt = o15 } = remove({ elts = o11; rt = o12 },
  o13)) and (dynamic_property(1, 100, to_rep2(first(o15)),
  to_rep2(last(o15))) and ((invariant__({ elts = o14; rt = o15 }) = true) and
  ((to_rep2(last(o15)) = (to_rep2(last(o12)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (o13 - 1))) ->
   (to_rep((o11[k1])) = to_rep((o14[k1]))))) and
  ((forall k1:int. ((((o13 + 1) <= k1) and (k1 <= to_rep2(last(o12)))) ->
   (to_rep((o11[k1])) = to_rep((o14[(k1 - 1)]))))) and
  (forall k1:int. (((o13 <= k1) and (k1 <= (to_rep2(last(o12)) - 1))) ->
  (to_rep((o11[(k1 + 1)])) = to_rep((o14[k1])))))))))))

axiom H39 : (({ elts = o8; rt = o9 } = remove({ elts = bb; rt = bb1 },
  ib7)) and (dynamic_property(1, 100, to_rep2(first(o9)),
  to_rep2(last(o9))) and ((invariant__({ elts = o8; rt = o9 }) = true) and
  ((to_rep2(last(o9)) = (to_rep2(last(bb1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (ib7 - 1))) ->
   (to_rep((bb[k1])) = to_rep((o8[k1]))))) and
  ((forall k1:int. ((((ib7 + 1) <= k1) and (k1 <= to_rep2(last(bb1)))) ->
   (to_rep((bb[k1])) = to_rep((o8[(k1 - 1)]))))) and
  (forall k1:int. (((ib7 <= k1) and (k1 <= (to_rep2(last(bb1)) - 1))) ->
  (to_rep((bb[(k1 + 1)])) = to_rep((o8[k1])))))))))))

axiom H40 : ((o5 = ia3) and in_range4(ia3))

axiom H41 : (({ elts = o6; rt = o7 } = remove({ elts = aa; rt = aa1 },
  o5)) and (dynamic_property(1, 100, to_rep2(first(o7)),
  to_rep2(last(o7))) and ((invariant__({ elts = o6; rt = o7 }) = true) and
  ((to_rep2(last(o7)) = (to_rep2(last(aa1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (o5 - 1))) ->
   (to_rep((aa[k1])) = to_rep((o6[k1]))))) and
  ((forall k1:int. ((((o5 + 1) <= k1) and (k1 <= to_rep2(last(aa1)))) ->
   (to_rep((aa[k1])) = to_rep((o6[(k1 - 1)]))))) and
  (forall k1:int. (((o5 <= k1) and (k1 <= (to_rep2(last(aa1)) - 1))) ->
  (to_rep((aa[(k1 + 1)])) = to_rep((o6[k1])))))))))))

axiom H42 : ((o16 = shift_perm_l({ elts = o6; rt = o7 }, { elts = o8; rt = o9
  }, { elts = o14; rt = o15 })) and (in_range3(o16) and
  ((of_int(o16) = true) -> (is_perm({ elts = o14; rt = o15 }, { elts = o8;
  rt = o9 }) = true))))

axiom H43 : (result8 = ih3)

axiom H44 : (ih4 = o16)

axiom H45 : (of_int(ih4) = true)

axiom H46 : (not (ib7 <  to_rep1(w1)))

axiom H47 : ((o48 = (ib7 + 1)) and in_range4((ib7 + 1)))

axiom H48 : (result11 = ib7)

axiom H49 : (ib8 = o48)

axiom H50 : ((o49 = remove_swap({ elts = b; rt = b1 }, to_rep1(w1), ib8)) and
  (in_range3(o49) and ((of_int(o49) = true) -> (bool_eq6((remove(remove({
  elts = b; rt = b1 }, to_rep1(w1)), (ib8 - 1))).elts,
  to_rep2(first((remove(remove({ elts = b; rt = b1 }, to_rep1(w1)),
  (ib8 - 1))).rt)), to_rep2(last((remove(remove({ elts = b; rt = b1 },
  to_rep1(w1)), (ib8 - 1))).rt)), (remove(remove({ elts = b; rt = b1 }, ib8),
  to_rep1(w1))).elts, to_rep2(first((remove(remove({ elts = b; rt = b1 },
  ib8), to_rep1(w1))).rt)), to_rep2(last((remove(remove({ elts = b; rt = b1
  }, ib8), to_rep1(w1))).rt))) = true))))

axiom H51 : (result12 = ih4)

axiom H52 : (ih7 = o49)

axiom H53 : (of_int(ih7) = true)

axiom H54 : (({ elts = o59; rt = o60 } = remove({ elts = b; rt = b1 },
  ib8)) and (dynamic_property(1, 100, to_rep2(first(o60)),
  to_rep2(last(o60))) and ((invariant__({ elts = o59; rt = o60 }) = true) and
  ((to_rep2(last(o60)) = (to_rep2(last(b1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (ib8 - 1))) ->
   (to_rep((b[k1])) = to_rep((o59[k1]))))) and
  ((forall k1:int. ((((ib8 + 1) <= k1) and (k1 <= to_rep2(last(b1)))) ->
   (to_rep((b[k1])) = to_rep((o59[(k1 - 1)]))))) and
  (forall k1:int. (((ib8 <= k1) and (k1 <= (to_rep2(last(b1)) - 1))) ->
  (to_rep((b[(k1 + 1)])) = to_rep((o59[k1])))))))))))

axiom H55 : (({ elts = o61; rt = o62 } = remove({ elts = o59; rt = o60 },
  to_rep1(w1))) and (dynamic_property(1, 100, to_rep2(first(o62)),
  to_rep2(last(o62))) and ((invariant__({ elts = o61; rt = o62 }) = true) and
  ((to_rep2(last(o62)) = (to_rep2(last(o60)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (to_rep1(w1) - 1))) ->
   (to_rep((o59[k1])) = to_rep((o61[k1]))))) and
  ((forall k1:int. ((((to_rep1(w1) + 1) <= k1) and
   (k1 <= to_rep2(last(o60)))) ->
   (to_rep((o59[k1])) = to_rep((o61[(k1 - 1)]))))) and
  (forall k1:int. (((to_rep1(w1) <= k1) and
  (k1 <= (to_rep2(last(o60)) - 1))) ->
  (to_rep((o59[(k1 + 1)])) = to_rep((o61[k1])))))))))))

axiom H56 : ((o56 = (ib8 - 1)) and in_range4((ib8 - 1)))

axiom H57 : (({ elts = o57; rt = o58 } = remove({ elts = bb; rt = bb1 },
  o56)) and (dynamic_property(1, 100, to_rep2(first(o58)),
  to_rep2(last(o58))) and ((invariant__({ elts = o57; rt = o58 }) = true) and
  ((to_rep2(last(o58)) = (to_rep2(last(bb1)) - 1)) and
  ((forall k1:int. (((1 <= k1) and (k1 <= (o56 - 1))) ->
   (to_rep((bb[k1])) = to_rep((o57[k1]))))) and
  ((forall k1:int. ((((o56 + 1) <= k1) and (k1 <= to_rep2(last(bb1)))) ->
   (to_rep((bb[k1])) = to_rep((o57[(k1 - 1)]))))) and
  (forall k1:int. (((o56 <= k1) and (k1 <= (to_rep2(last(bb1)) - 1))) ->
  (to_rep((bb[(k1 + 1)])) = to_rep((o57[k1])))))))))))

 (* File "perm.ads", line 2, characters 0-0 *)
goal WP_parameter_def : in_range4((to_rep1(w) - 1))
