(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (character character) Bool)
(declare-const dummy3 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((text__ref (mk_text__ref (text__content us_t)))))
(define-fun text__ref___projection ((a text__ref)) us_t (text__content a))
(declare-fun partial_match_at (us_t us_t Int Int) Bool)
(declare-fun partial_match_at__function_guard (Bool us_t us_t Int Int) Bool)
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_159 us_t) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (and (=> (not (= temp___skip_constant_156 true)) (dynamic_property 1 2147483647 (first1 temp___expr_159) (last1 temp___expr_159))) (=> (= temp___do_toplevel_157 true) (=> (= temp___is_init_155 true) (= (first1 temp___expr_159) 1)))))
(define-fun dynamic_predicate ((temp___162 us_t)) Bool (= (first1 temp___162) 1))
(assert true)
(assert (forall ((needle us_t) (haystack us_t)) (forall ((loc Int) (len Int)) (! (= (= (partial_match_at needle haystack loc len) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i len)) (= (to_rep (select (to_array needle) i)) (to_rep (select (to_array haystack) (+ loc (- i 1)))))))) :pattern ((partial_match_at needle haystack loc len))))))
(declare-fun match_at (us_t us_t Int) Bool)
(declare-fun match_at__function_guard (Bool us_t us_t Int) Bool)
(assert true)
(assert (forall ((needle us_t) (haystack us_t)) (forall ((loc Int)) (! (= (= (match_at needle haystack loc) true) (and (<= (- loc 1) (- (length haystack) (length needle))) (= (partial_match_at needle haystack loc (length needle)) true))) :pattern ((match_at needle haystack loc))))))
(declare-const needle us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const haystack us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content integer)))))
(define-fun t3b__ref___projection ((a t3b__ref)) integer (t3b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content integer)))))
(define-fun t4b__ref___projection ((a t4b__ref)) integer (t4b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range4 temp___expr_74)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const diff Bool)
(declare-const i Int)
(declare-const j Int)
(declare-const string_search__brute_force__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___296 Int)
(declare-const temp___301 Int)
(declare-const temp___300 Bool)
(declare-const temp___299 Int)
(declare-const o5 Int)
(declare-const o6 character)
(declare-const o7 Int)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const temp___2991 Int)
(declare-const o10 Int)
(declare-const o11 character)
(declare-const o12 Int)
(declare-const o13 Bool)
(declare-const o14 Bool)
(declare-const temp___2992 Int)
(declare-const o15 Int)
(declare-const o16 character)
(declare-const o17 Int)
(declare-const o18 Bool)
(declare-const o19 Bool)
(declare-const string_search__brute_force__result1 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Bool)
(declare-const diff1 Bool)
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const result3 Bool)
(declare-const diff2 Bool)
(declare-const diff3 Bool)
(declare-const j2 Int)
(declare-const result4 Int)
(declare-const j3 Int)
(declare-const result5 Bool)
(declare-const diff4 Bool)
(declare-const diff5 Bool)
(declare-const j4 Int)
(declare-const diff6 Bool)
(declare-const j5 Int)
(declare-const diff7 Bool)
(declare-const j6 Int)
(declare-const diff8 Bool)
(declare-const j7 Int)
(declare-const diff9 Bool)
(declare-const j8 Int)
(declare-const diff10 Bool)
(declare-const j9 Int)
(declare-const diff11 Bool)
(declare-const j10 Int)
(declare-const diff12 Bool)
(declare-const j11 Int)
(declare-const string_search__brute_force__result2 int__ref)
(declare-const string_search__brute_force__result3 Int)
(declare-const diff13 Bool)
(declare-const i2 Int)
(declare-const j12 Int)
(declare-const result6 int__ref)
(declare-const i3 Int)
(declare-const result7 bool__ref)
(declare-const diff14 Bool)
(declare-const result8 int__ref)
(declare-const j13 Int)
(declare-const result9 bool__ref)
(declare-const diff15 Bool)
(define-fun j14 () int__ref (mk_int__ref j8))
(define-fun diff16 () bool__ref (mk_bool__ref diff9))
(define-fun j15 () int__ref (mk_int__ref j6))
(define-fun diff17 () bool__ref (mk_bool__ref diff7))
(assert (dynamic_invariant2 needle true false true true))
(assert (dynamic_invariant2 haystack true false true true))
(assert (and (<= 1 (length needle)) (<= (length needle) (length haystack))))
(assert (and (= o (length needle)) (in_range1 (length needle))))
(assert (and (= o1 (length haystack)) (in_range1 (length haystack))))
(assert (= o2 (- o1 o)))
(assert (and (= o3 o2) (in_range1 o2)))
(assert (= o4 (+ o3 1)))
(assert (and (= temp___296 o4) (in_range1 o4)))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 temp___296))
(assert (= (mk_bool__ref result1) (mk_bool__ref diff)))
(assert (= diff1 (distinct 0 0)))
(assert (= (mk_int__ref result2) (mk_int__ref j)))
(assert (= j1 (to_rep1 (first (rt needle)))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= temp___301 j1)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= temp___300 diff1)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (and (= temp___299 (+ j1 (- i1 1))) (in_range1 (+ j1 (- i1 1))))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (and (<= (to_rep1 (first (rt haystack))) temp___299) (<= temp___299 (to_rep1 (last (rt haystack)))))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= o5 temp___299)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= o6 (select (elts haystack) o5))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= o7 (to_rep o6))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= o8 (ite (= (to_rep (select (elts needle) j1)) o7) true false))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= o9 (ite (not (= o8 true)) true false))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= diff1 result3)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= diff2 o9)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (or (and (and (and (= j1 j6) (= diff2 diff7)) (and (= j7 j1) (= diff8 diff2))) (= diff2 true)) (and (not (= diff2 true)) (and (and (and (= j15 (mk_int__ref j4)) (= diff17 (mk_bool__ref diff5))) (and (= j7 j5) (= diff8 diff6))) (and (and (= (partial_match_at needle haystack i1 j2) true) (= (= diff3 true) (not (= (to_rep (select (elts needle) j2)) (to_rep (select (elts haystack) (+ j2 (- i1 1)))))))) (and (and (=> (<= (to_rep1 (first (rt needle))) (to_rep1 (last (rt needle)))) (dynamic_property2 (to_rep1 (first (rt needle))) (to_rep1 (last (rt needle))) j2)) (and (<= (to_rep1 (first (rt needle))) j2) (<= j2 (to_rep1 (last (rt needle)))))) (or (and (and (and (= j2 j4) (= diff3 diff5)) (and (= j5 j2) (= diff6 diff3))) (= j2 (to_rep1 (last (rt needle))))) (and (not (= j2 (to_rep1 (last (rt needle))))) (and (and (and (= j3 j4) (= diff4 diff5)) (and (= j5 j3) (= diff6 diff4))) (and (and (= j2 result4) (= j3 (+ j2 1))) (and (and (and (and (and (and (and (and (= temp___2991 (+ j3 (- i1 1))) (in_range1 (+ j3 (- i1 1)))) (and (and (<= (to_rep1 (first (rt haystack))) temp___2991) (<= temp___2991 (to_rep1 (last (rt haystack))))) (= o10 temp___2991))) (= o11 (select (elts haystack) o10))) (= o12 (to_rep o11))) (= o13 (ite (= (to_rep (select (elts needle) j3)) o12) true false))) (= o14 (ite (not (= o13 true)) true false))) (and (= diff3 result5) (= diff4 o14))) (= diff4 true)))))))))))))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= j14 j15)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= diff16 diff17)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= j9 j7)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= diff10 diff8)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= (mk_int__ref j10) j14)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= (mk_bool__ref diff11) diff16)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= j11 j9)))
(assert (=> (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle))))) (= diff12 diff10)))
(assert (=> (not (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle)))))) (= j1 j10)))
(assert (=> (not (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle)))))) (= diff1 diff11)))
(assert (=> (not (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle)))))) (= j11 j1)))
(assert (=> (not (and (<= (to_rep1 (first (rt needle))) j1) (<= j1 (to_rep1 (last (rt needle)))))) (= diff12 diff1)))
(assert (= diff11 true))
(assert (= string_search__brute_force__result2 (mk_int__ref string_search__brute_force__result)))
(assert (= string_search__brute_force__result3 string_search__brute_force__result1))
(assert (forall ((k Int)) (=> (and (<= 1 k) (<= k i2)) (not (= (match_at needle haystack k) true)))))
(assert (and (=> (<= 1 (+ (- (length haystack) (length needle)) 1)) (dynamic_property1 1 (+ (- (length haystack) (length needle)) 1) i2)) (and (<= 1 i2) (<= i2 (+ (- (length haystack) (length needle)) 1)))))
(assert (not (= i2 temp___296)))
(assert (= result6 (mk_int__ref i2)))
(assert (= i3 (+ i2 1)))
(assert (= result7 (mk_bool__ref diff13)))
(assert (= diff14 (distinct 0 0)))
(assert (= result8 (mk_int__ref j12)))
(assert (= j13 (to_rep1 (first (rt needle)))))
(assert (<= (to_rep1 (first (rt needle))) j13))
(assert (<= j13 (to_rep1 (last (rt needle)))))
(assert (and (= temp___2992 (+ j13 (- i3 1))) (in_range1 (+ j13 (- i3 1)))))
(assert (and (<= (to_rep1 (first (rt haystack))) temp___2992) (<= temp___2992 (to_rep1 (last (rt haystack))))))
(assert (= o15 temp___2992))
(assert (= o16 (select (elts haystack) o15)))
(assert (= o17 (to_rep o16)))
(assert (= o18 (ite (= (to_rep (select (elts needle) j13)) o17) true false)))
(assert (= o19 (ite (not (= o18 true)) true false)))
(assert (= result9 (mk_bool__ref diff14)))
(assert (= diff15 o19))
(assert (not (= diff15 true)))
(assert (not (= (partial_match_at needle haystack i3 j13) true)))
(check-sat)
(exit)
