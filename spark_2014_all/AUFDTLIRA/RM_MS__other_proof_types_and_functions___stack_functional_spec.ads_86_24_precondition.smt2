(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort index_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index_range index_range) Bool)
(declare-const dummy2 index_range)
(declare-datatypes () ((index_range__ref (mk_index_range__ref (index_range__content index_range)))))
(define-fun index_range__ref___projection ((a index_range__ref)) index_range (index_range__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort pointer_range 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (pointer_range pointer_range) Bool)
(declare-const dummy3 pointer_range)
(declare-datatypes () ((pointer_range__ref (mk_pointer_range__ref (pointer_range__content pointer_range)))))
(define-fun pointer_range__ref___projection ((a pointer_range__ref)) pointer_range (pointer_range__content a))
(declare-fun to_rep1 (pointer_range) Int)
(declare-fun of_rep1 (Int) pointer_range)
(assert (forall ((x pointer_range)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x pointer_range)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const dummy4 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stack_functional_spec__stack_type__s (Array Int integer)) (rec__stack_functional_spec__stack_type__pointer pointer_range)))))
(define-fun us_split_fields_S__projection ((a us_split_fields)) (Array Int integer) (rec__stack_functional_spec__stack_type__s a))
(define-fun us_split_fields_Pointer__projection ((a us_split_fields)) pointer_range (rec__stack_functional_spec__stack_type__pointer a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stack_functional_spec__stack_type__s (us_split_fields1 a)) 1 100 (rec__stack_functional_spec__stack_type__s (us_split_fields1 b)) 1 100) true) (= (to_rep1 (rec__stack_functional_spec__stack_type__pointer (us_split_fields1 a))) (to_rep1 (rec__stack_functional_spec__stack_type__pointer (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stack_functional_spec__stack_type__s__first__bit Int)
(declare-const stack_functional_spec__stack_type__s__last__bit Int)
(declare-const stack_functional_spec__stack_type__s__position Int)
(assert (<= 0 stack_functional_spec__stack_type__s__first__bit))
(assert (< stack_functional_spec__stack_type__s__first__bit stack_functional_spec__stack_type__s__last__bit))
(assert (<= 0 stack_functional_spec__stack_type__s__position))
(declare-const stack_functional_spec__stack_type__pointer__first__bit Int)
(declare-const stack_functional_spec__stack_type__pointer__last__bit Int)
(declare-const stack_functional_spec__stack_type__pointer__position Int)
(assert (<= 0 stack_functional_spec__stack_type__pointer__first__bit))
(assert (< stack_functional_spec__stack_type__pointer__first__bit stack_functional_spec__stack_type__pointer__last__bit))
(assert (<= 0 stack_functional_spec__stack_type__pointer__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((stack_type__ref (mk_stack_type__ref (stack_type__content us_rep)))))
(define-fun stack_type__ref___projection ((a stack_type__ref)) us_rep (stack_type__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun state__2 (us_split_fields) us_rep)
(declare-fun state__2__function_guard (us_rep us_split_fields) Bool)
(assert true)
(assert (forall ((stack_functional_spec__my_stack__fields us_split_fields)) (! (= (state__2 stack_functional_spec__my_stack__fields) (mk___rep stack_functional_spec__my_stack__fields)) :pattern ((state__2 stack_functional_spec__my_stack__fields)))))
(declare-fun count (us_rep) Int)
(declare-fun count__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(assert (forall ((s us_rep)) (! (dynamic_invariant1 (count s) true false true) :pattern ((count s)))))
(assert (forall ((s us_rep)) (! (= (count s) (to_rep1 (rec__stack_functional_spec__stack_type__pointer (us_split_fields1 s)))) :pattern ((count s)))))
(declare-fun stack_entry (us_rep Int) Int)
(declare-fun stack_entry__function_guard (Int us_rep Int) Bool)
(assert (forall ((s us_rep)) (forall ((n Int)) (! (=> (and (dynamic_invariant1 n true true true) (and (<= 1 n) (<= n (count s)))) (dynamic_invariant (stack_entry s n) true false true)) :pattern ((stack_entry s n))))))
(assert (forall ((s us_rep)) (forall ((n Int)) (! (=> (dynamic_invariant1 n true true true) (= (stack_entry s n) (to_rep (let ((temp___178 (rec__stack_functional_spec__stack_type__s (us_split_fields1 s)))) (select temp___178 n))))) :pattern ((stack_entry s n))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_155 Int) (temp___is_init_152 Bool) (temp___skip_constant_153 Bool) (temp___do_toplevel_154 Bool)) Bool (=> (or (= temp___is_init_152 true) (<= 0 100)) (in_range4 temp___expr_155)))
(define-fun dynamic_invariant3 ((temp___expr_140 Int) (temp___is_init_137 Bool) (temp___skip_constant_138 Bool) (temp___do_toplevel_139 Bool)) Bool (=> (or (= temp___is_init_137 true) (<= 1 100)) (in_range3 temp___expr_140)))
(declare-const my_stack__split_fields (Array Int integer))
(declare-const my_stack__split_fields1 pointer_range)
(declare-const temp Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 integer)
(declare-const o5 Int)
(declare-const o6 integer)
(declare-const o7 Int)
(declare-const o8 (Array Int integer))
(declare-const o9 (Array Int integer))
(declare-const o10 pointer_range)
(declare-const temp___228 (Array Int integer))
(declare-const temp___2281 pointer_range)
(declare-const o11 integer)
(declare-const o12 Int)
(declare-const o13 (Array Int integer))
(declare-const o14 (Array Int integer))
(declare-const o15 pointer_range)
(declare-const temp___232 (Array Int integer))
(declare-const temp___2321 pointer_range)
(declare-const o16 (Array Int integer))
(declare-const o17 pointer_range)
(declare-const o18 (Array Int integer))
(declare-const o19 pointer_range)
(declare-const o20 Int)
(declare-const o21 (Array Int integer))
(declare-const o22 pointer_range)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 (Array Int integer))
(declare-const o29 pointer_range)
(declare-const o30 (Array Int integer))
(declare-const o31 pointer_range)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 (Array Int integer))
(declare-const o36 pointer_range)
(declare-const o37 Int)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 Bool)
(declare-const i Int)
(declare-const o41 us_rep)
(declare-const o42 Int)
(declare-const o43 Int)
(declare-const o44 Bool)
(declare-const o45 us_rep)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 Bool)
(declare-const result int__ref)
(declare-const temp1 Int)
(declare-const result1 us_split_fields__ref)
(declare-const my_stack__split_fields2 us_split_fields)
(declare-const result2 us_split_fields__ref)
(declare-const my_stack__split_fields3 us_split_fields)
(declare-const my_stack__split_fields4 us_split_fields__ref)
(declare-const temp2 int__ref)
(declare-const my_stack__split_fields5 us_split_fields)
(declare-const temp3 Int)
(declare-const result3 Bool)
(assert (<= 2 (count (state__2 (mk___split_fields my_stack__split_fields my_stack__split_fields1)))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))
(assert (and (<= 1 (to_rep1 my_stack__split_fields1)) (<= (to_rep1 my_stack__split_fields1) 100)))
(assert (= o (to_rep1 my_stack__split_fields1)))
(assert (= o1 (select my_stack__split_fields o)))
(assert (= o2 (to_rep o1)))
(assert (= result (mk_int__ref temp)))
(assert (= temp1 o2))
(assert (and (<= 1 (- (to_rep1 my_stack__split_fields1) 1)) (<= (- (to_rep1 my_stack__split_fields1) 1) 100)))
(assert (= o3 (- (to_rep1 my_stack__split_fields1) 1)))
(assert (= o4 (select my_stack__split_fields o3)))
(assert (= o5 (to_rep o4)))
(assert (= (to_rep o6) o5))
(assert (and (<= 1 (to_rep1 my_stack__split_fields1)) (<= (to_rep1 my_stack__split_fields1) 100)))
(assert (= o7 (to_rep1 my_stack__split_fields1)))
(assert (= o8 (store my_stack__split_fields o7 o6)))
(assert (= o8 o9))
(assert (= my_stack__split_fields1 o10))
(assert (= temp___228 o9))
(assert (= temp___2281 o10))
(assert (= result1 (mk___split_fields__ref (mk___split_fields my_stack__split_fields my_stack__split_fields1))))
(assert (= my_stack__split_fields2 (mk___split_fields temp___228 temp___2281)))
(assert (= (to_rep o11) temp1))
(assert (and (<= 1 (- (to_rep1 (rec__stack_functional_spec__stack_type__pointer my_stack__split_fields2)) 1)) (<= (- (to_rep1 (rec__stack_functional_spec__stack_type__pointer my_stack__split_fields2)) 1) 100)))
(assert (= o12 (- (to_rep1 (rec__stack_functional_spec__stack_type__pointer my_stack__split_fields2)) 1)))
(assert (= o13 (store (rec__stack_functional_spec__stack_type__s my_stack__split_fields2) o12 o11)))
(assert (= o13 o14))
(assert (= (rec__stack_functional_spec__stack_type__pointer my_stack__split_fields2) o15))
(assert (= temp___232 o14))
(assert (= temp___2321 o15))
(assert (= result2 (mk___split_fields__ref my_stack__split_fields2)))
(assert (= my_stack__split_fields3 (mk___split_fields temp___232 temp___2321)))
(assert (= temp2 (mk_int__ref temp1)))
(assert (= my_stack__split_fields4 (mk___split_fields__ref my_stack__split_fields3)))
(assert (= temp3 temp1))
(assert (= my_stack__split_fields5 my_stack__split_fields3))
(assert (and (= o41 (state__2 (us_split_fields__content my_stack__split_fields4))) (= o41 (mk___rep (us_split_fields__content my_stack__split_fields4)))))
(assert (and (= o42 (count o41)) (and (in_range2 o42) (= o42 (to_rep1 (rec__stack_functional_spec__stack_type__pointer (us_split_fields1 o41)))))))
(assert (= o43 (- o42 2)))
(assert (= o44 (ite (<= i o43) true false)))
(assert (= result3 (ite (<= 1 i) o44 false)))
(assert (= (= o48 true) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 (- (count (state__2 (us_split_fields__content my_stack__split_fields4))) 2))) (= (stack_entry (state__2 (us_split_fields__content my_stack__split_fields4)) i1) (stack_entry (state__2 (mk___split_fields my_stack__split_fields my_stack__split_fields1)) i1))))))
(assert (and (= (mk___rep (mk___split_fields o35 o36)) (state__2 (us_split_fields__content my_stack__split_fields4))) (= (us_split_fields__content my_stack__split_fields4) (mk___split_fields o35 o36))))
(assert (and (= o37 (count (mk___rep (mk___split_fields o35 o36)))) (and (in_range2 o37) (= o37 (to_rep1 o36)))))
(assert (and (= o38 (stack_entry (state__2 (mk___split_fields my_stack__split_fields my_stack__split_fields1)) o37)) (and (in_range1 o38) (= o38 (to_rep (select (rec__stack_functional_spec__stack_type__s (us_split_fields1 (state__2 (mk___split_fields my_stack__split_fields my_stack__split_fields1)))) o37))))))
(assert (and (= (mk___rep (mk___split_fields o30 o31)) (state__2 (us_split_fields__content my_stack__split_fields4))) (= (us_split_fields__content my_stack__split_fields4) (mk___split_fields o30 o31))))
(assert (and (= o32 (count (mk___rep (mk___split_fields o30 o31)))) (and (in_range2 o32) (= o32 (to_rep1 o31)))))
(assert (= o33 (- o32 1)))
(assert (and (= o34 o33) (in_range2 o33)))
(assert (and (= (mk___rep (mk___split_fields o28 o29)) (state__2 (us_split_fields__content my_stack__split_fields4))) (= (us_split_fields__content my_stack__split_fields4) (mk___split_fields o28 o29))))
(assert (and (= o39 (stack_entry (mk___rep (mk___split_fields o28 o29)) o34)) (and (in_range1 o39) (= o39 (to_rep (select o28 o34))))))
(assert (= o40 (ite (= o39 o38) true false)))
(assert (and (= (mk___rep (mk___split_fields o21 o22)) (state__2 (us_split_fields__content my_stack__split_fields4))) (= (us_split_fields__content my_stack__split_fields4) (mk___split_fields o21 o22))))
(assert (and (= o23 (count (mk___rep (mk___split_fields o21 o22)))) (and (in_range2 o23) (= o23 (to_rep1 o22)))))
(assert (= o24 (- o23 1)))
(assert (and (= o25 o24) (in_range2 o24)))
(assert (not (<= 1 o25)))
(check-sat)
(exit)
