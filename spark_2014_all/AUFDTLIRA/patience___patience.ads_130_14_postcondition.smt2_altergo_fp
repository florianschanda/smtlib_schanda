(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type card

predicate in_range2(x: int) = ((1 <= x) and (x <= 52))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : card, card -> bool

logic dummy1 : card

type card__ref = { card__content : card
}

function card__ref___projection(a: card__ref) : card = (a).card__content

logic to_rep : card -> int

logic of_rep : int -> card

axiom inversion_axiom : (forall x:card [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:card [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,card) farray
}

logic slide : (int,card) farray, int, int -> (int,card) farray

axiom slide_eq :
  (forall a:(int,card) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,card) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,card) farray, int, int, (int,card) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,card) farray. forall a__first:int. forall a__last:int.
  forall b:(int,card) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,card) farray; rt : t
}

function to_array(a: us_t) : (int,card) farray = (a).elts

function of_array(a: (int,card) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,card) farray -> int

logic value__component__size : int

logic object__component__size : (int,card) farray -> int

logic value__alignment : int

logic object__alignment : (int,card) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,card) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,card) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,card) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,card) farray

logic dummy4 : t

type cardstack__ref = { cardstack__content : us_t
}

function cardstack__ref___projection(a: cardstack__ref) : us_t =
  (a).cardstack__content

type cardindex

predicate in_range4(x: int) = (((- 1) <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : cardindex, cardindex -> bool

logic dummy5 : cardindex

type cardindex__ref = { cardindex__content : cardindex
}

function cardindex__ref___projection(a: cardindex__ref) : cardindex =
  (a).cardindex__content

logic to_rep2 : cardindex -> int

logic of_rep2 : int -> cardindex

axiom inversion_axiom2 :
  (forall x:cardindex [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:cardindex [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic dummy6 : (int,card) farray

logic value__size1 : int

logic object__size1 : (int,card) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,card) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,card) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,card) farray. (0 <= object__alignment1(a)))

logic user_eq5 : (int,card) farray, (int,card) farray -> bool

type map__ref1 = { map__content1 : (int,cardindex) farray
}

logic slide1 : (int,cardindex) farray, int, int -> (int,cardindex) farray

axiom slide_eq1 :
  (forall a:(int,cardindex) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,cardindex) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> bool

axiom bool_eq_def6 :
  (forall a:(int,cardindex) farray. forall a__first:int. forall a__last:int.
  forall b:(int,cardindex) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)])))))))))

logic dummy7 : (int,cardindex) farray

logic value__size2 : int

logic object__size2 : (int,cardindex) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,cardindex) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,cardindex) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,cardindex) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,cardindex) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,cardindex) farray. (0 <= object__alignment2(a)))

logic user_eq6 : (int,cardindex) farray, (int,cardindex) farray -> bool

type map__ref2 = { map__content2 : (int,(int,cardindex) farray) farray
}

logic slide2 : (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,(int,cardindex) farray) farray, int, int,
  (int,(int,cardindex) farray) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,(int,cardindex) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,cardindex) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq9(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and (bool_eq8((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true)) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq8((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq8((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true)))))))

logic dummy8 : (int,(int,cardindex) farray) farray

logic value__size3 : int

logic object__size3 : (int,(int,cardindex) farray) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,(int,cardindex) farray) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,(int,cardindex) farray) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,(int,cardindex) farray) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__alignment3(a)))

logic user_eq7 : (int,(int,cardindex) farray) farray,
  (int,(int,cardindex) farray) farray -> bool

type us_split_fields = { rec__patience__state__numelts : cardindex;
rec__patience__state__values : (int,card) farray;
rec__patience__state__numstacks : cardindex; rec__patience__state__stacksizes
: (int,cardindex) farray; rec__patience__state__stacks :
(int,(int,cardindex) farray) farray; rec__patience__state__posstack :
(int,cardindex) farray; rec__patience__state__posheight :
(int,cardindex) farray; rec__patience__state__preds : (int,cardindex) farray
}

function us_split_fields_NumElts__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numelts

function us_split_fields_Values__projection(a: us_split_fields) : (int,card) farray =
  (a).rec__patience__state__values

function us_split_fields_NumStacks__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numstacks

function us_split_fields_StackSizes__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__stacksizes

function us_split_fields_Stacks__projection(a: us_split_fields) : (int,(int,cardindex) farray) farray =
  (a).rec__patience__state__stacks

function us_split_fields_PosStack__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posstack

function us_split_fields_PosHeight__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posheight

function us_split_fields_Preds__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__preds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  ((((((((((to_rep2(((a).us_split_fields1).rec__patience__state__numelts) = to_rep2(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep2(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep2(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq9(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((((((to_rep2(((a).us_split_fields1).rec__patience__state__numelts) = to_rep2(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep2(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep2(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq9(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true))) ->
  (bool_eq10(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__size4({ us_split_fields1 =
  { rec__patience__state__numelts = a; rec__patience__state__values = a1;
  rec__patience__state__numstacks = a2; rec__patience__state__stacksizes =
  a3; rec__patience__state__stacks = a4; rec__patience__state__posstack = a5;
  rec__patience__state__posheight = a6; rec__patience__state__preds = a7 }
  })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__alignment4({
  us_split_fields1 = { rec__patience__state__numelts = a;
  rec__patience__state__values = a1; rec__patience__state__numstacks = a2;
  rec__patience__state__stacksizes = a3; rec__patience__state__stacks = a4;
  rec__patience__state__posstack = a5; rec__patience__state__posheight = a6;
  rec__patience__state__preds = a7 } })))

logic patience__state__numelts__first__bit : int

logic patience__state__numelts__last__bit : int

logic patience__state__numelts__position : int

axiom patience__state__numelts__first__bit_axiom :
  (0 <= patience__state__numelts__first__bit)

axiom patience__state__numelts__last__bit_axiom :
  (patience__state__numelts__first__bit <  patience__state__numelts__last__bit)

axiom patience__state__numelts__position_axiom :
  (0 <= patience__state__numelts__position)

logic patience__state__values__first__bit : int

logic patience__state__values__last__bit : int

logic patience__state__values__position : int

axiom patience__state__values__first__bit_axiom :
  (0 <= patience__state__values__first__bit)

axiom patience__state__values__last__bit_axiom :
  (patience__state__values__first__bit <  patience__state__values__last__bit)

axiom patience__state__values__position_axiom :
  (0 <= patience__state__values__position)

logic patience__state__numstacks__first__bit : int

logic patience__state__numstacks__last__bit : int

logic patience__state__numstacks__position : int

axiom patience__state__numstacks__first__bit_axiom :
  (0 <= patience__state__numstacks__first__bit)

axiom patience__state__numstacks__last__bit_axiom :
  (patience__state__numstacks__first__bit <  patience__state__numstacks__last__bit)

axiom patience__state__numstacks__position_axiom :
  (0 <= patience__state__numstacks__position)

logic patience__state__stacksizes__first__bit : int

logic patience__state__stacksizes__last__bit : int

logic patience__state__stacksizes__position : int

axiom patience__state__stacksizes__first__bit_axiom :
  (0 <= patience__state__stacksizes__first__bit)

axiom patience__state__stacksizes__last__bit_axiom :
  (patience__state__stacksizes__first__bit <  patience__state__stacksizes__last__bit)

axiom patience__state__stacksizes__position_axiom :
  (0 <= patience__state__stacksizes__position)

logic patience__state__stacks__first__bit : int

logic patience__state__stacks__last__bit : int

logic patience__state__stacks__position : int

axiom patience__state__stacks__first__bit_axiom :
  (0 <= patience__state__stacks__first__bit)

axiom patience__state__stacks__last__bit_axiom :
  (patience__state__stacks__first__bit <  patience__state__stacks__last__bit)

axiom patience__state__stacks__position_axiom :
  (0 <= patience__state__stacks__position)

logic patience__state__posstack__first__bit : int

logic patience__state__posstack__last__bit : int

logic patience__state__posstack__position : int

axiom patience__state__posstack__first__bit_axiom :
  (0 <= patience__state__posstack__first__bit)

axiom patience__state__posstack__last__bit_axiom :
  (patience__state__posstack__first__bit <  patience__state__posstack__last__bit)

axiom patience__state__posstack__position_axiom :
  (0 <= patience__state__posstack__position)

logic patience__state__posheight__first__bit : int

logic patience__state__posheight__last__bit : int

logic patience__state__posheight__position : int

axiom patience__state__posheight__first__bit_axiom :
  (0 <= patience__state__posheight__first__bit)

axiom patience__state__posheight__last__bit_axiom :
  (patience__state__posheight__first__bit <  patience__state__posheight__last__bit)

axiom patience__state__posheight__position_axiom :
  (0 <= patience__state__posheight__position)

logic patience__state__preds__first__bit : int

logic patience__state__preds__last__bit : int

logic patience__state__preds__position : int

axiom patience__state__preds__first__bit_axiom :
  (0 <= patience__state__preds__first__bit)

axiom patience__state__preds__last__bit_axiom :
  (patience__state__preds__first__bit <  patience__state__preds__last__bit)

axiom patience__state__preds__position_axiom :
  (0 <= patience__state__preds__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : cardindex

logic dummy10 : (int,card) farray

logic dummy11 : cardindex

logic dummy12 : (int,cardindex) farray

logic dummy13 : (int,(int,cardindex) farray) farray

logic dummy14 : (int,cardindex) farray

logic dummy15 : (int,cardindex) farray

logic dummy16 : (int,cardindex) farray

type state__ref = { state__content : us_rep
}

function state__ref___projection(a: state__ref) : us_rep = (a).state__content

logic null_state : cardindex

logic null_state1 : (int,card) farray

logic null_state2 : cardindex

logic null_state3 : (int,cardindex) farray

logic null_state4 : (int,(int,cardindex) farray) farray

logic null_state5 : (int,cardindex) farray

logic null_state6 : (int,cardindex) farray

logic null_state7 : (int,cardindex) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___157 : int -> (int,card) farray

logic temp___161 : int -> (int,cardindex) farray

logic temp___165 : (int,cardindex) farray -> (int,(int,cardindex) farray) farray

logic temp___169 : int -> (int,cardindex) farray

logic temp___173 : int -> (int,cardindex) farray

logic temp___177 : int -> (int,cardindex) farray

logic temp___181 : int -> (int,cardindex) farray

logic inv : us_rep -> bool

logic inv__function_guard : bool, us_rep -> prop

axiom inv__post_axiom : true

axiom inv__def_axiom :
  (forall s:cardindex. forall s1:(int,card) farray. forall s2:cardindex.
  forall s3:(int,cardindex) farray.
  forall s4:(int,(int,cardindex) farray) farray.
  forall s5:(int,cardindex) farray. forall s6:(int,cardindex) farray.
  forall s7:(int,cardindex) farray [inv({ us_split_fields1 = {
  rec__patience__state__numelts = s; rec__patience__state__values = s1;
  rec__patience__state__numstacks = s2; rec__patience__state__stacksizes =
  s3; rec__patience__state__stacks = s4; rec__patience__state__posstack = s5;
  rec__patience__state__posheight = s6; rec__patience__state__preds = s7 }
  })]. (((inv({ us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true) ->
  ((((((((((0 <= to_rep2(s2)) and (to_rep2(s2) <= to_rep2(s))) and
  (to_rep2(s) <= 100)) and ((to_rep2(s) = 0) or (0 <  to_rep2(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s2) - 1))) ->
  (((1 <= to_rep2((s3[i]))) and (to_rep2((s3[i])) <= to_rep2(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep2((s3[i])) - 1))) ->
  ((0 <= to_rep2(((s4[i])[j]))) and (to_rep2(((s4[i])[j])) <  to_rep2(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s) - 1))) ->
  ((((0 <= to_rep2((s5[i]))) and (to_rep2((s5[i])) <= (to_rep2(s2) - 1))) and
  ((0 <= to_rep2((s6[i]))) and
  (to_rep2((s6[i])) <= (to_rep2((s3[to_rep2((s5[i]))])) - 1)))) and
  (to_rep2(((s4[to_rep2((s5[i]))])[to_rep2((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep2(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep2((s3[ist])) - 1))) ->
  ((ist = to_rep2((s5[to_rep2(((s4[ist])[ip]))]))) and
  (ip = to_rep2((s6[to_rep2(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep2((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep2((s3[i])) - 1))) ->
  (to_rep2(((s4[i])[j])) <  to_rep2(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep2((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep2((s3[i])) - 1))) ->
  (to_rep((s1[to_rep2(((s4[i])[k]))])) <= to_rep((s1[to_rep2(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s) - 1))) ->
  (((((- 1) <= to_rep2((s7[i]))) and
  (to_rep2((s7[i])) <= (to_rep2(s) - 1))) and (to_rep2((s7[i])) <  i)) and
  (((to_rep2((s7[i])) <  0) -> (to_rep2((s5[i])) = 0)) and
  ((not (to_rep2((s7[i])) <  0)) ->
  (((to_rep((s1[to_rep2((s7[i]))])) <  to_rep((s1[i]))) and
  (0 <  to_rep2((s5[i])))) and
  (to_rep2((s5[to_rep2((s7[i]))])) = (to_rep2((s5[i])) - 1)))))))))) and
  (((((((((((0 <= to_rep2(s2)) and (to_rep2(s2) <= to_rep2(s))) and
  (to_rep2(s) <= 100)) and ((to_rep2(s) = 0) or (0 <  to_rep2(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s2) - 1))) ->
  (((1 <= to_rep2((s3[i]))) and (to_rep2((s3[i])) <= to_rep2(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep2((s3[i])) - 1))) ->
  ((0 <= to_rep2(((s4[i])[j]))) and (to_rep2(((s4[i])[j])) <  to_rep2(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s) - 1))) ->
  ((((0 <= to_rep2((s5[i]))) and (to_rep2((s5[i])) <= (to_rep2(s2) - 1))) and
  ((0 <= to_rep2((s6[i]))) and
  (to_rep2((s6[i])) <= (to_rep2((s3[to_rep2((s5[i]))])) - 1)))) and
  (to_rep2(((s4[to_rep2((s5[i]))])[to_rep2((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep2(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep2((s3[ist])) - 1))) ->
  ((ist = to_rep2((s5[to_rep2(((s4[ist])[ip]))]))) and
  (ip = to_rep2((s6[to_rep2(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep2((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep2((s3[i])) - 1))) ->
  (to_rep2(((s4[i])[j])) <  to_rep2(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep2((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep2((s3[i])) - 1))) ->
  (to_rep((s1[to_rep2(((s4[i])[k]))])) <= to_rep((s1[to_rep2(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep2(s) - 1))) ->
  (((((- 1) <= to_rep2((s7[i]))) and
  (to_rep2((s7[i])) <= (to_rep2(s) - 1))) and (to_rep2((s7[i])) <  i)) and
  (((to_rep2((s7[i])) <  0) and (to_rep2((s5[i])) = 0)) or
  ((not (to_rep2((s7[i])) <  0)) and
  (((to_rep((s1[to_rep2((s7[i]))])) <  to_rep((s1[i]))) and
  (0 <  to_rep2((s5[i])))) and
  (to_rep2((s5[to_rep2((s7[i]))])) = (to_rep2((s5[i])) - 1))))))))) -> (inv({
  us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true))))

logic cards : (int,card) farray

logic cards1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy17 : integer

type t28b__ref = { t28b__content : integer
}

function t28b__ref___projection(a: t28b__ref) : integer = (a).t28b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom null_state__def_axiom : ((null_state = of_rep2(0)) and
  ((null_state1 = temp___157(1)) and ((null_state2 = of_rep2(0)) and
  ((null_state3 = temp___161((- 1))) and
  ((null_state4 = temp___165(temp___169((- 1)))) and
  ((null_state5 = temp___173((- 1))) and
  ((null_state6 = temp___177((- 1))) and
  (null_state7 = temp___181((- 1))))))))))

axiom def_axiom :
  (forall temp___159:int. (in_range2(temp___159) ->
  (forall temp___160:int.
  (to_rep((temp___157(temp___159)[temp___160])) = temp___159))))

axiom def_axiom1 :
  (forall temp___163:int. (in_range4(temp___163) ->
  (forall temp___164:int.
  (to_rep2((temp___161(temp___163)[temp___164])) = temp___163))))

axiom def_axiom2 :
  (forall temp___167:(int,cardindex) farray.
  (forall temp___168:int.
  ((temp___165(temp___167)[temp___168]) = temp___167)))

axiom def_axiom3 :
  (forall temp___171:int. (in_range4(temp___171) ->
  (forall temp___172:int.
  (to_rep2((temp___169(temp___171)[temp___172])) = temp___171))))

axiom def_axiom4 :
  (forall temp___183:int. (in_range4(temp___183) ->
  (forall temp___184:int.
  (to_rep2((temp___181(temp___183)[temp___184])) = temp___183))))

axiom def_axiom5 :
  (forall temp___175:int. (in_range4(temp___175) ->
  (forall temp___176:int.
  (to_rep2((temp___173(temp___175)[temp___176])) = temp___175))))

axiom def_axiom6 :
  (forall temp___179:int. (in_range4(temp___179) ->
  (forall temp___180:int.
  (to_rep2((temp___177(temp___179)[temp___180])) = temp___179))))

 (* File "patience.ads", line 27, characters 0-0 *)
goal WP_parameter_def :
  (forall s__split_fields:cardindex.
  forall s__split_fields1:(int,card) farray.
  forall s__split_fields2:cardindex.
  forall s__split_fields3:(int,cardindex) farray.
  forall s__split_fields4:(int,(int,cardindex) farray) farray.
  forall s__split_fields5:(int,cardindex) farray.
  forall s__split_fields6:(int,cardindex) farray.
  forall s__split_fields7:(int,cardindex) farray. forall i:int.
  forall patience__playgame__result:cardindex.
  forall patience__playgame__result1:(int,card) farray.
  forall patience__playgame__result2:cardindex.
  forall patience__playgame__result3:(int,cardindex) farray.
  forall patience__playgame__result4:(int,(int,cardindex) farray) farray.
  forall patience__playgame__result5:(int,cardindex) farray.
  forall patience__playgame__result6:(int,cardindex) farray.
  forall patience__playgame__result7:(int,cardindex) farray.
  forall o:cardindex. forall o1:cardindex. forall o2:cardindex.
  forall o3:(int,card) farray. forall o4:cardindex.
  forall o5:(int,cardindex) farray.
  forall o6:(int,(int,cardindex) farray) farray.
  forall o7:(int,cardindex) farray. forall o8:(int,cardindex) farray.
  forall o9:(int,cardindex) farray. forall temp___869:cardindex.
  forall temp___8691:(int,card) farray. forall temp___8692:cardindex.
  forall temp___8693:(int,cardindex) farray.
  forall temp___8694:(int,(int,cardindex) farray) farray.
  forall temp___8695:(int,cardindex) farray.
  forall temp___8696:(int,cardindex) farray.
  forall temp___8697:(int,cardindex) farray. forall temp___858:int.
  forall temp___857:cardindex. forall temp___8571:(int,card) farray.
  forall temp___8572:cardindex. forall temp___8573:(int,cardindex) farray.
  forall temp___8574:(int,(int,cardindex) farray) farray.
  forall temp___8575:(int,cardindex) farray.
  forall temp___8576:(int,cardindex) farray.
  forall temp___8577:(int,cardindex) farray. forall result:cardindex.
  forall result1:(int,card) farray. forall result2:cardindex.
  forall result3:(int,cardindex) farray.
  forall result4:(int,(int,cardindex) farray) farray.
  forall result5:(int,cardindex) farray.
  forall result6:(int,cardindex) farray.
  forall result7:(int,cardindex) farray. forall s__split_fields8:cardindex.
  forall s__split_fields9:(int,card) farray.
  forall s__split_fields10:cardindex.
  forall s__split_fields11:(int,cardindex) farray.
  forall s__split_fields12:(int,(int,cardindex) farray) farray.
  forall s__split_fields13:(int,cardindex) farray.
  forall s__split_fields14:(int,cardindex) farray.
  forall s__split_fields15:(int,cardindex) farray. forall result8:int.
  forall i1:int. forall s__split_fields16:cardindex.
  forall s__split_fields17:(int,card) farray.
  forall s__split_fields18:cardindex.
  forall s__split_fields19:(int,cardindex) farray.
  forall s__split_fields20:(int,(int,cardindex) farray) farray.
  forall s__split_fields21:(int,cardindex) farray.
  forall s__split_fields22:(int,cardindex) farray.
  forall s__split_fields23:(int,cardindex) farray. forall i2:int.
  forall s__split_fields24:cardindex.
  forall s__split_fields25:(int,card) farray.
  forall s__split_fields26:cardindex.
  forall s__split_fields27:(int,cardindex) farray.
  forall s__split_fields28:(int,(int,cardindex) farray) farray.
  forall s__split_fields29:(int,cardindex) farray.
  forall s__split_fields30:(int,cardindex) farray.
  forall s__split_fields31:(int,cardindex) farray.
  forall s__split_fields32:cardindex.
  forall s__split_fields33:(int,card) farray.
  forall s__split_fields34:cardindex.
  forall s__split_fields35:(int,cardindex) farray.
  forall s__split_fields36:(int,(int,cardindex) farray) farray.
  forall s__split_fields37:(int,cardindex) farray.
  forall s__split_fields38:(int,cardindex) farray.
  forall s__split_fields39:(int,cardindex) farray. forall i3:int.
  forall s__split_fields40:cardindex.
  forall s__split_fields41:(int,card) farray.
  forall s__split_fields42:cardindex.
  forall s__split_fields43:(int,cardindex) farray.
  forall s__split_fields44:(int,(int,cardindex) farray) farray.
  forall s__split_fields45:(int,cardindex) farray.
  forall s__split_fields46:(int,cardindex) farray.
  forall s__split_fields47:(int,cardindex) farray. forall i4:int.
  forall s__split_fields48:cardindex.
  forall s__split_fields49:(int,card) farray.
  forall s__split_fields50:cardindex.
  forall s__split_fields51:(int,cardindex) farray.
  forall s__split_fields52:(int,(int,cardindex) farray) farray.
  forall s__split_fields53:(int,cardindex) farray.
  forall s__split_fields54:(int,cardindex) farray.
  forall s__split_fields55:(int,cardindex) farray. forall i5:int.
  forall s__split_fields56:cardindex.
  forall s__split_fields57:(int,card) farray.
  forall s__split_fields58:cardindex.
  forall s__split_fields59:(int,cardindex) farray.
  forall s__split_fields60:(int,(int,cardindex) farray) farray.
  forall s__split_fields61:(int,cardindex) farray.
  forall s__split_fields62:(int,cardindex) farray.
  forall s__split_fields63:(int,cardindex) farray. forall i6:int.
  forall result9:cardindex. forall result10:(int,card) farray.
  forall result11:cardindex. forall result12:(int,cardindex) farray.
  forall result13:(int,(int,cardindex) farray) farray.
  forall result14:(int,cardindex) farray.
  forall result15:(int,cardindex) farray.
  forall result16:(int,cardindex) farray.
  forall patience__playgame__result8:cardindex.
  forall patience__playgame__result9:(int,card) farray.
  forall patience__playgame__result10:cardindex.
  forall patience__playgame__result11:(int,cardindex) farray.
  forall patience__playgame__result12:(int,(int,cardindex) farray) farray.
  forall patience__playgame__result13:(int,cardindex) farray.
  forall patience__playgame__result14:(int,cardindex) farray.
  forall patience__playgame__result15:(int,cardindex) farray.
  forall patience__playgame__result16:cardindex.
  forall patience__playgame__result17:(int,card) farray.
  forall patience__playgame__result18:cardindex.
  forall patience__playgame__result19:(int,cardindex) farray.
  forall patience__playgame__result20:(int,(int,cardindex) farray) farray.
  forall patience__playgame__result21:(int,cardindex) farray.
  forall patience__playgame__result22:(int,cardindex) farray.
  forall patience__playgame__result23:(int,cardindex) farray.
  forall patience__playgame__result24:cardindex.
  forall patience__playgame__result25:(int,card) farray.
  forall patience__playgame__result26:cardindex.
  forall patience__playgame__result27:(int,cardindex) farray.
  forall patience__playgame__result28:(int,(int,cardindex) farray) farray.
  forall patience__playgame__result29:(int,cardindex) farray.
  forall patience__playgame__result30:(int,cardindex) farray.
  forall patience__playgame__result31:(int,cardindex) farray.
  forall s__split_fields64:cardindex.
  forall s__split_fields65:(int,card) farray.
  forall s__split_fields66:cardindex.
  forall s__split_fields67:(int,cardindex) farray.
  forall s__split_fields68:(int,(int,cardindex) farray) farray.
  forall s__split_fields69:(int,cardindex) farray.
  forall s__split_fields70:(int,cardindex) farray.
  forall s__split_fields71:(int,cardindex) farray. forall i7:int.
  forall patience__playgame__result32:state__ref.
  forall s__split_fields72:us_split_fields. forall i8:int.
  forall patience__playgame__result33:us_rep.
  (forall result17:cardindex. forall result18:(int,card) farray.
  forall result19:cardindex. forall result20:(int,cardindex) farray.
  forall result21:(int,(int,cardindex) farray) farray.
  forall result22:(int,cardindex) farray.
  forall result23:(int,cardindex) farray.
  forall result24:(int,cardindex) farray. ((((((to_rep2(o) = 0) and
  ((to_rep2(o1) = 0) and ((o1 = o2) and ((temp___157(1) = o3) and
  ((o = o4) and ((temp___161((- 1)) = o5) and
  ((temp___165(temp___169((- 1))) = o6) and ((temp___173((- 1)) = o7) and
  ((temp___177((- 1)) = o8) and (temp___181((- 1)) = o9)))))))))) and
  ((temp___869 = o2) and ((temp___8691 = o3) and ((temp___8692 = o4) and
  ((temp___8693 = o5) and ((temp___8694 = o6) and ((temp___8695 = o7) and
  ((temp___8696 = o8) and (temp___8697 = o9))))))))) and
  ((null_state = temp___869) and ((null_state1 = temp___8691) and
  ((null_state2 = temp___8692) and ((null_state3 = temp___8693) and
  ((null_state4 = temp___8694) and ((null_state5 = temp___8695) and
  ((null_state6 = temp___8696) and (null_state7 = temp___8697))))))))) and
  (dynamic_property(1, 2147483647, to_rep1(first(cards1)),
  to_rep1(last(cards1))) and ((length({ elts = cards; rt = cards1
  }) <= 100) and ((((({ us_split_fields__content = {
  rec__patience__state__numelts = result; rec__patience__state__values =
  result1; rec__patience__state__numstacks = result2;
  rec__patience__state__stacksizes = result3; rec__patience__state__stacks =
  result4; rec__patience__state__posstack = result5;
  rec__patience__state__posheight = result6; rec__patience__state__preds =
  result7 } } = { us_split_fields__content = {
  rec__patience__state__numelts = s__split_fields;
  rec__patience__state__values = s__split_fields1;
  rec__patience__state__numstacks = s__split_fields2;
  rec__patience__state__stacksizes = s__split_fields3;
  rec__patience__state__stacks = s__split_fields4;
  rec__patience__state__posstack = s__split_fields5;
  rec__patience__state__posheight = s__split_fields6;
  rec__patience__state__preds = s__split_fields7 } }) and
  ((null_state = s__split_fields8) and ((null_state1 = s__split_fields9) and
  ((null_state2 = s__split_fields10) and
  ((null_state3 = s__split_fields11) and
  ((null_state4 = s__split_fields12) and
  ((null_state5 = s__split_fields13) and
  ((null_state6 = s__split_fields14) and
  (null_state7 = s__split_fields15))))))))) and (((({ int__content = result8
  } = { int__content = i }) and (i1 = to_rep1(first(cards1)))) and
  ((((to_rep1(first(cards1)) <= i1) and (i1 <= to_rep1(last(cards1)))) and
  ((((temp___858 = i1) and (((temp___857 = s__split_fields8) and
  ((temp___8571 = s__split_fields9) and
  ((temp___8572 = s__split_fields10) and
  ((temp___8573 = s__split_fields11) and
  ((temp___8574 = s__split_fields12) and
  ((temp___8575 = s__split_fields13) and
  ((temp___8576 = s__split_fields14) and
  (temp___8577 = s__split_fields15)))))))) and
  (((to_rep2(s__split_fields16) = (i2 - to_rep1(first(cards1)))) and (inv({
  us_split_fields1 = { rec__patience__state__numelts = s__split_fields16;
  rec__patience__state__values = s__split_fields17;
  rec__patience__state__numstacks = s__split_fields18;
  rec__patience__state__stacksizes = s__split_fields19;
  rec__patience__state__stacks = s__split_fields20;
  rec__patience__state__posstack = s__split_fields21;
  rec__patience__state__posheight = s__split_fields22;
  rec__patience__state__preds = s__split_fields23 } }) = true)) and
  ((((to_rep1(first(cards1)) <= to_rep1(last(cards1))) ->
  dynamic_property1(to_rep1(first(cards1)), to_rep1(last(cards1)), i2)) and
  ((to_rep1(first(cards1)) <= i2) and (i2 <= to_rep1(last(cards1))))) and
  ((((inv({ us_split_fields1 = { rec__patience__state__numelts =
  s__split_fields24; rec__patience__state__values = s__split_fields25;
  rec__patience__state__numstacks = s__split_fields26;
  rec__patience__state__stacksizes = s__split_fields27;
  rec__patience__state__stacks = s__split_fields28;
  rec__patience__state__posstack = s__split_fields29;
  rec__patience__state__posheight = s__split_fields30;
  rec__patience__state__preds = s__split_fields31 } }) = true) and
  (to_rep((s__split_fields25[to_rep2(s__split_fields16)])) = to_rep((cards[i2])))) and
  (to_rep2(s__split_fields24) = (to_rep2(s__split_fields16) + 1))) and
  (i2 = to_rep1(last(cards1)))))))) and (((i2 = i3) and
  ((s__split_fields32 = s__split_fields24) and
  ((s__split_fields33 = s__split_fields25) and
  ((s__split_fields34 = s__split_fields26) and
  ((s__split_fields35 = s__split_fields27) and
  ((s__split_fields36 = s__split_fields28) and
  ((s__split_fields37 = s__split_fields29) and
  ((s__split_fields38 = s__split_fields30) and
  (s__split_fields39 = s__split_fields31))))))))) and ((i4 = i2) and ({
  rec__patience__state__numelts = s__split_fields40;
  rec__patience__state__values = s__split_fields41;
  rec__patience__state__numstacks = s__split_fields42;
  rec__patience__state__stacksizes = s__split_fields43;
  rec__patience__state__stacks = s__split_fields44;
  rec__patience__state__posstack = s__split_fields45;
  rec__patience__state__posheight = s__split_fields46;
  rec__patience__state__preds = s__split_fields47 } = {
  rec__patience__state__numelts = s__split_fields24;
  rec__patience__state__values = s__split_fields25;
  rec__patience__state__numstacks = s__split_fields26;
  rec__patience__state__stacksizes = s__split_fields27;
  rec__patience__state__stacks = s__split_fields28;
  rec__patience__state__posstack = s__split_fields29;
  rec__patience__state__posheight = s__split_fields30;
  rec__patience__state__preds = s__split_fields31 })))) and ((({
  int__content = i5 } = { int__content = i3 }) and ({
  us_split_fields__content = { rec__patience__state__numelts =
  s__split_fields48; rec__patience__state__values = s__split_fields49;
  rec__patience__state__numstacks = s__split_fields50;
  rec__patience__state__stacksizes = s__split_fields51;
  rec__patience__state__stacks = s__split_fields52;
  rec__patience__state__posstack = s__split_fields53;
  rec__patience__state__posheight = s__split_fields54;
  rec__patience__state__preds = s__split_fields55 } } = {
  us_split_fields__content = { rec__patience__state__numelts =
  s__split_fields32; rec__patience__state__values = s__split_fields33;
  rec__patience__state__numstacks = s__split_fields34;
  rec__patience__state__stacksizes = s__split_fields35;
  rec__patience__state__stacks = s__split_fields36;
  rec__patience__state__posstack = s__split_fields37;
  rec__patience__state__posheight = s__split_fields38;
  rec__patience__state__preds = s__split_fields39 } })) and ((i6 = i4) and ({
  rec__patience__state__numelts = s__split_fields56;
  rec__patience__state__values = s__split_fields57;
  rec__patience__state__numstacks = s__split_fields58;
  rec__patience__state__stacksizes = s__split_fields59;
  rec__patience__state__stacks = s__split_fields60;
  rec__patience__state__posstack = s__split_fields61;
  rec__patience__state__posheight = s__split_fields62;
  rec__patience__state__preds = s__split_fields63 } = {
  rec__patience__state__numelts = s__split_fields40;
  rec__patience__state__values = s__split_fields41;
  rec__patience__state__numstacks = s__split_fields42;
  rec__patience__state__stacksizes = s__split_fields43;
  rec__patience__state__stacks = s__split_fields44;
  rec__patience__state__posstack = s__split_fields45;
  rec__patience__state__posheight = s__split_fields46;
  rec__patience__state__preds = s__split_fields47 }))))) or
  ((not ((to_rep1(first(cards1)) <= i1) and
  (i1 <= to_rep1(last(cards1))))) and (((i1 = i5) and
  ((s__split_fields48 = s__split_fields8) and
  ((s__split_fields49 = s__split_fields9) and
  ((s__split_fields50 = s__split_fields10) and
  ((s__split_fields51 = s__split_fields11) and
  ((s__split_fields52 = s__split_fields12) and
  ((s__split_fields53 = s__split_fields13) and
  ((s__split_fields54 = s__split_fields14) and
  (s__split_fields55 = s__split_fields15))))))))) and ((i6 = i1) and ({
  rec__patience__state__numelts = s__split_fields56;
  rec__patience__state__values = s__split_fields57;
  rec__patience__state__numstacks = s__split_fields58;
  rec__patience__state__stacksizes = s__split_fields59;
  rec__patience__state__stacks = s__split_fields60;
  rec__patience__state__posstack = s__split_fields61;
  rec__patience__state__posheight = s__split_fields62;
  rec__patience__state__preds = s__split_fields63 } = {
  rec__patience__state__numelts = s__split_fields8;
  rec__patience__state__values = s__split_fields9;
  rec__patience__state__numstacks = s__split_fields10;
  rec__patience__state__stacksizes = s__split_fields11;
  rec__patience__state__stacks = s__split_fields12;
  rec__patience__state__posstack = s__split_fields13;
  rec__patience__state__posheight = s__split_fields14;
  rec__patience__state__preds = s__split_fields15 })))))) and
  ((((patience__playgame__result16 = patience__playgame__result8) and
  ((patience__playgame__result17 = patience__playgame__result9) and
  ((patience__playgame__result18 = patience__playgame__result10) and
  ((patience__playgame__result19 = patience__playgame__result11) and
  ((patience__playgame__result20 = patience__playgame__result12) and
  ((patience__playgame__result21 = patience__playgame__result13) and
  ((patience__playgame__result22 = patience__playgame__result14) and
  (patience__playgame__result23 = patience__playgame__result15)))))))) and ({
  us_split_fields1 = { rec__patience__state__numelts =
  patience__playgame__result24; rec__patience__state__values =
  patience__playgame__result25; rec__patience__state__numstacks =
  patience__playgame__result26; rec__patience__state__stacksizes =
  patience__playgame__result27; rec__patience__state__stacks =
  patience__playgame__result28; rec__patience__state__posstack =
  patience__playgame__result29; rec__patience__state__posheight =
  patience__playgame__result30; rec__patience__state__preds =
  patience__playgame__result31 } } = { us_split_fields1 = {
  rec__patience__state__numelts = patience__playgame__result8;
  rec__patience__state__values = patience__playgame__result9;
  rec__patience__state__numstacks = patience__playgame__result10;
  rec__patience__state__stacksizes = patience__playgame__result11;
  rec__patience__state__stacks = patience__playgame__result12;
  rec__patience__state__posstack = patience__playgame__result13;
  rec__patience__state__posheight = patience__playgame__result14;
  rec__patience__state__preds = patience__playgame__result15 } })) and
  (((result9 = patience__playgame__result) and
  ((result10 = patience__playgame__result1) and
  ((result11 = patience__playgame__result2) and
  ((result12 = patience__playgame__result3) and
  ((result13 = patience__playgame__result4) and
  ((result14 = patience__playgame__result5) and
  ((result15 = patience__playgame__result6) and
  (result16 = patience__playgame__result7)))))))) and
  ((s__split_fields48 = patience__playgame__result8) and
  ((s__split_fields49 = patience__playgame__result9) and
  ((s__split_fields50 = patience__playgame__result10) and
  ((s__split_fields51 = patience__playgame__result11) and
  ((s__split_fields52 = patience__playgame__result12) and
  ((s__split_fields53 = patience__playgame__result13) and
  ((s__split_fields54 = patience__playgame__result14) and
  (s__split_fields55 = patience__playgame__result15)))))))))))) and
  (((patience__playgame__result32 = { state__content = { us_split_fields1 = {
  rec__patience__state__numelts = patience__playgame__result16;
  rec__patience__state__values = patience__playgame__result17;
  rec__patience__state__numstacks = patience__playgame__result18;
  rec__patience__state__stacksizes = patience__playgame__result19;
  rec__patience__state__stacks = patience__playgame__result20;
  rec__patience__state__posstack = patience__playgame__result21;
  rec__patience__state__posheight = patience__playgame__result22;
  rec__patience__state__preds = patience__playgame__result23 } } }) and
  ((i7 = i5) and ((s__split_fields64 = s__split_fields48) and
  ((s__split_fields65 = s__split_fields49) and
  ((s__split_fields66 = s__split_fields50) and
  ((s__split_fields67 = s__split_fields51) and
  ((s__split_fields68 = s__split_fields52) and
  ((s__split_fields69 = s__split_fields53) and
  ((s__split_fields70 = s__split_fields54) and
  (s__split_fields71 = s__split_fields55)))))))))) and
  ((patience__playgame__result33 = { us_split_fields1 = {
  rec__patience__state__numelts = patience__playgame__result24;
  rec__patience__state__values = patience__playgame__result25;
  rec__patience__state__numstacks = patience__playgame__result26;
  rec__patience__state__stacksizes = patience__playgame__result27;
  rec__patience__state__stacks = patience__playgame__result28;
  rec__patience__state__posstack = patience__playgame__result29;
  rec__patience__state__posheight = patience__playgame__result30;
  rec__patience__state__preds = patience__playgame__result31 } }) and
  ((i8 = i6) and (s__split_fields72 = { rec__patience__state__numelts =
  s__split_fields56; rec__patience__state__values = s__split_fields57;
  rec__patience__state__numstacks = s__split_fields58;
  rec__patience__state__stacksizes = s__split_fields59;
  rec__patience__state__stacks = s__split_fields60;
  rec__patience__state__posstack = s__split_fields61;
  rec__patience__state__posheight = s__split_fields62;
  rec__patience__state__preds = s__split_fields63 }))))) and ({
  us_split_fields1 = { rec__patience__state__numelts = result17;
  rec__patience__state__values = result18; rec__patience__state__numstacks =
  result19; rec__patience__state__stacksizes = result20;
  rec__patience__state__stacks = result21; rec__patience__state__posstack =
  result22; rec__patience__state__posheight = result23;
  rec__patience__state__preds = result24 }
  } = (patience__playgame__result32).state__content))))) ->
  (inv((patience__playgame__result32).state__content) = true))))
