(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type tdayP1

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tdayP1, tdayP1 -> bool

logic dummy3 : tdayP1

type tdayP1__ref = { tdayP1__content : tdayP1
}

function tdayP1__ref___projection(a: tdayP1__ref) : tdayP1 =
  (a).tdayP1__content

logic dummy4 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq4 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__messages__message__sent :
(int,character) farray; rec__messages__message__received :
(int,character) farray
}

function us_split_fields_Sent__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__messages__message__sent

function us_split_fields_Received__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__messages__message__received

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((bool_eq4(((a).us_split_fields1).rec__messages__message__sent, 1, 10,
  ((b).us_split_fields1).rec__messages__message__sent, 1, 10) = true) and
  (bool_eq4(((a).us_split_fields1).rec__messages__message__received, 1, 10,
  ((b).us_split_fields1).rec__messages__message__received, 1, 10) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((bool_eq4(((a).us_split_fields1).rec__messages__message__sent, 1,
  10, ((b).us_split_fields1).rec__messages__message__sent, 1, 10) = true) and
  (bool_eq4(((a).us_split_fields1).rec__messages__message__received, 1, 10,
  ((b).us_split_fields1).rec__messages__message__received, 1,
  10) = true))) -> (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. forall a1:(int,character) farray.
  (0 <= object__size1({ us_split_fields1 = { rec__messages__message__sent =
  a; rec__messages__message__received = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. forall a1:(int,character) farray.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__messages__message__sent = a; rec__messages__message__received = a1 }
  })))

logic messages__message__sent__first__bit : int

logic messages__message__sent__last__bit : int

logic messages__message__sent__position : int

axiom messages__message__sent__first__bit_axiom :
  (0 <= messages__message__sent__first__bit)

axiom messages__message__sent__last__bit_axiom :
  (messages__message__sent__first__bit <  messages__message__sent__last__bit)

axiom messages__message__sent__position_axiom :
  (0 <= messages__message__sent__position)

logic messages__message__received__first__bit : int

logic messages__message__received__last__bit : int

logic messages__message__received__position : int

axiom messages__message__received__first__bit_axiom :
  (0 <= messages__message__received__first__bit)

axiom messages__message__received__last__bit_axiom :
  (messages__message__received__first__bit <  messages__message__received__last__bit)

axiom messages__message__received__position_axiom :
  (0 <= messages__message__received__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : (int,character) farray

logic dummy6 : (int,character) farray

type message__ref = { message__content : us_rep
}

function message__ref___projection(a: message__ref) : us_rep =
  (a).message__content

logic i1s : (int,character) farray

logic i1s1 : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,us_rep) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,us_rep) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,us_rep) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment2(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq7((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy7 : (int,us_rep) farray

logic dummy8 : t

type message_arr__ref = { message_arr__content : us_t
}

function message_arr__ref___projection(a: message_arr__ref) : us_t =
  (a).message_arr__content

logic to_rep2 : positive -> int

logic of_rep2 : int -> positive

axiom inversion_axiom2 :
  (forall x:positive [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:positive [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy9 : integer

type t3s__ref = { t3s__content : integer
}

function t3s__ref___projection(a: t3s__ref) : integer = (a).t3s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,us_rep) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,us_rep) farray = (a).elts1

function of_array1(a: (int,us_rep) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,us_rep) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,us_rep) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy10 : (int,us_rep) farray

logic dummy11 : t1

type t4s__ref = { t4s__content : us_t1
}

function t4s__ref___projection(a: t4s__ref) : us_t1 = (a).t4s__content

type us_split_discrs = { rec__communications__communication__num : positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__communications__communication__num

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__communications__communication__msgs : us_t1
}

function us_split_fields_Msgs__projection(a: us_split_fields2) : us_t1 =
  (a).rec__communications__communication__msgs

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((to_rep2(((a).us_split_discrs1).rec__communications__communication__num) = to_rep2(((b).us_split_discrs1).rec__communications__communication__num)) and
  (bool_eq10(((a).us_split_fields3).rec__communications__communication__msgs,
  ((b).us_split_fields3).rec__communications__communication__msgs) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs1).rec__communications__communication__num) = to_rep2(((b).us_split_discrs1).rec__communications__communication__num)) and
  (bool_eq10(((a).us_split_fields3).rec__communications__communication__msgs,
  ((b).us_split_fields3).rec__communications__communication__msgs) = true))) ->
  (bool_eq11(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:positive. forall a1:(int,us_rep) farray. forall a2:t1.
  (0 <= object__size4({ us_split_discrs1 = {
  rec__communications__communication__num = a }; us_split_fields3 = {
  rec__communications__communication__msgs = { elts1 = a1; rt1 = a2 } } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:positive. forall a1:(int,us_rep) farray. forall a2:t1.
  (0 <= object__alignment4({ us_split_discrs1 = {
  rec__communications__communication__num = a }; us_split_fields3 = {
  rec__communications__communication__msgs = { elts1 = a1; rt1 = a2 } } })))

logic communications__communication__num__first__bit : int

logic communications__communication__num__last__bit : int

logic communications__communication__num__position : int

axiom communications__communication__num__first__bit_axiom :
  (0 <= communications__communication__num__first__bit)

axiom communications__communication__num__last__bit_axiom :
  (communications__communication__num__first__bit <  communications__communication__num__last__bit)

axiom communications__communication__num__position_axiom :
  (0 <= communications__communication__num__position)

logic communications__communication__msgs__first__bit : int

logic communications__communication__msgs__last__bit : int

logic communications__communication__msgs__position : int

axiom communications__communication__msgs__first__bit_axiom :
  (0 <= communications__communication__msgs__first__bit)

axiom communications__communication__msgs__last__bit_axiom :
  (communications__communication__msgs__first__bit <  communications__communication__msgs__last__bit)

axiom communications__communication__msgs__position_axiom :
  (0 <= communications__communication__msgs__position)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy12 : positive

logic dummy13 : (int,us_rep) farray

logic dummy14 : t1

type communication__ref = { communication__content : us_rep1
}

function communication__ref___projection(a: communication__ref) : us_rep1 =
  (a).communication__content

logic a : (int,us_rep) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy15 : integer

type tT8bP1__ref = { tT8bP1__content : integer
}

function tT8bP1__ref___projection(a2: tT8bP1__ref) : integer =
  (a2).tT8bP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,us_rep) farray; rt2 : t2
}

function to_array2(a2: us_t2) : (int,us_rep) farray = (a2).elts2

function of_array2(a2: (int,us_rep) farray, f: int, l: int) : us_t2 = {
  elts2 = a2; rt2 = mk2(f, l) }

function first5(a2: us_t2) : int = to_rep1(first4((a2).rt2))

function last5(a2: us_t2) : int = to_rep1(last4((a2).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a2:us_t2 [length2(a2)]. (((first5(a2) <= last5(a2)) ->
  (length2(a2) = ((last5(a2) - first5(a2)) + 1))) and
  ((not (first5(a2) <= last5(a2))) -> (length2(a2) = 0))))

logic value__size5 : int

logic object__size5 : (int,us_rep) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,us_rep) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,us_rep) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a2:(int,us_rep) farray. (0 <= object__size5(a2)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a2:(int,us_rep) farray. (0 <= object__component__size3(a2)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a2:(int,us_rep) farray. (0 <= object__alignment5(a2)))

function bool_eq13(x: us_t2, y: us_t2) : bool = bool_eq7((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq11 : us_t2, us_t2 -> bool

logic dummy16 : (int,us_rep) farray

logic dummy17 : t2

type t8b__ref = { t8b__content : us_t2
}

function t8b__ref___projection(a2: t8b__ref) : us_t2 = (a2).t8b__content

type us_split_fields4 = { rec__communications__communication__msgs1 : us_t2
}

function us_split_fields_Msgs__2__projection(a2: us_split_fields4) : us_t2 =
  (a2).rec__communications__communication__msgs1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a2: us_split_fields__ref2) : us_split_fields4 =
  (a2).us_split_fields__content2

type us_rep2 = { us_split_discrs2 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___4__projection(a2: us_rep2) : us_split_discrs =
  (a2).us_split_discrs2

function us_rep___5__projection(a2: us_rep2) : us_split_fields4 =
  (a2).us_split_fields5

function to_base(a2: us_rep2) : us_rep1 = { us_split_discrs1 =
  (a2).us_split_discrs2; us_split_fields3 = {
  rec__communications__communication__msgs =
  of_array1(to_array2(((a2).us_split_fields5).rec__communications__communication__msgs1),
  first5(((a2).us_split_fields5).rec__communications__communication__msgs1),
  last5(((a2).us_split_fields5).rec__communications__communication__msgs1)) }
  }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__communications__communication__msgs1 =
  of_array2(to_array1(((r).us_split_fields3).rec__communications__communication__msgs),
  first3(((r).us_split_fields3).rec__communications__communication__msgs),
  last3(((r).us_split_fields3).rec__communications__communication__msgs)) } }

logic bool_eq14 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a2:us_rep2. forall b:us_rep2 [bool_eq14(a2, b)].
  ((((to_rep2(((a2).us_split_discrs2).rec__communications__communication__num) = to_rep2(((b).us_split_discrs2).rec__communications__communication__num)) and
  (bool_eq13(((a2).us_split_fields5).rec__communications__communication__msgs1,
  ((b).us_split_fields5).rec__communications__communication__msgs1) = true)) ->
  (bool_eq14(a2, b) = true)) and
  ((not ((to_rep2(((a2).us_split_discrs2).rec__communications__communication__num) = to_rep2(((b).us_split_discrs2).rec__communications__communication__num)) and
  (bool_eq13(((a2).us_split_fields5).rec__communications__communication__msgs1,
  ((b).us_split_fields5).rec__communications__communication__msgs1) = true))) ->
  (bool_eq14(a2, b) = false))))

predicate in_range4(rec__communications__communication__num1: int,
  a2: us_rep1) =
  (rec__communications__communication__num1 = to_rep2(((a2).us_split_discrs1).rec__communications__communication__num))

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a2:positive. forall a3:(int,us_rep) farray. forall a4:t2.
  (0 <= object__size6({ us_split_discrs2 = {
  rec__communications__communication__num = a2 }; us_split_fields5 = {
  rec__communications__communication__msgs1 = { elts2 = a3; rt2 = a4 } } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a2:positive. forall a3:(int,us_rep) farray. forall a4:t2.
  (0 <= object__alignment6({ us_split_discrs2 = {
  rec__communications__communication__num = a2 }; us_split_fields5 = {
  rec__communications__communication__msgs1 = { elts2 = a3; rt2 = a4 } } })))

logic communications__communication__num__first__bit1 : int

logic communications__communication__num__last__bit1 : int

logic communications__communication__num__position1 : int

axiom communications__communication__num__first__bit_axiom1 :
  (0 <= communications__communication__num__first__bit1)

axiom communications__communication__num__last__bit_axiom1 :
  (communications__communication__num__first__bit1 <  communications__communication__num__last__bit1)

axiom communications__communication__num__position_axiom1 :
  (0 <= communications__communication__num__position1)

logic communications__communication__msgs__first__bit1 : int

logic communications__communication__msgs__last__bit1 : int

logic communications__communication__msgs__position1 : int

axiom communications__communication__msgs__first__bit_axiom1 :
  (0 <= communications__communication__msgs__first__bit1)

axiom communications__communication__msgs__last__bit_axiom1 :
  (communications__communication__msgs__first__bit1 <  communications__communication__msgs__last__bit1)

axiom communications__communication__msgs__position_axiom1 :
  (0 <= communications__communication__msgs__position1)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy18 : positive

logic dummy19 : (int,us_rep) farray

logic dummy20 : t2

type tcomsS__ref = { tcomsS__content : us_rep2
}

function tcomsS__ref___projection(a2: tcomsS__ref) : us_rep2 =
  (a2).tcomsS__content

logic coms__split_discrs : positive

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "communications.ads", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall coms__split_fields:(int,us_rep) farray.
  forall coms__split_fields1:t2.
  forall communications__create__result:positive.
  forall communications__create__result1:(int,us_rep) farray.
  forall communications__create__result2:t1. forall o:int. forall us:int.
  forall temp___342:(int,us_rep) farray. forall temp___3421:t2.
  forall o1:(int,us_rep) farray. forall o2:t2. forall o3:(int,us_rep) farray.
  forall o4:t2. forall temp___345:positive.
  forall temp___3451:(int,us_rep) farray. forall temp___3452:t2.
  forall result:(int,us_rep) farray. forall result1:t2.
  forall coms__split_fields2:(int,us_rep) farray.
  forall coms__split_fields3:t2. forall result2:positive.
  forall result3:(int,us_rep) farray. forall result4:t1.
  forall communications__create__result3:positive.
  forall communications__create__result4:(int,us_rep) farray.
  forall communications__create__result5:t1.
  forall communications__create__result6:positive.
  forall communications__create__result7:(int,us_rep) farray.
  forall communications__create__result8:t1.
  forall communications__create__result9:positive.
  forall communications__create__result10:(int,us_rep) farray.
  forall communications__create__result11:t1.
  forall coms__split_fields4:(int,us_rep) farray.
  forall coms__split_fields5:t2.
  forall communications__create__result12:communication__ref.
  forall coms__split_fields6:us_split_fields4.
  forall communications__create__result13:us_rep1. ((compare(i1s, 1, 10,
  i1s1, 1, 10) <= 0) -> ((dynamic_property((- 2147483648), 2147483647,
  to_rep1(first(a1)), to_rep1(last(a1))) and
  (forall temp___204:int. (((to_rep1(first(a1)) <= temp___204) and
  (temp___204 <= to_rep1(last(a1)))) ->
  (compare((((a[temp___204])).us_split_fields1).rec__messages__message__sent,
  1, 10,
  (((a[temp___204])).us_split_fields1).rec__messages__message__received, 1,
  10) <= 0)))) -> ((((((o = length({ elts = a; rt = a1 })) and
  in_range(length({ elts = a; rt = a1 }))) and ((us = o) and
  in_range1(o))) and ((to_rep2(coms__split_discrs) = length({ elts = a; rt =
  a1 })) and (((length({ elts = a; rt = a1 }) = to_rep2(((to_base({
  us_split_discrs2 = { rec__communications__communication__num =
  coms__split_discrs }; us_split_fields5 = {
  rec__communications__communication__msgs1 = { elts2 = coms__split_fields;
  rt2 = coms__split_fields1 } }
  })).us_split_discrs1).rec__communications__communication__num)) and
  (dynamic_property4(1, length({ elts = a; rt = a1 }),
  to_rep1(first4(coms__split_fields1)),
  to_rep1(last4(coms__split_fields1))) and
  ((to_rep1(first4(coms__split_fields1)) = 1) and
  (to_rep1(last4(coms__split_fields1)) = length({ elts = a; rt = a1
  }))))) and (((((((((to_rep1(first(a1)) <= to_rep1(last(a1))) and
  (((1 <= length({ elts = a; rt = a1 })) and
  (((to_rep1(last(a1)) - to_rep1(first(a1))) + 1) = ((length({ elts = a; rt =
  a1 }) - 1) + 1))) or ((not (1 <= length({ elts = a; rt = a1 }))) and
  (((to_rep1(last(a1)) - to_rep1(first(a1))) + 1) = 0)))) or
  ((not (to_rep1(first(a1)) <= to_rep1(last(a1)))) and (((1 <= length({
  elts = a; rt = a1 })) and (0 = ((length({ elts = a; rt = a1
  }) - 1) + 1))) or (not (1 <= length({ elts = a; rt = a1 })))))) and
  ((slide1(a, to_rep1(first(a1)), 1) = temp___342) and (mk2(1, length({
  elts = a; rt = a1 })) = temp___3421))) and
  ((((to_rep1(first4(temp___3421)) <= to_rep1(last4(temp___3421))) and
  (((to_rep1(first4(coms__split_fields1)) <= to_rep1(last4(coms__split_fields1))) and
  (((to_rep1(last4(temp___3421)) - to_rep1(first4(temp___3421))) + 1) = ((to_rep1(last4(coms__split_fields1)) - to_rep1(first4(coms__split_fields1))) + 1))) or
  ((not (to_rep1(first4(coms__split_fields1)) <= to_rep1(last4(coms__split_fields1)))) and
  (((to_rep1(last4(temp___3421)) - to_rep1(first4(temp___3421))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___3421)) <= to_rep1(last4(temp___3421)))) and
  (((to_rep1(first4(coms__split_fields1)) <= to_rep1(last4(coms__split_fields1))) and
  (0 = ((to_rep1(last4(coms__split_fields1)) - to_rep1(first4(coms__split_fields1))) + 1))) or
  (not (to_rep1(first4(coms__split_fields1)) <= to_rep1(last4(coms__split_fields1))))))) and
  ((o1 = temp___342) and (o2 = temp___3421)))) and ((o3 = o1) and
  (o4 = o2))) and ((coms__split_discrs = temp___345) and
  ((temp___3451 = o3) and (temp___3452 = o4)))) and
  ((((result = coms__split_fields) and (result1 = coms__split_fields1)) and
  ((temp___3451 = coms__split_fields2) and
  (temp___3452 = coms__split_fields3))) and
  (coms__split_discrs = temp___345))) and
  ((((communications__create__result6 = communications__create__result3) and
  ((communications__create__result7 = communications__create__result4) and
  (communications__create__result8 = communications__create__result5))) and
  ({ us_split_discrs1 = { rec__communications__communication__num =
  communications__create__result9 }; us_split_fields3 = {
  rec__communications__communication__msgs = { elts1 =
  communications__create__result10; rt1 = communications__create__result11 }
  } } = { us_split_discrs1 = { rec__communications__communication__num =
  communications__create__result3 }; us_split_fields3 = {
  rec__communications__communication__msgs = { elts1 =
  communications__create__result4; rt1 = communications__create__result5 } }
  })) and (((result2 = communications__create__result) and
  ((result3 = communications__create__result1) and
  (result4 = communications__create__result2))) and ({ us_split_discrs1 = {
  rec__communications__communication__num = communications__create__result3
  }; us_split_fields3 = { rec__communications__communication__msgs = {
  elts1 = communications__create__result4; rt1 =
  communications__create__result5 } } } = to_base({ us_split_discrs2 = {
  rec__communications__communication__num = coms__split_discrs };
  us_split_fields5 = { rec__communications__communication__msgs1 = { elts2 =
  coms__split_fields2; rt2 = coms__split_fields3 } } })))))))) and
  (((communications__create__result12 = { communication__content = {
  us_split_discrs1 = { rec__communications__communication__num =
  communications__create__result6 }; us_split_fields3 = {
  rec__communications__communication__msgs = { elts1 =
  communications__create__result7; rt1 = communications__create__result8 } }
  } }) and ((coms__split_fields4 = coms__split_fields2) and
  (coms__split_fields5 = coms__split_fields3))) and
  ((communications__create__result13 = { us_split_discrs1 = {
  rec__communications__communication__num = communications__create__result9
  }; us_split_fields3 = { rec__communications__communication__msgs = {
  elts1 = communications__create__result10; rt1 =
  communications__create__result11 } } }) and (coms__split_fields6 = {
  rec__communications__communication__msgs1 = { elts2 = coms__split_fields2;
  rt2 = coms__split_fields3 } })))) ->
  (forall idx:int. (((1 <= idx) and
  (idx <= (to_rep2((((communications__create__result12).communication__content).us_split_discrs1).rec__communications__communication__num) - 1))) ->
  (compare((((((((communications__create__result12).communication__content).us_split_fields3).rec__communications__communication__msgs).elts1[idx])).us_split_fields1).rec__messages__message__received,
  1, 10,
  (((((((communications__create__result12).communication__content).us_split_fields3).rec__communications__communication__msgs).elts1[(idx + 1)])).us_split_fields1).rec__messages__message__received,
  1, 10) <= 0)))))))
