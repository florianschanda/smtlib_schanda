(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort character 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (character character) Bool)
(declare-const dummy character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun blah ((Array Int character)) Bool)
(declare-fun blah__function_guard (Bool (Array Int character)) Bool)
(assert true)
(assert (forall ((s (Array Int character))) (! (= (= (blah s) true) (= (to_rep (select s 1)) 97)) :pattern ((blah s)))))
(declare-sort tTxSP1 0)
(declare-fun tTxSP1qtint (tTxSP1) Int)
(assert (forall ((i tTxSP1)) (and (<= 5 (tTxSP1qtint i)) (<= (tTxSP1qtint i) 7))))
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tTxSP1 tTxSP1) Bool)
(declare-const dummy1 tTxSP1)
(declare-datatypes () ((tTxSP1__ref (mk_tTxSP1__ref (tTxSP1__content tTxSP1)))))
(define-fun tTxSP1__ref___projection ((a tTxSP1__ref)) tTxSP1 (tTxSP1__content a))
(declare-const x (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun p__x__aggregate_def (Int Int Int) (Array Int character))
(declare-sort tstr3P1 0)
(declare-fun tstr3P1qtint (tstr3P1) Int)
(assert (forall ((i tstr3P1)) (and (<= 1 (tstr3P1qtint i)) (<= (tstr3P1qtint i) 3))))
(define-fun in_range2 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 3)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (tstr3P1 tstr3P1) Bool)
(declare-const dummy2 tstr3P1)
(declare-datatypes () ((tstr3P1__ref (mk_tstr3P1__ref (tstr3P1__content tstr3P1)))))
(define-fun tstr3P1__ref___projection ((a tstr3P1__ref)) tstr3P1 (tstr3P1__content a))
(define-fun dynamic_invariant ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range temp___expr_74)))
(assert (= x (p__x__aggregate_def 97 98 99)))
(assert (forall ((temp___155 Int) (temp___156 Int) (temp___157 Int)) (let ((temp___154 (p__x__aggregate_def temp___155 temp___156 temp___157))) (=> (and (and (dynamic_invariant temp___155 true true true true) (dynamic_invariant temp___156 true true true true)) (dynamic_invariant temp___157 true true true true)) (and (and (= (to_rep (select temp___154 5)) temp___155) (= (to_rep (select temp___154 6)) temp___156)) (= (to_rep (select temp___154 7)) temp___157))))))
(assert (= (p__x__aggregate_def 97 98 99) x))
(assert (not (= (blah (slide x 5 1)) true)))
(check-sat)
(exit)
