(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort priority 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 97)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (priority priority) Bool)
(declare-const dummy priority)
(declare-datatypes () ((priority__ref (mk_priority__ref (priority__content priority)))))
(define-fun priority__ref___projection ((a priority__ref)) priority (priority__content a))
(declare-sort task_id 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (task_id task_id) Bool)
(declare-const dummy1 task_id)
(declare-datatypes () ((task_id__ref (mk_task_id__ref (task_id__content task_id)))))
(define-fun task_id__ref___projection ((a task_id__ref)) task_id (task_id__content a))
(define-fun dynamic_invariant ((temp___expr_173 Int) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool)) Bool (=> (or (= temp___is_init_170 true) (<= 0 2)) (in_range1 temp___expr_173)))
(declare-const id Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort pt 0)
(declare-fun user_eq2 (pt pt) Bool)
(declare-const value__size Int)
(declare-fun object__size (pt) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (pt) Int)
(assert (<= 0 value__size))
(assert (forall ((a pt)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a pt)) (<= 0 (object__alignment a))))
(declare-datatypes () ((pt__ref (mk_pt__ref (pt__content pt)))))
(define-fun pt__ref___projection ((a pt__ref)) pt (pt__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int pt))))))
(declare-fun slide ((Array Int pt) Int Int) (Array Int pt))
(assert (forall ((a (Array Int pt))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int pt))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int pt) Int Int (Array Int pt) Int Int) (Array Int pt))
(assert (forall ((a (Array Int pt)) (b (Array Int pt))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (pt Int) (Array Int pt))
(assert (forall ((v pt)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-fun bool_eq ((Array Int pt) Int Int (Array Int pt) Int Int) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_161 Int) (temp___is_init_158 Bool) (temp___skip_constant_159 Bool) (temp___do_toplevel_160 Bool)) Bool (=> (or (= temp___is_init_158 true) (<= 0 97)) (in_range temp___expr_161)))
(declare-const temp___202 (Array Int pt))
(declare-const o pt)
(declare-const us_self__compl pt)
(declare-const pos (Array Int pt))
(declare-const us_self__compl1 pt)
(declare-const result (Array Int pt))
(declare-const pos1 (Array Int pt))
(assert (not (not (and (in_range1 id) (and (and (and (= temp___202 pos) (= o (select temp___202 id))) (= o us_self__compl)) (and (= result pos) (= pos1 (store pos id us_self__compl1))))))))
(check-sat)
(exit)
