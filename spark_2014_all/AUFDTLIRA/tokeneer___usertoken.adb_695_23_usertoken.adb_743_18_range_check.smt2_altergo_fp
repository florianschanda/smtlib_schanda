(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type descriptioni

predicate in_range2(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : descriptioni, descriptioni -> bool

logic dummy1 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___140:int.
  (forall temp___141:int.
  ((audittypes__nodescription__aggregate_def(temp___140)[temp___141]) = of_rep(temp___140))))

type yearst

predicate in_range3(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : yearst, yearst -> bool

logic dummy2 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep1 : yearst -> int

logic of_rep1 : int -> yearst

axiom inversion_axiom1 :
  (forall x:yearst [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:yearst [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type monthst

predicate in_range4(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : monthst, monthst -> bool

logic dummy3 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep2 : monthst -> int

logic of_rep2 : int -> monthst

axiom inversion_axiom2 :
  (forall x:monthst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:monthst [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type dayst

predicate in_range5(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : dayst, dayst -> bool

logic dummy4 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep3 : dayst -> int

logic of_rep3 : int -> dayst

axiom inversion_axiom3 :
  (forall x:dayst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:dayst [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type millisecst

predicate in_range6(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : millisecst, millisecst -> bool

logic dummy5 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep4 : millisecst -> int

logic of_rep4 : int -> millisecst

axiom inversion_axiom4 :
  (forall x:millisecst [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:millisecst [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((((to_rep1(((a).us_split_fields1).rec__clock__timet__year) = to_rep1(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__month) = to_rep2(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__day) = to_rep3(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep4(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep4(((b).us_split_fields1).rec__clock__timet__millisec))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields1).rec__clock__timet__year) = to_rep1(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__month) = to_rep2(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__day) = to_rep3(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep4(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep4(((b).us_split_fields1).rec__clock__timet__millisec)))) ->
  (bool_eq9(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : yearst

logic dummy7 : monthst

logic dummy8 : dayst

logic dummy9 : millisecst

type timet__ref = { timet__content : us_rep
}

function timet__ref___projection(a: timet__ref) : us_rep = (a).timet__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type algorithmt

predicate in_range7(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : algorithmt, algorithmt -> bool

logic dummy10 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep5 : algorithmt -> int

logic of_rep5 : int -> algorithmt

axiom inversion_axiom5 :
  (forall x:algorithmt [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:algorithmt [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

type namecountt

predicate in_range8(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : namecountt, namecountt -> bool

logic dummy11 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep6 : namecountt -> int

logic of_rep6 : int -> namecountt

axiom inversion_axiom6 :
  (forall x:namecountt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:namecountt [to_rep6(x)]. in_range8(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range8(x) ->
  (to_rep6(of_rep6(x)) = x)))

logic dummy12 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range9(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : issueridt, issueridt -> bool

logic dummy13 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep7 : issueridt -> int

logic of_rep7 : int -> issueridt

axiom inversion_axiom7 :
  (forall x:issueridt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : (forall x:issueridt [to_rep7(x)]. in_range9(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range9(x) ->
  (to_rep7(of_rep7(x)) = x)))

type us_split_fields2 = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields2) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields2) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  (((((to_rep7(((a).us_split_fields3).rec__cryptotypes__issuert__id) = to_rep7(((b).us_split_fields3).rec__cryptotypes__issuert__id)) and
  (to_rep6(((a).us_split_fields3).rec__cryptotypes__issuert__namelength) = to_rep6(((b).us_split_fields3).rec__cryptotypes__issuert__namelength))) and
  (bool_eq3(((a).us_split_fields3).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields3).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq13(a, b) = true)) and
  ((not (((to_rep7(((a).us_split_fields3).rec__cryptotypes__issuert__id) = to_rep7(((b).us_split_fields3).rec__cryptotypes__issuert__id)) and
  (to_rep6(((a).us_split_fields3).rec__cryptotypes__issuert__namelength) = to_rep6(((b).us_split_fields3).rec__cryptotypes__issuert__namelength))) and
  (bool_eq3(((a).us_split_fields3).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields3).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq13(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size2({ us_split_fields3 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment2({
  us_split_fields3 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy14 : issueridt

logic dummy15 : namecountt

logic dummy16 : (int,character) farray

type issuert__ref = { issuert__content : us_rep1
}

function issuert__ref___projection(a: issuert__ref) : us_rep1 =
  (a).issuert__content

type serialnumbert

predicate in_range10(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : serialnumbert, serialnumbert -> bool

logic dummy17 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep8 : serialnumbert -> int

logic of_rep8 : int -> serialnumbert

axiom inversion_axiom8 :
  (forall x:serialnumbert [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:serialnumbert [to_rep8(x)]. in_range10(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range10(x) ->
  (to_rep8(of_rep8(x)) = x)))

type us_split_fields4 = { rec__certtypes__idt__issuer : us_rep1;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields4) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((bool_eq13(((a).us_split_fields5).rec__certtypes__idt__issuer,
  ((b).us_split_fields5).rec__certtypes__idt__issuer) = true) and
  (to_rep8(((a).us_split_fields5).rec__certtypes__idt__serialnumber) = to_rep8(((b).us_split_fields5).rec__certtypes__idt__serialnumber))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((bool_eq13(((a).us_split_fields5).rec__certtypes__idt__issuer,
  ((b).us_split_fields5).rec__certtypes__idt__issuer) = true) and
  (to_rep8(((a).us_split_fields5).rec__certtypes__idt__serialnumber) = to_rep8(((b).us_split_fields5).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq15(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size3({ us_split_fields5 = { rec__certtypes__idt__issuer = {
  us_split_fields3 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment3({ us_split_fields5 = {
  rec__certtypes__idt__issuer = { us_split_fields3 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq13 : us_rep2, us_rep2 -> bool

logic dummy18 : issueridt

logic dummy19 : namecountt

logic dummy20 : (int,character) farray

logic dummy21 : serialnumbert

type idt__ref = { idt__content : us_rep2
}

function idt__ref___projection(a: idt__ref) : us_rep2 = (a).idt__content

type us_split_fields6 = { rec__cert__contentst__id : us_rep2;
rec__cert__contentst__notbefore : us_rep; rec__cert__contentst__notafter :
us_rep; rec__cert__contentst__mechanism : algorithmt
}

function us_split_fields_ID__3__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__cert__contentst__id

function us_split_fields_NotBefore__projection(a: us_split_fields6) : us_rep =
  (a).rec__cert__contentst__notbefore

function us_split_fields_NotAfter__projection(a: us_split_fields6) : us_rep =
  (a).rec__cert__contentst__notafter

function us_split_fields_Mechanism__projection(a: us_split_fields6) : algorithmt =
  (a).rec__cert__contentst__mechanism

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___14__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq16 : us_rep3, us_rep3 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq16(a, b)].
  ((((((bool_eq15(((a).us_split_fields7).rec__cert__contentst__id,
  ((b).us_split_fields7).rec__cert__contentst__id) = true) and
  (bool_eq9(((a).us_split_fields7).rec__cert__contentst__notbefore,
  ((b).us_split_fields7).rec__cert__contentst__notbefore) = true)) and
  (bool_eq9(((a).us_split_fields7).rec__cert__contentst__notafter,
  ((b).us_split_fields7).rec__cert__contentst__notafter) = true)) and
  (to_rep5(((a).us_split_fields7).rec__cert__contentst__mechanism) = to_rep5(((b).us_split_fields7).rec__cert__contentst__mechanism))) ->
  (bool_eq16(a, b) = true)) and
  ((not ((((bool_eq15(((a).us_split_fields7).rec__cert__contentst__id,
  ((b).us_split_fields7).rec__cert__contentst__id) = true) and
  (bool_eq9(((a).us_split_fields7).rec__cert__contentst__notbefore,
  ((b).us_split_fields7).rec__cert__contentst__notbefore) = true)) and
  (bool_eq9(((a).us_split_fields7).rec__cert__contentst__notafter,
  ((b).us_split_fields7).rec__cert__contentst__notafter) = true)) and
  (to_rep5(((a).us_split_fields7).rec__cert__contentst__mechanism) = to_rep5(((b).us_split_fields7).rec__cert__contentst__mechanism)))) ->
  (bool_eq16(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep3. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep3. (0 <= object__alignment4(a)))

logic cert__contentst__id__first__bit : int

logic cert__contentst__id__last__bit : int

logic cert__contentst__id__position : int

axiom cert__contentst__id__first__bit_axiom :
  (0 <= cert__contentst__id__first__bit)

axiom cert__contentst__id__last__bit_axiom :
  (cert__contentst__id__first__bit <  cert__contentst__id__last__bit)

axiom cert__contentst__id__position_axiom :
  (0 <= cert__contentst__id__position)

logic cert__contentst__notbefore__first__bit : int

logic cert__contentst__notbefore__last__bit : int

logic cert__contentst__notbefore__position : int

axiom cert__contentst__notbefore__first__bit_axiom :
  (0 <= cert__contentst__notbefore__first__bit)

axiom cert__contentst__notbefore__last__bit_axiom :
  (cert__contentst__notbefore__first__bit <  cert__contentst__notbefore__last__bit)

axiom cert__contentst__notbefore__position_axiom :
  (0 <= cert__contentst__notbefore__position)

logic cert__contentst__notafter__first__bit : int

logic cert__contentst__notafter__last__bit : int

logic cert__contentst__notafter__position : int

axiom cert__contentst__notafter__first__bit_axiom :
  (0 <= cert__contentst__notafter__first__bit)

axiom cert__contentst__notafter__last__bit_axiom :
  (cert__contentst__notafter__first__bit <  cert__contentst__notafter__last__bit)

axiom cert__contentst__notafter__position_axiom :
  (0 <= cert__contentst__notafter__position)

logic cert__contentst__mechanism__first__bit : int

logic cert__contentst__mechanism__last__bit : int

logic cert__contentst__mechanism__position : int

axiom cert__contentst__mechanism__first__bit_axiom :
  (0 <= cert__contentst__mechanism__first__bit)

axiom cert__contentst__mechanism__last__bit_axiom :
  (cert__contentst__mechanism__first__bit <  cert__contentst__mechanism__last__bit)

axiom cert__contentst__mechanism__position_axiom :
  (0 <= cert__contentst__mechanism__position)

logic user_eq14 : us_rep3, us_rep3 -> bool

logic dummy22 : issueridt

logic dummy23 : namecountt

logic dummy24 : (int,character) farray

logic dummy25 : serialnumbert

logic dummy26 : yearst

logic dummy27 : monthst

logic dummy28 : dayst

logic dummy29 : millisecst

logic dummy30 : yearst

logic dummy31 : monthst

logic dummy32 : dayst

logic dummy33 : millisecst

logic dummy34 : algorithmt

type contentst__ref = { contentst__content : us_rep3
}

function contentst__ref___projection(a: contentst__ref) : us_rep3 =
  (a).contentst__content

logic iscurrent : us_rep3, us_split_fields, us_private -> bool

logic iscurrent__function_guard : bool, us_rep3, us_split_fields,
  us_private -> prop

axiom iscurrent__post_axiom : true

type keyidt

predicate in_range11(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : keyidt, keyidt -> bool

logic dummy35 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep9 : keyidt -> int

logic of_rep9 : int -> keyidt

axiom inversion_axiom9 :
  (forall x:keyidt [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 : (forall x:keyidt [to_rep9(x)]. in_range11(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range11(x) ->
  (to_rep9(of_rep9(x)) = x)))

type keylengtht

predicate in_range12(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq16 : keylengtht, keylengtht -> bool

logic dummy36 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep10 : keylengtht -> int

logic of_rep10 : int -> keylengtht

axiom inversion_axiom10 :
  (forall x:keylengtht [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:keylengtht [to_rep10(x)]. in_range12(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range12(x) ->
  (to_rep10(of_rep10(x)) = x)))

type us_split_fields8 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields8) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields8) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields8) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___2__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq19 : us_rep4, us_rep4 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq19(a, b)].
  (((((to_rep5(((a).us_split_fields9).rec__cryptotypes__keypartt__algorithmid) = to_rep5(((b).us_split_fields9).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep9(((a).us_split_fields9).rec__cryptotypes__keypartt__keyid) = to_rep9(((b).us_split_fields9).rec__cryptotypes__keypartt__keyid))) and
  (to_rep10(((a).us_split_fields9).rec__cryptotypes__keypartt__keylength) = to_rep10(((b).us_split_fields9).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq19(a, b) = true)) and
  ((not (((to_rep5(((a).us_split_fields9).rec__cryptotypes__keypartt__algorithmid) = to_rep5(((b).us_split_fields9).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep9(((a).us_split_fields9).rec__cryptotypes__keypartt__keyid) = to_rep9(((b).us_split_fields9).rec__cryptotypes__keypartt__keyid))) and
  (to_rep10(((a).us_split_fields9).rec__cryptotypes__keypartt__keylength) = to_rep10(((b).us_split_fields9).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq19(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size5({ us_split_fields9 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment5({ us_split_fields9 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq17 : us_rep4, us_rep4 -> bool

logic dummy37 : algorithmt

logic dummy38 : keyidt

logic dummy39 : keylengtht

type keypartt__ref = { keypartt__content : us_rep4
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep4 =
  (a).keypartt__content

type us_split_fields10 = { rec__cert__id__contentst__id : us_rep2;
rec__cert__id__contentst__notbefore : us_rep;
rec__cert__id__contentst__notafter : us_rep;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep1;
rec__cert__id__contentst__subjectpublickey : us_rep4
}

function us_split_fields_ID__4__projection(a: us_split_fields10) : us_rep2 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore__2__projection(a: us_split_fields10) : us_rep =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter__2__projection(a: us_split_fields10) : us_rep =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism__2__projection(a: us_split_fields10) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__projection(a: us_split_fields10) : us_rep1 =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields10) : us_rep4 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___15__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq20 : us_rep5, us_rep5 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq20(a, b)].
  ((((((((bool_eq15(((a).us_split_fields11).rec__cert__id__contentst__id,
  ((b).us_split_fields11).rec__cert__id__contentst__id) = true) and
  (bool_eq9(((a).us_split_fields11).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields11).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq9(((a).us_split_fields11).rec__cert__id__contentst__notafter,
  ((b).us_split_fields11).rec__cert__id__contentst__notafter) = true)) and
  (to_rep5(((a).us_split_fields11).rec__cert__id__contentst__mechanism) = to_rep5(((b).us_split_fields11).rec__cert__id__contentst__mechanism))) and
  (bool_eq13(((a).us_split_fields11).rec__cert__id__contentst__subject,
  ((b).us_split_fields11).rec__cert__id__contentst__subject) = true)) and
  (bool_eq19(((a).us_split_fields11).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields11).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq20(a, b) = true)) and
  ((not ((((((bool_eq15(((a).us_split_fields11).rec__cert__id__contentst__id,
  ((b).us_split_fields11).rec__cert__id__contentst__id) = true) and
  (bool_eq9(((a).us_split_fields11).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields11).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq9(((a).us_split_fields11).rec__cert__id__contentst__notafter,
  ((b).us_split_fields11).rec__cert__id__contentst__notafter) = true)) and
  (to_rep5(((a).us_split_fields11).rec__cert__id__contentst__mechanism) = to_rep5(((b).us_split_fields11).rec__cert__id__contentst__mechanism))) and
  (bool_eq13(((a).us_split_fields11).rec__cert__id__contentst__subject,
  ((b).us_split_fields11).rec__cert__id__contentst__subject) = true)) and
  (bool_eq19(((a).us_split_fields11).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields11).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq20(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep5 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep5 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep5. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep5. (0 <= object__alignment6(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq18 : us_rep5, us_rep5 -> bool

logic dummy40 : issueridt

logic dummy41 : namecountt

logic dummy42 : (int,character) farray

logic dummy43 : serialnumbert

logic dummy44 : yearst

logic dummy45 : monthst

logic dummy46 : dayst

logic dummy47 : millisecst

logic dummy48 : yearst

logic dummy49 : monthst

logic dummy50 : dayst

logic dummy51 : millisecst

logic dummy52 : algorithmt

logic dummy53 : issueridt

logic dummy54 : namecountt

logic dummy55 : (int,character) farray

logic dummy56 : algorithmt

logic dummy57 : keyidt

logic dummy58 : keylengtht

type contentst__ref1 = { contentst__content1 : us_rep5
}

function contentst__ref___2__projection(a: contentst__ref1) : us_rep5 =
  (a).contentst__content1

logic cert_id_to_cert : us_rep5 -> us_rep3

logic cert_id_to_cert__function_guard : us_rep3, us_rep5 -> prop

axiom cert_id_to_cert__post_axiom : true

type certificatestatus

predicate in_range13(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq19 : certificatestatus, certificatestatus -> bool

logic dummy59 : certificatestatus

type certificatestatus__ref = { certificatestatus__content :
certificatestatus
}

function certificatestatus__ref___projection(a: certificatestatus__ref) : certificatestatus =
  (a).certificatestatus__content

logic to_rep11 : certificatestatus -> int

logic of_rep11 : int -> certificatestatus

axiom inversion_axiom11 :
  (forall x:certificatestatus [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:certificatestatus [to_rep11(x)]. in_range13(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range13(x) ->
  (to_rep11(of_rep11(x)) = x)))

type us_split_fields12 = { rec__usertoken__valididcertt__valid : bool;
rec__usertoken__valididcertt__idstatus : certificatestatus;
rec__usertoken__valididcertt__contents : us_rep5
}

function us_split_fields_Valid__projection(a: us_split_fields12) : bool =
  (a).rec__usertoken__valididcertt__valid

function us_split_fields_IDStatus__projection(a: us_split_fields12) : certificatestatus =
  (a).rec__usertoken__valididcertt__idstatus

function us_split_fields_Contents__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__usertoken__valididcertt__contents

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___27__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_fields13 : us_split_fields12
}

function us_rep___28__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq22 : us_rep6, us_rep6 -> bool

axiom bool_eq_def21 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq22(a, b)].
  (((((((a).us_split_fields13).rec__usertoken__valididcertt__valid = ((b).us_split_fields13).rec__usertoken__valididcertt__valid) and
  (to_rep11(((a).us_split_fields13).rec__usertoken__valididcertt__idstatus) = to_rep11(((b).us_split_fields13).rec__usertoken__valididcertt__idstatus))) and
  (bool_eq20(((a).us_split_fields13).rec__usertoken__valididcertt__contents,
  ((b).us_split_fields13).rec__usertoken__valididcertt__contents) = true)) ->
  (bool_eq22(a, b) = true)) and
  ((not (((((a).us_split_fields13).rec__usertoken__valididcertt__valid = ((b).us_split_fields13).rec__usertoken__valididcertt__valid) and
  (to_rep11(((a).us_split_fields13).rec__usertoken__valididcertt__idstatus) = to_rep11(((b).us_split_fields13).rec__usertoken__valididcertt__idstatus))) and
  (bool_eq20(((a).us_split_fields13).rec__usertoken__valididcertt__contents,
  ((b).us_split_fields13).rec__usertoken__valididcertt__contents) = true))) ->
  (bool_eq22(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep6 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep6 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep6. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep6. (0 <= object__alignment7(a)))

logic usertoken__valididcertt__valid__first__bit : int

logic usertoken__valididcertt__valid__last__bit : int

logic usertoken__valididcertt__valid__position : int

axiom usertoken__valididcertt__valid__first__bit_axiom :
  (0 <= usertoken__valididcertt__valid__first__bit)

axiom usertoken__valididcertt__valid__last__bit_axiom :
  (usertoken__valididcertt__valid__first__bit <  usertoken__valididcertt__valid__last__bit)

axiom usertoken__valididcertt__valid__position_axiom :
  (0 <= usertoken__valididcertt__valid__position)

logic usertoken__valididcertt__idstatus__first__bit : int

logic usertoken__valididcertt__idstatus__last__bit : int

logic usertoken__valididcertt__idstatus__position : int

axiom usertoken__valididcertt__idstatus__first__bit_axiom :
  (0 <= usertoken__valididcertt__idstatus__first__bit)

axiom usertoken__valididcertt__idstatus__last__bit_axiom :
  (usertoken__valididcertt__idstatus__first__bit <  usertoken__valididcertt__idstatus__last__bit)

axiom usertoken__valididcertt__idstatus__position_axiom :
  (0 <= usertoken__valididcertt__idstatus__position)

logic usertoken__valididcertt__contents__first__bit : int

logic usertoken__valididcertt__contents__last__bit : int

logic usertoken__valididcertt__contents__position : int

axiom usertoken__valididcertt__contents__first__bit_axiom :
  (0 <= usertoken__valididcertt__contents__first__bit)

axiom usertoken__valididcertt__contents__last__bit_axiom :
  (usertoken__valididcertt__contents__first__bit <  usertoken__valididcertt__contents__last__bit)

axiom usertoken__valididcertt__contents__position_axiom :
  (0 <= usertoken__valididcertt__contents__position)

logic user_eq20 : us_rep6, us_rep6 -> bool

logic dummy60 : bool

logic dummy61 : certificatestatus

logic dummy62 : issueridt

logic dummy63 : namecountt

logic dummy64 : (int,character) farray

logic dummy65 : serialnumbert

logic dummy66 : yearst

logic dummy67 : monthst

logic dummy68 : dayst

logic dummy69 : millisecst

logic dummy70 : yearst

logic dummy71 : monthst

logic dummy72 : dayst

logic dummy73 : millisecst

logic dummy74 : algorithmt

logic dummy75 : issueridt

logic dummy76 : namecountt

logic dummy77 : (int,character) farray

logic dummy78 : algorithmt

logic dummy79 : keyidt

logic dummy80 : keylengtht

type valididcertt__ref = { valididcertt__content : us_rep6
}

function valididcertt__ref___projection(a: valididcertt__ref) : us_rep6 =
  (a).valididcertt__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c16b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic c24b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic c32b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic temp___String_Literal_2651 : unit -> (int,character) farray

axiom temp___String_Literal_2651__def_axiom :
  ((((((((((((((((((to_rep((temp___String_Literal_2651(void)[1])) = 73) and
  (to_rep((temp___String_Literal_2651(void)[2])) = 68)) and
  (to_rep((temp___String_Literal_2651(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_2651(void)[4])) = 67)) and
  (to_rep((temp___String_Literal_2651(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_2651(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_2651(void)[7])) = 116)) and
  (to_rep((temp___String_Literal_2651(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_2651(void)[9])) = 102)) and
  (to_rep((temp___String_Literal_2651(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_2651(void)[11])) = 99)) and
  (to_rep((temp___String_Literal_2651(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_2651(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_2651(void)[14])) = 101)) and
  (to_rep((temp___String_Literal_2651(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_2651(void)[16])) = 66)) and
  (to_rep((temp___String_Literal_2651(void)[17])) = 97)) and
  (to_rep((temp___String_Literal_2651(void)[18])) = 100))

logic temp___String_Literal_2656 : unit -> (int,character) farray

axiom temp___String_Literal_2656__def_axiom :
  (((((((((((((((((((((((((((((to_rep((temp___String_Literal_2656(void)[1])) = 73) and
  (to_rep((temp___String_Literal_2656(void)[2])) = 68)) and
  (to_rep((temp___String_Literal_2656(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_2656(void)[4])) = 67)) and
  (to_rep((temp___String_Literal_2656(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_2656(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_2656(void)[7])) = 116)) and
  (to_rep((temp___String_Literal_2656(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_2656(void)[9])) = 102)) and
  (to_rep((temp___String_Literal_2656(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_2656(void)[11])) = 99)) and
  (to_rep((temp___String_Literal_2656(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_2656(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_2656(void)[14])) = 101)) and
  (to_rep((temp___String_Literal_2656(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_2656(void)[16])) = 78)) and
  (to_rep((temp___String_Literal_2656(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_2656(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_2656(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_2656(void)[20])) = 86)) and
  (to_rep((temp___String_Literal_2656(void)[21])) = 101)) and
  (to_rep((temp___String_Literal_2656(void)[22])) = 114)) and
  (to_rep((temp___String_Literal_2656(void)[23])) = 105)) and
  (to_rep((temp___String_Literal_2656(void)[24])) = 102)) and
  (to_rep((temp___String_Literal_2656(void)[25])) = 105)) and
  (to_rep((temp___String_Literal_2656(void)[26])) = 97)) and
  (to_rep((temp___String_Literal_2656(void)[27])) = 98)) and
  (to_rep((temp___String_Literal_2656(void)[28])) = 108)) and
  (to_rep((temp___String_Literal_2656(void)[29])) = 101))

logic temp___String_Literal_2661 : unit -> (int,character) farray

axiom temp___String_Literal_2661__def_axiom :
  ((((((((((((((((((((((((((to_rep((temp___String_Literal_2661(void)[1])) = 73) and
  (to_rep((temp___String_Literal_2661(void)[2])) = 68)) and
  (to_rep((temp___String_Literal_2661(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_2661(void)[4])) = 67)) and
  (to_rep((temp___String_Literal_2661(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_2661(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_2661(void)[7])) = 116)) and
  (to_rep((temp___String_Literal_2661(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_2661(void)[9])) = 102)) and
  (to_rep((temp___String_Literal_2661(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_2661(void)[11])) = 99)) and
  (to_rep((temp___String_Literal_2661(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_2661(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_2661(void)[14])) = 101)) and
  (to_rep((temp___String_Literal_2661(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_2661(void)[16])) = 78)) and
  (to_rep((temp___String_Literal_2661(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_2661(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_2661(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_2661(void)[20])) = 67)) and
  (to_rep((temp___String_Literal_2661(void)[21])) = 117)) and
  (to_rep((temp___String_Literal_2661(void)[22])) = 114)) and
  (to_rep((temp___String_Literal_2661(void)[23])) = 114)) and
  (to_rep((temp___String_Literal_2661(void)[24])) = 101)) and
  (to_rep((temp___String_Literal_2661(void)[25])) = 110)) and
  (to_rep((temp___String_Literal_2661(void)[26])) = 116))

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

logic currenttimevar__split_fields : yearst

logic currenttimevar__split_fields1 : monthst

logic currenttimevar__split_fields2 : dayst

logic currenttimevar__split_fields3 : millisecst

logic idcert__split_fields : bool

logic idcert__split_fields1 : certificatestatus

logic idcert__split_fields2 : issueridt

logic idcert__split_fields3 : namecountt

logic idcert__split_fields4 : (int,character) farray

logic idcert__split_fields5 : serialnumbert

logic idcert__split_fields6 : yearst

logic idcert__split_fields7 : monthst

logic idcert__split_fields8 : dayst

logic idcert__split_fields9 : millisecst

logic idcert__split_fields10 : yearst

logic idcert__split_fields11 : monthst

logic idcert__split_fields12 : dayst

logic idcert__split_fields13 : millisecst

logic idcert__split_fields14 : algorithmt

logic idcert__split_fields15 : issueridt

logic idcert__split_fields16 : namecountt

logic idcert__split_fields17 : (int,character) farray

logic idcert__split_fields18 : algorithmt

logic idcert__split_fields19 : keyidt

logic idcert__split_fields20 : keylengtht

logic current : bool

logic idcertcontents__split_fields : issueridt

logic idcertcontents__split_fields1 : namecountt

logic idcertcontents__split_fields2 : (int,character) farray

logic idcertcontents__split_fields3 : serialnumbert

logic idcertcontents__split_fields4 : yearst

logic idcertcontents__split_fields5 : monthst

logic idcertcontents__split_fields6 : dayst

logic idcertcontents__split_fields7 : millisecst

logic idcertcontents__split_fields8 : yearst

logic idcertcontents__split_fields9 : monthst

logic idcertcontents__split_fields10 : dayst

logic idcertcontents__split_fields11 : millisecst

logic idcertcontents__split_fields12 : algorithmt

logic idcertcontents__split_fields13 : issueridt

logic idcertcontents__split_fields14 : namecountt

logic idcertcontents__split_fields15 : (int,character) farray

logic idcertcontents__split_fields16 : algorithmt

logic idcertcontents__split_fields17 : keyidt

logic idcertcontents__split_fields18 : keylengtht

logic result__ : (int,character) farray

logic result__1 : (int,character) farray

logic result__2 : (int,character) farray

logic currenttime : us_private

logic o : issueridt

logic o1 : namecountt

logic o2 : (int,character) farray

logic o3 : serialnumbert

logic o4 : yearst

logic o5 : monthst

logic o6 : dayst

logic o7 : millisecst

logic o8 : yearst

logic o9 : monthst

logic o10 : dayst

logic o11 : millisecst

logic o12 : algorithmt

logic o13 : bool

logic o14 : certificatestatus

logic o15 : bool

logic o16 : certificatestatus

logic o17 : issueridt

logic o18 : namecountt

logic o19 : (int,character) farray

logic o20 : serialnumbert

logic o21 : yearst

logic o22 : monthst

logic o23 : dayst

logic o24 : millisecst

logic o25 : yearst

logic o26 : monthst

logic o27 : dayst

logic o28 : millisecst

logic o29 : algorithmt

logic o30 : issueridt

logic o31 : namecountt

logic o32 : (int,character) farray

logic o33 : algorithmt

logic o34 : keyidt

logic o35 : keylengtht

logic temp___2650 : bool

logic temp___26501 : certificatestatus

logic temp___26502 : issueridt

logic temp___26503 : namecountt

logic temp___26504 : (int,character) farray

logic temp___26505 : serialnumbert

logic temp___26506 : yearst

logic temp___26507 : monthst

logic temp___26508 : dayst

logic temp___26509 : millisecst

logic temp___265010 : yearst

logic temp___265011 : monthst

logic temp___265012 : dayst

logic temp___265013 : millisecst

logic temp___265014 : algorithmt

logic temp___265015 : issueridt

logic temp___265016 : namecountt

logic temp___265017 : (int,character) farray

logic temp___265018 : algorithmt

logic temp___265019 : keyidt

logic temp___265020 : keylengtht

logic idcert__split_fields21 : bool

logic idcert__split_fields22 : certificatestatus

logic idcert__split_fields23 : issueridt

logic idcert__split_fields24 : namecountt

logic idcert__split_fields25 : (int,character) farray

logic idcert__split_fields26 : serialnumbert

logic idcert__split_fields27 : yearst

logic idcert__split_fields28 : monthst

logic idcert__split_fields29 : dayst

logic idcert__split_fields30 : millisecst

logic idcert__split_fields31 : yearst

logic idcert__split_fields32 : monthst

logic idcert__split_fields33 : dayst

logic idcert__split_fields34 : millisecst

logic idcert__split_fields35 : algorithmt

logic idcert__split_fields36 : issueridt

logic idcert__split_fields37 : namecountt

logic idcert__split_fields38 : (int,character) farray

logic idcert__split_fields39 : algorithmt

logic idcert__split_fields40 : keyidt

logic idcert__split_fields41 : keylengtht

logic current1 : bool

logic idcertcontents__split_fields19 : issueridt

logic idcertcontents__split_fields20 : namecountt

logic idcertcontents__split_fields21 : (int,character) farray

logic idcertcontents__split_fields22 : serialnumbert

logic idcertcontents__split_fields23 : yearst

logic idcertcontents__split_fields24 : monthst

logic idcertcontents__split_fields25 : dayst

logic idcertcontents__split_fields26 : millisecst

logic idcertcontents__split_fields27 : yearst

logic idcertcontents__split_fields28 : monthst

logic idcertcontents__split_fields29 : dayst

logic idcertcontents__split_fields30 : millisecst

logic idcertcontents__split_fields31 : algorithmt

logic idcertcontents__split_fields32 : issueridt

logic idcertcontents__split_fields33 : namecountt

logic idcertcontents__split_fields34 : (int,character) farray

logic idcertcontents__split_fields35 : algorithmt

logic idcertcontents__split_fields36 : keyidt

logic idcertcontents__split_fields37 : keylengtht

logic result : issueridt

logic result1 : namecountt

logic result2 : (int,character) farray

logic result3 : serialnumbert

logic result4 : yearst

logic result5 : monthst

logic result6 : dayst

logic result7 : millisecst

logic result8 : yearst

logic result9 : monthst

logic result10 : dayst

logic result11 : millisecst

logic result12 : algorithmt

logic result13 : issueridt

logic result14 : namecountt

logic result15 : (int,character) farray

logic result16 : algorithmt

logic result17 : keyidt

logic result18 : keylengtht

logic idcertcontents__split_fields38 : issueridt

logic idcertcontents__split_fields39 : namecountt

logic idcertcontents__split_fields40 : (int,character) farray

logic idcertcontents__split_fields41 : serialnumbert

logic idcertcontents__split_fields42 : yearst

logic idcertcontents__split_fields43 : monthst

logic idcertcontents__split_fields44 : dayst

logic idcertcontents__split_fields45 : millisecst

logic idcertcontents__split_fields46 : yearst

logic idcertcontents__split_fields47 : monthst

logic idcertcontents__split_fields48 : dayst

logic idcertcontents__split_fields49 : millisecst

logic idcertcontents__split_fields50 : algorithmt

logic idcertcontents__split_fields51 : issueridt

logic idcertcontents__split_fields52 : namecountt

logic idcertcontents__split_fields53 : (int,character) farray

logic idcertcontents__split_fields54 : algorithmt

logic idcertcontents__split_fields55 : keyidt

logic idcertcontents__split_fields56 : keylengtht

logic result19 : bool

logic current2 : bool

logic result20 : bool

logic result21 : certificatestatus

logic result22 : issueridt

logic result23 : namecountt

logic result24 : (int,character) farray

logic result25 : serialnumbert

logic result26 : yearst

logic result27 : monthst

logic result28 : dayst

logic result29 : millisecst

logic result30 : yearst

logic result31 : monthst

logic result32 : dayst

logic result33 : millisecst

logic result34 : algorithmt

logic result35 : issueridt

logic result36 : namecountt

logic result37 : (int,character) farray

logic result38 : algorithmt

logic result39 : keyidt

logic result40 : keylengtht

logic idcert__split_fields42 : bool

logic idcert__split_fields43 : certificatestatus

logic idcert__split_fields44 : issueridt

logic idcert__split_fields45 : namecountt

logic idcert__split_fields46 : (int,character) farray

logic idcert__split_fields47 : serialnumbert

logic idcert__split_fields48 : yearst

logic idcert__split_fields49 : monthst

logic idcert__split_fields50 : dayst

logic idcert__split_fields51 : millisecst

logic idcert__split_fields52 : yearst

logic idcert__split_fields53 : monthst

logic idcert__split_fields54 : dayst

logic idcert__split_fields55 : millisecst

logic idcert__split_fields56 : algorithmt

logic idcert__split_fields57 : issueridt

logic idcert__split_fields58 : namecountt

logic idcert__split_fields59 : (int,character) farray

logic idcert__split_fields60 : algorithmt

logic idcert__split_fields61 : keyidt

logic idcert__split_fields62 : keylengtht

logic result41 : bool

logic result42 : certificatestatus

logic result43 : issueridt

logic result44 : namecountt

logic result45 : (int,character) farray

logic result46 : serialnumbert

logic result47 : yearst

logic result48 : monthst

logic result49 : dayst

logic result50 : millisecst

logic result51 : yearst

logic result52 : monthst

logic result53 : dayst

logic result54 : millisecst

logic result55 : algorithmt

logic result56 : issueridt

logic result57 : namecountt

logic result58 : (int,character) farray

logic result59 : algorithmt

logic result60 : keyidt

logic result61 : keylengtht

logic idcert__split_fields63 : bool

logic idcert__split_fields64 : certificatestatus

logic idcert__split_fields65 : issueridt

logic idcert__split_fields66 : namecountt

logic idcert__split_fields67 : (int,character) farray

logic idcert__split_fields68 : serialnumbert

logic idcert__split_fields69 : yearst

logic idcert__split_fields70 : monthst

logic idcert__split_fields71 : dayst

logic idcert__split_fields72 : millisecst

logic idcert__split_fields73 : yearst

logic idcert__split_fields74 : monthst

logic idcert__split_fields75 : dayst

logic idcert__split_fields76 : millisecst

logic idcert__split_fields77 : algorithmt

logic idcert__split_fields78 : issueridt

logic idcert__split_fields79 : namecountt

logic idcert__split_fields80 : (int,character) farray

logic idcert__split_fields81 : algorithmt

logic idcert__split_fields82 : keyidt

logic idcert__split_fields83 : keylengtht

logic result62 : (int,character) farray

logic result__3 : (int,character) farray

logic result63 : (int,character) farray

logic result__4 : (int,character) farray

logic result64 : (int,character) farray

logic result__5 : (int,character) farray

axiom H : (audittypes__nodescription__aggregate_def(32) = nodescription)

axiom H1 : ((idcert__split_fields = true) ->
  ((((result = idcertcontents__split_fields) and
  ((result1 = idcertcontents__split_fields1) and
  (result2 = idcertcontents__split_fields2))) and
  (result3 = idcertcontents__split_fields3)) and
  (((result4 = idcertcontents__split_fields4) and
  ((result5 = idcertcontents__split_fields5) and
  ((result6 = idcertcontents__split_fields6) and
  (result7 = idcertcontents__split_fields7)))) and
  (((result8 = idcertcontents__split_fields8) and
  ((result9 = idcertcontents__split_fields9) and
  ((result10 = idcertcontents__split_fields10) and
  (result11 = idcertcontents__split_fields11)))) and
  ((result12 = idcertcontents__split_fields12) and
  (((result13 = idcertcontents__split_fields13) and
  ((result14 = idcertcontents__split_fields14) and
  (result15 = idcertcontents__split_fields15))) and
  ((result16 = idcertcontents__split_fields16) and
  ((result17 = idcertcontents__split_fields17) and
  (result18 = idcertcontents__split_fields18)))))))))

axiom H2 : ((idcert__split_fields = true) ->
  ((((idcertcontents__split_fields38 = idcert__split_fields2) and
  ((idcertcontents__split_fields39 = idcert__split_fields3) and
  (idcertcontents__split_fields40 = idcert__split_fields4))) and
  (idcertcontents__split_fields41 = idcert__split_fields5)) and
  (((idcertcontents__split_fields42 = idcert__split_fields6) and
  ((idcertcontents__split_fields43 = idcert__split_fields7) and
  ((idcertcontents__split_fields44 = idcert__split_fields8) and
  (idcertcontents__split_fields45 = idcert__split_fields9)))) and
  (((idcertcontents__split_fields46 = idcert__split_fields10) and
  ((idcertcontents__split_fields47 = idcert__split_fields11) and
  ((idcertcontents__split_fields48 = idcert__split_fields12) and
  (idcertcontents__split_fields49 = idcert__split_fields13)))) and
  ((idcertcontents__split_fields50 = idcert__split_fields14) and
  (((idcertcontents__split_fields51 = idcert__split_fields15) and
  ((idcertcontents__split_fields52 = idcert__split_fields16) and
  (idcertcontents__split_fields53 = idcert__split_fields17))) and
  ((idcertcontents__split_fields54 = idcert__split_fields18) and
  ((idcertcontents__split_fields55 = idcert__split_fields19) and
  (idcertcontents__split_fields56 = idcert__split_fields20)))))))))

axiom H3 : ((idcert__split_fields = true) -> ({ us_split_fields7 = {
  rec__cert__contentst__id = { us_split_fields5 = {
  rec__certtypes__idt__issuer = { us_split_fields3 = {
  rec__cryptotypes__issuert__id = o; rec__cryptotypes__issuert__namelength =
  o1; rec__cryptotypes__issuert__name = o2 } };
  rec__certtypes__idt__serialnumber = o3 } };
  rec__cert__contentst__notbefore = { us_split_fields1 = {
  rec__clock__timet__year = o4; rec__clock__timet__month = o5;
  rec__clock__timet__day = o6; rec__clock__timet__millisec = o7 } };
  rec__cert__contentst__notafter = { us_split_fields1 = {
  rec__clock__timet__year = o8; rec__clock__timet__month = o9;
  rec__clock__timet__day = o10; rec__clock__timet__millisec = o11 } };
  rec__cert__contentst__mechanism = o12 } } = cert_id_to_cert({
  us_split_fields11 = { rec__cert__id__contentst__id = { us_split_fields5 = {
  rec__certtypes__idt__issuer = { us_split_fields3 = {
  rec__cryptotypes__issuert__id = idcertcontents__split_fields38;
  rec__cryptotypes__issuert__namelength = idcertcontents__split_fields39;
  rec__cryptotypes__issuert__name = idcertcontents__split_fields40 } };
  rec__certtypes__idt__serialnumber = idcertcontents__split_fields41 } };
  rec__cert__id__contentst__notbefore = { us_split_fields1 = {
  rec__clock__timet__year = idcertcontents__split_fields42;
  rec__clock__timet__month = idcertcontents__split_fields43;
  rec__clock__timet__day = idcertcontents__split_fields44;
  rec__clock__timet__millisec = idcertcontents__split_fields45 } };
  rec__cert__id__contentst__notafter = { us_split_fields1 = {
  rec__clock__timet__year = idcertcontents__split_fields46;
  rec__clock__timet__month = idcertcontents__split_fields47;
  rec__clock__timet__day = idcertcontents__split_fields48;
  rec__clock__timet__millisec = idcertcontents__split_fields49 } };
  rec__cert__id__contentst__mechanism = idcertcontents__split_fields50;
  rec__cert__id__contentst__subject = { us_split_fields3 = {
  rec__cryptotypes__issuert__id = idcertcontents__split_fields51;
  rec__cryptotypes__issuert__namelength = idcertcontents__split_fields52;
  rec__cryptotypes__issuert__name = idcertcontents__split_fields53 } };
  rec__cert__id__contentst__subjectpublickey = { us_split_fields9 = {
  rec__cryptotypes__keypartt__algorithmid = idcertcontents__split_fields54;
  rec__cryptotypes__keypartt__keyid = idcertcontents__split_fields55;
  rec__cryptotypes__keypartt__keylength = idcertcontents__split_fields56 } }
  } })))

axiom H4 : ((idcert__split_fields = true) -> (o13 = iscurrent({
  us_split_fields7 = { rec__cert__contentst__id = { us_split_fields5 = {
  rec__certtypes__idt__issuer = { us_split_fields3 = {
  rec__cryptotypes__issuert__id = o; rec__cryptotypes__issuert__namelength =
  o1; rec__cryptotypes__issuert__name = o2 } };
  rec__certtypes__idt__serialnumber = o3 } };
  rec__cert__contentst__notbefore = { us_split_fields1 = {
  rec__clock__timet__year = o4; rec__clock__timet__month = o5;
  rec__clock__timet__day = o6; rec__clock__timet__millisec = o7 } };
  rec__cert__contentst__notafter = { us_split_fields1 = {
  rec__clock__timet__year = o8; rec__clock__timet__month = o9;
  rec__clock__timet__day = o10; rec__clock__timet__millisec = o11 } };
  rec__cert__contentst__mechanism = o12 } }, { rec__clock__timet__year =
  currenttimevar__split_fields; rec__clock__timet__month =
  currenttimevar__split_fields1; rec__clock__timet__day =
  currenttimevar__split_fields2; rec__clock__timet__millisec =
  currenttimevar__split_fields3 }, currenttime)))

axiom H5 : ((idcert__split_fields = true) -> (result19 = current))

axiom H6 : ((idcert__split_fields = true) -> (current2 = o13))

axiom H7 : ((idcert__split_fields = true) ->
  ((result20 = idcert__split_fields) and
  ((result21 = idcert__split_fields1) and
  ((((result22 = idcert__split_fields2) and
  ((result23 = idcert__split_fields3) and
  (result24 = idcert__split_fields4))) and
  (result25 = idcert__split_fields5)) and
  (((result26 = idcert__split_fields6) and
  ((result27 = idcert__split_fields7) and
  ((result28 = idcert__split_fields8) and
  (result29 = idcert__split_fields9)))) and
  (((result30 = idcert__split_fields10) and
  ((result31 = idcert__split_fields11) and
  ((result32 = idcert__split_fields12) and
  (result33 = idcert__split_fields13)))) and
  ((result34 = idcert__split_fields14) and
  (((result35 = idcert__split_fields15) and
  ((result36 = idcert__split_fields16) and
  (result37 = idcert__split_fields17))) and
  ((result38 = idcert__split_fields18) and
  ((result39 = idcert__split_fields19) and
  (result40 = idcert__split_fields20)))))))))))

axiom H8 : ((idcert__split_fields = true) ->
  ((idcert__split_fields42 = match_bool(idcert__split_fields, current2,
  false)) and ((idcert__split_fields43 = idcert__split_fields1) and
  ((((idcert__split_fields44 = idcert__split_fields2) and
  ((idcert__split_fields45 = idcert__split_fields3) and
  (idcert__split_fields46 = idcert__split_fields4))) and
  (idcert__split_fields47 = idcert__split_fields5)) and
  (((idcert__split_fields48 = idcert__split_fields6) and
  ((idcert__split_fields49 = idcert__split_fields7) and
  ((idcert__split_fields50 = idcert__split_fields8) and
  (idcert__split_fields51 = idcert__split_fields9)))) and
  (((idcert__split_fields52 = idcert__split_fields10) and
  ((idcert__split_fields53 = idcert__split_fields11) and
  ((idcert__split_fields54 = idcert__split_fields12) and
  (idcert__split_fields55 = idcert__split_fields13)))) and
  ((idcert__split_fields56 = idcert__split_fields14) and
  (((idcert__split_fields57 = idcert__split_fields15) and
  ((idcert__split_fields58 = idcert__split_fields16) and
  (idcert__split_fields59 = idcert__split_fields17))) and
  ((idcert__split_fields60 = idcert__split_fields18) and
  ((idcert__split_fields61 = idcert__split_fields19) and
  (idcert__split_fields62 = idcert__split_fields20)))))))))))

axiom H9 : ((idcert__split_fields = true) -> ((not (current2 = true)) ->
  (to_rep11(o14) = 2)))

axiom H10 : ((idcert__split_fields = true) -> ((not (current2 = true)) ->
  ((o15 = idcert__split_fields42) and ((o16 = o14) and
  ((((o17 = idcert__split_fields44) and ((o18 = idcert__split_fields45) and
  (o19 = idcert__split_fields46))) and (o20 = idcert__split_fields47)) and
  (((o21 = idcert__split_fields48) and ((o22 = idcert__split_fields49) and
  ((o23 = idcert__split_fields50) and (o24 = idcert__split_fields51)))) and
  (((o25 = idcert__split_fields52) and ((o26 = idcert__split_fields53) and
  ((o27 = idcert__split_fields54) and (o28 = idcert__split_fields55)))) and
  ((o29 = idcert__split_fields56) and (((o30 = idcert__split_fields57) and
  ((o31 = idcert__split_fields58) and (o32 = idcert__split_fields59))) and
  ((o33 = idcert__split_fields60) and ((o34 = idcert__split_fields61) and
  (o35 = idcert__split_fields62))))))))))))

axiom H11 : ((idcert__split_fields = true) -> ((not (current2 = true)) ->
  ((temp___2650 = o15) and ((temp___26501 = o16) and
  ((((temp___26502 = o17) and ((temp___26503 = o18) and
  (temp___26504 = o19))) and (temp___26505 = o20)) and
  (((temp___26506 = o21) and ((temp___26507 = o22) and
  ((temp___26508 = o23) and (temp___26509 = o24)))) and
  (((temp___265010 = o25) and ((temp___265011 = o26) and
  ((temp___265012 = o27) and (temp___265013 = o28)))) and
  ((temp___265014 = o29) and (((temp___265015 = o30) and
  ((temp___265016 = o31) and (temp___265017 = o32))) and
  ((temp___265018 = o33) and ((temp___265019 = o34) and
  (temp___265020 = o35))))))))))))

axiom H12 : ((idcert__split_fields = true) -> ((not (current2 = true)) ->
  ((result41 = idcert__split_fields42) and
  ((result42 = idcert__split_fields43) and
  ((((result43 = idcert__split_fields44) and
  ((result44 = idcert__split_fields45) and
  (result45 = idcert__split_fields46))) and
  (result46 = idcert__split_fields47)) and
  (((result47 = idcert__split_fields48) and
  ((result48 = idcert__split_fields49) and
  ((result49 = idcert__split_fields50) and
  (result50 = idcert__split_fields51)))) and
  (((result51 = idcert__split_fields52) and
  ((result52 = idcert__split_fields53) and
  ((result53 = idcert__split_fields54) and
  (result54 = idcert__split_fields55)))) and
  ((result55 = idcert__split_fields56) and
  (((result56 = idcert__split_fields57) and
  ((result57 = idcert__split_fields58) and
  (result58 = idcert__split_fields59))) and
  ((result59 = idcert__split_fields60) and
  ((result60 = idcert__split_fields61) and
  (result61 = idcert__split_fields62))))))))))))

axiom H13 : ((idcert__split_fields = true) -> ((not (current2 = true)) ->
  ((idcert__split_fields63 = temp___2650) and
  ((idcert__split_fields64 = temp___26501) and
  ((((idcert__split_fields65 = temp___26502) and
  ((idcert__split_fields66 = temp___26503) and
  (idcert__split_fields67 = temp___26504))) and
  (idcert__split_fields68 = temp___26505)) and
  (((idcert__split_fields69 = temp___26506) and
  ((idcert__split_fields70 = temp___26507) and
  ((idcert__split_fields71 = temp___26508) and
  (idcert__split_fields72 = temp___26509)))) and
  (((idcert__split_fields73 = temp___265010) and
  ((idcert__split_fields74 = temp___265011) and
  ((idcert__split_fields75 = temp___265012) and
  (idcert__split_fields76 = temp___265013)))) and
  ((idcert__split_fields77 = temp___265014) and
  (((idcert__split_fields78 = temp___265015) and
  ((idcert__split_fields79 = temp___265016) and
  (idcert__split_fields80 = temp___265017))) and
  ((idcert__split_fields81 = temp___265018) and
  ((idcert__split_fields82 = temp___265019) and
  (idcert__split_fields83 = temp___265020))))))))))))

axiom H14 : ((idcert__split_fields = true) -> ((current2 = true) ->
  ((idcert__split_fields63 = idcert__split_fields42) and
  ((idcert__split_fields64 = idcert__split_fields43) and
  ((((idcert__split_fields65 = idcert__split_fields44) and
  ((idcert__split_fields66 = idcert__split_fields45) and
  (idcert__split_fields67 = idcert__split_fields46))) and
  (idcert__split_fields68 = idcert__split_fields47)) and
  (((idcert__split_fields69 = idcert__split_fields48) and
  ((idcert__split_fields70 = idcert__split_fields49) and
  ((idcert__split_fields71 = idcert__split_fields50) and
  (idcert__split_fields72 = idcert__split_fields51)))) and
  (((idcert__split_fields73 = idcert__split_fields52) and
  ((idcert__split_fields74 = idcert__split_fields53) and
  ((idcert__split_fields75 = idcert__split_fields54) and
  (idcert__split_fields76 = idcert__split_fields55)))) and
  ((idcert__split_fields77 = idcert__split_fields56) and
  (((idcert__split_fields78 = idcert__split_fields57) and
  ((idcert__split_fields79 = idcert__split_fields58) and
  (idcert__split_fields80 = idcert__split_fields59))) and
  ((idcert__split_fields81 = idcert__split_fields60) and
  ((idcert__split_fields82 = idcert__split_fields61) and
  (idcert__split_fields83 = idcert__split_fields62))))))))))))

axiom H15 : ((idcert__split_fields = true) -> ((current2 = true) ->
  ((idcert__split_fields63 = idcert__split_fields42) and
  ((idcert__split_fields64 = idcert__split_fields43) and
  ((((idcert__split_fields65 = idcert__split_fields44) and
  ((idcert__split_fields66 = idcert__split_fields45) and
  (idcert__split_fields67 = idcert__split_fields46))) and
  (idcert__split_fields68 = idcert__split_fields47)) and
  (((idcert__split_fields69 = idcert__split_fields48) and
  ((idcert__split_fields70 = idcert__split_fields49) and
  ((idcert__split_fields71 = idcert__split_fields50) and
  (idcert__split_fields72 = idcert__split_fields51)))) and
  (((idcert__split_fields73 = idcert__split_fields52) and
  ((idcert__split_fields74 = idcert__split_fields53) and
  ((idcert__split_fields75 = idcert__split_fields54) and
  (idcert__split_fields76 = idcert__split_fields55)))) and
  ((idcert__split_fields77 = idcert__split_fields56) and
  (((idcert__split_fields78 = idcert__split_fields57) and
  ((idcert__split_fields79 = idcert__split_fields58) and
  (idcert__split_fields80 = idcert__split_fields59))) and
  ((idcert__split_fields81 = idcert__split_fields60) and
  ((idcert__split_fields82 = idcert__split_fields61) and
  (idcert__split_fields83 = idcert__split_fields62))))))))))))

axiom H16 : ((not (idcert__split_fields = true)) ->
  ((((idcertcontents__split_fields38 = idcertcontents__split_fields) and
  ((idcertcontents__split_fields39 = idcertcontents__split_fields1) and
  (idcertcontents__split_fields40 = idcertcontents__split_fields2))) and
  (idcertcontents__split_fields41 = idcertcontents__split_fields3)) and
  (((idcertcontents__split_fields42 = idcertcontents__split_fields4) and
  ((idcertcontents__split_fields43 = idcertcontents__split_fields5) and
  ((idcertcontents__split_fields44 = idcertcontents__split_fields6) and
  (idcertcontents__split_fields45 = idcertcontents__split_fields7)))) and
  (((idcertcontents__split_fields46 = idcertcontents__split_fields8) and
  ((idcertcontents__split_fields47 = idcertcontents__split_fields9) and
  ((idcertcontents__split_fields48 = idcertcontents__split_fields10) and
  (idcertcontents__split_fields49 = idcertcontents__split_fields11)))) and
  ((idcertcontents__split_fields50 = idcertcontents__split_fields12) and
  (((idcertcontents__split_fields51 = idcertcontents__split_fields13) and
  ((idcertcontents__split_fields52 = idcertcontents__split_fields14) and
  (idcertcontents__split_fields53 = idcertcontents__split_fields15))) and
  ((idcertcontents__split_fields54 = idcertcontents__split_fields16) and
  ((idcertcontents__split_fields55 = idcertcontents__split_fields17) and
  (idcertcontents__split_fields56 = idcertcontents__split_fields18)))))))))

axiom H17 : ((not (idcert__split_fields = true)) -> (current2 = current))

axiom H18 : ((not (idcert__split_fields = true)) ->
  ((idcert__split_fields63 = idcert__split_fields) and
  ((idcert__split_fields64 = idcert__split_fields1) and
  ((((idcert__split_fields65 = idcert__split_fields2) and
  ((idcert__split_fields66 = idcert__split_fields3) and
  (idcert__split_fields67 = idcert__split_fields4))) and
  (idcert__split_fields68 = idcert__split_fields5)) and
  (((idcert__split_fields69 = idcert__split_fields6) and
  ((idcert__split_fields70 = idcert__split_fields7) and
  ((idcert__split_fields71 = idcert__split_fields8) and
  (idcert__split_fields72 = idcert__split_fields9)))) and
  (((idcert__split_fields73 = idcert__split_fields10) and
  ((idcert__split_fields74 = idcert__split_fields11) and
  ((idcert__split_fields75 = idcert__split_fields12) and
  (idcert__split_fields76 = idcert__split_fields13)))) and
  ((idcert__split_fields77 = idcert__split_fields14) and
  (((idcert__split_fields78 = idcert__split_fields15) and
  ((idcert__split_fields79 = idcert__split_fields16) and
  (idcert__split_fields80 = idcert__split_fields17))) and
  ((idcert__split_fields81 = idcert__split_fields18) and
  ((idcert__split_fields82 = idcert__split_fields19) and
  (idcert__split_fields83 = idcert__split_fields20)))))))))))

axiom H19 : ((not (idcert__split_fields = true)) ->
  ((((idcertcontents__split_fields38 = idcertcontents__split_fields19) and
  ((idcertcontents__split_fields39 = idcertcontents__split_fields20) and
  (idcertcontents__split_fields40 = idcertcontents__split_fields21))) and
  (idcertcontents__split_fields41 = idcertcontents__split_fields22)) and
  (((idcertcontents__split_fields42 = idcertcontents__split_fields23) and
  ((idcertcontents__split_fields43 = idcertcontents__split_fields24) and
  ((idcertcontents__split_fields44 = idcertcontents__split_fields25) and
  (idcertcontents__split_fields45 = idcertcontents__split_fields26)))) and
  (((idcertcontents__split_fields46 = idcertcontents__split_fields27) and
  ((idcertcontents__split_fields47 = idcertcontents__split_fields28) and
  ((idcertcontents__split_fields48 = idcertcontents__split_fields29) and
  (idcertcontents__split_fields49 = idcertcontents__split_fields30)))) and
  ((idcertcontents__split_fields50 = idcertcontents__split_fields31) and
  (((idcertcontents__split_fields51 = idcertcontents__split_fields32) and
  ((idcertcontents__split_fields52 = idcertcontents__split_fields33) and
  (idcertcontents__split_fields53 = idcertcontents__split_fields34))) and
  ((idcertcontents__split_fields54 = idcertcontents__split_fields35) and
  ((idcertcontents__split_fields55 = idcertcontents__split_fields36) and
  (idcertcontents__split_fields56 = idcertcontents__split_fields37)))))))))

axiom H20 : ((not (idcert__split_fields = true)) -> (current2 = current1))

axiom H21 : ((not (idcert__split_fields = true)) ->
  ((idcert__split_fields63 = idcert__split_fields21) and
  ((idcert__split_fields64 = idcert__split_fields22) and
  ((((idcert__split_fields65 = idcert__split_fields23) and
  ((idcert__split_fields66 = idcert__split_fields24) and
  (idcert__split_fields67 = idcert__split_fields25))) and
  (idcert__split_fields68 = idcert__split_fields26)) and
  (((idcert__split_fields69 = idcert__split_fields27) and
  ((idcert__split_fields70 = idcert__split_fields28) and
  ((idcert__split_fields71 = idcert__split_fields29) and
  (idcert__split_fields72 = idcert__split_fields30)))) and
  (((idcert__split_fields73 = idcert__split_fields31) and
  ((idcert__split_fields74 = idcert__split_fields32) and
  ((idcert__split_fields75 = idcert__split_fields33) and
  (idcert__split_fields76 = idcert__split_fields34)))) and
  ((idcert__split_fields77 = idcert__split_fields35) and
  (((idcert__split_fields78 = idcert__split_fields36) and
  ((idcert__split_fields79 = idcert__split_fields37) and
  (idcert__split_fields80 = idcert__split_fields38))) and
  ((idcert__split_fields81 = idcert__split_fields39) and
  ((idcert__split_fields82 = idcert__split_fields40) and
  (idcert__split_fields83 = idcert__split_fields41)))))))))))

axiom H22 : (not (to_rep11(idcert__split_fields64) = 0))

axiom H23 : (not (to_rep11(idcert__split_fields64) = 1))

axiom H24 : (to_rep11(idcert__split_fields64) = 2)

axiom H25 : (result64 = result__2)

axiom H26 : (result__5 = nodescription)

axiom H27 : (not (of_int(1) = true))

axiom H28 : (1 <= 150)

 (* File "usertoken.adb", line 516, characters 0-0 *)
goal WP_parameter_def : (1 <= 1)
