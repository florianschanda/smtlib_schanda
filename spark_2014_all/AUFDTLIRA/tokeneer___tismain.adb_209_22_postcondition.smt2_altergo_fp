(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type privileget

predicate in_range4(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : privileget, privileget -> bool

logic dummy5 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep2 : privileget -> int

logic of_rep2 : int -> privileget

axiom inversion_axiom2 :
  (forall x:privileget [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:privileget [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type opandnullt

predicate in_range5(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : opandnullt, opandnullt -> bool

logic dummy6 : opandnullt

type opandnullt__ref = { opandnullt__content : opandnullt
}

function opandnullt__ref___projection(a: opandnullt__ref) : opandnullt =
  (a).opandnullt__content

logic to_rep3 : opandnullt -> int

logic of_rep3 : int -> opandnullt

axiom inversion_axiom3 :
  (forall x:opandnullt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:opandnullt [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__admin__t__rolepresent : privileget;
rec__admin__t__currentop : opandnullt
}

function us_split_fields_RolePresent__projection(a: us_split_fields) : privileget =
  (a).rec__admin__t__rolepresent

function us_split_fields_CurrentOp__projection(a: us_split_fields) : opandnullt =
  (a).rec__admin__t__currentop

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep2(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep3(((a).us_split_fields1).rec__admin__t__currentop) = to_rep3(((b).us_split_fields1).rec__admin__t__currentop))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep2(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep3(((a).us_split_fields1).rec__admin__t__currentop) = to_rep3(((b).us_split_fields1).rec__admin__t__currentop)))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__size1({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__alignment1({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

logic admin__t__rolepresent__first__bit : int

logic admin__t__rolepresent__last__bit : int

logic admin__t__rolepresent__position : int

axiom admin__t__rolepresent__first__bit_axiom :
  (0 <= admin__t__rolepresent__first__bit)

axiom admin__t__rolepresent__last__bit_axiom :
  (admin__t__rolepresent__first__bit <  admin__t__rolepresent__last__bit)

axiom admin__t__rolepresent__position_axiom :
  (0 <= admin__t__rolepresent__position)

logic admin__t__currentop__first__bit : int

logic admin__t__currentop__last__bit : int

logic admin__t__currentop__position : int

axiom admin__t__currentop__first__bit_axiom :
  (0 <= admin__t__currentop__first__bit)

axiom admin__t__currentop__last__bit_axiom :
  (admin__t__currentop__first__bit <  admin__t__currentop__last__bit)

axiom admin__t__currentop__position_axiom :
  (0 <= admin__t__currentop__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : privileget

logic dummy8 : opandnullt

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic rolepresent : us_rep -> int

logic rolepresent__function_guard : int, us_rep -> prop

axiom rolepresent__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. in_range4(rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })))

logic isdoingop : us_rep -> bool

logic isdoingop__function_guard : bool, us_rep -> prop

axiom isdoingop__post_axiom : true

logic ispresent : us_rep -> bool

logic ispresent__function_guard : bool, us_rep -> prop

axiom ispresent__post_axiom : true

type descriptioni

predicate in_range6(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : descriptioni, descriptioni -> bool

logic dummy9 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___156:int.
  (forall temp___157:int.
  ((audittypes__nodescription__aggregate_def(temp___156)[temp___157]) = of_rep(temp___156))))

logic nouser : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___String_Literal_158 : unit -> (int,character) farray

axiom temp___String_Literal_158__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_158(void)[1])) = 78) and
  (to_rep((temp___String_Literal_158(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_158(void)[3])) = 85)) and
  (to_rep((temp___String_Literal_158(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_158(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_158(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_158(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[31])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[33])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[43])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[44])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[47])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[50])) = 32))

logic valid_numberlogentries : us_private -> bool

logic valid_numberlogentries__function_guard : bool, us_private -> prop

logic privatekeypresent : us_private -> bool

logic privatekeypresent__function_guard : bool, us_private -> prop

axiom privatekeypresent__post_axiom : true

logic theauthcertrole : us_private -> int

logic theauthcertrole__function_guard : int, us_private -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__state:us_private [theauthcertrole(admintoken__state)].
  in_range4(theauthcertrole(admintoken__state)))

logic isgood : us_private -> bool

logic isgood__function_guard : bool, us_private -> prop

axiom isgood__post_axiom : true

logic authcertvalid : us_private -> bool

logic authcertvalid__function_guard : bool, us_private -> prop

axiom authcertvalid__post_axiom : true

type adminprivileget

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : adminprivileget, adminprivileget -> bool

logic dummy10 : adminprivileget

type adminprivileget__ref = { adminprivileget__content : adminprivileget
}

function adminprivileget__ref___projection(a: adminprivileget__ref) : adminprivileget =
  (a).adminprivileget__content

type statscount

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : statscount, statscount -> bool

logic dummy11 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep4 : statscount -> int

logic of_rep4 : int -> statscount

axiom inversion_axiom4 :
  (forall x:statscount [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:statscount [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields2 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___17__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___18__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  ((((((to_rep4(((a).us_split_fields3).rec__stats__t__successentry) = to_rep4(((b).us_split_fields3).rec__stats__t__successentry)) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failentry) = to_rep4(((b).us_split_fields3).rec__stats__t__failentry))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__successbio) = to_rep4(((b).us_split_fields3).rec__stats__t__successbio))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failbio) = to_rep4(((b).us_split_fields3).rec__stats__t__failbio))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_fields3).rec__stats__t__successentry) = to_rep4(((b).us_split_fields3).rec__stats__t__successentry)) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failentry) = to_rep4(((b).us_split_fields3).rec__stats__t__failentry))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__successbio) = to_rep4(((b).us_split_fields3).rec__stats__t__successbio))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failbio) = to_rep4(((b).us_split_fields3).rec__stats__t__failbio)))) ->
  (bool_eq13(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size2({ us_split_fields3 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment2({ us_split_fields3 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy12 : statscount

logic dummy13 : statscount

logic dummy14 : statscount

logic dummy15 : statscount

type t__ref1 = { t__content1 : us_rep1
}

function t__ref___5__projection(a: t__ref1) : us_rep1 = (a).t__content1

logic statusiswaitingstartadminop : us_private -> bool

logic statusiswaitingstartadminop__function_guard : bool, us_private -> prop

axiom statusiswaitingstartadminop__post_axiom : true

logic statusiswaitingfinishadminop : us_private -> bool

logic statusiswaitingfinishadminop__function_guard : bool, us_private -> prop

axiom statusiswaitingfinishadminop__post_axiom : true

logic statusisenclavequiescent : us_private -> bool

logic statusisenclavequiescent__function_guard : bool, us_private -> prop

axiom statusisenclavequiescent__post_axiom : true

logic statusisshutdown : us_private -> bool

logic statusisshutdown__function_guard : bool, us_private -> prop

axiom statusisshutdown__post_axiom : true

logic enrolmentisinprogress : us_private -> bool

logic enrolmentisinprogress__function_guard : bool, us_private -> prop

axiom enrolmentisinprogress__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom valid_numberlogentries__post_axiom : true

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

axiom nouser__def_axiom : (nouser = temp___String_Literal_158(void))

 (* File "tismain.adb", line 52, characters 0-0 *)
goal WP_parameter_def :
  (forall o:bool. forall o1:bool. forall thestats__split_fields:statscount.
  forall thestats__split_fields1:statscount.
  forall thestats__split_fields2:statscount.
  forall thestats__split_fields3:statscount.
  forall theadmin__split_fields:privileget.
  forall theadmin__split_fields1:opandnullt. forall state:us_private.
  forall writtenstate:us_private. forall filestate:us_private.
  forall state1:us_private. forall state2:us_private.
  forall state3:us_private. forall state4:us_private.
  forall state5:us_private. forall output:us_private.
  forall state6:us_private. forall state7:us_private.
  forall filestate1:us_private. forall state8:us_private.
  forall state9:us_private. forall status:us_private.
  forall state10:us_private. forall status1:us_private.
  forall state11:us_private. forall result:bool. forall state12:us_private.
  forall filestate2:us_private. forall state13:us_private.
  forall filestate3:us_private. forall thestats__split_fields4:statscount.
  forall thestats__split_fields5:statscount.
  forall thestats__split_fields6:statscount.
  forall thestats__split_fields7:statscount.
  forall theadmin__split_fields2:privileget.
  forall theadmin__split_fields3:opandnullt. forall filestate4:us_private.
  forall state14:us_private. forall state15:us_private.
  forall filestate5:us_private. forall state16:us_private.
  forall state17:us_private. forall status2:us_private.
  forall state18:us_private. forall state19:us_private.
  forall filestate6:us_private. forall state20:us_private.
  forall state21:us_private. forall state22:us_private.
  forall writtenstate1:us_private__ref. forall state23:us_private__ref.
  forall output1:us_private__ref. forall state24:us_private__ref.
  forall status3:us_private__ref. forall state25:us_private__ref.
  forall thestats__split_fields8:us_split_fields2.
  forall theadmin__split_fields4:us_split_fields.
  forall filestate7:us_private. forall state26:us_private.
  forall state27:us_private. forall filestate8:us_private.
  forall state28:us_private. forall state29:us_private.
  forall status4:us_private. forall state30:us_private.
  forall state31:us_private. forall filestate9:us_private.
  forall state32:us_private. forall state33:us_private.
  forall state34:us_private. forall writtenstate2:us_private.
  forall state35:us_private. forall output2:us_private.
  forall state36:us_private. forall status5:us_private.
  forall state37:us_private.
  (((audittypes__nodescription__aggregate_def(32) = nodescription) and
  ((temp___String_Literal_158(void) = nouser) and ((((not (ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true)) and
  (not (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true))) and ((valid_numberlogentries(state2) = true) and
  ((o = privatekeypresent(state3)) and ((o1 = privatekeypresent(state3)) and
  ((((not (isgood(state10) = true)) and
  (not (authcertvalid(state10) = true))) and
  (not in_range7(theauthcertrole(state10)))) and
  ((((privatekeypresent(state3) = true) <->
  (not (enrolmentisinprogress(state11) = true))) and
  ((enrolmentisinprogress(state11) = true) or
  (statusisenclavequiescent(state11) = true))) and
  ((result = privatekeypresent(state3)) and (((result = true) and
  (valid_numberlogentries(state12) = true)) or ((not (result = true)) and
  ((valid_numberlogentries(state13) = true) and
  ((filestate2 = filestate3) and (state12 = state13)))))))))))) and
  (((state25 = { us_private__content = state11 }) and ((status3 = {
  us_private__content = status }) and ((state24 = { us_private__content =
  state9 }) and ((output1 = { us_private__content = output }) and
  ((state23 = { us_private__content = state5 }) and ((writtenstate1 = {
  us_private__content = writtenstate }) and ((state22 = state) and
  ((state21 = state4) and ((state20 = state8) and
  ((filestate6 = filestate1) and ((state19 = state7) and
  ((state18 = state6) and ((status2 = status1) and ((state17 = state10) and
  ((state3 = state16) and ((filestate5 = filestate2) and
  ((state15 = state12) and ((state14 = state1) and
  ((filestate4 = filestate) and
  (((theadmin__split_fields2 = theadmin__split_fields) and
  (theadmin__split_fields3 = theadmin__split_fields1)) and
  ((thestats__split_fields4 = thestats__split_fields) and
  ((thestats__split_fields5 = thestats__split_fields1) and
  ((thestats__split_fields6 = thestats__split_fields2) and
  (thestats__split_fields7 = thestats__split_fields3)))))))))))))))))))))))) and
  ((state37 = state11) and ((status5 = status) and ((state36 = state9) and
  ((output2 = output) and ((state35 = state5) and
  ((writtenstate2 = writtenstate) and ((state34 = state) and
  ((state33 = state4) and ((state32 = state8) and
  ((filestate9 = filestate1) and ((state31 = state7) and
  ((state30 = state6) and ((status4 = status1) and ((state29 = state10) and
  ((state28 = state3) and ((filestate8 = filestate2) and
  ((state27 = state12) and ((state26 = state1) and
  ((filestate7 = filestate) and ((theadmin__split_fields4 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 }) and
  (thestats__split_fields8 = { rec__stats__t__successentry =
  thestats__split_fields; rec__stats__t__failentry = thestats__split_fields1;
  rec__stats__t__successbio = thestats__split_fields2;
  rec__stats__t__failbio = thestats__split_fields3
  }))))))))))))))))))))))))) ->
  ((not (enrolmentisinprogress((state25).us_private__content) = true)) ->
  (privatekeypresent(state16) = true))))
