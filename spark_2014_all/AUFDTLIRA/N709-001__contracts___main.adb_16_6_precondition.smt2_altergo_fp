(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type us_split_fields = { rec__unit1__t1__c1 : integer; rec__ext__ :
us_private
}

function us_split_fields_C1__projection(a: us_split_fields) : integer =
  (a).rec__unit1__t1__c1

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((to_rep1(((a).us_split_fields1).rec__unit1__t1__c1) = to_rep1(((b).us_split_fields1).rec__unit1__t1__c1)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields1).rec__unit1__t1__c1) = to_rep1(((b).us_split_fields1).rec__unit1__t1__c1))) ->
  (bool_eq6(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size1({ us_split_fields1 = { rec__unit1__t1__c1 = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment1({ us_split_fields1 = { rec__unit1__t1__c1 = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic unit1__t1__c1__first__bit : int

logic unit1__t1__c1__last__bit : int

logic unit1__t1__c1__position : int

axiom unit1__t1__c1__first__bit_axiom : (0 <= unit1__t1__c1__first__bit)

axiom unit1__t1__c1__last__bit_axiom :
  (unit1__t1__c1__first__bit <  unit1__t1__c1__last__bit)

axiom unit1__t1__c1__position_axiom : (0 <= unit1__t1__c1__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : integer

logic dummy6 : us_private

logic dummy7 : int

type t1__ref = { t1__content : us_rep
}

function t1__ref___projection(a: t1__ref) : us_rep = (a).t1__content

logic is_zero : us_rep -> bool

logic is_zero__function_guard : bool, us_rep -> prop

logic is_zero1 : int, us_rep -> bool

logic is_zero__function_guard1 : bool, int, us_rep -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq7 : bool, bool -> bool

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

type us_split_fields2 = { rec__unit2__t2__c2 : integer; rec__unit1__t1__c11 :
integer; rec__ext__1 : us_private
}

function us_split_fields_C2__projection(a: us_split_fields2) : integer =
  (a).rec__unit2__t2__c2

function us_split_fields_C1__2__projection(a: us_split_fields2) : integer =
  (a).rec__unit1__t1__c11

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__c2 : us_private -> integer

axiom extract__c2__conv :
  (forall c2:integer.
  (forall rec__ext__2:us_private. (extract__c2(hide_ext__(c2,
  rec__ext__2)) = c2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__unit1__t1__c1 = ((a).us_split_fields3).rec__unit1__t1__c11;
  rec__ext__ = hide_ext__(((a).us_split_fields3).rec__unit2__t2__c2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__unit2__t2__c2 = extract__c2(((r).us_split_fields1).rec__ext__);
  rec__unit1__t1__c11 = ((r).us_split_fields1).rec__unit1__t1__c1;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((to_rep1(((a).us_split_fields3).rec__unit2__t2__c2) = to_rep1(((b).us_split_fields3).rec__unit2__t2__c2)) and
  (to_rep1(((a).us_split_fields3).rec__unit1__t1__c11) = to_rep1(((b).us_split_fields3).rec__unit1__t1__c11))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields3).rec__unit2__t2__c2) = to_rep1(((b).us_split_fields3).rec__unit2__t2__c2)) and
  (to_rep1(((a).us_split_fields3).rec__unit1__t1__c11) = to_rep1(((b).us_split_fields3).rec__unit1__t1__c11)))) ->
  (bool_eq8(a, b) = false))))

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size2({ us_split_fields3 = { rec__unit2__t2__c2 = a;
  rec__unit1__t1__c11 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment2({ us_split_fields3 = { rec__unit2__t2__c2 = a;
  rec__unit1__t1__c11 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic unit2__t2__c2__first__bit : int

logic unit2__t2__c2__last__bit : int

logic unit2__t2__c2__position : int

axiom unit2__t2__c2__first__bit_axiom : (0 <= unit2__t2__c2__first__bit)

axiom unit2__t2__c2__last__bit_axiom :
  (unit2__t2__c2__first__bit <  unit2__t2__c2__last__bit)

axiom unit2__t2__c2__position_axiom : (0 <= unit2__t2__c2__position)

logic unit1__t1__c1__first__bit1 : int

logic unit1__t1__c1__last__bit1 : int

logic unit1__t1__c1__position1 : int

axiom unit1__t1__c1__first__bit_axiom1 : (0 <= unit1__t1__c1__first__bit1)

axiom unit1__t1__c1__last__bit_axiom1 :
  (unit1__t1__c1__first__bit1 <  unit1__t1__c1__last__bit1)

axiom unit1__t1__c1__position_axiom1 : (0 <= unit1__t1__c1__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy8 : integer

logic dummy9 : integer

logic dummy10 : us_private

logic dummy11 : int

type t2__ref = { t2__content : us_rep1
}

function t2__ref___projection(a: t2__ref) : us_rep1 = (a).t2__content

logic is_zero2 : us_rep1 -> bool

logic is_zero__function_guard2 : bool, us_rep1 -> prop

logic is_zero3 : int, us_rep1 -> bool

logic is_zero__function_guard3 : bool, int, us_rep1 -> prop

axiom is_zero__post_axiom : true

axiom is_zero__post__dispatch_axiom : true

axiom unit1__t1__compat_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [is_zero1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_zero({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2 })) = to_int(is_zero1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))))

axiom unit2__t2__compat_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [is_zero1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_zero2(of_base({ us_split_fields1 = {
  rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag = x2
  }))) = to_int(is_zero1(us_tag1, { us_split_fields1 = { rec__unit1__t1__c1 =
  x; rec__ext__ = x1 }; attr__tag = x2 }))))

axiom is_zero__def_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [is_zero({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. ((is_zero({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2 }) = true) <-> (to_rep1(x) = 0)))

logic create__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom unit1__t1__compat_axiom1 :
  (forall unit1__create__x__fields:integer.
  forall unit1__create__x__fields1:us_private.
  forall unit1__create__x__old__fields:integer.
  forall unit1__create__x__old__fields1:us_private.
  (forall x__attr__tag:int [create__specific_post(us_tag, {
  rec__unit1__t1__c1 = unit1__create__x__fields; rec__ext__ =
  unit1__create__x__fields1 }, x__attr__tag, { rec__unit1__t1__c1 =
  unit1__create__x__old__fields; rec__ext__ = unit1__create__x__old__fields1
  })]. (create__specific_post(us_tag, { rec__unit1__t1__c1 =
  unit1__create__x__fields; rec__ext__ = unit1__create__x__fields1 },
  x__attr__tag, { rec__unit1__t1__c1 = unit1__create__x__old__fields;
  rec__ext__ = unit1__create__x__old__fields1 }) ->
  (to_rep1(unit1__create__x__fields) = 0))))

axiom unit2__t2__compat_axiom1 :
  (forall unit1__create__x__fields:integer.
  forall unit1__create__x__fields1:us_private.
  forall unit1__create__x__old__fields:integer.
  forall unit1__create__x__old__fields1:us_private.
  (forall x__attr__tag:int [create__specific_post(us_tag1, {
  rec__unit1__t1__c1 = unit1__create__x__fields; rec__ext__ =
  unit1__create__x__fields1 }, x__attr__tag, { rec__unit1__t1__c1 =
  unit1__create__x__old__fields; rec__ext__ = unit1__create__x__old__fields1
  })]. (create__specific_post(us_tag1, { rec__unit1__t1__c1 =
  unit1__create__x__fields; rec__ext__ = unit1__create__x__fields1 },
  x__attr__tag, { rec__unit1__t1__c1 = unit1__create__x__old__fields;
  rec__ext__ = unit1__create__x__old__fields1 }) -> ((to_rep1(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__create__x__fields;
  rec__ext__ = unit1__create__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) = 0) and (to_rep1(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__create__x__fields;
  rec__ext__ = unit1__create__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) = 0)))))

logic is_max : us_rep -> bool

logic is_max__function_guard : bool, us_rep -> prop

logic is_max1 : int, us_rep -> bool

logic is_max__function_guard1 : bool, int, us_rep -> prop

logic is_max2 : us_rep1 -> bool

logic is_max__function_guard2 : bool, us_rep1 -> prop

logic is_max3 : int, us_rep1 -> bool

logic is_max__function_guard3 : bool, int, us_rep1 -> prop

axiom is_max__post_axiom : true

axiom is_max__post__dispatch_axiom : true

axiom unit1__t1__compat_axiom2 :
  (forall x:integer. forall x1:us_private. forall x2:int [is_max1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_max({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2 })) = to_int(is_max1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))))

axiom unit2__t2__compat_axiom2 :
  (forall x:integer. forall x1:us_private. forall x2:int [is_max1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_max2(of_base({ us_split_fields1 = { rec__unit1__t1__c1 =
  x; rec__ext__ = x1 }; attr__tag = x2 }))) = to_int(is_max1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))))

axiom is_max__def_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [is_max({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. ((is_max({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2 }) = true) <->
  (to_rep1(x) = 2147483647)))

logic next : us_rep -> us_rep

logic next__function_guard : us_rep, us_rep -> prop

logic next1 : int, us_rep -> us_rep

logic next__function_guard1 : us_rep, int, us_rep -> prop

logic bump__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom unit1__t1__compat_axiom3 :
  (forall unit1__bump__x__fields:integer.
  forall unit1__bump__x__fields1:us_private.
  forall unit1__bump__x__old__fields:integer.
  forall unit1__bump__x__old__fields1:us_private.
  (forall x__attr__tag:int [bump__specific_post(us_tag, {
  rec__unit1__t1__c1 = unit1__bump__x__fields; rec__ext__ =
  unit1__bump__x__fields1 }, x__attr__tag, { rec__unit1__t1__c1 =
  unit1__bump__x__old__fields; rec__ext__ = unit1__bump__x__old__fields1 })].
  (bump__specific_post(us_tag, { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }, x__attr__tag, {
  rec__unit1__t1__c1 = unit1__bump__x__old__fields; rec__ext__ =
  unit1__bump__x__old__fields1 }) ->
  (to_rep1(unit1__bump__x__fields) = (to_rep1(unit1__bump__x__old__fields) + 1)))))

axiom unit2__t2__compat_axiom3 :
  (forall unit1__bump__x__fields:integer.
  forall unit1__bump__x__fields1:us_private.
  forall unit1__bump__x__old__fields:integer.
  forall unit1__bump__x__old__fields1:us_private.
  (forall x__attr__tag:int [bump__specific_post(us_tag1, {
  rec__unit1__t1__c1 = unit1__bump__x__fields; rec__ext__ =
  unit1__bump__x__fields1 }, x__attr__tag, { rec__unit1__t1__c1 =
  unit1__bump__x__old__fields; rec__ext__ = unit1__bump__x__old__fields1 })].
  (bump__specific_post(us_tag1, { rec__unit1__t1__c1 =
  unit1__bump__x__fields; rec__ext__ = unit1__bump__x__fields1 },
  x__attr__tag, { rec__unit1__t1__c1 = unit1__bump__x__old__fields;
  rec__ext__ = unit1__bump__x__old__fields1 }) -> ((to_rep1(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) = (to_rep1(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__old__fields;
  rec__ext__ = unit1__bump__x__old__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) + 1)) and (to_rep1(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) = (to_rep1(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__old__fields;
  rec__ext__ = unit1__bump__x__old__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) + 1))))))

axiom is_zero__post_axiom1 : true

axiom is_zero__post__dispatch_axiom1 : true

axiom unit2__t2__compat_axiom4 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [is_zero3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  (to_int(is_zero2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3
  })) = to_int(is_zero3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 =
  x; rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 }))))

axiom is_zero__def_axiom1 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [is_zero2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  ((is_zero2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3
  }) = true) <-> ((is_zero({ us_split_fields1 = { rec__unit1__t1__c1 = x1;
  rec__ext__ = hide_ext__(x, x2) }; attr__tag = x3 }) = true) and
  (to_rep1(x) = 0))))

logic create__specific_post1 : int, us_split_fields2, int,
  us_split_fields2 -> prop

axiom unit2__t2__compat_axiom5 :
  (forall unit2__create__x__fields:integer.
  forall unit2__create__x__fields1:integer.
  forall unit2__create__x__fields2:us_private.
  forall unit2__create__x__old__fields:integer.
  forall unit2__create__x__old__fields1:integer.
  forall unit2__create__x__old__fields2:us_private.
  (forall x__attr__tag:int [create__specific_post1(us_tag1, {
  rec__unit2__t2__c2 = unit2__create__x__fields; rec__unit1__t1__c11 =
  unit2__create__x__fields1; rec__ext__1 = unit2__create__x__fields2 },
  x__attr__tag, { rec__unit2__t2__c2 = unit2__create__x__old__fields;
  rec__unit1__t1__c11 = unit2__create__x__old__fields1; rec__ext__1 =
  unit2__create__x__old__fields2 })]. (create__specific_post1(us_tag1, {
  rec__unit2__t2__c2 = unit2__create__x__fields; rec__unit1__t1__c11 =
  unit2__create__x__fields1; rec__ext__1 = unit2__create__x__fields2 },
  x__attr__tag, { rec__unit2__t2__c2 = unit2__create__x__old__fields;
  rec__unit1__t1__c11 = unit2__create__x__old__fields1; rec__ext__1 =
  unit2__create__x__old__fields2 }) ->
  ((to_rep1(unit2__create__x__fields1) = 0) and
  (to_rep1(unit2__create__x__fields) = 0)))))

axiom is_max__post_axiom1 : true

axiom is_max__post__dispatch_axiom1 : true

axiom unit2__t2__compat_axiom6 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [is_max3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  (to_int(is_max2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3
  })) = to_int(is_max3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 =
  x; rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 }))))

axiom is_max__def_axiom1 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [is_max2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  ((is_max2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3
  }) = true) <-> ((is_max({ us_split_fields1 = { rec__unit1__t1__c1 = x1;
  rec__ext__ = hide_ext__(x, x2) }; attr__tag = x3 }) = true) or
  (to_rep1(x) = 2147483647))))

logic next2 : us_rep1 -> us_rep1

logic next__function_guard2 : us_rep1, us_rep1 -> prop

logic next3 : int, us_rep1 -> us_rep1

logic next__function_guard3 : us_rep1, int, us_rep1 -> prop

logic bump__specific_post1 : int, us_split_fields2, int,
  us_split_fields2 -> prop

axiom unit2__t2__compat_axiom7 :
  (forall unit2__bump__x__fields:integer.
  forall unit2__bump__x__fields1:integer.
  forall unit2__bump__x__fields2:us_private.
  forall unit2__bump__x__old__fields:integer.
  forall unit2__bump__x__old__fields1:integer.
  forall unit2__bump__x__old__fields2:us_private.
  (forall x__attr__tag:int [bump__specific_post1(us_tag1, {
  rec__unit2__t2__c2 = unit2__bump__x__fields; rec__unit1__t1__c11 =
  unit2__bump__x__fields1; rec__ext__1 = unit2__bump__x__fields2 },
  x__attr__tag, { rec__unit2__t2__c2 = unit2__bump__x__old__fields;
  rec__unit1__t1__c11 = unit2__bump__x__old__fields1; rec__ext__1 =
  unit2__bump__x__old__fields2 })]. (bump__specific_post1(us_tag1, {
  rec__unit2__t2__c2 = unit2__bump__x__fields; rec__unit1__t1__c11 =
  unit2__bump__x__fields1; rec__ext__1 = unit2__bump__x__fields2 },
  x__attr__tag, { rec__unit2__t2__c2 = unit2__bump__x__old__fields;
  rec__unit1__t1__c11 = unit2__bump__x__old__fields1; rec__ext__1 =
  unit2__bump__x__old__fields2 }) ->
  ((to_rep1(unit2__bump__x__fields1) = (to_rep1(unit2__bump__x__old__fields1) + 1)) and
  (to_rep1(unit2__bump__x__fields) = (to_rep1(unit2__bump__x__old__fields) + 1))))))

logic x1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic x2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___String_Literal_547 : unit -> (int,character) farray

axiom temp___String_Literal_547__def_axiom :
  ((((((((to_rep((temp___String_Literal_547(void)[1])) = 83) and
  (to_rep((temp___String_Literal_547(void)[2])) = 117)) and
  (to_rep((temp___String_Literal_547(void)[3])) = 99)) and
  (to_rep((temp___String_Literal_547(void)[4])) = 99)) and
  (to_rep((temp___String_Literal_547(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_547(void)[6])) = 115)) and
  (to_rep((temp___String_Literal_547(void)[7])) = 115)) and
  (to_rep((temp___String_Literal_547(void)[8])) = 33))

axiom unit1__t1__compat_axiom4 :
  (forall x:integer. forall x1:us_private. forall x2:int [next1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (next({ us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ =
  x1 }; attr__tag = x2 }) = next1(us_tag, { us_split_fields1 = {
  rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag = x2 })))

axiom unit2__t2__compat_axiom8 :
  (forall x:integer. forall x1:us_private. forall x2:int [next1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. ({ us_split_fields1 = { rec__unit1__t1__c1 = ((next2(of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))).us_split_fields3).rec__unit1__t1__c11; rec__ext__ =
  hide_ext__(((next2(of_base({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2
  }))).us_split_fields3).rec__unit2__t2__c2, ((next2(of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))).us_split_fields3).rec__ext__1) }; attr__tag = (next2(of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))).attr__tag1 } = next1(us_tag1, { us_split_fields1 = {
  rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag = x2 })))

axiom unit2__t2__compat_axiom9 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [next3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })]. (next2({
  us_split_fields3 = { rec__unit2__t2__c2 = x; rec__unit1__t1__c11 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 }) = next3(us_tag1, {
  us_split_fields3 = { rec__unit2__t2__c2 = x; rec__unit1__t1__c11 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 })))

logic x1__split_fields : integer

logic x1__split_fields1 : us_private

logic x1__split_fields2 : integer

logic x1__split_fields3 : us_private

logic x2__split_fields : integer

logic x2__split_fields1 : integer

logic x2__split_fields2 : us_private

logic x2__split_fields3 : integer

logic x2__split_fields4 : integer

logic x2__split_fields5 : us_private

axiom H : (x1__attr__tag = us_tag)

axiom H1 : (x2__attr__tag = us_tag1)

axiom H2 : (to_rep1(x1__split_fields) = 0)

axiom H3 : (is_zero({ us_split_fields1 = { rec__unit1__t1__c1 =
  x1__split_fields; rec__ext__ = x1__split_fields1 }; attr__tag =
  x1__attr__tag }) = true)

axiom H4 : (to_rep1(x1__split_fields2) = (to_rep1(x1__split_fields) + 1))

axiom H5 : (not (is_max({ us_split_fields1 = { rec__unit1__t1__c1 =
  x1__split_fields2; rec__ext__ = x1__split_fields3 }; attr__tag =
  x1__attr__tag }) = true))

axiom H6 : ((to_rep1(x2__split_fields1) = 0) and
  (to_rep1(x2__split_fields) = 0))

axiom H7 : (is_zero2({ us_split_fields3 = { rec__unit2__t2__c2 =
  x2__split_fields; rec__unit1__t1__c11 = x2__split_fields1; rec__ext__1 =
  x2__split_fields2 }; attr__tag1 = x2__attr__tag }) = true)

 (* File "main.adb", line 5, characters 0-0 *)
goal WP_parameter_def : (not (is_max2({ us_split_fields3 = {
  rec__unit2__t2__c2 = x2__split_fields; rec__unit1__t1__c11 =
  x2__split_fields1; rec__ext__1 = x2__split_fields2 }; attr__tag1 =
  x2__attr__tag }) = true))
