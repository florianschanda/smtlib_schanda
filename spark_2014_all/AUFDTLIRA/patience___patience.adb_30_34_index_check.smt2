(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort card 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 52)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (card card) Bool)
(declare-const dummy1 card)
(declare-datatypes () ((card__ref (mk_card__ref (card__content card)))))
(define-fun card__ref___projection ((a card__ref)) card (card__content a))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_163 Bool) (temp___skip_constant_164 Bool) (temp___do_toplevel_165 Bool)) Bool (=> (or (= temp___is_init_163 true) (<= 1 52)) (in_range2 temp___expr_166)))
(declare-fun to_rep (card) Int)
(declare-fun of_rep (Int) card)
(assert (forall ((x card)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x card)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int card))))))
(declare-fun slide ((Array Int card) Int Int) (Array Int card))
(assert (forall ((a (Array Int card))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int card))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int card) Int Int (Array Int card) Int Int) (Array Int card))
(assert (forall ((a (Array Int card)) (b (Array Int card))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (card Int) (Array Int card))
(assert (forall ((v card)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int card)) (a__first Int) (a__last Int) (b (Array Int card)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int card)) (b (Array Int card))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int card) Int Int (Array Int card) Int Int) Int)
(assert (forall ((a (Array Int card)) (b (Array Int card))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int card)) (b (Array Int card))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int card)) (b (Array Int card))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort cardindex 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (cardindex cardindex) Bool)
(declare-const dummy2 cardindex)
(declare-datatypes () ((cardindex__ref (mk_cardindex__ref (cardindex__content cardindex)))))
(define-fun cardindex__ref___projection ((a cardindex__ref)) cardindex (cardindex__content a))
(define-fun dynamic_invariant2 ((temp___expr_177 Int) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool)) Bool (=> (or (= temp___is_init_174 true) (<= (- 1) 100)) (in_range3 temp___expr_177)))
(declare-fun to_rep1 (cardindex) Int)
(declare-fun of_rep1 (Int) cardindex)
(assert (forall ((x cardindex)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x cardindex)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort tcardarrayD1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tcardarrayD1 tcardarrayD1) Bool)
(declare-const dummy3 tcardarrayD1)
(declare-datatypes () ((tcardarrayD1__ref (mk_tcardarrayD1__ref (tcardarrayD1__content tcardarrayD1)))))
(define-fun tcardarrayD1__ref___projection ((a tcardarrayD1__ref)) tcardarrayD1 (tcardarrayD1__content a))
(declare-sort tindexarrayD1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (tindexarrayD1 tindexarrayD1) Bool)
(declare-const dummy4 tindexarrayD1)
(declare-datatypes () ((tindexarrayD1__ref (mk_tindexarrayD1__ref (tindexarrayD1__content tindexarrayD1)))))
(define-fun tindexarrayD1__ref___projection ((a tindexarrayD1__ref)) tindexarrayD1 (tindexarrayD1__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int cardindex))))))
(declare-fun slide1 ((Array Int cardindex) Int Int) (Array Int cardindex))
(assert (forall ((a (Array Int cardindex))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int cardindex))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int cardindex) Int Int (Array Int cardindex) Int Int) (Array Int cardindex))
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (cardindex Int) (Array Int cardindex))
(assert (forall ((v cardindex)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int cardindex)) (a__first Int) (a__last Int) (b (Array Int cardindex)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare1 ((Array Int cardindex) Int Int (Array Int cardindex) Int Int) Int)
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-sort tindexmatrixD1 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (tindexmatrixD1 tindexmatrixD1) Bool)
(declare-const dummy5 tindexmatrixD1)
(declare-datatypes () ((tindexmatrixD1__ref (mk_tindexmatrixD1__ref (tindexmatrixD1__content tindexmatrixD1)))))
(define-fun tindexmatrixD1__ref___projection ((a tindexmatrixD1__ref)) tindexmatrixD1 (tindexmatrixD1__content a))
(declare-const dummy6 (Array Int cardindex))
(declare-const value__size Int)
(declare-fun object__size ((Array Int cardindex)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int cardindex)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int cardindex)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__alignment a))))
(declare-fun user_eq6 ((Array Int cardindex) (Array Int cardindex)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int cardindex)))))))
(declare-fun slide2 ((Array Int (Array Int cardindex)) Int Int) (Array Int (Array Int cardindex)))
(assert (forall ((a (Array Int (Array Int cardindex)))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int cardindex)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int (Array Int cardindex)) Int Int (Array Int (Array Int cardindex)) Int Int) (Array Int (Array Int cardindex)))
(assert (forall ((a (Array Int (Array Int cardindex))) (b (Array Int (Array Int cardindex)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 ((Array Int cardindex) Int) (Array Int (Array Int cardindex)))
(assert (forall ((v (Array Int cardindex))) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq2 ((a (Array Int (Array Int cardindex))) (a__first Int) (a__last Int) (b (Array Int (Array Int cardindex))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq1 (select a temp___idx_134) 0 99 (select b (+ (- b__first a__first) temp___idx_134)) 0 99) true)))) true false))
(assert (forall ((a (Array Int (Array Int cardindex))) (b (Array Int (Array Int cardindex)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq1 (select a temp___idx_134) 0 99 (select b (+ (- b__first a__first) temp___idx_134)) 0 99) true))))))))
(declare-const dummy7 (Array Int card))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int card)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int card)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int card)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int card))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int card))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int card))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq7 ((Array Int card) (Array Int card)) Bool)
(declare-const dummy8 (Array Int (Array Int cardindex)))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int (Array Int cardindex))) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int (Array Int cardindex))) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int (Array Int cardindex))) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq8 ((Array Int (Array Int cardindex)) (Array Int (Array Int cardindex))) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__patience__state__numelts cardindex) (rec__patience__state__values (Array Int card)) (rec__patience__state__numstacks cardindex) (rec__patience__state__stacksizes (Array Int cardindex)) (rec__patience__state__stacks (Array Int (Array Int cardindex))) (rec__patience__state__posstack (Array Int cardindex)) (rec__patience__state__posheight (Array Int cardindex)) (rec__patience__state__preds (Array Int cardindex))))))
(define-fun us_split_fields_NumElts__projection ((a us_split_fields)) cardindex (rec__patience__state__numelts a))
(define-fun us_split_fields_Values__projection ((a us_split_fields)) (Array Int card) (rec__patience__state__values a))
(define-fun us_split_fields_NumStacks__projection ((a us_split_fields)) cardindex (rec__patience__state__numstacks a))
(define-fun us_split_fields_StackSizes__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__stacksizes a))
(define-fun us_split_fields_Stacks__projection ((a us_split_fields)) (Array Int (Array Int cardindex)) (rec__patience__state__stacks a))
(define-fun us_split_fields_PosStack__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__posstack a))
(define-fun us_split_fields_PosHeight__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__posheight a))
(define-fun us_split_fields_Preds__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__preds a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq3 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep1 (rec__patience__state__numelts (us_split_fields1 a))) (to_rep1 (rec__patience__state__numelts (us_split_fields1 b)))) (= (bool_eq (rec__patience__state__values (us_split_fields1 a)) 0 99 (rec__patience__state__values (us_split_fields1 b)) 0 99) true)) (= (to_rep1 (rec__patience__state__numstacks (us_split_fields1 a))) (to_rep1 (rec__patience__state__numstacks (us_split_fields1 b))))) (= (bool_eq1 (rec__patience__state__stacksizes (us_split_fields1 a)) 0 99 (rec__patience__state__stacksizes (us_split_fields1 b)) 0 99) true)) (= (bool_eq2 (rec__patience__state__stacks (us_split_fields1 a)) 0 99 (rec__patience__state__stacks (us_split_fields1 b)) 0 99) true)) (= (bool_eq1 (rec__patience__state__posstack (us_split_fields1 a)) 0 99 (rec__patience__state__posstack (us_split_fields1 b)) 0 99) true)) (= (bool_eq1 (rec__patience__state__posheight (us_split_fields1 a)) 0 99 (rec__patience__state__posheight (us_split_fields1 b)) 0 99) true)) (= (bool_eq1 (rec__patience__state__preds (us_split_fields1 a)) 0 99 (rec__patience__state__preds (us_split_fields1 b)) 0 99) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const patience__state__numelts__first__bit Int)
(declare-const patience__state__numelts__last__bit Int)
(declare-const patience__state__numelts__position Int)
(assert (<= 0 patience__state__numelts__first__bit))
(assert (< patience__state__numelts__first__bit patience__state__numelts__last__bit))
(assert (<= 0 patience__state__numelts__position))
(declare-const patience__state__values__first__bit Int)
(declare-const patience__state__values__last__bit Int)
(declare-const patience__state__values__position Int)
(assert (<= 0 patience__state__values__first__bit))
(assert (< patience__state__values__first__bit patience__state__values__last__bit))
(assert (<= 0 patience__state__values__position))
(declare-const patience__state__numstacks__first__bit Int)
(declare-const patience__state__numstacks__last__bit Int)
(declare-const patience__state__numstacks__position Int)
(assert (<= 0 patience__state__numstacks__first__bit))
(assert (< patience__state__numstacks__first__bit patience__state__numstacks__last__bit))
(assert (<= 0 patience__state__numstacks__position))
(declare-const patience__state__stacksizes__first__bit Int)
(declare-const patience__state__stacksizes__last__bit Int)
(declare-const patience__state__stacksizes__position Int)
(assert (<= 0 patience__state__stacksizes__first__bit))
(assert (< patience__state__stacksizes__first__bit patience__state__stacksizes__last__bit))
(assert (<= 0 patience__state__stacksizes__position))
(declare-const patience__state__stacks__first__bit Int)
(declare-const patience__state__stacks__last__bit Int)
(declare-const patience__state__stacks__position Int)
(assert (<= 0 patience__state__stacks__first__bit))
(assert (< patience__state__stacks__first__bit patience__state__stacks__last__bit))
(assert (<= 0 patience__state__stacks__position))
(declare-const patience__state__posstack__first__bit Int)
(declare-const patience__state__posstack__last__bit Int)
(declare-const patience__state__posstack__position Int)
(assert (<= 0 patience__state__posstack__first__bit))
(assert (< patience__state__posstack__first__bit patience__state__posstack__last__bit))
(assert (<= 0 patience__state__posstack__position))
(declare-const patience__state__posheight__first__bit Int)
(declare-const patience__state__posheight__last__bit Int)
(declare-const patience__state__posheight__position Int)
(assert (<= 0 patience__state__posheight__first__bit))
(assert (< patience__state__posheight__first__bit patience__state__posheight__last__bit))
(assert (<= 0 patience__state__posheight__position))
(declare-const patience__state__preds__first__bit Int)
(declare-const patience__state__preds__last__bit Int)
(declare-const patience__state__preds__position Int)
(assert (<= 0 patience__state__preds__first__bit))
(assert (< patience__state__preds__first__bit patience__state__preds__last__bit))
(assert (<= 0 patience__state__preds__position))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((state__ref (mk_state__ref (state__content us_rep)))))
(define-fun state__ref___projection ((a state__ref)) us_rep (state__content a))
(declare-fun inv (us_rep) Bool)
(declare-fun inv__function_guard (Bool us_rep) Bool)
(assert true)
(assert (forall ((s us_rep)) (! (= (= (inv s) true) (and (and (and (and (and (and (and (and (and (<= 0 (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s)))) (<= (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))) (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))))) (<= (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 100)) (or (= (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 0) (< 0 (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s)))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (and (and (<= 1 (to_rep1 (let ((temp___306 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___306 i)))) (<= (to_rep1 (let ((temp___307 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___307 i))) (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))))) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- (to_rep1 (let ((temp___308 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___308 i))) 1))) (and (<= 0 (to_rep1 (let ((temp___310 (let ((temp___309 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___309 i)))) (select temp___310 j)))) (< (to_rep1 (let ((temp___312 (let ((temp___311 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___311 i)))) (select temp___312 j))) (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 1))) (and (and (and (<= 0 (to_rep1 (let ((temp___313 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___313 i)))) (<= (to_rep1 (let ((temp___313 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___313 i))) (- (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (and (<= 0 (to_rep1 (let ((temp___314 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___314 i)))) (<= (to_rep1 (let ((temp___314 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___314 i))) (- (to_rep1 (let ((temp___315 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___315 (to_rep1 (let ((temp___316 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___316 i)))))) 1)))) (= (to_rep1 (let ((temp___319 (let ((temp___317 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___317 (to_rep1 (let ((temp___318 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___318 i))))))) (select temp___319 (to_rep1 (let ((temp___320 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___320 i)))))) i))))) (forall ((ist Int)) (=> (and (<= 0 ist) (<= ist (- (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((ip Int)) (=> (and (<= 0 ip) (<= ip (- (to_rep1 (let ((temp___321 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___321 ist))) 1))) (and (= ist (to_rep1 (let ((temp___322 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___322 (to_rep1 (let ((temp___324 (let ((temp___323 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___323 ist)))) (select temp___324 ip))))))) (= ip (to_rep1 (let ((temp___325 (rec__patience__state__posheight (us_split_fields1 s)))) (select temp___325 (to_rep1 (let ((temp___327 (let ((temp___326 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___326 ist)))) (select temp___327 ip))))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- (to_rep1 (let ((temp___328 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___328 i))) 2))) (forall ((k Int)) (=> (and (<= (+ j 1) k) (<= k (- (to_rep1 (let ((temp___329 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___329 i))) 1))) (< (to_rep1 (let ((temp___331 (let ((temp___330 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___330 i)))) (select temp___331 j))) (to_rep1 (let ((temp___333 (let ((temp___332 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___332 i)))) (select temp___333 k))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep1 (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((j Int)) (=> (and (<= 0 j) (<= j (- (to_rep1 (let ((temp___334 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___334 i))) 2))) (forall ((k Int)) (=> (and (<= (+ j 1) k) (<= k (- (to_rep1 (let ((temp___335 (rec__patience__state__stacksizes (us_split_fields1 s)))) (select temp___335 i))) 1))) (<= (to_rep (let ((temp___339 (rec__patience__state__values (us_split_fields1 s)))) (select temp___339 (to_rep1 (let ((temp___341 (let ((temp___340 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___340 i)))) (select temp___341 k)))))) (to_rep (let ((temp___336 (rec__patience__state__values (us_split_fields1 s)))) (select temp___336 (to_rep1 (let ((temp___338 (let ((temp___337 (rec__patience__state__stacks (us_split_fields1 s)))) (select temp___337 i)))) (select temp___338 j)))))))))))))) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 1))) (and (and (and (<= (- 1) (to_rep1 (let ((temp___342 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___342 i)))) (<= (to_rep1 (let ((temp___342 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___342 i))) (- (to_rep1 (rec__patience__state__numelts (us_split_fields1 s))) 1))) (< (to_rep1 (let ((temp___343 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___343 i))) i)) (ite (< (to_rep1 (let ((temp___352 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___352 i))) 0) (= (to_rep1 (let ((temp___344 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___344 i))) 0) (and (and (< (to_rep (let ((temp___345 (rec__patience__state__values (us_split_fields1 s)))) (select temp___345 (to_rep1 (let ((temp___346 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___346 i)))))) (to_rep (let ((temp___347 (rec__patience__state__values (us_split_fields1 s)))) (select temp___347 i)))) (< 0 (to_rep1 (let ((temp___348 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___348 i))))) (= (to_rep1 (let ((temp___349 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___349 (to_rep1 (let ((temp___350 (rec__patience__state__preds (us_split_fields1 s)))) (select temp___350 i)))))) (- (to_rep1 (let ((temp___351 (rec__patience__state__posstack (us_split_fields1 s)))) (select temp___351 i))) 1))))))))) :pattern ((inv s)))))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const s__split_fields cardindex)
(declare-const s__split_fields1 (Array Int card))
(declare-const s__split_fields2 cardindex)
(declare-const s__split_fields3 (Array Int cardindex))
(declare-const s__split_fields4 (Array Int (Array Int cardindex)))
(declare-const s__split_fields5 (Array Int cardindex))
(declare-const s__split_fields6 (Array Int cardindex))
(declare-const s__split_fields7 (Array Int cardindex))
(declare-const idx Int)
(declare-const pred Int)
(declare-const i Int)
(declare-const stackisize Int)
(declare-const topstacki Int)
(declare-const o Int)
(declare-const o1 cardindex)
(declare-const o2 Int)
(declare-const result int__ref)
(declare-const pred1 Int)
(declare-const result1 int__ref)
(declare-const i1 Int)
(declare-const pred2 Int)
(declare-const i2 Int)
(declare-const stackisize1 Int)
(declare-const topstacki1 Int)
(declare-const result2 int__ref)
(declare-const stackisize2 Int)
(assert (in_range2 c))
(assert (and (= (inv (mk___rep (mk___split_fields s__split_fields s__split_fields1 s__split_fields2 s__split_fields3 s__split_fields4 s__split_fields5 s__split_fields6 s__split_fields7))) true) (< (to_rep1 s__split_fields) 100)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 idx)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 pred)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 i)))
(assert (=> (<= (- 1) 100) (in_range3 stackisize)))
(assert (=> (<= (- 1) 100) (in_range3 topstacki)))
(assert (= result (mk_int__ref pred)))
(assert (= pred1 (- 1)))
(assert (= result1 (mk_int__ref i)))
(assert (= i1 0))
(assert (< i1 (to_rep1 s__split_fields2)))
(assert (and (<= 0 i2) (<= i2 (to_rep1 s__split_fields2))))
(assert (ite (= i2 0) (= pred2 (- 1)) (and (and (and (and (<= 0 pred2) (<= pred2 (- (to_rep1 s__split_fields) 1))) (= pred2 (to_rep1 (select (select s__split_fields4 (- i2 1)) (- (to_rep1 (select s__split_fields3 (- i2 1))) 1))))) (< (to_rep (select s__split_fields1 pred2)) c)) (= (to_rep1 (select s__split_fields5 pred2)) (- i2 1)))))
(assert (and (and (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 pred2)) (=> (<= (- 2147483648) 2147483647) (in_range1 i2))) (=> (<= (- 1) 100) (in_range3 stackisize1))) (=> (<= (- 1) 100) (in_range3 topstacki1))) (< i2 (to_rep1 s__split_fields2))))
(assert (and (<= 0 i2) (<= i2 99)))
(assert (= o i2))
(assert (= o1 (select s__split_fields3 o)))
(assert (= o2 (to_rep1 o1)))
(assert (= result2 (mk_int__ref stackisize1)))
(assert (= stackisize2 o2))
(assert (not (<= 0 i2)))
(check-sat)
(exit)
