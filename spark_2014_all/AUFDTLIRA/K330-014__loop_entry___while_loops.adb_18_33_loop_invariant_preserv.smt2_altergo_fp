(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic sum_of : int -> int

logic sum_of__function_guard : int, int -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___String_Literal_577 : unit -> (int,character) farray

axiom temp___String_Literal_577__def_axiom :
  (((((((((((to_rep((temp___String_Literal_577(void)[1])) = 87) and
  (to_rep((temp___String_Literal_577(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_577(void)[3])) = 105)) and
  (to_rep((temp___String_Literal_577(void)[4])) = 108)) and
  (to_rep((temp___String_Literal_577(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_577(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_577(void)[7])) = 108)) and
  (to_rep((temp___String_Literal_577(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_577(void)[9])) = 111)) and
  (to_rep((temp___String_Literal_577(void)[10])) = 112)) and
  (to_rep((temp___String_Literal_577(void)[11])) = 115))

logic temp___String_Literal_578 : unit -> (int,character) farray

axiom temp___String_Literal_578__def_axiom :
  ((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_578(void)[1])) = 69) and
  (to_rep((temp___String_Literal_578(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_578(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_578(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_578(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_578(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_578(void)[7])) = 49)) and
  (to_rep((temp___String_Literal_578(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_578(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_578(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_578(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_578(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_578(void)[13])) = 112)) and
  (to_rep((temp___String_Literal_578(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_578(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_578(void)[16])) = 104)) and
  (to_rep((temp___String_Literal_578(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_578(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_578(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_578(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_578(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_578(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_578(void)[23])) = 111)) and
  (to_rep((temp___String_Literal_578(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_578(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_578(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_578(void)[27])) = 120)) and
  (to_rep((temp___String_Literal_578(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_578(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_578(void)[30])) = 117)) and
  (to_rep((temp___String_Literal_578(void)[31])) = 116)) and
  (to_rep((temp___String_Literal_578(void)[32])) = 101))

logic temp___String_Literal_581 : unit -> (int,character) farray

axiom temp___String_Literal_581__def_axiom :
  (((((((((((((((((((((((((((((((to_rep((temp___String_Literal_581(void)[1])) = 69) and
  (to_rep((temp___String_Literal_581(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_581(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_581(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_581(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_581(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_581(void)[7])) = 50)) and
  (to_rep((temp___String_Literal_581(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_581(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_581(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_581(void)[11])) = 110)) and
  (to_rep((temp___String_Literal_581(void)[12])) = 118)) and
  (to_rep((temp___String_Literal_581(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_581(void)[14])) = 114)) and
  (to_rep((temp___String_Literal_581(void)[15])) = 105)) and
  (to_rep((temp___String_Literal_581(void)[16])) = 97)) and
  (to_rep((temp___String_Literal_581(void)[17])) = 110)) and
  (to_rep((temp___String_Literal_581(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_581(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_581(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_581(void)[21])) = 105)) and
  (to_rep((temp___String_Literal_581(void)[22])) = 100)) and
  (to_rep((temp___String_Literal_581(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_581(void)[24])) = 110)) and
  (to_rep((temp___String_Literal_581(void)[25])) = 111)) and
  (to_rep((temp___String_Literal_581(void)[26])) = 116)) and
  (to_rep((temp___String_Literal_581(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_581(void)[28])) = 102)) and
  (to_rep((temp___String_Literal_581(void)[29])) = 97)) and
  (to_rep((temp___String_Literal_581(void)[30])) = 105)) and
  (to_rep((temp___String_Literal_581(void)[31])) = 108))

logic temp___String_Literal_584 : unit -> (int,character) farray

axiom temp___String_Literal_584__def_axiom :
  ((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_584(void)[1])) = 69) and
  (to_rep((temp___String_Literal_584(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_584(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_584(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_584(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_584(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_584(void)[7])) = 51)) and
  (to_rep((temp___String_Literal_584(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_584(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_584(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_584(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_584(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_584(void)[13])) = 112)) and
  (to_rep((temp___String_Literal_584(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_584(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_584(void)[16])) = 104)) and
  (to_rep((temp___String_Literal_584(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_584(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_584(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_584(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_584(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_584(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_584(void)[23])) = 111)) and
  (to_rep((temp___String_Literal_584(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_584(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_584(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_584(void)[27])) = 120)) and
  (to_rep((temp___String_Literal_584(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_584(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_584(void)[30])) = 117)) and
  (to_rep((temp___String_Literal_584(void)[31])) = 116)) and
  (to_rep((temp___String_Literal_584(void)[32])) = 101))

logic temp___String_Literal_587 : unit -> (int,character) farray

axiom temp___String_Literal_587__def_axiom :
  ((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_587(void)[1])) = 69) and
  (to_rep((temp___String_Literal_587(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_587(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_587(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_587(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_587(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_587(void)[7])) = 52)) and
  (to_rep((temp___String_Literal_587(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_587(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_587(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_587(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_587(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_587(void)[13])) = 112)) and
  (to_rep((temp___String_Literal_587(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_587(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_587(void)[16])) = 104)) and
  (to_rep((temp___String_Literal_587(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_587(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_587(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_587(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_587(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_587(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_587(void)[23])) = 111)) and
  (to_rep((temp___String_Literal_587(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_587(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_587(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_587(void)[27])) = 120)) and
  (to_rep((temp___String_Literal_587(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_587(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_587(void)[30])) = 117)) and
  (to_rep((temp___String_Literal_587(void)[31])) = 116)) and
  (to_rep((temp___String_Literal_587(void)[32])) = 101))

 (* File "while_loops.adb", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall counter:int. forall o:int. forall o1:int. forall o2:int.
  forall o3:bool. forall result:int. forall counter1:int.
  forall result1:bool. forall counter2:int. forall result2:int.
  forall counter3:int. forall result3:bool. (((result = counter) and
  (counter1 = 1)) -> (in_range4(counter1) -> ((((o = sum_of(counter1)) and
  in_range4(o)) and (((5 <  o) and (result1 = true)) or ((not (5 <  o)) and
  (result1 = false)))) -> ((result1 = true) -> ((0 <  sum_of(counter1)) ->
  ((((0 <= 2147483647) -> in_range4(counter2)) and
  ((((o1 = (counter2 + 1)) and in_range1((counter2 + 1))) and
  ((counter2 = result2) and (counter3 = o1))) and
  (((((o2 = sum_of(counter3)) and in_range4(o2)) and (((5 <  o2) and
  (o3 = true)) or ((not (5 <  o2)) and (o3 = false)))) and
  (((not (o3 = true)) and (result3 = true)) or ((o3 = true) and
  (result3 = false)))) and (not (result3 = true))))) ->
  (0 <  sum_of(counter1)))))))))
