(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index_count

predicate in_range2(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_count, index_count -> bool

logic dummy1 : index_count

type index_count__ref = { index_count__content : index_count
}

function index_count__ref___projection(a: index_count__ref) : index_count =
  (a).index_count__content

logic to_rep1 : index_count -> int

logic of_rep1 : int -> index_count

axiom inversion_axiom1 :
  (forall x:index_count [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_count [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

predicate in_range3(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep2 : index -> int

logic of_rep2 : int -> index

axiom inversion_axiom2 :
  (forall x:index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:index [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,positive) farray
}

logic slide : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq :
  (forall a:(int,positive) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : positive, int -> (int,positive) farray

axiom singleton_def :
  (forall v:positive.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type count_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : count_type, count_type -> bool

logic dummy3 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep3 : count_type -> int

logic of_rep3 : int -> count_type

axiom inversion_axiom3 :
  (forall x:count_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:count_type [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__inverse_sets__map__capacity : count_type
}

function us_split_discrs___2__projection(a: us_split_discrs) : count_type =
  (a).rec__partition_refinement__inverse_sets__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__partition_refinement__inverse_sets__map :
us_main_type
}

function us_split_fields_Map__projection(a: us_split_fields) : us_main_type =
  (a).rec__partition_refinement__inverse_sets__map

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___10__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___11__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  ((((to_rep3(((a).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity) = to_rep3(((b).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__partition_refinement__inverse_sets__map,
  ((b).us_split_fields1).rec__partition_refinement__inverse_sets__map) = true)) ->
  (bool_eq7(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity) = to_rep3(((b).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__partition_refinement__inverse_sets__map,
  ((b).us_split_fields1).rec__partition_refinement__inverse_sets__map) = true))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

logic partition_refinement__inverse_sets__map__capacity__first__bit : int

logic partition_refinement__inverse_sets__map__capacity__last__bit : int

logic partition_refinement__inverse_sets__map__capacity__position : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom :
  (partition_refinement__inverse_sets__map__capacity__first__bit <  partition_refinement__inverse_sets__map__capacity__last__bit)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : count_type

logic dummy5 : us_main_type

type map__ref1 = { map__content1 : us_rep
}

function map__ref___2__projection(a: map__ref1) : us_rep = (a).map__content1

type us_split_fields2 = {
rec__partition_refinement__inverse_sets__cursor__node : count_type
}

function us_split_fields_Node__2__projection(a: us_split_fields2) : count_type =
  (a).rec__partition_refinement__inverse_sets__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___12__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  (((to_rep3(((a).us_split_fields3).rec__partition_refinement__inverse_sets__cursor__node) = to_rep3(((b).us_split_fields3).rec__partition_refinement__inverse_sets__cursor__node)) ->
  (bool_eq8(a, b) = true)) and
  ((not (to_rep3(((a).us_split_fields3).rec__partition_refinement__inverse_sets__cursor__node) = to_rep3(((b).us_split_fields3).rec__partition_refinement__inverse_sets__cursor__node))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = a } })))

logic partition_refinement__inverse_sets__cursor__node__first__bit : int

logic partition_refinement__inverse_sets__cursor__node__last__bit : int

logic partition_refinement__inverse_sets__cursor__node__position : int

axiom partition_refinement__inverse_sets__cursor__node__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__first__bit)

axiom partition_refinement__inverse_sets__cursor__node__last__bit_axiom :
  (partition_refinement__inverse_sets__cursor__node__first__bit <  partition_refinement__inverse_sets__cursor__node__last__bit)

axiom partition_refinement__inverse_sets__cursor__node__position_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___2__projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq9 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___2__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic length : us_rep2 -> int

logic length__function_guard : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

logic keys : us_rep -> us_rep2

logic keys__function_guard : us_rep2, us_rep -> prop

logic equivalent_keys__function_guard : bool, int, int -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard2 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq4({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = b1 }
  })]. (user_eq4({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = b1 }
  }) = oeq({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = b1 }
  })))

logic length1 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

logic length2 : int, us_rep -> int

logic length__function_guard2 : int, int, us_rep -> prop

type key_type

predicate in_range5(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : key_type, key_type -> bool

logic dummy8 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref___3__projection(a: key_type__ref) : key_type =
  (a).key_type__content

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq11 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy9 : us_rep3

type map__ref2 = { map__content2 : us_rep3
}

function map__ref___3__projection(a: map__ref2) : us_rep3 = (a).map__content2

logic has_key : us_rep3, int -> bool

logic has_key__function_guard : bool, us_rep3, int -> prop

type extended_index

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : extended_index, extended_index -> bool

logic dummy10 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

logic k_bigger_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic k_smaller_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic k_is_find__function_guard : bool, us_rep2, int, int -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

logic model__ : us_rep -> us_rep3

logic model____function_guard : us_rep3, us_rep -> prop

axiom keys__post_axiom :
  (forall container:count_type. forall container1:us_main_type [keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. ((((length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })) = length1({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })) and
  (forall temp___607:int. ((in_range6(temp___607) and ((1 <= temp___607) and
  (temp___607 <= (0 + length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))))) -> (has_key(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), temp___607)) = true)))) and
  (forall key:int. ((in_range5(key) and (has_key(model__({ us_split_discrs1 =
  { rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key) = true)) -> ((0 <  find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key)) and ((not (bool_lt(get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key)), key) = true)) and ((bool_lt(get(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key)), key) = false) -> (not (bool_lt(key, get(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length1({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) -> ((find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get(keys({
    us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1) <  get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i)))) ->
  (((i <  length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length(keys({
    us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } })))) -> (get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i) <  get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length(keys({
        us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } })))) -> (get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i) <  get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1))))) ->
  (match_bool(true, false, false) = true)))) and ((not (i <  length(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))) -> (match_bool(true, of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get(keys({
        us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1) <  get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i))))) ->
  (((i <  length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length(keys({
    us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } })))) -> (get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i) <  get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length(keys({
        us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } })))) -> (get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i) <  get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1))))) ->
  (match_bool(false, false, false) = true)))) and ((not (i <  length(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))) -> (match_bool(false, of_int(1), false) = true)))))) and
  ((not (0 <  i)) -> (((i <  length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length(keys({
    us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } })))) -> (get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i) <  get(keys({ us_split_discrs1 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length(keys({
        us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } })))) -> (get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i) <  get(keys({ us_split_discrs1 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1))))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))) -> (match_bool(of_int(1), of_int(1),
  false) = true))))))))))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq13 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq10 : us_rep4, us_rep4 -> bool

logic dummy11 : us_rep4

type map__ref3 = { map__content3 : us_rep4
}

function map__ref___4__projection(a: map__ref3) : us_rep4 = (a).map__content3

type key_type__ref1 = { key_type__content1 : us_rep1
}

function key_type__ref___4__projection(a: key_type__ref1) : us_rep1 =
  (a).key_type__content1

logic has_key1 : us_rep4, us_rep1 -> bool

logic has_key__function_guard1 : bool, us_rep4, us_rep1 -> prop

logic positions : us_rep -> us_rep4

logic positions__function_guard : us_rep4, us_rep -> prop

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

axiom has_element__post__dispatch_axiom : true

logic get1 : us_rep4, us_rep1 -> int

logic get__function_guard1 : int, us_rep4, us_rep1 -> prop

logic key__function_guard : int, us_rep, us_rep1 -> prop

logic key : int, us_rep, us_rep1 -> int

logic key__function_guard1 : int, int, us_rep, us_rep1 -> prop

type key_type1

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : key_type1, key_type1 -> bool

logic dummy12 : key_type1

type key_type__ref2 = { key_type__content2 : key_type1
}

function key_type__ref___2__projection(a: key_type__ref2) : key_type1 =
  (a).key_type__content2

axiom key__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [key(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })].
  in_range7(key(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })))))

logic get2 : us_rep3, int -> int

logic get__function_guard2 : int, us_rep3, int -> prop

logic element__function_guard : int, us_rep, us_rep1 -> prop

logic element : int, us_rep, us_rep1 -> int

logic element__function_guard1 : int, int, us_rep, us_rep1 -> prop

type element_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : element_type, element_type -> bool

logic dummy13 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___4__projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [element(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })].
  in_range8(element(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })))))

logic contains__function_guard : bool, us_rep, int -> prop

logic contains : int, us_rep, int -> bool

logic contains__function_guard1 : bool, int, us_rep, int -> prop

axiom contains__post__dispatch_axiom : true

logic element__2__function_guard : int, us_rep, int -> prop

logic element__2 : int, us_rep, int -> int

logic element__2__function_guard1 : int, int, us_rep, int -> prop

axiom element__2__post__dispatch_axiom :
  (forall attr__tag:int. forall key1:int.
  (forall container:count_type. forall container1:us_main_type
  [element__2(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)]. (in_range7(key1) -> in_range8(element__2(attr__tag,
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)))))

logic keys_included : us_rep3, us_rep3 -> bool

logic keys_included__function_guard : bool, us_rep3, us_rep3 -> prop

logic same_keys__function_guard : bool, us_rep3, us_rep3 -> prop

logic elements_equal_except : us_rep3, us_rep3, int -> bool

logic elements_equal_except__function_guard : bool, us_rep3, us_rep3,
  int -> prop

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard3 : bool, us_rep4, us_rep4 -> prop

logic replace__specific_post : int, us_split_fields, us_split_discrs, int,
  int, us_split_fields -> prop

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size5({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment5({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

logic partition_refinement__inverse_sets__map__capacity__first__bit1 : int

logic partition_refinement__inverse_sets__map__capacity__last__bit1 : int

logic partition_refinement__inverse_sets__map__capacity__position1 : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit1)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom1 :
  (partition_refinement__inverse_sets__map__capacity__first__bit1 <  partition_refinement__inverse_sets__map__capacity__last__bit1)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom1 :
  (0 <= partition_refinement__inverse_sets__map__capacity__position1)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy14 : count_type

logic dummy15 : us_main_type

type inverse_set__ref = { inverse_set__content : us_rep
}

function inverse_set__ref___projection(a: inverse_set__ref) : us_rep =
  (a).inverse_set__content

axiom user_eq__def_axiom2 :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq13({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = b1 }
  })]. (user_eq13({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = b1 }
  }) = oeq({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = b1 }
  })))

type us_split_fields4 = { rec__partition_refinement__interval__first : index;
rec__partition_refinement__interval__last : index;
rec__partition_refinement__interval__count : index_count
}

function us_split_fields_First__projection(a: us_split_fields4) : index =
  (a).rec__partition_refinement__interval__first

function us_split_fields_Last__projection(a: us_split_fields4) : index =
  (a).rec__partition_refinement__interval__last

function us_split_fields_Count__projection(a: us_split_fields4) : index_count =
  (a).rec__partition_refinement__interval__count

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep5 = { us_split_fields5 : us_split_fields4
}

function us_rep___13__projection(a: us_rep5) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq16 : us_rep5, us_rep5 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq16(a, b)].
  (((((to_rep2(((a).us_split_fields5).rec__partition_refinement__interval__first) = to_rep2(((b).us_split_fields5).rec__partition_refinement__interval__first)) and
  (to_rep2(((a).us_split_fields5).rec__partition_refinement__interval__last) = to_rep2(((b).us_split_fields5).rec__partition_refinement__interval__last))) and
  (to_rep1(((a).us_split_fields5).rec__partition_refinement__interval__count) = to_rep1(((b).us_split_fields5).rec__partition_refinement__interval__count))) ->
  (bool_eq16(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields5).rec__partition_refinement__interval__first) = to_rep2(((b).us_split_fields5).rec__partition_refinement__interval__first)) and
  (to_rep2(((a).us_split_fields5).rec__partition_refinement__interval__last) = to_rep2(((b).us_split_fields5).rec__partition_refinement__interval__last))) and
  (to_rep1(((a).us_split_fields5).rec__partition_refinement__interval__count) = to_rep1(((b).us_split_fields5).rec__partition_refinement__interval__count)))) ->
  (bool_eq16(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep5 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep5 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__size6({ us_split_fields5 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__alignment6({ us_split_fields5 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

logic partition_refinement__interval__first__first__bit : int

logic partition_refinement__interval__first__last__bit : int

logic partition_refinement__interval__first__position : int

axiom partition_refinement__interval__first__first__bit_axiom :
  (0 <= partition_refinement__interval__first__first__bit)

axiom partition_refinement__interval__first__last__bit_axiom :
  (partition_refinement__interval__first__first__bit <  partition_refinement__interval__first__last__bit)

axiom partition_refinement__interval__first__position_axiom :
  (0 <= partition_refinement__interval__first__position)

logic partition_refinement__interval__last__first__bit : int

logic partition_refinement__interval__last__last__bit : int

logic partition_refinement__interval__last__position : int

axiom partition_refinement__interval__last__first__bit_axiom :
  (0 <= partition_refinement__interval__last__first__bit)

axiom partition_refinement__interval__last__last__bit_axiom :
  (partition_refinement__interval__last__first__bit <  partition_refinement__interval__last__last__bit)

axiom partition_refinement__interval__last__position_axiom :
  (0 <= partition_refinement__interval__last__position)

logic partition_refinement__interval__count__first__bit : int

logic partition_refinement__interval__count__last__bit : int

logic partition_refinement__interval__count__position : int

axiom partition_refinement__interval__count__first__bit_axiom :
  (0 <= partition_refinement__interval__count__first__bit)

axiom partition_refinement__interval__count__last__bit_axiom :
  (partition_refinement__interval__count__first__bit <  partition_refinement__interval__count__last__bit)

axiom partition_refinement__interval__count__position_axiom :
  (0 <= partition_refinement__interval__count__position)

logic user_eq14 : us_rep5, us_rep5 -> bool

logic dummy16 : index

logic dummy17 : index

logic dummy18 : index_count

type interval__ref = { interval__content : us_rep5
}

function interval__ref___projection(a: interval__ref) : us_rep5 =
  (a).interval__content

type partition_index

predicate in_range9(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : partition_index, partition_index -> bool

logic dummy19 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref___projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

logic to_rep4 : partition_index -> int

logic of_rep4 : int -> partition_index

axiom inversion_axiom4 :
  (forall x:partition_index [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:partition_index [to_rep4(x)]. in_range9(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range9(x) ->
  (to_rep4(of_rep4(x)) = x)))

type element_type__ref1 = { element_type__content1 : us_rep5
}

function element_type__ref___8__projection(a: element_type__ref1) : us_rep5 =
  (a).element_type__content1

type capacity_range

predicate in_range10(x: int) = ((0 <= x) and (x <= 10001))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq16 : capacity_range, capacity_range -> bool

logic dummy20 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type4

logic us_main_eq4 : us_main_type4, us_main_type4 -> bool

type us_split_discrs2 = {
rec__partition_refinement__partitions__vector__capacity : capacity_range
}

function us_split_discrs___3__projection(a: us_split_discrs2) : capacity_range =
  (a).rec__partition_refinement__partitions__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields6 = { rec__partition_refinement__partitions__vector :
us_main_type4
}

function us_split_fields_Vector__projection(a: us_split_fields6) : us_main_type4 =
  (a).rec__partition_refinement__partitions__vector

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep6 = { us_split_discrs3 : us_split_discrs2; us_split_fields7 :
us_split_fields6
}

function us_rep___14__projection(a: us_rep6) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___15__projection(a: us_rep6) : us_split_fields6 =
  (a).us_split_fields7

logic value__size7 : int

logic object__size7 : us_rep6 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep6 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:capacity_range. forall a1:us_main_type4. (0 <= object__size7({
  us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields7 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:capacity_range. forall a1:us_main_type4.
  (0 <= object__alignment7({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields7 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit : int

logic partition_refinement__partitions__vector__capacity__last__bit : int

logic partition_refinement__partitions__vector__capacity__position : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom :
  (partition_refinement__partitions__vector__capacity__first__bit <  partition_refinement__partitions__vector__capacity__last__bit)

axiom partition_refinement__partitions__vector__capacity__position_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__position)

logic user_eq17 : us_rep6, us_rep6 -> bool

logic dummy21 : capacity_range

logic dummy22 : us_main_type4

type vector__ref = { vector__content : us_rep6
}

function vector__ref___projection(a: vector__ref) : us_rep6 =
  (a).vector__content

logic to_rep5 : capacity_range -> int

logic of_rep5 : int -> capacity_range

axiom inversion_axiom5 :
  (forall x:capacity_range [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:capacity_range [to_rep5(x)]. in_range10(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range10(x) ->
  (to_rep5(of_rep5(x)) = x)))

logic capacity__function_guard : int, us_rep6 -> prop

logic length3 : us_rep6 -> int

logic length__function_guard3 : int, us_rep6 -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type4
  [length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } })]. ((((of_int(1) = true) -> (length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= to_rep5(container))) and ((not (of_int(1) = true)) ->
  (length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= 10001))) and in_range10(length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } }))))

type element_type__ref2 = { element_type__content2 : us_rep5
}

function element_type__ref___9__projection(a: element_type__ref2) : us_rep5 =
  (a).element_type__content2

type us_main_type5

logic us_main_eq5 : us_main_type5, us_main_type5 -> bool

type us_rep7

logic bool_eq19 : us_rep7, us_rep7 -> bool

logic value__size8 : int

logic object__size8 : us_rep7 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep7 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (forall a:us_rep7. (0 <= object__size8(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:us_rep7. (0 <= object__alignment8(a)))

logic user_eq18 : us_rep7, us_rep7 -> bool

logic dummy23 : us_rep7

type sequence__ref1 = { sequence__content1 : us_rep7
}

function sequence__ref___3__projection(a: sequence__ref1) : us_rep7 =
  (a).sequence__content1

logic get3 : us_rep7, int -> us_rep5

logic get__function_guard3 : us_rep5, us_rep7, int -> prop

logic model__1 : us_rep6 -> us_rep7

logic model____function_guard1 : us_rep7, us_rep6 -> prop

logic element__function_guard2 : us_rep5, us_rep6, int -> prop

logic length4 : us_rep7 -> int

logic length__function_guard4 : int, us_rep7 -> prop

logic last__function_guard1 : int, us_rep7 -> prop

logic last_index__function_guard : int, us_rep6 -> prop

logic first_index__function_guard : int, us_rep6 -> prop

logic equal_except__function_guard1 : bool, us_rep7, us_rep7, int -> prop

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:capacity_range. forall a1:us_main_type4. (0 <= object__size9({
  us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields7 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:capacity_range. forall a1:us_main_type4.
  (0 <= object__alignment9({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields7 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit1 : int

logic partition_refinement__partitions__vector__capacity__last__bit1 : int

logic partition_refinement__partitions__vector__capacity__position1 : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit1)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom1 :
  (partition_refinement__partitions__vector__capacity__first__bit1 <  partition_refinement__partitions__vector__capacity__last__bit1)

axiom partition_refinement__partitions__vector__capacity__position_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__position1)

logic user_eq19 : us_rep6, us_rep6 -> bool

logic dummy24 : capacity_range

logic dummy25 : us_main_type4

type partition__ref = { partition__content : us_rep6
}

function partition__ref___projection(a: partition__ref) : us_rep6 =
  (a).partition__content

type map__ref4 = { map__content4 : (int,partition_index) farray
}

logic slide1 : (int,partition_index) farray, int,
  int -> (int,partition_index) farray

axiom slide_eq1 :
  (forall a:(int,partition_index) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,partition_index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> (int,partition_index) farray

axiom concat_def1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : partition_index, int -> (int,partition_index) farray

axiom singleton_def1 :
  (forall v:partition_index.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq20 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> bool

axiom bool_eq_def15 :
  (forall a:(int,partition_index) farray. forall a__first:int.
  forall a__last:int. forall b:(int,partition_index) farray.
  forall b__first:int. forall b__last:int [bool_eq20(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep4((a[temp___idx_134])) = to_rep4((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep4((a[temp___idx_134])) = to_rep4((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq20(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep4((a[temp___idx_134])) = to_rep4((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare1 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq20(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq20(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep4((a[(i + 1)])) <  to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq20(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep4((b[(i + 1)])) <  to_rep4((a[(j + 1)]))))))))))))

logic temp___881 : (int,positive) farray, int, int, int,
  int -> (int,positive) farray

axiom def_axiom :
  (forall temp___883:(int,positive) farray.
  (forall temp___884:int. forall temp___885:int. forall temp___886:int.
  forall temp___887:int.
  (forall temp___888:int. (((temp___888 = temp___886) ->
  ((temp___881(temp___883, temp___884, temp___885, temp___886,
  temp___887)[temp___888]) = of_rep(temp___887))) and
  ((not (temp___888 = temp___886)) -> (((temp___888 = temp___884) ->
  ((temp___881(temp___883, temp___884, temp___885, temp___886,
  temp___887)[temp___888]) = of_rep(temp___885))) and
  ((not (temp___888 = temp___884)) -> ((temp___881(temp___883, temp___884,
  temp___885, temp___886,
  temp___887)[temp___888]) = (temp___883[temp___888])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic d__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic p__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS2 : int

logic f : (int,partition_index) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic x_elem : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic a_old : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic a_update : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

logic temp___135 : (int,positive) farray, int, int, int,
  int -> (int,positive) farray

axiom def_axiom1 :
  (forall temp___137:(int,positive) farray.
  (forall temp___138:int. forall temp___139:int. forall temp___140:int.
  forall temp___141:int.
  (forall temp___142:int. (((temp___142 = temp___140) ->
  ((temp___135(temp___137, temp___138, temp___139, temp___140,
  temp___141)[temp___142]) = of_rep(temp___141))) and
  ((not (temp___142 = temp___140)) -> (((temp___142 = temp___138) ->
  ((temp___135(temp___137, temp___138, temp___139, temp___140,
  temp___141)[temp___142]) = of_rep(temp___139))) and
  ((not (temp___142 = temp___138)) -> ((temp___135(temp___137, temp___138,
  temp___139, temp___140,
  temp___141)[temp___142]) = (temp___137[temp___142])))))))))

axiom a_update__def_axiom : (a_update = temp___135(a_old, i,
  to_rep((a_old[j])), j, to_rep((a_old[i]))))

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS10 : int

axiom no_element__def_axiom : (no_element = of_rep3(0))

axiom length__post_axiom1 :
  (forall container:count_type. forall container1:us_main_type [length1({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. ((length1({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }) <= to_rep3(container)) and in_range4(length1({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length2(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. in_range4(length2(attr__tag, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))))

axiom find__post_axiom :
  (forall container:us_rep2.
  (forall key1:int [find(container, key1)]. (in_range7(key1) ->
  (((0 <  find(container, key1)) -> ((find(container,
  key1) <= length(container)) and ((not (bool_lt(key1, get(container,
  find(container, key1))) = true)) and ((bool_lt(key1, get(container,
  find(container, key1))) = false) -> (not (bool_lt(get(container,
  find(container, key1)), key1) = true)))))) and in_range4(find(container,
  key1))))))

logic length5 : us_rep3 -> int

logic length__function_guard5 : int, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

axiom model____post_axiom : true

logic length6 : us_rep4 -> int

logic length__function_guard6 : int, us_rep4 -> prop

logic is_empty1 : us_rep4 -> bool

logic is_empty__function_guard1 : bool, us_rep4 -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. ((not (has_key1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = no_element }
  }) = true)) and
  (forall i1:count_type. ((has_key1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = i1 } }) = true) ->
  (((1 <= get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = i1 } })) and
  (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = i1 }
  }) <= length1({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) and
  (forall j1:count_type. ((has_key1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = j1 } }) = true) ->
  ((get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = i1 }
  }) = get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = j1 } })) ->
  (bool_eq8({ us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = i1 } }, {
  us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = j1 } }) = true)))))))))

logic oeq3 : us_rep3, us_rep3 -> bool

logic oeq__function_guard4 : bool, us_rep3, us_rep3 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = left };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = left1 }
  }, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = right };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = right1
  } })]. ((oeq({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = left };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = left1 }
  }, { us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = right };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = right1
  } }) = true) <-> (oeq3(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = left };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = left1 }
  }), model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = right };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map = right1
  } })) = true)))

axiom oeq__post__dispatch_axiom : true

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key1:int [has_key(container, key1)]. (in_range5(key1) ->
  ((of_int(1) = true) ->
  ((exists k:int. ((in_range5(k) and (has_key(container, k) = true)) and
   ((bool_lt(k, key1) = false) and (bool_lt(key1, k) = false)))) ->
  (has_key(container, key1) = true))))))

type element_type1

predicate in_range11(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq20 : element_type1, element_type1 -> bool

logic dummy26 : element_type1

type element_type__ref3 = { element_type__content3 : element_type1
}

function element_type__ref___5__projection(a: element_type__ref3) : element_type1 =
  (a).element_type__content3

logic witness : us_rep3, int -> int

logic witness__function_guard : int, us_rep3, int -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall key1:int [get2(container, key1)]. ((in_range5(key1) and
  (has_key(container, key1) = true)) -> (((of_int(1) = true) ->
  ((get2(container, key1) = w_get(container, witness(container, key1))) and
  (forall k:int. ((in_range5(k) and (has_key(container, k) = true)) ->
  ((((bool_lt(k, key1) = false) and (bool_lt(key1, k) = false)) ->
  (witness(container, key1) = witness(container, k))) and
  ((witness(container, key1) = witness(container, k)) -> ((not (bool_lt(k,
  key1) = true)) and ((bool_lt(k, key1) = false) -> (not (bool_lt(key1,
  k) = true)))))))))) and in_range11(get2(container, key1))))))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length5(container)].
  in_range4(length5(container)))

axiom oeq__post_axiom1 :
  (forall left:us_rep3. forall right:us_rep3 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key1:int. ((in_range5(key1) and (has_key(left, key1) = true)) ->
   ((has_key(right, key1) = true) and (get2(right, key1) = get2(left,
   key1))))) and
  (forall key1:int. ((in_range5(key1) and (has_key(right, key1) = true)) ->
  (has_key(left, key1) = true))))))

axiom is_empty__post_axiom :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key1:int. (not (in_range5(key1) and (has_key(container,
  key1) = true))))))

axiom keys_included__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key1:int. ((in_range5(key1) and (has_key(left, key1) = true)) ->
  (has_key(right, key1) = true)))))

axiom elements_equal_except__post_axiom :
  (forall left:us_rep3. forall right:us_rep3.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (in_range5(new_key) -> (((elements_equal_except(left, right,
  new_key) = true) ->
  (forall key1:int. ((in_range5(key1) and (has_key(left, key1) = true)) ->
  ((not ((not (bool_lt(key1, new_key) = true)) and ((bool_lt(key1,
  new_key) = false) -> (not (bool_lt(new_key, key1) = true))))) ->
  ((has_key(right, key1) = true) and (get2(left, key1) = get2(right,
  key1))))))) and
  ((forall key1:int. ((in_range5(key1) and (has_key(left, key1) = true)) ->
   ((not ((bool_lt(key1, new_key) = false) and (bool_lt(new_key,
   key1) = false))) -> ((has_key(right, key1) = true) and (get2(left,
   key1) = get2(right, key1)))))) ->
  (elements_equal_except(left, right, new_key) = true))))))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key1:int [witness(container, key1)]. ((in_range5(key1) and
  (has_key(container, key1) = true)) -> ((has_witness(container,
  witness(container, key1)) = true) and in_range4(witness(container,
  key1))))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range4(witness1) and (has_witness(container, witness1) = true)) ->
  in_range11(w_get(container, witness1)))))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range4(length(container))))

type element_type2

predicate in_range12(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq21 : element_type2, element_type2 -> bool

logic dummy27 : element_type2

type element_type__ref4 = { element_type__content4 : element_type2
}

function element_type__ref___6__projection(a: element_type__ref4) : element_type2 =
  (a).element_type__content4

axiom get__post_axiom1 :
  (forall container:us_rep2.
  (forall position:int [get(container, position)]. ((in_range6(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range12(get(container, position)))))

axiom has_key__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:count_type [has_key1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } })].
  ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key1(container, { us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = k } }) = true) and
   (bool_eq8({ us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = k } }, {
   us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = key1 }
   }) = true))) ->
  (has_key1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true)))))

type element_type3

predicate in_range13(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq22 : element_type3, element_type3 -> bool

logic dummy28 : element_type3

type element_type__ref5 = { element_type__content5 : element_type3
}

function element_type__ref___7__projection(a: element_type__ref5) : element_type3 =
  (a).element_type__content5

logic witness1 : us_rep4, us_rep1 -> int

logic witness__function_guard1 : int, us_rep4, us_rep1 -> prop

logic w_get1 : us_rep4, int -> int

logic w_get__function_guard1 : int, us_rep4, int -> prop

axiom get__post_axiom2 :
  (forall container:us_rep4.
  (forall key1:count_type [get1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } })].
  ((has_key1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) -> (((of_int(0) = true) -> ((get1(container, {
  us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = w_get1(container, witness1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }))) and
  (forall k:count_type. ((has_key1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = k } }) = true) ->
  ((bool_eq8({ us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = k } }, {
  us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) <-> (witness1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = witness1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = k } }))))))) and
  in_range13(get1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }))))))

axiom length__post_axiom4 :
  (forall container:us_rep4 [length6(container)].
  in_range4(length6(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) <->
  ((forall key1:count_type. ((has_key1(left, { us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = key1 }
   }) = true) -> ((has_key1(right, { us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = key1 }
   }) = true) and (get1(right, { us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = key1 }
   }) = get1(left, { us_split_fields3 = {
   rec__partition_refinement__inverse_sets__cursor__node = key1 } }))))) and
  (forall key1:count_type. ((has_key1(right, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) -> (has_key1(left, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep4 [is_empty1(container)].
  ((is_empty1(container) = true) <->
  (forall key1:count_type. (not (has_key1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }) = true)))))

logic has_witness1 : us_rep4, int -> bool

logic has_witness__function_guard1 : bool, us_rep4, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:count_type [witness1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } })].
  ((has_key1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) -> ((has_witness1(container, witness1(container, {
  us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  })) = true) and in_range4(witness1(container, { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }))))))

axiom w_get__post_axiom1 :
  (forall container:us_rep4.
  (forall witness2:int [w_get1(container, witness2)].
  ((in_range4(witness2) and (has_witness1(container, witness2) = true)) ->
  in_range13(w_get1(container, witness2)))))

type extended_index1

predicate in_range14(x: int) = (((- 1) <= x) and (x <= 10001))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq23 : extended_index1, extended_index1 -> bool

logic dummy29 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___3__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

logic oeq__function_guard5 : bool, us_rep7, us_rep7 -> prop

axiom user_eq__def_axiom3 :
  (forall a:us_rep7. forall b:us_rep7 [user_eq18(a, b)].
  (((forall n:int. (((0 <= n) and (n <= ((- 1) + length4(a)))) ->
    (bool_eq16(get3(a, n), get3(b, n)) = true))) ->
  (user_eq18(a, b) = match_bool(bool_eq1(length4(a), length4(b)), true,
  false))) and
  ((not (forall n:int. (((0 <= n) and (n <= ((- 1) + length4(a)))) ->
        (bool_eq16(get3(a, n), get3(b, n)) = true)))) ->
  (user_eq18(a, b) = match_bool(bool_eq1(length4(a), length4(b)), false,
  false)))))

axiom model____post_axiom1 :
  (forall container:capacity_range. forall container1:us_main_type4
  [model__1({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } })]. (length4(model__1({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } })) = length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields7 = { rec__partition_refinement__partitions__vector =
  container1 } })))

type index_type

predicate in_range15(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq24 : index_type, index_type -> bool

logic dummy30 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___3__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index2

predicate in_range16(x: int) = (((- 1) <= x) and (x <= 10000))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq25 : extended_index2, extended_index2 -> bool

logic dummy31 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref___4__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

axiom length__post_axiom5 :
  (forall container:us_rep7 [length4(container)].
  ((((- 1) + length4(container)) <= 10000) and
  in_range4(length4(container))))

axiom get__post_axiom3 : true

logic a : (int,positive) farray

logic d__split_fields : us_main_type

logic p__split_fields : us_main_type4

logic p_elem__split_fields : index

logic p_elem__split_fields1 : index

logic p_elem__split_fields2 : index_count

logic c : count_type

logic o : bool

logic o1 : bool

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : partition_index

logic o6 : int

logic o7 : int

logic o8 : partition_index

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : bool

logic o13 : bool

logic o14 : int

logic o15 : int

logic o16 : partition_index

logic o17 : int

logic o18 : index

logic o19 : index

logic o20 : index_count

logic o21 : index

logic o22 : index

logic o23 : index_count

logic o24 : index

logic o25 : int

logic o26 : partition_index

logic o27 : int

logic o28 : index

logic o29 : index

logic o30 : index_count

logic o31 : index

logic o32 : index

logic o33 : index_count

logic o34 : index_count

logic o35 : int

logic o36 : int

logic o37 : int

logic us : int

logic o38 : int

logic o39 : partition_index

logic o40 : int

logic o41 : index

logic o42 : index

logic o43 : index_count

logic o44 : int

logic o45 : partition_index

logic o46 : int

logic o47 : index

logic o48 : index

logic o49 : index_count

logic o50 : int

logic us1 : int

logic partition_refinement__refine_one__i__assume : int

logic partition_refinement__refine_one__p_elem__assume : index

logic partition_refinement__refine_one__p_elem__assume1 : index

logic partition_refinement__refine_one__p_elem__assume2 : index_count

logic partition_refinement__refine_one__j__assume : int

logic c1 : count_type

logic o51 : bool

logic o52 : bool

logic o53 : int

logic o54 : bool

logic o55 : int

logic o56 : bool

logic o57 : bool

logic o58 : bool

logic o59 : int

logic o60 : int

logic c2 : count_type

logic o61 : bool

logic o62 : bool

logic o63 : int

logic o64 : bool

logic o65 : int

logic o66 : bool

logic o67 : bool

logic o68 : bool

logic o69 : int

logic o70 : int

logic c3 : count_type

logic o71 : bool

logic o72 : bool

logic o73 : int

logic o74 : int

logic o75 : int

logic c4 : count_type

logic o76 : bool

logic o77 : bool

logic o78 : int

logic o79 : bool

logic o80 : int

logic o81 : bool

logic o82 : bool

logic o83 : bool

logic o84 : int

logic o85 : int

logic c5 : count_type

logic o86 : bool

logic o87 : bool

logic o88 : int

logic o89 : int

logic o90 : int

logic c6 : count_type

logic o91 : bool

logic o92 : bool

logic o93 : int

logic o94 : int

logic o95 : int

logic c7 : count_type

logic o96 : bool

logic o97 : bool

logic o98 : int

logic o99 : int

logic o100 : int

logic o101 : index_count

logic o102 : index

logic o103 : index

logic o104 : index_count

logic temp___1187 : index

logic temp___11871 : index

logic temp___11872 : index_count

logic c8 : count_type

logic o105 : bool

logic o106 : bool

logic o107 : int

logic o108 : int

logic o109 : int

logic o110 : int

logic k : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : index

logic result6 : index

logic result7 : index_count

logic p_elem__split_fields3 : index

logic p_elem__split_fields4 : index

logic p_elem__split_fields5 : index_count

logic a1 : (int,positive) farray

logic result8 : bool

logic result9 : bool

logic partition_refinement__inverse_sets__replace__container__fields : us_main_type

logic result10 : us_main_type

logic d__split_fields1 : us_main_type

logic result11 : bool

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic partition_refinement__inverse_sets__replace__container__fields1 : us_main_type

logic result15 : us_main_type

logic d__split_fields2 : us_main_type

logic result16 : bool

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic result20 : bool

logic result21 : bool

logic result22 : bool

logic result23 : index

logic result24 : index

logic result25 : index_count

logic p_elem__split_fields6 : index

logic p_elem__split_fields7 : index

logic p_elem__split_fields8 : index_count

logic partition_refinement__partitions__replace_element__container__fields : us_main_type4

logic result26 : us_main_type4

logic p__split_fields1 : us_main_type4

logic a2 : (int,positive) farray

logic d__split_fields3 : us_main_type

logic p__split_fields2 : us_main_type4

logic p_elem__split_fields9 : index

logic p_elem__split_fields10 : index

logic p_elem__split_fields11 : index_count

logic a3 : (int,positive) farray

logic d__split_fields4 : us_main_type

logic p__split_fields3 : us_main_type4

logic p_elem__split_fields12 : index

logic p_elem__split_fields13 : index

logic p_elem__split_fields14 : index_count

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic result30 : bool

logic result31 : bool

axiom H : in_range1(x_elem)

axiom H1 : ((length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields7 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) <  10000) and ((has_key(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), x_elem) = true) and (((0 <= to_rep4((f[get2(model__({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), x_elem)]))) and (to_rep4((f[get2(model__({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), x_elem)])) <= (length3({ us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields7 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) - 1))) and
  ((forall j1:int. (((0 <= j1) and (j1 <= 5)) -> (has_key(model__({
   us_split_discrs1 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), to_rep((a[j1]))) = true))) and
  (forall c9:count_type. ((has_key1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 } }) = true) ->
  (to_rep((a[get2(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 }
  })))])) = get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 } })))))))))

axiom H2 : ((partition_refinement__refine_one__i__assume = get2(model__({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), x_elem)) and
  (in_range8(partition_refinement__refine_one__i__assume) and
  (partition_refinement__refine_one__i__assume = get2(model__({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), x_elem))))

axiom H3 : (partition_refinement__refine_one__i__assume = i)

axiom H4 : in_range3(i)

axiom H5 : (({ us_split_fields5 = {
  rec__partition_refinement__interval__first =
  partition_refinement__refine_one__p_elem__assume;
  rec__partition_refinement__interval__last =
  partition_refinement__refine_one__p_elem__assume1;
  rec__partition_refinement__interval__count =
  partition_refinement__refine_one__p_elem__assume2 } } = get3(model__1({
  us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields7 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }), to_rep4((f[i])))) and (bool_eq16({ us_split_fields5 =
  { rec__partition_refinement__interval__first =
  partition_refinement__refine_one__p_elem__assume;
  rec__partition_refinement__interval__last =
  partition_refinement__refine_one__p_elem__assume1;
  rec__partition_refinement__interval__count =
  partition_refinement__refine_one__p_elem__assume2 } }, get3(model__1({
  us_split_discrs3 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields7 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }), to_rep4((f[i])))) = true))

axiom H6 : ((result5 = p_elem__split_fields) and
  ((result6 = p_elem__split_fields1) and (result7 = p_elem__split_fields2)))

axiom H7 :
  ((p_elem__split_fields3 = partition_refinement__refine_one__p_elem__assume) and
  ((p_elem__split_fields4 = partition_refinement__refine_one__p_elem__assume1) and
  (p_elem__split_fields5 = partition_refinement__refine_one__p_elem__assume2)))

axiom H8 :
  in_range3((to_rep2(p_elem__split_fields3) + to_rep1(p_elem__split_fields5)))

axiom H9 :
  ((partition_refinement__refine_one__j__assume = (to_rep2(p_elem__split_fields3) + to_rep1(p_elem__split_fields5))) and
  in_range3((to_rep2(p_elem__split_fields3) + to_rep1(p_elem__split_fields5))))

axiom H10 : (partition_refinement__refine_one__j__assume = j)

axiom H11 : in_range3(j)

axiom H12 : (a = a_old)

axiom H13 : (temp___135(a_old, i, to_rep((a_old[j])), j,
  to_rep((a_old[i]))) = a_update)

axiom H14 : (bool_eq5(a1, 0, 5, temp___881(a, i, to_rep((a[j])), j,
  to_rep((a[i]))), 0, 5) = true)

axiom H15 : (bool_eq5(a1, 0, 5, a_update, 0, 5) = true)

axiom H16 :
  (forall c9:us_rep1. ((has_key1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), c9) = true) -> (((not (get(keys({ us_split_discrs1 =
  { rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
  }; us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), c9)) = to_rep((a1[i])))) and (not (get(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), c9)) = to_rep((a1[j]))))) ->
  (to_rep((a1[get2(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), c9)))])) = get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), c9))))))

axiom H17 :
  (forall j1:int. (((0 <= j1) and (j1 <= 5)) -> (has_key(model__({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), to_rep((a1[j1]))) = true)))

axiom H18 : ((((((oeq2(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } })) = true) and (get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  to_rep((a1[i])))) = to_rep((a1[i])))) and (((bool_eq1(length(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } })), length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields }
  }))) = true) ->
  (forall i1:int. (((1 <= i1) and (i1 <= (0 + length(keys({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }))))) -> ((not (i1 = find(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  to_rep((a1[i]))))) -> (get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), i1) = get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  i1)))))) and (not (bool_eq1(length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } })), length(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields }
  }))) = false)))) and (get2(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  to_rep((a1[i]))) = i)) and (match_bool(keys_included(model__({
  us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } })), keys_included(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } })),
  false) = true)) and (elements_equal_except(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  partition_refinement__inverse_sets__replace__container__fields } }),
  model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), to_rep((a1[i]))) = true))

axiom H19 : (result10 = d__split_fields)

axiom H20 :
  (d__split_fields1 = partition_refinement__inverse_sets__replace__container__fields)

axiom H21 : (bool_eq5(a1, 0, 5, a_update, 0, 5) = true)

logic c9 : count_type

axiom H22 : (has_key1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 } }) = true)

axiom H23 : (not (get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 }
  })) = to_rep((a1[i]))))

axiom H24 : (not (get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 }
  })) = to_rep((a1[j]))))

 (* File "partition_refinement.adb", line 14, characters 0-0 *)
goal WP_parameter_def : (to_rep((a1[get2(model__({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 }
  })))])) = get(keys({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields1 } }), { us_split_fields3 = {
  rec__partition_refinement__inverse_sets__cursor__node = c9 } })))
