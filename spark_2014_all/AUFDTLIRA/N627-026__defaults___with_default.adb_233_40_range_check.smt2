(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (positive) Int)
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__with_default__ok_nested_defaults__empty_rec1__d positive)))))
(define-fun us_split_discrs___11__projection ((a us_split_discrs)) positive (rec__with_default__ok_nested_defaults__empty_rec1__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___11__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (attr__constrained Bool)))))
(define-fun us_rep___31__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___32__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec1__d (us_split_discrs1 a))) (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec1__d (us_split_discrs1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const with_default__ok_nested_defaults__empty_rec1__d__first__bit Int)
(declare-const with_default__ok_nested_defaults__empty_rec1__d__last__bit Int)
(declare-const with_default__ok_nested_defaults__empty_rec1__d__position Int)
(assert (<= 0 with_default__ok_nested_defaults__empty_rec1__d__first__bit))
(assert (< with_default__ok_nested_defaults__empty_rec1__d__first__bit with_default__ok_nested_defaults__empty_rec1__d__last__bit))
(assert (<= 0 with_default__ok_nested_defaults__empty_rec1__d__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((empty_rec1__ref (mk_empty_rec1__ref (empty_rec1__content us_rep)))))
(define-fun empty_rec1__ref___projection ((a empty_rec1__ref)) us_rep (empty_rec1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep Int) (Array Int us_rep))
(assert (forall ((v us_rep)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_140 Int)) (=> (and (<= a__first temp___idx_140) (<= temp___idx_140 a__last)) (= (bool_eq (select a temp___idx_140) (select b (+ (- b__first a__first) temp___idx_140))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_140 Int)) (=> (and (<= a__first temp___idx_140) (<= temp___idx_140 a__last)) (= (bool_eq (select a temp___idx_140) (select b (+ (- b__first a__first) temp___idx_140))) true))))))))
(declare-const dummy3 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__with_default__ok_nested_defaults__non_init1__e (Array Int us_rep)) (rec__with_default__ok_nested_defaults__non_init1__f natural)))))
(define-fun us_split_fields_E__3__projection ((a us_split_fields)) (Array Int us_rep) (rec__with_default__ok_nested_defaults__non_init1__e a))
(define-fun us_split_fields_F__3__projection ((a us_split_fields)) natural (rec__with_default__ok_nested_defaults__non_init1__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___13__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___33__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq1 (rec__with_default__ok_nested_defaults__non_init1__e (us_split_fields1 a)) 1 0 (rec__with_default__ok_nested_defaults__non_init1__e (us_split_fields1 b)) 1 0) true) (= (to_rep (rec__with_default__ok_nested_defaults__non_init1__f (us_split_fields1 a))) (to_rep (rec__with_default__ok_nested_defaults__non_init1__f (us_split_fields1 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const with_default__ok_nested_defaults__non_init1__e__first__bit Int)
(declare-const with_default__ok_nested_defaults__non_init1__e__last__bit Int)
(declare-const with_default__ok_nested_defaults__non_init1__e__position Int)
(assert (<= 0 with_default__ok_nested_defaults__non_init1__e__first__bit))
(assert (< with_default__ok_nested_defaults__non_init1__e__first__bit with_default__ok_nested_defaults__non_init1__e__last__bit))
(assert (<= 0 with_default__ok_nested_defaults__non_init1__e__position))
(declare-const with_default__ok_nested_defaults__non_init1__f__first__bit Int)
(declare-const with_default__ok_nested_defaults__non_init1__f__last__bit Int)
(declare-const with_default__ok_nested_defaults__non_init1__f__position Int)
(assert (<= 0 with_default__ok_nested_defaults__non_init1__f__first__bit))
(assert (< with_default__ok_nested_defaults__non_init1__f__first__bit with_default__ok_nested_defaults__non_init1__f__last__bit))
(assert (<= 0 with_default__ok_nested_defaults__non_init1__f__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((non_init1__ref (mk_non_init1__ref (non_init1__content us_rep1)))))
(define-fun non_init1__ref___projection ((a non_init1__ref)) us_rep1 (non_init1__content a))
(define-fun dynamic_invariant1 ((temp___expr_567 us_rep1) (temp___is_init_564 Bool) (temp___skip_constant_565 Bool) (temp___do_toplevel_566 Bool)) Bool (forall ((temp___568 Int)) (=> (and (<= 1 temp___568) (<= temp___568 0)) (= (attr__constrained (select (rec__with_default__ok_nested_defaults__non_init1__e (us_split_fields1 temp___expr_567)) temp___568)) false))))
(define-fun default_initial_assumption ((temp___expr_570 us_rep1) (temp___skip_top_level_571 Bool)) Bool (forall ((temp___573 Int)) (=> (and (<= 1 temp___573) (<= temp___573 0)) (and (= (attr__constrained (select (rec__with_default__ok_nested_defaults__non_init1__e (us_split_fields1 temp___expr_570)) temp___573)) false) (= (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec1__d (us_split_discrs1 (select (rec__with_default__ok_nested_defaults__non_init1__e (us_split_fields1 temp___expr_570)) temp___573)))) c)))))
(declare-sort t37b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq5 (t37b t37b) Bool)
(declare-const dummy5 t37b)
(declare-datatypes () ((t37b__ref (mk_t37b__ref (t37b__content t37b)))))
(define-fun t37b__ref___projection ((a t37b__ref)) t37b (t37b__content a))
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__with_default__ok_nested_defaults__empty_rec2__d positive)))))
(define-fun us_split_discrs___12__projection ((a us_split_discrs2)) positive (rec__with_default__ok_nested_defaults__empty_rec2__d a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___12__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs3 us_split_discrs2) (attr__constrained1 Bool)))))
(define-fun us_rep___34__projection ((a us_rep2)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___35__projection ((a us_rep2)) Bool (attr__constrained1 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec2__d (us_split_discrs3 a))) (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec2__d (us_split_discrs3 b)))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const with_default__ok_nested_defaults__empty_rec2__d__first__bit Int)
(declare-const with_default__ok_nested_defaults__empty_rec2__d__last__bit Int)
(declare-const with_default__ok_nested_defaults__empty_rec2__d__position Int)
(assert (<= 0 with_default__ok_nested_defaults__empty_rec2__d__first__bit))
(assert (< with_default__ok_nested_defaults__empty_rec2__d__first__bit with_default__ok_nested_defaults__empty_rec2__d__last__bit))
(assert (<= 0 with_default__ok_nested_defaults__empty_rec2__d__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((empty_rec2__ref (mk_empty_rec2__ref (empty_rec2__content us_rep2)))))
(define-fun empty_rec2__ref___projection ((a empty_rec2__ref)) us_rep2 (empty_rec2__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))
(assert (forall ((v us_rep2)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_141 Int)) (=> (and (<= a__first temp___idx_141) (<= temp___idx_141 a__last)) (= (bool_eq3 (select a temp___idx_141) (select b (+ (- b__first a__first) temp___idx_141))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_141 Int)) (=> (and (<= a__first temp___idx_141) (<= temp___idx_141 a__last)) (= (bool_eq3 (select a temp___idx_141) (select b (+ (- b__first a__first) temp___idx_141))) true))))))))
(declare-const dummy7 (Array Int us_rep2))
(declare-const value__size4 Int)
(declare-fun object__size4 ((Array Int us_rep2)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int us_rep2)) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 ((Array Int us_rep2)) Int)
(assert (<= 0 value__size4))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size4 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment4 a))))
(declare-fun user_eq7 ((Array Int us_rep2) (Array Int us_rep2)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__with_default__ok_nested_defaults__non_init2__e (Array Int us_rep2)) (rec__with_default__ok_nested_defaults__non_init2__f natural)))))
(define-fun us_split_fields_E__4__projection ((a us_split_fields2)) (Array Int us_rep2) (rec__with_default__ok_nested_defaults__non_init2__e a))
(define-fun us_split_fields_F__4__projection ((a us_split_fields2)) natural (rec__with_default__ok_nested_defaults__non_init2__f a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___14__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___36__projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (bool_eq4 (rec__with_default__ok_nested_defaults__non_init2__e (us_split_fields3 a)) 1 100 (rec__with_default__ok_nested_defaults__non_init2__e (us_split_fields3 b)) 1 100) true) (= (to_rep (rec__with_default__ok_nested_defaults__non_init2__f (us_split_fields3 a))) (to_rep (rec__with_default__ok_nested_defaults__non_init2__f (us_split_fields3 b))))) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep3) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep3) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))
(declare-const with_default__ok_nested_defaults__non_init2__e__first__bit Int)
(declare-const with_default__ok_nested_defaults__non_init2__e__last__bit Int)
(declare-const with_default__ok_nested_defaults__non_init2__e__position Int)
(assert (<= 0 with_default__ok_nested_defaults__non_init2__e__first__bit))
(assert (< with_default__ok_nested_defaults__non_init2__e__first__bit with_default__ok_nested_defaults__non_init2__e__last__bit))
(assert (<= 0 with_default__ok_nested_defaults__non_init2__e__position))
(declare-const with_default__ok_nested_defaults__non_init2__f__first__bit Int)
(declare-const with_default__ok_nested_defaults__non_init2__f__last__bit Int)
(declare-const with_default__ok_nested_defaults__non_init2__f__position Int)
(assert (<= 0 with_default__ok_nested_defaults__non_init2__f__first__bit))
(assert (< with_default__ok_nested_defaults__non_init2__f__first__bit with_default__ok_nested_defaults__non_init2__f__last__bit))
(assert (<= 0 with_default__ok_nested_defaults__non_init2__f__position))
(declare-fun user_eq8 (us_rep3 us_rep3) Bool)
(declare-const dummy8 us_rep3)
(declare-datatypes () ((non_init2__ref (mk_non_init2__ref (non_init2__content us_rep3)))))
(define-fun non_init2__ref___projection ((a non_init2__ref)) us_rep3 (non_init2__content a))
(define-fun dynamic_invariant2 ((temp___expr_594 us_rep3) (temp___is_init_591 Bool) (temp___skip_constant_592 Bool) (temp___do_toplevel_593 Bool)) Bool (forall ((temp___595 Int)) (=> (and (<= 1 temp___595) (<= temp___595 100)) (= (attr__constrained1 (select (rec__with_default__ok_nested_defaults__non_init2__e (us_split_fields3 temp___expr_594)) temp___595)) false))))
(define-fun default_initial_assumption1 ((temp___expr_597 us_rep3) (temp___skip_top_level_598 Bool)) Bool (forall ((temp___600 Int)) (=> (and (<= 1 temp___600) (<= temp___600 100)) (and (= (attr__constrained1 (select (rec__with_default__ok_nested_defaults__non_init2__e (us_split_fields3 temp___expr_597)) temp___600)) false) (= (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec2__d (us_split_discrs3 (select (rec__with_default__ok_nested_defaults__non_init2__e (us_split_fields3 temp___expr_597)) temp___600)))) 1)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun default_initial_assumption2 ((temp___expr_555 us_rep) (temp___skip_top_level_556 Bool)) Bool (and (= (attr__constrained temp___expr_555) false) (= (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec1__d (us_split_discrs1 temp___expr_555))) c)))
(define-fun default_initial_assumption3 ((temp___expr_582 us_rep2) (temp___skip_top_level_583 Bool)) Bool (and (= (attr__constrained1 temp___expr_582) false) (= (to_rep1 (rec__with_default__ok_nested_defaults__empty_rec2__d (us_split_discrs3 temp___expr_582))) 1)))
(declare-const o Int)
(declare-const result Bool)
(assert (in_range c))
(assert (=> (<= 1 0) (= o (+ (- 0 1) 1))))
(assert (=> (not (<= 1 0)) (= o 0)))
(assert (= result (ite (< 0 o) true false)))
(assert (= result true))
(assert (not (in_range1 c)))
(check-sat)
(exit)
