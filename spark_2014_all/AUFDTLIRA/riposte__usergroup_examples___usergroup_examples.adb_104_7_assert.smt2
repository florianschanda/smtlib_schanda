(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_t index_t) Bool)
(declare-const dummy index_t)
(declare-datatypes () ((index_t__ref (mk_index_t__ref (index_t__content index_t)))))
(define-fun index_t__ref___projection ((a index_t__ref)) index_t (index_t__content a))
(define-fun dynamic_invariant ((temp___expr_171 Int) (temp___is_init_167 Bool) (temp___skip_constant_168 Bool) (temp___do_toplevel_169 Bool) (temp___do_typ_inv_170 Bool)) Bool (=> (or (= temp___is_init_167 true) (<= 1 100)) (in_range1 temp___expr_171)))
(declare-sort value_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (value_t value_t) Bool)
(declare-const dummy1 value_t)
(declare-datatypes () ((value_t__ref (mk_value_t__ref (value_t__content value_t)))))
(define-fun value_t__ref___projection ((a value_t__ref)) value_t (value_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_218 Int) (temp___is_init_214 Bool) (temp___skip_constant_215 Bool) (temp___do_toplevel_216 Bool) (temp___do_typ_inv_217 Bool)) Bool (=> (or (= temp___is_init_214 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_218)))
(declare-fun to_rep (value_t) Int)
(declare-fun of_rep (Int) value_t)
(assert (forall ((x value_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x value_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value_t))))))
(declare-fun slide ((Array Int value_t) Int Int) (Array Int value_t))
(assert (forall ((a (Array Int value_t))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value_t))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value_t)) (a__first Int) (a__last Int) (b (Array Int value_t)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int value_t)) (b (Array Int value_t))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__usergroup_examples__value_cache_t__cached Bool) (rec__usergroup_examples__value_cache_t__cache value_t)))))
(define-fun us_split_fields_Cached__projection ((a us_split_fields)) Bool (rec__usergroup_examples__value_cache_t__cached a))
(define-fun us_split_fields_Cache__projection ((a us_split_fields)) value_t (rec__usergroup_examples__value_cache_t__cache a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 a)) (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 b))) (= (to_rep (rec__usergroup_examples__value_cache_t__cache (us_split_fields1 a))) (to_rep (rec__usergroup_examples__value_cache_t__cache (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const usergroup_examples__value_cache_t__cached__first__bit Int)
(declare-const usergroup_examples__value_cache_t__cached__last__bit Int)
(declare-const usergroup_examples__value_cache_t__cached__position Int)
(assert (<= 0 usergroup_examples__value_cache_t__cached__first__bit))
(assert (< usergroup_examples__value_cache_t__cached__first__bit usergroup_examples__value_cache_t__cached__last__bit))
(assert (<= 0 usergroup_examples__value_cache_t__cached__position))
(declare-const usergroup_examples__value_cache_t__cache__first__bit Int)
(declare-const usergroup_examples__value_cache_t__cache__last__bit Int)
(declare-const usergroup_examples__value_cache_t__cache__position Int)
(assert (<= 0 usergroup_examples__value_cache_t__cache__first__bit))
(assert (< usergroup_examples__value_cache_t__cache__first__bit usergroup_examples__value_cache_t__cache__last__bit))
(assert (<= 0 usergroup_examples__value_cache_t__cache__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((value_cache_t__ref (mk_value_cache_t__ref (value_cache_t__content us_rep)))))
(define-fun value_cache_t__ref___projection ((a value_cache_t__ref)) us_rep (value_cache_t__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))) true))))))))
(declare-fun is_valid (Int) Bool)
(declare-fun is_valid__function_guard (Bool Int) Bool)
(assert true)
(declare-const va (Array Int value_t))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const vca (Array Int us_rep))
(declare-const v Int)
(declare-const o value_t)
(declare-const o1 Bool)
(declare-const o2 value_t)
(declare-const o3 Bool)
(declare-const o4 value_t)
(declare-const o5 (Array Int us_rep))
(declare-const vca1 (Array Int us_rep))
(declare-const result Int)
(declare-const v1 Int)
(declare-const result1 (Array Int us_rep))
(declare-const vca2 (Array Int us_rep))
(declare-const result2 (Array Int us_rep))
(declare-const vca3 (Array Int us_rep))
(declare-const result3 Int)
(declare-const v2 Int)
(define-fun v3 () int__ref (mk_int__ref v))
(assert (in_range1 i))
(assert (=> (<= (- 2147483648) 2147483647) (in_range2 v)))
(assert (and (forall ((x Int)) (=> (and (<= 1 x) (<= x 100)) (= (is_valid (to_rep (select va x))) true))) (forall ((y Int)) (=> (and (<= 1 y) (<= y 100)) (=> (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca y))) true) (= (to_rep (rec__usergroup_examples__value_cache_t__cache (us_split_fields1 (select vca y)))) (to_rep (select va y))))))))
(assert (=> (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true) (= (mk_int__ref result) v3)))
(assert (=> (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true) (= v1 (to_rep (rec__usergroup_examples__value_cache_t__cache (us_split_fields1 (select vca i)))))))
(assert (=> (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true) (= vca3 vca)))
(assert (=> (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true) (= vca3 vca1)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= (to_rep o) (to_rep (select va i)))))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) o1)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= o o2)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= o3 o1)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= o4 o2)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= o5 (store vca i (mk___rep (mk___split_fields o3 o4))))))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= (mk_map__ref1 result1) (mk_map__ref1 vca))))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= vca2 o5)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= vca2 result2)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= vca3 (store vca2 i (mk___rep (mk___split_fields (distinct 1 0) (rec__usergroup_examples__value_cache_t__cache (us_split_fields1 (select vca2 i)))))))))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= (mk_int__ref result3) v3)))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= v2 (to_rep (rec__usergroup_examples__value_cache_t__cache (us_split_fields1 (select vca3 i)))))))
(assert (=> (not (= (rec__usergroup_examples__value_cache_t__cached (us_split_fields1 (select vca i))) true)) (= v1 v2)))
(assert (not (= (is_valid (to_rep (select va i))) true)))
(check-sat)
(exit)
