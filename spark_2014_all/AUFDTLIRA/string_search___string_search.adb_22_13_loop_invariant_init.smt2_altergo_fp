(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,character) farray

logic dummy5 : t

type text__ref = { text__content : us_t
}

function text__ref___projection(a: text__ref) : us_t = (a).text__content

logic partial_match_at : us_t, us_t, int, int -> bool

logic partial_match_at__function_guard : bool, us_t, us_t, int, int -> prop

axiom partial_match_at__post_axiom : true

axiom partial_match_at__def_axiom :
  (forall needle:(int,character) farray. forall needle1:t.
  forall haystack:(int,character) farray. forall haystack1:t.
  (forall loc:int. forall len:int [partial_match_at({ elts = needle; rt =
  needle1 }, { elts = haystack; rt = haystack1 }, loc, len)].
  ((partial_match_at({ elts = needle; rt = needle1 }, { elts = haystack; rt =
  haystack1 }, loc, len) = true) <->
  (forall i:int. (((1 <= i) and (i <= len)) ->
  (to_rep((needle[i])) = to_rep((haystack[(loc + (i - 1))]))))))))

logic match_at : us_t, us_t, int -> bool

logic match_at__function_guard : bool, us_t, us_t, int -> prop

axiom match_at__post_axiom : true

axiom match_at__def_axiom :
  (forall needle:(int,character) farray. forall needle1:t.
  forall haystack:(int,character) farray. forall haystack1:t.
  (forall loc:int [match_at({ elts = needle; rt = needle1 }, { elts =
  haystack; rt = haystack1 }, loc)]. ((match_at({ elts = needle; rt = needle1
  }, { elts = haystack; rt = haystack1 }, loc) = true) <->
  (((loc - 1) <= (length({ elts = haystack; rt = haystack1 }) - length({
  elts = needle; rt = needle1 }))) and (partial_match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, loc, length({ elts =
  needle; rt = needle1 })) = true)))))

logic needle : (int,character) farray

logic needle1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic haystack : (int,character) farray

logic haystack1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t4b__ref = { t4b__content : integer
}

function t4b__ref___projection(a: t4b__ref) : integer = (a).t4b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic diff : bool

logic i : int

logic j : int

logic string_search__brute_force__result : int

logic temp___272 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic temp___273 : int

logic temp___271 : int

logic temp___270 : bool

logic temp___266 : int

logic temp___265 : bool

logic temp___264 : int

logic o5 : int

logic o6 : character

logic o7 : int

logic o8 : bool

logic o9 : bool

logic o10 : int

logic us : bool

logic temp___267 : int

logic o11 : int

logic o12 : character

logic o13 : int

logic temp___2641 : int

logic o14 : int

logic o15 : character

logic o16 : int

logic o17 : bool

logic o18 : bool

logic temp___2661 : int

logic temp___2651 : bool

logic temp___2642 : int

logic o19 : int

logic o20 : character

logic o21 : int

logic o22 : bool

logic o23 : bool

logic o24 : int

logic us1 : bool

logic temp___2671 : int

logic o25 : int

logic o26 : character

logic o27 : int

logic temp___2643 : int

logic o28 : int

logic o29 : character

logic o30 : int

logic o31 : bool

logic o32 : bool

logic o33 : int

logic k : int

logic o34 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic o39 : int

logic o40 : int

logic o41 : bool

logic diff1 : bool

logic j1 : int

logic string_search__brute_force__result1 : int

logic result : int

logic i1 : int

logic result1 : bool

logic diff2 : bool

logic result2 : int

logic j2 : int

logic result3 : bool

logic diff3 : bool

logic diff4 : bool

logic j3 : int

logic result4 : int

logic j4 : int

logic result5 : bool

logic diff5 : bool

logic diff6 : bool

logic j5 : int

logic diff7 : bool

logic j6 : int

logic diff8 : bool

logic j7 : int

logic diff9 : bool

logic j8 : int

logic diff10 : bool

logic j9 : int

logic diff11 : bool

logic j10 : int

logic diff12 : bool

logic j11 : int

logic diff13 : bool

logic j12 : int

logic result6 : int

logic string_search__brute_force__result2 : int

logic string_search__brute_force__result3 : int

logic string_search__brute_force__result4 : int

logic diff14 : bool

logic i2 : int

logic j13 : int

logic string_search__brute_force__result5 : int

logic result7 : int

logic i3 : int

logic result8 : bool

logic diff15 : bool

logic result9 : int

logic j14 : int

logic result10 : bool

logic diff16 : bool

logic diff17 : bool

logic j15 : int

logic result11 : int

logic j16 : int

logic result12 : bool

logic diff18 : bool

logic diff19 : bool

logic j17 : int

logic diff20 : bool

logic j18 : int

logic diff21 : bool

logic j19 : int

logic diff22 : bool

logic j20 : int

logic diff23 : bool

logic j21 : int

logic diff24 : bool

logic j22 : int

logic diff25 : bool

logic j23 : int

logic diff26 : bool

logic j24 : int

logic diff27 : bool

logic j25 : int

logic diff28 : bool

logic j26 : int

logic result13 : int

logic string_search__brute_force__result6 : int

logic string_search__brute_force__result7 : int

logic string_search__brute_force__result8 : int

logic diff29 : bool

logic i4 : int

logic j27 : int

logic string_search__brute_force__result9 : int

logic diff30 : bool

logic i5 : int

logic j28 : int

logic string_search__brute_force__result10 : int

logic diff31 : bool

logic i6 : int

logic j29 : int

logic string_search__brute_force__result11 : int

logic diff32 : bool

logic i7 : int

logic j30 : int

logic string_search__brute_force__result12 : int

logic diff33 : bool

logic i8 : int

logic j31 : int

logic string_search__brute_force__result13 : int

logic diff34 : bool

logic i9 : int

logic j32 : int

logic string_search__brute_force__result14 : int

logic diff35 : bool

logic i10 : int

logic j33 : int

logic string_search__brute_force__result15 : int

logic diff36 : bool

logic i11 : int

logic j34 : int

logic string_search__brute_force__result16 : int

logic diff37 : bool

logic i12 : int

logic j35 : int

logic string_search__brute_force__result17 : int

logic diff38 : bool

logic i13 : int

logic j36 : int

logic string_search__brute_force__result18 : int

logic result14 : int

logic string_search__brute_force__result19 : int

logic string_search__brute_force__result20 : int

logic string_search__brute_force__result21 : int

logic diff39 : bool

logic i14 : int

logic j37 : int

logic string_search__brute_force__result22 : int

logic diff40 : bool

logic i15 : int

logic j38 : int

logic string_search__brute_force__result23 : int

logic diff41 : bool

logic i16 : int

logic j39 : int

logic string_search__brute_force__result24 : int

logic diff42 : bool

logic i17 : int

logic j40 : int

logic string_search__brute_force__result25 : int

logic result15 : bool

axiom H : (dynamic_property(1, 2147483647, to_rep1(first(needle1)),
  to_rep1(last(needle1))) and (to_rep1(first(needle1)) = 1))

axiom H1 : (dynamic_property(1, 2147483647, to_rep1(first(haystack1)),
  to_rep1(last(haystack1))) and (to_rep1(first(haystack1)) = 1))

axiom H2 : ((1 <= length({ elts = needle; rt = needle1 })) and (length({
  elts = needle; rt = needle1 }) <= length({ elts = haystack; rt = haystack1
  })))

axiom H3 : ((o = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 })))

axiom H4 : ((o1 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 })))

axiom H5 : (o2 = (o1 - o))

axiom H6 : ((o3 = o2) and in_range1(o2))

axiom H7 : (o4 = (o3 + 1))

axiom H8 : ((temp___273 = o4) and in_range1(o4))

axiom H9 : (result = i)

axiom H10 : (i1 = 1)

axiom H11 : (1 <= i1)

axiom H12 : (i1 <= temp___273)

axiom H13 : (result1 = diff)

axiom H14 : (diff2 = of_int(0))

axiom H15 : (result2 = j)

axiom H16 : (j2 = to_rep1(first(needle1)))

axiom H17 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (temp___266 = j2))

axiom H18 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (temp___265 = diff2))

axiom H19 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> ((temp___264 = (j2 + (i1 - 1))) and
  in_range1((j2 + (i1 - 1)))))

axiom H20 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) ->
  ((to_rep1(first(haystack1)) <= temp___264) and
  (temp___264 <= to_rep1(last(haystack1)))))

axiom H21 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (o5 = temp___264))

axiom H22 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (o6 = (haystack[o5])))

axiom H23 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (o7 = to_rep(o6)))

axiom H24 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (((to_rep((needle[j2])) = o7) ->
  (o8 = true)) and ((not (to_rep((needle[j2])) = o7)) -> (o8 = false))))

axiom H25 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (((not (o8 = true)) -> (o9 = true)) and
  ((o8 = true) -> (o9 = false))))

axiom H26 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (diff2 = result3))

axiom H27 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (diff3 = o9))

axiom H28 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (((((j2 = j7) and (diff3 = diff8)) and
  ((j8 = j2) and (diff9 = diff3))) and (diff3 = true)) or
  ((not (diff3 = true)) and ((((j7 = j5) and (diff8 = diff6)) and
  ((j8 = j6) and (diff9 = diff7))) and (((partial_match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, i1, j3) = true) and
  ((diff4 = true) <->
  (not (to_rep((needle[j3])) = to_rep((haystack[(j3 + (i1 - 1))])))))) and
  ((((to_rep1(first(needle1)) <= to_rep1(last(needle1))) ->
  dynamic_property2(to_rep1(first(needle1)), to_rep1(last(needle1)), j3)) and
  ((to_rep1(first(needle1)) <= j3) and (j3 <= to_rep1(last(needle1))))) and
  (((((j3 = j5) and (diff4 = diff6)) and ((j6 = j3) and (diff7 = diff4))) and
  (j3 = to_rep1(last(needle1)))) or ((not (j3 = to_rep1(last(needle1)))) and
  ((((j4 = j5) and (diff5 = diff6)) and ((j6 = j4) and (diff7 = diff5))) and
  (((j3 = result4) and (j4 = (j3 + 1))) and
  (((((((((temp___2641 = (j4 + (i1 - 1))) and in_range1((j4 + (i1 - 1)))) and
  (((to_rep1(first(haystack1)) <= temp___2641) and
  (temp___2641 <= to_rep1(last(haystack1)))) and (o14 = temp___2641))) and
  (o15 = (haystack[o14]))) and (o16 = to_rep(o15))) and
  (((to_rep((needle[j4])) = o16) -> (o17 = true)) and
  ((not (to_rep((needle[j4])) = o16)) -> (o17 = false)))) and
  (((not (o17 = true)) -> (o18 = true)) and ((o17 = true) ->
  (o18 = false)))) and ((diff4 = result5) and (diff5 = o18))) and
  (diff5 = true))))))))))))

axiom H29 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (j9 = j7))

axiom H30 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (diff10 = diff8))

axiom H31 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (j10 = j8))

axiom H32 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (diff11 = diff9))

axiom H33 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (j11 = j9))

axiom H34 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (diff12 = diff10))

axiom H35 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (j12 = j10))

axiom H36 : (((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1)))) -> (diff13 = diff11))

axiom H37 : ((not ((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1))))) -> (j2 = j11))

axiom H38 : ((not ((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1))))) -> (diff2 = diff12))

axiom H39 : ((not ((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1))))) -> (j12 = j2))

axiom H40 : ((not ((to_rep1(first(needle1)) <= j2) and
  (j2 <= to_rep1(last(needle1))))) -> (diff13 = diff2))

axiom H41 : (diff12 = true)

axiom H42 :
  (string_search__brute_force__result3 = string_search__brute_force__result)

axiom H43 :
  (string_search__brute_force__result4 = string_search__brute_force__result1)

logic k1 : int

axiom H44 : (1 <= k1)

axiom H45 : (k1 <= i1)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (not (match_at({ elts = needle; rt = needle1 }, {
  elts = haystack; rt = haystack1 }, k1) = true))
