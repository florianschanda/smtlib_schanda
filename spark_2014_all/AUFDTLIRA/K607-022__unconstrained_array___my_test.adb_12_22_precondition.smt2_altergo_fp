(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type value

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : value, value -> bool

logic dummy6 : value

type value__ref = { value__content : value
}

function value__ref___projection(a: value__ref) : value = (a).value__content

logic to_rep3 : value -> int

logic of_rep3 : int -> value

axiom inversion_axiom3 :
  (forall x:value [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:value [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,value) farray
}

logic slide1 : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq1 :
  (forall a:(int,value) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,value) farray, int, int, (int,value) farray, int,
  int -> (int,value) farray

axiom concat_def1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : value, int -> (int,value) farray

axiom singleton_def1 :
  (forall v:value.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq9 : (int,value) farray, int, int, (int,value) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,value) farray. forall a__first:int. forall a__last:int.
  forall b:(int,value) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep3((a[temp___idx_132])) = to_rep3((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep3((a[temp___idx_132])) = to_rep3((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep3((a[temp___idx_132])) = to_rep3((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,value) farray, int, int, (int,value) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq9(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq9(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq9(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t3s__ref = { t3s__content : integer
}

function t3s__ref___projection(a: t3s__ref) : integer = (a).t3s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,value) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,value) farray = (a).elts1

function of_array1(a: (int,value) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,value) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,value) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,value) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,value) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,value) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,value) farray. (0 <= object__alignment1(a)))

function bool_eq11(x: us_t1, y: us_t1) : bool = bool_eq9((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,value) farray

logic dummy9 : t1

type t4s__ref = { t4s__content : us_t1
}

function t4s__ref___projection(a: t4s__ref) : us_t1 = (a).t4s__content

type us_split_discrs = { rec__simple_unc_arrays__table__last : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__simple_unc_arrays__table__last

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__simple_unc_arrays__table__v : us_t1
}

function us_split_fields_V__projection(a: us_split_fields) : us_t1 =
  (a).rec__simple_unc_arrays__table__v

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  ((((to_rep2(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs1).rec__simple_unc_arrays__table__last)) and
  (bool_eq11(((a).us_split_fields1).rec__simple_unc_arrays__table__v,
  ((b).us_split_fields1).rec__simple_unc_arrays__table__v) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs1).rec__simple_unc_arrays__table__last)) and
  (bool_eq11(((a).us_split_fields1).rec__simple_unc_arrays__table__v,
  ((b).us_split_fields1).rec__simple_unc_arrays__table__v) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } })))

logic simple_unc_arrays__table__last__first__bit : int

logic simple_unc_arrays__table__last__last__bit : int

logic simple_unc_arrays__table__last__position : int

axiom simple_unc_arrays__table__last__first__bit_axiom :
  (0 <= simple_unc_arrays__table__last__first__bit)

axiom simple_unc_arrays__table__last__last__bit_axiom :
  (simple_unc_arrays__table__last__first__bit <  simple_unc_arrays__table__last__last__bit)

axiom simple_unc_arrays__table__last__position_axiom :
  (0 <= simple_unc_arrays__table__last__position)

logic simple_unc_arrays__table__v__first__bit : int

logic simple_unc_arrays__table__v__last__bit : int

logic simple_unc_arrays__table__v__position : int

axiom simple_unc_arrays__table__v__first__bit_axiom :
  (0 <= simple_unc_arrays__table__v__first__bit)

axiom simple_unc_arrays__table__v__last__bit_axiom :
  (simple_unc_arrays__table__v__first__bit <  simple_unc_arrays__table__v__last__bit)

axiom simple_unc_arrays__table__v__position_axiom :
  (0 <= simple_unc_arrays__table__v__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy10 : natural

logic dummy11 : (int,value) farray

logic dummy12 : t1

type table__ref = { table__content : us_rep
}

function table__ref___projection(a: table__ref) : us_rep = (a).table__content

logic same_range : us_rep, us_rep -> bool

logic same_range__function_guard : bool, us_rep, us_rep -> prop

logic add : us_rep, us_rep -> us_rep

logic add__function_guard : us_rep, us_rep, us_rep -> prop

axiom add__post_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1.
  forall b:natural. forall b1:(int,value) farray. forall b2:t1 [add({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }, { us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } })]. ((((dynamic_property2(1, to_rep2(a), to_rep1(first2(a2)),
  to_rep1(last2(a2))) and ((to_rep1(first2(a2)) = 1) and
  (to_rep1(last2(a2)) = to_rep2(a)))) and (dynamic_property2(1, to_rep2(b),
  to_rep1(first2(b2)), to_rep1(last2(b2))) and ((to_rep1(first2(b2)) = 1) and
  (to_rep1(last2(b2)) = to_rep2(b))))) and (same_range({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } }) = true)) -> (((same_range(add({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } }), { us_split_discrs1 = { rec__simple_unc_arrays__table__last = a
  }; us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1;
  rt1 = a2 } } }) = true) and
  (forall j:int. (((1 <= j) and (j <= to_rep2(a))) -> (to_rep3(((((add({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }, { us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } }
  })).us_split_fields1).rec__simple_unc_arrays__table__v).elts1[j])) = (to_rep3((a1[j])) + to_rep3((b1[j]))))))) and
  (dynamic_property2(1, to_rep2(((add({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } })).us_split_discrs1).rec__simple_unc_arrays__table__last),
  to_rep1(first2((((add({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } })).us_split_fields1).rec__simple_unc_arrays__table__v).rt1)),
  to_rep1(last2((((add({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } })).us_split_fields1).rec__simple_unc_arrays__table__v).rt1))) and
  ((to_rep1(first2((((add({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } }
  })).us_split_fields1).rec__simple_unc_arrays__table__v).rt1)) = 1) and
  (to_rep1(last2((((add({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } }
  })).us_split_fields1).rec__simple_unc_arrays__table__v).rt1)) = to_rep2(((add({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }, { us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } })).us_split_discrs1).rec__simple_unc_arrays__table__last)))))))

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

logic min : us_rep -> int

logic min__function_guard : int, us_rep -> prop

axiom min__post_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1 [min({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } })]. (((dynamic_property2(1, to_rep2(a), to_rep1(first2(a2)),
  to_rep1(last2(a2))) and ((to_rep1(first2(a2)) = 1) and
  (to_rep1(last2(a2)) = to_rep2(a)))) and (not (empty({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } }
  }) = true))) ->
  (((forall j:int. (((1 <= j) and (j <= to_rep2(a))) -> (min({
    us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
    us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1;
    rt1 = a2 } } }) <= to_rep3((a1[j]))))) and
  (exists j:int. (((1 <= j) and (j <= to_rep2(a))) and (min({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }) = to_rep3((a1[j])))))) and in_range5(min({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } })))))

logic max : us_rep -> int

logic max__function_guard : int, us_rep -> prop

axiom max__post_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1 [max({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } })]. (((dynamic_property2(1, to_rep2(a), to_rep1(first2(a2)),
  to_rep1(last2(a2))) and ((to_rep1(first2(a2)) = 1) and
  (to_rep1(last2(a2)) = to_rep2(a)))) and (not (empty({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } }
  }) = true))) ->
  (((forall j:int. (((1 <= j) and (j <= to_rep2(a))) ->
    (to_rep3((a1[j])) <= max({ us_split_discrs1 = {
    rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
    rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } })))) and
  (exists j:int. (((1 <= j) and (j <= to_rep2(a))) and (max({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }) = to_rep3((a1[j])))))) and in_range5(max({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } })))))

logic average : us_rep -> int

logic average__function_guard : int, us_rep -> prop

axiom average__post_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1 [average({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } })]. (((dynamic_property2(1, to_rep2(a), to_rep1(first2(a2)),
  to_rep1(last2(a2))) and ((to_rep1(first2(a2)) = 1) and
  (to_rep1(last2(a2)) = to_rep2(a)))) and (not (empty({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } }
  }) = true))) -> (((min({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } }
  }) <= average({ us_split_discrs1 = { rec__simple_unc_arrays__table__last =
  a }; us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1;
  rt1 = a2 } } })) and (average({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }) <= max({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }))) and in_range5(average({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } })))))

logic not_in : us_rep, int, int, int -> bool

logic not_in__function_guard : bool, us_rep, int, int, int -> prop

logic search : us_rep, int -> int

logic search__function_guard : int, us_rep, int -> prop

axiom search__post_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1.
  (forall v:int [search({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, v)].
  (((dynamic_property2(1, to_rep2(a), to_rep1(first2(a2)),
  to_rep1(last2(a2))) and ((to_rep1(first2(a2)) = 1) and
  (to_rep1(last2(a2)) = to_rep2(a)))) and in_range5(v)) -> ((((search({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }, v) = 0) and (not_in({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, v, 1,
  to_rep2(a)) = true)) or ((to_rep3((a1[search({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } },
  v)])) = v) and (not_in({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, v, 1,
  (search({ us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }, v) - 1)) = true))) and in_range4(search({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, v))))))

logic bubble_sort : us_rep -> us_rep

logic bubble_sort__function_guard : us_rep, us_rep -> prop

type tT2bP1

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : tT2bP1, tT2bP1 -> bool

logic dummy13 : tT2bP1

type tT2bP1__ref = { tT2bP1__content : tT2bP1
}

function tT2bP1__ref___projection(a: tT2bP1__ref) : tT2bP1 =
  (a).tT2bP1__content

logic dummy14 : (int,value) farray

logic value__size3 : int

logic object__size3 : (int,value) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,value) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,value) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,value) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,value) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,value) farray. (0 <= object__alignment3(a)))

logic user_eq10 : (int,value) farray, (int,value) farray -> bool

type us_split_fields2 = { rec__simple_unc_arrays__table__v1 :
(int,value) farray
}

function us_split_fields_V__2__projection(a: us_split_fields2) : (int,value) farray =
  (a).rec__simple_unc_arrays__table__v1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__simple_unc_arrays__table__v =
  of_array1(((a).us_split_fields3).rec__simple_unc_arrays__table__v1, 1, 10)
  } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__simple_unc_arrays__table__v1 =
  to_array1(((r).us_split_fields1).rec__simple_unc_arrays__table__v) } }

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  ((((to_rep2(((a).us_split_discrs2).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs2).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields3).rec__simple_unc_arrays__table__v1, 1, 10,
  ((b).us_split_fields3).rec__simple_unc_arrays__table__v1, 1,
  10) = true)) -> (bool_eq14(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs2).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs2).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields3).rec__simple_unc_arrays__table__v1, 1, 10,
  ((b).us_split_fields3).rec__simple_unc_arrays__table__v1, 1,
  10) = true))) -> (bool_eq14(a, b) = false))))

predicate in_range7(rec__simple_unc_arrays__table__last1: int, a: us_rep) =
  (rec__simple_unc_arrays__table__last1 = to_rep2(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:(int,value) farray. (0 <= object__size4({
  us_split_discrs2 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields3 = { rec__simple_unc_arrays__table__v1 = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:(int,value) farray. (0 <= object__alignment4({
  us_split_discrs2 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields3 = { rec__simple_unc_arrays__table__v1 = a1 } })))

logic simple_unc_arrays__table__last__first__bit1 : int

logic simple_unc_arrays__table__last__last__bit1 : int

logic simple_unc_arrays__table__last__position1 : int

axiom simple_unc_arrays__table__last__first__bit_axiom1 :
  (0 <= simple_unc_arrays__table__last__first__bit1)

axiom simple_unc_arrays__table__last__last__bit_axiom1 :
  (simple_unc_arrays__table__last__first__bit1 <  simple_unc_arrays__table__last__last__bit1)

axiom simple_unc_arrays__table__last__position_axiom1 :
  (0 <= simple_unc_arrays__table__last__position1)

logic simple_unc_arrays__table__v__first__bit1 : int

logic simple_unc_arrays__table__v__last__bit1 : int

logic simple_unc_arrays__table__v__position1 : int

axiom simple_unc_arrays__table__v__first__bit_axiom1 :
  (0 <= simple_unc_arrays__table__v__first__bit1)

axiom simple_unc_arrays__table__v__last__bit_axiom1 :
  (simple_unc_arrays__table__v__first__bit1 <  simple_unc_arrays__table__v__last__bit1)

axiom simple_unc_arrays__table__v__position_axiom1 :
  (0 <= simple_unc_arrays__table__v__position1)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy15 : natural

logic dummy16 : (int,value) farray

type t1b__ref = { t1b__content : us_rep1
}

function t1b__ref___projection(a: t1b__ref) : us_rep1 = (a).t1b__content

logic t1__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS : int

type tT6bP1

predicate in_range8(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : tT6bP1, tT6bP1 -> bool

logic dummy17 : tT6bP1

type tT6bP1__ref = { tT6bP1__content : tT6bP1
}

function tT6bP1__ref___projection(a: tT6bP1__ref) : tT6bP1 =
  (a).tT6bP1__content

logic dummy18 : (int,value) farray

logic value__size5 : int

logic object__size5 : (int,value) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,value) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,value) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,value) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,value) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,value) farray. (0 <= object__alignment5(a)))

logic user_eq13 : (int,value) farray, (int,value) farray -> bool

type us_split_fields4 = { rec__simple_unc_arrays__table__v2 :
(int,value) farray
}

function us_split_fields_V__3__projection(a: us_split_fields4) : (int,value) farray =
  (a).rec__simple_unc_arrays__table__v2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___6__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = {
  rec__simple_unc_arrays__table__v =
  of_array1(((a).us_split_fields5).rec__simple_unc_arrays__table__v2, 1, 10)
  } }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__simple_unc_arrays__table__v2 =
  to_array1(((r).us_split_fields1).rec__simple_unc_arrays__table__v) } }

logic bool_eq16 : us_rep2, us_rep2 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq16(a, b)].
  ((((to_rep2(((a).us_split_discrs3).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs3).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields5).rec__simple_unc_arrays__table__v2, 1, 10,
  ((b).us_split_fields5).rec__simple_unc_arrays__table__v2, 1,
  10) = true)) -> (bool_eq16(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs3).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs3).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields5).rec__simple_unc_arrays__table__v2, 1, 10,
  ((b).us_split_fields5).rec__simple_unc_arrays__table__v2, 1,
  10) = true))) -> (bool_eq16(a, b) = false))))

predicate in_range9(rec__simple_unc_arrays__table__last1: int, a: us_rep) =
  (rec__simple_unc_arrays__table__last1 = to_rep2(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:natural. forall a1:(int,value) farray. (0 <= object__size6({
  us_split_discrs3 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields5 = { rec__simple_unc_arrays__table__v2 = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:natural. forall a1:(int,value) farray. (0 <= object__alignment6({
  us_split_discrs3 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields5 = { rec__simple_unc_arrays__table__v2 = a1 } })))

logic simple_unc_arrays__table__last__first__bit2 : int

logic simple_unc_arrays__table__last__last__bit2 : int

logic simple_unc_arrays__table__last__position2 : int

axiom simple_unc_arrays__table__last__first__bit_axiom2 :
  (0 <= simple_unc_arrays__table__last__first__bit2)

axiom simple_unc_arrays__table__last__last__bit_axiom2 :
  (simple_unc_arrays__table__last__first__bit2 <  simple_unc_arrays__table__last__last__bit2)

axiom simple_unc_arrays__table__last__position_axiom2 :
  (0 <= simple_unc_arrays__table__last__position2)

logic simple_unc_arrays__table__v__first__bit2 : int

logic simple_unc_arrays__table__v__last__bit2 : int

logic simple_unc_arrays__table__v__position2 : int

axiom simple_unc_arrays__table__v__first__bit_axiom2 :
  (0 <= simple_unc_arrays__table__v__first__bit2)

axiom simple_unc_arrays__table__v__last__bit_axiom2 :
  (simple_unc_arrays__table__v__first__bit2 <  simple_unc_arrays__table__v__last__bit2)

axiom simple_unc_arrays__table__v__position_axiom2 :
  (0 <= simple_unc_arrays__table__v__position2)

logic user_eq14 : us_rep2, us_rep2 -> bool

logic dummy19 : natural

logic dummy20 : (int,value) farray

type t5b__ref = { t5b__content : us_rep2
}

function t5b__ref___projection(a: t5b__ref) : us_rep2 = (a).t5b__content

logic t2__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS1 : int

type tT9bP1

predicate in_range10(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : tT9bP1, tT9bP1 -> bool

logic dummy21 : tT9bP1

type tT9bP1__ref = { tT9bP1__content : tT9bP1
}

function tT9bP1__ref___projection(a: tT9bP1__ref) : tT9bP1 =
  (a).tT9bP1__content

logic dummy22 : (int,value) farray

logic value__size7 : int

logic object__size7 : (int,value) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,value) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,value) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,value) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,value) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,value) farray. (0 <= object__alignment7(a)))

logic user_eq16 : (int,value) farray, (int,value) farray -> bool

type us_split_fields6 = { rec__simple_unc_arrays__table__v3 :
(int,value) farray
}

function us_split_fields_V__4__projection(a: us_split_fields6) : (int,value) farray =
  (a).rec__simple_unc_arrays__table__v3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs4 : us_split_discrs; us_split_fields7 :
us_split_fields6
}

function us_rep___7__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs4

function us_rep___8__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base2(a: us_rep3) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs4; us_split_fields1 = {
  rec__simple_unc_arrays__table__v =
  of_array1(((a).us_split_fields7).rec__simple_unc_arrays__table__v3, 1, 10)
  } }

function of_base2(r: us_rep) : us_rep3 = { us_split_discrs4 =
  (r).us_split_discrs1; us_split_fields7 = {
  rec__simple_unc_arrays__table__v3 =
  to_array1(((r).us_split_fields1).rec__simple_unc_arrays__table__v) } }

logic bool_eq18 : us_rep3, us_rep3 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq18(a, b)].
  ((((to_rep2(((a).us_split_discrs4).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs4).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields7).rec__simple_unc_arrays__table__v3, 1, 10,
  ((b).us_split_fields7).rec__simple_unc_arrays__table__v3, 1,
  10) = true)) -> (bool_eq18(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs4).rec__simple_unc_arrays__table__last) = to_rep2(((b).us_split_discrs4).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields7).rec__simple_unc_arrays__table__v3, 1, 10,
  ((b).us_split_fields7).rec__simple_unc_arrays__table__v3, 1,
  10) = true))) -> (bool_eq18(a, b) = false))))

predicate in_range11(rec__simple_unc_arrays__table__last1: int, a: us_rep) =
  (rec__simple_unc_arrays__table__last1 = to_rep2(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))

logic value__size8 : int

logic object__size8 : us_rep3 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep3 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:natural. forall a1:(int,value) farray. (0 <= object__size8({
  us_split_discrs4 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields7 = { rec__simple_unc_arrays__table__v3 = a1 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:natural. forall a1:(int,value) farray. (0 <= object__alignment8({
  us_split_discrs4 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields7 = { rec__simple_unc_arrays__table__v3 = a1 } })))

logic simple_unc_arrays__table__last__first__bit3 : int

logic simple_unc_arrays__table__last__last__bit3 : int

logic simple_unc_arrays__table__last__position3 : int

axiom simple_unc_arrays__table__last__first__bit_axiom3 :
  (0 <= simple_unc_arrays__table__last__first__bit3)

axiom simple_unc_arrays__table__last__last__bit_axiom3 :
  (simple_unc_arrays__table__last__first__bit3 <  simple_unc_arrays__table__last__last__bit3)

axiom simple_unc_arrays__table__last__position_axiom3 :
  (0 <= simple_unc_arrays__table__last__position3)

logic simple_unc_arrays__table__v__first__bit3 : int

logic simple_unc_arrays__table__v__last__bit3 : int

logic simple_unc_arrays__table__v__position3 : int

axiom simple_unc_arrays__table__v__first__bit_axiom3 :
  (0 <= simple_unc_arrays__table__v__first__bit3)

axiom simple_unc_arrays__table__v__last__bit_axiom3 :
  (simple_unc_arrays__table__v__first__bit3 <  simple_unc_arrays__table__v__last__bit3)

axiom simple_unc_arrays__table__v__position_axiom3 :
  (0 <= simple_unc_arrays__table__v__position3)

logic user_eq17 : us_rep3, us_rep3 -> bool

logic dummy23 : natural

logic dummy24 : (int,value) farray

type tt3S__ref = { tt3S__content : us_rep3
}

function tt3S__ref___projection(a: tt3S__ref) : us_rep3 = (a).tt3S__content

logic t3__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___292 : int, int, int, int, int, int, int, int, int,
  int -> (int,value) farray

axiom def_axiom :
  (forall temp___294:int. forall temp___295:int. forall temp___296:int.
  forall temp___297:int. forall temp___298:int. forall temp___299:int.
  forall temp___300:int. forall temp___301:int. forall temp___302:int.
  forall temp___303:int. (((((((((((temp___292(temp___294, temp___295,
  temp___296, temp___297, temp___298, temp___299, temp___300, temp___301,
  temp___302, temp___303)[1]) = of_rep3(temp___294)) and
  ((temp___292(temp___294, temp___295, temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302,
  temp___303)[2]) = of_rep3(temp___295))) and ((temp___292(temp___294,
  temp___295, temp___296, temp___297, temp___298, temp___299, temp___300,
  temp___301, temp___302, temp___303)[3]) = of_rep3(temp___296))) and
  ((temp___292(temp___294, temp___295, temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302,
  temp___303)[4]) = of_rep3(temp___297))) and ((temp___292(temp___294,
  temp___295, temp___296, temp___297, temp___298, temp___299, temp___300,
  temp___301, temp___302, temp___303)[5]) = of_rep3(temp___298))) and
  ((temp___292(temp___294, temp___295, temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302,
  temp___303)[6]) = of_rep3(temp___299))) and ((temp___292(temp___294,
  temp___295, temp___296, temp___297, temp___298, temp___299, temp___300,
  temp___301, temp___302, temp___303)[7]) = of_rep3(temp___300))) and
  ((temp___292(temp___294, temp___295, temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302,
  temp___303)[8]) = of_rep3(temp___301))) and ((temp___292(temp___294,
  temp___295, temp___296, temp___297, temp___298, temp___299, temp___300,
  temp___301, temp___302, temp___303)[9]) = of_rep3(temp___302))) and
  ((temp___292(temp___294, temp___295, temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302,
  temp___303)[10]) = of_rep3(temp___303))))

logic temp___305 : int, int, int, int, int, int, int, int, int,
  int -> (int,value) farray

axiom def_axiom1 :
  (forall temp___307:int. forall temp___308:int. forall temp___309:int.
  forall temp___310:int. forall temp___311:int. forall temp___312:int.
  forall temp___313:int. forall temp___314:int. forall temp___315:int.
  forall temp___316:int. (((((((((((temp___305(temp___307, temp___308,
  temp___309, temp___310, temp___311, temp___312, temp___313, temp___314,
  temp___315, temp___316)[1]) = of_rep3(temp___307)) and
  ((temp___305(temp___307, temp___308, temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315,
  temp___316)[2]) = of_rep3(temp___308))) and ((temp___305(temp___307,
  temp___308, temp___309, temp___310, temp___311, temp___312, temp___313,
  temp___314, temp___315, temp___316)[3]) = of_rep3(temp___309))) and
  ((temp___305(temp___307, temp___308, temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315,
  temp___316)[4]) = of_rep3(temp___310))) and ((temp___305(temp___307,
  temp___308, temp___309, temp___310, temp___311, temp___312, temp___313,
  temp___314, temp___315, temp___316)[5]) = of_rep3(temp___311))) and
  ((temp___305(temp___307, temp___308, temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315,
  temp___316)[6]) = of_rep3(temp___312))) and ((temp___305(temp___307,
  temp___308, temp___309, temp___310, temp___311, temp___312, temp___313,
  temp___314, temp___315, temp___316)[7]) = of_rep3(temp___313))) and
  ((temp___305(temp___307, temp___308, temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315,
  temp___316)[8]) = of_rep3(temp___314))) and ((temp___305(temp___307,
  temp___308, temp___309, temp___310, temp___311, temp___312, temp___313,
  temp___314, temp___315, temp___316)[9]) = of_rep3(temp___315))) and
  ((temp___305(temp___307, temp___308, temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315,
  temp___316)[10]) = of_rep3(temp___316))))

logic temp___String_Literal_321 : unit -> (int,character) farray

axiom temp___String_Literal_321__def_axiom :
  ((((((to_rep((temp___String_Literal_321(void)[1])) = 77) and
  (to_rep((temp___String_Literal_321(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_321(void)[3])) = 120)) and
  (to_rep((temp___String_Literal_321(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_321(void)[5])) = 61)) and
  (to_rep((temp___String_Literal_321(void)[6])) = 32))

logic temp___String_Literal_322 : unit -> (int,character) farray

axiom temp___String_Literal_322__def_axiom :
  ((((((to_rep((temp___String_Literal_322(void)[1])) = 77) and
  (to_rep((temp___String_Literal_322(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_322(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_322(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_322(void)[5])) = 61)) and
  (to_rep((temp___String_Literal_322(void)[6])) = 32))

logic temp___String_Literal_323 : unit -> (int,character) farray

axiom temp___String_Literal_323__def_axiom :
  ((((((((((to_rep((temp___String_Literal_323(void)[1])) = 65) and
  (to_rep((temp___String_Literal_323(void)[2])) = 118)) and
  (to_rep((temp___String_Literal_323(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_323(void)[4])) = 114)) and
  (to_rep((temp___String_Literal_323(void)[5])) = 97)) and
  (to_rep((temp___String_Literal_323(void)[6])) = 103)) and
  (to_rep((temp___String_Literal_323(void)[7])) = 101)) and
  (to_rep((temp___String_Literal_323(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_323(void)[9])) = 61)) and
  (to_rep((temp___String_Literal_323(void)[10])) = 32))

logic temp___String_Literal_324 : unit -> (int,character) farray

axiom temp___String_Literal_324__def_axiom :
  (((((((((((((to_rep((temp___String_Literal_324(void)[1])) = 70) and
  (to_rep((temp___String_Literal_324(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_324(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_324(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_324(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_324(void)[6])) = 48)) and
  (to_rep((temp___String_Literal_324(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_324(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_324(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_324(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_324(void)[11])) = 84)) and
  (to_rep((temp___String_Literal_324(void)[12])) = 49)) and
  (to_rep((temp___String_Literal_324(void)[13])) = 32))

logic temp___String_Literal_325 : unit -> (int,character) farray

axiom temp___String_Literal_325__def_axiom :
  (((((((((((((to_rep((temp___String_Literal_325(void)[1])) = 70) and
  (to_rep((temp___String_Literal_325(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_325(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_325(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_325(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_325(void)[6])) = 57)) and
  (to_rep((temp___String_Literal_325(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_325(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_325(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_325(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_325(void)[11])) = 84)) and
  (to_rep((temp___String_Literal_325(void)[12])) = 50)) and
  (to_rep((temp___String_Literal_325(void)[13])) = 32))

axiom empty__post_axiom : true

axiom empty__def_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1 [empty({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } })]. ((empty({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } }
  }) = true) <-> (to_rep2(a) <  1)))

axiom same_range__post_axiom : true

axiom same_range__def_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1.
  forall b:natural. forall b1:(int,value) farray. forall b2:t1 [same_range({
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = a };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 =
  a2 } } }, { us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } })]. ((same_range({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, {
  us_split_discrs1 = { rec__simple_unc_arrays__table__last = b };
  us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = b1; rt1 =
  b2 } } }) = true) <-> (to_rep2(a) = to_rep2(b))))

axiom not_in__post_axiom : true

axiom not_in__def_axiom :
  (forall a:natural. forall a1:(int,value) farray. forall a2:t1.
  (forall v:int. forall low:int. forall up:int [not_in({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = a }; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = { elts1 = a1; rt1 = a2 } } }, v, low,
  up)]. ((not_in({ us_split_discrs1 = { rec__simple_unc_arrays__table__last =
  a }; us_split_fields1 = { rec__simple_unc_arrays__table__v = { elts1 = a1;
  rt1 = a2 } } }, v, low, up) = true) <-> ((to_rep2(a) <  up) or
  (forall j:int. (((low <= j) and (j <= up)) ->
  (not (to_rep3((a1[j])) = v))))))))

 (* File "my_test.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall t1__split_fields:(int,value) farray. forall t1__split_fields1:t1.
  forall t2__split_fields:(int,value) farray. forall t2__split_fields1:t1.
  forall o:natural. forall o1:natural. forall o2:natural.
  forall o3:(int,value) farray. forall my_test__t1__assume:natural.
  forall my_test__t1__assume1:(int,value) farray.
  forall my_test__t1__assume2:t1. forall o4:natural. forall o5:natural.
  forall o6:natural. forall o7:(int,value) farray.
  forall my_test__t2__assume:natural.
  forall my_test__t2__assume1:(int,value) farray.
  forall my_test__t2__assume2:t1. forall us:int. forall o8:int.
  forall result:us_split_fields__ref.
  forall t1__split_fields2:us_split_fields.
  forall result1:us_split_fields__ref.
  forall t2__split_fields2:us_split_fields. ((((((to_rep2(o) = 10) and
  (o = o1)) and ((o2 = o1) and (temp___292(5, 1, 3, 0, 9, 8, 2, 7, 4,
  6) = o3))) and ((o2 = my_test__t1__assume) and
  ((o3 = my_test__t1__assume1) and (mk1(1, 10) = my_test__t1__assume2)))) and
  (((result = { us_split_fields__content = {
  rec__simple_unc_arrays__table__v = { elts1 = t1__split_fields; rt1 =
  t1__split_fields1 } } }) and (t1__split_fields2 = {
  rec__simple_unc_arrays__table__v = { elts1 = my_test__t1__assume1; rt1 =
  my_test__t1__assume2 } })) and
  (t1__split_discrs = my_test__t1__assume))) -> ((dynamic_property2(1,
  to_rep2(t1__split_discrs),
  to_rep1(first2(((t1__split_fields2).rec__simple_unc_arrays__table__v).rt1)),
  to_rep1(last2(((t1__split_fields2).rec__simple_unc_arrays__table__v).rt1))) and
  ((to_rep1(first2(((t1__split_fields2).rec__simple_unc_arrays__table__v).rt1)) = 1) and
  (to_rep1(last2(((t1__split_fields2).rec__simple_unc_arrays__table__v).rt1)) = to_rep2(t1__split_discrs)))) ->
  ((((((to_rep2(o4) = 10) and (o4 = o5)) and ((o6 = o5) and (temp___305(4, 8,
  6, 9, 0, 1, 7, 2, 5, 3) = o7))) and ((o6 = my_test__t2__assume) and
  ((o7 = my_test__t2__assume1) and (mk1(1, 10) = my_test__t2__assume2)))) and
  (((result1 = { us_split_fields__content = {
  rec__simple_unc_arrays__table__v = { elts1 = t2__split_fields; rt1 =
  t2__split_fields1 } } }) and (t2__split_fields2 = {
  rec__simple_unc_arrays__table__v = { elts1 = my_test__t2__assume1; rt1 =
  my_test__t2__assume2 } })) and
  (t2__split_discrs = my_test__t2__assume))) -> ((dynamic_property2(1,
  to_rep2(t2__split_discrs),
  to_rep1(first2(((t2__split_fields2).rec__simple_unc_arrays__table__v).rt1)),
  to_rep1(last2(((t2__split_fields2).rec__simple_unc_arrays__table__v).rt1))) and
  ((to_rep1(first2(((t2__split_fields2).rec__simple_unc_arrays__table__v).rt1)) = 1) and
  (to_rep1(last2(((t2__split_fields2).rec__simple_unc_arrays__table__v).rt1)) = to_rep2(t2__split_discrs)))) ->
  (((us = 10) and in_range4(10)) -> ((to_rep2(t3__split_discrs) = 10) ->
  ((10 = to_rep2(t3__split_discrs)) -> (((o8 = max({ us_split_discrs1 = {
  rec__simple_unc_arrays__table__last = t1__split_discrs };
  us_split_fields1 = t1__split_fields2 })) and (in_range5(o8) and
  ((forall j:int. (((1 <= j) and (j <= to_rep2(t1__split_discrs))) ->
   (to_rep3((((t1__split_fields2).rec__simple_unc_arrays__table__v).elts1[j])) <= o8))) and
  (exists j:int. (((1 <= j) and (j <= to_rep2(t1__split_discrs))) and
  (o8 = to_rep3((((t1__split_fields2).rec__simple_unc_arrays__table__v).elts1[j])))))))) ->
  (not (empty({ us_split_discrs1 = { rec__simple_unc_arrays__table__last =
  t1__split_discrs }; us_split_fields1 = t1__split_fields2
  }) = true)))))))))))
