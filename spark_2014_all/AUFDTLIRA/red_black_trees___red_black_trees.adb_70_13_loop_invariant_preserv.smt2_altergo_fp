(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tcount_typeB

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : extended_index_type, extended_index_type -> bool

logic dummy2 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : count_type, count_type -> bool

logic dummy4 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range4(length(container))))

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq7(a, b) = true)) and
  ((not ((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq7(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep

logic dummy6 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq8 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq7((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq7((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq8(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq7((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type position_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : position_type, position_type -> bool

logic dummy7 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range5(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range5(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : extended_index_type

logic dummy9 : extended_index_type

logic dummy10 : extended_index_type

logic dummy11 : position_type

type cell__ref = { cell__content : us_rep2
}

function cell__ref___projection(a: cell__ref) : us_rep2 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq11 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy12 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep2) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep2) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep3, us_rep3 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq12(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__size4({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy13 : extended_index_type

logic dummy14 : (int,us_rep2) farray

type forest__ref = { forest__content : us_rep3
}

function forest__ref___projection(a: forest__ref) : us_rep3 =
  (a).forest__content

type natural

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : natural, natural -> bool

logic dummy15 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : natural, int -> (int,natural) farray

axiom singleton_def2 :
  (forall v:natural.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq14 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq14(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq14(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq14(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq14(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic dummy16 : (int,natural) farray

logic value__size5 : int

logic object__size5 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,natural) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,natural) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,natural) farray. (0 <= object__alignment5(a)))

logic user_eq11 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields6 = { rec__search_trees__search_tree__root :
extended_index_type; rec__search_trees__search_tree__struct : us_rep3;
rec__search_trees__search_tree__values : (int,natural) farray
}

function us_split_fields_Root__projection(a: us_split_fields6) : extended_index_type =
  (a).rec__search_trees__search_tree__root

function us_split_fields_Struct__projection(a: us_split_fields6) : us_rep3 =
  (a).rec__search_trees__search_tree__struct

function us_split_fields_Values__projection(a: us_split_fields6) : (int,natural) farray =
  (a).rec__search_trees__search_tree__values

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq15 : us_rep4, us_rep4 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq15(a, b)].
  (((((to_rep(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq12(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq14(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true)) -> (bool_eq15(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq12(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq14(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true))) -> (bool_eq15(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep2) farray. forall a3:(int,natural) farray.
  (0 <= object__size6({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep2) farray. forall a3:(int,natural) farray.
  (0 <= object__alignment6({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

logic search_trees__search_tree__root__first__bit : int

logic search_trees__search_tree__root__last__bit : int

logic search_trees__search_tree__root__position : int

axiom search_trees__search_tree__root__first__bit_axiom :
  (0 <= search_trees__search_tree__root__first__bit)

axiom search_trees__search_tree__root__last__bit_axiom :
  (search_trees__search_tree__root__first__bit <  search_trees__search_tree__root__last__bit)

axiom search_trees__search_tree__root__position_axiom :
  (0 <= search_trees__search_tree__root__position)

logic search_trees__search_tree__struct__first__bit : int

logic search_trees__search_tree__struct__last__bit : int

logic search_trees__search_tree__struct__position : int

axiom search_trees__search_tree__struct__first__bit_axiom :
  (0 <= search_trees__search_tree__struct__first__bit)

axiom search_trees__search_tree__struct__last__bit_axiom :
  (search_trees__search_tree__struct__first__bit <  search_trees__search_tree__struct__last__bit)

axiom search_trees__search_tree__struct__position_axiom :
  (0 <= search_trees__search_tree__struct__position)

logic search_trees__search_tree__values__first__bit : int

logic search_trees__search_tree__values__last__bit : int

logic search_trees__search_tree__values__position : int

axiom search_trees__search_tree__values__first__bit_axiom :
  (0 <= search_trees__search_tree__values__first__bit)

axiom search_trees__search_tree__values__last__bit_axiom :
  (search_trees__search_tree__values__first__bit <  search_trees__search_tree__values__last__bit)

axiom search_trees__search_tree__values__position_axiom :
  (0 <= search_trees__search_tree__values__position)

logic user_eq12 : us_rep4, us_rep4 -> bool

logic dummy17 : extended_index_type

logic dummy18 : extended_index_type

logic dummy19 : (int,us_rep2) farray

logic dummy20 : (int,natural) farray

type search_tree__ref = { search_tree__content : us_rep4
}

function search_tree__ref___projection(a: search_tree__ref) : us_rep4 =
  (a).search_tree__content

logic size : us_rep4 -> int

logic size__function_guard : int, us_rep4 -> prop

logic size1 : us_rep3 -> int

logic size__function_guard1 : int, us_rep3 -> prop

logic valid_root : us_rep3, int -> bool

logic valid_root__function_guard : bool, us_rep3, int -> prop

logic tree_structure : us_rep3 -> bool

logic tree_structure__function_guard : bool, us_rep3 -> prop

logic ordered_leafs : us_rep3, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep3, int,
  (int,natural) farray -> prop

logic temp___390 : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___392:int.
  (forall temp___393:int.
  ((temp___390(temp___392)[temp___393]) = of_rep2(temp___392))))

axiom size__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep2) farray. forall t3:(int,natural) farray [size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> in_range3(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom size__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep2) farray. forall t3:(int,natural) farray [size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }))))

logic model__ : us_rep4 -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep4 -> prop

logic model__1 : us_rep3, int -> (int,us_rep1) farray

logic model____function_guard1 : (int,us_rep1) farray, us_rep3, int -> prop

axiom model____post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep2) farray. forall t3:(int,natural) farray [model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) ->
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))

axiom model____def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep2) farray. forall t3:(int,natural) farray [model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep(t)))))

logic peek : us_rep4, int, int -> int

logic peek__function_guard : int, us_rep4, int, int -> prop

type direction

predicate in_range7(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq13 : direction, direction -> bool

logic dummy21 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic peek1 : us_rep3, int, int -> int

logic peek__function_guard1 : int, us_rep3, int, int -> prop

axiom peek__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep2) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)]. ((((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and in_range7(d)) and ((not (size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0)) and ((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
  in_range3(peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)))))

axiom peek__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep2) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and in_range7(d)) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d) = peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i, d)))))

type color_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : color_type, color_type -> bool

logic dummy22 : color_type

type color_type__ref = { color_type__content : color_type
}

function color_type__ref___projection(a: color_type__ref) : color_type =
  (a).color_type__content

logic to_rep3 : color_type -> int

logic of_rep3 : int -> color_type

axiom inversion_axiom3 :
  (forall x:color_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:color_type [to_rep3(x)]. in_range8(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range8(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref3 = { map__content3 : (int,color_type) farray
}

logic slide3 : (int,color_type) farray, int, int -> (int,color_type) farray

axiom slide_eq3 :
  (forall a:(int,color_type) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,color_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> (int,color_type) farray

axiom concat_def3 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : color_type, int -> (int,color_type) farray

axiom singleton_def3 :
  (forall v:color_type.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq18 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> bool

axiom bool_eq_def16 :
  (forall a:(int,color_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,color_type) farray. forall b__first:int. forall b__last:int
  [bool_eq18(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)]))))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq18(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))))))))

logic compare1 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq18(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq18(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq18(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

logic dummy23 : (int,color_type) farray

logic value__size7 : int

logic object__size7 : (int,color_type) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,color_type) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,color_type) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,color_type) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,color_type) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,color_type) farray. (0 <= object__alignment7(a)))

logic user_eq15 : (int,color_type) farray, (int,color_type) farray -> bool

type us_split_fields8 = { rec__red_black_trees__rbt__struct : us_rep4;
rec__red_black_trees__rbt__color : (int,color_type) farray
}

function us_split_fields_Struct__2__projection(a: us_split_fields8) : us_rep4 =
  (a).rec__red_black_trees__rbt__struct

function us_split_fields_Color__projection(a: us_split_fields8) : (int,color_type) farray =
  (a).rec__red_black_trees__rbt__color

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___5__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq19 : us_rep5, us_rep5 -> bool

axiom bool_eq_def17 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq19(a, b)].
  ((((bool_eq15(((a).us_split_fields9).rec__red_black_trees__rbt__struct,
  ((b).us_split_fields9).rec__red_black_trees__rbt__struct) = true) and
  (bool_eq18(((a).us_split_fields9).rec__red_black_trees__rbt__color, 1, 100,
  ((b).us_split_fields9).rec__red_black_trees__rbt__color, 1,
  100) = true)) -> (bool_eq19(a, b) = true)) and
  ((not ((bool_eq15(((a).us_split_fields9).rec__red_black_trees__rbt__struct,
  ((b).us_split_fields9).rec__red_black_trees__rbt__struct) = true) and
  (bool_eq18(((a).us_split_fields9).rec__red_black_trees__rbt__color, 1, 100,
  ((b).us_split_fields9).rec__red_black_trees__rbt__color, 1,
  100) = true))) -> (bool_eq19(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep5 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep5 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep2) farray. forall a3:(int,natural) farray.
  forall a4:(int,color_type) farray. (0 <= object__size8({ us_split_fields9 =
  { rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } };
  rec__red_black_trees__rbt__color = a4 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep2) farray. forall a3:(int,natural) farray.
  forall a4:(int,color_type) farray. (0 <= object__alignment8({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } };
  rec__red_black_trees__rbt__color = a4 } })))

logic red_black_trees__rbt__struct__first__bit : int

logic red_black_trees__rbt__struct__last__bit : int

logic red_black_trees__rbt__struct__position : int

axiom red_black_trees__rbt__struct__first__bit_axiom :
  (0 <= red_black_trees__rbt__struct__first__bit)

axiom red_black_trees__rbt__struct__last__bit_axiom :
  (red_black_trees__rbt__struct__first__bit <  red_black_trees__rbt__struct__last__bit)

axiom red_black_trees__rbt__struct__position_axiom :
  (0 <= red_black_trees__rbt__struct__position)

logic red_black_trees__rbt__color__first__bit : int

logic red_black_trees__rbt__color__last__bit : int

logic red_black_trees__rbt__color__position : int

axiom red_black_trees__rbt__color__first__bit_axiom :
  (0 <= red_black_trees__rbt__color__first__bit)

axiom red_black_trees__rbt__color__last__bit_axiom :
  (red_black_trees__rbt__color__first__bit <  red_black_trees__rbt__color__last__bit)

axiom red_black_trees__rbt__color__position_axiom :
  (0 <= red_black_trees__rbt__color__position)

logic user_eq16 : us_rep5, us_rep5 -> bool

logic dummy24 : extended_index_type

logic dummy25 : extended_index_type

logic dummy26 : (int,us_rep2) farray

logic dummy27 : (int,natural) farray

logic dummy28 : (int,color_type) farray

type rbt__ref = { rbt__content : us_rep5
}

function rbt__ref___projection(a: rbt__ref) : us_rep5 = (a).rbt__content

logic invariant__ : us_rep5 -> bool

logic invariant____function_guard : bool, us_rep5 -> prop

logic temp___502 : int -> (int,color_type) farray

axiom def_axiom1 :
  (forall temp___504:int.
  (forall temp___505:int.
  ((temp___502(temp___504)[temp___505]) = of_rep3(temp___504))))

type us_split_fields10 = { rec__red_black_trees__black_count__status : bool;
rec__red_black_trees__black_count__depth : extended_index_type;
rec__red_black_trees__black_count__count : extended_index_type
}

function us_split_fields_Status__projection(a: us_split_fields10) : bool =
  (a).rec__red_black_trees__black_count__status

function us_split_fields_Depth__projection(a: us_split_fields10) : extended_index_type =
  (a).rec__red_black_trees__black_count__depth

function us_split_fields_Count__projection(a: us_split_fields10) : extended_index_type =
  (a).rec__red_black_trees__black_count__count

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep6 = { us_split_fields11 : us_split_fields10
}

function us_rep___6__projection(a: us_rep6) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq20 : us_rep6, us_rep6 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq20(a, b)].
  (((((((a).us_split_fields11).rec__red_black_trees__black_count__status = ((b).us_split_fields11).rec__red_black_trees__black_count__status) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__depth) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__depth))) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__count))) ->
  (bool_eq20(a, b) = true)) and
  ((not (((((a).us_split_fields11).rec__red_black_trees__black_count__status = ((b).us_split_fields11).rec__red_black_trees__black_count__status) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__depth) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__depth))) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__count)))) ->
  (bool_eq20(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:bool. forall a1:extended_index_type.
  forall a2:extended_index_type. (0 <= object__size9({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = a;
  rec__red_black_trees__black_count__depth = a1;
  rec__red_black_trees__black_count__count = a2 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:bool. forall a1:extended_index_type.
  forall a2:extended_index_type. (0 <= object__alignment9({
  us_split_fields11 = { rec__red_black_trees__black_count__status = a;
  rec__red_black_trees__black_count__depth = a1;
  rec__red_black_trees__black_count__count = a2 } })))

logic red_black_trees__black_count__status__first__bit : int

logic red_black_trees__black_count__status__last__bit : int

logic red_black_trees__black_count__status__position : int

axiom red_black_trees__black_count__status__first__bit_axiom :
  (0 <= red_black_trees__black_count__status__first__bit)

axiom red_black_trees__black_count__status__last__bit_axiom :
  (red_black_trees__black_count__status__first__bit <  red_black_trees__black_count__status__last__bit)

axiom red_black_trees__black_count__status__position_axiom :
  (0 <= red_black_trees__black_count__status__position)

logic red_black_trees__black_count__depth__first__bit : int

logic red_black_trees__black_count__depth__last__bit : int

logic red_black_trees__black_count__depth__position : int

axiom red_black_trees__black_count__depth__first__bit_axiom :
  (0 <= red_black_trees__black_count__depth__first__bit)

axiom red_black_trees__black_count__depth__last__bit_axiom :
  (red_black_trees__black_count__depth__first__bit <  red_black_trees__black_count__depth__last__bit)

axiom red_black_trees__black_count__depth__position_axiom :
  (0 <= red_black_trees__black_count__depth__position)

logic red_black_trees__black_count__count__first__bit : int

logic red_black_trees__black_count__count__last__bit : int

logic red_black_trees__black_count__count__position : int

axiom red_black_trees__black_count__count__first__bit_axiom :
  (0 <= red_black_trees__black_count__count__first__bit)

axiom red_black_trees__black_count__count__last__bit_axiom :
  (red_black_trees__black_count__count__first__bit <  red_black_trees__black_count__count__last__bit)

axiom red_black_trees__black_count__count__position_axiom :
  (0 <= red_black_trees__black_count__count__position)

logic user_eq17 : us_rep6, us_rep6 -> bool

logic dummy29 : bool

logic dummy30 : extended_index_type

logic dummy31 : extended_index_type

type black_count__ref = { black_count__content : us_rep6
}

function black_count__ref___projection(a: black_count__ref) : us_rep6 =
  (a).black_count__content

type map__ref4 = { map__content4 : (int,us_rep6) farray
}

logic slide4 : (int,us_rep6) farray, int, int -> (int,us_rep6) farray

axiom slide_eq4 :
  (forall a:(int,us_rep6) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep6) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,us_rep6) farray, int, int, (int,us_rep6) farray, int,
  int -> (int,us_rep6) farray

axiom concat_def4 :
  (forall a:(int,us_rep6) farray. forall b:(int,us_rep6) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : us_rep6, int -> (int,us_rep6) farray

axiom singleton_def4 :
  (forall v:bool. forall v1:extended_index_type.
  forall v2:extended_index_type.
  (forall i:int [(singleton4({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = v;
  rec__red_black_trees__black_count__depth = v1;
  rec__red_black_trees__black_count__count = v2 } }, i)[i])]. ((singleton4({
  us_split_fields11 = { rec__red_black_trees__black_count__status = v;
  rec__red_black_trees__black_count__depth = v1;
  rec__red_black_trees__black_count__count = v2 } }, i)[i]) = {
  us_split_fields11 = { rec__red_black_trees__black_count__status = v;
  rec__red_black_trees__black_count__depth = v1;
  rec__red_black_trees__black_count__count = v2 } })))

logic bool_eq21 : (int,us_rep6) farray, int, int, (int,us_rep6) farray, int,
  int -> bool

axiom bool_eq_def19 :
  (forall a:(int,us_rep6) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep6) farray. forall b__first:int. forall b__last:int
  [bool_eq21(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_136:int. ((((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) and (bool_eq20((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true)) or
  (not ((a__first <= temp___idx_136) and (temp___idx_136 <= a__last)))))) ->
  (bool_eq21(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) -> (bool_eq20((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true))))) -> (bool_eq21(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,us_rep6) farray. forall b:(int,us_rep6) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) -> (bool_eq20((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true)))))))

logic t : extended_index_type

logic t1 : extended_index_type

logic t2 : (int,us_rep2) farray

logic t3 : (int,natural) farray

logic t4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic m : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

type t8b

predicate in_range9(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq18 : t8b, t8b -> bool

logic dummy32 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref___projection(a: t8b__ref) : t8b = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic count_r : bool

logic count_r1 : extended_index_type

logic count_r2 : extended_index_type

logic attr__ATTRIBUTE_ADDRESS5 : int

logic count_l : bool

logic count_l1 : extended_index_type

logic count_l2 : extended_index_type

logic attr__ATTRIBUTE_ADDRESS6 : int

logic red_black_trees__nb_blacks__res__aggregate_def : us_rep6,
  us_rep6 -> (int,us_rep6) farray

axiom def_axiom2 :
  (forall temp___995:bool. forall temp___9951:extended_index_type.
  forall temp___9952:extended_index_type. forall temp___996:bool.
  forall temp___9961:extended_index_type.
  forall temp___9962:extended_index_type.
  (forall temp___997:int. (((temp___997 = 0) ->
  ((red_black_trees__nb_blacks__res__aggregate_def({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = temp___995;
  rec__red_black_trees__black_count__depth = temp___9951;
  rec__red_black_trees__black_count__count = temp___9952 } }, {
  us_split_fields11 = { rec__red_black_trees__black_count__status =
  temp___996; rec__red_black_trees__black_count__depth = temp___9961;
  rec__red_black_trees__black_count__count = temp___9962 }
  })[temp___997]) = { us_split_fields11 = {
  rec__red_black_trees__black_count__status = temp___995;
  rec__red_black_trees__black_count__depth = temp___9951;
  rec__red_black_trees__black_count__count = temp___9952 } })) and
  ((not (temp___997 = 0)) ->
  ((red_black_trees__nb_blacks__res__aggregate_def({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = temp___995;
  rec__red_black_trees__black_count__depth = temp___9951;
  rec__red_black_trees__black_count__count = temp___9952 } }, {
  us_split_fields11 = { rec__red_black_trees__black_count__status =
  temp___996; rec__red_black_trees__black_count__depth = temp___9961;
  rec__red_black_trees__black_count__count = temp___9962 }
  })[temp___997]) = { us_split_fields11 = {
  rec__red_black_trees__black_count__status = temp___996;
  rec__red_black_trees__black_count__depth = temp___9961;
  rec__red_black_trees__black_count__count = temp___9962 } })))))

logic nb_blacks : us_rep5 -> (int,us_rep6) farray

logic nb_blacks__function_guard : (int,us_rep6) farray, us_rep5 -> prop

axiom nb_blacks__post_axiom :
  (forall t5:extended_index_type. forall t6:extended_index_type.
  forall t7:(int,us_rep2) farray. forall t8:(int,natural) farray.
  forall t9:(int,color_type) farray [nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }) = 0) and (to_rep(t5) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }) = 0)) and
  (((not (to_rep(t5) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } },
  to_rep(t5)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } },
  to_rep(t5), t8) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }) = 0))) ->
  ((bool_eq20((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[0]), { us_split_fields11 = {
  rec__red_black_trees__black_count__status = of_int(1);
  rec__red_black_trees__black_count__depth = of_rep(0);
  rec__red_black_trees__black_count__count = of_rep(0) } }) = true) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__status = true) <->
  (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i,
  1)])).us_split_fields11).rec__red_black_trees__black_count__count))) and
  (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__depth) = (1 + max(to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth),
  to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth))))) and
  (((to_rep3((t9[i])) = 0) -> (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__count) = (1 + to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count)))) and
  ((not (to_rep3((t9[i])) = 0)) -> (to_rep((((nb_blacks({ us_split_fields9 =
  { rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__count) = (0 + to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count))))))))))))

axiom m__def_axiom : (m = model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))

logic same_nb_blacks : us_rep5 -> bool

logic same_nb_blacks__function_guard : bool, us_rep5 -> prop

axiom same_nb_blacks__post_axiom : true

axiom same_nb_blacks__def_axiom :
  (forall t5:extended_index_type. forall t6:extended_index_type.
  forall t7:(int,us_rep2) farray. forall t8:(int,natural) farray.
  forall t9:(int,color_type) farray [same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })]. ((same_nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } }) = true) <-> ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }) = 0) or
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__status = true)))))))

logic parent : us_rep4, int -> int

logic parent__function_guard : int, us_rep4, int -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall t5:extended_index_type. forall t6:extended_index_type.
  forall t7:(int,us_rep2) farray. forall t8:(int,natural) farray.
  forall t9:(int,color_type) farray [invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } })]. ((invariant__({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } }) = true) <->
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((parent({
   us_split_fields7 = { rec__search_trees__search_tree__root = t5;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
   rec__search_trees__search_tree__values = t8 } }, i) = 0) or
   (to_rep3((t9[parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t5;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
   rec__search_trees__search_tree__values = t8 } }, i)])) = 1)) ->
   (to_rep3((t9[i])) = 0)))) and
  (same_nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } };
  rec__red_black_trees__rbt__color = t9 } }) = true))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

logic parent1 : us_rep3, int -> int

logic parent__function_guard1 : int, us_rep3, int -> prop

axiom parent__post_axiom :
  (forall t5:extended_index_type. forall t6:extended_index_type.
  forall t7:(int,us_rep2) farray. forall t8:(int,natural) farray.
  (forall i:int [parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }) = 0) and (to_rep(t5) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }) = 0)) and
  (((not (to_rep(t5) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } },
  to_rep(t5)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } },
  to_rep(t5), t8) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 }
  }) = true)) and in_range2(i)) -> (((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }) = 0) -> (parent({
  us_split_fields7 = { rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i) = 0)) and
  in_range3(parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i))))))

axiom parent__def_axiom :
  (forall t5:extended_index_type. forall t6:extended_index_type.
  forall t7:(int,us_rep2) farray. forall t8:(int,natural) farray.
  (forall i:int [parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }) = 0) and (to_rep(t5) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }) = 0)) and
  (((not (to_rep(t5) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } },
  to_rep(t5)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } },
  to_rep(t5), t8) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 }
  }) = true)) and in_range2(i)) -> (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t5;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t6; rec__binary_trees__forest__c = t7 } };
  rec__search_trees__search_tree__values = t8 } }, i) = parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = t6;
  rec__binary_trees__forest__c = t7 } }, i)))))

axiom ordered_leafs__post_axiom : true

axiom size__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray [size1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range3(size1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) -> ((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i) -> (not (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true))))))

axiom parent__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) -> ((((valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true) -> (parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0)) and ((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) = 0) -> (parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0))) and in_range3(parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i))))))

logic position : us_rep3, int -> int

logic position__function_guard : int, us_rep3, int -> prop

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) and (not (parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range7(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom peek__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int. forall d:int [peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) and in_range7(d)) -> (((((not (peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = 0)) -> ((position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = d) and (parent1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = i))) and ((peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d) = 0) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((parent1({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i) -> (not (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = d))))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, j) = i) and (position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, j) = d)) -> (peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = j))))) and in_range3(peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d))))))

axiom model____post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int [model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(root)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent1({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent1({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent1({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) -> (is_add((((model__1({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) -> (length((((model__1({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

axiom tree_structure__post_axiom : true

type extended_index

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq19 : extended_index, extended_index -> bool

logic dummy33 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type element_type

predicate in_range11(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq20 : element_type, element_type -> bool

logic dummy34 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position1:int [get(container, position1)].
  ((in_range10(position1) and ((1 <= position1) and
  (position1 <= (0 + length(container))))) -> in_range11(get(container,
  position1)))))

logic res : (int,us_rep6) farray

logic n : int

logic i : int

logic red_black_trees__nb_blacks__result : (int,us_rep6) farray

logic o : extended_index_type

logic o1 : extended_index_type

logic o2 : bool

logic o3 : extended_index_type

logic o4 : extended_index_type

logic o5 : extended_index_type

logic o6 : extended_index_type

logic o7 : bool

logic o8 : extended_index_type

logic o9 : extended_index_type

logic o10 : bool

logic o11 : extended_index_type

logic o12 : extended_index_type

logic o13 : bool

logic o14 : extended_index_type

logic o15 : extended_index_type

logic o16 : (int,us_rep6) farray

logic red_black_trees__nb_blacks__m__assume : (int,us_rep1) farray

logic temp___1012 : (int,us_rep6) farray

logic temp___1011 : int

logic i1 : int

logic o17 : int

logic o18 : int

logic o19 : bool

logic o20 : extended_index_type

logic o21 : extended_index_type

logic o22 : bool

logic o23 : extended_index_type

logic o24 : extended_index_type

logic o25 : extended_index_type

logic o26 : int

logic o27 : int

logic o28 : bool

logic o29 : extended_index_type

logic o30 : extended_index_type

logic o31 : bool

logic o32 : extended_index_type

logic o33 : extended_index_type

logic o34 : extended_index_type

logic o35 : int

logic o36 : bool

logic o37 : extended_index_type

logic o38 : extended_index_type

logic o39 : bool

logic o40 : extended_index_type

logic o41 : extended_index_type

logic o42 : extended_index_type

logic o43 : int

logic o44 : int

logic o45 : int

logic o46 : int

logic o47 : int

logic o48 : bool

logic o49 : int

logic o50 : bool

logic o51 : extended_index_type

logic o52 : extended_index_type

logic o53 : bool

logic o54 : extended_index_type

logic o55 : extended_index_type

logic o56 : extended_index_type

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : bool

logic j : int

logic o62 : int

logic o63 : int

logic o64 : bool

logic o65 : extended_index_type

logic o66 : extended_index_type

logic o67 : bool

logic o68 : extended_index_type

logic o69 : extended_index_type

logic o70 : extended_index_type

logic o71 : int

logic temp___1005 : int

logic temp___1003 : (int,us_rep6) farray

logic j1 : int

logic o72 : int

logic o73 : bool

logic o74 : extended_index_type

logic o75 : extended_index_type

logic o76 : bool

logic o77 : extended_index_type

logic o78 : extended_index_type

logic o79 : extended_index_type

logic o80 : int

logic o81 : bool

logic j2 : int

logic o82 : int

logic o83 : bool

logic o84 : extended_index_type

logic o85 : extended_index_type

logic o86 : bool

logic o87 : extended_index_type

logic o88 : extended_index_type

logic o89 : extended_index_type

logic o90 : int

logic o91 : bool

logic j3 : int

logic o92 : int

logic o93 : us_rep

logic o94 : bool

logic o95 : us_rep

logic o96 : bool

logic o97 : int

logic o98 : bool

logic o99 : extended_index_type

logic o100 : extended_index_type

logic o101 : bool

logic o102 : extended_index_type

logic o103 : extended_index_type

logic o104 : extended_index_type

logic o105 : int

logic o106 : bool

logic o107 : bool

logic j4 : int

logic o108 : int

logic o109 : int

logic o110 : bool

logic o111 : extended_index_type

logic o112 : extended_index_type

logic o113 : bool

logic o114 : extended_index_type

logic o115 : extended_index_type

logic o116 : extended_index_type

logic o117 : int

logic o118 : int

logic o119 : bool

logic o120 : extended_index_type

logic o121 : extended_index_type

logic o122 : bool

logic o123 : extended_index_type

logic o124 : extended_index_type

logic o125 : extended_index_type

logic o126 : int

logic o127 : bool

logic o128 : extended_index_type

logic o129 : extended_index_type

logic o130 : bool

logic o131 : extended_index_type

logic o132 : extended_index_type

logic o133 : extended_index_type

logic o134 : int

logic o135 : int

logic o136 : int

logic o137 : int

logic o138 : int

logic o139 : bool

logic o140 : int

logic o141 : bool

logic o142 : extended_index_type

logic o143 : extended_index_type

logic o144 : bool

logic o145 : extended_index_type

logic o146 : extended_index_type

logic o147 : extended_index_type

logic o148 : int

logic o149 : int

logic o150 : int

logic o151 : int

logic o152 : bool

logic j5 : int

logic o153 : int

logic o154 : int

logic o155 : bool

logic o156 : extended_index_type

logic o157 : extended_index_type

logic o158 : bool

logic o159 : extended_index_type

logic o160 : extended_index_type

logic o161 : extended_index_type

logic o162 : int

logic j6 : int

logic o163 : int

logic o164 : int

logic o165 : bool

logic o166 : extended_index_type

logic o167 : extended_index_type

logic o168 : bool

logic o169 : extended_index_type

logic o170 : extended_index_type

logic o171 : extended_index_type

logic o172 : int

logic o173 : int

logic o174 : int

logic o175 : bool

logic o176 : extended_index_type

logic o177 : extended_index_type

logic o178 : bool

logic o179 : extended_index_type

logic o180 : extended_index_type

logic o181 : extended_index_type

logic o182 : int

logic o183 : int

logic o184 : us_rep

logic o185 : bool

logic o186 : us_rep

logic o187 : bool

logic o188 : int

logic red_black_trees__nb_blacks__B_3__count_r__assume : bool

logic red_black_trees__nb_blacks__B_3__count_r__assume1 : extended_index_type

logic red_black_trees__nb_blacks__B_3__count_r__assume2 : extended_index_type

logic o189 : int

logic red_black_trees__nb_blacks__B_3__count_l__assume : bool

logic red_black_trees__nb_blacks__B_3__count_l__assume1 : extended_index_type

logic red_black_trees__nb_blacks__B_3__count_l__assume2 : extended_index_type

logic o190 : extended_index_type

logic o191 : bool

logic o192 : extended_index_type

logic o193 : extended_index_type

logic o194 : bool

logic o195 : extended_index_type

logic o196 : extended_index_type

logic o197 : (int,us_rep6) farray

logic o198 : int

logic o199 : extended_index_type

logic o200 : bool

logic o201 : extended_index_type

logic o202 : extended_index_type

logic o203 : bool

logic o204 : extended_index_type

logic o205 : extended_index_type

logic o206 : (int,us_rep6) farray

logic o207 : extended_index_type

logic o208 : bool

logic o209 : extended_index_type

logic o210 : extended_index_type

logic o211 : bool

logic o212 : extended_index_type

logic o213 : extended_index_type

logic o214 : (int,us_rep6) farray

logic i2 : int

logic temp___1020 : (int,us_rep1) farray

logic o215 : us_rep

logic o216 : bool

logic o217 : us_rep

logic o218 : bool

logic o219 : int

logic o220 : int

logic o221 : bool

logic o222 : extended_index_type

logic o223 : extended_index_type

logic o224 : bool

logic o225 : extended_index_type

logic o226 : extended_index_type

logic o227 : extended_index_type

logic o228 : int

logic o229 : int

logic o230 : bool

logic o231 : extended_index_type

logic o232 : extended_index_type

logic o233 : bool

logic o234 : extended_index_type

logic o235 : extended_index_type

logic o236 : extended_index_type

logic o237 : int

logic o238 : bool

logic o239 : extended_index_type

logic o240 : extended_index_type

logic o241 : bool

logic o242 : extended_index_type

logic o243 : extended_index_type

logic o244 : extended_index_type

logic o245 : int

logic o246 : int

logic o247 : int

logic o248 : int

logic o249 : int

logic o250 : bool

logic o251 : int

logic o252 : bool

logic o253 : extended_index_type

logic o254 : extended_index_type

logic o255 : bool

logic o256 : extended_index_type

logic o257 : extended_index_type

logic o258 : extended_index_type

logic o259 : int

logic o260 : int

logic o261 : int

logic o262 : int

logic o263 : bool

logic i3 : int

logic result : (int,us_rep6) farray

logic res1 : (int,us_rep6) farray

logic result1 : int

logic n1 : int

logic res2 : (int,us_rep6) farray

logic n2 : int

logic i4 : int

logic result2 : bool

logic result3 : int

logic i5 : int

logic res3 : (int,us_rep6) farray

logic i6 : int

logic result4 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : (int,us_rep6) farray

logic res4 : (int,us_rep6) farray

logic result10 : (int,us_rep6) farray

logic res5 : (int,us_rep6) farray

logic result11 : (int,us_rep6) farray

logic res6 : (int,us_rep6) farray

logic result12 : (int,us_rep6) farray

logic res7 : (int,us_rep6) farray

logic result13 : int

logic i7 : int

logic res8 : (int,us_rep6) farray

logic i8 : int

logic res9 : (int,us_rep6) farray

logic i9 : int

logic res10 : (int,us_rep6) farray

logic i10 : int

logic res11 : (int,us_rep6) farray

logic i11 : int

logic result14 : int

logic n3 : int

logic res12 : (int,us_rep6) farray

logic n4 : int

logic i12 : int

logic res13 : (int,us_rep6) farray

logic n5 : int

logic i13 : int

logic res14 : (int,us_rep6) farray

logic n6 : int

logic i14 : int

logic res15 : (int,us_rep6) farray

logic n7 : int

logic i15 : int

logic res16 : (int,us_rep6) farray

logic n8 : int

logic i16 : int

logic res17 : (int,us_rep6) farray

logic n9 : int

logic i17 : int

logic result15 : (int,us_rep6) farray

logic red_black_trees__nb_blacks__result1 : (int,us_rep6) farray

logic red_black_trees__nb_blacks__result2 : (int,us_rep6) farray

logic red_black_trees__nb_blacks__result3 : (int,us_rep6) farray

logic res18 : (int,us_rep6) farray

logic n10 : int

logic i18 : int

logic red_black_trees__nb_blacks__result4 : (int,us_rep6) farray

logic res19 : (int,us_rep6) farray

logic n11 : int

logic i19 : int

logic red_black_trees__nb_blacks__result5 : (int,us_rep6) farray

logic result16 : bool

axiom H : ((((size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) -> (to_rep(t) = 0)) and
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) -> (((not (to_rep(t) = 0)) and
  (valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep(t)) = true)) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep(t), t3) = true)))) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true))

axiom H1 : (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))

axiom H2 : (to_rep(o5) = 100)

axiom H3 : (to_rep(o6) = 100)

axiom H4 : (of_int(0) = o7)

axiom H5 : (o6 = o8)

axiom H6 : (o5 = o9)

axiom H7 : (o10 = o7)

axiom H8 : (o11 = o8)

axiom H9 : (o12 = o9)

axiom H10 : (to_rep(o) = 0)

axiom H11 : (to_rep(o1) = 0)

axiom H12 : (of_int(1) = o2)

axiom H13 : (o1 = o3)

axiom H14 : (o = o4)

axiom H15 : (o13 = o2)

axiom H16 : (o14 = o3)

axiom H17 : (o15 = o4)

axiom H18 : (o16 = red_black_trees__nb_blacks__res__aggregate_def({
  us_split_fields11 = { rec__red_black_trees__black_count__status = o13;
  rec__red_black_trees__black_count__depth = o14;
  rec__red_black_trees__black_count__count = o15 } }, { us_split_fields11 = {
  rec__red_black_trees__black_count__status = o10;
  rec__red_black_trees__black_count__depth = o11;
  rec__red_black_trees__black_count__count = o12 } }))

axiom H19 : (result = res)

axiom H20 : (res1 = o16)

axiom H21 : ((red_black_trees__nb_blacks__m__assume = model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })) and
  ((forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
   (length((((red_black_trees__nb_blacks__m__assume[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (red_black_trees__nb_blacks__m__assume = model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)))))

axiom H22 : (red_black_trees__nb_blacks__m__assume = m)

axiom H23 :
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((m[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))

axiom H24 : (result1 = n)

axiom H25 : (n1 = 0)

axiom H26 : (0 <= n1)

axiom H27 : (n1 <= 99)

axiom H28 : (bool_eq20((res2[0]), { us_split_fields11 = {
  rec__red_black_trees__black_count__status = of_int(1);
  rec__red_black_trees__black_count__depth = of_rep(0);
  rec__red_black_trees__black_count__count = of_rep(0) } }) = true)

axiom H29 :
  (forall i20:int. (((1 <= i20) and (i20 <= 100)) ->
  (to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__count) <= to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth))))

axiom H30 :
  (forall i20:int. (((1 <= i20) and (i20 <= 100)) ->
  ((to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth) = 100) or
  (to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2))))

axiom H31 :
  (forall i20:int. (((1 <= i20) and (i20 <= 100)) ->
  (((((((m[i20])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (n2 <  to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth))) ->
  (length((((m[i20])).us_split_fields1).rec__tree_model__path_type__a) <  (100 - n2))) and
  ((not (((((m[i20])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (n2 <  to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth)))) ->
  (((((m[i20])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2) and
  (((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__status = true) <->
  (to_rep((((res2[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i20,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep((((res2[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i20,
  1)])).us_split_fields11).rec__red_black_trees__black_count__count)))) and
  (to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__depth) = (1 + max(to_rep((((res2[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i20,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth),
  to_rep((((res2[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i20,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth))))) and
  (((to_rep3((t4[i20])) = 0) ->
  (to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__count) = (1 + to_rep((((res2[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i20,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count)))) and
  ((not (to_rep3((t4[i20])) = 0)) ->
  (to_rep((((res2[i20])).us_split_fields11).rec__red_black_trees__black_count__count) = (0 + to_rep((((res2[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i20,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count)))))))))))

axiom H32 :
  (forall j7:int. (((1 <= j7) and (j7 <= 100)) ->
  (((((((m[j7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (to_rep((((res2[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth) <  n2)) and
  (to_rep((((res2[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth) <  n2)) ->
  (to_rep((((res2[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2))))

axiom H33 : (((0 <= 99) -> in_range9(n2)) and ((0 <= n2) and (n2 <= 99)))

axiom H34 : (result3 = i4)

axiom H35 : (i5 = 1)

axiom H36 : (((1 <= i5) and (i5 <= 100)) -> (temp___1005 = i5))

axiom H37 : (((1 <= i5) and (i5 <= 100)) -> (temp___1003 = res2))

axiom H38 : (((1 <= i5) and (i5 <= 100)) -> (bool_eq20((res3[0]), {
  us_split_fields11 = { rec__red_black_trees__black_count__status =
  of_int(1); rec__red_black_trees__black_count__depth = of_rep(0);
  rec__red_black_trees__black_count__count = of_rep(0) } }) = true))

axiom H39 : (((1 <= i5) and (i5 <= 100)) ->
  (forall i20:int. (((1 <= i20) and (i20 <= 100)) ->
  (to_rep((((res3[i20])).us_split_fields11).rec__red_black_trees__black_count__count) <= to_rep((((res3[i20])).us_split_fields11).rec__red_black_trees__black_count__depth)))))

axiom H40 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((1 <= j7) and (j7 <= (i6 - 1))) ->
  ((to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) = 100) or
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) <= (n2 + 1))))))

axiom H41 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((i6 <= j7) and (j7 <= 100)) ->
  ((to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) = 100) or
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2)))))

axiom H42 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((1 <= j7) and (j7 <= 100)) ->
  ((((((m[j7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (n2 <  to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth))) ->
  (length((((m[j7])).us_split_fields1).rec__tree_model__path_type__a) <  (100 - n2))))))

axiom H43 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((1 <= j7) and (j7 <= (i6 - 1))) ->
  ((((((m[j7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((n2 + 1) <  to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth))) ->
  (length((((m[j7])).us_split_fields1).rec__tree_model__path_type__a) <  (100 - (n2 + 1)))))))

axiom H44 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((1 <= j7) and (j7 <= 100)) ->
  ((((((m[j7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2) or
  ((j7 <  i6) and
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) = (n2 + 1))))) ->
  (((((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__status = true) <->
  (to_rep((((res3[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep((((res3[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  1)])).us_split_fields11).rec__red_black_trees__black_count__count))) and
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) = (1 + max(to_rep((((res3[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth),
  to_rep((((res3[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth))))) and
  (((to_rep3((t4[j7])) = 0) ->
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__count) = (1 + to_rep((((res3[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count)))) and
  ((not (to_rep3((t4[j7])) = 0)) ->
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__count) = (0 + to_rep((((res3[peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count))))))))))

axiom H45 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((1 <= j7) and (j7 <= 100)) ->
  (((((((m[j7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (to_rep((((res3[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth) <  n2)) and
  (to_rep((((res3[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth) <  n2)) ->
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2)))))

axiom H46 : (((1 <= i5) and (i5 <= 100)) ->
  (forall j7:int. (((1 <= j7) and (j7 <= (i6 - 1))) ->
  (((((((m[j7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (to_rep((((res3[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2)) and
  (to_rep((((res3[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, j7,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth) <= n2)) ->
  (to_rep((((res3[j7])).us_split_fields11).rec__red_black_trees__black_count__depth) <= (n2 + 1))))))

axiom H47 : (((1 <= i5) and (i5 <= 100)) ->
  (((forall temp___1004:int. (((0 <= temp___1004) and
    (temp___1004 <= 100)) -> ((i6 <= temp___1004) ->
    ((res3[temp___1004]) = (temp___1003[temp___1004]))))) and ((1 <= 100) ->
  in_range2(i6))) and ((1 <= i6) and (i6 <= 100))))

axiom H48 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((o188 = peek({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t; rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i6, 1)) and
  (in_range3(o188) and (o188 = peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  i6, 1))))))

axiom H49 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) -> ({
  us_split_fields11 = { rec__red_black_trees__black_count__status =
  red_black_trees__nb_blacks__B_3__count_r__assume;
  rec__red_black_trees__black_count__depth =
  red_black_trees__nb_blacks__B_3__count_r__assume1;
  rec__red_black_trees__black_count__count =
  red_black_trees__nb_blacks__B_3__count_r__assume2 } } = (res3[o188]))))

axiom H50 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((red_black_trees__nb_blacks__B_3__count_r__assume = count_r) and
  ((red_black_trees__nb_blacks__B_3__count_r__assume1 = count_r1) and
  (red_black_trees__nb_blacks__B_3__count_r__assume2 = count_r2)))))

axiom H51 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((o189 = peek({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t; rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i6, 0)) and
  (in_range3(o189) and (o189 = peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  i6, 0))))))

axiom H52 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) -> ({
  us_split_fields11 = { rec__red_black_trees__black_count__status =
  red_black_trees__nb_blacks__B_3__count_l__assume;
  rec__red_black_trees__black_count__depth =
  red_black_trees__nb_blacks__B_3__count_l__assume1;
  rec__red_black_trees__black_count__count =
  red_black_trees__nb_blacks__B_3__count_l__assume2 } } = (res3[o189]))))

axiom H53 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((red_black_trees__nb_blacks__B_3__count_l__assume = count_l) and
  ((red_black_trees__nb_blacks__B_3__count_l__assume1 = count_l1) and
  (red_black_trees__nb_blacks__B_3__count_l__assume2 = count_l2)))))

axiom H54 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  (to_rep(o190) = (n2 + 1)))))

axiom H55 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((o191 = (((res3[i6])).us_split_fields11).rec__red_black_trees__black_count__status) and
  ((o192 = o190) and
  (o193 = (((res3[i6])).us_split_fields11).rec__red_black_trees__black_count__count))))))

axiom H56 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) -> ((o194 = o191) and
  ((o195 = o192) and (o196 = o193))))))

axiom H57 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) -> (o197 = (res3[i6 <- {
  us_split_fields11 = { rec__red_black_trees__black_count__status = o194;
  rec__red_black_trees__black_count__depth = o195;
  rec__red_black_trees__black_count__count = o196 } }])))))

axiom H58 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) -> (result9 = res3))))

axiom H59 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) -> (res4 = o197))))

axiom H60 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) -> (result10 = res4))))

axiom H61 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  (((to_rep(count_r2) = to_rep(count_l2)) -> (res5 = (res4[i6 <- {
  us_split_fields11 = { rec__red_black_trees__black_count__status = true;
  rec__red_black_trees__black_count__depth =
  (((res4[i6])).us_split_fields11).rec__red_black_trees__black_count__depth;
  rec__red_black_trees__black_count__count =
  (((res4[i6])).us_split_fields11).rec__red_black_trees__black_count__count }
  }]))) and ((not (to_rep(count_r2) = to_rep(count_l2))) ->
  (res5 = (res4[i6 <- { us_split_fields11 = {
  rec__red_black_trees__black_count__status = false;
  rec__red_black_trees__black_count__depth =
  (((res4[i6])).us_split_fields11).rec__red_black_trees__black_count__depth;
  rec__red_black_trees__black_count__count =
  (((res4[i6])).us_split_fields11).rec__red_black_trees__black_count__count }
  }])))))))

axiom H62 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) -> ((o198 = (to_rep(count_l2) + 1)) and
  in_range3((to_rep(count_l2) + 1)))))))

axiom H63 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) -> (to_rep(o199) = o198)))))

axiom H64 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) ->
  ((o200 = (((res5[i6])).us_split_fields11).rec__red_black_trees__black_count__status) and
  ((o201 = (((res5[i6])).us_split_fields11).rec__red_black_trees__black_count__depth) and
  (o202 = o199)))))))

axiom H65 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) -> ((o203 = o200) and ((o204 = o201) and
  (o205 = o202)))))))

axiom H66 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) -> (o206 = (res5[i6 <- { us_split_fields11 = {
  rec__red_black_trees__black_count__status = o203;
  rec__red_black_trees__black_count__depth = o204;
  rec__red_black_trees__black_count__count = o205 } }]))))))

axiom H67 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) -> (result11 = res5)))))

axiom H68 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((to_rep3((t4[i6])) = 0) -> (res6 = o206)))))

axiom H69 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) -> (to_rep(o207) = to_rep(count_l2))))))

axiom H70 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) ->
  ((o208 = (((res5[i6])).us_split_fields11).rec__red_black_trees__black_count__status) and
  ((o209 = (((res5[i6])).us_split_fields11).rec__red_black_trees__black_count__depth) and
  (o210 = o207)))))))

axiom H71 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) -> ((o211 = o208) and ((o212 = o209) and
  (o213 = o210)))))))

axiom H72 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) -> (o214 = (res5[i6 <- { us_split_fields11 =
  { rec__red_black_trees__black_count__status = o211;
  rec__red_black_trees__black_count__depth = o212;
  rec__red_black_trees__black_count__count = o213 } }]))))))

axiom H73 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) -> (result12 = res5)))))

axiom H74 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) -> (res7 = o214)))))

axiom H75 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((max(to_rep(count_r1), to_rep(count_l1)) = n2) ->
  ((not (to_rep3((t4[i6])) = 0)) -> (res6 = res7)))))

axiom H76 : (((1 <= i5) and (i5 <= 100)) ->
  (((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((not (max(to_rep(count_r1), to_rep(count_l1)) = n2)) -> (res6 = res3))))

axiom H77 : (((1 <= i5) and (i5 <= 100)) ->
  ((not ((((m[i6])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (res6 = res3)))

axiom H78 : (((1 <= i5) and (i5 <= 100)) -> (i6 = 100))

axiom H79 : (((1 <= i5) and (i5 <= 100)) -> (i8 = i6))

axiom H80 : (((1 <= i5) and (i5 <= 100)) -> (res8 = res6))

axiom H81 : (((1 <= i5) and (i5 <= 100)) -> (i9 = i6))

axiom H82 : (((1 <= i5) and (i5 <= 100)) -> (res9 = res6))

axiom H83 : (((1 <= i5) and (i5 <= 100)) -> (i10 = i8))

axiom H84 : (((1 <= i5) and (i5 <= 100)) -> (res10 = res8))

axiom H85 : (((1 <= i5) and (i5 <= 100)) -> (i11 = i9))

axiom H86 : (((1 <= i5) and (i5 <= 100)) -> (res11 = res9))

axiom H87 : ((not ((1 <= i5) and (i5 <= 100))) -> (i10 = i5))

axiom H88 : ((not ((1 <= i5) and (i5 <= 100))) -> (res10 = res2))

axiom H89 : ((not ((1 <= i5) and (i5 <= 100))) -> (i11 = i5))

axiom H90 : ((not ((1 <= i5) and (i5 <= 100))) -> (res11 = res2))

axiom H91 : (not (n2 = 99))

axiom H92 : (result14 = n2)

axiom H93 : (n3 = (n2 + 1))

axiom H94 : (i12 = i10)

axiom H95 : (n4 = n3)

axiom H96 : (res12 = res10)

axiom H97 : (i13 = i11)

axiom H98 : (n5 = n3)

axiom H99 : (res13 = res11)

logic i20 : int

axiom H100 : (1 <= i20)

axiom H101 : (i20 <= 100)

 (* File "red_black_trees.adb", line 20, characters 0-0 *)
goal WP_parameter_def :
  (to_rep((((res12[i20])).us_split_fields11).rec__red_black_trees__black_count__count) <= to_rep((((res12[i20])).us_split_fields11).rec__red_black_trees__black_count__depth))
