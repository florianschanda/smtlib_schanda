(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort position 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (position position) Bool)
(declare-const dummy1 position)
(declare-datatypes () ((position__ref (mk_position__ref (position__content position)))))
(define-fun position__ref___projection ((a position__ref)) position (position__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const t (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const v Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort t1b 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t1b t1b) Bool)
(declare-const dummy2 t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 10)) (in_range2 temp___expr_136)))
(declare-const pos Int)
(declare-const i Int)
(declare-const search__search__result Int)
(declare-const temp___151 Int)
(declare-const temp___150 Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 Int)
(declare-const result Int)
(declare-const pos1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const pos2 Int)
(declare-const i2 Int)
(declare-const result2 Int)
(declare-const pos3 Int)
(declare-const pos4 Int)
(declare-const pos5 Int)
(declare-const pos6 Int)
(declare-const i3 Int)
(declare-const pos7 Int)
(declare-const i4 Int)
(declare-const pos8 Int)
(declare-const i5 Int)
(declare-const pos9 Int)
(declare-const i6 Int)
(declare-const result3 Int)
(declare-const search__search__result1 Int)
(declare-const search__search__result2 Int)
(declare-const search__search__result3 Int)
(declare-const pos10 Int)
(declare-const i7 Int)
(declare-const search__search__result4 Int)
(declare-const pos11 Int)
(declare-const i8 Int)
(declare-const search__search__result5 Int)
(declare-const result4 Bool)
(declare-const result5 Bool)
(define-fun i9 () int__ref (mk_int__ref i5))
(define-fun pos12 () int__ref (mk_int__ref pos8))
(define-fun pos13 () int__ref (mk_int__ref pos6))
(assert (in_range1 v))
(assert (= (mk_int__ref result) (mk_int__ref pos)))
(assert (= pos1 0))
(assert (in_range1 pos1))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___151 i1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___150 pos1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (forall ((j Int)) (=> (and (<= 1 j) (<= j (- i2 1))) (not (= (to_rep (select t j)) v))))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 pos2)) (=> (<= 1 10) (in_range3 i2))) (and (<= 1 i2) (<= i2 10)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (or (and (and (= pos3 pos4) (= pos5 pos3)) (and (= (to_rep (select t i2)) v) (and (= pos2 result2) (= pos3 i2)))) (and (and (not (= (to_rep (select t i2)) v)) (= pos3 pos2)) (and (and (= pos3 pos4) (= pos5 pos3)) (= i2 10))))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= pos13 (mk_int__ref pos4))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= pos7 pos5)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i9 (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= pos12 pos13)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= pos9 pos7)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= pos1 pos8)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= pos9 pos1)))
(assert (= search__search__result1 search__search__result2))
(assert (= search__search__result3 search__search__result1))
(assert (= (mk_int__ref result3) (mk_int__ref search__search__result)))
(assert (= search__search__result1 pos8))
(assert (= (mk_int__ref search__search__result4) (mk_int__ref search__search__result2)))
(assert (= (mk_int__ref i7) i9))
(assert (= (mk_int__ref pos10) pos12))
(assert (= search__search__result5 search__search__result3))
(assert (= i8 i6))
(assert (= pos11 pos9))
(assert (=> (= search__search__result4 0) (= (= result4 true) (forall ((pos14 Int)) (=> (and (<= 1 pos14) (<= pos14 10)) (not (= (to_rep (select t pos14)) v)))))))
(assert (=> (not (= search__search__result4 0)) (= result4 (of_int 1))))
(assert (= result4 true))
(assert (and (<= 1 search__search__result4) (<= search__search__result4 10)))
(assert (= o search__search__result4))
(assert (= o1 (select t o)))
(assert (= o2 (to_rep o1)))
(assert (= result5 (ite (= o2 v) true false)))
(assert (= result5 true))
(assert (not (in_range1 (- search__search__result4 1))))
(check-sat)
(exit)
