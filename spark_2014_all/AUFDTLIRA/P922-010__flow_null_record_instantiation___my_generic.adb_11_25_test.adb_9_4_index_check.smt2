(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-sort null_record_type 0)
(declare-fun user_eq1 (null_record_type null_record_type) Bool)
(declare-const value__size Int)
(declare-fun object__size (null_record_type) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (null_record_type) Int)
(assert (<= 0 value__size))
(assert (forall ((a null_record_type)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a null_record_type)) (<= 0 (object__alignment a))))
(declare-const dummy1 null_record_type)
(declare-datatypes () ((null_record_type__ref (mk_null_record_type__ref (null_record_type__content null_record_type)))))
(define-fun null_record_type__ref___projection ((a null_record_type__ref)) null_record_type (null_record_type__content a))
(declare-fun user_eq2 (null_record_type null_record_type) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (null_record_type) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (null_record_type) Int)
(assert (<= 0 value__size1))
(assert (forall ((a null_record_type)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a null_record_type)) (<= 0 (object__alignment1 a))))
(declare-const dummy2 null_record_type)
(declare-datatypes () ((t__ref (mk_t__ref (t__content null_record_type)))))
(define-fun t__ref___projection ((a t__ref)) null_record_type (t__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test__crash__foo__valid Bool) (rec__test__crash__foo__field null_record_type)))))
(define-fun us_split_fields_Valid__projection ((a us_split_fields)) Bool (rec__test__crash__foo__valid a))
(define-fun us_split_fields_Field__projection ((a us_split_fields)) null_record_type (rec__test__crash__foo__field a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (rec__test__crash__foo__valid (us_split_fields1 a)) (rec__test__crash__foo__valid (us_split_fields1 b))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const test__crash__foo__valid__first__bit Int)
(declare-const test__crash__foo__valid__last__bit Int)
(declare-const test__crash__foo__valid__position Int)
(assert (<= 0 test__crash__foo__valid__first__bit))
(assert (< test__crash__foo__valid__first__bit test__crash__foo__valid__last__bit))
(assert (<= 0 test__crash__foo__valid__position))
(declare-const test__crash__foo__field__first__bit Int)
(declare-const test__crash__foo__field__last__bit Int)
(declare-const test__crash__foo__field__position Int)
(assert (<= 0 test__crash__foo__field__first__bit))
(assert (< test__crash__foo__field__first__bit test__crash__foo__field__last__bit))
(assert (<= 0 test__crash__foo__field__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((foo__ref (mk_foo__ref (foo__content us_rep)))))
(define-fun foo__ref___projection ((a foo__ref)) us_rep (foo__content a))
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i1 Int)) (! (= (select (slide a old_first new_first) i1) (select a (- i1 (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i1))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort taD1 0)
(declare-fun taD1qtint (taD1) Int)
(assert (forall ((i1 taD1)) (and (<= 1 (taD1qtint i1)) (<= (taD1qtint i1) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq4 (taD1 taD1) Bool)
(declare-const dummy4 taD1)
(declare-datatypes () ((taD1__ref (mk_taD1__ref (taD1__content taD1)))))
(define-fun taD1__ref___projection ((a taD1__ref)) taD1 (taD1__content a))
(assert (in_range i))
(assert (not (<= i 10)))
(check-sat)
(exit)
