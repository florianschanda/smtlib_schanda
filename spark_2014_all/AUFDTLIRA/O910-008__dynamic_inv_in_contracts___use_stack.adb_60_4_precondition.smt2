(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range temp___expr_46)))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun is_empty (Int) Bool)
(declare-fun is_empty__function_guard (Bool Int) Bool)
(define-fun to_rep1 ((x positive)) Int (positiveqtint x))
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int positive))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int positive)) (a__first Int) (a__last Int) (b (Array Int positive)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const content__first integer)
(declare-const content__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun is_full (Int) Bool)
(declare-fun is_full__function_guard (Bool Int) Bool)
(declare-fun peek (Int (Array Int positive)) Int)
(declare-fun peek__function_guard (Int Int (Array Int positive)) Bool)
(declare-const max Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const last Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((top_range__ref (mk_top_range__ref (top_range__content integer)))))
(define-fun top_range__ref___projection ((a top_range__ref)) integer (top_range__content a))
(define-fun dynamic_invariant1 ((temp___expr_215 Int) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool (=> (or (= temp___is_init_211 true) (<= 0 last)) (dynamic_property 0 last temp___expr_215)))
(assert (= last max))
(declare-fun all_eq (Int (Array Int positive)) Bool)
(declare-fun all_eq__function_guard (Bool Int (Array Int positive)) Bool)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((tmy_arrayD1__ref (mk_tmy_arrayD1__ref (tmy_arrayD1__content integer)))))
(define-fun tmy_arrayD1__ref___projection ((a tmy_arrayD1__ref)) integer (tmy_arrayD1__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last1 (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last1 (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int positive)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int positive) (elts a))
(define-fun of_array ((a (Array Int positive)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last2 ((a us_t)) Int (to_rep (last1 (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last2 a)) (+ (- (last2 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int positive)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int positive)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int positive)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int positive))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int positive))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int positive))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last1 (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last1 (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((my_array__ref (mk_my_array__ref (my_array__content us_t)))))
(define-fun my_array__ref___projection ((a my_array__ref)) us_t (my_array__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert true)
(assert (forall ((use_stack__stacks__top Int)) (! (= (= (is_full use_stack__stacks__top) true) (= use_stack__stacks__top max)) :pattern ((is_full use_stack__stacks__top)))))
(assert true)
(assert (forall ((use_stack__stacks__top Int)) (! (= (= (is_empty use_stack__stacks__top) true) (= use_stack__stacks__top 0)) :pattern ((is_empty use_stack__stacks__top)))))
(assert (forall ((use_stack__stacks__top Int)) (forall ((use_stack__stacks__content (Array Int positive))) (! (=> (and (dynamic_invariant1 use_stack__stacks__top true true true true) (not (= (is_empty use_stack__stacks__top) true))) (dynamic_invariant (peek use_stack__stacks__top use_stack__stacks__content) true false true true)) :pattern ((peek use_stack__stacks__top use_stack__stacks__content))))))
(assert (forall ((use_stack__stacks__top Int)) (forall ((use_stack__stacks__content (Array Int positive))) (! (=> (dynamic_invariant1 use_stack__stacks__top true true true true) (= (peek use_stack__stacks__top use_stack__stacks__content) (to_rep1 (select use_stack__stacks__content use_stack__stacks__top)))) :pattern ((peek use_stack__stacks__top use_stack__stacks__content))))))
(assert true)
(assert (forall ((e Int)) (forall ((use_stack__stacks__content (Array Int positive))) (! (= (= (all_eq e use_stack__stacks__content) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep content__last))) (= (to_rep1 (select use_stack__stacks__content i)) e)))) :pattern ((all_eq e use_stack__stacks__content))))))
(define-fun dynamic_invariant3 ((temp___expr_222 us_t) (temp___is_init_218 Bool) (temp___skip_constant_219 Bool) (temp___do_toplevel_220 Bool) (temp___do_typ_inv_221 Bool)) Bool (=> (not (= temp___skip_constant_219 true)) (and (dynamic_property2 1 max (first1 temp___expr_222) (last2 temp___expr_222)) (and (= (first1 temp___expr_222) 1) (= (last2 temp___expr_222) max)))))
(declare-const c Int)
(declare-const top Int)
(declare-const e Int)
(declare-const result Int)
(declare-const e1 Int)
(declare-const top1 Int)
(declare-const content (Array Int positive))
(assert (in_range c))
(assert (in_range max))
(assert (dynamic_property 0 last top))
(assert (and (dynamic_property2 1 max (to_rep content__first) (to_rep content__last)) (and (= (to_rep content__first) 1) (= (to_rep content__last) max))))
(assert (= (is_empty top) true))
(assert (= result e))
(assert (= e1 1))
(assert (in_range e1))
(assert (and (and (= (is_full top1) true) (= (all_eq e1 content) true)) (dynamic_property 0 last top1)))
(assert (not (not (= (is_empty top1) true))))
(check-sat)
(exit)
