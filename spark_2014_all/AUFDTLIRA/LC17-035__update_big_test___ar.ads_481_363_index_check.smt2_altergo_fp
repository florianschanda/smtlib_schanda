(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range1(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type it3

predicate in_range2(x: int) = ((1 <= x) and (x <= 16))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : it3, it3 -> bool

logic dummy2 : it3

type it3__ref = { it3__content : it3
}

function it3__ref___projection(a: it3__ref) : it3 = (a).it3__content

type et1

predicate in_range3(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : et1, et1 -> bool

logic dummy3 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy4 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq4 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> (int,(int,et1) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,et1) farray, int -> (int,(int,et1) farray) farray

axiom singleton_def1 :
  (forall v:(int,et1) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq6 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq5((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq5((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq5((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)))))))

logic dummy5 : (int,(int,et1) farray) farray

logic value__size1 : int

logic object__size1 : (int,(int,et1) farray) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,(int,et1) farray) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,(int,et1) farray) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,(int,et1) farray) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,(int,et1) farray) farray.
  (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,(int,et1) farray) farray. (0 <= object__alignment1(a)))

logic user_eq5 : (int,(int,et1) farray) farray,
  (int,(int,et1) farray) farray -> bool

type map__ref2 = { map__content2 : (int,(int,(int,et1) farray) farray) farray
}

logic slide2 : (int,(int,(int,et1) farray) farray) farray, int,
  int -> (int,(int,(int,et1) farray) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,(int,(int,et1) farray) farray) farray, int, int,
  (int,(int,(int,et1) farray) farray) farray, int,
  int -> (int,(int,(int,et1) farray) farray) farray

axiom concat_def2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  forall b:(int,(int,(int,et1) farray) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : (int,(int,et1) farray) farray,
  int -> (int,(int,(int,et1) farray) farray) farray

axiom singleton_def2 :
  (forall v:(int,(int,et1) farray) farray.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq7 : (int,(int,(int,et1) farray) farray) farray, int, int,
  (int,(int,(int,et1) farray) farray) farray, int, int -> bool

axiom bool_eq_def6 :
  (forall a:(int,(int,(int,et1) farray) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,(int,et1) farray) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq7(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and (bool_eq6((a[temp___idx_134]), 5, 50,
  (b[((b__first - a__first) + temp___idx_134)]), 5, 50) = true)) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) -> (bool_eq6((a[temp___idx_134]), 5, 50,
  (b[((b__first - a__first) + temp___idx_134)]), 5, 50) = true))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  forall b:(int,(int,(int,et1) farray) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) -> (bool_eq6((a[temp___idx_134]), 5, 50,
  (b[((b__first - a__first) + temp___idx_134)]), 5, 50) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic temp___1645 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom :
  (forall temp___1647:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1648:int. forall temp___1650:int.
  (forall temp___1649:(int,(int,et1) farray) farray.
  forall temp___1651:(int,(int,et1) farray) farray.
  (forall temp___1652:int. (((temp___1652 = temp___1650) ->
  ((temp___1645(temp___1647, temp___1648, temp___1649, temp___1650,
  temp___1651)[temp___1652]) = temp___1651)) and
  ((not (temp___1652 = temp___1650)) -> (((temp___1652 = temp___1648) ->
  ((temp___1645(temp___1647, temp___1648, temp___1649, temp___1650,
  temp___1651)[temp___1652]) = temp___1649)) and
  ((not (temp___1652 = temp___1648)) -> ((temp___1645(temp___1647,
  temp___1648, temp___1649, temp___1650,
  temp___1651)[temp___1652]) = (temp___1647[temp___1652]))))))))))

logic temp___1653 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom1 :
  (forall temp___1655:(int,(int,et1) farray) farray.
  (forall temp___1656:int.
  (forall temp___1657:(int,et1) farray.
  (forall temp___1658:int. (((temp___1658 = temp___1656) ->
  ((temp___1653(temp___1655, temp___1656,
  temp___1657)[temp___1658]) = temp___1657)) and
  ((not (temp___1658 = temp___1656)) -> ((temp___1653(temp___1655,
  temp___1656, temp___1657)[temp___1658]) = (temp___1655[temp___1658]))))))))

logic temp___1660 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom2 :
  (forall temp___1662:(int,et1) farray.
  (forall temp___1663:int. forall temp___1664:int.
  (forall temp___1665:int. (((temp___1665 = temp___1663) ->
  ((temp___1660(temp___1662, temp___1663,
  temp___1664)[temp___1665]) = of_rep(temp___1664))) and
  ((not (temp___1665 = temp___1663)) -> ((temp___1660(temp___1662,
  temp___1663, temp___1664)[temp___1665]) = (temp___1662[temp___1665])))))))

logic temp___1668 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom3 :
  (forall temp___1670:(int,(int,et1) farray) farray.
  (forall temp___1671:int.
  (forall temp___1672:(int,et1) farray.
  (forall temp___1673:int. (((temp___1673 = temp___1671) ->
  ((temp___1668(temp___1670, temp___1671,
  temp___1672)[temp___1673]) = temp___1672)) and
  ((not (temp___1673 = temp___1671)) -> ((temp___1668(temp___1670,
  temp___1671, temp___1672)[temp___1673]) = (temp___1670[temp___1673]))))))))

logic temp___1675 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom4 :
  (forall temp___1677:(int,et1) farray.
  (forall temp___1678:int. forall temp___1679:int.
  (forall temp___1680:int. (((temp___1680 = temp___1678) ->
  ((temp___1675(temp___1677, temp___1678,
  temp___1679)[temp___1680]) = of_rep(temp___1679))) and
  ((not (temp___1680 = temp___1678)) -> ((temp___1675(temp___1677,
  temp___1678, temp___1679)[temp___1680]) = (temp___1677[temp___1680])))))))

logic temp___1684 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom5 :
  (forall temp___1686:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1687:int. forall temp___1689:int.
  (forall temp___1688:(int,(int,et1) farray) farray.
  forall temp___1690:(int,(int,et1) farray) farray.
  (forall temp___1691:int. (((temp___1691 = temp___1689) ->
  ((temp___1684(temp___1686, temp___1687, temp___1688, temp___1689,
  temp___1690)[temp___1691]) = temp___1690)) and
  ((not (temp___1691 = temp___1689)) -> (((temp___1691 = temp___1687) ->
  ((temp___1684(temp___1686, temp___1687, temp___1688, temp___1689,
  temp___1690)[temp___1691]) = temp___1688)) and
  ((not (temp___1691 = temp___1687)) -> ((temp___1684(temp___1686,
  temp___1687, temp___1688, temp___1689,
  temp___1690)[temp___1691]) = (temp___1686[temp___1691]))))))))))

logic temp___1692 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom6 :
  (forall temp___1694:(int,(int,et1) farray) farray.
  (forall temp___1695:int.
  (forall temp___1696:(int,et1) farray.
  (forall temp___1697:int. (((temp___1697 = temp___1695) ->
  ((temp___1692(temp___1694, temp___1695,
  temp___1696)[temp___1697]) = temp___1696)) and
  ((not (temp___1697 = temp___1695)) -> ((temp___1692(temp___1694,
  temp___1695, temp___1696)[temp___1697]) = (temp___1694[temp___1697]))))))))

logic temp___1699 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom7 :
  (forall temp___1701:(int,et1) farray.
  (forall temp___1702:int. forall temp___1703:int.
  (forall temp___1704:int. (((temp___1704 = temp___1702) ->
  ((temp___1699(temp___1701, temp___1702,
  temp___1703)[temp___1704]) = of_rep(temp___1703))) and
  ((not (temp___1704 = temp___1702)) -> ((temp___1699(temp___1701,
  temp___1702, temp___1703)[temp___1704]) = (temp___1701[temp___1704])))))))

logic temp___1707 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom8 :
  (forall temp___1709:(int,(int,et1) farray) farray.
  (forall temp___1710:int.
  (forall temp___1711:(int,et1) farray.
  (forall temp___1712:int. (((temp___1712 = temp___1710) ->
  ((temp___1707(temp___1709, temp___1710,
  temp___1711)[temp___1712]) = temp___1711)) and
  ((not (temp___1712 = temp___1710)) -> ((temp___1707(temp___1709,
  temp___1710, temp___1711)[temp___1712]) = (temp___1709[temp___1712]))))))))

logic temp___1714 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom9 :
  (forall temp___1716:(int,et1) farray.
  (forall temp___1717:int. forall temp___1718:int.
  (forall temp___1719:int. (((temp___1719 = temp___1717) ->
  ((temp___1714(temp___1716, temp___1717,
  temp___1718)[temp___1719]) = of_rep(temp___1718))) and
  ((not (temp___1719 = temp___1717)) -> ((temp___1714(temp___1716,
  temp___1717, temp___1718)[temp___1719]) = (temp___1716[temp___1719])))))))

logic temp___1723 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom10 :
  (forall temp___1725:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1726:int. forall temp___1728:int.
  (forall temp___1727:(int,(int,et1) farray) farray.
  forall temp___1729:(int,(int,et1) farray) farray.
  (forall temp___1730:int. (((temp___1730 = temp___1728) ->
  ((temp___1723(temp___1725, temp___1726, temp___1727, temp___1728,
  temp___1729)[temp___1730]) = temp___1729)) and
  ((not (temp___1730 = temp___1728)) -> (((temp___1730 = temp___1726) ->
  ((temp___1723(temp___1725, temp___1726, temp___1727, temp___1728,
  temp___1729)[temp___1730]) = temp___1727)) and
  ((not (temp___1730 = temp___1726)) -> ((temp___1723(temp___1725,
  temp___1726, temp___1727, temp___1728,
  temp___1729)[temp___1730]) = (temp___1725[temp___1730]))))))))))

logic temp___1731 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom11 :
  (forall temp___1733:(int,(int,et1) farray) farray.
  (forall temp___1734:int.
  (forall temp___1735:(int,et1) farray.
  (forall temp___1736:int. (((temp___1736 = temp___1734) ->
  ((temp___1731(temp___1733, temp___1734,
  temp___1735)[temp___1736]) = temp___1735)) and
  ((not (temp___1736 = temp___1734)) -> ((temp___1731(temp___1733,
  temp___1734, temp___1735)[temp___1736]) = (temp___1733[temp___1736]))))))))

logic temp___1738 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom12 :
  (forall temp___1740:(int,et1) farray.
  (forall temp___1741:int. forall temp___1742:int.
  (forall temp___1743:int. (((temp___1743 = temp___1741) ->
  ((temp___1738(temp___1740, temp___1741,
  temp___1742)[temp___1743]) = of_rep(temp___1742))) and
  ((not (temp___1743 = temp___1741)) -> ((temp___1738(temp___1740,
  temp___1741, temp___1742)[temp___1743]) = (temp___1740[temp___1743])))))))

logic temp___1746 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom13 :
  (forall temp___1748:(int,(int,et1) farray) farray.
  (forall temp___1749:int.
  (forall temp___1750:(int,et1) farray.
  (forall temp___1751:int. (((temp___1751 = temp___1749) ->
  ((temp___1746(temp___1748, temp___1749,
  temp___1750)[temp___1751]) = temp___1750)) and
  ((not (temp___1751 = temp___1749)) -> ((temp___1746(temp___1748,
  temp___1749, temp___1750)[temp___1751]) = (temp___1748[temp___1751]))))))))

logic temp___1753 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom14 :
  (forall temp___1755:(int,et1) farray.
  (forall temp___1756:int. forall temp___1757:int.
  (forall temp___1758:int. (((temp___1758 = temp___1756) ->
  ((temp___1753(temp___1755, temp___1756,
  temp___1757)[temp___1758]) = of_rep(temp___1757))) and
  ((not (temp___1758 = temp___1756)) -> ((temp___1753(temp___1755,
  temp___1756, temp___1757)[temp___1758]) = (temp___1755[temp___1758])))))))

logic temp___1762 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom15 :
  (forall temp___1764:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1765:int. forall temp___1767:int.
  (forall temp___1766:(int,(int,et1) farray) farray.
  forall temp___1768:(int,(int,et1) farray) farray.
  (forall temp___1769:int. (((temp___1769 = temp___1767) ->
  ((temp___1762(temp___1764, temp___1765, temp___1766, temp___1767,
  temp___1768)[temp___1769]) = temp___1768)) and
  ((not (temp___1769 = temp___1767)) -> (((temp___1769 = temp___1765) ->
  ((temp___1762(temp___1764, temp___1765, temp___1766, temp___1767,
  temp___1768)[temp___1769]) = temp___1766)) and
  ((not (temp___1769 = temp___1765)) -> ((temp___1762(temp___1764,
  temp___1765, temp___1766, temp___1767,
  temp___1768)[temp___1769]) = (temp___1764[temp___1769]))))))))))

logic temp___1770 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom16 :
  (forall temp___1772:(int,(int,et1) farray) farray.
  (forall temp___1773:int.
  (forall temp___1774:(int,et1) farray.
  (forall temp___1775:int. (((temp___1775 = temp___1773) ->
  ((temp___1770(temp___1772, temp___1773,
  temp___1774)[temp___1775]) = temp___1774)) and
  ((not (temp___1775 = temp___1773)) -> ((temp___1770(temp___1772,
  temp___1773, temp___1774)[temp___1775]) = (temp___1772[temp___1775]))))))))

logic temp___1777 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom17 :
  (forall temp___1779:(int,et1) farray.
  (forall temp___1780:int. forall temp___1781:int.
  (forall temp___1782:int. (((temp___1782 = temp___1780) ->
  ((temp___1777(temp___1779, temp___1780,
  temp___1781)[temp___1782]) = of_rep(temp___1781))) and
  ((not (temp___1782 = temp___1780)) -> ((temp___1777(temp___1779,
  temp___1780, temp___1781)[temp___1782]) = (temp___1779[temp___1782])))))))

logic temp___1785 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom18 :
  (forall temp___1787:(int,(int,et1) farray) farray.
  (forall temp___1788:int.
  (forall temp___1789:(int,et1) farray.
  (forall temp___1790:int. (((temp___1790 = temp___1788) ->
  ((temp___1785(temp___1787, temp___1788,
  temp___1789)[temp___1790]) = temp___1789)) and
  ((not (temp___1790 = temp___1788)) -> ((temp___1785(temp___1787,
  temp___1788, temp___1789)[temp___1790]) = (temp___1787[temp___1790]))))))))

logic temp___1792 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom19 :
  (forall temp___1794:(int,et1) farray.
  (forall temp___1795:int. forall temp___1796:int.
  (forall temp___1797:int. (((temp___1797 = temp___1795) ->
  ((temp___1792(temp___1794, temp___1795,
  temp___1796)[temp___1797]) = of_rep(temp___1796))) and
  ((not (temp___1797 = temp___1795)) -> ((temp___1792(temp___1794,
  temp___1795, temp___1796)[temp___1797]) = (temp___1794[temp___1797])))))))

logic temp___5321 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom20 :
  (forall temp___5323:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___5324:int.
  (forall temp___5325:(int,(int,et1) farray) farray.
  (forall temp___5326:int. (((temp___5326 = temp___5324) ->
  ((temp___5321(temp___5323, temp___5324,
  temp___5325)[temp___5326]) = temp___5325)) and
  ((not (temp___5326 = temp___5324)) -> ((temp___5321(temp___5323,
  temp___5324, temp___5325)[temp___5326]) = (temp___5323[temp___5326]))))))))

logic temp___5327 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom21 :
  (forall temp___5329:(int,(int,et1) farray) farray.
  (forall temp___5330:int.
  (forall temp___5331:(int,et1) farray.
  (forall temp___5332:int. (((temp___5332 = temp___5330) ->
  ((temp___5327(temp___5329, temp___5330,
  temp___5331)[temp___5332]) = temp___5331)) and
  ((not (temp___5332 = temp___5330)) -> ((temp___5327(temp___5329,
  temp___5330, temp___5331)[temp___5332]) = (temp___5329[temp___5332]))))))))

logic temp___5333 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom22 :
  (forall temp___5335:(int,et1) farray.
  (forall temp___5336:int. forall temp___5337:int.
  (forall temp___5338:int. (((temp___5338 = temp___5336) ->
  ((temp___5333(temp___5335, temp___5336,
  temp___5337)[temp___5338]) = of_rep(temp___5337))) and
  ((not (temp___5338 = temp___5336)) -> ((temp___5333(temp___5335,
  temp___5336, temp___5337)[temp___5338]) = (temp___5335[temp___5338])))))))

logic a : (int,(int,(int,et1) farray) farray) farray

logic k_next : int

logic f : int

logic t : (int,(int,(int,et1) farray) farray) farray

logic o : et1

logic o1 : (int,et1) farray

logic o2 : (int,(int,et1) farray) farray

logic o3 : (int,(int,(int,et1) farray) farray) farray

logic o4 : int

logic o5 : int

logic o6 : et1

logic o7 : (int,et1) farray

logic o8 : (int,(int,et1) farray) farray

logic o9 : (int,(int,(int,et1) farray) farray) farray

logic o10 : int

logic o11 : int

logic o12 : int

logic temp___5371 : (int,(int,et1) farray) farray

logic o13 : (int,et1) farray

logic o14 : (int,et1) farray

logic o15 : (int,(int,et1) farray) farray

logic o16 : (int,(int,et1) farray) farray

logic o17 : int

logic temp___5372 : (int,(int,(int,et1) farray) farray) farray

logic o18 : int

logic o19 : int

logic temp___5361 : (int,(int,et1) farray) farray

logic o20 : int

logic o21 : (int,et1) farray

logic o22 : (int,et1) farray

logic o23 : (int,(int,et1) farray) farray

logic o24 : (int,(int,et1) farray) farray

logic o25 : int

logic temp___5362 : (int,(int,(int,et1) farray) farray) farray

logic result : (int,(int,(int,et1) farray) farray) farray

logic t1 : (int,(int,(int,et1) farray) farray) farray

logic result1 : (int,(int,(int,et1) farray) farray) farray

logic a1 : (int,(int,(int,et1) farray) farray) farray

logic result2 : int

logic k_next1 : int

logic result3 : int

logic k_next2 : int

logic result4 : int

logic f1 : int

logic result5 : int

logic f2 : int

logic result6 : (int,(int,(int,et1) farray) farray) farray

logic a2 : (int,(int,(int,et1) farray) farray) farray

logic a3 : (int,(int,(int,et1) farray) farray) farray

logic k_next3 : int

logic f3 : int

logic t2 : (int,(int,(int,et1) farray) farray) farray

logic a4 : (int,(int,(int,et1) farray) farray) farray

logic k_next4 : int

logic f4 : int

logic t3 : (int,(int,(int,et1) farray) farray) farray

logic result7 : bool

logic result8 : bool

axiom H : in_range(i)

axiom H1 : in_range1(j)

axiom H2 : in_range2(k)

axiom H3 : in_range3(e)

axiom H4 : ((((1 <= 16) -> in_range2(k_next)) and (((0 <= 99) ->
  in_range3(f)) and ((bool_eq7(a1, 1, 16, temp___5321(t1, k,
  temp___5327((t1[k]), j, temp___5333(((t1[k])[j]), i, e))), 1,
  16) = true) and ((((k = 16) -> ((result2 = k_next) and (k_next1 = 1))) and
  ((not (k = 16)) -> ((((o4 = (k + 1)) and in_range2((k + 1))) and
  ((result3 = k_next) and (k_next2 = o4))) and (k_next1 = k_next2)))) and
  ((((e = 0) -> ((result4 = f) and (f1 = 99))) and ((not (e = 0)) ->
  ((((o5 = (e - 1)) and in_range3((e - 1))) and ((result5 = f) and
  (f2 = o5))) and (f1 = f2)))) and (((((to_rep(o6) = f1) and
  (o7 = (((a1[k_next1])[j])[i <- o6]))) and
  (o8 = ((a1[k_next1])[j <- o7]))) and (o9 = (a1[k_next1 <- o8]))) and
  ((a1 = result6) and (a2 = o9)))))))) and (((t1 = t2) and ((f1 = f3) and
  ((k_next1 = k_next3) and (a2 = a3)))) and ((t3 = t1) and ((f4 = f1) and
  ((k_next4 = k_next1) and (a4 = a2))))))

axiom H5 : (k <  16)

axiom H6 : ((0 <  e) -> ((o20 = (e - 1)) and in_range3((e - 1))))

axiom H7 : ((0 <  e) -> ((1 <= (k + 1)) and ((k + 1) <= 16)))

axiom H8 : ((0 <  e) -> (o19 = (k + 1)))

axiom H9 : ((0 <  e) -> (temp___5361 = (a[o19])))

axiom H10 : ((0 <  e) -> (o21 = (temp___5361[j])))

axiom H11 : ((0 <  e) -> (o22 = temp___1675(o21, i, o20)))

axiom H12 : ((0 <  e) -> ((1 <= (k + 1)) and ((k + 1) <= 16)))

axiom H13 : ((0 <  e) -> (o18 = (k + 1)))

axiom H14 : ((0 <  e) -> (o23 = (a[o18])))

axiom H15 : ((0 <  e) -> (o24 = temp___1668(o23, j, o22)))

axiom H16 : ((0 <  e) -> ((o25 = (k + 1)) and in_range2((k + 1))))

axiom H17 : ((0 <  e) -> (temp___5362 = temp___1645(a, k, temp___1653((a[k]),
  j, temp___1660(((a[k])[j]), i, e)), o25, o24)))

axiom H18 : ((0 <  e) -> (result8 = bool_eq7(a3, 1, 16, temp___5362, 1, 16)))

axiom H19 : ((not (0 <  e)) -> (result8 = false))

axiom H20 : (not (result8 = true))

axiom H21 : (e = 0)

 (* File "ar.ads", line 476, characters 0-0 *)
goal WP_parameter_def : (1 <= (k + 1))
