(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort int__ 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (int__ int__) Bool)
(declare-const dummy int__)
(declare-datatypes () ((int____ref (mk_int____ref (int____content int__)))))
(define-fun int____ref___projection ((a int____ref)) int__ (int____content a))
(define-fun dynamic_invariant ((temp___expr_161 Int) (temp___is_init_157 Bool) (temp___skip_constant_158 Bool) (temp___do_toplevel_159 Bool) (temp___do_typ_inv_160 Bool)) Bool (=> (or (= temp___is_init_157 true) (<= 1 10)) (in_range temp___expr_161)))
(declare-sort flagvalue 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (flagvalue flagvalue) Bool)
(declare-const dummy1 flagvalue)
(declare-datatypes () ((flagvalue__ref (mk_flagvalue__ref (flagvalue__content flagvalue)))))
(define-fun flagvalue__ref___projection ((a flagvalue__ref)) flagvalue (flagvalue__content a))
(define-fun dynamic_invariant1 ((temp___expr_168 Int) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool (=> (or (= temp___is_init_164 true) (<= 0 4)) (in_range1 temp___expr_168)))
(declare-fun to_rep (flagvalue) Int)
(declare-fun of_rep (Int) flagvalue)
(assert (forall ((x flagvalue)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x flagvalue)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int flagvalue))))))
(declare-fun slide ((Array Int flagvalue) Int Int) (Array Int flagvalue))
(assert (forall ((a (Array Int flagvalue))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int flagvalue))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int flagvalue)) (a__first Int) (a__last Int) (b (Array Int flagvalue)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int flagvalue)) (b (Array Int flagvalue))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const flag_v1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const flag_v2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const value_v1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const value_v2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const flags_v1 (Array Int flagvalue))
(declare-const flags_v2 (Array Int flagvalue))
(declare-const o flagvalue)
(declare-const o1 (Array Int flagvalue))
(declare-const o2 flagvalue)
(declare-const o3 (Array Int flagvalue))
(declare-const result (Array Int flagvalue))
(declare-const flags_v11 (Array Int flagvalue))
(declare-const result1 (Array Int flagvalue))
(declare-const flags_v21 (Array Int flagvalue))
(declare-const flags_v12 (Array Int flagvalue))
(declare-const flags_v22 (Array Int flagvalue))
(declare-const flags_v13 (Array Int flagvalue))
(declare-const flags_v23 (Array Int flagvalue))
(assert (in_range flag_v1))
(assert (in_range flag_v2))
(assert (in_range1 value_v1))
(assert (in_range1 value_v2))
(assert (= (to_rep o) value_v1))
(assert (= o1 (store flags_v1 flag_v1 o)))
(assert (= result flags_v1))
(assert (= flags_v11 o1))
(assert (= (to_rep o2) value_v2))
(assert (= o3 (store flags_v2 flag_v2 o2)))
(assert (= result1 flags_v2))
(assert (= flags_v21 o3))
(assert (= flags_v21 flags_v22))
(assert (= flags_v11 flags_v12))
(assert (= flags_v23 flags_v21))
(assert (= flags_v13 flags_v11))
(assert (= (= value_v1 value_v2) true))
(assert (not (= (to_rep (select flags_v12 flag_v1)) (to_rep (select flags_v22 flag_v2)))))
(check-sat)
(exit)
