(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__private_record__result_ty__found : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__private_record__result_ty__found

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__private_record__result_ty : us_main_type
}

function us_split_fields_Result_Ty__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_record__result_ty

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_discrs1).rec__private_record__result_ty__found = ((b).us_split_discrs1).rec__private_record__result_ty__found) and
  (us_main_eq(((a).us_split_fields1).rec__private_record__result_ty,
  ((b).us_split_fields1).rec__private_record__result_ty) = true)) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__private_record__result_ty__found = ((b).us_split_discrs1).rec__private_record__result_ty__found) and
  (us_main_eq(((a).us_split_fields1).rec__private_record__result_ty,
  ((b).us_split_fields1).rec__private_record__result_ty) = true))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__private_record__result_ty__found = a };
  us_split_fields1 = { rec__private_record__result_ty = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__private_record__result_ty__found = a };
  us_split_fields1 = { rec__private_record__result_ty = a1 } })))

logic private_record__result_ty__found__first__bit : int

logic private_record__result_ty__found__last__bit : int

logic private_record__result_ty__found__position : int

axiom private_record__result_ty__found__first__bit_axiom :
  (0 <= private_record__result_ty__found__first__bit)

axiom private_record__result_ty__found__last__bit_axiom :
  (private_record__result_ty__found__first__bit <  private_record__result_ty__found__last__bit)

axiom private_record__result_ty__found__position_axiom :
  (0 <= private_record__result_ty__found__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : us_main_type

type result_ty__ref = { result_ty__content : us_rep
}

function result_ty__ref___projection(a: result_ty__ref) : us_rep =
  (a).result_ty__content

logic get_content : us_rep -> int

logic get_content__function_guard : int, us_rep -> prop

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic mk_result : bool, int -> us_rep

logic mk_result__function_guard : us_rep, bool, int -> prop

axiom mk_result__post_axiom :
  (forall found:bool.
  (forall content:int [mk_result(found, content)]. (in_range2(content) ->
  (((((mk_result(found,
  content)).us_split_discrs1).rec__private_record__result_ty__found = true) <->
  (found = true)) and ((found = true) -> (get_content(mk_result(found,
  content)) = content))))))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t3s__ref = { t3s__content : integer
}

function t3s__ref___projection(a: t3s__ref) : integer = (a).t3s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,natural) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy6 : (int,natural) farray

logic dummy7 : t

type t4s__ref = { t4s__content : us_t
}

function t4s__ref___projection(a: t4s__ref) : us_t = (a).t4s__content

type us_split_discrs2 = { rec__record_discr__interm_result__upto : natural
}

function us_split_discrs___2__projection(a: us_split_discrs2) : natural =
  (a).rec__record_discr__interm_result__upto

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__record_discr__interm_result__to_search : us_t
}

function us_split_fields_To_Search__projection(a: us_split_fields2) : us_t =
  (a).rec__record_discr__interm_result__to_search

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((to_rep(((a).us_split_discrs3).rec__record_discr__interm_result__upto) = to_rep(((b).us_split_discrs3).rec__record_discr__interm_result__upto)) and
  (bool_eq8(((a).us_split_fields3).rec__record_discr__interm_result__to_search,
  ((b).us_split_fields3).rec__record_discr__interm_result__to_search) = true)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs3).rec__record_discr__interm_result__upto) = to_rep(((b).us_split_discrs3).rec__record_discr__interm_result__upto)) and
  (bool_eq8(((a).us_split_fields3).rec__record_discr__interm_result__to_search,
  ((b).us_split_fields3).rec__record_discr__interm_result__to_search) = true))) ->
  (bool_eq9(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t.
  (0 <= object__size2({ us_split_discrs3 = {
  rec__record_discr__interm_result__upto = a }; us_split_fields3 = {
  rec__record_discr__interm_result__to_search = { elts = a1; rt = a2 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t.
  (0 <= object__alignment2({ us_split_discrs3 = {
  rec__record_discr__interm_result__upto = a }; us_split_fields3 = {
  rec__record_discr__interm_result__to_search = { elts = a1; rt = a2 } } })))

logic record_discr__interm_result__upto__first__bit : int

logic record_discr__interm_result__upto__last__bit : int

logic record_discr__interm_result__upto__position : int

axiom record_discr__interm_result__upto__first__bit_axiom :
  (0 <= record_discr__interm_result__upto__first__bit)

axiom record_discr__interm_result__upto__last__bit_axiom :
  (record_discr__interm_result__upto__first__bit <  record_discr__interm_result__upto__last__bit)

axiom record_discr__interm_result__upto__position_axiom :
  (0 <= record_discr__interm_result__upto__position)

logic record_discr__interm_result__to_search__first__bit : int

logic record_discr__interm_result__to_search__last__bit : int

logic record_discr__interm_result__to_search__position : int

axiom record_discr__interm_result__to_search__first__bit_axiom :
  (0 <= record_discr__interm_result__to_search__first__bit)

axiom record_discr__interm_result__to_search__last__bit_axiom :
  (record_discr__interm_result__to_search__first__bit <  record_discr__interm_result__to_search__last__bit)

axiom record_discr__interm_result__to_search__position_axiom :
  (0 <= record_discr__interm_result__to_search__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy8 : natural

logic dummy9 : (int,natural) farray

logic dummy10 : t

type interm_result__ref = { interm_result__content : us_rep1
}

function interm_result__ref___projection(a: interm_result__ref) : us_rep1 =
  (a).interm_result__content

type tT5sP1

predicate in_range4(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : tT5sP1, tT5sP1 -> bool

logic dummy11 : tT5sP1

type tT5sP1__ref = { tT5sP1__content : tT5sP1
}

function tT5sP1__ref___projection(a: tT5sP1__ref) : tT5sP1 =
  (a).tT5sP1__content

logic dummy12 : (int,natural) farray

logic value__size3 : int

logic object__size3 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,natural) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields4 = { rec__record_discr__interm_result__to_search1 :
(int,natural) farray
}

function us_split_fields_To_Search__2__projection(a: us_split_fields4) : (int,natural) farray =
  (a).rec__record_discr__interm_result__to_search1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___6__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep2) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = {
  rec__record_discr__interm_result__to_search =
  of_array(((a).us_split_fields5).rec__record_discr__interm_result__to_search1,
  1, 3) } }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields5 = {
  rec__record_discr__interm_result__to_search1 =
  to_array(((r).us_split_fields3).rec__record_discr__interm_result__to_search)
  } }

logic bool_eq11 : us_rep2, us_rep2 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq11(a, b)].
  ((((to_rep(((a).us_split_discrs4).rec__record_discr__interm_result__upto) = to_rep(((b).us_split_discrs4).rec__record_discr__interm_result__upto)) and
  (bool_eq5(((a).us_split_fields5).rec__record_discr__interm_result__to_search1,
  1, 3, ((b).us_split_fields5).rec__record_discr__interm_result__to_search1,
  1, 3) = true)) -> (bool_eq11(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs4).rec__record_discr__interm_result__upto) = to_rep(((b).us_split_discrs4).rec__record_discr__interm_result__upto)) and
  (bool_eq5(((a).us_split_fields5).rec__record_discr__interm_result__to_search1,
  1, 3, ((b).us_split_fields5).rec__record_discr__interm_result__to_search1,
  1, 3) = true))) -> (bool_eq11(a, b) = false))))

predicate in_range5(rec__record_discr__interm_result__upto1: int,
  a: us_rep1) =
  (rec__record_discr__interm_result__upto1 = to_rep(((a).us_split_discrs3).rec__record_discr__interm_result__upto))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:(int,natural) farray. (0 <= object__size4({
  us_split_discrs4 = { rec__record_discr__interm_result__upto = a };
  us_split_fields5 = { rec__record_discr__interm_result__to_search1 = a1 }
  })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:(int,natural) farray.
  (0 <= object__alignment4({ us_split_discrs4 = {
  rec__record_discr__interm_result__upto = a }; us_split_fields5 = {
  rec__record_discr__interm_result__to_search1 = a1 } })))

logic record_discr__interm_result__upto__first__bit1 : int

logic record_discr__interm_result__upto__last__bit1 : int

logic record_discr__interm_result__upto__position1 : int

axiom record_discr__interm_result__upto__first__bit_axiom1 :
  (0 <= record_discr__interm_result__upto__first__bit1)

axiom record_discr__interm_result__upto__last__bit_axiom1 :
  (record_discr__interm_result__upto__first__bit1 <  record_discr__interm_result__upto__last__bit1)

axiom record_discr__interm_result__upto__position_axiom1 :
  (0 <= record_discr__interm_result__upto__position1)

logic record_discr__interm_result__to_search__first__bit1 : int

logic record_discr__interm_result__to_search__last__bit1 : int

logic record_discr__interm_result__to_search__position1 : int

axiom record_discr__interm_result__to_search__first__bit_axiom1 :
  (0 <= record_discr__interm_result__to_search__first__bit1)

axiom record_discr__interm_result__to_search__last__bit_axiom1 :
  (record_discr__interm_result__to_search__first__bit1 <  record_discr__interm_result__to_search__last__bit1)

axiom record_discr__interm_result__to_search__position_axiom1 :
  (0 <= record_discr__interm_result__to_search__position1)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy13 : natural

logic dummy14 : (int,natural) farray

type result_3__ref = { result_3__content : us_rep2
}

function result_3__ref___projection(a: result_3__ref) : us_rep2 =
  (a).result_3__content

logic r : natural

logic r1 : (int,natural) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic record_discr__search_upto_3__result : bool

logic record_discr__search_upto_3__result1 : us_main_type

logic o : bool

logic o1 : us_main_type

logic o2 : bool

logic o3 : us_main_type

logic o4 : bool

logic o5 : us_main_type

logic o6 : bool

logic o7 : us_main_type

logic temp___251 : int

logic o8 : int

logic i : int

logic result : bool

logic result1 : us_main_type

logic record_discr__search_upto_3__result2 : bool

logic record_discr__search_upto_3__result3 : us_main_type

logic result2 : bool

logic result3 : us_main_type

logic record_discr__search_upto_3__result4 : bool

logic record_discr__search_upto_3__result5 : us_main_type

logic result4 : bool

logic result5 : us_main_type

logic record_discr__search_upto_3__result6 : bool

logic record_discr__search_upto_3__result7 : us_main_type

logic result6 : bool

logic result7 : us_main_type

logic record_discr__search_upto_3__result8 : bool

logic record_discr__search_upto_3__result9 : us_main_type

logic record_discr__search_upto_3__result10 : bool

logic record_discr__search_upto_3__result11 : us_main_type

logic record_discr__search_upto_3__result12 : bool

logic record_discr__search_upto_3__result13 : us_main_type

logic record_discr__search_upto_3__result14 : bool

logic record_discr__search_upto_3__result15 : us_main_type

logic record_discr__search_upto_3__result16 : bool

logic record_discr__search_upto_3__result17 : us_main_type

logic record_discr__search_upto_3__result18 : bool

logic record_discr__search_upto_3__result19 : us_main_type

logic record_discr__search_upto_3__result20 : bool

logic record_discr__search_upto_3__result21 : us_main_type

logic record_discr__search_upto_3__result22 : bool

logic record_discr__search_upto_3__result23 : us_main_type

logic record_discr__search_upto_3__result24 : bool

logic record_discr__search_upto_3__result25 : us_main_type

logic record_discr__search_upto_3__result26 : bool

logic record_discr__search_upto_3__result27 : us_main_type

logic record_discr__search_upto_3__result28 : bool

logic record_discr__search_upto_3__result29 : us_main_type

logic result8 : bool

axiom H : (3 = to_rep(r))

axiom H1 : in_range1(e)

axiom H2 : (((to_rep(r) = 3) and
  ((((record_discr__search_upto_3__result22 = record_discr__search_upto_3__result18) and
  (record_discr__search_upto_3__result23 = record_discr__search_upto_3__result19)) and
  ((record_discr__search_upto_3__result24 = record_discr__search_upto_3__result20) and
  (record_discr__search_upto_3__result25 = record_discr__search_upto_3__result21))) and
  (((to_rep((r1[1])) = e) ->
  ((((record_discr__search_upto_3__result18 = record_discr__search_upto_3__result2) and
  (record_discr__search_upto_3__result19 = record_discr__search_upto_3__result3)) and
  ((record_discr__search_upto_3__result20 = record_discr__search_upto_3__result2) and
  (record_discr__search_upto_3__result21 = record_discr__search_upto_3__result3))) and
  ((({ us_split_discrs1 = { rec__private_record__result_ty__found = o };
  us_split_fields1 = { rec__private_record__result_ty = o1 }
  } = mk_result(of_int(1), 1)) and (((o = true) <-> (of_int(1) = true)) and
  ((of_int(1) = true) -> (get_content({ us_split_discrs1 = {
  rec__private_record__result_ty__found = o }; us_split_fields1 = {
  rec__private_record__result_ty = o1 } }) = 1)))) and
  (((result = record_discr__search_upto_3__result) and
  (result1 = record_discr__search_upto_3__result1)) and
  ((record_discr__search_upto_3__result2 = o) and
  (record_discr__search_upto_3__result3 = o1)))))) and
  ((not (to_rep((r1[1])) = e)) ->
  ((((record_discr__search_upto_3__result18 = record_discr__search_upto_3__result14) and
  (record_discr__search_upto_3__result19 = record_discr__search_upto_3__result15)) and
  ((record_discr__search_upto_3__result20 = record_discr__search_upto_3__result16) and
  (record_discr__search_upto_3__result21 = record_discr__search_upto_3__result17))) and
  (((to_rep((r1[2])) = e) ->
  ((((record_discr__search_upto_3__result14 = record_discr__search_upto_3__result4) and
  (record_discr__search_upto_3__result15 = record_discr__search_upto_3__result5)) and
  ((record_discr__search_upto_3__result16 = record_discr__search_upto_3__result4) and
  (record_discr__search_upto_3__result17 = record_discr__search_upto_3__result5))) and
  ((({ us_split_discrs1 = { rec__private_record__result_ty__found = o2 };
  us_split_fields1 = { rec__private_record__result_ty = o3 }
  } = mk_result(of_int(1), 2)) and (((o2 = true) <-> (of_int(1) = true)) and
  ((of_int(1) = true) -> (get_content({ us_split_discrs1 = {
  rec__private_record__result_ty__found = o2 }; us_split_fields1 = {
  rec__private_record__result_ty = o3 } }) = 2)))) and
  (((result2 = record_discr__search_upto_3__result) and
  (result3 = record_discr__search_upto_3__result1)) and
  ((record_discr__search_upto_3__result4 = o2) and
  (record_discr__search_upto_3__result5 = o3)))))) and
  ((not (to_rep((r1[2])) = e)) ->
  ((((record_discr__search_upto_3__result14 = record_discr__search_upto_3__result10) and
  (record_discr__search_upto_3__result15 = record_discr__search_upto_3__result11)) and
  ((record_discr__search_upto_3__result16 = record_discr__search_upto_3__result12) and
  (record_discr__search_upto_3__result17 = record_discr__search_upto_3__result13))) and
  (((to_rep((r1[3])) = e) ->
  ((((record_discr__search_upto_3__result10 = record_discr__search_upto_3__result6) and
  (record_discr__search_upto_3__result11 = record_discr__search_upto_3__result7)) and
  ((record_discr__search_upto_3__result12 = record_discr__search_upto_3__result6) and
  (record_discr__search_upto_3__result13 = record_discr__search_upto_3__result7))) and
  ((({ us_split_discrs1 = { rec__private_record__result_ty__found = o4 };
  us_split_fields1 = { rec__private_record__result_ty = o5 }
  } = mk_result(of_int(1), 3)) and (((o4 = true) <-> (of_int(1) = true)) and
  ((of_int(1) = true) -> (get_content({ us_split_discrs1 = {
  rec__private_record__result_ty__found = o4 }; us_split_fields1 = {
  rec__private_record__result_ty = o5 } }) = 3)))) and
  (((result4 = record_discr__search_upto_3__result) and
  (result5 = record_discr__search_upto_3__result1)) and
  ((record_discr__search_upto_3__result6 = o4) and
  (record_discr__search_upto_3__result7 = o5)))))) and
  ((not (to_rep((r1[3])) = e)) ->
  ((((record_discr__search_upto_3__result10 = record_discr__search_upto_3__result8) and
  (record_discr__search_upto_3__result11 = record_discr__search_upto_3__result9)) and
  ((record_discr__search_upto_3__result12 = record_discr__search_upto_3__result8) and
  (record_discr__search_upto_3__result13 = record_discr__search_upto_3__result9))) and
  ((({ us_split_discrs1 = { rec__private_record__result_ty__found = o6 };
  us_split_fields1 = { rec__private_record__result_ty = o7 }
  } = mk_result(of_int(0), 1)) and (((o6 = true) <-> (of_int(0) = true)) and
  ((of_int(0) = true) -> (get_content({ us_split_discrs1 = {
  rec__private_record__result_ty__found = o6 }; us_split_fields1 = {
  rec__private_record__result_ty = o7 } }) = 1)))) and
  (((result6 = record_discr__search_upto_3__result) and
  (result7 = record_discr__search_upto_3__result1)) and
  ((record_discr__search_upto_3__result8 = o6) and
  (record_discr__search_upto_3__result9 = o7))))))))))))))) and
  (((record_discr__search_upto_3__result26 = record_discr__search_upto_3__result22) and
  (record_discr__search_upto_3__result27 = record_discr__search_upto_3__result23)) and
  ((record_discr__search_upto_3__result28 = record_discr__search_upto_3__result24) and
  (record_discr__search_upto_3__result29 = record_discr__search_upto_3__result25))))

axiom H3 : (record_discr__search_upto_3__result26 = true)

axiom H4 : ((o8 = get_content({ us_split_discrs1 = {
  rec__private_record__result_ty__found =
  record_discr__search_upto_3__result26 }; us_split_fields1 = {
  rec__private_record__result_ty = record_discr__search_upto_3__result27 }
  })) and in_range2(o8))

axiom H5 : (((o8 <= to_rep(r)) -> (result8 = true)) and
  ((not (o8 <= to_rep(r))) -> (result8 = false)))

axiom H6 : (result8 = true)

axiom H7 : ((temp___251 = get_content({ us_split_discrs1 = {
  rec__private_record__result_ty__found =
  record_discr__search_upto_3__result26 }; us_split_fields1 = {
  rec__private_record__result_ty = record_discr__search_upto_3__result27 }
  })) and in_range2(temp___251))

 (* File "private_record.ads", line 2, characters 0-0 *)
goal WP_parameter_def : (1 <= temp___251)
