(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun some_available (Int) Bool)
(declare-fun some_available__function_guard (Bool Int) Bool)
(declare-sort ext_account_num 0)
(declare-fun ext_account_numqtint (ext_account_num) Int)
(assert (forall ((i ext_account_num)) (and (<= 0 (ext_account_numqtint i)) (<= (ext_account_numqtint i) 200000))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 200000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (ext_account_num ext_account_num) Bool)
(declare-const dummy ext_account_num)
(declare-datatypes () ((ext_account_num__ref (mk_ext_account_num__ref (ext_account_num__content ext_account_num)))))
(define-fun ext_account_num__ref___projection ((a ext_account_num__ref)) ext_account_num (ext_account_num__content a))
(define-fun dynamic_invariant ((temp___expr_241 Int) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool (=> (or (= temp___is_init_237 true) (<= 0 200000)) (in_range1 temp___expr_241)))
(assert true)
(assert (forall ((database__availability__first_available Int)) (! (= (= (some_available database__availability__first_available) true) (not (= database__availability__first_available 0))) :pattern ((some_available database__availability__first_available)))))
(define-fun to_rep ((x ext_account_num)) Int (ext_account_numqtint x))
(declare-fun of_rep (Int) ext_account_num)
(assert (forall ((x ext_account_num)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x ext_account_num)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__database__availability__account_link__available Bool) (rec__database__availability__account_link__prev ext_account_num) (rec__database__availability__account_link__next ext_account_num)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) Bool (rec__database__availability__account_link__available a))
(define-fun us_split_fields_Prev__projection ((a us_split_fields)) ext_account_num (rec__database__availability__account_link__prev a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) ext_account_num (rec__database__availability__account_link__next a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (rec__database__availability__account_link__available (us_split_fields1 a)) (rec__database__availability__account_link__available (us_split_fields1 b))) (= (to_rep (rec__database__availability__account_link__prev (us_split_fields1 a))) (to_rep (rec__database__availability__account_link__prev (us_split_fields1 b))))) (= (to_rep (rec__database__availability__account_link__next (us_split_fields1 a))) (to_rep (rec__database__availability__account_link__next (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const database__availability__account_link__available__first__bit Int)
(declare-const database__availability__account_link__available__last__bit Int)
(declare-const database__availability__account_link__available__position Int)
(assert (<= 0 database__availability__account_link__available__first__bit))
(assert (< database__availability__account_link__available__first__bit database__availability__account_link__available__last__bit))
(assert (<= 0 database__availability__account_link__available__position))
(declare-const database__availability__account_link__prev__first__bit Int)
(declare-const database__availability__account_link__prev__last__bit Int)
(declare-const database__availability__account_link__prev__position Int)
(assert (<= 0 database__availability__account_link__prev__first__bit))
(assert (< database__availability__account_link__prev__first__bit database__availability__account_link__prev__last__bit))
(assert (<= 0 database__availability__account_link__prev__position))
(declare-const database__availability__account_link__next__first__bit Int)
(declare-const database__availability__account_link__next__last__bit Int)
(declare-const database__availability__account_link__next__position Int)
(assert (<= 0 database__availability__account_link__next__first__bit))
(assert (< database__availability__account_link__next__first__bit database__availability__account_link__next__last__bit))
(assert (<= 0 database__availability__account_link__next__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((account_link__ref (mk_account_link__ref (account_link__content us_rep)))))
(define-fun account_link__ref___projection ((a account_link__ref)) us_rep (account_link__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_163 Int)) (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (= (bool_eq (select a temp___idx_163) (select b (+ (- b__first a__first) temp___idx_163))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_163 Int)) (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (= (bool_eq (select a temp___idx_163) (select b (+ (- b__first a__first) temp___idx_163))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun is_available (Int (Array Int us_rep)) Bool)
(declare-fun is_available__function_guard (Bool Int (Array Int us_rep)) Bool)
(declare-sort account_num 0)
(declare-fun account_numqtint (account_num) Int)
(assert (forall ((i account_num)) (and (<= 1 (account_numqtint i)) (<= (account_numqtint i) 200000))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 200000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (account_num account_num) Bool)
(declare-const dummy2 account_num)
(declare-datatypes () ((account_num__ref (mk_account_num__ref (account_num__content account_num)))))
(define-fun account_num__ref___projection ((a account_num__ref)) account_num (account_num__content a))
(define-fun dynamic_invariant1 ((temp___expr_248 Int) (temp___is_init_244 Bool) (temp___skip_constant_245 Bool) (temp___do_toplevel_246 Bool) (temp___do_typ_inv_247 Bool)) Bool (=> (or (= temp___is_init_244 true) (<= 1 200000)) (in_range2 temp___expr_248)))
(assert true)
(assert (forall ((account Int)) (forall ((database__availability__links (Array Int us_rep))) (! (= (= (is_available account database__availability__links) true) (= (rec__database__availability__account_link__available (us_split_fields1 (select database__availability__links account))) true)) :pattern ((is_available account database__availability__links))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const links (Array Int us_rep))
(declare-const first_available Int)
(declare-const account Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 (Array Int us_rep))
(declare-const o3 Int)
(declare-const o4 Bool)
(declare-const o5 ext_account_num)
(declare-const o6 ext_account_num)
(declare-const o7 Bool)
(declare-const o8 ext_account_num)
(declare-const o9 ext_account_num)
(declare-const o10 ext_account_num)
(declare-const o11 Int)
(declare-const result Int)
(declare-const account1 Int)
(declare-const result1 (Array Int us_rep))
(declare-const links1 (Array Int us_rep))
(declare-const result2 Int)
(declare-const first_available1 Int)
(declare-const links2 (Array Int us_rep))
(declare-const first_available2 Int)
(declare-const account2 Int)
(declare-const links3 (Array Int us_rep))
(declare-const first_available3 Int)
(declare-const account3 Int)
(assert (in_range1 first_available))
(assert (=> (<= 1 200000) (in_range2 account)))
(assert (= (some_available first_available) true))
(assert (and (= o first_available) (in_range2 first_available)))
(assert (= (mk_int__ref result) (mk_int__ref account)))
(assert (= account1 o))
(assert (and (<= 1 first_available) (<= first_available 200000)))
(assert (= o1 first_available))
(assert (= o2 (store links o1 (mk___rep (mk___split_fields (distinct 0 0) (rec__database__availability__account_link__prev (us_split_fields1 (select links first_available))) (rec__database__availability__account_link__next (us_split_fields1 (select links first_available))))))))
(assert (= (mk_map__ref result1) (mk_map__ref links)))
(assert (= links1 o2))
(assert (and (<= 1 first_available) (<= first_available 200000)))
(assert (= o3 first_available))
(assert (= (mk___rep (mk___split_fields o4 o5 o6)) (select links1 o3)))
(assert (= o4 o7))
(assert (= o5 o8))
(assert (= o6 o9))
(assert (= o10 o9))
(assert (= o11 (to_rep o10)))
(assert (= result2 first_available))
(assert (= first_available1 o11))
(assert (= account1 account2))
(assert (= first_available2 first_available1))
(assert (= links1 links2))
(assert (= account3 account1))
(assert (= first_available3 first_available1))
(assert (= links3 links1))
(declare-const act Int)
(assert (<= 1 act))
(assert (<= act 200000))
(assert (not (= act account2)))
(assert (= (rec__database__availability__account_link__available (us_split_fields1 (select links2 act))) true))
(assert (not (= (rec__database__availability__account_link__available (us_split_fields1 (select links act))) true)))
(check-sat)
(exit)
