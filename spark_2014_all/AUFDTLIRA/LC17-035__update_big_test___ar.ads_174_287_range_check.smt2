(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort et1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range1 temp___expr_204)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___660 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp___669 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp___678 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp___687 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___662 (Array Int et1))) (forall ((temp___663 Int) (temp___664 Int) (temp___665 Int) (temp___666 Int)) (let ((temp___661 (temp___660 temp___662 temp___663 temp___664 temp___665 temp___666))) (=> (and (and (and (dynamic_invariant temp___663 true true true true) (dynamic_invariant1 temp___664 true true true true)) (dynamic_invariant temp___665 true true true true)) (dynamic_invariant1 temp___666 true true true true)) (forall ((temp___667 Int)) (ite (= temp___667 temp___665) (= (to_rep (select temp___661 temp___667)) temp___666) (ite (= temp___667 temp___663) (= (to_rep (select temp___661 temp___667)) temp___664) (= (select temp___661 temp___667) (select temp___662 temp___667))))))))))
(assert (forall ((temp___671 (Array Int et1))) (forall ((temp___672 Int) (temp___673 Int) (temp___674 Int) (temp___675 Int)) (let ((temp___670 (temp___669 temp___671 temp___672 temp___673 temp___674 temp___675))) (=> (and (and (and (dynamic_invariant temp___672 true true true true) (dynamic_invariant1 temp___673 true true true true)) (dynamic_invariant temp___674 true true true true)) (dynamic_invariant1 temp___675 true true true true)) (forall ((temp___676 Int)) (ite (= temp___676 temp___674) (= (to_rep (select temp___670 temp___676)) temp___675) (ite (= temp___676 temp___672) (= (to_rep (select temp___670 temp___676)) temp___673) (= (select temp___670 temp___676) (select temp___671 temp___676))))))))))
(assert (forall ((temp___680 (Array Int et1))) (forall ((temp___681 Int) (temp___682 Int) (temp___683 Int) (temp___684 Int)) (let ((temp___679 (temp___678 temp___680 temp___681 temp___682 temp___683 temp___684))) (=> (and (and (and (dynamic_invariant temp___681 true true true true) (dynamic_invariant1 temp___682 true true true true)) (dynamic_invariant temp___683 true true true true)) (dynamic_invariant1 temp___684 true true true true)) (forall ((temp___685 Int)) (ite (= temp___685 temp___683) (= (to_rep (select temp___679 temp___685)) temp___684) (ite (= temp___685 temp___681) (= (to_rep (select temp___679 temp___685)) temp___682) (= (select temp___679 temp___685) (select temp___680 temp___685))))))))))
(assert (forall ((temp___689 (Array Int et1))) (forall ((temp___690 Int) (temp___691 Int) (temp___692 Int) (temp___693 Int)) (let ((temp___688 (temp___687 temp___689 temp___690 temp___691 temp___692 temp___693))) (=> (and (and (and (dynamic_invariant temp___690 true true true true) (dynamic_invariant1 temp___691 true true true true)) (dynamic_invariant temp___692 true true true true)) (dynamic_invariant1 temp___693 true true true true)) (forall ((temp___694 Int)) (ite (= temp___694 temp___692) (= (to_rep (select temp___688 temp___694)) temp___693) (ite (= temp___694 temp___690) (= (to_rep (select temp___688 temp___694)) temp___691) (= (select temp___688 temp___694) (select temp___689 temp___694))))))))))
(declare-const a (Array Int et1))
(declare-const j Int)
(declare-const f Int)
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 et1)
(declare-const o5 (Array Int et1))
(declare-const o6 Int)
(declare-const temp___4402 (Array Int et1))
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const temp___4400 (Array Int et1))
(declare-const result (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 Int)
(declare-const j2 Int)
(declare-const result3 Int)
(declare-const f1 Int)
(declare-const result4 Int)
(declare-const f2 Int)
(declare-const result5 (Array Int et1))
(declare-const a2 (Array Int et1))
(declare-const a3 (Array Int et1))
(declare-const j3 Int)
(declare-const f3 Int)
(declare-const a4 (Array Int et1))
(declare-const j4 Int)
(declare-const f4 Int)
(declare-const result6 Bool)
(declare-const result7 Bool)
(define-fun f5 () int__ref (mk_int__ref f))
(define-fun j5 () int__ref (mk_int__ref j))
(assert (in_range i))
(assert (in_range1 e))
(assert (=> (<= 1 10) (in_range j)))
(assert (=> (<= 0 99) (in_range1 f)))
(assert (= (to_rep o) e))
(assert (= o1 (store a i o)))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 o1))
(assert (=> (= i 10) (= (mk_int__ref result1) j5)))
(assert (=> (= i 10) (= j1 1)))
(assert (=> (not (= i 10)) (and (= o2 (+ i 1)) (in_range (+ i 1)))))
(assert (=> (not (= i 10)) (= (mk_int__ref result2) j5)))
(assert (=> (not (= i 10)) (= j2 o2)))
(assert (=> (not (= i 10)) (= j1 j2)))
(assert (=> (= e 0) (= (mk_int__ref result3) f5)))
(assert (=> (= e 0) (= f1 99)))
(assert (=> (not (= e 0)) (and (= o3 (- e 1)) (in_range1 (- e 1)))))
(assert (=> (not (= e 0)) (= (mk_int__ref result4) f5)))
(assert (=> (not (= e 0)) (= f2 o3)))
(assert (=> (not (= e 0)) (= f1 f2)))
(assert (= (to_rep o4) f1))
(assert (= o5 (store a1 j1 o4)))
(assert (= a1 result5))
(assert (= a2 o5))
(assert (= f1 f3))
(assert (= j1 j3))
(assert (= a2 a3))
(assert (= f4 f1))
(assert (= j4 j1))
(assert (= a4 a2))
(assert (=> (< i 10) (=> (< 0 e) (and (= o7 (- e 1)) (in_range1 (- e 1))))))
(assert (=> (< i 10) (=> (< 0 e) (and (= o8 (+ i 1)) (in_range (+ i 1))))))
(assert (=> (< i 10) (=> (< 0 e) (= temp___4400 (temp___660 a i e o8 o7)))))
(assert (=> (< i 10) (=> (< 0 e) (= result7 (bool_eq a3 1 10 temp___4400 1 10)))))
(assert (=> (< i 10) (=> (not (< 0 e)) (= result7 false))))
(assert (=> (< i 10) (=> (= result7 true) (= result6 true))))
(assert (=> (< i 10) (=> (not (= result7 true)) (=> (= e 0) (and (= o6 (+ i 1)) (in_range (+ i 1)))))))
(assert (=> (< i 10) (=> (not (= result7 true)) (=> (= e 0) (= temp___4402 (temp___669 a i e o6 99))))))
(assert (=> (< i 10) (=> (not (= result7 true)) (=> (= e 0) (= result6 (bool_eq a3 1 10 temp___4402 1 10))))))
(assert (=> (< i 10) (=> (not (= result7 true)) (=> (not (= e 0)) (= result6 false)))))
(assert (=> (not (< i 10)) (= result6 false)))
(assert (not (= result6 true)))
(assert (= i 10))
(assert (< 0 e))
(assert (not (in_range1 (- e 1))))
(check-sat)
(exit)
