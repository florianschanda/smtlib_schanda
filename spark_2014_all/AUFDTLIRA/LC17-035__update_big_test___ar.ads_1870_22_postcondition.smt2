(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort it2 0)
(declare-fun it2qtint (it2) Int)
(assert (forall ((i it2)) (and (<= 5 (it2qtint i)) (<= (it2qtint i) 50))))
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range1 temp___expr_183)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (et1 et1) Bool)
(declare-const dummy2 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant2 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range2 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort et2 0)
(declare-fun et2qtint (et2) Int)
(assert (forall ((i et2)) (and (<= 1 (et2qtint i)) (<= (et2qtint i) 25))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 25)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (et2 et2) Bool)
(declare-const dummy3 et2)
(declare-datatypes () ((et2__ref (mk_et2__ref (et2__content et2)))))
(define-fun et2__ref___projection ((a et2__ref)) et2 (et2__content a))
(declare-sort enum1t 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (enum1t enum1t) Bool)
(declare-const dummy4 enum1t)
(declare-datatypes () ((enum1t__ref (mk_enum1t__ref (enum1t__content enum1t)))))
(define-fun enum1t__ref___projection ((a enum1t__ref)) enum1t (enum1t__content a))
(define-fun to_rep1 ((x et2)) Int (et2qtint x))
(declare-fun of_rep1 (Int) et2)
(assert (forall ((x et2)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x et2)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ar__rec1t__f1 et1) (rec__ar__rec1t__g1 et2)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) et1 (rec__ar__rec1t__f1 a))
(define-fun us_split_fields_G1__projection ((a us_split_fields)) et2 (rec__ar__rec1t__g1 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__ar__rec1t__f1 (us_split_fields1 a))) (to_rep (rec__ar__rec1t__f1 (us_split_fields1 b)))) (= (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 a))) (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const ar__rec1t__f1__first__bit Int)
(declare-const ar__rec1t__f1__last__bit Int)
(declare-const ar__rec1t__f1__position Int)
(assert (<= 0 ar__rec1t__f1__first__bit))
(assert (< ar__rec1t__f1__first__bit ar__rec1t__f1__last__bit))
(assert (<= 0 ar__rec1t__f1__position))
(declare-const ar__rec1t__g1__first__bit Int)
(declare-const ar__rec1t__g1__last__bit Int)
(declare-const ar__rec1t__g1__position Int)
(assert (<= 0 ar__rec1t__g1__first__bit))
(assert (< ar__rec1t__g1__first__bit ar__rec1t__g1__last__bit))
(assert (<= 0 ar__rec1t__g1__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((rec1t__ref (mk_rec1t__ref (rec1t__content us_rep)))))
(define-fun rec1t__ref___projection ((a rec1t__ref)) us_rep (rec1t__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (bool_eq (select a temp___idx_158) (select b (+ (- b__first a__first) temp___idx_158))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (bool_eq (select a temp___idx_158) (select b (+ (- b__first a__first) temp___idx_158))) true))))))))
(declare-fun to_rep2 (enum1t) Int)
(declare-fun of_rep2 (Int) enum1t)
(assert (forall ((x enum1t)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x enum1t)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-const dummy6 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq6 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__ar__rofaofr1__a1 (Array Int us_rep)) (rec__ar__rofaofr1__b1 Bool) (rec__ar__rofaofr1__c1 enum1t)))))
(define-fun us_split_fields_A1__projection ((a us_split_fields2)) (Array Int us_rep) (rec__ar__rofaofr1__a1 a))
(define-fun us_split_fields_B1__projection ((a us_split_fields2)) Bool (rec__ar__rofaofr1__b1 a))
(define-fun us_split_fields_C1__projection ((a us_split_fields2)) enum1t (rec__ar__rofaofr1__c1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___10__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (bool_eq1 (rec__ar__rofaofr1__a1 (us_split_fields3 a)) 1 10 (rec__ar__rofaofr1__a1 (us_split_fields3 b)) 1 10) true) (= (rec__ar__rofaofr1__b1 (us_split_fields3 a)) (rec__ar__rofaofr1__b1 (us_split_fields3 b)))) (= (to_rep2 (rec__ar__rofaofr1__c1 (us_split_fields3 a))) (to_rep2 (rec__ar__rofaofr1__c1 (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const ar__rofaofr1__a1__first__bit Int)
(declare-const ar__rofaofr1__a1__last__bit Int)
(declare-const ar__rofaofr1__a1__position Int)
(assert (<= 0 ar__rofaofr1__a1__first__bit))
(assert (< ar__rofaofr1__a1__first__bit ar__rofaofr1__a1__last__bit))
(assert (<= 0 ar__rofaofr1__a1__position))
(declare-const ar__rofaofr1__b1__first__bit Int)
(declare-const ar__rofaofr1__b1__last__bit Int)
(declare-const ar__rofaofr1__b1__position Int)
(assert (<= 0 ar__rofaofr1__b1__first__bit))
(assert (< ar__rofaofr1__b1__first__bit ar__rofaofr1__b1__last__bit))
(assert (<= 0 ar__rofaofr1__b1__position))
(declare-const ar__rofaofr1__c1__first__bit Int)
(declare-const ar__rofaofr1__c1__last__bit Int)
(declare-const ar__rofaofr1__c1__position Int)
(assert (<= 0 ar__rofaofr1__c1__first__bit))
(assert (< ar__rofaofr1__c1__first__bit ar__rofaofr1__c1__last__bit))
(assert (<= 0 ar__rofaofr1__c1__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((rofaofr1__ref (mk_rofaofr1__ref (rofaofr1__content us_rep1)))))
(define-fun rofaofr1__ref___projection ((a rofaofr1__ref)) us_rep1 (rofaofr1__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_164 Int)) (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last)) (= (bool_eq2 (select a temp___idx_164) (select b (+ (- b__first a__first) temp___idx_164))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_164 Int)) (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last)) (= (bool_eq2 (select a temp___idx_164) (select b (+ (- b__first a__first) temp___idx_164))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp_____aggregate_def_4292 ((Array Int us_rep) Int us_rep) (Array Int us_rep))
(define-fun dynamic_invariant3 ((temp___expr_211 Int) (temp___is_init_207 Bool) (temp___skip_constant_208 Bool) (temp___do_toplevel_209 Bool) (temp___do_typ_inv_210 Bool)) Bool (=> (or (= temp___is_init_207 true) (<= 1 25)) (in_range3 temp___expr_211)))
(define-fun dynamic_invariant4 ((temp___expr_232 Int) (temp___is_init_228 Bool) (temp___skip_constant_229 Bool) (temp___do_toplevel_230 Bool) (temp___do_typ_inv_231 Bool)) Bool (=> (or (= temp___is_init_228 true) (<= 0 6)) (in_range4 temp___expr_232)))
(assert (forall ((temp___4294 (Array Int us_rep))) (forall ((temp___4295 Int)) (forall ((temp___4296 us_rep)) (let ((temp___4293 (temp_____aggregate_def_4292 temp___4294 temp___4295 temp___4296))) (=> (dynamic_invariant temp___4295 true true true true) (forall ((temp___4297 Int)) (ite (= temp___4297 temp___4295) (= (select temp___4293 temp___4297) temp___4296) (= (select temp___4293 temp___4297) (select temp___4294 temp___4297))))))))))
(declare-const a (Array Int us_rep1))
(declare-const o et1)
(declare-const o1 et1)
(declare-const o2 et2)
(declare-const o3 et1)
(declare-const o4 et2)
(declare-const o5 (Array Int us_rep))
(declare-const o6 (Array Int us_rep))
(declare-const o7 Bool)
(declare-const o8 enum1t)
(declare-const o9 (Array Int us_rep))
(declare-const o10 Bool)
(declare-const o11 enum1t)
(declare-const o12 (Array Int us_rep1))
(declare-const result (Array Int us_rep1))
(declare-const a1 (Array Int us_rep1))
(declare-const a2 (Array Int us_rep1))
(declare-const a3 (Array Int us_rep1))
(assert (in_range1 i))
(assert (in_range j))
(assert (in_range2 e))
(assert (= (to_rep o) e))
(assert (= o o1))
(assert (= (rec__ar__rec1t__g1 (us_split_fields1 (select (rec__ar__rofaofr1__a1 (us_split_fields3 (select a i))) j))) o2))
(assert (= o3 o1))
(assert (= o4 o2))
(assert (= o5 (store (rec__ar__rofaofr1__a1 (us_split_fields3 (select a i))) j (mk___rep (mk___split_fields o3 o4)))))
(assert (= o5 o6))
(assert (= (rec__ar__rofaofr1__b1 (us_split_fields3 (select a i))) o7))
(assert (= (rec__ar__rofaofr1__c1 (us_split_fields3 (select a i))) o8))
(assert (= o9 o6))
(assert (= o10 o7))
(assert (= o11 o8))
(assert (= o12 (store a i (mk___rep1 (mk___split_fields1 o9 o10 o11)))))
(assert (= result a))
(assert (= a1 o12))
(assert (= a1 a2))
(assert (= a3 a1))
(assert (not (= (bool_eq2 (select a2 i) (mk___rep1 (mk___split_fields1 (temp_____aggregate_def_4292 (rec__ar__rofaofr1__a1 (us_split_fields3 (select a i))) j (mk___rep (mk___split_fields (of_rep e) (rec__ar__rec1t__g1 (us_split_fields1 (select (rec__ar__rofaofr1__a1 (us_split_fields3 (select a i))) j)))))) (rec__ar__rofaofr1__b1 (us_split_fields3 (select a i))) (rec__ar__rofaofr1__c1 (us_split_fields3 (select a i)))))) true)))
(check-sat)
(exit)
