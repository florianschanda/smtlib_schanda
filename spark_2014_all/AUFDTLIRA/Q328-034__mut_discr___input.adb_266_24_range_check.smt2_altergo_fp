(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_upper : int -> int

logic to_upper__function_guard : int, int -> prop

axiom to_upper__post_axiom :
  (forall item:int [to_upper(item)]. (in_range3(item) ->
  in_range3(to_upper(item))))

logic v__first : integer

logic v__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type printable_character

predicate in_range5(x: int) = ((33 <= x) and (x <= 126))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : printable_character, printable_character -> bool

logic dummy6 : printable_character

type printable_character__ref = { printable_character__content :
printable_character
}

function printable_character__ref___projection(a: printable_character__ref) : printable_character =
  (a).printable_character__content

type tTlineSP1

predicate in_range6(x: int) = ((1 <= x) and (x <= 1024))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tTlineSP1, tTlineSP1 -> bool

logic dummy7 : tTlineSP1

type tTlineSP1__ref = { tTlineSP1__content : tTlineSP1
}

function tTlineSP1__ref___projection(a: tTlineSP1__ref) : tTlineSP1 =
  (a).tTlineSP1__content

type tfirst_charS

predicate in_range7(x: int) = ((1 <= x) and (x <= 1025))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tfirst_charS, tfirst_charS -> bool

logic dummy8 : tfirst_charS

type tfirst_charS__ref = { tfirst_charS__content : tfirst_charS
}

function tfirst_charS__ref___projection(a: tfirst_charS__ref) : tfirst_charS =
  (a).tfirst_charS__content

type tlast_charS

predicate in_range8(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tlast_charS, tlast_charS -> bool

logic dummy9 : tlast_charS

type tlast_charS__ref = { tlast_charS__content : tlast_charS
}

function tlast_charS__ref___projection(a: tlast_charS__ref) : tlast_charS =
  (a).tlast_charS__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r25b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r26b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy10 : integer

type t27b__ref = { t27b__content : integer
}

function t27b__ref___projection(a: t27b__ref) : integer = (a).t27b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq10 : us_t1, us_t1 -> bool

logic dummy11 : (int,character) farray

logic dummy12 : t1

type t28b__ref = { t28b__content : us_t1
}

function t28b__ref___projection(a: t28b__ref) : us_t1 = (a).t28b__content

logic s__first : integer

logic s__last : integer

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy13 : integer

type t30b__ref = { t30b__content : integer
}

function t30b__ref___projection(a: t30b__ref) : integer = (a).t30b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq15(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq12 : us_t2, us_t2 -> bool

logic dummy14 : (int,character) farray

logic dummy15 : t2

type t31b__ref = { t31b__content : us_t2
}

function t31b__ref___projection(a: t31b__ref) : us_t2 = (a).t31b__content

logic temp___616 : int, int, int -> us_t2

axiom def_axiom :
  (forall temp___618:int. forall temp___619:int. forall temp___620:int.
  ((dynamic_property(1, 2147483647, temp___619, temp___620) ->
  ((to_rep1(first4((temp___616(temp___618, temp___619,
  temp___620)).rt2)) = temp___619) and (to_rep1(last4((temp___616(temp___618,
  temp___619, temp___620)).rt2)) = temp___620))) and
  (forall temp___621:int. (((temp___616(temp___618, temp___619,
  temp___620)).elts2[temp___621]) = of_rep(temp___618)))))

logic v : (int,character) farray

logic size : int

logic line : (int,character) farray

logic first_char : int

logic last_char : int

logic line_num : int

logic start : int

logic current_char : int

logic s : (int,character) farray

logic i : int

logic temp___609 : int

logic temp___608 : (int,character) farray

logic temp___607 : int

logic temp___606 : int

logic temp___605 : int

logic o : int

logic o1 : int

logic o2 : character

logic o3 : int

logic temp___610 : int

logic o4 : int

logic o5 : int

logic o6 : character

logic o7 : int

logic o8 : bool

logic o9 : (int,character) farray

logic temp___626 : (int,character) farray

logic temp___6261 : t1

logic input__next_word__B_5__s__assume : (int,character) farray

logic input__next_word__B_5__s__assume1 : t

logic temp___612 : (int,character) farray

logic o10 : int

logic o11 : character

logic o12 : int

logic o13 : int

logic o14 : character

logic o15 : int

logic o16 : (int,character) farray

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic us : int

logic o22 : int

logic o23 : int

logic o24 : int

logic o25 : int

logic o26 : int

logic o27 : int

logic o28 : int

logic o29 : int

logic o30 : int

logic temp___622 : (int,character) farray

logic temp___6221 : t2

logic temp___623 : (int,character) farray

logic temp___6231 : t2

logic o31 : int

logic o32 : int

logic o33 : int

logic o34 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : integer

logic o39 : int

logic temp___624 : (int,character) farray

logic temp___6241 : t

logic temp___625 : (int,character) farray

logic temp___6251 : t

logic o40 : (int,character) farray

logic o41 : int

logic o42 : int

logic line1 : (int,character) farray

logic first_char1 : int

logic last_char1 : int

logic line_num1 : int

logic current_char1 : int

logic first_char2 : int

logic last_char2 : int

logic line_num2 : int

logic current_char2 : int

logic line2 : (int,character) farray

logic first_char3 : int

logic last_char3 : int

logic line_num3 : int

logic current_char3 : int

logic line3 : (int,character) farray

logic first_char4 : int

logic last_char4 : int

logic line_num4 : int

logic current_char4 : int

logic line4 : (int,character) farray

logic first_char5 : int

logic last_char5 : int

logic line_num5 : int

logic current_char5 : int

logic line5 : (int,character) farray

logic first_char6 : int

logic last_char6 : int

logic line_num6 : int

logic current_char6 : int

logic line6 : (int,character) farray

logic first_char7 : int

logic last_char7 : int

logic line_num7 : int

logic current_char7 : int

logic result : int

logic first_char8 : int

logic result1 : int

logic first_char9 : int

logic first_char10 : int

logic first_char11 : int

logic result2 : int

logic start1 : int

logic result3 : bool

logic first_char12 : int

logic result4 : int

logic first_char13 : int

logic result5 : bool

logic first_char14 : int

logic first_char15 : int

logic first_char16 : int

logic first_char17 : int

logic result6 : (int,character) farray

logic s1 : (int,character) farray

logic result7 : int

logic i1 : int

logic s2 : (int,character) farray

logic i2 : int

logic result8 : (int,character) farray

logic s3 : (int,character) farray

logic s4 : (int,character) farray

logic i3 : int

logic s5 : (int,character) farray

logic i4 : int

logic s6 : (int,character) farray

logic i5 : int

logic s7 : (int,character) farray

logic i6 : int

logic result9 : bool

logic result10 : (int,character) farray

logic v1 : (int,character) farray

logic result11 : int

logic size1 : int

logic v2 : (int,character) farray

logic size2 : int

logic line7 : (int,character) farray

logic first_char18 : int

logic last_char8 : int

logic line_num8 : int

logic start2 : int

logic current_char8 : int

logic s8 : (int,character) farray

logic i7 : int

logic v3 : (int,character) farray

logic size3 : int

logic line8 : (int,character) farray

logic first_char19 : int

logic last_char9 : int

logic line_num9 : int

logic start3 : int

logic current_char9 : int

logic s9 : (int,character) farray

logic i8 : int

axiom H : in_range7(first_char)

axiom H1 : in_range8(last_char)

axiom H2 : in_range4(line_num)

axiom H3 : dynamic_property(1, 2147483647, to_rep1(v__first),
  to_rep1(v__last))

axiom H4 : (((- 2147483648) <= 2147483647) -> in_range1(size))

axiom H5 : (((to_rep1(v__first) <= to_rep1(v__last)) ->
  (1024 <= ((to_rep1(v__last) - to_rep1(v__first)) + 1))) and
  ((not (to_rep1(v__first) <= to_rep1(v__last))) -> (1024 <= 0)))

axiom H6 : ((0 <= 2147483647) -> in_range4(start))

axiom H7 : ((0 <= 255) -> in_range3(current_char))

axiom H8 : ((first_char <= 1024) -> (temp___609 = first_char))

axiom H9 : ((first_char <= 1024) -> (temp___608 = line))

axiom H10 : ((first_char <= 1024) -> (temp___607 = line_num))

axiom H11 : ((first_char <= 1024) -> (temp___606 = current_char))

axiom H12 : ((first_char <= 1024) -> (temp___605 = last_char))

axiom H13 : ((first_char <= 1024) -> ((((in_range8(last_char2) and
  ((0 <= 255) -> in_range3(current_char2))) and in_range4(line_num2)) and
  in_range7(first_char2)) and (first_char2 <= 1024)))

axiom H14 : ((first_char <= 1024) -> (((in_range3(current_char3) and
  in_range8(last_char3)) and in_range4(line_num3)) and
  in_range7(first_char3)))

axiom H15 : ((first_char <= 1024) -> (in_range5(current_char3) or
  ((not in_range5(current_char3)) and (not (first_char3 <= 1024)))))

axiom H16 : ((first_char <= 1024) -> (current_char4 = current_char3))

axiom H17 : ((first_char <= 1024) -> (line_num4 = line_num3))

axiom H18 : ((first_char <= 1024) -> (last_char4 = last_char3))

axiom H19 : ((first_char <= 1024) -> (first_char4 = first_char3))

axiom H20 : ((first_char <= 1024) -> (line3 = line2))

axiom H21 : ((first_char <= 1024) -> (current_char5 = current_char3))

axiom H22 : ((first_char <= 1024) -> (line_num5 = line_num3))

axiom H23 : ((first_char <= 1024) -> (last_char5 = last_char3))

axiom H24 : ((first_char <= 1024) -> (first_char5 = first_char3))

axiom H25 : ((first_char <= 1024) -> (line4 = line2))

axiom H26 : ((first_char <= 1024) -> (current_char6 = current_char4))

axiom H27 : ((first_char <= 1024) -> (line_num6 = line_num4))

axiom H28 : ((first_char <= 1024) -> (last_char6 = last_char4))

axiom H29 : ((first_char <= 1024) -> (first_char6 = first_char4))

axiom H30 : ((first_char <= 1024) -> (line5 = line3))

axiom H31 : ((first_char <= 1024) -> (current_char7 = current_char5))

axiom H32 : ((first_char <= 1024) -> (line_num7 = line_num5))

axiom H33 : ((first_char <= 1024) -> (last_char7 = last_char5))

axiom H34 : ((first_char <= 1024) -> (first_char7 = first_char5))

axiom H35 : ((first_char <= 1024) -> (line6 = line4))

axiom H36 : ((not (first_char <= 1024)) -> (current_char6 = current_char))

axiom H37 : ((not (first_char <= 1024)) -> (line_num6 = line_num))

axiom H38 : ((not (first_char <= 1024)) -> (last_char6 = last_char))

axiom H39 : ((not (first_char <= 1024)) -> (first_char6 = first_char))

axiom H40 : ((not (first_char <= 1024)) -> (line5 = line))

axiom H41 : ((not (first_char <= 1024)) -> (current_char7 = current_char1))

axiom H42 : ((not (first_char <= 1024)) -> (line_num7 = line_num1))

axiom H43 : ((not (first_char <= 1024)) -> (last_char7 = last_char1))

axiom H44 : ((not (first_char <= 1024)) -> (first_char7 = first_char1))

axiom H45 : ((not (first_char <= 1024)) -> (line6 = line1))

axiom H46 : ((1 <= (first_char6 - 1)) -> ((o = (first_char6 - 1)) and
  in_range7((first_char6 - 1))))

axiom H47 : ((1 <= (first_char6 - 1)) -> (result = first_char6))

axiom H48 : ((1 <= (first_char6 - 1)) -> (first_char8 = o))

axiom H49 : ((1 <= (first_char6 - 1)) -> (first_char10 = first_char8))

axiom H50 : ((1 <= (first_char6 - 1)) -> (first_char11 = first_char8))

axiom H51 : ((not (1 <= (first_char6 - 1))) -> (result1 = first_char6))

axiom H52 : ((not (1 <= (first_char6 - 1))) -> (first_char9 = 1))

axiom H53 : ((not (1 <= (first_char6 - 1))) -> (first_char10 = first_char9))

axiom H54 : ((not (1 <= (first_char6 - 1))) -> (first_char11 = first_char9))

axiom H55 : (result2 = start)

axiom H56 : (start1 = first_char10)

axiom H57 : ((first_char10 <= 1024) -> ((1 <= first_char10) and
  (first_char10 <= 1024)))

axiom H58 : ((first_char10 <= 1024) -> (o1 = first_char10))

axiom H59 : ((first_char10 <= 1024) -> (o2 = (line5[o1])))

axiom H60 : ((first_char10 <= 1024) -> (o3 = to_rep(o2)))

axiom H61 : ((first_char10 <= 1024) -> ((in_range5(o3) ->
  (result3 = true)) and ((not in_range5(o3)) -> (result3 = false))))

axiom H62 : ((not (first_char10 <= 1024)) -> (result3 = false))

axiom H63 : ((result3 = true) -> (temp___610 = first_char10))

axiom H64 : ((result3 = true) -> (in_range7(first_char12) and
  ((first_char12 <= 1024) and in_range5(to_rep((line5[first_char12]))))))

axiom H65 : ((result3 = true) -> ((o4 = (first_char12 + 1)) and
  in_range7((first_char12 + 1))))

axiom H66 : ((result3 = true) -> (result4 = first_char12))

axiom H67 : ((result3 = true) -> (first_char13 = o4))

axiom H68 : ((result3 = true) -> ((first_char13 <= 1024) ->
  ((1 <= first_char13) and (first_char13 <= 1024))))

axiom H69 : ((result3 = true) -> ((first_char13 <= 1024) ->
  (o5 = first_char13)))

axiom H70 : ((result3 = true) -> ((first_char13 <= 1024) ->
  (o6 = (line5[o5]))))

axiom H71 : ((result3 = true) -> ((first_char13 <= 1024) ->
  (o7 = to_rep(o6))))

axiom H72 : ((result3 = true) -> ((first_char13 <= 1024) ->
  ((in_range5(o7) -> (o8 = true)) and ((not in_range5(o7)) ->
  (o8 = false)))))

axiom H73 : ((result3 = true) -> ((not (first_char13 <= 1024)) ->
  (o8 = false)))

axiom H74 : ((result3 = true) -> (((not (o8 = true)) -> (result5 = true)) and
  ((o8 = true) -> (result5 = false))))

axiom H75 : ((result3 = true) -> (result5 = true))

axiom H76 : ((result3 = true) -> (first_char14 = first_char13))

axiom H77 : ((result3 = true) -> (first_char15 = first_char13))

axiom H78 : ((result3 = true) -> (first_char16 = first_char14))

axiom H79 : ((result3 = true) -> (first_char17 = first_char15))

axiom H80 : ((not (result3 = true)) -> (first_char16 = first_char10))

axiom H81 : ((not (result3 = true)) -> (first_char17 = first_char11))

axiom H82 : (start1 = r25b)

axiom H83 : in_range4(r25b)

axiom H84 : ((first_char16 - 1) = r26b)

axiom H85 : in_range1(r26b)

axiom H86 : (r25b <= r26b)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (1 <= r25b)
