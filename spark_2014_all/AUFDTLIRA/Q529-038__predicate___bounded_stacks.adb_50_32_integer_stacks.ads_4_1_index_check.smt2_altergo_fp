(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type element

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : element, element -> bool

logic dummy1 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

logic to_rep1 : element -> int

logic of_rep1 : int -> element

axiom inversion_axiom1 :
  (forall x:element [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:element [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,element) farray, int, int, (int,element) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,element) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))))))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t9s__ref = { t9s__content : integer
}

function t9s__ref___projection(a: t9s__ref) : integer = (a).t9s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,element) farray; rt : t
}

function to_array(a: us_t) : (int,element) farray = (a).elts

function of_array(a: (int,element) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,element) farray -> int

logic value__component__size : int

logic object__component__size : (int,element) farray -> int

logic value__alignment : int

logic object__alignment : (int,element) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,element) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,element) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,element) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,element) farray

logic dummy5 : t

type t10s__ref = { t10s__content : us_t
}

function t10s__ref___projection(a: t10s__ref) : us_t = (a).t10s__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : positive, positive -> bool

logic dummy6 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep3 : positive -> int

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_discrs = { rec__integer_stacks__stack__capacity : positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__integer_stacks__stack__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__integer_stacks__stack__values : us_t;
rec__integer_stacks__stack__top : natural; rec__ext__ : us_private
}

function us_split_fields_Values__projection(a: us_split_fields) : us_t =
  (a).rec__integer_stacks__stack__values

function us_split_fields_Top__projection(a: us_split_fields) : natural =
  (a).rec__integer_stacks__stack__top

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep3(((a).us_split_discrs1).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs1).rec__integer_stacks__stack__capacity)) and
  ((bool_eq6(((a).us_split_fields1).rec__integer_stacks__stack__values,
  ((b).us_split_fields1).rec__integer_stacks__stack__values) = true) and
  (to_rep(((a).us_split_fields1).rec__integer_stacks__stack__top) = to_rep(((b).us_split_fields1).rec__integer_stacks__stack__top)))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs1).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs1).rec__integer_stacks__stack__capacity)) and
  ((bool_eq6(((a).us_split_fields1).rec__integer_stacks__stack__values,
  ((b).us_split_fields1).rec__integer_stacks__stack__values) = true) and
  (to_rep(((a).us_split_fields1).rec__integer_stacks__stack__top) = to_rep(((b).us_split_fields1).rec__integer_stacks__stack__top))))) ->
  (bool_eq8(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = a1; rt = a2 };
  rec__integer_stacks__stack__top = a3; rec__ext__ = a4 }; attr__tag = a5
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = a1; rt = a2 };
  rec__integer_stacks__stack__top = a3; rec__ext__ = a4 }; attr__tag = a5
  })))

logic integer_stacks__stack__capacity__first__bit : int

logic integer_stacks__stack__capacity__last__bit : int

logic integer_stacks__stack__capacity__position : int

axiom integer_stacks__stack__capacity__first__bit_axiom :
  (0 <= integer_stacks__stack__capacity__first__bit)

axiom integer_stacks__stack__capacity__last__bit_axiom :
  (integer_stacks__stack__capacity__first__bit <  integer_stacks__stack__capacity__last__bit)

axiom integer_stacks__stack__capacity__position_axiom :
  (0 <= integer_stacks__stack__capacity__position)

logic integer_stacks__stack__values__first__bit : int

logic integer_stacks__stack__values__last__bit : int

logic integer_stacks__stack__values__position : int

axiom integer_stacks__stack__values__first__bit_axiom :
  (0 <= integer_stacks__stack__values__first__bit)

axiom integer_stacks__stack__values__last__bit_axiom :
  (integer_stacks__stack__values__first__bit <  integer_stacks__stack__values__last__bit)

axiom integer_stacks__stack__values__position_axiom :
  (0 <= integer_stacks__stack__values__position)

logic integer_stacks__stack__top__first__bit : int

logic integer_stacks__stack__top__last__bit : int

logic integer_stacks__stack__top__position : int

axiom integer_stacks__stack__top__first__bit_axiom :
  (0 <= integer_stacks__stack__top__first__bit)

axiom integer_stacks__stack__top__last__bit_axiom :
  (integer_stacks__stack__top__first__bit <  integer_stacks__stack__top__last__bit)

axiom integer_stacks__stack__top__position_axiom :
  (0 <= integer_stacks__stack__top__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : positive

logic dummy8 : (int,element) farray

logic dummy9 : t

logic dummy10 : natural

logic dummy11 : us_private

logic dummy12 : int

type stack__ref = { stack__content : us_rep
}

function stack__ref___projection(a: stack__ref) : us_rep = (a).stack__content

logic extent : us_rep -> int

logic extent__function_guard : int, us_rep -> prop

logic extent1 : int, us_rep -> int

logic extent__function_guard1 : int, int, us_rep -> prop

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

logic empty1 : int, us_rep -> bool

logic empty__function_guard1 : bool, int, us_rep -> prop

logic full : us_rep -> bool

logic full__function_guard : bool, us_rep -> prop

logic full1 : int, us_rep -> bool

logic full__function_guard1 : bool, int, us_rep -> prop

logic this__split_discrs : positive

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i13s : positive

logic i13s1 : (int,element) farray

logic i13s2 : t

logic i13s3 : natural

logic i13s4 : us_private

logic i13s5 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq9 : bool, bool -> bool

axiom bool_eq_def7 :
  (forall x:bool. forall y:bool [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

predicate in_range4(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE5 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> bool

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy13 : integer

type tT23bP1__ref = { tT23bP1__content : integer
}

function tT23bP1__ref___projection(a: tT23bP1__ref) : integer =
  (a).tT23bP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first2(mk1(f, l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,element) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,element) farray = (a).elts1

function of_array1(a: (int,element) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,element) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,element) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,element) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,element) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,element) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,element) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t1, y: us_t1) : bool = bool_eq3((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy14 : (int,element) farray

logic dummy15 : t1

type t23b__ref = { t23b__content : us_t1
}

function t23b__ref___projection(a: t23b__ref) : us_t1 = (a).t23b__content

type us_split_fields2 = { rec__integer_stacks__stack__values1 : us_t1;
rec__integer_stacks__stack__top1 : natural; rec__ext__1 : us_private
}

function us_split_fields_Values__2__projection(a: us_split_fields2) : us_t1 =
  (a).rec__integer_stacks__stack__values1

function us_split_fields_Top__2__projection(a: us_split_fields2) : natural =
  (a).rec__integer_stacks__stack__top1

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag1 : int
}

function us_rep___4__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___6__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_private -> us_private

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__integer_stacks__stack__values =
  of_array(to_array1(((a).us_split_fields3).rec__integer_stacks__stack__values1),
  first3(((a).us_split_fields3).rec__integer_stacks__stack__values1),
  last3(((a).us_split_fields3).rec__integer_stacks__stack__values1));
  rec__integer_stacks__stack__top =
  ((a).us_split_fields3).rec__integer_stacks__stack__top1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ext__1) }; attr__tag =
  (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__integer_stacks__stack__values1 =
  of_array1(to_array(((r).us_split_fields1).rec__integer_stacks__stack__values),
  first1(((r).us_split_fields1).rec__integer_stacks__stack__values),
  last1(((r).us_split_fields1).rec__integer_stacks__stack__values));
  rec__integer_stacks__stack__top1 =
  ((r).us_split_fields1).rec__integer_stacks__stack__top; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq12 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq12(a, b)].
  ((((to_rep3(((a).us_split_discrs2).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs2).rec__integer_stacks__stack__capacity)) and
  ((bool_eq11(((a).us_split_fields3).rec__integer_stacks__stack__values1,
  ((b).us_split_fields3).rec__integer_stacks__stack__values1) = true) and
  (to_rep(((a).us_split_fields3).rec__integer_stacks__stack__top1) = to_rep(((b).us_split_fields3).rec__integer_stacks__stack__top1)))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs2).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs2).rec__integer_stacks__stack__capacity)) and
  ((bool_eq11(((a).us_split_fields3).rec__integer_stacks__stack__values1,
  ((b).us_split_fields3).rec__integer_stacks__stack__values1) = true) and
  (to_rep(((a).us_split_fields3).rec__integer_stacks__stack__top1) = to_rep(((b).us_split_fields3).rec__integer_stacks__stack__top1))))) ->
  (bool_eq12(a, b) = false))))

logic us_tag1 : int

predicate in_range5(rec__integer_stacks__stack__capacity1: int, a: us_rep) =
  (rec__integer_stacks__stack__capacity1 = to_rep3(((a).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t1.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__size3({ us_split_discrs2 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields3 = {
  rec__integer_stacks__stack__values1 = { elts1 = a1; rt1 = a2 };
  rec__integer_stacks__stack__top1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t1.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__alignment3({ us_split_discrs2 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields3 = {
  rec__integer_stacks__stack__values1 = { elts1 = a1; rt1 = a2 };
  rec__integer_stacks__stack__top1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5
  })))

logic integer_stacks__stack__capacity__first__bit1 : int

logic integer_stacks__stack__capacity__last__bit1 : int

logic integer_stacks__stack__capacity__position1 : int

axiom integer_stacks__stack__capacity__first__bit_axiom1 :
  (0 <= integer_stacks__stack__capacity__first__bit1)

axiom integer_stacks__stack__capacity__last__bit_axiom1 :
  (integer_stacks__stack__capacity__first__bit1 <  integer_stacks__stack__capacity__last__bit1)

axiom integer_stacks__stack__capacity__position_axiom1 :
  (0 <= integer_stacks__stack__capacity__position1)

logic integer_stacks__stack__values__first__bit1 : int

logic integer_stacks__stack__values__last__bit1 : int

logic integer_stacks__stack__values__position1 : int

axiom integer_stacks__stack__values__first__bit_axiom1 :
  (0 <= integer_stacks__stack__values__first__bit1)

axiom integer_stacks__stack__values__last__bit_axiom1 :
  (integer_stacks__stack__values__first__bit1 <  integer_stacks__stack__values__last__bit1)

axiom integer_stacks__stack__values__position_axiom1 :
  (0 <= integer_stacks__stack__values__position1)

logic integer_stacks__stack__top__first__bit1 : int

logic integer_stacks__stack__top__last__bit1 : int

logic integer_stacks__stack__top__position1 : int

axiom integer_stacks__stack__top__first__bit_axiom1 :
  (0 <= integer_stacks__stack__top__first__bit1)

axiom integer_stacks__stack__top__last__bit_axiom1 :
  (integer_stacks__stack__top__first__bit1 <  integer_stacks__stack__top__last__bit1)

axiom integer_stacks__stack__top__position_axiom1 :
  (0 <= integer_stacks__stack__top__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy16 : positive

logic dummy17 : (int,element) farray

logic dummy18 : t1

logic dummy19 : natural

logic dummy20 : us_private

logic dummy21 : int

type t21b__ref = { t21b__content : us_rep1
}

function t21b__ref___projection(a: t21b__ref) : us_rep1 = (a).t21b__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy22 : integer

type tT28bP1__ref = { tT28bP1__content : integer
}

function tT28bP1__ref___projection(a: tT28bP1__ref) : integer =
  (a).tT28bP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first4(mk2(f, l))) = f) and (to_rep2(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,element) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,element) farray = (a).elts2

function of_array2(a: (int,element) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep2(first4((a).rt2))

function last5(a: us_t2) : int = to_rep2(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,element) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,element) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,element) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,element) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,element) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,element) farray. (0 <= object__alignment4(a)))

function bool_eq14(x: us_t2, y: us_t2) : bool = bool_eq3((x).elts2,
  to_rep2(first4((x).rt2)), to_rep2(last4((x).rt2)), (y).elts2,
  to_rep2(first4((y).rt2)), to_rep2(last4((y).rt2)))

logic user_eq11 : us_t2, us_t2 -> bool

logic dummy23 : (int,element) farray

logic dummy24 : t2

type t28b__ref = { t28b__content : us_t2
}

function t28b__ref___projection(a: t28b__ref) : us_t2 = (a).t28b__content

type us_split_fields4 = { rec__integer_stacks__stack__values2 : us_t2;
rec__integer_stacks__stack__top2 : natural; rec__ext__2 : us_private
}

function us_split_fields_Values__3__projection(a: us_split_fields4) : us_t2 =
  (a).rec__integer_stacks__stack__values2

function us_split_fields_Top__3__projection(a: us_split_fields4) : natural =
  (a).rec__integer_stacks__stack__top2

function us_split_fields___3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4; attr__tag2 : int
}

function us_rep___7__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___8__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___9__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : us_private -> us_private

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = {
  rec__integer_stacks__stack__values =
  of_array(to_array2(((a).us_split_fields5).rec__integer_stacks__stack__values2),
  first5(((a).us_split_fields5).rec__integer_stacks__stack__values2),
  last5(((a).us_split_fields5).rec__integer_stacks__stack__values2));
  rec__integer_stacks__stack__top =
  ((a).us_split_fields5).rec__integer_stacks__stack__top2; rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__ext__2) }; attr__tag =
  (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__integer_stacks__stack__values2 =
  of_array2(to_array(((r).us_split_fields1).rec__integer_stacks__stack__values),
  first1(((r).us_split_fields1).rec__integer_stacks__stack__values),
  last1(((r).us_split_fields1).rec__integer_stacks__stack__values));
  rec__integer_stacks__stack__top2 =
  ((r).us_split_fields1).rec__integer_stacks__stack__top; rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((to_rep3(((a).us_split_discrs3).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs3).rec__integer_stacks__stack__capacity)) and
  ((bool_eq14(((a).us_split_fields5).rec__integer_stacks__stack__values2,
  ((b).us_split_fields5).rec__integer_stacks__stack__values2) = true) and
  (to_rep(((a).us_split_fields5).rec__integer_stacks__stack__top2) = to_rep(((b).us_split_fields5).rec__integer_stacks__stack__top2)))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs3).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs3).rec__integer_stacks__stack__capacity)) and
  ((bool_eq14(((a).us_split_fields5).rec__integer_stacks__stack__values2,
  ((b).us_split_fields5).rec__integer_stacks__stack__values2) = true) and
  (to_rep(((a).us_split_fields5).rec__integer_stacks__stack__top2) = to_rep(((b).us_split_fields5).rec__integer_stacks__stack__top2))))) ->
  (bool_eq15(a, b) = false))))

logic us_tag2 : int

predicate in_range6(rec__integer_stacks__stack__capacity1: int, a: us_rep) =
  (rec__integer_stacks__stack__capacity1 = to_rep3(((a).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic value__size5 : int

logic object__size5 : us_rep2 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep2 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t2.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__size5({ us_split_discrs3 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields5 = {
  rec__integer_stacks__stack__values2 = { elts2 = a1; rt2 = a2 };
  rec__integer_stacks__stack__top2 = a3; rec__ext__2 = a4 }; attr__tag2 = a5
  })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t2.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__alignment5({ us_split_discrs3 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields5 = {
  rec__integer_stacks__stack__values2 = { elts2 = a1; rt2 = a2 };
  rec__integer_stacks__stack__top2 = a3; rec__ext__2 = a4 }; attr__tag2 = a5
  })))

logic integer_stacks__stack__capacity__first__bit2 : int

logic integer_stacks__stack__capacity__last__bit2 : int

logic integer_stacks__stack__capacity__position2 : int

axiom integer_stacks__stack__capacity__first__bit_axiom2 :
  (0 <= integer_stacks__stack__capacity__first__bit2)

axiom integer_stacks__stack__capacity__last__bit_axiom2 :
  (integer_stacks__stack__capacity__first__bit2 <  integer_stacks__stack__capacity__last__bit2)

axiom integer_stacks__stack__capacity__position_axiom2 :
  (0 <= integer_stacks__stack__capacity__position2)

logic integer_stacks__stack__values__first__bit2 : int

logic integer_stacks__stack__values__last__bit2 : int

logic integer_stacks__stack__values__position2 : int

axiom integer_stacks__stack__values__first__bit_axiom2 :
  (0 <= integer_stacks__stack__values__first__bit2)

axiom integer_stacks__stack__values__last__bit_axiom2 :
  (integer_stacks__stack__values__first__bit2 <  integer_stacks__stack__values__last__bit2)

axiom integer_stacks__stack__values__position_axiom2 :
  (0 <= integer_stacks__stack__values__position2)

logic integer_stacks__stack__top__first__bit2 : int

logic integer_stacks__stack__top__last__bit2 : int

logic integer_stacks__stack__top__position2 : int

axiom integer_stacks__stack__top__first__bit_axiom2 :
  (0 <= integer_stacks__stack__top__first__bit2)

axiom integer_stacks__stack__top__last__bit_axiom2 :
  (integer_stacks__stack__top__first__bit2 <  integer_stacks__stack__top__last__bit2)

axiom integer_stacks__stack__top__position_axiom2 :
  (0 <= integer_stacks__stack__top__position2)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy25 : positive

logic dummy26 : (int,element) farray

logic dummy27 : t2

logic dummy28 : natural

logic dummy29 : us_private

logic dummy30 : int

type s27b__ref = { s27b__content : us_rep2
}

function s27b__ref___projection(a: s27b__ref) : us_rep2 = (a).s27b__content

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : integer, integer -> bool

logic dummy31 : integer

type tT26bP1__ref = { tT26bP1__content : integer
}

function tT26bP1__ref___projection(a: tT26bP1__ref) : integer =
  (a).tT26bP1__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first6(mk3(f, l))) = f) and (to_rep2(last6(mk3(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,element) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,element) farray = (a).elts3

function of_array3(a: (int,element) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep2(first6((a).rt3))

function last7(a: us_t3) : int = to_rep2(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,element) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,element) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,element) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,element) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,element) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,element) farray. (0 <= object__alignment6(a)))

function bool_eq17(x: us_t3, y: us_t3) : bool = bool_eq3((x).elts3,
  to_rep2(first6((x).rt3)), to_rep2(last6((x).rt3)), (y).elts3,
  to_rep2(first6((y).rt3)), to_rep2(last6((y).rt3)))

logic user_eq14 : us_t3, us_t3 -> bool

logic dummy32 : (int,element) farray

logic dummy33 : t3

type t26b__ref = { t26b__content : us_t3
}

function t26b__ref___projection(a: t26b__ref) : us_t3 = (a).t26b__content

type us_split_fields6 = { rec__integer_stacks__stack__values3 : us_t3;
rec__integer_stacks__stack__top3 : natural; rec__ext__3 : us_private
}

function us_split_fields_Values__4__projection(a: us_split_fields6) : us_t3 =
  (a).rec__integer_stacks__stack__values3

function us_split_fields_Top__4__projection(a: us_split_fields6) : natural =
  (a).rec__integer_stacks__stack__top3

function us_split_fields___4__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs4 : us_split_discrs; us_split_fields7 :
us_split_fields6; attr__tag3 : int
}

function us_rep___10__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs4

function us_rep___11__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep___12__projection(a: us_rep3) : int = (a).attr__tag3

logic hide_ext__2 : us_private -> us_private

logic extract__ext__2 : us_private -> us_private

function to_base2(a: us_rep3) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs4; us_split_fields1 = {
  rec__integer_stacks__stack__values =
  of_array(to_array3(((a).us_split_fields7).rec__integer_stacks__stack__values3),
  first7(((a).us_split_fields7).rec__integer_stacks__stack__values3),
  last7(((a).us_split_fields7).rec__integer_stacks__stack__values3));
  rec__integer_stacks__stack__top =
  ((a).us_split_fields7).rec__integer_stacks__stack__top3; rec__ext__ =
  hide_ext__2(((a).us_split_fields7).rec__ext__3) }; attr__tag =
  (a).attr__tag3 }

function of_base2(r: us_rep) : us_rep3 = { us_split_discrs4 =
  (r).us_split_discrs1; us_split_fields7 = {
  rec__integer_stacks__stack__values3 =
  of_array3(to_array(((r).us_split_fields1).rec__integer_stacks__stack__values),
  first1(((r).us_split_fields1).rec__integer_stacks__stack__values),
  last1(((r).us_split_fields1).rec__integer_stacks__stack__values));
  rec__integer_stacks__stack__top3 =
  ((r).us_split_fields1).rec__integer_stacks__stack__top; rec__ext__3 =
  extract__ext__2(((r).us_split_fields1).rec__ext__) }; attr__tag3 =
  (r).attr__tag }

logic bool_eq18 : us_rep3, us_rep3 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq18(a, b)].
  ((((to_rep3(((a).us_split_discrs4).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs4).rec__integer_stacks__stack__capacity)) and
  ((bool_eq17(((a).us_split_fields7).rec__integer_stacks__stack__values3,
  ((b).us_split_fields7).rec__integer_stacks__stack__values3) = true) and
  (to_rep(((a).us_split_fields7).rec__integer_stacks__stack__top3) = to_rep(((b).us_split_fields7).rec__integer_stacks__stack__top3)))) ->
  (bool_eq18(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs4).rec__integer_stacks__stack__capacity) = to_rep3(((b).us_split_discrs4).rec__integer_stacks__stack__capacity)) and
  ((bool_eq17(((a).us_split_fields7).rec__integer_stacks__stack__values3,
  ((b).us_split_fields7).rec__integer_stacks__stack__values3) = true) and
  (to_rep(((a).us_split_fields7).rec__integer_stacks__stack__top3) = to_rep(((b).us_split_fields7).rec__integer_stacks__stack__top3))))) ->
  (bool_eq18(a, b) = false))))

logic us_tag3 : int

predicate in_range7(rec__integer_stacks__stack__capacity1: int, a: us_rep) =
  (rec__integer_stacks__stack__capacity1 = to_rep3(((a).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic value__size7 : int

logic object__size7 : us_rep3 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep3 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t3.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__size7({ us_split_discrs4 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields7 = {
  rec__integer_stacks__stack__values3 = { elts3 = a1; rt3 = a2 };
  rec__integer_stacks__stack__top3 = a3; rec__ext__3 = a4 }; attr__tag3 = a5
  })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t3.
  forall a3:natural. forall a4:us_private. forall a5:int.
  (0 <= object__alignment7({ us_split_discrs4 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields7 = {
  rec__integer_stacks__stack__values3 = { elts3 = a1; rt3 = a2 };
  rec__integer_stacks__stack__top3 = a3; rec__ext__3 = a4 }; attr__tag3 = a5
  })))

logic integer_stacks__stack__capacity__first__bit3 : int

logic integer_stacks__stack__capacity__last__bit3 : int

logic integer_stacks__stack__capacity__position3 : int

axiom integer_stacks__stack__capacity__first__bit_axiom3 :
  (0 <= integer_stacks__stack__capacity__first__bit3)

axiom integer_stacks__stack__capacity__last__bit_axiom3 :
  (integer_stacks__stack__capacity__first__bit3 <  integer_stacks__stack__capacity__last__bit3)

axiom integer_stacks__stack__capacity__position_axiom3 :
  (0 <= integer_stacks__stack__capacity__position3)

logic integer_stacks__stack__values__first__bit3 : int

logic integer_stacks__stack__values__last__bit3 : int

logic integer_stacks__stack__values__position3 : int

axiom integer_stacks__stack__values__first__bit_axiom3 :
  (0 <= integer_stacks__stack__values__first__bit3)

axiom integer_stacks__stack__values__last__bit_axiom3 :
  (integer_stacks__stack__values__first__bit3 <  integer_stacks__stack__values__last__bit3)

axiom integer_stacks__stack__values__position_axiom3 :
  (0 <= integer_stacks__stack__values__position3)

logic integer_stacks__stack__top__first__bit3 : int

logic integer_stacks__stack__top__last__bit3 : int

logic integer_stacks__stack__top__position3 : int

axiom integer_stacks__stack__top__first__bit_axiom3 :
  (0 <= integer_stacks__stack__top__first__bit3)

axiom integer_stacks__stack__top__last__bit_axiom3 :
  (integer_stacks__stack__top__first__bit3 <  integer_stacks__stack__top__last__bit3)

axiom integer_stacks__stack__top__position_axiom3 :
  (0 <= integer_stacks__stack__top__position3)

logic user_eq15 : us_rep3, us_rep3 -> bool

logic dummy34 : positive

logic dummy35 : (int,element) farray

logic dummy36 : t3

logic dummy37 : natural

logic dummy38 : us_private

logic dummy39 : int

type s25b__ref = { s25b__content : us_rep3
}

function s25b__ref___projection(a: s25b__ref) : us_rep3 = (a).s25b__content

axiom oeq__post_axiom : true

axiom oeq__post__dispatch_axiom : true

axiom integer_stacks__stack__compat_axiom :
  (forall left:positive. forall left1:(int,element) farray. forall left2:t.
  forall left3:natural. forall left4:us_private. forall left5:int.
  forall right:positive. forall right1:(int,element) farray. forall right2:t.
  forall right3:natural. forall right4:us_private. forall right5:int
  [oeq1(us_tag, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  left }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  left1; rt = left2 }; rec__integer_stacks__stack__top = left3; rec__ext__ =
  left4 }; attr__tag = left5 }, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = right }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = right1; rt = right2 };
  rec__integer_stacks__stack__top = right3; rec__ext__ = right4 };
  attr__tag = right5 })]. (to_int(oeq({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 })) = to_int(oeq1(us_tag, {
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = left };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = left1;
  rt = left2 }; rec__integer_stacks__stack__top = left3; rec__ext__ = left4
  }; attr__tag = left5 }, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = right }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = right1; rt = right2 };
  rec__integer_stacks__stack__top = right3; rec__ext__ = right4 };
  attr__tag = right5 }))))

axiom integer_stacks__reset__T21b__compat_axiom :
  (forall left:positive. forall left1:(int,element) farray. forall left2:t.
  forall left3:natural. forall left4:us_private. forall left5:int.
  forall right:positive. forall right1:(int,element) farray. forall right2:t.
  forall right3:natural. forall right4:us_private. forall right5:int
  [oeq1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 })]. (to_int(oeq({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = left };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = left1;
  rt = left2 }; rec__integer_stacks__stack__top = left3; rec__ext__ = left4
  }; attr__tag = left5 }, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = right }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = right1; rt = right2 };
  rec__integer_stacks__stack__top = right3; rec__ext__ = right4 };
  attr__tag = right5 })) = to_int(oeq1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 }))))

axiom integer_stacks__Oeq__S25b__compat_axiom :
  (forall left:positive. forall left1:(int,element) farray. forall left2:t.
  forall left3:natural. forall left4:us_private. forall left5:int.
  forall right:positive. forall right1:(int,element) farray. forall right2:t.
  forall right3:natural. forall right4:us_private. forall right5:int
  [oeq1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 })]. (to_int(oeq({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = left };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = left1;
  rt = left2 }; rec__integer_stacks__stack__top = left3; rec__ext__ = left4
  }; attr__tag = left5 }, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = right }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = right1; rt = right2 };
  rec__integer_stacks__stack__top = right3; rec__ext__ = right4 };
  attr__tag = right5 })) = to_int(oeq1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 }))))

axiom integer_stacks__Oeq__S27b__compat_axiom :
  (forall left:positive. forall left1:(int,element) farray. forall left2:t.
  forall left3:natural. forall left4:us_private. forall left5:int.
  forall right:positive. forall right1:(int,element) farray. forall right2:t.
  forall right3:natural. forall right4:us_private. forall right5:int
  [oeq1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 })]. (to_int(oeq({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = left };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = left1;
  rt = left2 }; rec__integer_stacks__stack__top = left3; rec__ext__ = left4
  }; attr__tag = left5 }, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = right }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = right1; rt = right2 };
  rec__integer_stacks__stack__top = right3; rec__ext__ = right4 };
  attr__tag = right5 })) = to_int(oeq1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = left }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = left1; rt = left2 };
  rec__integer_stacks__stack__top = left3; rec__ext__ = left4 }; attr__tag =
  left5 }, { us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  right }; us_split_fields1 = { rec__integer_stacks__stack__values = { elts =
  right1; rt = right2 }; rec__integer_stacks__stack__top = right3;
  rec__ext__ = right4 }; attr__tag = right5 }))))

axiom extent__post_axiom :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int [extent({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = this };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = this1;
  rt = this2 }; rec__integer_stacks__stack__top = this3; rec__ext__ = this4
  }; attr__tag = this5 })]. (((to_rep(this3) <= to_rep3(this)) and
  (dynamic_property1(1, to_rep3(this), to_rep2(first(this2)),
  to_rep2(last(this2))) and ((to_rep2(first(this2)) = 1) and
  (to_rep2(last(this2)) = to_rep3(this))))) -> in_range(extent({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = this };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = this1;
  rt = this2 }; rec__integer_stacks__stack__top = this3; rec__ext__ = this4
  }; attr__tag = this5 }))))

axiom extent__post__dispatch_axiom :
  (forall attr__tag4:int.
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [extent1(attr__tag4, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (((to_rep(this3) <= to_rep3(this)) and (dynamic_property1(1,
  to_rep3(this), to_rep2(first(this2)), to_rep2(last(this2))) and
  ((to_rep2(first(this2)) = 1) and
  (to_rep2(last(this2)) = to_rep3(this))))) -> in_range(extent1(attr__tag4, {
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = this };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = this1;
  rt = this2 }; rec__integer_stacks__stack__top = this3; rec__ext__ = this4
  }; attr__tag = this5 })))))

axiom integer_stacks__stack__compat_axiom1 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [extent1(us_tag, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (extent({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = extent1(us_tag, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })))

axiom integer_stacks__reset__T21b__compat_axiom1 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [extent1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (extent({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = extent1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })))

axiom integer_stacks__Oeq__S25b__compat_axiom1 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [extent1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (extent({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = extent1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })))

axiom integer_stacks__Oeq__S27b__compat_axiom1 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [extent1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (extent({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = extent1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })))

axiom extent__def_axiom :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int [extent({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = this };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = this1;
  rt = this2 }; rec__integer_stacks__stack__top = this3; rec__ext__ = this4
  }; attr__tag = this5 })]. (((to_rep(this3) <= to_rep3(this)) and
  (dynamic_property1(1, to_rep3(this), to_rep2(first(this2)),
  to_rep2(last(this2))) and ((to_rep2(first(this2)) = 1) and
  (to_rep2(last(this2)) = to_rep3(this))))) -> (extent({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = to_rep(this3))))

axiom empty__post_axiom : true

axiom empty__post__dispatch_axiom : true

axiom integer_stacks__stack__compat_axiom2 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [empty1(us_tag, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(empty({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(empty1(us_tag, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom integer_stacks__reset__T21b__compat_axiom2 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [empty1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(empty({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(empty1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom integer_stacks__Oeq__S25b__compat_axiom2 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [empty1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(empty({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(empty1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom integer_stacks__Oeq__S27b__compat_axiom2 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [empty1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(empty({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(empty1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom empty__def_axiom :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int [empty({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = this };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = this1;
  rt = this2 }; rec__integer_stacks__stack__top = this3; rec__ext__ = this4
  }; attr__tag = this5 })]. ((empty({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = true) <-> (to_rep(this3) = 0)))

axiom full__post_axiom : true

axiom full__post__dispatch_axiom : true

axiom integer_stacks__stack__compat_axiom3 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [full1(us_tag, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(full({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(full1(us_tag, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom integer_stacks__reset__T21b__compat_axiom3 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [full1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(full({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(full1(us_tag1, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom integer_stacks__Oeq__S25b__compat_axiom3 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [full1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(full({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(full1(us_tag3, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom integer_stacks__Oeq__S27b__compat_axiom3 :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int
  [full1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })]. (to_int(full({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 })) = to_int(full1(us_tag2, { us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }))))

axiom full__def_axiom :
  (forall this:positive. forall this1:(int,element) farray. forall this2:t.
  forall this3:natural. forall this4:us_private. forall this5:int [full({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity = this };
  us_split_fields1 = { rec__integer_stacks__stack__values = { elts = this1;
  rt = this2 }; rec__integer_stacks__stack__top = this3; rec__ext__ = this4
  }; attr__tag = this5 })]. ((full({ us_split_discrs1 = {
  rec__integer_stacks__stack__capacity = this }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this1; rt = this2 };
  rec__integer_stacks__stack__top = this3; rec__ext__ = this4 }; attr__tag =
  this5 }) = true) <-> (to_rep(this3) = to_rep3(this))))

axiom user_eq__def_axiom :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t1.
  forall a3:natural. forall a4:us_private. forall a5:int. forall b:positive.
  forall b1:(int,element) farray. forall b2:t1. forall b3:natural.
  forall b4:us_private. forall b5:int [user_eq9({ us_split_discrs2 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields3 = {
  rec__integer_stacks__stack__values1 = { elts1 = a1; rt1 = a2 };
  rec__integer_stacks__stack__top1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5
  }, { us_split_discrs2 = { rec__integer_stacks__stack__capacity = b };
  us_split_fields3 = { rec__integer_stacks__stack__values1 = { elts1 = b1;
  rt1 = b2 }; rec__integer_stacks__stack__top1 = b3; rec__ext__1 = b4 };
  attr__tag1 = b5 })]. (user_eq9({ us_split_discrs2 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields3 = {
  rec__integer_stacks__stack__values1 = { elts1 = a1; rt1 = a2 };
  rec__integer_stacks__stack__top1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5
  }, { us_split_discrs2 = { rec__integer_stacks__stack__capacity = b };
  us_split_fields3 = { rec__integer_stacks__stack__values1 = { elts1 = b1;
  rt1 = b2 }; rec__integer_stacks__stack__top1 = b3; rec__ext__1 = b4 };
  attr__tag1 = b5 }) = oeq(to_base({ us_split_discrs2 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields3 = {
  rec__integer_stacks__stack__values1 = { elts1 = a1; rt1 = a2 };
  rec__integer_stacks__stack__top1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5
  }), to_base({ us_split_discrs2 = { rec__integer_stacks__stack__capacity = b
  }; us_split_fields3 = { rec__integer_stacks__stack__values1 = { elts1 = b1;
  rt1 = b2 }; rec__integer_stacks__stack__top1 = b3; rec__ext__1 = b4 };
  attr__tag1 = b5 }))))

logic left : positive

logic left1 : (int,element) farray

logic left2 : t

logic left3 : natural

logic left4 : us_private

logic left5 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom user_eq__def_axiom1 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t3.
  forall a3:natural. forall a4:us_private. forall a5:int. forall b:positive.
  forall b1:(int,element) farray. forall b2:t3. forall b3:natural.
  forall b4:us_private. forall b5:int [user_eq15({ us_split_discrs4 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields7 = {
  rec__integer_stacks__stack__values3 = { elts3 = a1; rt3 = a2 };
  rec__integer_stacks__stack__top3 = a3; rec__ext__3 = a4 }; attr__tag3 = a5
  }, { us_split_discrs4 = { rec__integer_stacks__stack__capacity = b };
  us_split_fields7 = { rec__integer_stacks__stack__values3 = { elts3 = b1;
  rt3 = b2 }; rec__integer_stacks__stack__top3 = b3; rec__ext__3 = b4 };
  attr__tag3 = b5 })]. (user_eq15({ us_split_discrs4 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields7 = {
  rec__integer_stacks__stack__values3 = { elts3 = a1; rt3 = a2 };
  rec__integer_stacks__stack__top3 = a3; rec__ext__3 = a4 }; attr__tag3 = a5
  }, { us_split_discrs4 = { rec__integer_stacks__stack__capacity = b };
  us_split_fields7 = { rec__integer_stacks__stack__values3 = { elts3 = b1;
  rt3 = b2 }; rec__integer_stacks__stack__top3 = b3; rec__ext__3 = b4 };
  attr__tag3 = b5 }) = oeq(to_base2({ us_split_discrs4 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields7 = {
  rec__integer_stacks__stack__values3 = { elts3 = a1; rt3 = a2 };
  rec__integer_stacks__stack__top3 = a3; rec__ext__3 = a4 }; attr__tag3 = a5
  }), to_base2({ us_split_discrs4 = { rec__integer_stacks__stack__capacity =
  b }; us_split_fields7 = { rec__integer_stacks__stack__values3 = { elts3 =
  b1; rt3 = b2 }; rec__integer_stacks__stack__top3 = b3; rec__ext__3 = b4 };
  attr__tag3 = b5 }))))

logic right : positive

logic right1 : (int,element) farray

logic right2 : t

logic right3 : natural

logic right4 : us_private

logic right5 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom user_eq__def_axiom2 :
  (forall a:positive. forall a1:(int,element) farray. forall a2:t2.
  forall a3:natural. forall a4:us_private. forall a5:int. forall b:positive.
  forall b1:(int,element) farray. forall b2:t2. forall b3:natural.
  forall b4:us_private. forall b5:int [user_eq12({ us_split_discrs3 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields5 = {
  rec__integer_stacks__stack__values2 = { elts2 = a1; rt2 = a2 };
  rec__integer_stacks__stack__top2 = a3; rec__ext__2 = a4 }; attr__tag2 = a5
  }, { us_split_discrs3 = { rec__integer_stacks__stack__capacity = b };
  us_split_fields5 = { rec__integer_stacks__stack__values2 = { elts2 = b1;
  rt2 = b2 }; rec__integer_stacks__stack__top2 = b3; rec__ext__2 = b4 };
  attr__tag2 = b5 })]. (user_eq12({ us_split_discrs3 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields5 = {
  rec__integer_stacks__stack__values2 = { elts2 = a1; rt2 = a2 };
  rec__integer_stacks__stack__top2 = a3; rec__ext__2 = a4 }; attr__tag2 = a5
  }, { us_split_discrs3 = { rec__integer_stacks__stack__capacity = b };
  us_split_fields5 = { rec__integer_stacks__stack__values2 = { elts2 = b1;
  rt2 = b2 }; rec__integer_stacks__stack__top2 = b3; rec__ext__2 = b4 };
  attr__tag2 = b5 }) = oeq(to_base1({ us_split_discrs3 = {
  rec__integer_stacks__stack__capacity = a }; us_split_fields5 = {
  rec__integer_stacks__stack__values2 = { elts2 = a1; rt2 = a2 };
  rec__integer_stacks__stack__top2 = a3; rec__ext__2 = a4 }; attr__tag2 = a5
  }), to_base1({ us_split_discrs3 = { rec__integer_stacks__stack__capacity =
  b }; us_split_fields5 = { rec__integer_stacks__stack__values2 = { elts2 =
  b1; rt2 = b2 }; rec__integer_stacks__stack__top2 = b3; rec__ext__2 = b4 };
  attr__tag2 = b5 }))))

 (* File "bounded_stacks.ads", line 23, characters 0-0 *)
goal WP_parameter_def :
  (forall this__split_fields:(int,element) farray.
  forall this__split_fields1:t. forall this__split_fields2:natural.
  forall this__split_fields3:us_private. forall item:int.
  (((to_rep(i13s3) <= to_rep3(i13s)) and (dynamic_property1(1, to_rep3(i13s),
  to_rep2(first(i13s2)), to_rep2(last(i13s2))) and
  ((to_rep2(first(i13s2)) = 1) and
  (to_rep2(last(i13s2)) = to_rep3(i13s))))) ->
  (((to_rep(this__split_fields2) <= to_rep3(this__split_discrs)) and
  (dynamic_property1(1, to_rep3(this__split_discrs),
  to_rep2(first(this__split_fields1)),
  to_rep2(last(this__split_fields1))) and
  ((to_rep2(first(this__split_fields1)) = 1) and
  (to_rep2(last(this__split_fields1)) = to_rep3(this__split_discrs))))) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(item)) -> ((not (empty({
  us_split_discrs1 = { rec__integer_stacks__stack__capacity =
  this__split_discrs }; us_split_fields1 = {
  rec__integer_stacks__stack__values = { elts = this__split_fields; rt =
  this__split_fields1 }; rec__integer_stacks__stack__top =
  this__split_fields2; rec__ext__ = this__split_fields3 }; attr__tag =
  this__attr__tag }) = true)) ->
  (to_rep2(first(this__split_fields1)) <= to_rep(this__split_fields2)))))))
