(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort int_bad 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (int_bad int_bad) Bool)
(declare-const dummy int_bad)
(declare-datatypes () ((int_bad__ref (mk_int_bad__ref (int_bad__content int_bad)))))
(define-fun int_bad__ref___projection ((a int_bad__ref)) int_bad (int_bad__content a))
(define-fun dynamic_invariant ((temp___expr_169 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool) (temp___do_typ_inv_168 Bool)) Bool (and (=> (or (= temp___is_init_165 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_169)) (=> (= temp___do_toplevel_167 true) (=> (= temp___is_init_165 true) (or (and (<= (- 2147483648) temp___expr_169) (<= temp___expr_169 (- 1))) (and (<= 1 temp___expr_169) (<= temp___expr_169 2147483647)))))))
(define-fun dynamic_predicate ((temp___173 Int)) Bool (or (and (<= (- 2147483648) temp___173) (<= temp___173 (- 1))) (and (<= 1 temp___173) (<= temp___173 2147483647))))
(declare-fun to_rep (int_bad) Int)
(declare-fun of_rep (Int) int_bad)
(assert (forall ((x int_bad)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x int_bad)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const i9s Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort tarr_badD1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tarr_badD1 tarr_badD1) Bool)
(declare-const dummy1 tarr_badD1)
(declare-datatypes () ((tarr_badD1__ref (mk_tarr_badD1__ref (tarr_badD1__content tarr_badD1)))))
(define-fun tarr_badD1__ref___projection ((a tarr_badD1__ref)) tarr_badD1 (tarr_badD1__content a))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun dynamic_invariant1 ((temp___expr_257 (Array Int integer)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool (=> (= temp___do_toplevel_255 true) (=> (= temp___is_init_253 true) (forall ((k Int)) (=> (and (<= 1 k) (<= k 10)) (not (= (to_rep1 (select temp___expr_257 k)) 0)))))))
(define-fun default_initial_assumption ((temp___expr_260 (Array Int integer)) (temp___skip_top_level_261 Bool)) Bool (forall ((temp___262 Int)) (=> (and (<= 1 temp___262) (<= temp___262 10)) (= (to_rep1 (select temp___expr_260 temp___262)) 0))))
(define-fun dynamic_predicate1 ((temp___263 (Array Int integer))) Bool (forall ((k Int)) (=> (and (<= 1 k) (<= k 10)) (not (= (to_rep1 (select temp___263 k)) 0)))))
(declare-const i25s (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const dummy3 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__preds__rec_bad__i integer) (rec__preds__rec_bad__x int_bad) (rec__preds__rec_bad__a (Array Int integer))))))
(define-fun us_split_fields_I__2__projection ((a us_split_fields)) integer (rec__preds__rec_bad__i a))
(define-fun us_split_fields_X__2__projection ((a us_split_fields)) int_bad (rec__preds__rec_bad__x a))
(define-fun us_split_fields_A__2__projection ((a us_split_fields)) (Array Int integer) (rec__preds__rec_bad__a a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__preds__rec_bad__i (us_split_fields1 a))) (to_rep1 (rec__preds__rec_bad__i (us_split_fields1 b)))) (= (to_rep (rec__preds__rec_bad__x (us_split_fields1 a))) (to_rep (rec__preds__rec_bad__x (us_split_fields1 b))))) (= (bool_eq (rec__preds__rec_bad__a (us_split_fields1 a)) 1 10 (rec__preds__rec_bad__a (us_split_fields1 b)) 1 10) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const preds__rec_bad__i__first__bit Int)
(declare-const preds__rec_bad__i__last__bit Int)
(declare-const preds__rec_bad__i__position Int)
(assert (<= 0 preds__rec_bad__i__first__bit))
(assert (< preds__rec_bad__i__first__bit preds__rec_bad__i__last__bit))
(assert (<= 0 preds__rec_bad__i__position))
(declare-const preds__rec_bad__x__first__bit Int)
(declare-const preds__rec_bad__x__last__bit Int)
(declare-const preds__rec_bad__x__position Int)
(assert (<= 0 preds__rec_bad__x__first__bit))
(assert (< preds__rec_bad__x__first__bit preds__rec_bad__x__last__bit))
(assert (<= 0 preds__rec_bad__x__position))
(declare-const preds__rec_bad__a__first__bit Int)
(declare-const preds__rec_bad__a__last__bit Int)
(declare-const preds__rec_bad__a__position Int)
(assert (<= 0 preds__rec_bad__a__first__bit))
(assert (< preds__rec_bad__a__first__bit preds__rec_bad__a__last__bit))
(assert (<= 0 preds__rec_bad__a__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((rec_bad__ref (mk_rec_bad__ref (rec_bad__content us_rep)))))
(define-fun rec_bad__ref___projection ((a rec_bad__ref)) us_rep (rec_bad__content a))
(define-fun dynamic_invariant2 ((temp___expr_294 us_rep) (temp___is_init_290 Bool) (temp___skip_constant_291 Bool) (temp___do_toplevel_292 Bool) (temp___do_typ_inv_293 Bool)) Bool (and (=> (= temp___do_toplevel_292 true) (=> (= temp___is_init_290 true) (and (and (not (= (to_rep1 (rec__preds__rec_bad__i (us_split_fields1 temp___expr_294))) 0)) (not (= (to_rep (rec__preds__rec_bad__x (us_split_fields1 temp___expr_294))) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k 10)) (not (= (to_rep1 (let ((temp___296 (rec__preds__rec_bad__a (us_split_fields1 temp___expr_294)))) (select temp___296 k))) 0))))))) (and (=> (= temp___is_init_290 true) (let ((temp___298 (to_rep (rec__preds__rec_bad__x (us_split_fields1 temp___expr_294))))) (or (and (<= (- 2147483648) temp___298) (<= temp___298 (- 1))) (and (<= 1 temp___298) (<= temp___298 2147483647))))) (=> (= temp___is_init_290 true) (forall ((k Int)) (=> (and (<= 1 k) (<= k 10)) (not (= (to_rep1 (select (rec__preds__rec_bad__a (us_split_fields1 temp___expr_294)) k)) 0))))))))
(define-fun default_initial_assumption1 ((temp___expr_301 us_rep) (temp___skip_top_level_302 Bool)) Bool (and (and (= (to_rep1 (rec__preds__rec_bad__i (us_split_fields1 temp___expr_301))) 0) (= (to_rep (rec__preds__rec_bad__x (us_split_fields1 temp___expr_301))) 0)) (forall ((temp___305 Int)) (=> (and (<= 1 temp___305) (<= temp___305 10)) (= (to_rep1 (select (rec__preds__rec_bad__a (us_split_fields1 temp___expr_301)) temp___305)) 0)))))
(define-fun dynamic_predicate2 ((temp___306 us_rep)) Bool (and (and (not (= (to_rep1 (rec__preds__rec_bad__i (us_split_fields1 temp___306))) 0)) (not (= (to_rep (rec__preds__rec_bad__x (us_split_fields1 temp___306))) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k 10)) (not (= (to_rep1 (let ((temp___308 (rec__preds__rec_bad__a (us_split_fields1 temp___306)))) (select temp___308 k))) 0))))))
(declare-const i37s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 int_bad)
(declare-const x__split_fields2 (Array Int integer))
(declare-const temp___413 integer)
(declare-const temp___4131 int_bad)
(declare-const temp___4132 (Array Int integer))
(define-fun temp___4133 () us_rep (mk___rep (mk___split_fields temp___413 temp___4131 temp___4132)))
(assert (dynamic_invariant i9s true false true true))
(assert (dynamic_invariant1 i25s true false true true))
(assert (dynamic_invariant2 i37s true false true true))
(assert (dynamic_invariant2 (mk___rep (mk___split_fields x__split_fields x__split_fields1 x__split_fields2)) false false true true))
(assert (default_initial_assumption1 temp___4133 false))
(assert (not (dynamic_predicate2 temp___4133)))
(check-sat)
(exit)
