(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort pitchangle 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 10) x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (pitchangle pitchangle) Bool)
(declare-const dummy pitchangle)
(declare-datatypes () ((pitchangle__ref (mk_pitchangle__ref (pitchangle__content pitchangle)))))
(define-fun pitchangle__ref___projection ((a pitchangle__ref)) pitchangle (pitchangle__content a))
(define-fun dynamic_invariant ((temp___expr_172 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 10) 20)) (in_range temp___expr_172)))
(declare-fun to_rep (pitchangle) Int)
(declare-fun of_rep (Int) pitchangle)
(assert (forall ((x pitchangle)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x pitchangle)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort history_range 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (history_range history_range) Bool)
(declare-const dummy1 history_range)
(declare-datatypes () ((history_range__ref (mk_history_range__ref (history_range__content history_range)))))
(define-fun history_range__ref___projection ((a history_range__ref)) history_range (history_range__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int pitchangle))))))
(declare-fun slide ((Array Int pitchangle) Int Int) (Array Int pitchangle))
(assert (forall ((a (Array Int pitchangle))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int pitchangle))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int pitchangle) Int Int (Array Int pitchangle) Int Int) (Array Int pitchangle))
(assert (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (pitchangle Int) (Array Int pitchangle))
(assert (forall ((v pitchangle)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int pitchangle)) (a__first Int) (a__last Int) (b (Array Int pitchangle)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int pitchangle) Int Int (Array Int pitchangle) Int Int) Int)
(assert (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int pitchangle)) (b (Array Int pitchangle))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const v Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_210 Int) (temp___is_init_207 Bool) (temp___skip_constant_208 Bool) (temp___do_toplevel_209 Bool)) Bool (=> (or (= temp___is_init_207 true) (<= 1 10)) (in_range1 temp___expr_210)))
(declare-const h (Array Int pitchangle))
(declare-const i Int)
(declare-const o Int)
(declare-const o1 pitchangle)
(declare-const o2 Int)
(declare-const o3 pitchangle)
(declare-const o4 (Array Int pitchangle))
(declare-const o5 pitchangle)
(declare-const o6 (Array Int pitchangle))
(declare-const o7 Int)
(declare-const o8 pitchangle)
(declare-const o9 Int)
(declare-const o10 pitchangle)
(declare-const o11 (Array Int pitchangle))
(declare-const o12 pitchangle)
(declare-const o13 (Array Int pitchangle))
(declare-const o14 Int)
(declare-const o15 pitchangle)
(declare-const o16 Int)
(declare-const o17 pitchangle)
(declare-const o18 (Array Int pitchangle))
(declare-const o19 pitchangle)
(declare-const o20 (Array Int pitchangle))
(declare-const o21 Int)
(declare-const o22 pitchangle)
(declare-const o23 Int)
(declare-const o24 pitchangle)
(declare-const o25 (Array Int pitchangle))
(declare-const o26 pitchangle)
(declare-const o27 (Array Int pitchangle))
(declare-const o28 Int)
(declare-const o29 pitchangle)
(declare-const o30 Int)
(declare-const o31 pitchangle)
(declare-const o32 (Array Int pitchangle))
(declare-const o33 pitchangle)
(declare-const o34 (Array Int pitchangle))
(declare-const o35 Int)
(declare-const o36 pitchangle)
(declare-const o37 Int)
(declare-const o38 pitchangle)
(declare-const o39 (Array Int pitchangle))
(declare-const o40 pitchangle)
(declare-const o41 (Array Int pitchangle))
(declare-const o42 Int)
(declare-const o43 pitchangle)
(declare-const o44 Int)
(declare-const o45 pitchangle)
(declare-const o46 (Array Int pitchangle))
(declare-const o47 pitchangle)
(declare-const o48 (Array Int pitchangle))
(declare-const o49 Int)
(declare-const o50 pitchangle)
(declare-const o51 Int)
(declare-const o52 pitchangle)
(declare-const o53 (Array Int pitchangle))
(declare-const o54 pitchangle)
(declare-const o55 (Array Int pitchangle))
(declare-const o56 Int)
(declare-const o57 pitchangle)
(declare-const o58 Int)
(declare-const o59 pitchangle)
(declare-const o60 (Array Int pitchangle))
(declare-const o61 pitchangle)
(declare-const o62 (Array Int pitchangle))
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 (Array Int pitchangle))
(declare-const h1 (Array Int pitchangle))
(declare-const result2 (Array Int pitchangle))
(declare-const h2 (Array Int pitchangle))
(declare-const result3 Int)
(declare-const i2 Int)
(declare-const result4 (Array Int pitchangle))
(declare-const h3 (Array Int pitchangle))
(declare-const result5 (Array Int pitchangle))
(declare-const h4 (Array Int pitchangle))
(declare-const result6 Int)
(declare-const i3 Int)
(declare-const result7 (Array Int pitchangle))
(declare-const h5 (Array Int pitchangle))
(declare-const result8 (Array Int pitchangle))
(declare-const h6 (Array Int pitchangle))
(declare-const result9 Int)
(declare-const i4 Int)
(declare-const result10 (Array Int pitchangle))
(declare-const h7 (Array Int pitchangle))
(declare-const result11 (Array Int pitchangle))
(declare-const h8 (Array Int pitchangle))
(declare-const result12 Int)
(declare-const i5 Int)
(declare-const result13 (Array Int pitchangle))
(declare-const h9 (Array Int pitchangle))
(declare-const result14 (Array Int pitchangle))
(declare-const h10 (Array Int pitchangle))
(declare-const result15 Int)
(declare-const i6 Int)
(declare-const result16 (Array Int pitchangle))
(declare-const h11 (Array Int pitchangle))
(declare-const result17 (Array Int pitchangle))
(declare-const h12 (Array Int pitchangle))
(declare-const result18 Int)
(declare-const i7 Int)
(declare-const result19 map__ref)
(declare-const h13 (Array Int pitchangle))
(declare-const result20 map__ref)
(declare-const h14 (Array Int pitchangle))
(declare-const result21 int__ref)
(declare-const i8 Int)
(declare-const result22 map__ref)
(declare-const h15 (Array Int pitchangle))
(declare-const result23 map__ref)
(declare-const h16 (Array Int pitchangle))
(declare-const result24 int__ref)
(declare-const i9 Int)
(declare-const result25 map__ref)
(declare-const h17 (Array Int pitchangle))
(declare-const result26 map__ref)
(declare-const h18 (Array Int pitchangle))
(declare-const result27 int__ref)
(declare-const i10 Int)
(assert (in_range v))
(assert (= result i))
(assert (= i1 1))
(assert (< i1 10))
(assert (not (<= 1 (+ i1 1))))
(check-sat)
(exit)
