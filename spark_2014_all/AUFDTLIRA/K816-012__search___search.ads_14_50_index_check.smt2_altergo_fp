(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type intarray__ref = { intarray__content : us_t
}

function intarray__ref___projection(a: intarray__ref) : us_t =
  (a).intarray__content

logic table : (int,integer) farray

logic table1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic value1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

 (* File "search.ads", line 19, characters 0-0 *)
goal WP_parameter_def :
  (forall found1:bool. forall found2:bool. forall index1:int.
  forall index2:int. forall found:int. forall i:int. forall temp___188:int.
  forall temp___187:int. forall temp___186:bool. forall temp___185:bool.
  forall temp___184:int. forall o:int. forall o1:int. forall o2:int.
  forall o3:integer. forall o4:int. forall result:int. forall found3:int.
  forall result1:bool. forall found11:bool. forall result2:int.
  forall index11:int. forall result3:bool. forall found21:bool.
  forall result4:int. forall index21:int. forall result5:int. forall i1:int.
  forall found12:bool. forall found22:bool. forall index12:int.
  forall index22:int. forall found4:int. forall i2:int. forall result6:bool.
  forall found13:bool. forall result7:int. forall index13:int.
  forall result8:int. forall found5:int. forall result9:bool.
  forall found23:bool. forall result10:int. forall index23:int.
  forall result11:int. forall found6:int. forall found14:bool.
  forall found24:bool. forall index14:int. forall index24:int.
  forall found7:int. forall i3:int. forall found15:bool. forall found25:bool.
  forall index15:int. forall index25:int. forall found8:int. forall i4:int.
  forall found16:bool. forall found26:bool. forall index16:int.
  forall index26:int. forall found9:int. forall i5:int. forall found17:bool.
  forall found27:bool. forall index17:int. forall index27:int.
  forall found10:int. forall i6:int. forall found18:bool.
  forall found28:bool. forall index18:int. forall index28:int.
  forall found19:int. forall i7:int. forall found110:bool.
  forall found29:bool. forall index19:int. forall index29:int.
  forall found20:int. forall i8:int. forall result12:bool.
  (dynamic_property((- 2147483648), 2147483647, to_rep(first(table1)),
  to_rep(last(table1))) -> (in_range1(value1) -> (in_range1(value2) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(index1)) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(index2)) -> ((((({
  int__content = result } = { int__content = found }) and (found3 = 0)) and
  (in_range2(found3) and ((({ bool__content = result1 } = { bool__content =
  found1 }) and (found11 = of_int(0))) and ((({ int__content = result2 } = {
  int__content = index1 }) and (index11 = 0)) and ((({ bool__content =
  result3 } = { bool__content = found2 }) and (found21 = of_int(0))) and ((({
  int__content = result4 } = { int__content = index2 }) and
  (index21 = 0)) and ((({ int__content = result5 } = { int__content = i
  }) and (i1 = to_rep(first(table1)))) and
  ((((to_rep(first(table1)) <= i1) and (i1 <= to_rep(last(table1)))) and
  ((((temp___188 = index21) and ((temp___187 = index11) and
  ((temp___186 = found21) and ((temp___185 = found11) and
  ((temp___184 = found3) and ((((((0 <= 2147483647) -> in_range2(found4)) and
  (((- 2147483648) <= 2147483647) -> in_range1(index12))) and
  (((- 2147483648) <= 2147483647) -> in_range1(index22))) and
  ((to_rep(first(table1)) <= i2) and (i2 <= to_rep(last(table1))))) and
  ((((((found4 = 0) and (not (found12 = true))) and
  (not (found22 = true))) or ((found4 = 1) and ((found12 = true) or
  (found22 = true)))) or (((found4 = 2) and (found12 = true)) and
  (found22 = true))) and (((not (found12 = true)) or
  (not (found22 = true))) and (((not (found12 = true)) or
  (to_rep((table[index12])) = value1)) and (((not (found22 = true)) or
  (to_rep((table[index22])) = value2)) and ((found4 <  2) and
  (((((not (found12 = true)) and (to_rep((table[i2])) = value1)) and
  (((found12 = result6) and (found13 = of_int(1))) and
  (((index12 = result7) and (index13 = i2)) and ((((o = (found4 + 1)) and
  in_range1((found4 + 1))) and ((found4 = result8) and (found5 = o))) and
  (((found13 = true) and (index13 = i2)) and (found5 <= 2)))))) or
  ((not ((not (found12 = true)) and (to_rep((table[i2])) = value1))) and
  ((found5 = found4) and ((index13 = index12) and (found13 = found12))))) and
  (((((not (found22 = true)) and (to_rep((table[i2])) = value2)) and
  (((found22 = result9) and (found23 = of_int(1))) and
  (((index22 = result10) and (index23 = i2)) and ((((o1 = (found5 + 1)) and
  in_range1((found5 + 1))) and ((found5 = result11) and (found6 = o1))) and
  (((found23 = true) and (index23 = i2)) and (found6 <= 2)))))) or
  ((not ((not (found22 = true)) and (to_rep((table[i2])) = value2))) and
  ((found6 = found5) and ((index23 = index22) and (found23 = found22))))) and
  ((found6 = 2) or ((not (found6 = 2)) and
  (i2 = to_rep(last(table1)))))))))))))))))) and (((i2 = i3) and
  ((found6 = found7) and ((index23 = index24) and ((index13 = index14) and
  ((found23 = found24) and (found13 = found14)))))) and ((i4 = i2) and
  ((found8 = found6) and ((index25 = index23) and ((index15 = index13) and
  ((found25 = found23) and (found15 = found13)))))))) and ((({ int__content =
  i5 } = { int__content = i3 }) and (({ int__content = found9 } = {
  int__content = found7 }) and (({ int__content = index26 } = {
  int__content = index24 }) and (({ int__content = index16 } = {
  int__content = index14 }) and (({ bool__content = found26 } = {
  bool__content = found24 }) and ({ bool__content = found16 } = {
  bool__content = found14 })))))) and ((i6 = i4) and ((found10 = found8) and
  ((index27 = index25) and ((index17 = index15) and ((found27 = found25) and
  (found17 = found15))))))))) or ((not ((to_rep(first(table1)) <= i1) and
  (i1 <= to_rep(last(table1))))) and (((i1 = i5) and ((found3 = found9) and
  ((index21 = index26) and ((index11 = index16) and ((found21 = found26) and
  (found11 = found16)))))) and ((i6 = i1) and ((found10 = found3) and
  ((index27 = index21) and ((index17 = index11) and ((found27 = found21) and
  (found17 = found11)))))))))))))))) and (((i7 = i5) and
  ((found19 = found9) and (({ int__content = index28 } = { int__content =
  index26 }) and (({ int__content = index18 } = { int__content = index16
  }) and (({ bool__content = found28 } = { bool__content = found26 }) and ({
  bool__content = found18 } = { bool__content = found16 })))))) and
  ((i8 = i6) and ((found20 = found10) and ((index29 = index27) and
  ((index19 = index17) and ((found29 = found27) and
  (found110 = found17)))))))) -> ((((not (found18 = true)) and
  (result12 = true)) or ((found18 = true) and
  ((((((to_rep(first(table1)) <= index18) and
  (index18 <= to_rep(last(table1)))) and (o2 = index18)) and
  (o3 = (table[o2]))) and (o4 = to_rep(o3))) and (((o4 = value1) and
  (result12 = true)) or ((not (o4 = value1)) and (result12 = false)))))) ->
  ((result12 = true) -> ((found28 = true) ->
  (to_rep(first(table1)) <= index28)))))))))))
