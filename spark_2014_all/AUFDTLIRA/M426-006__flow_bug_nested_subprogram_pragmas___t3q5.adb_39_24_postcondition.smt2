(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range1 temp___expr_166)))
(declare-sort contents_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 1000) x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (contents_type contents_type) Bool)
(declare-const dummy1 contents_type)
(declare-datatypes () ((contents_type__ref (mk_contents_type__ref (contents_type__content contents_type)))))
(define-fun contents_type__ref___projection ((a contents_type__ref)) contents_type (contents_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 1000) 1000)) (in_range2 temp___expr_173)))
(declare-fun to_rep (contents_type) Int)
(declare-fun of_rep (Int) contents_type)
(assert (forall ((x contents_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x contents_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int contents_type))))))
(declare-fun slide ((Array Int contents_type) Int Int) (Array Int contents_type))
(assert (forall ((a (Array Int contents_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int contents_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int contents_type)) (a__first Int) (a__last Int) (b (Array Int contents_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int contents_type)) (b (Array Int contents_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun perm ((Array Int contents_type) (Array Int contents_type)) Bool)
(declare-fun perm__function_guard (Bool (Array Int contents_type) (Array Int contents_type)) Bool)
(assert (forall ((a (Array Int contents_type)) (b (Array Int contents_type))) (! (=> (= (bool_eq a 1 100 b 1 100) true) (= (perm a b) true)) :pattern ((perm a b)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const t (Array Int contents_type))
(declare-const t_old (Array Int contents_type))
(declare-const temp Int)
(declare-const o contents_type)
(declare-const o1 (Array Int contents_type))
(declare-const o2 contents_type)
(declare-const o3 (Array Int contents_type))
(declare-const result (Array Int contents_type))
(declare-const t_old1 (Array Int contents_type))
(declare-const result1 Int)
(declare-const temp1 Int)
(declare-const result2 (Array Int contents_type))
(declare-const t1 (Array Int contents_type))
(declare-const result3 (Array Int contents_type))
(declare-const t2 (Array Int contents_type))
(declare-const t3 (Array Int contents_type))
(declare-const t_old2 (Array Int contents_type))
(declare-const temp2 Int)
(declare-const t4 (Array Int contents_type))
(declare-const t_old3 (Array Int contents_type))
(declare-const temp3 Int)
(assert (in_range1 i))
(assert (in_range1 j))
(assert (= result t_old))
(assert (= t_old1 t))
(assert (=> (<= (- 1000) 1000) (in_range2 temp)))
(assert (= result1 temp))
(assert (= temp1 (to_rep (select t i))))
(assert (= (to_rep o) (to_rep (select t j))))
(assert (= o1 (store t i o)))
(assert (= result2 t))
(assert (= t1 o1))
(assert (= (to_rep o2) temp1))
(assert (= o3 (store t1 j o2)))
(assert (= result3 t1))
(assert (= t2 o3))
(assert (= (perm t2 t_old1) true))
(assert (= temp2 temp1))
(assert (= t_old2 t_old1))
(assert (= t2 t3))
(assert (= temp3 temp1))
(assert (= t_old3 t_old1))
(assert (= t4 t2))
(assert (not (= (to_rep (select t3 i)) (to_rep (select t j)))))
(check-sat)
(exit)
