(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq2 (us_rep us_rep) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((unbounded_string__ref (mk_unbounded_string__ref (unbounded_string__content us_rep)))))
(define-fun unbounded_string__ref___projection ((a unbounded_string__ref)) us_rep (unbounded_string__content a))
(define-fun dynamic_invariant ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun to_unbounded_string (us_t) us_rep)
(declare-fun to_unbounded_string__function_guard (us_rep us_t) Bool)
(assert true)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__people__person__name us_rep) (rec__people__person__dob integer) (rec__people__person__alive Bool) (rec__ext__ us_private)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) us_rep (rec__people__person__name a))
(define-fun us_split_fields_DOB__projection ((a us_split_fields)) integer (rec__people__person__dob a))
(define-fun us_split_fields_Alive__projection ((a us_split_fields)) Bool (rec__people__person__alive a))
(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___10__projection ((a us_rep1)) Int (attr__tag a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (bool_eq2 (rec__people__person__name (us_split_fields1 a)) (rec__people__person__name (us_split_fields1 b))) true) (= (to_rep1 (rec__people__person__dob (us_split_fields1 a))) (to_rep1 (rec__people__person__dob (us_split_fields1 b))))) (= (rec__people__person__alive (us_split_fields1 a)) (rec__people__person__alive (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)
(declare-const us_tag Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const people__person__name__first__bit Int)
(declare-const people__person__name__last__bit Int)
(declare-const people__person__name__position Int)
(assert (<= 0 people__person__name__first__bit))
(assert (< people__person__name__first__bit people__person__name__last__bit))
(assert (<= 0 people__person__name__position))
(declare-const people__person__dob__first__bit Int)
(declare-const people__person__dob__last__bit Int)
(declare-const people__person__dob__position Int)
(assert (<= 0 people__person__dob__first__bit))
(assert (< people__person__dob__first__bit people__person__dob__last__bit))
(assert (<= 0 people__person__dob__position))
(declare-const people__person__alive__first__bit Int)
(declare-const people__person__alive__last__bit Int)
(declare-const people__person__alive__position Int)
(assert (<= 0 people__person__alive__first__bit))
(assert (< people__person__alive__first__bit people__person__alive__last__bit))
(assert (<= 0 people__person__alive__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((person__ref (mk_person__ref (person__content us_rep1)))))
(define-fun person__ref___projection ((a person__ref)) us_rep1 (person__content a))
(declare-fun new_person__2 (us_rep us_private) us_rep1)
(declare-fun new_person__2__function_guard (us_rep1 us_rep us_private) Bool)
(declare-fun new_person__21 (Int us_rep us_private) us_rep1)
(declare-fun new_person__2__function_guard1 (us_rep1 Int us_rep us_private) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (natural natural) Bool)
(declare-const dummy6 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort professions 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (professions professions) Bool)
(declare-const dummy7 professions)
(declare-datatypes () ((professions__ref (mk_professions__ref (professions__content professions)))))
(define-fun professions__ref___projection ((a professions__ref)) professions (professions__content a))
(declare-fun to_rep3 (professions) Int)
(declare-fun of_rep3 (Int) professions)
(assert (forall ((x professions)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x professions)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort skills 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (skills skills) Bool)
(declare-const dummy8 skills)
(declare-datatypes () ((skills__ref (mk_skills__ref (skills__content skills)))))
(define-fun skills__ref___projection ((a skills__ref)) skills (skills__content a))
(declare-fun to_rep4 (skills) Int)
(declare-fun of_rep4 (Int) skills)
(assert (forall ((x skills)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x skills)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int skills))))))
(declare-fun slide1 ((Array Int skills) Int Int) (Array Int skills))
(assert (forall ((a (Array Int skills))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int skills))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int skills)) (a__first Int) (a__last Int) (b (Array Int skills)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_162 Int)) (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last)) (= (to_rep4 (select a temp___idx_162)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_162))))))) true false))
(assert (forall ((a (Array Int skills)) (b (Array Int skills))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_162 Int)) (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last)) (= (to_rep4 (select a temp___idx_162)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_162)))))))))))
(declare-const dummy9 (Array Int skills))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int skills)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int skills)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int skills)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int skills))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int skills))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int skills))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq9 ((Array Int skills) (Array Int skills)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__people__person__name1 us_rep) (rec__people__person__dob1 integer) (rec__people__person__alive1 Bool) (rec__professionals__professional__profession professions) (rec__professionals__professional__skilled_in (Array Int skills)) (rec__professionals__professional__number_of_people_killed natural) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Name__2__projection ((a us_split_fields2)) us_rep (rec__people__person__name1 a))
(define-fun us_split_fields_DOB__2__projection ((a us_split_fields2)) integer (rec__people__person__dob1 a))
(define-fun us_split_fields_Alive__2__projection ((a us_split_fields2)) Bool (rec__people__person__alive1 a))
(define-fun us_split_fields_Profession__projection ((a us_split_fields2)) professions (rec__professionals__professional__profession a))
(define-fun us_split_fields_Skilled_In__projection ((a us_split_fields2)) (Array Int skills) (rec__professionals__professional__skilled_in a))
(define-fun us_split_fields_Number_Of_People_Killed__projection ((a us_split_fields2)) natural (rec__professionals__professional__number_of_people_killed a))
(define-fun us_split_fields___4__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___13__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___14__projection ((a us_rep2)) Int (attr__tag1 a))
(declare-fun hide_ext__ (professions (Array Int skills) natural us_private) us_private)
(declare-fun extract__profession (us_private) professions)
(assert (forall ((profession professions)) (forall ((skilled_in (Array Int skills))) (forall ((number_of_people_killed natural)) (forall ((rec__ext__2 us_private)) (= (extract__profession (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) profession))))))
(declare-fun extract__skilled_in (us_private) (Array Int skills))
(assert (forall ((profession professions)) (forall ((skilled_in (Array Int skills))) (forall ((number_of_people_killed natural)) (forall ((rec__ext__2 us_private)) (= (extract__skilled_in (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) skilled_in))))))
(declare-fun extract__number_of_people_killed (us_private) natural)
(assert (forall ((profession professions)) (forall ((skilled_in (Array Int skills))) (forall ((number_of_people_killed natural)) (forall ((rec__ext__2 us_private)) (= (extract__number_of_people_killed (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) number_of_people_killed))))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep2)) us_rep1 (mk___rep (mk___split_fields (rec__people__person__name1 (us_split_fields3 a)) (rec__people__person__dob1 (us_split_fields3 a)) (rec__people__person__alive1 (us_split_fields3 a)) (hide_ext__ (rec__professionals__professional__profession (us_split_fields3 a)) (rec__professionals__professional__skilled_in (us_split_fields3 a)) (rec__professionals__professional__number_of_people_killed (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep1 (mk___split_fields1 (rec__people__person__name (us_split_fields1 r)) (rec__people__person__dob (us_split_fields1 r)) (rec__people__person__alive (us_split_fields1 r)) (extract__profession (rec__ext__ (us_split_fields1 r))) (extract__skilled_in (rec__ext__ (us_split_fields1 r))) (extract__number_of_people_killed (rec__ext__ (us_split_fields1 r))) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq5 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (and (and (= (bool_eq2 (rec__people__person__name1 (us_split_fields3 a)) (rec__people__person__name1 (us_split_fields3 b))) true) (= (to_rep1 (rec__people__person__dob1 (us_split_fields3 a))) (to_rep1 (rec__people__person__dob1 (us_split_fields3 b))))) (= (rec__people__person__alive1 (us_split_fields3 a)) (rec__people__person__alive1 (us_split_fields3 b)))) (= (to_rep3 (rec__professionals__professional__profession (us_split_fields3 a))) (to_rep3 (rec__professionals__professional__profession (us_split_fields3 b))))) (= (bool_eq4 (rec__professionals__professional__skilled_in (us_split_fields3 a)) 1 4 (rec__professionals__professional__skilled_in (us_split_fields3 b)) 1 4) true)) (= (to_rep2 (rec__professionals__professional__number_of_people_killed (us_split_fields3 a))) (to_rep2 (rec__professionals__professional__number_of_people_killed (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const people__person__name__first__bit1 Int)
(declare-const people__person__name__last__bit1 Int)
(declare-const people__person__name__position1 Int)
(assert (<= 0 people__person__name__first__bit1))
(assert (< people__person__name__first__bit1 people__person__name__last__bit1))
(assert (<= 0 people__person__name__position1))
(declare-const people__person__dob__first__bit1 Int)
(declare-const people__person__dob__last__bit1 Int)
(declare-const people__person__dob__position1 Int)
(assert (<= 0 people__person__dob__first__bit1))
(assert (< people__person__dob__first__bit1 people__person__dob__last__bit1))
(assert (<= 0 people__person__dob__position1))
(declare-const people__person__alive__first__bit1 Int)
(declare-const people__person__alive__last__bit1 Int)
(declare-const people__person__alive__position1 Int)
(assert (<= 0 people__person__alive__first__bit1))
(assert (< people__person__alive__first__bit1 people__person__alive__last__bit1))
(assert (<= 0 people__person__alive__position1))
(declare-const professionals__professional__profession__first__bit Int)
(declare-const professionals__professional__profession__last__bit Int)
(declare-const professionals__professional__profession__position Int)
(assert (<= 0 professionals__professional__profession__first__bit))
(assert (< professionals__professional__profession__first__bit professionals__professional__profession__last__bit))
(assert (<= 0 professionals__professional__profession__position))
(declare-const professionals__professional__skilled_in__first__bit Int)
(declare-const professionals__professional__skilled_in__last__bit Int)
(declare-const professionals__professional__skilled_in__position Int)
(assert (<= 0 professionals__professional__skilled_in__first__bit))
(assert (< professionals__professional__skilled_in__first__bit professionals__professional__skilled_in__last__bit))
(assert (<= 0 professionals__professional__skilled_in__position))
(declare-const professionals__professional__number_of_people_killed__first__bit Int)
(declare-const professionals__professional__number_of_people_killed__last__bit Int)
(declare-const professionals__professional__number_of_people_killed__position Int)
(assert (<= 0 professionals__professional__number_of_people_killed__first__bit))
(assert (< professionals__professional__number_of_people_killed__first__bit professionals__professional__number_of_people_killed__last__bit))
(assert (<= 0 professionals__professional__number_of_people_killed__position))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((professional__ref (mk_professional__ref (professional__content us_rep2)))))
(define-fun professional__ref___projection ((a professional__ref)) us_rep2 (professional__content a))
(declare-fun new_person__22 (us_rep us_private) us_rep2)
(declare-fun new_person__2__function_guard2 (us_rep2 us_rep us_private) Bool)
(declare-fun new_person__23 (Int us_rep us_private) us_rep2)
(declare-fun new_person__2__function_guard3 (us_rep2 Int us_rep us_private) Bool)
(define-fun in_range6 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Bool)
(declare-fun temp___String_Literal_633 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_633 us_void_param) 1)) 78) (= (to_rep (select (temp___String_Literal_633 us_void_param) 2)) 97)) (= (to_rep (select (temp___String_Literal_633 us_void_param) 3)) 109)) (= (to_rep (select (temp___String_Literal_633 us_void_param) 4)) 101)) (= (to_rep (select (temp___String_Literal_633 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_633 us_void_param) 6)) 101)) (= (to_rep (select (temp___String_Literal_633 us_void_param) 7)) 115)) (= (to_rep (select (temp___String_Literal_633 us_void_param) 8)) 115)) :pattern ((temp___String_Literal_633 us_void_param)))))
(define-fun default_initial_assumption ((temp___expr_631 us_rep1) (temp___skip_top_level_632 Bool)) Bool (and (= (attr__tag temp___expr_631) us_tag) (and (and (= (rec__people__person__name (us_split_fields1 temp___expr_631)) (to_unbounded_string (of_array (temp___String_Literal_633 Tuple0) 1 8))) (= (to_rep1 (rec__people__person__dob (us_split_fields1 temp___expr_631))) (- 1))) (= (rec__people__person__alive (us_split_fields1 temp___expr_631)) (distinct 0 0)))))
(assert (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (attr__tag (new_person__2 name people__date)) us_tag) :pattern ((new_person__2 name people__date))))))
(assert (forall ((attr__tag2 Int)) (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (attr__tag (new_person__21 attr__tag2 name people__date)) attr__tag2) :pattern ((new_person__21 attr__tag2 name people__date)))))))
(assert (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (new_person__2 name people__date) (new_person__21 us_tag name people__date)) :pattern ((new_person__21 us_tag name people__date))))))
(assert (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (to_base (new_person__22 name people__date)) (new_person__21 us_tag1 name people__date)) :pattern ((new_person__21 us_tag1 name people__date))))))
(declare-fun print__specific_post (Int us_rep2) Bool)
(assert true)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-fun new_professional (us_rep Int Int) us_rep2)
(declare-fun new_professional__function_guard (us_rep2 us_rep Int Int) Bool)
(declare-fun new_professional1 (Int us_rep Int Int) us_rep2)
(declare-fun new_professional__function_guard1 (us_rep2 Int us_rep Int Int) Bool)
(define-fun dynamic_invariant2 ((temp___expr_650 Int) (temp___is_init_646 Bool) (temp___skip_constant_647 Bool) (temp___do_toplevel_648 Bool) (temp___do_typ_inv_649 Bool)) Bool (=> (or (= temp___is_init_646 true) (<= 0 3)) (in_range4 temp___expr_650)))
(define-fun default_initial_assumption1 ((temp___expr_683 us_rep2) (temp___skip_top_level_684 Bool)) Bool (and (= (attr__tag1 temp___expr_683) us_tag1) (and (and (= (rec__people__person__name1 (us_split_fields3 temp___expr_683)) (to_unbounded_string (of_array (temp___String_Literal_633 Tuple0) 1 8))) (= (to_rep1 (rec__people__person__dob1 (us_split_fields3 temp___expr_683))) (- 1))) (= (rec__people__person__alive1 (us_split_fields3 temp___expr_683)) (distinct 0 0)))))
(assert (forall ((name us_rep)) (forall ((dob Int) (prof Int)) (! (=> (and (dynamic_invariant1 dob true true true true) (dynamic_invariant2 prof true true true true)) (= (attr__tag1 (new_professional name dob prof)) us_tag1)) :pattern ((new_professional name dob prof))))))
(assert (forall ((attr__tag2 Int) (dob Int) (prof Int)) (forall ((name us_rep)) (! (=> (and (dynamic_invariant1 dob true true true true) (dynamic_invariant2 prof true true true true)) (= (attr__tag1 (new_professional1 attr__tag2 name dob prof)) attr__tag2)) :pattern ((new_professional1 attr__tag2 name dob prof))))))
(assert (forall ((name us_rep)) (forall ((dob Int) (prof Int)) (! (= (new_professional name dob prof) (new_professional1 us_tag1 name dob prof)) :pattern ((new_professional1 us_tag1 name dob prof))))))
(declare-fun new_professional__2 (us_rep1 Int) us_rep2)
(declare-fun new_professional__2__function_guard (us_rep2 us_rep1 Int) Bool)
(declare-fun new_professional__21 (Int us_rep1 Int) us_rep2)
(declare-fun new_professional__2__function_guard1 (us_rep2 Int us_rep1 Int) Bool)
(assert (forall ((p us_rep1)) (forall ((prof Int)) (! (=> (dynamic_invariant2 prof true true true true) (= (attr__tag1 (new_professional__2 p prof)) us_tag1)) :pattern ((new_professional__2 p prof))))))
(assert (forall ((attr__tag2 Int) (prof Int)) (forall ((p us_rep1)) (! (=> (dynamic_invariant2 prof true true true true) (= (attr__tag1 (new_professional__21 attr__tag2 p prof)) attr__tag2)) :pattern ((new_professional__21 attr__tag2 p prof))))))
(assert (forall ((p us_rep1)) (forall ((prof Int)) (! (= (new_professional__2 p prof) (new_professional__21 us_tag1 p prof)) :pattern ((new_professional__21 us_tag1 p prof))))))
(declare-fun has_training (us_rep2 us_private) Bool)
(declare-fun has_training__function_guard (Bool us_rep2 us_private) Bool)
(declare-fun has_training1 (Int us_rep2 us_private) Bool)
(declare-fun has_training__function_guard1 (Bool Int us_rep2 us_private) Bool)
(assert true)
(assert true)
(assert (forall ((p us_rep2)) (forall ((professionals__state us_private)) (! (= (ite (has_training p professionals__state) 1 0) (ite (has_training1 us_tag1 p professionals__state) 1 0)) :pattern ((has_training1 us_tag1 p professionals__state))))))
(declare-fun train__specific_post (Int us_split_fields2 Int us_private us_split_fields2 us_private) Bool)
(assert true)
(declare-fun is_alive (us_rep1) Bool)
(declare-fun is_alive__function_guard (Bool us_rep1) Bool)
(declare-fun is_alive1 (Int us_rep1) Bool)
(declare-fun is_alive__function_guard1 (Bool Int us_rep1) Bool)
(declare-fun has_licence_to_kill (us_rep2) Bool)
(declare-fun has_licence_to_kill__function_guard (Bool us_rep2) Bool)
(declare-fun has_licence_to_kill1 (Int us_rep2) Bool)
(declare-fun has_licence_to_kill__function_guard1 (Bool Int us_rep2) Bool)
(declare-fun another_one_bites_the_dust__specific_post (Int us_split_fields2 Int us_split_fields Int us_split_fields2 us_split_fields) Bool)
(assert (forall ((professionals__another_one_bites_the_dust__killer__fields us_split_fields2) (professionals__another_one_bites_the_dust__killer__old__fields us_split_fields2)) (forall ((killer__attr__tag Int) (victim__attr__tag Int)) (forall ((professionals__another_one_bites_the_dust__victim__fields us_split_fields) (professionals__another_one_bites_the_dust__victim__old__fields us_split_fields)) (! (=> (another_one_bites_the_dust__specific_post us_tag1 professionals__another_one_bites_the_dust__killer__fields killer__attr__tag professionals__another_one_bites_the_dust__victim__fields victim__attr__tag professionals__another_one_bites_the_dust__killer__old__fields professionals__another_one_bites_the_dust__victim__old__fields) (and (= (is_alive (to_base (mk___rep1 professionals__another_one_bites_the_dust__killer__fields killer__attr__tag))) true) (not (= (is_alive1 (attr__tag (mk___rep professionals__another_one_bites_the_dust__victim__fields victim__attr__tag)) (mk___rep professionals__another_one_bites_the_dust__victim__fields victim__attr__tag)) true)))) :pattern ((another_one_bites_the_dust__specific_post us_tag1 professionals__another_one_bites_the_dust__killer__fields killer__attr__tag professionals__another_one_bites_the_dust__victim__fields victim__attr__tag professionals__another_one_bites_the_dust__killer__old__fields professionals__another_one_bites_the_dust__victim__old__fields)))))))
(declare-const kenny__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const uni_student__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const zerocool__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const rambo__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const dr_house__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun temp___String_Literal_730 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_730 us_void_param) 1)) 75) (= (to_rep (select (temp___String_Literal_730 us_void_param) 2)) 101)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 4)) 110)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 6)) 116)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 7)) 104)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 9)) 77)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 10)) 99)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 11)) 67)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 12)) 111)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 13)) 114)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 14)) 109)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 15)) 105)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 16)) 99)) (= (to_rep (select (temp___String_Literal_730 us_void_param) 17)) 107)) :pattern ((temp___String_Literal_730 us_void_param)))))
(declare-fun temp___String_Literal_731 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_731 us_void_param) 1)) 68) (= (to_rep (select (temp___String_Literal_731 us_void_param) 2)) 97)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 3)) 100)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 4)) 101)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 5)) 32)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 6)) 77)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 7)) 117)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 8)) 114)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 9)) 112)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 10)) 104)) (= (to_rep (select (temp___String_Literal_731 us_void_param) 11)) 121)) :pattern ((temp___String_Literal_731 us_void_param)))))
(declare-fun temp___String_Literal_732 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_732 us_void_param) 1)) 74) (= (to_rep (select (temp___String_Literal_732 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 3)) 104)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 4)) 110)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 5)) 32)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 6)) 82)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 7)) 97)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 8)) 109)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 9)) 98)) (= (to_rep (select (temp___String_Literal_732 us_void_param) 10)) 111)) :pattern ((temp___String_Literal_732 us_void_param)))))
(declare-fun temp___String_Literal_733 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_733 us_void_param) 1)) 71) (= (to_rep (select (temp___String_Literal_733 us_void_param) 2)) 114)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 3)) 101)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 4)) 103)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 5)) 111)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 7)) 121)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 9)) 72)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 10)) 111)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 11)) 117)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 12)) 115)) (= (to_rep (select (temp___String_Literal_733 us_void_param) 13)) 101)) :pattern ((temp___String_Literal_733 us_void_param)))))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(assert true)
(assert true)
(assert (forall ((p us_rep1)) (! (= (ite (is_alive p) 1 0) (ite (is_alive1 us_tag p) 1 0)) :pattern ((is_alive1 us_tag p)))))
(assert (forall ((p us_rep1)) (! (= (ite (is_alive p) 1 0) (ite (is_alive1 us_tag1 p) 1 0)) :pattern ((is_alive1 us_tag1 p)))))
(define-fun dynamic_invariant6 ((temp___expr_657 Int) (temp___is_init_653 Bool) (temp___skip_constant_654 Bool) (temp___do_toplevel_655 Bool) (temp___do_typ_inv_656 Bool)) Bool (=> (or (= temp___is_init_653 true) (<= 0 12)) (in_range5 temp___expr_657)))
(assert (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (attr__tag1 (new_person__22 name people__date)) us_tag1) :pattern ((new_person__22 name people__date))))))
(assert (forall ((attr__tag2 Int)) (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (attr__tag1 (new_person__23 attr__tag2 name people__date)) attr__tag2) :pattern ((new_person__23 attr__tag2 name people__date)))))))
(assert (forall ((name us_rep)) (forall ((people__date us_private)) (! (= (new_person__22 name people__date) (new_person__23 us_tag1 name people__date)) :pattern ((new_person__23 us_tag1 name people__date))))))
(assert true)
(assert true)
(assert (forall ((p us_rep2)) (! (= (ite (has_licence_to_kill p) 1 0) (ite (has_licence_to_kill1 us_tag1 p) 1 0)) :pattern ((has_licence_to_kill1 us_tag1 p)))))
(declare-const kenny__split_fields us_rep)
(declare-const kenny__split_fields1 integer)
(declare-const kenny__split_fields2 Bool)
(declare-const kenny__split_fields3 us_private)
(declare-const uni_student__split_fields us_rep)
(declare-const uni_student__split_fields1 integer)
(declare-const uni_student__split_fields2 Bool)
(declare-const uni_student__split_fields3 professions)
(declare-const uni_student__split_fields4 (Array Int skills))
(declare-const uni_student__split_fields5 natural)
(declare-const uni_student__split_fields6 us_private)
(declare-const zerocool__split_fields us_rep)
(declare-const zerocool__split_fields1 integer)
(declare-const zerocool__split_fields2 Bool)
(declare-const zerocool__split_fields3 professions)
(declare-const zerocool__split_fields4 (Array Int skills))
(declare-const zerocool__split_fields5 natural)
(declare-const zerocool__split_fields6 us_private)
(declare-const rambo__split_fields us_rep)
(declare-const rambo__split_fields1 integer)
(declare-const rambo__split_fields2 Bool)
(declare-const rambo__split_fields3 professions)
(declare-const rambo__split_fields4 (Array Int skills))
(declare-const rambo__split_fields5 natural)
(declare-const rambo__split_fields6 us_private)
(declare-const dr_house__split_fields us_rep)
(declare-const dr_house__split_fields1 integer)
(declare-const dr_house__split_fields2 Bool)
(declare-const dr_house__split_fields3 professions)
(declare-const dr_house__split_fields4 (Array Int skills))
(declare-const dr_house__split_fields5 natural)
(declare-const dr_house__split_fields6 us_private)
(declare-const skill Int)
(declare-const date us_private)
(declare-const o us_rep)
(declare-const main__kenny__assume us_rep)
(declare-const main__kenny__assume1 integer)
(declare-const main__kenny__assume2 Bool)
(declare-const main__kenny__assume3 us_private)
(declare-const main__kenny__assume4 Int)
(declare-const main__uni_student__assume us_rep)
(declare-const main__uni_student__assume1 integer)
(declare-const main__uni_student__assume2 Bool)
(declare-const main__uni_student__assume3 professions)
(declare-const main__uni_student__assume4 (Array Int skills))
(declare-const main__uni_student__assume5 natural)
(declare-const main__uni_student__assume6 us_private)
(declare-const main__uni_student__assume7 Int)
(declare-const o1 us_rep)
(declare-const main__zerocool__assume us_rep)
(declare-const main__zerocool__assume1 integer)
(declare-const main__zerocool__assume2 Bool)
(declare-const main__zerocool__assume3 professions)
(declare-const main__zerocool__assume4 (Array Int skills))
(declare-const main__zerocool__assume5 natural)
(declare-const main__zerocool__assume6 us_private)
(declare-const main__zerocool__assume7 Int)
(declare-const o2 us_rep)
(declare-const main__rambo__assume us_rep)
(declare-const main__rambo__assume1 integer)
(declare-const main__rambo__assume2 Bool)
(declare-const main__rambo__assume3 professions)
(declare-const main__rambo__assume4 (Array Int skills))
(declare-const main__rambo__assume5 natural)
(declare-const main__rambo__assume6 us_private)
(declare-const main__rambo__assume7 Int)
(declare-const o3 us_rep)
(declare-const main__dr_house__assume us_rep2)
(declare-const result us_split_fields__ref)
(declare-const kenny__split_fields4 us_split_fields)
(declare-const result1 us_split_fields__ref1)
(declare-const uni_student__split_fields7 us_split_fields2)
(declare-const result2 us_split_fields__ref1)
(declare-const zerocool__split_fields7 us_split_fields2)
(declare-const result3 us_split_fields__ref1)
(declare-const rambo__split_fields7 us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const dr_house__split_fields7 us_split_fields2)
(declare-const result5 int__ref)
(declare-const skill1 Int)
(declare-const state us_private)
(declare-const result6 Bool)
(declare-const uni_student__split_fields8 us_split_fields2)
(declare-const result7 Bool)
(declare-const zerocool__split_fields8 us_split_fields2)
(declare-const result8 Bool)
(declare-const rambo__split_fields8 us_split_fields2)
(declare-const result9 Bool)
(declare-const dr_house__split_fields8 us_split_fields2)
(declare-const result10 int__ref)
(declare-const skill2 Int)
(declare-const state1 us_private)
(declare-const result11 Bool)
(declare-const uni_student__split_fields9 us_split_fields2)
(declare-const result12 Bool)
(declare-const zerocool__split_fields9 us_split_fields2)
(declare-const result13 Bool)
(declare-const rambo__split_fields9 us_split_fields2)
(declare-const result14 Bool)
(declare-const dr_house__split_fields9 us_split_fields2)
(declare-const result15 int__ref)
(declare-const skill3 Int)
(declare-const state2 us_private)
(declare-const result16 Bool)
(declare-const uni_student__split_fields10 us_split_fields2)
(declare-const result17 Bool)
(declare-const zerocool__split_fields10 us_split_fields2)
(declare-const result18 Bool)
(declare-const rambo__split_fields10 us_split_fields2)
(declare-const result19 Bool)
(declare-const dr_house__split_fields10 us_split_fields2)
(declare-const result20 int__ref)
(declare-const skill4 Int)
(declare-const state3 us_private)
(declare-const result21 Bool)
(declare-const uni_student__split_fields11 us_split_fields2)
(declare-const result22 Bool)
(declare-const zerocool__split_fields11 us_split_fields2)
(declare-const result23 Bool)
(declare-const rambo__split_fields11 us_split_fields2)
(declare-const result24 Bool)
(declare-const dr_house__split_fields11 us_split_fields2)
(declare-const result25 int__ref)
(declare-const skill5 Int)
(declare-const state4 us_private)
(declare-const result26 Bool)
(declare-const uni_student__split_fields12 us_split_fields2)
(declare-const result27 Bool)
(declare-const zerocool__split_fields12 us_split_fields2)
(declare-const result28 Bool)
(declare-const rambo__split_fields12 us_split_fields2)
(declare-const result29 Bool)
(declare-const dr_house__split_fields12 us_split_fields2)
(declare-const result30 int__ref)
(declare-const skill6 Int)
(declare-const state5 us_private)
(declare-const result31 Bool)
(declare-const uni_student__split_fields13 us_split_fields2)
(declare-const result32 Bool)
(declare-const zerocool__split_fields13 us_split_fields2)
(declare-const result33 Bool)
(declare-const rambo__split_fields13 us_split_fields2)
(declare-const result34 Bool)
(declare-const dr_house__split_fields13 us_split_fields2)
(declare-const result35 int__ref)
(declare-const skill7 Int)
(declare-const state6 us_private)
(declare-const result36 Bool)
(declare-const uni_student__split_fields14 us_split_fields2)
(declare-const result37 Bool)
(declare-const zerocool__split_fields14 us_split_fields2)
(declare-const result38 Bool)
(declare-const rambo__split_fields14 us_split_fields2)
(declare-const result39 Bool)
(declare-const dr_house__split_fields14 us_split_fields2)
(declare-const result40 int__ref)
(declare-const skill8 Int)
(declare-const state7 us_private)
(declare-const result41 Bool)
(declare-const uni_student__split_fields15 us_split_fields2)
(declare-const result42 Bool)
(declare-const zerocool__split_fields15 us_split_fields2)
(declare-const result43 Bool)
(declare-const rambo__split_fields15 us_split_fields2)
(declare-const result44 Bool)
(declare-const dr_house__split_fields15 us_split_fields2)
(declare-const result45 int__ref)
(declare-const skill9 Int)
(declare-const state8 us_private)
(declare-const result46 Bool)
(declare-const uni_student__split_fields16 us_split_fields2)
(declare-const result47 Bool)
(declare-const zerocool__split_fields16 us_split_fields2)
(declare-const result48 Bool)
(declare-const rambo__split_fields16 us_split_fields2)
(declare-const result49 Bool)
(declare-const dr_house__split_fields16 us_split_fields2)
(declare-const result50 int__ref)
(declare-const skill10 Int)
(declare-const state9 us_private)
(declare-const result51 Bool)
(declare-const uni_student__split_fields17 us_split_fields2)
(declare-const result52 Bool)
(declare-const zerocool__split_fields17 us_split_fields2)
(declare-const result53 Bool)
(declare-const rambo__split_fields17 us_split_fields2)
(declare-const result54 Bool)
(declare-const dr_house__split_fields17 us_split_fields2)
(declare-const result55 int__ref)
(declare-const skill11 Int)
(declare-const state10 us_private)
(declare-const result56 Bool)
(declare-const uni_student__split_fields18 us_split_fields2)
(declare-const result57 Bool)
(declare-const zerocool__split_fields18 us_split_fields2)
(declare-const result58 Bool)
(declare-const rambo__split_fields18 us_split_fields2)
(declare-const result59 Bool)
(declare-const dr_house__split_fields18 us_split_fields2)
(declare-const result60 int__ref)
(declare-const skill12 Int)
(declare-const state11 us_private)
(declare-const result61 Bool)
(declare-const uni_student__split_fields19 us_split_fields2)
(declare-const result62 Bool)
(declare-const zerocool__split_fields19 us_split_fields2)
(declare-const result63 Bool)
(declare-const rambo__split_fields19 us_split_fields2)
(declare-const result64 Bool)
(declare-const dr_house__split_fields19 us_split_fields2)
(declare-const result65 int__ref)
(declare-const skill13 Int)
(declare-const state12 us_private)
(declare-const result66 Bool)
(declare-const uni_student__split_fields20 us_split_fields2)
(declare-const result67 Bool)
(declare-const zerocool__split_fields20 us_split_fields2)
(declare-const result68 Bool)
(declare-const rambo__split_fields20 us_split_fields2)
(declare-const result69 Bool)
(declare-const dr_house__split_fields20 us_split_fields2)
(assert (= o (to_unbounded_string (mk___t (temp___String_Literal_730 Tuple0) (mk 1 17)))))
(assert (= (mk___rep (mk___split_fields main__kenny__assume main__kenny__assume1 main__kenny__assume2 main__kenny__assume3) main__kenny__assume4) (new_person__2 o date)))
(assert (= result (mk___split_fields__ref (mk___split_fields kenny__split_fields kenny__split_fields1 kenny__split_fields2 kenny__split_fields3))))
(assert (= kenny__split_fields4 (mk___split_fields main__kenny__assume main__kenny__assume1 main__kenny__assume2 main__kenny__assume3)))
(assert (= kenny__attr__tag us_tag))
(assert (= (mk___rep1 (mk___split_fields1 main__uni_student__assume main__uni_student__assume1 main__uni_student__assume2 main__uni_student__assume3 main__uni_student__assume4 main__uni_student__assume5 main__uni_student__assume6) main__uni_student__assume7) (new_professional__2 (mk___rep kenny__split_fields4 kenny__attr__tag) 0)))
(assert (= result1 (mk___split_fields__ref1 (mk___split_fields1 uni_student__split_fields uni_student__split_fields1 uni_student__split_fields2 uni_student__split_fields3 uni_student__split_fields4 uni_student__split_fields5 uni_student__split_fields6))))
(assert (= uni_student__split_fields7 (mk___split_fields1 main__uni_student__assume main__uni_student__assume1 main__uni_student__assume2 main__uni_student__assume3 main__uni_student__assume4 main__uni_student__assume5 main__uni_student__assume6)))
(assert (= uni_student__attr__tag us_tag1))
(assert (= o1 (to_unbounded_string (mk___t (temp___String_Literal_731 Tuple0) (mk 1 11)))))
(assert (= (mk___rep1 (mk___split_fields1 main__zerocool__assume main__zerocool__assume1 main__zerocool__assume2 main__zerocool__assume3 main__zerocool__assume4 main__zerocool__assume5 main__zerocool__assume6) main__zerocool__assume7) (new_professional o1 1011977 1)))
(assert (= result2 (mk___split_fields__ref1 (mk___split_fields1 zerocool__split_fields zerocool__split_fields1 zerocool__split_fields2 zerocool__split_fields3 zerocool__split_fields4 zerocool__split_fields5 zerocool__split_fields6))))
(assert (= zerocool__split_fields7 (mk___split_fields1 main__zerocool__assume main__zerocool__assume1 main__zerocool__assume2 main__zerocool__assume3 main__zerocool__assume4 main__zerocool__assume5 main__zerocool__assume6)))
(assert (= zerocool__attr__tag us_tag1))
(assert (= o2 (to_unbounded_string (mk___t (temp___String_Literal_732 Tuple0) (mk 1 10)))))
(assert (= (mk___rep1 (mk___split_fields1 main__rambo__assume main__rambo__assume1 main__rambo__assume2 main__rambo__assume3 main__rambo__assume4 main__rambo__assume5 main__rambo__assume6) main__rambo__assume7) (new_professional o2 6071946 2)))
(assert (= result3 (mk___split_fields__ref1 (mk___split_fields1 rambo__split_fields rambo__split_fields1 rambo__split_fields2 rambo__split_fields3 rambo__split_fields4 rambo__split_fields5 rambo__split_fields6))))
(assert (= rambo__split_fields7 (mk___split_fields1 main__rambo__assume main__rambo__assume1 main__rambo__assume2 main__rambo__assume3 main__rambo__assume4 main__rambo__assume5 main__rambo__assume6)))
(assert (= rambo__attr__tag us_tag1))
(assert (= o3 (to_unbounded_string (mk___t (temp___String_Literal_733 Tuple0) (mk 1 13)))))
(assert (= main__dr_house__assume (new_professional o3 11061959 3)))
(assert (= result4 (mk___split_fields__ref1 (mk___split_fields1 dr_house__split_fields dr_house__split_fields1 dr_house__split_fields2 dr_house__split_fields3 dr_house__split_fields4 dr_house__split_fields5 dr_house__split_fields6))))
(assert (= dr_house__split_fields7 (us_split_fields3 main__dr_house__assume)))
(assert (= dr_house__attr__tag us_tag1))
(assert (= result5 (mk_int__ref skill)))
(assert (= skill1 0))
(assert (= result6 (has_training (mk___rep1 uni_student__split_fields7 uni_student__attr__tag) state)))
(assert (=> (not (= result6 true)) (= uni_student__split_fields8 uni_student__split_fields7)))
(assert (= result7 (has_training (mk___rep1 zerocool__split_fields7 zerocool__attr__tag) state)))
(assert (=> (not (= result7 true)) (= zerocool__split_fields8 zerocool__split_fields7)))
(assert (= result8 (has_training (mk___rep1 rambo__split_fields7 rambo__attr__tag) state)))
(assert (=> (not (= result8 true)) (= rambo__split_fields8 rambo__split_fields7)))
(assert (= result9 (has_training (mk___rep1 dr_house__split_fields7 dr_house__attr__tag) state)))
(assert (=> (not (= result9 true)) (= dr_house__split_fields8 dr_house__split_fields7)))
(assert (= result10 (mk_int__ref skill1)))
(assert (= skill2 1))
(assert (= result11 (has_training (mk___rep1 uni_student__split_fields8 uni_student__attr__tag) state1)))
(assert (=> (not (= result11 true)) (= uni_student__split_fields9 uni_student__split_fields8)))
(assert (= result12 (has_training (mk___rep1 zerocool__split_fields8 zerocool__attr__tag) state1)))
(assert (=> (not (= result12 true)) (= zerocool__split_fields9 zerocool__split_fields8)))
(assert (= result13 (has_training (mk___rep1 rambo__split_fields8 rambo__attr__tag) state1)))
(assert (=> (not (= result13 true)) (= rambo__split_fields9 rambo__split_fields8)))
(assert (= result14 (has_training (mk___rep1 dr_house__split_fields8 dr_house__attr__tag) state1)))
(assert (=> (not (= result14 true)) (= dr_house__split_fields9 dr_house__split_fields8)))
(assert (= result15 (mk_int__ref skill2)))
(assert (= skill3 2))
(assert (= result16 (has_training (mk___rep1 uni_student__split_fields9 uni_student__attr__tag) state2)))
(assert (=> (not (= result16 true)) (= uni_student__split_fields10 uni_student__split_fields9)))
(assert (= result17 (has_training (mk___rep1 zerocool__split_fields9 zerocool__attr__tag) state2)))
(assert (=> (not (= result17 true)) (= zerocool__split_fields10 zerocool__split_fields9)))
(assert (= result18 (has_training (mk___rep1 rambo__split_fields9 rambo__attr__tag) state2)))
(assert (=> (not (= result18 true)) (= rambo__split_fields10 rambo__split_fields9)))
(assert (= result19 (has_training (mk___rep1 dr_house__split_fields9 dr_house__attr__tag) state2)))
(assert (=> (not (= result19 true)) (= dr_house__split_fields10 dr_house__split_fields9)))
(assert (= result20 (mk_int__ref skill3)))
(assert (= skill4 3))
(assert (= result21 (has_training (mk___rep1 uni_student__split_fields10 uni_student__attr__tag) state3)))
(assert (=> (not (= result21 true)) (= uni_student__split_fields11 uni_student__split_fields10)))
(assert (= result22 (has_training (mk___rep1 zerocool__split_fields10 zerocool__attr__tag) state3)))
(assert (=> (not (= result22 true)) (= zerocool__split_fields11 zerocool__split_fields10)))
(assert (= result23 (has_training (mk___rep1 rambo__split_fields10 rambo__attr__tag) state3)))
(assert (=> (not (= result23 true)) (= rambo__split_fields11 rambo__split_fields10)))
(assert (= result24 (has_training (mk___rep1 dr_house__split_fields10 dr_house__attr__tag) state3)))
(assert (=> (not (= result24 true)) (= dr_house__split_fields11 dr_house__split_fields10)))
(assert (= result25 (mk_int__ref skill4)))
(assert (= skill5 4))
(assert (= result26 (has_training (mk___rep1 uni_student__split_fields11 uni_student__attr__tag) state4)))
(assert (=> (not (= result26 true)) (= uni_student__split_fields12 uni_student__split_fields11)))
(assert (= result27 (has_training (mk___rep1 zerocool__split_fields11 zerocool__attr__tag) state4)))
(assert (=> (not (= result27 true)) (= zerocool__split_fields12 zerocool__split_fields11)))
(assert (= result28 (has_training (mk___rep1 rambo__split_fields11 rambo__attr__tag) state4)))
(assert (=> (not (= result28 true)) (= rambo__split_fields12 rambo__split_fields11)))
(assert (= result29 (has_training (mk___rep1 dr_house__split_fields11 dr_house__attr__tag) state4)))
(assert (=> (not (= result29 true)) (= dr_house__split_fields12 dr_house__split_fields11)))
(assert (= result30 (mk_int__ref skill5)))
(assert (= skill6 5))
(assert (= result31 (has_training (mk___rep1 uni_student__split_fields12 uni_student__attr__tag) state5)))
(assert (=> (not (= result31 true)) (= uni_student__split_fields13 uni_student__split_fields12)))
(assert (= result32 (has_training (mk___rep1 zerocool__split_fields12 zerocool__attr__tag) state5)))
(assert (=> (not (= result32 true)) (= zerocool__split_fields13 zerocool__split_fields12)))
(assert (= result33 (has_training (mk___rep1 rambo__split_fields12 rambo__attr__tag) state5)))
(assert (=> (not (= result33 true)) (= rambo__split_fields13 rambo__split_fields12)))
(assert (= result34 (has_training (mk___rep1 dr_house__split_fields12 dr_house__attr__tag) state5)))
(assert (=> (not (= result34 true)) (= dr_house__split_fields13 dr_house__split_fields12)))
(assert (= result35 (mk_int__ref skill6)))
(assert (= skill7 6))
(assert (= result36 (has_training (mk___rep1 uni_student__split_fields13 uni_student__attr__tag) state6)))
(assert (=> (not (= result36 true)) (= uni_student__split_fields14 uni_student__split_fields13)))
(assert (= result37 (has_training (mk___rep1 zerocool__split_fields13 zerocool__attr__tag) state6)))
(assert (=> (not (= result37 true)) (= zerocool__split_fields14 zerocool__split_fields13)))
(assert (= result38 (has_training (mk___rep1 rambo__split_fields13 rambo__attr__tag) state6)))
(assert (=> (not (= result38 true)) (= rambo__split_fields14 rambo__split_fields13)))
(assert (= result39 (has_training (mk___rep1 dr_house__split_fields13 dr_house__attr__tag) state6)))
(assert (=> (not (= result39 true)) (= dr_house__split_fields14 dr_house__split_fields13)))
(assert (= result40 (mk_int__ref skill7)))
(assert (= skill8 7))
(assert (= result41 (has_training (mk___rep1 uni_student__split_fields14 uni_student__attr__tag) state7)))
(assert (=> (not (= result41 true)) (= uni_student__split_fields15 uni_student__split_fields14)))
(assert (= result42 (has_training (mk___rep1 zerocool__split_fields14 zerocool__attr__tag) state7)))
(assert (=> (not (= result42 true)) (= zerocool__split_fields15 zerocool__split_fields14)))
(assert (= result43 (has_training (mk___rep1 rambo__split_fields14 rambo__attr__tag) state7)))
(assert (=> (not (= result43 true)) (= rambo__split_fields15 rambo__split_fields14)))
(assert (= result44 (has_training (mk___rep1 dr_house__split_fields14 dr_house__attr__tag) state7)))
(assert (=> (not (= result44 true)) (= dr_house__split_fields15 dr_house__split_fields14)))
(assert (= result45 (mk_int__ref skill8)))
(assert (= skill9 8))
(assert (= result46 (has_training (mk___rep1 uni_student__split_fields15 uni_student__attr__tag) state8)))
(assert (=> (not (= result46 true)) (= uni_student__split_fields16 uni_student__split_fields15)))
(assert (= result47 (has_training (mk___rep1 zerocool__split_fields15 zerocool__attr__tag) state8)))
(assert (=> (not (= result47 true)) (= zerocool__split_fields16 zerocool__split_fields15)))
(assert (= result48 (has_training (mk___rep1 rambo__split_fields15 rambo__attr__tag) state8)))
(assert (=> (not (= result48 true)) (= rambo__split_fields16 rambo__split_fields15)))
(assert (= result49 (has_training (mk___rep1 dr_house__split_fields15 dr_house__attr__tag) state8)))
(assert (=> (not (= result49 true)) (= dr_house__split_fields16 dr_house__split_fields15)))
(assert (= result50 (mk_int__ref skill9)))
(assert (= skill10 9))
(assert (= result51 (has_training (mk___rep1 uni_student__split_fields16 uni_student__attr__tag) state9)))
(assert (=> (not (= result51 true)) (= uni_student__split_fields17 uni_student__split_fields16)))
(assert (= result52 (has_training (mk___rep1 zerocool__split_fields16 zerocool__attr__tag) state9)))
(assert (=> (not (= result52 true)) (= zerocool__split_fields17 zerocool__split_fields16)))
(assert (= result53 (has_training (mk___rep1 rambo__split_fields16 rambo__attr__tag) state9)))
(assert (=> (not (= result53 true)) (= rambo__split_fields17 rambo__split_fields16)))
(assert (= result54 (has_training (mk___rep1 dr_house__split_fields16 dr_house__attr__tag) state9)))
(assert (=> (not (= result54 true)) (= dr_house__split_fields17 dr_house__split_fields16)))
(assert (= result55 (mk_int__ref skill10)))
(assert (= skill11 10))
(assert (= result56 (has_training (mk___rep1 uni_student__split_fields17 uni_student__attr__tag) state10)))
(assert (=> (not (= result56 true)) (= uni_student__split_fields18 uni_student__split_fields17)))
(assert (= result57 (has_training (mk___rep1 zerocool__split_fields17 zerocool__attr__tag) state10)))
(assert (=> (not (= result57 true)) (= zerocool__split_fields18 zerocool__split_fields17)))
(assert (= result58 (has_training (mk___rep1 rambo__split_fields17 rambo__attr__tag) state10)))
(assert (=> (not (= result58 true)) (= rambo__split_fields18 rambo__split_fields17)))
(assert (= result59 (has_training (mk___rep1 dr_house__split_fields17 dr_house__attr__tag) state10)))
(assert (=> (not (= result59 true)) (= dr_house__split_fields18 dr_house__split_fields17)))
(assert (= result60 (mk_int__ref skill11)))
(assert (= skill12 11))
(assert (= result61 (has_training (mk___rep1 uni_student__split_fields18 uni_student__attr__tag) state11)))
(assert (=> (not (= result61 true)) (= uni_student__split_fields19 uni_student__split_fields18)))
(assert (= result62 (has_training (mk___rep1 zerocool__split_fields18 zerocool__attr__tag) state11)))
(assert (=> (not (= result62 true)) (= zerocool__split_fields19 zerocool__split_fields18)))
(assert (= result63 (has_training (mk___rep1 rambo__split_fields18 rambo__attr__tag) state11)))
(assert (=> (not (= result63 true)) (= rambo__split_fields19 rambo__split_fields18)))
(assert (= result64 (has_training (mk___rep1 dr_house__split_fields18 dr_house__attr__tag) state11)))
(assert (=> (not (= result64 true)) (= dr_house__split_fields19 dr_house__split_fields18)))
(assert (= result65 (mk_int__ref skill12)))
(assert (= skill13 12))
(assert (= result66 (has_training (mk___rep1 uni_student__split_fields19 uni_student__attr__tag) state12)))
(assert (=> (not (= result66 true)) (= uni_student__split_fields20 uni_student__split_fields19)))
(assert (= result67 (has_training (mk___rep1 zerocool__split_fields19 zerocool__attr__tag) state12)))
(assert (=> (not (= result67 true)) (= zerocool__split_fields20 zerocool__split_fields19)))
(assert (= result68 (has_training (mk___rep1 rambo__split_fields19 rambo__attr__tag) state12)))
(assert (=> (not (= result68 true)) (= rambo__split_fields20 rambo__split_fields19)))
(assert (= result69 (has_training (mk___rep1 dr_house__split_fields19 dr_house__attr__tag) state12)))
(assert (=> (not (= result69 true)) (= dr_house__split_fields20 dr_house__split_fields19)))
(assert (not (= (is_alive1 uni_student__attr__tag (mk___rep (mk___split_fields (rec__people__person__name1 uni_student__split_fields20) (rec__people__person__dob1 uni_student__split_fields20) (rec__people__person__alive1 uni_student__split_fields20) (hide_ext__ (rec__professionals__professional__profession uni_student__split_fields20) (rec__professionals__professional__skilled_in uni_student__split_fields20) (rec__professionals__professional__number_of_people_killed uni_student__split_fields20) (rec__ext__1 uni_student__split_fields20))) uni_student__attr__tag)) true)))
(check-sat)
(exit)
