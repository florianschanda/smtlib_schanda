(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type scrabble_letter

predicate in_range(x: int) = ((65 <= x) and (x <= 90))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : scrabble_letter, scrabble_letter -> bool

logic dummy : scrabble_letter

type scrabble_letter__ref = { scrabble_letter__content : scrabble_letter
}

function scrabble_letter__ref___projection(a: scrabble_letter__ref) : scrabble_letter =
  (a).scrabble_letter__content

type scrabble_value

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : scrabble_value, scrabble_value -> bool

logic dummy1 : scrabble_value

type scrabble_value__ref = { scrabble_value__content : scrabble_value
}

function scrabble_value__ref___projection(a: scrabble_value__ref) : scrabble_value =
  (a).scrabble_value__content

logic to_rep : scrabble_value -> int

logic of_rep : int -> scrabble_value

axiom inversion_axiom :
  (forall x:scrabble_value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:scrabble_value [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,scrabble_value) farray
}

logic slide : (int,scrabble_value) farray, int,
  int -> (int,scrabble_value) farray

axiom slide_eq :
  (forall a:(int,scrabble_value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,scrabble_value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,scrabble_value) farray, int, int,
  (int,scrabble_value) farray, int, int -> (int,scrabble_value) farray

axiom concat_def :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : scrabble_value, int -> (int,scrabble_value) farray

axiom singleton_def :
  (forall v:scrabble_value.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,scrabble_value) farray, int, int,
  (int,scrabble_value) farray, int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,scrabble_value) farray. forall a__first:int.
  forall a__last:int. forall b:(int,scrabble_value) farray.
  forall b__first:int. forall b__last:int [bool_eq3(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,scrabble_value) farray, int, int,
  (int,scrabble_value) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,scrabble_value) farray.
  forall b:(int,scrabble_value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic lookup_table : (int,scrabble_value) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic scrabble__lookup_table__aggregate_def : int, int, int, int, int, int,
  int, int, int, int, int, int, int, int, int, int, int, int, int, int, int,
  int, int, int, int, int -> (int,scrabble_value) farray

axiom def_axiom :
  (forall temp___135:int. forall temp___136:int. forall temp___137:int.
  forall temp___138:int. forall temp___139:int. forall temp___140:int.
  forall temp___141:int. forall temp___142:int. forall temp___143:int.
  forall temp___144:int. forall temp___145:int. forall temp___146:int.
  forall temp___147:int. forall temp___148:int. forall temp___149:int.
  forall temp___150:int. forall temp___151:int. forall temp___152:int.
  forall temp___153:int. forall temp___154:int. forall temp___155:int.
  forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int.
  (((((((((((((((((((((((((((scrabble__lookup_table__aggregate_def(temp___135,
  temp___136, temp___137, temp___138, temp___139, temp___140, temp___141,
  temp___142, temp___143, temp___144, temp___145, temp___146, temp___147,
  temp___148, temp___149, temp___150, temp___151, temp___152, temp___153,
  temp___154, temp___155, temp___156, temp___157, temp___158, temp___159,
  temp___160)[65]) = of_rep(temp___135)) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[66]) = of_rep(temp___136))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[67]) = of_rep(temp___137))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[68]) = of_rep(temp___138))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[69]) = of_rep(temp___139))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[70]) = of_rep(temp___140))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[71]) = of_rep(temp___141))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[72]) = of_rep(temp___142))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[73]) = of_rep(temp___143))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[74]) = of_rep(temp___144))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[75]) = of_rep(temp___145))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[76]) = of_rep(temp___146))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[77]) = of_rep(temp___147))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[78]) = of_rep(temp___148))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[79]) = of_rep(temp___149))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[80]) = of_rep(temp___150))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[81]) = of_rep(temp___151))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[82]) = of_rep(temp___152))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[83]) = of_rep(temp___153))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[84]) = of_rep(temp___154))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[85]) = of_rep(temp___155))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[86]) = of_rep(temp___156))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[87]) = of_rep(temp___157))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[88]) = of_rep(temp___158))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[89]) = of_rep(temp___159))) and
  ((scrabble__lookup_table__aggregate_def(temp___135, temp___136, temp___137,
  temp___138, temp___139, temp___140, temp___141, temp___142, temp___143,
  temp___144, temp___145, temp___146, temp___147, temp___148, temp___149,
  temp___150, temp___151, temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159,
  temp___160)[90]) = of_rep(temp___160))))

axiom lookup_table__def_axiom :
  (lookup_table = scrabble__lookup_table__aggregate_def(1, 3, 3, 2, 1, 4, 2,
  4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10))

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic o22 : int

logic o23 : int

logic o24 : int

axiom H : (((1 <= 10) and (10 <= 5)) or (((8 <= 10) and (10 <= 8)) or
  (10 <= 10)))

axiom H1 : (o = 10)

axiom H2 : (((1 <= 4) and (4 <= 5)) or (((8 <= 4) and (4 <= 8)) or
  ((10 <= 4) and (4 <= 10))))

axiom H3 : (o1 = 4)

axiom H4 : (((1 <= 8) and (8 <= 5)) or ((8 <= 8) or ((10 <= 8) and
  (8 <= 10))))

axiom H5 : (o2 = 8)

axiom H6 : (((1 <= 4) and (4 <= 5)) or (((8 <= 4) and (4 <= 8)) or
  ((10 <= 4) and (4 <= 10))))

axiom H7 : (o3 = 4)

axiom H8 : (((1 <= 4) and (4 <= 5)) or (((8 <= 4) and (4 <= 8)) or
  ((10 <= 4) and (4 <= 10))))

axiom H9 : (o4 = 4)

axiom H10 : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and (1 <= 8)) or
  ((10 <= 1) and (1 <= 10))))

axiom H11 : (o5 = 1)

axiom H12 : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and (1 <= 8)) or
  ((10 <= 1) and (1 <= 10))))

axiom H13 : (o6 = 1)

axiom H14 : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and (1 <= 8)) or
  ((10 <= 1) and (1 <= 10))))

axiom H15 : (o7 = 1)

axiom H16 : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and (1 <= 8)) or
  ((10 <= 1) and (1 <= 10))))

axiom H17 : (o8 = 1)

axiom H18 : (((1 <= 10) and (10 <= 5)) or (((8 <= 10) and (10 <= 8)) or
  (10 <= 10)))

axiom H19 : (o9 = 10)

axiom H20 : (((1 <= 3) and (3 <= 5)) or (((8 <= 3) and (3 <= 8)) or
  ((10 <= 3) and (3 <= 10))))

axiom H21 : (o10 = 3)

axiom H22 : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and (1 <= 8)) or
  ((10 <= 1) and (1 <= 10))))

axiom H23 : (o11 = 1)

axiom H24 : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and (1 <= 8)) or
  ((10 <= 1) and (1 <= 10))))

axiom H25 : (o12 = 1)

axiom H26 : (((1 <= 3) and (3 <= 5)) or (((8 <= 3) and (3 <= 8)) or
  ((10 <= 3) and (3 <= 10))))

axiom H27 : (o13 = 3)

 (* File "scrabble.ads", line 12, characters 0-0 *)
goal WP_parameter_def : (((1 <= 1) and (1 <= 5)) or (((8 <= 1) and
  (1 <= 8)) or ((10 <= 1) and (1 <= 10))))
