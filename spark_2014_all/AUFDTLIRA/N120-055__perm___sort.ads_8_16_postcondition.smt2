(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-fun to_rep1 (natural) Int)
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(define-fun dynamic_invariant1 ((expr us_t) (us Bool) (skip_bounds Bool) (us1 Bool) (us2 Bool)) Bool (=> (not (= skip_bounds true)) (dynamic_property 1 100 (first1 expr) (last1 expr))))
(declare-fun occ (natural us_t) Int)
(assert (forall ((v natural) (a us_t)) (=> (< (last1 a) (first1 a)) (= (occ v a) 0))))
(assert (forall ((e natural) (v natural) (a us_t) (i Int)) (let ((b (of_array (store (elts a) i v) (first1 a) (last1 a)))) (=> (and (<= (first1 a) i) (<= i (last1 a))) (and (=> (not (= (select (elts a) i) e)) (and (=> (not (= v e)) (= (occ e b) (occ e a))) (=> (= v e) (= (occ e b) (+ (occ e a) 1))))) (=> (= (select (elts a) i) e) (and (=> (not (= v e)) (= (occ e b) (- (occ e a) 1))) (=> (= v e) (= (occ e b) (occ e a))))))))))
(define-fun is_perm__logic ((a us_t) (b us_t)) Bool (ite (forall ((v natural)) (= (occ v a) (occ v b))) true false))
(declare-const values__first integer)
(declare-const values__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun index_of_minimum (us_t) Int)
(declare-fun index_of_minimum__function_guard (Int us_t) Bool)
(assert (forall ((values us_t)) (! (=> (and (dynamic_invariant1 values true true true true) (< 0 (length values))) (let ((result (index_of_minimum values))) (and (and (<= (first1 values) result) (<= result (last1 values))) (in_range4 result)))) :pattern ((index_of_minimum values)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content integer)))))
(define-fun t13b__ref___projection ((a t13b__ref)) integer (t13b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content integer)))))
(define-fun t14b__ref___projection ((a t14b__ref)) integer (t14b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int natural)) (rt1 t1)))))
(define-fun to_array ((a us_t1)) (Array Int natural) (elts1 a))
(define-fun of_array1 ((a (Array Int natural)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int natural)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq7 (us_t1 us_t1) Bool)
(declare-const dummy7 us_t1)
(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const values (Array Int natural))
(declare-const smallest Int)
(declare-const current Int)
(declare-const o Int)
(declare-const temp___197 Int)
(declare-const temp___194 Int)
(declare-const temp___193 (Array Int natural))
(declare-const temp___195 (Array Int natural))
(declare-const temp___191 Int)
(declare-const o1 (Array Int natural))
(declare-const temp___190 (Array Int natural))
(declare-const temp___1901 t1)
(declare-const o2 (Array Int natural))
(declare-const o3 t)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const values1 (Array Int natural))
(declare-const smallest1 Int)
(declare-const current1 Int)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const current2 Int)
(declare-const result2 Int)
(declare-const smallest2 Int)
(declare-const values2 (Array Int natural))
(declare-const values3 (Array Int natural))
(declare-const smallest3 Int)
(declare-const current3 Int)
(declare-const values4 (Array Int natural))
(declare-const smallest4 Int)
(declare-const current4 Int)
(declare-const values5 (Array Int natural))
(declare-const smallest5 Int)
(declare-const current5 Int)
(declare-const values6 (Array Int natural))
(declare-const smallest6 Int)
(declare-const current6 Int)
(declare-const values7 (Array Int natural))
(declare-const smallest7 Int)
(declare-const current7 Int)
(declare-const values8 (Array Int natural))
(declare-const smallest8 int__ref)
(declare-const current8 int__ref)
(declare-const values9 (Array Int natural))
(declare-const smallest9 Int)
(declare-const current9 Int)
(declare-const values10 map__ref)
(declare-const smallest10 int__ref)
(declare-const current10 int__ref)
(declare-const values11 (Array Int natural))
(declare-const smallest11 Int)
(declare-const current11 Int)
(define-fun values12 () map__ref (mk_map__ref values8))
(define-fun current12 () int__ref (mk_int__ref current6))
(define-fun smallest12 () int__ref (mk_int__ref smallest6))
(define-fun values13 () map__ref (mk_map__ref values6))
(define-fun current13 () int__ref (mk_int__ref current))
(define-fun smallest13 () int__ref (mk_int__ref smallest))
(define-fun values14 () map__ref (mk_map__ref values))
(assert (dynamic_property 1 100 (to_rep values__first) (to_rep values__last)))
(assert (=> (<= 1 2147483647) (in_range2 smallest)))
(assert (or (and (and (and (= current8 current13) (and (= smallest8 smallest13) (= values12 values14))) (and (= current9 current1) (and (= smallest9 smallest1) (= values9 values1)))) (and (and (ite (<= (to_rep values__first) (to_rep values__last)) (= o (+ (- (to_rep values__last) (to_rep values__first)) 1)) (= o 0)) (= result (ite (= o 0) true false))) (= result true))) (and (and (and (ite (<= (to_rep values__first) (to_rep values__last)) (= o (+ (- (to_rep values__last) (to_rep values__first)) 1)) (= o 0)) (= result (ite (= o 0) true false))) (not (= result true))) (and (and (and (= current8 current12) (and (= smallest8 smallest12) (= values12 values13))) (and (= current9 current7) (and (= smallest9 smallest7) (= values9 values7)))) (and (and (= temp___197 (- (to_rep values__last) 1)) (in_range1 (- (to_rep values__last) 1))) (and (and (= (mk_int__ref result1) current13) (= current2 (to_rep values__first))) (ite (and (<= (to_rep values__first) current2) (<= current2 temp___197)) (and (and (and (= temp___194 current2) (and (= temp___193 values) (and (= temp___195 values) (and (= temp___191 smallest) (and (and (and (and (and (and (=> (<= current2 (to_rep values__last)) (and (and (<= (to_rep values__first) current2) (<= current2 (to_rep values__last))) (and (<= (to_rep values__first) (to_rep values__last)) (<= (to_rep values__last) (to_rep values__last))))) (= o1 values)) (and (= o1 temp___190) (= (mk1 current2 (to_rep values__last)) temp___1901))) (and (= temp___190 o2) (= (mk (to_rep (first2 temp___1901)) (to_rep (last2 temp___1901))) o3))) (and (= o4 (index_of_minimum (mk___t o2 o3))) (and (in_range4 o4) (and (<= (to_rep (first o3)) o4) (<= o4 (to_rep (last o3))))))) (and (= (mk_int__ref result2) smallest13) (= smallest2 o4))) (and (ite (not (= smallest2 current2)) (and (and (= o6 smallest2) (in_range4 smallest2)) (and (and (= o5 current2) (in_range4 current2)) (= (is_perm__logic (mk___t values (mk (to_rep values__first) (to_rep values__last))) (mk___t values2 (mk (to_rep values__first) (to_rep values__last)))) true))) (and (= values2 values) (= values2 values1))) (and (= (is_perm__logic (mk___t temp___195 (mk (to_rep values__first) (to_rep values__last))) (mk___t values3 (mk (to_rep values__first) (to_rep values__last)))) true) (and (and (and (=> (<= 1 2147483647) (in_range2 smallest3)) (=> (<= (to_rep values__first) (- (to_rep values__last) 1)) (dynamic_property1 (to_rep values__first) (- (to_rep values__last) 1) current3))) (and (<= (to_rep values__first) current3) (<= current3 (- (to_rep values__last) 1)))) (= current3 temp___197))))))))) (and (and (= current3 current4) (and (= smallest3 smallest4) (= values3 values4))) (and (= current5 current3) (and (= smallest5 smallest3) (= values5 values3))))) (and (and (= current12 (mk_int__ref current4)) (and (= smallest12 (mk_int__ref smallest4)) (= values13 (mk_map__ref values4)))) (and (= current7 current5) (and (= smallest7 smallest5) (= values7 values5))))) (and (and (= current2 current6) (and (= smallest12 smallest13) (= values13 values14))) (and (= current7 current2) (and (= smallest7 smallest1) (= values7 values1)))))))))))
(assert (= current10 current8))
(assert (= smallest10 smallest8))
(assert (= values10 values12))
(assert (= current11 current9))
(assert (= smallest11 smallest9))
(assert (= values11 values9))
(assert (not (= (is_perm__logic (mk___t values (mk (to_rep values__first) (to_rep values__last))) (mk___t (map__content values10) (mk (to_rep values__first) (to_rep values__last)))) true)))
(check-sat)
(exit)
