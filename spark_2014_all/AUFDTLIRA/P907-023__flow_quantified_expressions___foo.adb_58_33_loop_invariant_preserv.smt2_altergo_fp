(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields = { rec__foo__r__x : bool
}

function us_split_fields_X__projection(a: us_split_fields) : bool =
  (a).rec__foo__r__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq1 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq1(a, b)].
  (((((a).us_split_fields1).rec__foo__r__x = ((b).us_split_fields1).rec__foo__r__x) ->
  (bool_eq1(a, b) = true)) and
  ((not (((a).us_split_fields1).rec__foo__r__x = ((b).us_split_fields1).rec__foo__r__x)) ->
  (bool_eq1(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. (0 <= object__size({ us_split_fields1 = { rec__foo__r__x =
  a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. (0 <= object__alignment({ us_split_fields1 = {
  rec__foo__r__x = a } })))

logic foo__r__x__first__bit : int

logic foo__r__x__last__bit : int

logic foo__r__x__position : int

axiom foo__r__x__first__bit_axiom : (0 <= foo__r__x__first__bit)

axiom foo__r__x__last__bit_axiom :
  (foo__r__x__first__bit <  foo__r__x__last__bit)

axiom foo__r__x__position_axiom : (0 <= foo__r__x__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : bool

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

type tctD1

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tctD1, tctD1 -> bool

logic dummy1 : tctD1

type tctD1__ref = { tctD1__content : tctD1
}

function tctD1__ref___projection(a: tctD1__ref) : tctD1 = (a).tctD1__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton({ us_split_fields1 = { rec__foo__r__x = v } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__foo__r__x = v } },
  i)[i]) = { us_split_fields1 = { rec__foo__r__x = v } })))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq1((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq1((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq1((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

type t29b

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t29b, t29b -> bool

logic dummy2 : t29b

type t29b__ref = { t29b__content : t29b
}

function t29b__ref___projection(a: t29b__ref) : t29b = (a).t29b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic a : (int,us_rep) farray

logic i : int

logic temp___167 : (int,us_rep) farray

logic temp___166 : int

logic j : int

logic a1 : (int,us_rep) farray

logic result : int

logic i1 : int

logic result1 : (int,us_rep) farray

logic a2 : (int,us_rep) farray

logic a3 : (int,us_rep) farray

logic i2 : int

logic result2 : int

logic i3 : int

logic result3 : (int,us_rep) farray

logic a4 : (int,us_rep) farray

logic a5 : (int,us_rep) farray

logic i4 : int

logic a6 : (int,us_rep) farray

logic i5 : int

logic a7 : (int,us_rep) farray

logic i6 : int

logic a8 : (int,us_rep) farray

logic i7 : int

logic a9 : (int,us_rep) farray

logic i8 : int

logic a10 : (int,us_rep) farray

logic i9 : int

logic a11 : (int,us_rep) farray

logic i10 : int

logic a12 : (int,us_rep) farray

logic i11 : int

axiom H : (result = i)

axiom H1 : (i1 = 1)

axiom H2 : (1 <= i1)

axiom H3 : (i1 <= 10)

axiom H4 : (result1 = a)

axiom H5 : (((not ((((a[i1])).us_split_fields1).rec__foo__r__x = true)) ->
  (a2 = (a[i1 <- { us_split_fields1 = { rec__foo__r__x =
  match_bool((((a[i1])).us_split_fields1).rec__foo__r__x, true, true) }
  }]))) and (((((a[i1])).us_split_fields1).rec__foo__r__x = true) ->
  (a2 = (a[i1 <- { us_split_fields1 = { rec__foo__r__x =
  match_bool((((a[i1])).us_split_fields1).rec__foo__r__x, true, false) }
  }]))))

axiom H6 :
  (forall j1:int. (((1 <= j1) and (j1 <= i2)) ->
  ((((a3[j1])).us_split_fields1).rec__foo__r__x = true)))

axiom H7 : ((((1 <= 10) -> in_range2(i2)) and
  (forall temp___168:int. (((1 <= temp___168) and (temp___168 <= 10)) ->
  ((i2 <  temp___168) -> ((a3[temp___168]) = (a[temp___168])))))) and
  ((1 <= i2) and (i2 <= 10)))

axiom H8 : (not (i2 = 10))

axiom H9 : (result2 = i2)

axiom H10 : (i3 = (i2 + 1))

axiom H11 : (result3 = a3)

axiom H12 : (((not ((((a3[i3])).us_split_fields1).rec__foo__r__x = true)) ->
  (a4 = (a3[i3 <- { us_split_fields1 = { rec__foo__r__x =
  match_bool((((a3[i3])).us_split_fields1).rec__foo__r__x, true, true) }
  }]))) and (((((a3[i3])).us_split_fields1).rec__foo__r__x = true) ->
  (a4 = (a3[i3 <- { us_split_fields1 = { rec__foo__r__x =
  match_bool((((a3[i3])).us_split_fields1).rec__foo__r__x, true, false) }
  }]))))

logic j1 : int

axiom H13 : (1 <= j1)

axiom H14 : (j1 <= i3)

 (* File "foo.adb", line 9, characters 0-0 *)
goal WP_parameter_def : ((((a4[j1])).us_split_fields1).rec__foo__r__x = true)
