(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep2 (natural) Int)
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ints__int__min integer) (rec__ints__int__max integer) (rec__ints__int__value integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_Min__projection ((a us_split_fields)) integer (rec__ints__int__min a))
(define-fun us_split_fields_Max__projection ((a us_split_fields)) integer (rec__ints__int__max a))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) integer (rec__ints__int__value a))
(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__ints__int__min (us_split_fields1 a))) (to_rep1 (rec__ints__int__min (us_split_fields1 b)))) (= (to_rep1 (rec__ints__int__max (us_split_fields1 a))) (to_rep1 (rec__ints__int__max (us_split_fields1 b))))) (= (to_rep1 (rec__ints__int__value (us_split_fields1 a))) (to_rep1 (rec__ints__int__value (us_split_fields1 b))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const ints__int__min__first__bit Int)
(declare-const ints__int__min__last__bit Int)
(declare-const ints__int__min__position Int)
(assert (<= 0 ints__int__min__first__bit))
(assert (< ints__int__min__first__bit ints__int__min__last__bit))
(assert (<= 0 ints__int__min__position))
(declare-const ints__int__max__first__bit Int)
(declare-const ints__int__max__last__bit Int)
(declare-const ints__int__max__position Int)
(assert (<= 0 ints__int__max__first__bit))
(assert (< ints__int__max__first__bit ints__int__max__last__bit))
(assert (<= 0 ints__int__max__position))
(declare-const ints__int__value__first__bit Int)
(declare-const ints__int__value__last__bit Int)
(declare-const ints__int__value__position Int)
(assert (<= 0 ints__int__value__first__bit))
(assert (< ints__int__value__first__bit ints__int__value__last__bit))
(assert (<= 0 ints__int__value__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((int____ref (mk_int____ref (int____content us_rep)))))
(define-fun int____ref___3__projection ((a int____ref)) us_rep (int____content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__ints__approx_int__precision natural) (rec__ints__int__min1 integer) (rec__ints__int__max1 integer) (rec__ints__int__value1 integer) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Precision__projection ((a us_split_fields2)) natural (rec__ints__approx_int__precision a))
(define-fun us_split_fields_Min__2__projection ((a us_split_fields2)) integer (rec__ints__int__min1 a))
(define-fun us_split_fields_Max__2__projection ((a us_split_fields2)) integer (rec__ints__int__max1 a))
(define-fun us_split_fields_Value__2__projection ((a us_split_fields2)) integer (rec__ints__int__value1 a))
(define-fun us_split_fields___3__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (natural us_private) us_private)
(declare-fun extract__precision (us_private) natural)
(assert (forall ((precision natural)) (forall ((rec__ext__2 us_private)) (= (extract__precision (hide_ext__ precision rec__ext__2)) precision))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__ints__int__min1 (us_split_fields3 a)) (rec__ints__int__max1 (us_split_fields3 a)) (rec__ints__int__value1 (us_split_fields3 a)) (hide_ext__ (rec__ints__approx_int__precision (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__precision (rec__ext__ (us_split_fields1 r))) (rec__ints__int__min (us_split_fields1 r)) (rec__ints__int__max (us_split_fields1 r)) (rec__ints__int__value (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__ints__approx_int__precision (us_split_fields3 a))) (to_rep2 (rec__ints__approx_int__precision (us_split_fields3 b)))) (= (to_rep1 (rec__ints__int__min1 (us_split_fields3 a))) (to_rep1 (rec__ints__int__min1 (us_split_fields3 b))))) (= (to_rep1 (rec__ints__int__max1 (us_split_fields3 a))) (to_rep1 (rec__ints__int__max1 (us_split_fields3 b))))) (= (to_rep1 (rec__ints__int__value1 (us_split_fields3 a))) (to_rep1 (rec__ints__int__value1 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const ints__approx_int__precision__first__bit Int)
(declare-const ints__approx_int__precision__last__bit Int)
(declare-const ints__approx_int__precision__position Int)
(assert (<= 0 ints__approx_int__precision__first__bit))
(assert (< ints__approx_int__precision__first__bit ints__approx_int__precision__last__bit))
(assert (<= 0 ints__approx_int__precision__position))
(declare-const ints__int__min__first__bit1 Int)
(declare-const ints__int__min__last__bit1 Int)
(declare-const ints__int__min__position1 Int)
(assert (<= 0 ints__int__min__first__bit1))
(assert (< ints__int__min__first__bit1 ints__int__min__last__bit1))
(assert (<= 0 ints__int__min__position1))
(declare-const ints__int__max__first__bit1 Int)
(declare-const ints__int__max__last__bit1 Int)
(declare-const ints__int__max__position1 Int)
(assert (<= 0 ints__int__max__first__bit1))
(assert (< ints__int__max__first__bit1 ints__int__max__last__bit1))
(assert (<= 0 ints__int__max__position1))
(declare-const ints__int__value__first__bit1 Int)
(declare-const ints__int__value__last__bit1 Int)
(declare-const ints__int__value__position1 Int)
(assert (<= 0 ints__int__value__first__bit1))
(assert (< ints__int__value__first__bit1 ints__int__value__last__bit1))
(assert (<= 0 ints__int__value__position1))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((approx_int__ref (mk_approx_int__ref (approx_int__content us_rep1)))))
(define-fun approx_int__ref___projection ((a approx_int__ref)) us_rep1 (approx_int__content a))
(define-fun default_initial_assumption ((temp___expr_529 us_rep1) (temp___skip_top_level_530 Bool)) Bool (= (attr__tag1 temp___expr_529) us_tag1))
(declare-const arg us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const msg us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun temp___String_Literal_590 (tuple0) (Array Int character))
(assert true)
(declare-fun temp___String_Literal_592 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (= (to_rep (select (temp___String_Literal_592 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_592 us_void_param) 2)) 45)) (= (to_rep (select (temp___String_Literal_592 us_void_param) 3)) 32)) :pattern ((temp___String_Literal_592 us_void_param)))))
(declare-fun temp___String_Literal_594 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_594 us_void_param) 1)) 73) (= (to_rep (select (temp___String_Literal_594 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 3)) 116)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 5)) 105)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 6)) 115)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 8)) 40)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 10)) 77)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 11)) 105)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 12)) 110)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 13)) 32)) (= (to_rep (select (temp___String_Literal_594 us_void_param) 14)) 61)) :pattern ((temp___String_Literal_594 us_void_param)))))
(declare-fun temp___String_Literal_597 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_597 us_void_param) 1)) 44) (= (to_rep (select (temp___String_Literal_597 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_597 us_void_param) 3)) 77)) (= (to_rep (select (temp___String_Literal_597 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_597 us_void_param) 5)) 120)) (= (to_rep (select (temp___String_Literal_597 us_void_param) 6)) 32)) (= (to_rep (select (temp___String_Literal_597 us_void_param) 7)) 61)) :pattern ((temp___String_Literal_597 us_void_param)))))
(declare-fun temp___String_Literal_602 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_602 us_void_param) 1)) 44) (= (to_rep (select (temp___String_Literal_602 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 3)) 86)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 6)) 117)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_602 us_void_param) 9)) 61)) :pattern ((temp___String_Literal_602 us_void_param)))))
(declare-fun temp___String_Literal_607 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_607 us_void_param) 1)) 44) (= (to_rep (select (temp___String_Literal_607 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 3)) 80)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 4)) 114)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 6)) 99)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 7)) 105)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 8)) 115)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 9)) 105)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 10)) 111)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 11)) 110)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 12)) 32)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 13)) 61)) :pattern ((temp___String_Literal_607 us_void_param)))))
(declare-fun temp___String_Literal_612 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_612 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_612 us_void_param) 2)) 41)) :pattern ((temp___String_Literal_612 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range3 temp___expr_33)))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range2 temp___expr_63)))
(define-fun default_initial_assumption1 ((temp___expr_509 us_rep) (temp___skip_top_level_510 Bool)) Bool (= (attr__tag temp___expr_509) us_tag))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 (Array Int character))
(declare-const o7 t)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const temp___598 (Array Int character))
(declare-const temp___5981 t)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const temp___600 (Array Int character))
(declare-const temp___6001 t)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const temp___603 (Array Int character))
(declare-const temp___6031 t)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 Int)
(declare-const temp___605 (Array Int character))
(declare-const temp___6051 t)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 Int)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const temp___608 (Array Int character))
(declare-const temp___6081 t)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 Int)
(declare-const temp___610 (Array Int character))
(declare-const temp___6101 t)
(declare-const o44 Int)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 Int)
(declare-const temp___613 (Array Int character))
(declare-const temp___6131 t)
(declare-const o50 Int)
(declare-const o51 Int)
(declare-const o52 Int)
(declare-const o53 Int)
(declare-const o54 Int)
(declare-const o55 Int)
(assert (dynamic_invariant msg true false true))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (= (length msg) 0) (= (temp___String_Literal_592 Tuple0) o6))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (= (length msg) 0) (= (mk 1 3) o7))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (=> (<= 1 3) (= o (+ (- 3 1) 1))))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (=> (not (<= 1 3)) (= o 0)))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (=> (<= (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg)))) (= o1 (+ (- (to_rep1 (last (rt msg))) (to_rep1 (first (rt msg)))) 1))))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (=> (not (<= (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))))) (= o1 0)))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (= o2 (+ o1 o)))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (= o3 (+ (to_rep1 (first (rt msg))) o2)))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (= o4 (- o3 1)))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (and (= o5 o4) (in_range1 o4)))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (= (concat1 (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_592 Tuple0) 1 3) o6))))
(assert (=> (not (= (bool_eq (elts msg) (to_rep1 (first (rt msg))) (to_rep1 (last (rt msg))) (temp___String_Literal_590 Tuple0) 1 0) true)) (=> (not (= (length msg) 0)) (= (mk (to_rep1 (first (rt msg))) o5) o7))))
(assert (=> (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg))))))))) (= o8 (+ (- (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg)))))))) (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg))))))))) 1))))
(assert (=> (not (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg)))))))))) (= o8 0)))
(assert (=> (<= 1 14) (= o9 (+ (- 14 1) 1))))
(assert (=> (not (<= 1 14)) (= o9 0)))
(assert (= o10 (+ o9 o8)))
(assert (= o11 (+ 1 o10)))
(assert (= o12 (- o11 1)))
(assert (and (= o13 o12) (in_range1 o12)))
(assert (= (concat1 (temp___String_Literal_594 Tuple0) 1 14 (elts (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg)))))) (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__min1 (us_split_fields3 arg))))))))) temp___598))
(assert (= (mk 1 o13) temp___5981))
(assert (=> (= (length (mk___t temp___598 temp___5981)) 0) (= (temp___String_Literal_597 Tuple0) temp___600)))
(assert (=> (= (length (mk___t temp___598 temp___5981)) 0) (= (mk 1 7) temp___6001)))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (=> (<= 1 7) (= o14 (+ (- 7 1) 1)))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (=> (not (<= 1 7)) (= o14 0))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (=> (<= (to_rep1 (first temp___5981)) (to_rep1 (last temp___5981))) (= o15 (+ (- (to_rep1 (last temp___5981)) (to_rep1 (first temp___5981))) 1)))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (=> (not (<= (to_rep1 (first temp___5981)) (to_rep1 (last temp___5981)))) (= o15 0))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (= o16 (+ o15 o14))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (= o17 (+ (to_rep1 (first temp___5981)) o16))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (= o18 (- o17 1))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (and (= o19 o18) (in_range1 o18))))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (= (concat1 temp___598 (to_rep1 (first temp___5981)) (to_rep1 (last temp___5981)) (temp___String_Literal_597 Tuple0) 1 7) temp___600)))
(assert (=> (not (= (length (mk___t temp___598 temp___5981)) 0)) (= (mk (to_rep1 (first temp___5981)) o19) temp___6001)))
(assert (=> (= (length (mk___t temp___600 temp___6001)) 0) (= (elts (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))) temp___603)))
(assert (=> (= (length (mk___t temp___600 temp___6001)) 0) (= (mk (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg))))))))) temp___6031)))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (=> (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg))))))))) (= o20 (+ (- (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))))) (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg))))))))) 1)))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (=> (not (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))))))) (= o20 0))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (=> (<= (to_rep1 (first temp___6001)) (to_rep1 (last temp___6001))) (= o21 (+ (- (to_rep1 (last temp___6001)) (to_rep1 (first temp___6001))) 1)))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (=> (not (<= (to_rep1 (first temp___6001)) (to_rep1 (last temp___6001)))) (= o21 0))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (= o22 (+ o21 o20))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (= o23 (+ (to_rep1 (first temp___6001)) o22))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (= o24 (- o23 1))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (and (= o25 o24) (in_range1 o24))))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (= (concat1 temp___600 (to_rep1 (first temp___6001)) (to_rep1 (last temp___6001)) (elts (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))) (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg)))))))) (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE (to_rep1 (rec__ints__int__max1 (us_split_fields3 arg))))))))) temp___603)))
(assert (=> (not (= (length (mk___t temp___600 temp___6001)) 0)) (= (mk (to_rep1 (first temp___6001)) o25) temp___6031)))
(assert (not (= (length (mk___t temp___603 temp___6031)) 0)))
(assert (=> (<= 1 9) (= o26 (+ (- 9 1) 1))))
(assert (=> (not (<= 1 9)) (= o26 0)))
(assert (=> (<= (to_rep1 (first temp___6031)) (to_rep1 (last temp___6031))) (= o27 (+ (- (to_rep1 (last temp___6031)) (to_rep1 (first temp___6031))) 1))))
(assert (=> (not (<= (to_rep1 (first temp___6031)) (to_rep1 (last temp___6031)))) (= o27 0)))
(assert (= o28 (+ o27 o26)))
(assert (= o29 (+ (to_rep1 (first temp___6031)) o28)))
(assert (= o30 (- o29 1)))
(assert (not (in_range1 o30)))
(check-sat)
(exit)
