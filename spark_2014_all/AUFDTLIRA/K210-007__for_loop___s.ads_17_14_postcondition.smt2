(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort array_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (array_range array_range) Bool)
(declare-const dummy1 array_range)
(declare-datatypes () ((array_range__ref (mk_array_range__ref (array_range__content array_range)))))
(define-fun array_range__ref___projection ((a array_range__ref)) array_range (array_range__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t19b 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t19b t19b) Bool)
(declare-const dummy2 t19b)
(declare-datatypes () ((t19b__ref (mk_t19b__ref (t19b__content t19b)))))
(define-fun t19b__ref___projection ((a t19b__ref)) t19b (t19b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 10)) (in_range2 temp___expr_159)))
(declare-const dest (Array Int integer))
(declare-const src (Array Int integer))
(declare-const index Int)
(declare-const temp___212 Int)
(declare-const temp___213 (Array Int integer))
(declare-const temp___210 (Array Int integer))
(declare-const temp___208 (Array Int integer))
(declare-const temp___214 (Array Int integer))
(declare-const o integer)
(declare-const o1 (Array Int integer))
(declare-const o2 integer)
(declare-const o3 (Array Int integer))
(declare-const dest1 (Array Int integer))
(declare-const src1 (Array Int integer))
(declare-const result Int)
(declare-const index1 Int)
(declare-const result1 (Array Int integer))
(declare-const dest2 (Array Int integer))
(declare-const result2 (Array Int integer))
(declare-const src2 (Array Int integer))
(declare-const dest3 (Array Int integer))
(declare-const src3 (Array Int integer))
(declare-const index2 Int)
(declare-const dest4 (Array Int integer))
(declare-const src4 (Array Int integer))
(declare-const index3 Int)
(declare-const dest5 (Array Int integer))
(declare-const src5 (Array Int integer))
(declare-const index4 Int)
(declare-const dest6 (Array Int integer))
(declare-const src6 (Array Int integer))
(declare-const index5 Int)
(declare-const dest7 (Array Int integer))
(declare-const src7 (Array Int integer))
(declare-const index6 Int)
(declare-const dest8 (Array Int integer))
(declare-const src8 (Array Int integer))
(declare-const index7 Int)
(declare-const dest9 (Array Int integer))
(declare-const src9 (Array Int integer))
(declare-const index8 Int)
(define-fun src10 () map__ref (mk_map__ref src6))
(define-fun dest10 () map__ref (mk_map__ref dest6))
(define-fun src11 () map__ref (mk_map__ref src))
(define-fun dest11 () map__ref (mk_map__ref dest))
(assert (= (mk_int__ref result) (mk_int__ref index)))
(assert (= index1 10))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= temp___212 index1)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= temp___213 src)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= temp___210 src)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= temp___208 dest)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= temp___214 src)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= (to_rep o) (to_rep (select src index1)))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= o1 (store dest index1 o))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= (mk_map__ref result1) dest11)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= dest2 o1)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= (to_rep o2) 0)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= o3 (store src index1 o2))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= (mk_map__ref result2) src11)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= src2 o3)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (and (forall ((j Int)) (=> (and (<= index2 j) (<= j 10)) (= (to_rep (select dest3 j)) (to_rep (select temp___213 j))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (- index2 1))) (= (to_rep (select src3 j)) (to_rep (select temp___214 j))))))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (and (and (and (forall ((temp___209 Int)) (=> (and (<= 1 temp___209) (<= temp___209 10)) (=> (< temp___209 index2) (= (select dest3 temp___209) (select temp___208 temp___209))))) (forall ((temp___211 Int)) (=> (and (<= 1 temp___211) (<= temp___211 10)) (=> (< temp___211 index2) (= (select src3 temp___211) (select temp___210 temp___211)))))) (=> (<= 1 10) (in_range3 index2))) (and (<= 1 index2) (<= index2 10)))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= index2 1)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= index2 index3)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= src3 src4)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= dest3 dest4)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= index4 index2)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= src5 src3)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= dest5 dest3)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= (mk_int__ref index5) (mk_int__ref index3))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= src10 (mk_map__ref src4))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= dest10 (mk_map__ref dest4))))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= index6 index4)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= src7 src5)))
(assert (=> (and (<= 1 index1) (<= index1 10)) (= dest7 dest5)))
(assert (=> (not (and (<= 1 index1) (<= index1 10))) (= index1 index5)))
(assert (=> (not (and (<= 1 index1) (<= index1 10))) (= src10 src11)))
(assert (=> (not (and (<= 1 index1) (<= index1 10))) (= dest10 dest11)))
(assert (=> (not (and (<= 1 index1) (<= index1 10))) (= index6 index1)))
(assert (=> (not (and (<= 1 index1) (<= index1 10))) (= src7 src1)))
(assert (=> (not (and (<= 1 index1) (<= index1 10))) (= dest7 dest1)))
(assert (= index7 index5))
(assert (= src8 src6))
(assert (= (mk_map__ref dest8) dest10))
(assert (= index8 index6))
(assert (= src9 src7))
(assert (= dest9 dest7))
(declare-const j Int)
(assert (<= 1 j))
(assert (<= j 10))
(assert (not (= (to_rep (select dest8 j)) (to_rep (select src j)))))
(check-sat)
(exit)
