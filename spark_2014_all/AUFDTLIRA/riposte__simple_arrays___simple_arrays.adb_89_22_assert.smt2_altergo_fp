(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___176 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

axiom def_axiom :
  (forall temp___178:(int,integer) farray.
  (forall temp___179:int. forall temp___180:int. forall temp___181:int.
  forall temp___182:int.
  (forall temp___183:int. (((temp___183 = temp___181) ->
  ((temp___176(temp___178, temp___179, temp___180, temp___181,
  temp___182)[temp___183]) = of_rep(temp___182))) and
  ((not (temp___183 = temp___181)) -> (((temp___183 = temp___179) ->
  ((temp___176(temp___178, temp___179, temp___180, temp___181,
  temp___182)[temp___183]) = of_rep(temp___180))) and
  ((not (temp___183 = temp___179)) -> ((temp___176(temp___178, temp___179,
  temp___180, temp___181,
  temp___182)[temp___183]) = (temp___178[temp___183])))))))))

logic temp___185 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

axiom def_axiom1 :
  (forall temp___187:(int,integer) farray.
  (forall temp___188:int. forall temp___189:int. forall temp___190:int.
  forall temp___191:int.
  (forall temp___192:int. (((temp___192 = temp___190) ->
  ((temp___185(temp___187, temp___188, temp___189, temp___190,
  temp___191)[temp___192]) = of_rep(temp___191))) and
  ((not (temp___192 = temp___190)) -> (((temp___192 = temp___188) ->
  ((temp___185(temp___187, temp___188, temp___189, temp___190,
  temp___191)[temp___192]) = of_rep(temp___189))) and
  ((not (temp___192 = temp___188)) -> ((temp___185(temp___187, temp___188,
  temp___189, temp___190,
  temp___191)[temp___192]) = (temp___187[temp___192])))))))))

logic temp___194 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___196:(int,integer) farray.
  (forall temp___197:int. forall temp___198:int. forall temp___199:int.
  forall temp___200:int.
  (forall temp___201:int. (((temp___201 = temp___199) ->
  ((temp___194(temp___196, temp___197, temp___198, temp___199,
  temp___200)[temp___201]) = of_rep(temp___200))) and
  ((not (temp___201 = temp___199)) -> (((temp___201 = temp___197) ->
  ((temp___194(temp___196, temp___197, temp___198, temp___199,
  temp___200)[temp___201]) = of_rep(temp___198))) and
  ((not (temp___201 = temp___197)) -> ((temp___194(temp___196, temp___197,
  temp___198, temp___199,
  temp___200)[temp___201]) = (temp___196[temp___201])))))))))

logic temp___296 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

axiom def_axiom3 :
  (forall temp___298:(int,integer) farray.
  (forall temp___299:int. forall temp___300:int. forall temp___301:int.
  forall temp___302:int.
  (forall temp___303:int. (((temp___303 = temp___301) ->
  ((temp___296(temp___298, temp___299, temp___300, temp___301,
  temp___302)[temp___303]) = of_rep(temp___302))) and
  ((not (temp___303 = temp___301)) -> (((temp___303 = temp___299) ->
  ((temp___296(temp___298, temp___299, temp___300, temp___301,
  temp___302)[temp___303]) = of_rep(temp___300))) and
  ((not (temp___303 = temp___299)) -> ((temp___296(temp___298, temp___299,
  temp___300, temp___301,
  temp___302)[temp___303]) = (temp___298[temp___303])))))))))

logic temp___304 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

axiom def_axiom4 :
  (forall temp___306:(int,integer) farray.
  (forall temp___307:int. forall temp___308:int. forall temp___309:int.
  forall temp___310:int.
  (forall temp___311:int. (((temp___311 = temp___309) ->
  ((temp___304(temp___306, temp___307, temp___308, temp___309,
  temp___310)[temp___311]) = of_rep(temp___310))) and
  ((not (temp___311 = temp___309)) -> (((temp___311 = temp___307) ->
  ((temp___304(temp___306, temp___307, temp___308, temp___309,
  temp___310)[temp___311]) = of_rep(temp___308))) and
  ((not (temp___311 = temp___307)) -> ((temp___304(temp___306, temp___307,
  temp___308, temp___309,
  temp___310)[temp___311]) = (temp___306[temp___311])))))))))

logic a : (int,integer) farray

logic o : integer

logic o1 : (int,integer) farray

logic o2 : integer

logic o3 : (int,integer) farray

logic result : (int,integer) farray

logic a1 : (int,integer) farray

logic result1 : (int,integer) farray

logic a2 : (int,integer) farray

logic a3 : (int,integer) farray

logic a4 : (int,integer) farray

axiom H : in_range1(n)

 (* File "simple_arrays.adb", line 10, characters 0-0 *)
goal WP_parameter_def : (bool_eq3(temp___296(a, 1, 5, n, 6), (- 2147483648),
  2147483647, temp___304(a, n, 6, 1, 5), (- 2147483648), 2147483647) = true)
