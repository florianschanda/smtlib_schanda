(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type item_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : item_type, item_type -> bool

logic dummy : item_type

type item_type__ref = { item_type__content : item_type
}

function item_type__ref___projection(a: item_type__ref) : item_type =
  (a).item_type__content

logic to_rep : item_type -> int

logic of_rep : int -> item_type

axiom inversion_axiom :
  (forall x:item_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:item_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,item_type) farray
}

logic slide : (int,item_type) farray, int, int -> (int,item_type) farray

axiom slide_eq :
  (forall a:(int,item_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,item_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,item_type) farray, int, int, (int,item_type) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,item_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,item_type) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,item_type) farray. forall b:(int,item_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,item_type) farray; rt : t
}

function to_array(a: us_t) : (int,item_type) farray = (a).elts

function of_array(a: (int,item_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,item_type) farray -> int

logic value__component__size : int

logic object__component__size : (int,item_type) farray -> int

logic value__alignment : int

logic object__alignment : (int,item_type) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,item_type) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,item_type) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,item_type) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,item_type) farray

logic dummy4 : t

type item_array__ref = { item_array__content : us_t
}

function item_array__ref___projection(a: item_array__ref) : us_t =
  (a).item_array__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type us_split_fields = { rec__c910003_pack__buffer__saved_item : item_type;
rec__c910003_pack__buffer__empty : bool; rec__c910003_pack__buffer__tc_items
: (int,item_type) farray; rec__c910003_pack__buffer__tc_last : natural
}

function us_split_fields_Saved_Item__projection(a: us_split_fields) : item_type =
  (a).rec__c910003_pack__buffer__saved_item

function us_split_fields_Empty__projection(a: us_split_fields) : bool =
  (a).rec__c910003_pack__buffer__empty

function us_split_fields_TC_Items__projection(a: us_split_fields) : (int,item_type) farray =
  (a).rec__c910003_pack__buffer__tc_items

function us_split_fields_TC_Last__projection(a: us_split_fields) : natural =
  (a).rec__c910003_pack__buffer__tc_last

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:item_type. forall a1:bool. forall a2:(int,item_type) farray.
  forall a3:natural. (0 <= object__size1({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = a;
  rec__c910003_pack__buffer__empty = a1;
  rec__c910003_pack__buffer__tc_items = a2;
  rec__c910003_pack__buffer__tc_last = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:item_type. forall a1:bool. forall a2:(int,item_type) farray.
  forall a3:natural. (0 <= object__alignment1({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = a;
  rec__c910003_pack__buffer__empty = a1;
  rec__c910003_pack__buffer__tc_items = a2;
  rec__c910003_pack__buffer__tc_last = a3 } })))

logic c910003_pack__buffer__saved_item__first__bit : int

logic c910003_pack__buffer__saved_item__last__bit : int

logic c910003_pack__buffer__saved_item__position : int

axiom c910003_pack__buffer__saved_item__first__bit_axiom :
  (0 <= c910003_pack__buffer__saved_item__first__bit)

axiom c910003_pack__buffer__saved_item__last__bit_axiom :
  (c910003_pack__buffer__saved_item__first__bit <  c910003_pack__buffer__saved_item__last__bit)

axiom c910003_pack__buffer__saved_item__position_axiom :
  (0 <= c910003_pack__buffer__saved_item__position)

logic c910003_pack__buffer__empty__first__bit : int

logic c910003_pack__buffer__empty__last__bit : int

logic c910003_pack__buffer__empty__position : int

axiom c910003_pack__buffer__empty__first__bit_axiom :
  (0 <= c910003_pack__buffer__empty__first__bit)

axiom c910003_pack__buffer__empty__last__bit_axiom :
  (c910003_pack__buffer__empty__first__bit <  c910003_pack__buffer__empty__last__bit)

axiom c910003_pack__buffer__empty__position_axiom :
  (0 <= c910003_pack__buffer__empty__position)

logic c910003_pack__buffer__tc_items__first__bit : int

logic c910003_pack__buffer__tc_items__last__bit : int

logic c910003_pack__buffer__tc_items__position : int

axiom c910003_pack__buffer__tc_items__first__bit_axiom :
  (0 <= c910003_pack__buffer__tc_items__first__bit)

axiom c910003_pack__buffer__tc_items__last__bit_axiom :
  (c910003_pack__buffer__tc_items__first__bit <  c910003_pack__buffer__tc_items__last__bit)

axiom c910003_pack__buffer__tc_items__position_axiom :
  (0 <= c910003_pack__buffer__tc_items__position)

logic c910003_pack__buffer__tc_last__first__bit : int

logic c910003_pack__buffer__tc_last__last__bit : int

logic c910003_pack__buffer__tc_last__position : int

axiom c910003_pack__buffer__tc_last__first__bit_axiom :
  (0 <= c910003_pack__buffer__tc_last__first__bit)

axiom c910003_pack__buffer__tc_last__last__bit_axiom :
  (c910003_pack__buffer__tc_last__first__bit <  c910003_pack__buffer__tc_last__last__bit)

axiom c910003_pack__buffer__tc_last__position_axiom :
  (0 <= c910003_pack__buffer__tc_last__position)

logic user_eq5 : us_rep, us_rep -> bool

type buffer__ref = { buffer__content : us_rep
}

function buffer__ref___projection(a: buffer__ref) : us_rep =
  (a).buffer__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic temp___220 : int -> (int,item_type) farray

logic tc_items_buffered : us_rep, int -> us_t

logic tc_items_buffered__function_guard : us_t, us_rep, int -> prop

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type t9b__ref = { t9b__content : integer
}

function t9b__ref___projection(a: t9b__ref) : integer = (a).t9b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,item_type) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,item_type) farray = (a).elts1

function of_array1(a: (int,item_type) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,item_type) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,item_type) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,item_type) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,item_type) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,item_type) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,item_type) farray. (0 <= object__alignment2(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq3((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy7 : (int,item_type) farray

logic dummy8 : t1

type t10b__ref = { t10b__content : us_t1
}

function t10b__ref___projection(a: t10b__ref) : us_t1 = (a).t10b__content

axiom tc_items_buffered__post_axiom :
  (forall self__:item_type. forall self__1:bool.
  forall self__2:(int,item_type) farray. forall self__3:natural.
  (forall x:int [tc_items_buffered({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)]. (in_range2(x) ->
  dynamic_property(1, 2147483647, to_rep1(first((tc_items_buffered({
  us_split_fields1 = { rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)).rt)),
  to_rep1(last((tc_items_buffered({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)).rt))))))

axiom tc_items_buffered__def_axiom :
  (forall self__:item_type. forall self__1:bool.
  forall self__2:(int,item_type) farray. forall self__3:natural.
  (forall x:int [tc_items_buffered({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)]. (in_range2(x) ->
  (tc_items_buffered({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x) = { elts = self__2;
  rt = mk(to_rep1(first2(mk1(1, to_rep2(self__3)))), to_rep1(last2(mk1(1,
  to_rep2(self__3))))) }))))

logic tc_items_buffered__2 : us_rep, bool -> us_t

logic tc_items_buffered__2__function_guard : us_t, us_rep, bool -> prop

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy9 : integer

type t4b__ref = { t4b__content : integer
}

function t4b__ref___projection(a: t4b__ref) : integer = (a).t4b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,item_type) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,item_type) farray = (a).elts2

function of_array2(a: (int,item_type) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,item_type) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,item_type) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,item_type) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,item_type) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,item_type) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,item_type) farray. (0 <= object__alignment3(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq3((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq9 : us_t2, us_t2 -> bool

logic dummy10 : (int,item_type) farray

logic dummy11 : t2

type t5b__ref = { t5b__content : us_t2
}

function t5b__ref___projection(a: t5b__ref) : us_t2 = (a).t5b__content

axiom tc_items_buffered__2__post_axiom :
  (forall self__:item_type. forall self__1:bool.
  forall self__2:(int,item_type) farray. forall self__3:natural.
  (forall x:bool [tc_items_buffered__2({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)]. dynamic_property(1,
  2147483647, to_rep1(first((tc_items_buffered__2({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)).rt)),
  to_rep1(last((tc_items_buffered__2({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)).rt)))))

axiom tc_items_buffered__2__def_axiom :
  (forall self__:item_type. forall self__1:bool.
  forall self__2:(int,item_type) farray. forall self__3:natural.
  (forall x:bool [tc_items_buffered__2({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x)].
  (tc_items_buffered__2({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = self__;
  rec__c910003_pack__buffer__empty = self__1;
  rec__c910003_pack__buffer__tc_items = self__2;
  rec__c910003_pack__buffer__tc_last = self__3 } }, x) = { elts = self__2;
  rt = mk(to_rep1(first4(mk2(1, to_rep2(self__3)))), to_rep1(last4(mk2(1,
  to_rep2(self__3))))) })))

logic attr__ATTRIBUTE_ADDRESS : int

logic item1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic item2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom def_axiom :
  (forall temp___222:int. (in_range1(temp___222) ->
  (forall temp___223:int.
  (to_rep((temp___220(temp___222)[temp___223])) = temp___222))))

 (* File "c910003_pack.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall o:item_type. forall o1:bool. forall o2:(int,item_type) farray.
  forall o3:natural. forall temp___258:(int,item_type) farray.
  forall temp___2581:t. forall po__split_fields:item_type.
  forall po__split_fields1:bool.
  forall po__split_fields2:(int,item_type) farray.
  forall po__split_fields3:natural. ((((o = po__split_fields) and
  ((o1 = po__split_fields1) and ((o2 = po__split_fields2) and
  (o3 = po__split_fields3)))) and (({ elts = temp___258; rt = temp___2581
  } = tc_items_buffered({ us_split_fields1 = {
  rec__c910003_pack__buffer__saved_item = o;
  rec__c910003_pack__buffer__empty = o1;
  rec__c910003_pack__buffer__tc_items = o2;
  rec__c910003_pack__buffer__tc_last = o3 } }, 1)) and (dynamic_property(1,
  2147483647, to_rep1(first(temp___2581)), to_rep1(last(temp___2581))) and
  ((o2 = temp___258) and (mk(to_rep1(first2(mk1(1, to_rep2(o3)))),
  to_rep1(last2(mk1(1, to_rep2(o3))))) = temp___2581))))) ->
  (to_rep1(first(temp___2581)) <= 1)))
