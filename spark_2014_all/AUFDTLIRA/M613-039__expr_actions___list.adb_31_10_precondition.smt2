(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((m__ref (mk_m__ref (m__content us_t)))))
(define-fun m__ref___projection ((a m__ref)) us_t (m__content a))
(declare-sort r1 0)
(declare-fun r1qtint (r1) Int)
(assert (forall ((i r1)) (and (<= 0 (r1qtint i)) (<= (r1qtint i) 100))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (r1 r1) Bool)
(declare-const dummy3 r1)
(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content r1)))))
(define-fun r1__ref___projection ((a r1__ref)) r1 (r1__content a))
(define-fun to_rep1 ((x r1)) Int (r1qtint x))
(declare-fun of_rep1 (Int) r1)
(assert (forall ((x r1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x r1)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const dummy4 (Array Int integer))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int integer)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int integer)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stack__stack__top r1) (rec__stack__stack__content (Array Int integer))))))
(define-fun us_split_fields_Top__projection ((a us_split_fields)) r1 (rec__stack__stack__top a))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int integer) (rec__stack__stack__content a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__stack__stack__top (us_split_fields1 a))) (to_rep1 (rec__stack__stack__top (us_split_fields1 b)))) (= (bool_eq (rec__stack__stack__content (us_split_fields1 a)) 1 100 (rec__stack__stack__content (us_split_fields1 b)) 1 100) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const stack__stack__top__first__bit Int)
(declare-const stack__stack__top__last__bit Int)
(declare-const stack__stack__top__position Int)
(assert (<= 0 stack__stack__top__first__bit))
(assert (< stack__stack__top__first__bit stack__stack__top__last__bit))
(assert (<= 0 stack__stack__top__position))
(declare-const stack__stack__content__first__bit Int)
(declare-const stack__stack__content__last__bit Int)
(declare-const stack__stack__content__position Int)
(assert (<= 0 stack__stack__content__first__bit))
(assert (< stack__stack__content__first__bit stack__stack__content__last__bit))
(assert (<= 0 stack__stack__content__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((stack__ref (mk_stack__ref (stack__content us_rep)))))
(define-fun stack__ref___projection ((a stack__ref)) us_rep (stack__content a))
(declare-fun to__ (us_rep) us_t)
(declare-fun to____function_guard (us_t us_rep) Bool)
(declare-fun temp_____aggregate_def_183 (Int) (Array Int integer))
(define-fun default_initial_assumption ((temp___expr_181 us_rep) (temp___skip_top_level_182 Bool)) Bool (and (= (to_rep1 (rec__stack__stack__top (us_split_fields1 temp___expr_181))) 0) (= (rec__stack__stack__content (us_split_fields1 temp___expr_181)) (temp_____aggregate_def_183 0))))
(define-fun dynamic_invariant1 ((temp___expr_191 us_t) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool) (temp___do_typ_inv_190 Bool)) Bool (=> (not (= temp___skip_constant_188 true)) (dynamic_property 1 2147483647 (first1 temp___expr_191) (last1 temp___expr_191))))
(assert (forall ((s us_rep)) (! (dynamic_invariant1 (to__ s) true false true true) :pattern ((to__ s)))))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun top (us_rep) Int)
(declare-fun top__function_guard (Int us_rep) Bool)
(assert (forall ((s us_rep)) (! (=> (not (= (is_empty s) true)) (dynamic_invariant (top s) true false true true)) :pattern ((top s)))))
(assert (forall ((s us_rep)) (! (= (top s) (to_rep1 (rec__stack__stack__top (us_split_fields1 s)))) :pattern ((top s)))))
(declare-fun to_but_top (us_rep) us_t)
(declare-fun to_but_top__function_guard (us_t us_rep) Bool)
(declare-fun is_full (us_rep) Bool)
(declare-fun is_full__function_guard (Bool us_rep) Bool)
(declare-sort capacity_range 0)
(declare-fun capacity_rangeqtint (capacity_range) Int)
(assert (forall ((i capacity_range)) (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 100))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (capacity_range capacity_range) Bool)
(declare-const dummy6 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__list__my_lists__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__list__my_lists__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list__my_lists__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type (rec__list__my_lists__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const list__my_lists__vector__capacity__first__bit Int)
(declare-const list__my_lists__vector__capacity__last__bit Int)
(declare-const list__my_lists__vector__capacity__position Int)
(assert (<= 0 list__my_lists__vector__capacity__first__bit))
(assert (< list__my_lists__vector__capacity__first__bit list__my_lists__vector__capacity__last__bit))
(assert (<= 0 list__my_lists__vector__capacity__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(define-fun last2 ((container us_rep2)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(declare-fun model__ (us_rep1) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep1) Bool)
(define-fun last_index ((container us_rep1)) Int (last2 (model__ container)))
(declare-fun last_index__function_guard (Int us_rep1) Bool)
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 101))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 101)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (extended_index extended_index) Bool)
(declare-const dummy9 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant2 ((temp___expr_296 Int) (temp___is_init_292 Bool) (temp___skip_constant_293 Bool) (temp___do_toplevel_294 Bool) (temp___do_typ_inv_295 Bool)) Bool (=> (or (= temp___is_init_292 true) (<= 0 101)) (in_range5 temp___expr_296)))
(declare-fun first_index__function_guard (Int us_rep1) Bool)
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq10 (index_type index_type) Bool)
(declare-const dummy10 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_282 Int) (temp___is_init_278 Bool) (temp___skip_constant_279 Bool) (temp___do_toplevel_280 Bool) (temp___do_typ_inv_281 Bool)) Bool (=> (or (= temp___is_init_278 true) (<= 1 100)) (in_range6 temp___expr_282)))
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(define-fun element ((container us_rep1) (index Int)) Int (get (model__ container) index))
(declare-fun element__function_guard (Int us_rep1 Int) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (element_type element_type) Bool)
(declare-const dummy11 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_289 Int) (temp___is_init_285 Bool) (temp___skip_constant_286 Bool) (temp___do_toplevel_287 Bool) (temp___do_typ_inv_288 Bool)) Bool (=> (or (= temp___is_init_285 true) (<= (- 2147483648) 2147483647)) (in_range7 temp___expr_289)))
(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))
(declare-fun of_rep2 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x capacity_range)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun capacity ((container us_rep1)) Int (ite (= (distinct 1 0) true) (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 container))) 100))
(declare-fun capacity__function_guard (Int us_rep1) Bool)
(declare-fun length2 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun olt ((left us_rep2) (right us_rep2)) Bool (and (< (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last2 left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun in_range8 ((rec__list__my_lists__vector__capacity1 Int) (a us_rep1)) Bool (= rec__list__my_lists__vector__capacity1 (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep1) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep1) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep1)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment5 a))))
(declare-const list__my_lists__vector__capacity__first__bit1 Int)
(declare-const list__my_lists__vector__capacity__last__bit1 Int)
(declare-const list__my_lists__vector__capacity__position1 Int)
(assert (<= 0 list__my_lists__vector__capacity__first__bit1))
(assert (< list__my_lists__vector__capacity__first__bit1 list__my_lists__vector__capacity__last__bit1))
(assert (<= 0 list__my_lists__vector__capacity__position1))
(declare-fun user_eq12 (us_rep1 us_rep1) Bool)
(declare-const dummy12 us_rep1)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep1)))))
(define-fun list__ref___projection ((a list__ref)) us_rep1 (list__content a))
(declare-fun is_empty1 (us_rep1) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)
(define-fun dynamic_invariant5 ((temp___expr_433 us_rep1) (temp___is_init_429 Bool) (temp___skip_constant_430 Bool) (temp___do_toplevel_431 Bool) (temp___do_typ_inv_432 Bool)) Bool (=> (not (= temp___skip_constant_430 true)) (in_range8 100 temp___expr_433)))
(define-fun default_initial_assumption1 ((temp___expr_435 us_rep1) (temp___skip_top_level_436 Bool)) Bool (and (= (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 temp___expr_435))) 100) (=> (not (= temp___skip_top_level_436 true)) (= (is_empty1 temp___expr_435) true))))
(declare-const l us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const first2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const last3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const res__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq13 (integer integer) Bool)
(declare-const dummy13 integer)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq14 (integer integer) Bool)
(declare-const dummy14 integer)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content integer)))))
(define-fun t7b__ref___projection ((a t7b__ref)) integer (t7b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq15 (integer integer) Bool)
(declare-const dummy15 integer)
(declare-datatypes () ((t18b__ref (mk_t18b__ref (t18b__content integer)))))
(define-fun t18b__ref___projection ((a t18b__ref)) integer (t18b__content a))
(declare-sort t1 0)
(declare-fun first3 (t1) integer)
(declare-fun last4 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l1 Int)) (! (=> (in_range1 f) (=> (in_range1 l1) (and (= (to_rep (first3 (mk1 f l1))) f) (= (to_rep (last4 (mk1 f l1))) l1)))) :pattern ((mk1 f l1)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int integer)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))
(define-fun of_array1 ((a (Array Int integer)) (f Int) (l1 Int)) us_t1 (mk___t1 a (mk1 f l1)))
(define-fun first4 ((a us_t1)) Int (to_rep (first3 (rt1 a))))
(define-fun last5 ((a us_t1)) Int (to_rep (last4 (rt1 a))))
(define-fun length3 ((a us_t1)) Int (ite (<= (first4 a) (last5 a)) (+ (- (last5 a) (first4 a)) 1) 0))
(declare-const value__size6 Int)
(declare-fun object__size6 ((Array Int integer)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int integer)) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 ((Array Int integer)) Int)
(assert (<= 0 value__size6))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size6 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment6 a))))
(define-fun bool_eq4 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first3 (rt1 x))) (to_rep (last4 (rt1 x))) (elts1 y) (to_rep (first3 (rt1 y))) (to_rep (last4 (rt1 y)))))
(declare-fun user_eq16 (us_t1 us_t1) Bool)
(declare-const dummy16 us_t1)
(declare-datatypes () ((t19b__ref (mk_t19b__ref (t19b__content us_t1)))))
(define-fun t19b__ref___projection ((a t19b__ref)) us_t1 (t19b__content a))
(define-fun dynamic_property5 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq17 (integer integer) Bool)
(declare-const dummy17 integer)
(declare-datatypes () ((t22b__ref (mk_t22b__ref (t22b__content integer)))))
(define-fun t22b__ref___projection ((a t22b__ref)) integer (t22b__content a))
(declare-sort t2 0)
(declare-fun first5 (t2) integer)
(declare-fun last6 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l1 Int)) (! (=> (in_range1 f) (=> (in_range1 l1) (and (= (to_rep (first5 (mk2 f l1))) f) (= (to_rep (last6 (mk2 f l1))) l1)))) :pattern ((mk2 f l1)))))
(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property5 range_first range_last low) (dynamic_property5 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int integer)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))
(define-fun of_array2 ((a (Array Int integer)) (f Int) (l1 Int)) us_t2 (mk___t2 a (mk2 f l1)))
(define-fun first6 ((a us_t2)) Int (to_rep (first5 (rt2 a))))
(define-fun last7 ((a us_t2)) Int (to_rep (last6 (rt2 a))))
(define-fun length4 ((a us_t2)) Int (ite (<= (first6 a) (last7 a)) (+ (- (last7 a) (first6 a)) 1) 0))
(declare-const value__size7 Int)
(declare-fun object__size7 ((Array Int integer)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int integer)) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 ((Array Int integer)) Int)
(assert (<= 0 value__size7))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size7 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment7 a))))
(define-fun bool_eq5 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first5 (rt2 x))) (to_rep (last6 (rt2 x))) (elts2 y) (to_rep (first5 (rt2 y))) (to_rep (last6 (rt2 y)))))
(declare-fun user_eq18 (us_t2 us_t2) Bool)
(declare-const dummy18 us_t2)
(declare-datatypes () ((t23b__ref (mk_t23b__ref (t23b__content us_t2)))))
(define-fun t23b__ref___projection ((a t23b__ref)) us_t2 (t23b__content a))
(define-fun dynamic_invariant6 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(assert (= first2 1))
(assert (= last3 (last_index l)))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq19 (count_type count_type) Bool)
(declare-const dummy19 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant7 ((temp___expr_226 Int) (temp___is_init_222 Bool) (temp___skip_constant_223 Bool) (temp___do_toplevel_224 Bool) (temp___do_typ_inv_225 Bool)) Bool (=> (or (= temp___is_init_222 true) (<= 0 2147483647)) (in_range9 temp___expr_226)))
(assert (forall ((s us_rep)) (! (dynamic_invariant1 (to_but_top s) true false true true) :pattern ((to_but_top s)))))
(assert true)
(assert true)
(define-fun dynamic_invariant8 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 100)) (in_range3 temp___expr_159)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(assert (forall ((temp___185 Int)) (=> (dynamic_invariant temp___185 true true true true) (forall ((temp___186 Int)) (= (select (temp_____aggregate_def_183 temp___185) temp___186) rliteral)))))
(define-fun dynamic_invariant9 ((temp___expr_303 Int) (temp___is_init_299 Bool) (temp___skip_constant_300 Bool) (temp___do_toplevel_301 Bool) (temp___do_typ_inv_302 Bool)) Bool (=> (or (= temp___is_init_299 true) (<= 0 100)) (in_range4 temp___expr_303)))
(assert (forall ((container us_rep1)) (! (let ((result (length2 container))) (and (<= result (capacity container)) (dynamic_invariant9 result true false true true))) :pattern ((length2 container)))))
(define-fun oeq ((left us_rep2) (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last2 left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq8 a b) (oeq a b)) :pattern ((user_eq8 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_342 us_rep2) (temp___skip_top_level_343 Bool)) Bool (=> (not (= temp___skip_top_level_343 true)) (= (length1 temp___expr_342) 0)))
(assert (forall ((container us_rep1)) (! (= (length1 (model__ container)) (length2 container)) :pattern ((model__ container)))))
(assert (forall ((container us_rep1)) (! (= (= (is_empty1 container) true) (= (length2 container) 0)) :pattern ((is_empty1 container)))))
(declare-sort extended_index1 0)
(declare-fun extended_indexqtint1 (extended_index1) Int)
(assert (forall ((i extended_index1)) (and (<= 0 (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 100))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq20 (extended_index1 extended_index1) Bool)
(declare-const dummy20 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant10 ((temp___expr_334 Int) (temp___is_init_330 Bool) (temp___skip_constant_331 Bool) (temp___do_toplevel_332 Bool) (temp___do_typ_inv_333 Bool)) Bool (=> (or (= temp___is_init_330 true) (<= 0 100)) (in_range10 temp___expr_334)))
(assert (forall ((container us_rep2)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 100) (dynamic_invariant7 result true false true true))) :pattern ((length1 container)))))
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= (- 2147483648) (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range11 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq21 (element_type1 element_type1) Bool)
(declare-const dummy21 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant11 ((temp___expr_327 Int) (temp___is_init_323 Bool) (temp___skip_constant_324 Bool) (temp___do_toplevel_325 Bool) (temp___do_typ_inv_326 Bool)) Bool (=> (or (= temp___is_init_323 true) (<= (- 2147483648) 2147483647)) (in_range11 temp___expr_327)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant10 position true true true true) (and (<= 1 position) (<= position (last2 container)))) (dynamic_invariant11 (get container position) true false true true)) :pattern ((get container position))))))
(declare-const s__split_fields r1)
(declare-const s__split_fields1 (Array Int integer))
(declare-const res__split_fields us_main_type)
(declare-const i Int)
(declare-const i1 Int)
(declare-const list__reverse_list__first__assume Int)
(declare-const list__reverse_list__last__assume Int)
(declare-const temp___507 r1)
(declare-const temp___5071 (Array Int integer))
(declare-const temp___506 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const s__split_fields2 us_split_fields)
(declare-const result int__ref)
(declare-const i2 Int)
(declare-const s__split_fields3 us_split_fields)
(declare-const s__split_fields4 us_split_fields)
(declare-const i3 Int)
(declare-const s__split_fields5 us_split_fields__ref)
(declare-const i4 int__ref)
(declare-const s__split_fields6 us_split_fields)
(declare-const i5 Int)
(declare-const s__split_fields7 us_split_fields__ref)
(declare-const i6 int__ref)
(declare-const s__split_fields8 us_split_fields)
(declare-const i7 Int)
(declare-const result1 int__ref)
(declare-const i8 Int)
(declare-const list__my_lists__append__2__container__fields us_split_fields2)
(declare-const result2 us_split_fields__ref1)
(declare-const res__split_fields1 us_split_fields2)
(declare-const s__split_fields9 us_split_fields)
(declare-const s__split_fields10 us_split_fields)
(declare-const res__split_fields2 us_split_fields2)
(declare-const i9 Int)
(declare-const result3 int__ref)
(declare-const i10 Int)
(declare-const list__my_lists__append__2__container__fields1 us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const res__split_fields3 us_split_fields2)
(assert (= 100 (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 l)))))
(assert (and (= (to_rep1 s__split_fields) 0) (= s__split_fields1 (temp_____aggregate_def_183 0))))
(assert (and (= list__reverse_list__first__assume 1) (and (in_range6 list__reverse_list__first__assume) (= list__reverse_list__first__assume 1))))
(assert (= list__reverse_list__first__assume first2))
(assert (in_range1 first2))
(assert (and (= list__reverse_list__last__assume (last2 (model__ l))) (and (in_range5 list__reverse_list__last__assume) (= list__reverse_list__last__assume (last2 (model__ l))))))
(assert (= list__reverse_list__last__assume last3))
(assert (in_range1 last3))
(assert (default_initial_assumption1 (mk___rep1 res__split_discrs (mk___split_fields1 res__split_fields)) false))
(assert (= 100 (to_rep2 (rec__list__my_lists__vector__capacity res__split_discrs))))
(assert (= result (mk_int__ref i)))
(assert (= i2 first2))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (and (= s__split_fields temp___507) (= s__split_fields1 temp___5071))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= temp___506 i2)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (and (= o i2) (in_range6 i2))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (and (= o1 (get (model__ l) o)) (and (in_range7 o1) (= o1 (get (model__ l) o))))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (and (= (top (mk___rep s__split_fields3)) o1) (= (let ((temp___208 (to__ (mk___rep (mk___split_fields s__split_fields s__split_fields1))))) (let ((temp___207 (to_but_top (mk___rep s__split_fields3)))) (bool_eq (elts temp___207) (to_rep (first (rt temp___207))) (to_rep (last (rt temp___207))) (elts temp___208) (to_rep (first (rt temp___208))) (to_rep (last (rt temp___208)))))) true))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (and (= (to_rep (last (rt (to__ (mk___rep s__split_fields4))))) (+ (- i3 first2) 1)) (forall ((j Int)) (=> (and (<= first2 j) (<= j i3)) (= (to_rep (select (elts (to__ (mk___rep s__split_fields4))) j)) (get (model__ l) j)))))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (and (=> (<= first2 last3) (dynamic_property1 first2 last3 i3)) (and (<= first2 i3) (<= i3 last3)))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= i3 last3)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= i4 (mk_int__ref i3))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= s__split_fields5 (mk___split_fields__ref s__split_fields4))))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= i5 i3)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= s__split_fields6 s__split_fields4)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= i6 i4)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= s__split_fields7 s__split_fields5)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= i7 i5)))
(assert (=> (and (<= first2 i2) (<= i2 last3)) (= s__split_fields8 s__split_fields6)))
(assert (=> (not (and (<= first2 i2) (<= i2 last3))) (= i6 (mk_int__ref i2))))
(assert (=> (not (and (<= first2 i2) (<= i2 last3))) (= s__split_fields7 (mk___split_fields__ref (mk___split_fields s__split_fields s__split_fields1)))))
(assert (=> (not (and (<= first2 i2) (<= i2 last3))) (= i7 i2)))
(assert (=> (not (and (<= first2 i2) (<= i2 last3))) (= s__split_fields8 s__split_fields2)))
(assert (= result1 (mk_int__ref i1)))
(assert (= i8 first2))
(assert (<= first2 i8))
(assert (<= i8 last3))
(assert (and (= o2 (top (mk___rep (us_split_fields__content s__split_fields7)))) (and (in_range1 o2) (= o2 (to_rep1 (rec__stack__stack__top (us_split_fields__content s__split_fields7)))))))
(assert (and (and (= (length2 (mk___rep1 res__split_discrs list__my_lists__append__2__container__fields)) (+ (length2 (mk___rep1 res__split_discrs (mk___split_fields1 res__split_fields))) 1)) (= (olt (model__ (mk___rep1 res__split_discrs (mk___split_fields1 res__split_fields))) (model__ (mk___rep1 res__split_discrs list__my_lists__append__2__container__fields))) true)) (= (get (model__ (mk___rep1 res__split_discrs list__my_lists__append__2__container__fields)) (+ (last2 (model__ (mk___rep1 res__split_discrs (mk___split_fields1 res__split_fields)))) 1)) o2)))
(assert (= result2 (mk___split_fields__ref1 (mk___split_fields1 res__split_fields))))
(assert (= res__split_fields1 list__my_lists__append__2__container__fields))
(assert (= (let ((temp___212 (to__ (mk___rep s__split_fields9)))) (let ((temp___211 (to_but_top (mk___rep (us_split_fields__content s__split_fields7))))) (bool_eq (elts temp___211) (to_rep (first (rt temp___211))) (to_rep (last (rt temp___211))) (elts temp___212) (to_rep (first (rt temp___212))) (to_rep (last (rt temp___212)))))) true))
(assert (and (and (= (to_rep (last (rt (to__ (mk___rep s__split_fields10))))) (- last3 i9)) (= (bool_eq (elts (to__ (mk___rep s__split_fields10))) (to_rep (first3 (mk1 first2 (- last3 i9)))) (to_rep (last4 (mk1 first2 (- last3 i9)))) (elts (to__ (mk___rep (us_split_fields__content s__split_fields7)))) (to_rep (first5 (mk2 first2 (- last3 i9)))) (to_rep (last6 (mk2 first2 (- last3 i9))))) true)) (forall ((j Int)) (=> (and (<= first2 j) (<= j i9)) (= (get (model__ (mk___rep1 res__split_discrs res__split_fields2)) j) (get (model__ l) (+ (- (last2 (model__ l)) j) 1)))))))
(assert (and (=> (<= first2 last3) (dynamic_property2 first2 last3 i9)) (and (<= first2 i9) (<= i9 last3))))
(assert (not (= i9 last3)))
(assert (= result3 (mk_int__ref i9)))
(assert (= i10 (+ i9 1)))
(assert (and (= o3 (top (mk___rep s__split_fields10))) (and (in_range1 o3) (= o3 (to_rep1 (rec__stack__stack__top s__split_fields10))))))
(assert (and (and (= (length2 (mk___rep1 res__split_discrs list__my_lists__append__2__container__fields1)) (+ (length2 (mk___rep1 res__split_discrs res__split_fields2)) 1)) (= (olt (model__ (mk___rep1 res__split_discrs res__split_fields2)) (model__ (mk___rep1 res__split_discrs list__my_lists__append__2__container__fields1))) true)) (= (get (model__ (mk___rep1 res__split_discrs list__my_lists__append__2__container__fields1)) (+ (last2 (model__ (mk___rep1 res__split_discrs res__split_fields2))) 1)) o3)))
(assert (= result4 (mk___split_fields__ref1 res__split_fields2)))
(assert (= res__split_fields3 list__my_lists__append__2__container__fields1))
(assert (not (not (= (is_empty (mk___rep s__split_fields10)) true))))
(check-sat)
(exit)
