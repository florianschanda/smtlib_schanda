(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort integer_subtype 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer_subtype integer_subtype) Bool)
(declare-const dummy1 integer_subtype)
(declare-datatypes () ((integer_subtype__ref (mk_integer_subtype__ref (integer_subtype__content integer_subtype)))))
(define-fun integer_subtype__ref___projection ((a integer_subtype__ref)) integer_subtype (integer_subtype__content a))
(declare-fun to_rep1 (integer_subtype) Int)
(declare-fun of_rep1 (Int) integer_subtype)
(assert (forall ((x integer_subtype)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer_subtype)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort tint_array1D1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tint_array1D1 tint_array1D1) Bool)
(declare-const dummy2 tint_array1D1)
(declare-datatypes () ((tint_array1D1__ref (mk_tint_array1D1__ref (tint_array1D1__content tint_array1D1)))))
(define-fun tint_array1D1__ref___projection ((a tint_array1D1__ref)) tint_array1D1 (tint_array1D1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort tint_array2D1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tint_array2D1 tint_array2D1) Bool)
(declare-const dummy3 tint_array2D1)
(declare-datatypes () ((tint_array2D1__ref (mk_tint_array2D1__ref (tint_array2D1__content tint_array2D1)))))
(define-fun tint_array2D1__ref___projection ((a tint_array2D1__ref)) tint_array2D1 (tint_array2D1__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer_subtype))))))
(declare-fun slide1 ((Array Int integer_subtype) Int Int) (Array Int integer_subtype))
(assert (forall ((a (Array Int integer_subtype))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int integer_subtype))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int integer_subtype) Int Int (Array Int integer_subtype) Int Int) (Array Int integer_subtype))
(assert (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (integer_subtype Int) (Array Int integer_subtype))
(assert (forall ((v integer_subtype)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int integer_subtype)) (a__first Int) (a__last Int) (b (Array Int integer_subtype)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare1 ((Array Int integer_subtype) Int Int (Array Int integer_subtype) Int Int) Int)
(assert (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-const input_array (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t1b 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (t1b t1b) Bool)
(declare-const dummy4 t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_137 Int) (temp___is_init_134 Bool) (temp___skip_constant_135 Bool) (temp___do_toplevel_136 Bool)) Bool (=> (or (= temp___is_init_134 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_137)))
(declare-const result__ (Array Int integer_subtype))
(declare-const i Int)
(declare-const cast_array__cast__result (Array Int integer_subtype))
(declare-const temp___164 Int)
(declare-const temp___162 (Array Int integer_subtype))
(declare-const o integer_subtype)
(declare-const o1 (Array Int integer_subtype))
(declare-const k Int)
(declare-const o2 Int)
(declare-const o3 integer)
(declare-const o4 Int)
(declare-const o5 integer_subtype)
(declare-const o6 (Array Int integer_subtype))
(declare-const result__1 (Array Int integer_subtype))
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 (Array Int integer_subtype))
(declare-const result__2 (Array Int integer_subtype))
(declare-const result__3 (Array Int integer_subtype))
(declare-const i2 Int)
(declare-const result2 Int)
(declare-const i3 Int)
(declare-const result3 (Array Int integer_subtype))
(declare-const result__4 (Array Int integer_subtype))
(declare-const result__5 (Array Int integer_subtype))
(declare-const i4 Int)
(declare-const result__6 (Array Int integer_subtype))
(declare-const i5 Int)
(declare-const result__7 (Array Int integer_subtype))
(declare-const i6 Int)
(declare-const result__8 (Array Int integer_subtype))
(declare-const i7 Int)
(declare-const result__9 (Array Int integer_subtype))
(declare-const i8 Int)
(declare-const result__10 (Array Int integer_subtype))
(declare-const i9 Int)
(declare-const result4 (Array Int integer_subtype))
(declare-const cast_array__cast__result1 (Array Int integer_subtype))
(declare-const cast_array__cast__result2 (Array Int integer_subtype))
(declare-const cast_array__cast__result3 (Array Int integer_subtype))
(declare-const result__11 (Array Int integer_subtype))
(declare-const i10 Int)
(declare-const cast_array__cast__result4 (Array Int integer_subtype))
(declare-const result__12 (Array Int integer_subtype))
(declare-const i11 Int)
(declare-const cast_array__cast__result5 (Array Int integer_subtype))
(declare-const result5 (Array Int integer_subtype))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 0))
(assert (=> (and (<= 0 i1) (<= i1 2)) (and (and (= temp___164 i1) (and (= temp___162 result__) (and (and (and (= (to_rep1 o) (to_rep (select input_array i1))) (= o1 (store result__ i1 o))) (and (= (mk_map__ref1 result1) (mk_map__ref1 result__)) (= result__2 o1))) (and (forall ((k1 Int)) (=> (and (<= 0 k1) (<= k1 i2)) (= (to_rep1 (select result__3 k1)) (to_rep (select input_array k1))))) (and (and (and (forall ((temp___163 Int)) (=> (and (<= 0 temp___163) (<= temp___163 2)) (=> (< i2 temp___163) (= (select result__3 temp___163) (select temp___162 temp___163))))) (=> (<= 0 2) (in_range5 i2))) (and (<= 0 i2) (<= i2 2))) (= i2 2)))))) (and (and (= i2 i6) (= result__3 result__7)) (and (= i7 i2) (= result__8 result__3))))))
(assert (=> (and (<= 0 i1) (<= i1 2)) (= (mk_int__ref i8) (mk_int__ref i6))))
(assert (=> (and (<= 0 i1) (<= i1 2)) (= (mk_map__ref1 result__9) (mk_map__ref1 result__7))))
(assert (=> (and (<= 0 i1) (<= i1 2)) (= i9 i7)))
(assert (=> (and (<= 0 i1) (<= i1 2)) (= result__10 result__8)))
(assert (=> (not (and (<= 0 i1) (<= i1 2))) (= i1 i8)))
(assert (=> (not (and (<= 0 i1) (<= i1 2))) (= (mk_map__ref1 result__9) (mk_map__ref1 result__))))
(assert (=> (not (and (<= 0 i1) (<= i1 2))) (= i9 i1)))
(assert (=> (not (and (<= 0 i1) (<= i1 2))) (= result__10 result__1)))
(assert (= cast_array__cast__result1 cast_array__cast__result2))
(assert (= cast_array__cast__result3 cast_array__cast__result1))
(assert (= result4 cast_array__cast__result))
(assert (= cast_array__cast__result1 result__9))
(assert (= (mk_map__ref1 cast_array__cast__result4) (mk_map__ref1 cast_array__cast__result2)))
(assert (= i10 i8))
(assert (= result__11 result__9))
(assert (= cast_array__cast__result5 cast_array__cast__result3))
(assert (= i11 i9))
(assert (= result__12 result__10))
(assert (= result5 cast_array__cast__result4))
(declare-const k1 Int)
(assert (<= 0 k1))
(assert (<= k1 2))
(assert (not (= (to_rep1 (select cast_array__cast__result4 k1)) (to_rep (select input_array k1)))))
(check-sat)
(exit)
