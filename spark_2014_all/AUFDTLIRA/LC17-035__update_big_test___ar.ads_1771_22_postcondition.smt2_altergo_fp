(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type it1

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type et2

predicate in_range3(x: int) = ((1 <= x) and (x <= 25))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : et2, et2 -> bool

logic dummy2 : et2

type et2__ref = { et2__content : et2
}

function et2__ref___projection(a: et2__ref) : et2 = (a).et2__content

logic to_rep1 : et2 -> int

logic of_rep1 : int -> et2

axiom inversion_axiom1 :
  (forall x:et2 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:et2 [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type enum1t

predicate in_range4(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : enum1t, enum1t -> bool

logic dummy3 : enum1t

type enum1t__ref = { enum1t__content : enum1t
}

function enum1t__ref___projection(a: enum1t__ref) : enum1t =
  (a).enum1t__content

logic to_rep2 : enum1t -> int

logic of_rep2 : int -> enum1t

axiom inversion_axiom2 :
  (forall x:enum1t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:enum1t [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__ar__rec1t__f1 : et1; rec__ar__rec1t__g1 : et2
}

function us_split_fields_F1__projection(a: us_split_fields) : et1 =
  (a).rec__ar__rec1t__f1

function us_split_fields_G1__projection(a: us_split_fields) : et2 =
  (a).rec__ar__rec1t__g1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__ar__rec1t__f1) = to_rep(((b).us_split_fields1).rec__ar__rec1t__f1)) and
  (to_rep1(((a).us_split_fields1).rec__ar__rec1t__g1) = to_rep1(((b).us_split_fields1).rec__ar__rec1t__g1))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__ar__rec1t__f1) = to_rep(((b).us_split_fields1).rec__ar__rec1t__f1)) and
  (to_rep1(((a).us_split_fields1).rec__ar__rec1t__g1) = to_rep1(((b).us_split_fields1).rec__ar__rec1t__g1)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:et1. forall a1:et2. (0 <= object__size({ us_split_fields1 = {
  rec__ar__rec1t__f1 = a; rec__ar__rec1t__g1 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:et1. forall a1:et2. (0 <= object__alignment({ us_split_fields1 =
  { rec__ar__rec1t__f1 = a; rec__ar__rec1t__g1 = a1 } })))

logic ar__rec1t__f1__first__bit : int

logic ar__rec1t__f1__last__bit : int

logic ar__rec1t__f1__position : int

axiom ar__rec1t__f1__first__bit_axiom : (0 <= ar__rec1t__f1__first__bit)

axiom ar__rec1t__f1__last__bit_axiom :
  (ar__rec1t__f1__first__bit <  ar__rec1t__f1__last__bit)

axiom ar__rec1t__f1__position_axiom : (0 <= ar__rec1t__f1__position)

logic ar__rec1t__g1__first__bit : int

logic ar__rec1t__g1__last__bit : int

logic ar__rec1t__g1__position : int

axiom ar__rec1t__g1__first__bit_axiom : (0 <= ar__rec1t__g1__first__bit)

axiom ar__rec1t__g1__last__bit_axiom :
  (ar__rec1t__g1__first__bit <  ar__rec1t__g1__last__bit)

axiom ar__rec1t__g1__position_axiom : (0 <= ar__rec1t__g1__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : et1

logic dummy5 : et2

type rec1t__ref = { rec1t__content : us_rep
}

function rec1t__ref___projection(a: rec1t__ref) : us_rep = (a).rec1t__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_158:int. ((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and (bool_eq6((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true)) or
  (not ((a__first <= temp___idx_158) and (temp___idx_158 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq6((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq6((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true)))))))

logic dummy6 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq5 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__ar__rofaofr1__a1 : (int,us_rep) farray;
rec__ar__rofaofr1__b1 : bool; rec__ar__rofaofr1__c1 : enum1t
}

function us_split_fields_A1__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__ar__rofaofr1__a1

function us_split_fields_B1__projection(a: us_split_fields2) : bool =
  (a).rec__ar__rofaofr1__b1

function us_split_fields_C1__projection(a: us_split_fields2) : enum1t =
  (a).rec__ar__rofaofr1__c1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___10__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  (((((bool_eq7(((a).us_split_fields3).rec__ar__rofaofr1__a1, 1, 10,
  ((b).us_split_fields3).rec__ar__rofaofr1__a1, 1, 10) = true) and
  (((a).us_split_fields3).rec__ar__rofaofr1__b1 = ((b).us_split_fields3).rec__ar__rofaofr1__b1)) and
  (to_rep2(((a).us_split_fields3).rec__ar__rofaofr1__c1) = to_rep2(((b).us_split_fields3).rec__ar__rofaofr1__c1))) ->
  (bool_eq8(a, b) = true)) and
  ((not (((bool_eq7(((a).us_split_fields3).rec__ar__rofaofr1__a1, 1, 10,
  ((b).us_split_fields3).rec__ar__rofaofr1__a1, 1, 10) = true) and
  (((a).us_split_fields3).rec__ar__rofaofr1__b1 = ((b).us_split_fields3).rec__ar__rofaofr1__b1)) and
  (to_rep2(((a).us_split_fields3).rec__ar__rofaofr1__c1) = to_rep2(((b).us_split_fields3).rec__ar__rofaofr1__c1)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,us_rep) farray. forall a1:bool. forall a2:enum1t.
  (0 <= object__size2({ us_split_fields3 = { rec__ar__rofaofr1__a1 = a;
  rec__ar__rofaofr1__b1 = a1; rec__ar__rofaofr1__c1 = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,us_rep) farray. forall a1:bool. forall a2:enum1t.
  (0 <= object__alignment2({ us_split_fields3 = { rec__ar__rofaofr1__a1 = a;
  rec__ar__rofaofr1__b1 = a1; rec__ar__rofaofr1__c1 = a2 } })))

logic ar__rofaofr1__a1__first__bit : int

logic ar__rofaofr1__a1__last__bit : int

logic ar__rofaofr1__a1__position : int

axiom ar__rofaofr1__a1__first__bit_axiom :
  (0 <= ar__rofaofr1__a1__first__bit)

axiom ar__rofaofr1__a1__last__bit_axiom :
  (ar__rofaofr1__a1__first__bit <  ar__rofaofr1__a1__last__bit)

axiom ar__rofaofr1__a1__position_axiom : (0 <= ar__rofaofr1__a1__position)

logic ar__rofaofr1__b1__first__bit : int

logic ar__rofaofr1__b1__last__bit : int

logic ar__rofaofr1__b1__position : int

axiom ar__rofaofr1__b1__first__bit_axiom :
  (0 <= ar__rofaofr1__b1__first__bit)

axiom ar__rofaofr1__b1__last__bit_axiom :
  (ar__rofaofr1__b1__first__bit <  ar__rofaofr1__b1__last__bit)

axiom ar__rofaofr1__b1__position_axiom : (0 <= ar__rofaofr1__b1__position)

logic ar__rofaofr1__c1__first__bit : int

logic ar__rofaofr1__c1__last__bit : int

logic ar__rofaofr1__c1__position : int

axiom ar__rofaofr1__c1__first__bit_axiom :
  (0 <= ar__rofaofr1__c1__first__bit)

axiom ar__rofaofr1__c1__last__bit_axiom :
  (ar__rofaofr1__c1__first__bit <  ar__rofaofr1__c1__last__bit)

axiom ar__rofaofr1__c1__position_axiom : (0 <= ar__rofaofr1__c1__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy7 : (int,us_rep) farray

logic dummy8 : bool

logic dummy9 : enum1t

type rofaofr1__ref = { rofaofr1__content : us_rep1
}

function rofaofr1__ref___projection(a: rofaofr1__ref) : us_rep1 =
  (a).rofaofr1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "ar.ads", line 106, characters 0-0 *)
goal WP_parameter_def :
  (forall r__split_fields:(int,us_rep) farray. forall r__split_fields1:bool.
  forall r__split_fields2:enum1t. forall o:et1. forall o1:et1. forall o2:et2.
  forall o3:et1. forall o4:et2. forall o5:(int,us_rep) farray.
  forall o6:(int,us_rep) farray. forall o7:bool. forall o8:enum1t.
  forall temp___9351:(int,us_rep) farray. forall temp___93511:bool.
  forall temp___93512:enum1t. forall result:(int,us_rep) farray.
  forall result1:bool. forall result2:enum1t.
  forall r__split_fields3:(int,us_rep) farray. forall r__split_fields4:bool.
  forall r__split_fields5:enum1t.
  forall r__split_fields6:(int,us_rep) farray. forall r__split_fields7:bool.
  forall r__split_fields8:enum1t.
  forall r__split_fields9:(int,us_rep) farray. forall r__split_fields10:bool.
  forall r__split_fields11:enum1t. ((in_range1(i) and (in_range2(e) and
  ((((((((to_rep(o) = e) and ((o = o1) and
  ((((r__split_fields[i])).us_split_fields1).rec__ar__rec1t__g1 = o2))) and
  ((o3 = o1) and (o4 = o2))) and (o5 = (r__split_fields[i <- {
  us_split_fields1 = { rec__ar__rec1t__f1 = o3; rec__ar__rec1t__g1 = o4 }
  }]))) and ((o5 = o6) and ((r__split_fields1 = o7) and
  (r__split_fields2 = o8)))) and ((temp___9351 = o6) and
  ((temp___93511 = o7) and (temp___93512 = o8)))) and
  (((result = r__split_fields) and ((result1 = r__split_fields1) and
  (result2 = r__split_fields2))) and ((temp___9351 = r__split_fields3) and
  ((temp___93511 = r__split_fields4) and
  (temp___93512 = r__split_fields5))))) and
  (((r__split_fields6 = r__split_fields3) and
  ((r__split_fields7 = r__split_fields4) and
  (r__split_fields8 = r__split_fields5))) and
  ((r__split_fields9 = r__split_fields3) and
  ((r__split_fields10 = r__split_fields4) and
  (r__split_fields11 = r__split_fields5))))))) ->
  (forall n:int. (((1 <= n) and (n <= 10)) -> ((not (n = i)) ->
  (bool_eq6((r__split_fields6[n]), (r__split_fields[n])) = true))))))
