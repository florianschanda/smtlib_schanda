(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort tTmy_s1SP1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tTmy_s1SP1 tTmy_s1SP1) Bool)
(declare-const dummy1 tTmy_s1SP1)
(declare-datatypes () ((tTmy_s1SP1__ref (mk_tTmy_s1SP1__ref (tTmy_s1SP1__content tTmy_s1SP1)))))
(define-fun tTmy_s1SP1__ref___5__projection ((a tTmy_s1SP1__ref)) tTmy_s1SP1 (tTmy_s1SP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort tTmy_s2SP1 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 2 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (tTmy_s2SP1 tTmy_s2SP1) Bool)
(declare-const dummy2 tTmy_s2SP1)
(declare-datatypes () ((tTmy_s2SP1__ref (mk_tTmy_s2SP1__ref (tTmy_s2SP1__content tTmy_s2SP1)))))
(define-fun tTmy_s2SP1__ref___5__projection ((a tTmy_s2SP1__ref)) tTmy_s2SP1 (tTmy_s2SP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tTmy_s1SP11 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tTmy_s1SP11 tTmy_s1SP11) Bool)
(declare-const dummy3 tTmy_s1SP11)
(declare-datatypes () ((tTmy_s1SP1__ref1 (mk_tTmy_s1SP1__ref1 (tTmy_s1SP1__content1 tTmy_s1SP11)))))
(define-fun tTmy_s1SP1__ref___6__projection ((a tTmy_s1SP1__ref1)) tTmy_s1SP11 (tTmy_s1SP1__content1 a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort tTmy_s2SP11 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tTmy_s2SP11 tTmy_s2SP11) Bool)
(declare-const dummy4 tTmy_s2SP11)
(declare-datatypes () ((tTmy_s2SP1__ref1 (mk_tTmy_s2SP1__ref1 (tTmy_s2SP1__content1 tTmy_s2SP11)))))
(define-fun tTmy_s2SP1__ref___6__projection ((a tTmy_s2SP1__ref1)) tTmy_s2SP11 (tTmy_s2SP1__content1 a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort tTmy_s1SP12 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (tTmy_s1SP12 tTmy_s1SP12) Bool)
(declare-const dummy5 tTmy_s1SP12)
(declare-datatypes () ((tTmy_s1SP1__ref2 (mk_tTmy_s1SP1__ref2 (tTmy_s1SP1__content2 tTmy_s1SP12)))))
(define-fun tTmy_s1SP1__ref___7__projection ((a tTmy_s1SP1__ref2)) tTmy_s1SP12 (tTmy_s1SP1__content2 a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort tTmy_s2SP12 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 2 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tTmy_s2SP12 tTmy_s2SP12) Bool)
(declare-const dummy6 tTmy_s2SP12)
(declare-datatypes () ((tTmy_s2SP1__ref2 (mk_tTmy_s2SP1__ref2 (tTmy_s2SP1__content2 tTmy_s2SP12)))))
(define-fun tTmy_s2SP1__ref___7__projection ((a tTmy_s2SP1__ref2)) tTmy_s2SP12 (tTmy_s2SP1__content2 a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort tTmy_s1SP13 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (tTmy_s1SP13 tTmy_s1SP13) Bool)
(declare-const dummy7 tTmy_s1SP13)
(declare-datatypes () ((tTmy_s1SP1__ref3 (mk_tTmy_s1SP1__ref3 (tTmy_s1SP1__content3 tTmy_s1SP13)))))
(define-fun tTmy_s1SP1__ref___8__projection ((a tTmy_s1SP1__ref3)) tTmy_s1SP13 (tTmy_s1SP1__content3 a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-sort tTmy_s2SP13 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 2 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (tTmy_s2SP13 tTmy_s2SP13) Bool)
(declare-const dummy8 tTmy_s2SP13)
(declare-datatypes () ((tTmy_s2SP1__ref3 (mk_tTmy_s2SP1__ref3 (tTmy_s2SP1__content3 tTmy_s2SP13)))))
(define-fun tTmy_s2SP1__ref___8__projection ((a tTmy_s2SP1__ref3)) tTmy_s2SP13 (tTmy_s2SP1__content3 a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun p__B19b__my_s1__aggregate_def (Int Int Int) (Array Int integer))
(declare-fun p__B22b__my_s1__aggregate_def (Int Int Int) (Array Int integer))
(declare-fun p__B25b__my_s1__aggregate_def (Int Int Int) (Array Int integer))
(declare-fun p__B28b__my_s1__aggregate_def (Int Int Int) (Array Int integer))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(assert (forall ((temp___364 Int) (temp___365 Int) (temp___366 Int)) (let ((temp___363 (p__B19b__my_s1__aggregate_def temp___364 temp___365 temp___366))) (=> (and (and (dynamic_invariant temp___364 true true true true) (dynamic_invariant temp___365 true true true true)) (dynamic_invariant temp___366 true true true true)) (and (and (= (to_rep (select temp___363 1)) temp___364) (= (to_rep (select temp___363 2)) temp___365)) (= (to_rep (select temp___363 3)) temp___366))))))
(assert (forall ((temp___369 Int) (temp___370 Int) (temp___371 Int)) (let ((temp___368 (p__B22b__my_s1__aggregate_def temp___369 temp___370 temp___371))) (=> (and (and (dynamic_invariant temp___369 true true true true) (dynamic_invariant temp___370 true true true true)) (dynamic_invariant temp___371 true true true true)) (and (and (= (to_rep (select temp___368 1)) temp___369) (= (to_rep (select temp___368 2)) temp___370)) (= (to_rep (select temp___368 3)) temp___371))))))
(assert (forall ((temp___374 Int) (temp___375 Int) (temp___376 Int)) (let ((temp___373 (p__B25b__my_s1__aggregate_def temp___374 temp___375 temp___376))) (=> (and (and (dynamic_invariant temp___374 true true true true) (dynamic_invariant temp___375 true true true true)) (dynamic_invariant temp___376 true true true true)) (and (and (= (to_rep (select temp___373 1)) temp___374) (= (to_rep (select temp___373 2)) temp___375)) (= (to_rep (select temp___373 3)) temp___376))))))
(assert (forall ((temp___379 Int) (temp___380 Int) (temp___381 Int)) (let ((temp___378 (p__B28b__my_s1__aggregate_def temp___379 temp___380 temp___381))) (=> (and (and (dynamic_invariant temp___379 true true true true) (dynamic_invariant temp___380 true true true true)) (dynamic_invariant temp___381 true true true true)) (and (and (= (to_rep (select temp___378 1)) temp___379) (= (to_rep (select temp___378 2)) temp___380)) (= (to_rep (select temp___378 3)) temp___381))))))
(declare-const my_s1 (Array Int integer))
(declare-const my_s2 (Array Int integer))
(declare-const my_s11 (Array Int integer))
(declare-const my_s21 (Array Int integer))
(declare-const result (Array Int integer))
(declare-const my_s12 (Array Int integer))
(declare-const result1 (Array Int integer))
(declare-const my_s22 (Array Int integer))
(declare-const result2 (Array Int integer))
(declare-const my_s13 (Array Int integer))
(declare-const result3 (Array Int integer))
(declare-const my_s23 (Array Int integer))
(assert (= (mk_map__ref result) (mk_map__ref my_s1)))
(assert (= my_s12 (p__B19b__my_s1__aggregate_def 1 2 3)))
(assert (= (mk_map__ref result1) (mk_map__ref my_s2)))
(assert (= my_s22 (slide my_s12 1 2)))
(assert (= (to_rep (select my_s22 2)) 1))
(assert (= (mk_map__ref result2) (mk_map__ref my_s11)))
(assert (= my_s13 (p__B22b__my_s1__aggregate_def 1 2 3)))
(assert (= (mk_map__ref result3) (mk_map__ref my_s21)))
(assert (= my_s23 (slide my_s13 1 2)))
(assert (not (not (= (to_rep (select my_s23 2)) 1))))
(check-sat)
(exit)
