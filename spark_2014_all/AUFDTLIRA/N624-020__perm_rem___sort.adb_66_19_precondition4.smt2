(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 100))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range4 temp___expr_166)))
(define-fun dynamic_invariant3 ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property 1 100 (first1 temp___expr_173) (last1 temp___expr_173))))
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant3 a true true true true) (dynamic_invariant2 i true true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant3 result true false true true)))) :pattern ((remove a i))))))
(declare-fun remove_swap (us_t Int Int) Int)
(declare-fun remove_swap__function_guard (Int us_t Int Int) Bool)
(declare-sort true_bool 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (true_bool true_bool) Bool)
(declare-const dummy5 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant4 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 1)) (in_range5 temp___expr_159)))
(assert (forall ((a us_t)) (forall ((i1 Int) (i2 Int)) (! (=> (and (and (and (dynamic_invariant3 a true true true true) (dynamic_invariant2 i1 true true true true)) (dynamic_invariant2 i2 true true true true)) (and (= (invariant__ a) true) (and (and (<= (first1 a) i1) (<= i1 (last1 a))) (and (and (<= (first1 a) i2) (<= i2 (last1 a))) (< i1 i2))))) (let ((result (remove_swap a i1 i2))) (and (=> (= (distinct result 0) true) (= (let ((temp___185 (remove (remove a i2) i1))) (let ((temp___184 (remove (remove a i1) (- i2 1)))) (bool_eq (to_array temp___184) (first1 temp___184) (last1 temp___184) (to_array temp___185) (first1 temp___185) (last1 temp___185)))) true)) (dynamic_invariant4 result true false true true)))) :pattern ((remove_swap a i1 i2))))))
(declare-fun remove_eq (us_t us_t Int) Int)
(declare-fun remove_eq__function_guard (Int us_t us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (forall ((i Int)) (! (=> (and (and (and (dynamic_invariant3 a true true true true) (dynamic_invariant3 b true true true true)) (dynamic_invariant2 i true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (first1 a) i) (<= i (last1 a))) (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array b) (first1 b) (last1 b)) true))))) (let ((result (remove_eq a b i))) (and (=> (= (distinct result 0) true) (= (let ((temp___192 (remove b i))) (let ((temp___191 (remove a i))) (bool_eq (to_array temp___191) (first1 temp___191) (last1 temp___191) (to_array temp___192) (first1 temp___192) (last1 temp___192)))) true)) (dynamic_invariant4 result true false true true)))) :pattern ((remove_eq a b i))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-fun perm_reflexive (us_t us_t) Int)
(declare-fun perm_reflexive__function_guard (Int us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant3 a true true true true) (dynamic_invariant3 b true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array b) (first1 b) (last1 b)) true)))) (let ((result (perm_reflexive a b))) (and (=> (= (distinct result 0) true) (= (is_perm a b) true)) (dynamic_invariant4 result true false true true)))) :pattern ((perm_reflexive a b)))))
(declare-fun perm_transitive (us_t us_t us_t) Int)
(declare-fun perm_transitive__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant3 a true true true true) (dynamic_invariant3 b true true true true)) (dynamic_invariant3 c true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (invariant__ c) true) (and (= (is_perm a b) true) (= (is_perm b c) true)))))) (let ((result (perm_transitive a b c))) (and (=> (= (distinct result 0) true) (= (is_perm a c) true)) (dynamic_invariant4 result true false true true)))) :pattern ((perm_transitive a b c)))))
(declare-sort tarray_typeP1 0)
(declare-fun tarray_typeP1qtint (tarray_typeP1) Int)
(assert (forall ((i tarray_typeP1)) (and (<= 1 (tarray_typeP1qtint i)) (<= (tarray_typeP1qtint i) 100))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tarray_typeP1 tarray_typeP1) Bool)
(declare-const dummy6 tarray_typeP1)
(declare-datatypes () ((tarray_typeP1__ref (mk_tarray_typeP1__ref (tarray_typeP1__content tarray_typeP1)))))
(define-fun tarray_typeP1__ref___projection ((a tarray_typeP1__ref)) tarray_typeP1 (tarray_typeP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const init (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(declare-const values (Array Int natural))
(declare-const temp Int)
(declare-const interm (Array Int natural))
(declare-const hr Int)
(declare-const hr1 Int)
(declare-const o Int)
(declare-const o1 natural)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 natural)
(declare-const o5 Int)
(declare-const o6 natural)
(declare-const o7 Int)
(declare-const o8 (Array Int natural))
(declare-const o9 Int)
(declare-const o10 natural)
(declare-const o11 Int)
(declare-const o12 (Array Int natural))
(declare-const o13 Int)
(declare-const o14 us_t)
(declare-const o15 Int)
(declare-const o16 us_t)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const result int__ref)
(declare-const temp1 Int)
(declare-const result1 map__ref)
(declare-const values1 (Array Int natural))
(declare-const result2 map__ref)
(declare-const interm1 (Array Int natural))
(declare-const result3 map__ref)
(declare-const values2 (Array Int natural))
(declare-const result4 int__ref)
(declare-const hr2 Int)
(assert (in_range3 x))
(assert (in_range3 y))
(assert (and (and (<= 1 x) (<= x 100)) (and (and (<= 1 y) (<= y 100)) (not (= x y)))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))
(assert (= values init))
(assert (=> (<= 1 1) (in_range5 hr)))
(assert (and (<= 1 x) (<= x 100)))
(assert (= o x))
(assert (= o1 (select values o)))
(assert (= o2 (to_rep o1)))
(assert (= result (mk_int__ref temp)))
(assert (= temp1 o2))
(assert (and (<= 1 y) (<= y 100)))
(assert (= o3 y))
(assert (= o4 (select values o3)))
(assert (= o5 (to_rep o4)))
(assert (= (to_rep o6) o5))
(assert (and (<= 1 x) (<= x 100)))
(assert (= o7 x))
(assert (= o8 (store values o7 o6)))
(assert (= result1 (mk_map__ref values)))
(assert (= values1 o8))
(assert (= result2 (mk_map__ref interm)))
(assert (= interm1 values1))
(assert (= (let ((temp___241 (remove (mk___t interm1 (mk 1 100)) x))) (let ((temp___240 (remove (mk___t init (mk 1 100)) x))) (bool_eq (elts temp___240) (to_rep1 (first (rt temp___240))) (to_rep1 (last (rt temp___240))) (elts temp___241) (to_rep1 (first (rt temp___241))) (to_rep1 (last (rt temp___241)))))) true))
(assert (and (= o9 temp1) (in_range2 temp1)))
(assert (= (to_rep o10) o9))
(assert (and (<= 1 y) (<= y 100)))
(assert (= o11 y))
(assert (= o12 (store values1 o11 o10)))
(assert (= result3 (mk_map__ref values1)))
(assert (= values2 o12))
(assert (= (let ((temp___245 (remove (mk___t values2 (mk 1 100)) y))) (let ((temp___244 (remove (mk___t interm1 (mk 1 100)) y))) (bool_eq (elts temp___244) (to_rep1 (first (rt temp___244))) (to_rep1 (last (rt temp___244))) (elts temp___245) (to_rep1 (first (rt temp___245))) (to_rep1 (last (rt temp___245)))))) true))
(assert (not (< y x)))
(assert (=> (<= 1 1) (in_range5 hr1)))
(assert (and (= o17 x) (in_range4 x)))
(assert (and (= o15 y) (in_range4 y)))
(assert (and (= o16 (remove (mk___t values2 (mk 1 100)) o15)) (and (dynamic_invariant3 o16 true false true true) (and (= (invariant__ o16) true) (and (= (to_rep1 (last (rt o16))) (- (to_rep1 (last (mk 1 100))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- o15 1))) (= (to_rep (select values2 k)) (to_rep (select (elts o16) k))))) (and (forall ((k Int)) (=> (and (<= (+ o15 1) k) (<= k (to_rep1 (last (mk 1 100))))) (= (to_rep (select values2 k)) (to_rep (select (elts o16) (- k 1)))))) (forall ((k Int)) (=> (and (<= o15 k) (<= k (- (to_rep1 (last (mk 1 100))) 1))) (= (to_rep (select values2 (+ k 1))) (to_rep (select (elts o16) k))))))))))))
(assert (and (= o13 y) (in_range4 y)))
(assert (and (= o14 (remove (mk___t interm1 (mk 1 100)) o13)) (and (dynamic_invariant3 o14 true false true true) (and (= (invariant__ o14) true) (and (= (to_rep1 (last (rt o14))) (- (to_rep1 (last (mk 1 100))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- o13 1))) (= (to_rep (select interm1 k)) (to_rep (select (elts o14) k))))) (and (forall ((k Int)) (=> (and (<= (+ o13 1) k) (<= k (to_rep1 (last (mk 1 100))))) (= (to_rep (select interm1 k)) (to_rep (select (elts o14) (- k 1)))))) (forall ((k Int)) (=> (and (<= o13 k) (<= k (- (to_rep1 (last (mk 1 100))) 1))) (= (to_rep (select interm1 (+ k 1))) (to_rep (select (elts o14) k))))))))))))
(assert (and (= o18 (remove_eq o14 o16 o17)) (and (in_range5 o18) (=> (= (distinct o18 0) true) (= (let ((temp___188 (remove o16 o17))) (let ((temp___187 (remove o14 o17))) (bool_eq (elts temp___187) (to_rep1 (first (rt temp___187))) (to_rep1 (last (rt temp___187))) (elts temp___188) (to_rep1 (first (rt temp___188))) (to_rep1 (last (rt temp___188)))))) true)))))
(assert (= result4 (mk_int__ref hr1)))
(assert (= hr2 o18))
(assert (and (= o20 y) (in_range4 y)))
(assert (and (= o19 x) (in_range4 x)))
(assert (not (<= o19 (to_rep1 (last (mk 1 100))))))
(check-sat)
(exit)
