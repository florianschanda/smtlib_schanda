(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__frame_condition__cell__value natural) (rec__frame_condition__cell__max_left natural) (rec__frame_condition__cell__max_right natural)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) natural (rec__frame_condition__cell__value a))
(define-fun us_split_fields_Max_Left__projection ((a us_split_fields)) natural (rec__frame_condition__cell__max_left a))
(define-fun us_split_fields_Max_Right__projection ((a us_split_fields)) natural (rec__frame_condition__cell__max_right a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__frame_condition__cell__value (us_split_fields1 a))) (to_rep (rec__frame_condition__cell__value (us_split_fields1 b)))) (= (to_rep (rec__frame_condition__cell__max_left (us_split_fields1 a))) (to_rep (rec__frame_condition__cell__max_left (us_split_fields1 b))))) (= (to_rep (rec__frame_condition__cell__max_right (us_split_fields1 a))) (to_rep (rec__frame_condition__cell__max_right (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const frame_condition__cell__value__first__bit Int)
(declare-const frame_condition__cell__value__last__bit Int)
(declare-const frame_condition__cell__value__position Int)
(assert (<= 0 frame_condition__cell__value__first__bit))
(assert (< frame_condition__cell__value__first__bit frame_condition__cell__value__last__bit))
(assert (<= 0 frame_condition__cell__value__position))
(declare-const frame_condition__cell__max_left__first__bit Int)
(declare-const frame_condition__cell__max_left__last__bit Int)
(declare-const frame_condition__cell__max_left__position Int)
(assert (<= 0 frame_condition__cell__max_left__first__bit))
(assert (< frame_condition__cell__max_left__first__bit frame_condition__cell__max_left__last__bit))
(assert (<= 0 frame_condition__cell__max_left__position))
(declare-const frame_condition__cell__max_right__first__bit Int)
(declare-const frame_condition__cell__max_right__last__bit Int)
(declare-const frame_condition__cell__max_right__position Int)
(assert (<= 0 frame_condition__cell__max_right__first__bit))
(assert (< frame_condition__cell__max_right__first__bit frame_condition__cell__max_right__last__bit))
(assert (<= 0 frame_condition__cell__max_right__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep Int) (Array Int us_rep))
(assert (forall ((v us_rep)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int us_rep)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))
(define-fun of_array ((a (Array Int us_rep)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((cell_array__ref (mk_cell_array__ref (cell_array__content us_t)))))
(define-fun cell_array__ref___projection ((a cell_array__ref)) us_t (cell_array__content a))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant3 ((temp___expr_145 us_t) (temp___is_init_142 Bool) (temp___skip_constant_143 Bool) (temp___do_toplevel_144 Bool)) Bool (=> (not (= temp___skip_constant_143 true)) (dynamic_property 1 2147483647 (first1 temp___expr_145) (last1 temp___expr_145))))
(declare-const a (Array Int us_rep))
(declare-const k Int)
(declare-const max Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___228 Int)
(declare-const temp___226 (Array Int us_rep))
(declare-const temp___224 Int)
(declare-const o2 Int)
(declare-const o3 natural)
(declare-const o4 natural)
(declare-const o5 natural)
(declare-const o6 natural)
(declare-const o7 natural)
(declare-const o8 natural)
(declare-const o9 natural)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 natural)
(declare-const o13 natural)
(declare-const o14 natural)
(declare-const o15 natural)
(declare-const o16 natural)
(declare-const o17 natural)
(declare-const o18 natural)
(declare-const o19 Int)
(declare-const o20 natural)
(declare-const o21 natural)
(declare-const o22 natural)
(declare-const o23 natural)
(declare-const o24 natural)
(declare-const o25 natural)
(declare-const o26 natural)
(declare-const o27 Int)
(declare-const o28 (Array Int us_rep))
(declare-const i Int)
(declare-const i1 Int)
(declare-const j Int)
(declare-const o29 Int)
(declare-const o30 natural)
(declare-const o31 natural)
(declare-const o32 natural)
(declare-const o33 natural)
(declare-const o34 natural)
(declare-const o35 natural)
(declare-const o36 natural)
(declare-const o37 Int)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 natural)
(declare-const o41 natural)
(declare-const o42 natural)
(declare-const o43 natural)
(declare-const o44 natural)
(declare-const o45 natural)
(declare-const o46 natural)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 natural)
(declare-const o50 natural)
(declare-const o51 natural)
(declare-const o52 natural)
(declare-const o53 natural)
(declare-const o54 natural)
(declare-const o55 natural)
(declare-const o56 Int)
(declare-const o57 natural)
(declare-const o58 us_split_fields)
(declare-const o59 us_rep)
(declare-const o60 Int)
(declare-const o61 (Array Int us_rep))
(declare-const o62 Int)
(declare-const temp___234 Int)
(declare-const temp___232 (Array Int us_rep))
(declare-const temp___230 Int)
(declare-const o63 Int)
(declare-const o64 us_rep)
(declare-const o65 us_split_fields)
(declare-const o66 natural)
(declare-const o67 Int)
(declare-const o68 Int)
(declare-const o69 us_rep)
(declare-const o70 us_split_fields)
(declare-const o71 natural)
(declare-const o72 Int)
(declare-const o73 natural)
(declare-const o74 us_split_fields)
(declare-const o75 us_rep)
(declare-const o76 Int)
(declare-const o77 (Array Int us_rep))
(declare-const i2 Int)
(declare-const i3 Int)
(declare-const j1 Int)
(declare-const o78 Int)
(declare-const o79 us_rep)
(declare-const o80 us_split_fields)
(declare-const o81 natural)
(declare-const o82 Int)
(declare-const o83 Int)
(declare-const o84 Int)
(declare-const o85 us_rep)
(declare-const o86 us_split_fields)
(declare-const o87 natural)
(declare-const o88 Int)
(declare-const o89 Int)
(declare-const o90 us_rep)
(declare-const o91 us_split_fields)
(declare-const o92 natural)
(declare-const o93 Int)
(declare-const o94 natural)
(declare-const o95 us_split_fields)
(declare-const o96 us_rep)
(declare-const o97 Int)
(declare-const o98 (Array Int us_rep))
(declare-const i4 Int)
(declare-const o99 Int)
(declare-const o100 us_rep)
(declare-const o101 us_split_fields)
(declare-const o102 natural)
(declare-const o103 Int)
(declare-const j2 Int)
(declare-const o104 Int)
(declare-const o105 us_rep)
(declare-const o106 us_split_fields)
(declare-const o107 natural)
(declare-const o108 Int)
(declare-const o109 Int)
(declare-const o110 us_rep)
(declare-const o111 us_split_fields)
(declare-const o112 natural)
(declare-const o113 Int)
(declare-const o114 us_rep)
(declare-const o115 us_split_fields)
(declare-const o116 natural)
(declare-const o117 Int)
(declare-const o118 Int)
(declare-const o119 Bool)
(declare-const o120 Bool)
(declare-const a1 (Array Int us_rep))
(declare-const k1 Int)
(declare-const max1 Int)
(declare-const result Bool)
(declare-const result1 int__ref)
(declare-const k2 Int)
(declare-const result2 int__ref)
(declare-const max2 Int)
(declare-const result3 Bool)
(declare-const result4 int__ref)
(declare-const max3 Int)
(declare-const result5 map__ref)
(declare-const a2 (Array Int us_rep))
(declare-const a3 (Array Int us_rep))
(declare-const k3 Int)
(declare-const max4 Int)
(declare-const result6 int__ref)
(declare-const k4 Int)
(declare-const result7 Bool)
(declare-const result8 int__ref)
(declare-const max5 Int)
(declare-const result9 map__ref)
(declare-const a4 (Array Int us_rep))
(declare-const k5 int__ref)
(declare-const k6 Int)
(declare-const a5 map__ref)
(declare-const k7 int__ref)
(declare-const max6 int__ref)
(declare-const a6 (Array Int us_rep))
(declare-const k8 Int)
(declare-const max7 Int)
(declare-const a7 map__ref)
(declare-const k9 int__ref)
(declare-const max8 int__ref)
(declare-const a8 (Array Int us_rep))
(declare-const k10 Int)
(declare-const max9 Int)
(declare-const result10 int__ref)
(declare-const k11 Int)
(declare-const result11 int__ref)
(declare-const max10 Int)
(declare-const result12 Bool)
(declare-const result13 int__ref)
(declare-const max11 Int)
(declare-const max12 int__ref)
(declare-const max13 Int)
(declare-const result14 map__ref)
(declare-const a9 (Array Int us_rep))
(declare-const a10 (Array Int us_rep))
(declare-const k12 Int)
(declare-const max14 Int)
(declare-const result15 int__ref)
(declare-const k13 Int)
(declare-const result16 Bool)
(declare-const result17 int__ref)
(declare-const max15 Int)
(declare-const max16 int__ref)
(declare-const max17 Int)
(declare-const result18 map__ref)
(declare-const a11 (Array Int us_rep))
(declare-const k14 int__ref)
(declare-const k15 Int)
(declare-const a12 map__ref)
(declare-const k16 int__ref)
(declare-const max18 int__ref)
(declare-const a13 (Array Int us_rep))
(declare-const k17 Int)
(declare-const max19 Int)
(declare-const a14 map__ref)
(declare-const k18 int__ref)
(declare-const max20 int__ref)
(declare-const a15 (Array Int us_rep))
(declare-const k19 Int)
(declare-const max21 Int)
(declare-const a16 map__ref)
(declare-const k20 int__ref)
(declare-const max22 int__ref)
(declare-const a17 (Array Int us_rep))
(declare-const k21 Int)
(declare-const max23 Int)
(declare-const a18 map__ref)
(declare-const k22 int__ref)
(declare-const max24 int__ref)
(declare-const a19 (Array Int us_rep))
(declare-const k23 Int)
(declare-const max25 Int)
(declare-const a20 map__ref)
(declare-const k24 int__ref)
(declare-const max26 int__ref)
(declare-const a21 (Array Int us_rep))
(declare-const k25 Int)
(declare-const max27 Int)
(assert (dynamic_property 1 2147483647 (to_rep1 a__first) (to_rep1 a__last)))
(assert (=> (<= 1 2147483647) (in_range3 k)))
(assert (=> (<= 0 2147483647) (in_range2 max)))
(assert (=> (<= (to_rep1 a__first) (to_rep1 a__last)) (= o (+ (- (to_rep1 a__last) (to_rep1 a__first)) 1))))
(assert (=> (not (<= (to_rep1 a__first) (to_rep1 a__last))) (= o 0)))
(assert (= result (ite (= o 0) true false)))
(assert (not (= result true)))
(assert (not (in_range3 (to_rep1 a__first))))
(check-sat)
(exit)
