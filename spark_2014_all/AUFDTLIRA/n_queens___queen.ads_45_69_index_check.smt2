(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 8)) (in_range1 temp___expr_136)))
(declare-fun to_rep (index) Int)
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int index))))))
(declare-fun slide ((Array Int index) Int Int) (Array Int index))
(assert (forall ((a (Array Int index))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int index))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int index) Int Int (Array Int index) Int Int) (Array Int index))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (index Int) (Array Int index))
(assert (forall ((v index)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int index)) (a__first Int) (a__last Int) (b (Array Int index)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int index) Int Int (Array Int index) Int Int) Int)
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const b (Array Int index))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c (Array Int index))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content integer)))))
(define-fun t6b__ref___projection ((a t6b__ref)) integer (t6b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content integer)))))
(define-fun t11b__ref___projection ((a t11b__ref)) integer (t11b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun queen__copy_until__r__aggregate_def (Int) (Array Int index))
(assert (forall ((temp___174 Int)) (forall ((temp___175 Int)) (= (select (queen__copy_until__r__aggregate_def temp___174) temp___175) (of_rep temp___174)))))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_15)))
(declare-const r (Array Int index))
(declare-const j Int)
(declare-const j1 Int)
(declare-const queen__copy_until__result (Array Int index))
(declare-const temp___178 Int)
(declare-const temp___176 (Array Int index))
(declare-const o index)
(declare-const o1 (Array Int index))
(declare-const temp___183 Int)
(declare-const temp___181 (Array Int index))
(declare-const o2 index)
(declare-const o3 (Array Int index))
(declare-const j2 Int)
(declare-const o4 Int)
(declare-const o5 index)
(declare-const o6 Int)
(declare-const result (Array Int index))
(declare-const r1 (Array Int index))
(declare-const result1 Int)
(declare-const j3 Int)
(declare-const r2 (Array Int index))
(declare-const j4 Int)
(declare-const result2 (Array Int index))
(declare-const r3 (Array Int index))
(declare-const r4 (Array Int index))
(declare-const j5 Int)
(declare-const r5 (Array Int index))
(declare-const j6 Int)
(declare-const r6 (Array Int index))
(declare-const j7 Int)
(declare-const r7 (Array Int index))
(declare-const j8 Int)
(declare-const result3 Int)
(declare-const j9 Int)
(declare-const r8 (Array Int index))
(declare-const j10 Int)
(declare-const result4 (Array Int index))
(declare-const r9 (Array Int index))
(declare-const r10 map__ref)
(declare-const j11 int__ref)
(declare-const r11 (Array Int index))
(declare-const j12 Int)
(declare-const r12 map__ref)
(declare-const j13 int__ref)
(declare-const r13 (Array Int index))
(declare-const j14 Int)
(declare-const result5 map__ref)
(declare-const queen__copy_until__result1 (Array Int index))
(declare-const queen__copy_until__result2 map__ref)
(declare-const queen__copy_until__result3 (Array Int index))
(declare-const r14 map__ref)
(declare-const j15 int__ref)
(declare-const j16 int__ref)
(declare-const queen__copy_until__result4 map__ref)
(declare-const r15 (Array Int index))
(declare-const j17 Int)
(declare-const j18 Int)
(declare-const queen__copy_until__result5 (Array Int index))
(define-fun j19 () int__ref (mk_int__ref j7))
(define-fun r16 () map__ref (mk_map__ref r6))
(assert (in_range1 i))
(assert (= (mk_map__ref result) (mk_map__ref r)))
(assert (= r1 (queen__copy_until__r__aggregate_def 1)))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j3 1))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= temp___178 j3)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= temp___176 r1)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (forall ((k Int)) (=> (and (<= 1 k) (<= k (- j4 1))) (= (to_rep (select r2 k)) (to_rep (select b k)))))))
(assert (=> (and (<= 1 j3) (<= j3 i)) (and (and (forall ((temp___177 Int)) (=> (and (<= 1 temp___177) (<= temp___177 8)) (=> (<= j4 temp___177) (= (select r2 temp___177) (select temp___176 temp___177))))) (=> (<= 1 i) (dynamic_property 1 i j4))) (and (<= 1 j4) (<= j4 i)))))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= (to_rep o) (to_rep (select b j4)))))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= o1 (store r2 j4 o))))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= r2 result2)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= r3 o1)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= j4 i)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= j4 j5)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= r3 r4)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= j6 j4)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= r5 r3)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= j19 (mk_int__ref j5))))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= r16 (mk_map__ref r4))))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= j8 j6)))
(assert (=> (and (<= 1 j3) (<= j3 i)) (= r7 r5)))
(assert (=> (not (and (<= 1 j3) (<= j3 i))) (= j3 j7)))
(assert (=> (not (and (<= 1 j3) (<= j3 i))) (= r1 r6)))
(assert (=> (not (and (<= 1 j3) (<= j3 i))) (= j8 j3)))
(assert (=> (not (and (<= 1 j3) (<= j3 i))) (= r7 r1)))
(assert (= (mk_int__ref result3) (mk_int__ref j1)))
(assert (= j9 (+ i 1)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= temp___183 j9)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= temp___181 r6)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (forall ((k Int)) (=> (and (<= 1 k) (<= k i)) (= (to_rep (select r8 k)) (to_rep (select b k)))))))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (and (and (forall ((temp___182 Int)) (=> (and (<= 1 temp___182) (<= temp___182 8)) (=> (<= j10 temp___182) (= (select r8 temp___182) (select temp___181 temp___182))))) (=> (<= (+ i 1) 8) (dynamic_property1 (+ i 1) 8 j10))) (and (<= (+ i 1) j10) (<= j10 8)))))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= (to_rep o2) (to_rep (select c j10)))))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= o3 (store r8 j10 o2))))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= r8 result4)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= r9 o3)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= j10 8)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= j11 (mk_int__ref j10))))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= r10 (mk_map__ref r9))))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= j12 j10)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= r11 r9)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= j13 j11)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= r12 r10)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= j14 j12)))
(assert (=> (and (<= (+ i 1) j9) (<= j9 8)) (= r13 r11)))
(assert (=> (not (and (<= (+ i 1) j9) (<= j9 8))) (= j13 (mk_int__ref j9))))
(assert (=> (not (and (<= (+ i 1) j9) (<= j9 8))) (= r12 r16)))
(assert (=> (not (and (<= (+ i 1) j9) (<= j9 8))) (= j14 j9)))
(assert (=> (not (and (<= (+ i 1) j9) (<= j9 8))) (= r13 r7)))
(assert (= queen__copy_until__result2 (mk_map__ref queen__copy_until__result1)))
(assert (= queen__copy_until__result3 queen__copy_until__result1))
(assert (= result5 (mk_map__ref queen__copy_until__result)))
(assert (= queen__copy_until__result1 (map__content r12)))
(assert (= queen__copy_until__result4 queen__copy_until__result2))
(assert (= j16 j13))
(assert (= j15 j19))
(assert (= r14 r12))
(assert (= queen__copy_until__result5 queen__copy_until__result3))
(assert (= j18 j14))
(assert (= j17 j8))
(assert (= r15 r13))
(assert (<= 1 j2))
(assert (<= j2 i))
(assert (and (<= 1 j2) (<= j2 8)))
(assert (= o4 j2))
(assert (= o5 (select b o4)))
(assert (= o6 (to_rep o5)))
(assert (not (<= 1 j2)))
(check-sat)
(exit)
