(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tindexB

predicate in_range1(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tindexB, tindexB -> bool

logic dummy : tindexB

type tindexB__ref = { tindexB__content : tindexB
}

function tindexB__ref___projection(a: tindexB__ref) : tindexB =
  (a).tindexB__content

type index

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : index -> int

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type element

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : element, element -> bool

logic dummy2 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

logic to_rep1 : element -> int

logic of_rep1 : int -> element

axiom inversion_axiom1 :
  (forall x:element [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:element [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,element) farray, int, int, (int,element) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,element) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))))))

type us_split_discrs = { rec__linear_search__search_result__found : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__linear_search__search_result__found

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__linear_search__search_result__at_index : index
}

function us_split_fields_At_Index__projection(a: us_split_fields) : index =
  (a).rec__linear_search__search_result__at_index

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate linear_search__search_result__at_index__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__linear_search__search_result__found) = 1)

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((((a).us_split_discrs1).rec__linear_search__search_result__found = ((b).us_split_discrs1).rec__linear_search__search_result__found) and
  (linear_search__search_result__at_index__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__linear_search__search_result__at_index) = to_rep(((b).us_split_fields1).rec__linear_search__search_result__at_index)))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__linear_search__search_result__found = ((b).us_split_discrs1).rec__linear_search__search_result__found) and
  (linear_search__search_result__at_index__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__linear_search__search_result__at_index) = to_rep(((b).us_split_fields1).rec__linear_search__search_result__at_index))))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:index. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = { rec__linear_search__search_result__found = a };
  us_split_fields1 = { rec__linear_search__search_result__at_index = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:index. forall a2:bool. (0 <= object__alignment({
  us_split_discrs1 = { rec__linear_search__search_result__found = a };
  us_split_fields1 = { rec__linear_search__search_result__at_index = a1 };
  attr__constrained = a2 })))

logic linear_search__search_result__found__first__bit : int

logic linear_search__search_result__found__last__bit : int

logic linear_search__search_result__found__position : int

axiom linear_search__search_result__found__first__bit_axiom :
  (0 <= linear_search__search_result__found__first__bit)

axiom linear_search__search_result__found__last__bit_axiom :
  (linear_search__search_result__found__first__bit <  linear_search__search_result__found__last__bit)

axiom linear_search__search_result__found__position_axiom :
  (0 <= linear_search__search_result__found__position)

logic linear_search__search_result__at_index__first__bit : int

logic linear_search__search_result__at_index__last__bit : int

logic linear_search__search_result__at_index__position : int

axiom linear_search__search_result__at_index__first__bit_axiom :
  (0 <= linear_search__search_result__at_index__first__bit)

axiom linear_search__search_result__at_index__last__bit_axiom :
  (linear_search__search_result__at_index__first__bit <  linear_search__search_result__at_index__last__bit)

axiom linear_search__search_result__at_index__position_axiom :
  (0 <= linear_search__search_result__at_index__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : bool

logic dummy4 : index

logic dummy5 : bool

type search_result__ref = { search_result__content : us_rep
}

function search_result__ref___projection(a: search_result__ref) : us_rep =
  (a).search_result__content

logic value_found_in_range : (int,element) farray, int, int, int -> bool

logic value_found_in_range__function_guard : bool, (int,element) farray, int,
  int, int -> prop

axiom value_found_in_range__post_axiom : true

axiom value_found_in_range__def_axiom :
  (forall a:(int,element) farray.
  (forall val__:int. forall low:int. forall up:int [value_found_in_range(a,
  val__, low, up)]. ((value_found_in_range(a, val__, low, up) = true) <->
  (exists j:int. (((low <= j) and (j <= up)) and (to_rep1((a[j])) = val__))))))

logic a : (int,element) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic res__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range4(rec__linear_search__search_result__found1: bool,
  a1: us_rep) =
  (rec__linear_search__search_result__found1 = ((a1).us_split_discrs1).rec__linear_search__search_result__found)

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a1:bool. forall a2:index. forall a3:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__linear_search__search_result__found = a1 };
  us_split_fields1 = { rec__linear_search__search_result__at_index = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a1:bool. forall a2:index. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__linear_search__search_result__found = a1 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = a2 }; attr__constrained = a3
  })))

logic linear_search__search_result__found__first__bit1 : int

logic linear_search__search_result__found__last__bit1 : int

logic linear_search__search_result__found__position1 : int

axiom linear_search__search_result__found__first__bit_axiom1 :
  (0 <= linear_search__search_result__found__first__bit1)

axiom linear_search__search_result__found__last__bit_axiom1 :
  (linear_search__search_result__found__first__bit1 <  linear_search__search_result__found__last__bit1)

axiom linear_search__search_result__found__position_axiom1 :
  (0 <= linear_search__search_result__found__position1)

logic linear_search__search_result__at_index__first__bit1 : int

logic linear_search__search_result__at_index__last__bit1 : int

logic linear_search__search_result__at_index__position1 : int

axiom linear_search__search_result__at_index__first__bit_axiom1 :
  (0 <= linear_search__search_result__at_index__first__bit1)

axiom linear_search__search_result__at_index__last__bit_axiom1 :
  (linear_search__search_result__at_index__first__bit1 <  linear_search__search_result__at_index__last__bit1)

axiom linear_search__search_result__at_index__position_axiom1 :
  (0 <= linear_search__search_result__at_index__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy6 : bool

logic dummy7 : index

logic dummy8 : bool

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref___projection(a1: t1b__ref) : us_rep = (a1).t1b__content

predicate in_range5(rec__linear_search__search_result__found1: bool,
  a1: us_rep) =
  (rec__linear_search__search_result__found1 = ((a1).us_split_discrs1).rec__linear_search__search_result__found)

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a1:bool. forall a2:index. forall a3:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__linear_search__search_result__found = a1 };
  us_split_fields1 = { rec__linear_search__search_result__at_index = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a1:bool. forall a2:index. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__linear_search__search_result__found = a1 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = a2 }; attr__constrained = a3
  })))

logic linear_search__search_result__found__first__bit2 : int

logic linear_search__search_result__found__last__bit2 : int

logic linear_search__search_result__found__position2 : int

axiom linear_search__search_result__found__first__bit_axiom2 :
  (0 <= linear_search__search_result__found__first__bit2)

axiom linear_search__search_result__found__last__bit_axiom2 :
  (linear_search__search_result__found__first__bit2 <  linear_search__search_result__found__last__bit2)

axiom linear_search__search_result__found__position_axiom2 :
  (0 <= linear_search__search_result__found__position2)

logic linear_search__search_result__at_index__first__bit2 : int

logic linear_search__search_result__at_index__last__bit2 : int

logic linear_search__search_result__at_index__position2 : int

axiom linear_search__search_result__at_index__first__bit_axiom2 :
  (0 <= linear_search__search_result__at_index__first__bit2)

axiom linear_search__search_result__at_index__last__bit_axiom2 :
  (linear_search__search_result__at_index__first__bit2 <  linear_search__search_result__at_index__last__bit2)

axiom linear_search__search_result__at_index__position_axiom2 :
  (0 <= linear_search__search_result__at_index__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy9 : bool

logic dummy10 : index

logic dummy11 : bool

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref___projection(a1: t3b__ref) : us_rep = (a1).t3b__content

 (* File "linear_search.ads", line 18, characters 0-0 *)
goal WP_parameter_def :
  (forall pos:int. forall res__split_fields:index.
  forall res__split_discrs:bool. forall linear_search__search__result:bool.
  forall linear_search__search__result1:index.
  forall linear_search__search__result2:bool. forall temp___207:bool.
  forall temp___2071:index. forall temp___2072:bool. forall temp___206:int.
  forall temp___208:int. forall o:int. forall o1:element. forall o2:int.
  forall o3:int. forall o4:index. forall o5:index. forall temp___203:bool.
  forall temp___2031:index. forall temp___2032:bool. forall usq_:bool.
  forall usq_1:index. forall usq_2:bool. forall temp___205:bool.
  forall temp___2051:index. forall temp___2052:bool. forall o6:int.
  forall o7:int. forall o8:element. forall o9:int. forall o10:int.
  forall o11:index. forall o12:index. forall temp___2033:bool.
  forall temp___2034:index. forall temp___2035:bool. forall usq_3:bool.
  forall usq_4:index. forall usq_5:bool. forall temp___2053:bool.
  forall temp___2054:index. forall temp___2055:bool. forall usq_6:bool.
  forall usq_7:index. forall usq_8:bool. forall temp___211:bool.
  forall temp___2111:index. forall temp___2112:bool.
  forall res__split_fields1:index. forall res__split_discrs1:bool.
  forall linear_search__search__result3:bool.
  forall linear_search__search__result4:index.
  forall linear_search__search__result5:bool. forall result:int__ref.
  forall pos1:int. forall temp___2081:int. forall result1:bool.
  forall result2:us_split_fields__ref.
  forall res__split_fields2:us_split_fields.
  forall result3:us_split_discrs__ref.
  forall res__split_discrs2:us_split_discrs.
  forall result4:search_result__ref.
  forall linear_search__search__result6:us_rep. forall pos2:int.
  forall res__split_fields3:us_split_fields.
  forall res__split_discrs3:us_split_discrs.
  forall linear_search__search__result7:us_rep. forall temp___2082:int.
  forall result5:int__ref. forall temp___2083:int. forall result6:int__ref.
  forall pos3:int. forall result7:bool. forall result8:us_split_fields__ref.
  forall res__split_fields4:us_split_fields.
  forall result9:us_split_discrs__ref.
  forall res__split_discrs4:us_split_discrs.
  forall result10:search_result__ref.
  forall linear_search__search__result8:us_rep. forall pos4:int__ref.
  forall res__split_fields5:us_split_fields__ref.
  forall res__split_discrs5:us_split_discrs__ref.
  forall linear_search__search__result9:search_result__ref.
  forall temp___2084:int__ref. forall pos5:int.
  forall res__split_fields6:us_split_fields.
  forall res__split_discrs6:us_split_discrs.
  forall linear_search__search__result10:us_rep. forall temp___2085:int.
  forall pos6:int__ref. forall res__split_fields7:us_split_fields__ref.
  forall res__split_discrs7:us_split_discrs__ref.
  forall linear_search__search__result11:search_result__ref. forall pos7:int.
  forall res__split_fields8:us_split_fields.
  forall res__split_discrs8:us_split_discrs.
  forall linear_search__search__result12:us_rep. forall pos8:int__ref.
  forall res__split_fields9:us_split_fields__ref.
  forall res__split_discrs9:us_split_discrs__ref.
  forall linear_search__search__result13:search_result__ref. forall pos9:int.
  forall res__split_fields10:us_split_fields.
  forall res__split_discrs10:us_split_discrs.
  forall linear_search__search__result14:us_rep.
  forall result11:us_split_fields__ref.
  forall res__split_fields11:us_split_fields.
  forall result12:us_split_discrs__ref.
  forall res__split_discrs11:us_split_discrs.
  forall result13:search_result__ref.
  forall linear_search__search__result15:us_rep.
  forall linear_search__search__result16:search_result__ref.
  forall linear_search__search__result17:us_rep. forall pos10:int__ref.
  forall res__split_fields12:us_split_fields__ref.
  forall res__split_discrs12:us_split_discrs__ref.
  forall linear_search__search__result18:search_result__ref.
  forall pos11:int. forall res__split_fields13:us_split_fields.
  forall res__split_discrs13:us_split_discrs.
  forall linear_search__search__result19:us_rep. forall pos12:int__ref.
  forall res__split_fields14:us_split_fields__ref.
  forall res__split_discrs14:us_split_discrs__ref.
  forall linear_search__search__result20:search_result__ref.
  forall pos13:int. forall res__split_fields15:us_split_fields.
  forall res__split_discrs15:us_split_discrs.
  forall linear_search__search__result21:us_rep. (in_range3(val__) ->
  ((0 <= val__) -> (((((result = { int__content = pos }) and (pos1 = 1)) and
  (in_range1(pos1) and (((res__attr__constrained = false) and
  (res__split_discrs = of_int(0))) and
  (((((linear_search__search__result18 = linear_search__search__result9) and
  ((res__split_discrs12 = res__split_discrs5) and
  ((res__split_fields12 = res__split_fields5) and (pos10 = pos4)))) and
  ((linear_search__search__result19 = linear_search__search__result10) and
  ((res__split_discrs13 = res__split_discrs6) and
  ((res__split_fields13 = res__split_fields6) and (pos11 = pos5))))) and
  ((pos1 <= 10) and (((res__split_discrs = temp___207) and
  ((res__split_fields = temp___2071) and
  (res__attr__constrained = temp___2072))) and ((temp___206 = pos1) and
  ((0 = temp___208) and (((((temp___2084 = { int__content = temp___208 }) and
  ((linear_search__search__result9 = { search_result__content =
  linear_search__search__result6 }) and ((res__split_discrs5 = {
  us_split_discrs__content = res__split_discrs2 }) and
  ((res__split_fields5 = { us_split_fields__content = res__split_fields2
  }) and (pos4 = { int__content = pos1 }))))) and
  ((temp___2085 = temp___2081) and
  ((linear_search__search__result10 = linear_search__search__result6) and
  ((res__split_discrs6 = res__split_discrs2) and
  ((res__split_fields6 = res__split_fields2) and (pos5 = pos1)))))) and
  (((((((1 <= pos1) and (pos1 <= 10)) and (o = pos1)) and (o1 = (a[o]))) and
  (o2 = to_rep1(o1))) and (((o2 = val__) and (result1 = true)) or
  ((not (o2 = val__)) and (result1 = false)))) and ((result1 = true) and
  (((((((((o3 = pos1) and in_range2(pos1)) and (to_rep(o4) = o3)) and
  (o4 = o5)) and ((of_int(1) = temp___203) and ((temp___2031 = o5) and
  (true = temp___2032)))) and ((((res__attr__constrained = true) and
  (temp___203 = res__split_discrs)) or
  (not (res__attr__constrained = true))) and ({ us_split_discrs1 = {
  rec__linear_search__search_result__found = usq_ }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = usq_1 }; attr__constrained =
  usq_2 } = { us_split_discrs1 = { rec__linear_search__search_result__found =
  temp___203 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = temp___2031 };
  attr__constrained = temp___2032 }))) and ((usq_ = temp___205) and
  ((usq_1 = temp___2051) and (res__attr__constrained = temp___2052)))) and
  (((result2 = { us_split_fields__content = {
  rec__linear_search__search_result__at_index = res__split_fields } }) and
  (res__split_fields2 = { rec__linear_search__search_result__at_index =
  temp___2051 })) and ((result3 = { us_split_discrs__content = {
  rec__linear_search__search_result__found = res__split_discrs } }) and
  (res__split_discrs2 = { rec__linear_search__search_result__found =
  temp___205 })))) and ((result4 = { search_result__content = {
  us_split_discrs1 = { rec__linear_search__search_result__found =
  linear_search__search__result }; us_split_fields1 = {
  rec__linear_search__search_result__at_index =
  linear_search__search__result1 }; attr__constrained =
  linear_search__search__result2 } }) and (linear_search__search__result6 = {
  us_split_discrs1 = res__split_discrs2; us_split_fields1 =
  res__split_fields2; attr__constrained = res__attr__constrained })))))) or
  ((((((((1 <= pos1) and (pos1 <= 10)) and (o = pos1)) and (o1 = (a[o]))) and
  (o2 = to_rep1(o1))) and (((o2 = val__) and (result1 = true)) or
  ((not (o2 = val__)) and (result1 = false)))) and
  ((not (result1 = true)) and (((linear_search__search__result6 = {
  us_split_discrs1 = { rec__linear_search__search_result__found =
  linear_search__search__result }; us_split_fields1 = {
  rec__linear_search__search_result__at_index =
  linear_search__search__result1 }; attr__constrained =
  linear_search__search__result2 }) and ((res__split_discrs2 = {
  rec__linear_search__search_result__found = res__split_discrs }) and
  (res__split_fields2 = { rec__linear_search__search_result__at_index =
  res__split_fields }))) and ((linear_search__search__result6 = {
  us_split_discrs1 = { rec__linear_search__search_result__found =
  linear_search__search__result3 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index =
  linear_search__search__result4 }; attr__constrained =
  linear_search__search__result5 }) and ((res__split_discrs2 = {
  rec__linear_search__search_result__found = res__split_discrs1 }) and
  (res__split_fields2 = { rec__linear_search__search_result__at_index =
  res__split_fields1 })))))) and ((((temp___2084 = { int__content =
  temp___2083 }) and ((linear_search__search__result9 = {
  search_result__content = linear_search__search__result8 }) and
  ((res__split_discrs5 = { us_split_discrs__content = res__split_discrs4
  }) and ((res__split_fields5 = { us_split_fields__content =
  res__split_fields4 }) and (pos4 = { int__content = pos3 }))))) and
  ((temp___2085 = temp___2083) and
  ((linear_search__search__result10 = linear_search__search__result8) and
  ((res__split_discrs6 = res__split_discrs4) and
  ((res__split_fields6 = res__split_fields4) and (pos5 = pos3)))))) and
  ((((1 <= pos2) and (pos2 <= 10)) and (not (value_found_in_range(a, val__,
  1, pos2) = true))) and ((((- 128) <= 127) -> in_range1(pos2)) and
  (((result5 = { int__content = temp___2082 }) and (temp___2083 = pos2)) and
  ((((o6 = (pos2 + 1)) and in_range1((pos2 + 1))) and ((result6 = {
  int__content = pos2 }) and (pos3 = o6))) and ((pos3 <= 10) and
  (((((((1 <= pos3) and (pos3 <= 10)) and (o7 = pos3)) and
  (o8 = (a[o7]))) and (o9 = to_rep1(o8))) and (((o9 = val__) and
  (result7 = true)) or ((not (o9 = val__)) and (result7 = false)))) and
  ((result7 = true) and (((((((((o10 = pos3) and in_range2(pos3)) and
  (to_rep(o11) = o10)) and (o11 = o12)) and ((of_int(1) = temp___2033) and
  ((temp___2034 = o12) and (true = temp___2035)))) and
  ((((res__attr__constrained = true) and
  (temp___2033 = (res__split_discrs3).rec__linear_search__search_result__found)) or
  (not (res__attr__constrained = true))) and ({ us_split_discrs1 = {
  rec__linear_search__search_result__found = usq_3 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = usq_4 }; attr__constrained =
  usq_5 } = { us_split_discrs1 = { rec__linear_search__search_result__found =
  temp___2033 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = temp___2034 };
  attr__constrained = temp___2035 }))) and ((usq_3 = temp___2053) and
  ((usq_4 = temp___2054) and (res__attr__constrained = temp___2055)))) and
  (((result8 = { us_split_fields__content = res__split_fields3 }) and
  (res__split_fields4 = { rec__linear_search__search_result__at_index =
  temp___2054 })) and ((result9 = { us_split_discrs__content =
  res__split_discrs3 }) and (res__split_discrs4 = {
  rec__linear_search__search_result__found = temp___2053 })))) and
  ((result10 = { search_result__content = linear_search__search__result7
  }) and (linear_search__search__result8 = { us_split_discrs1 =
  res__split_discrs4; us_split_fields1 = res__split_fields4;
  attr__constrained = res__attr__constrained })))))))))))))))))) or
  ((((pos1 <= 10) and (((((res__split_discrs = temp___207) and
  ((res__split_fields = temp___2071) and
  (res__attr__constrained = temp___2072))) and ((temp___206 = pos1) and
  ((0 = temp___208) and ((((((((1 <= pos1) and (pos1 <= 10)) and
  (o = pos1)) and (o1 = (a[o]))) and (o2 = to_rep1(o1))) and
  (((o2 = val__) and (result1 = true)) or ((not (o2 = val__)) and
  (result1 = false)))) and ((not (result1 = true)) and
  (((linear_search__search__result6 = { us_split_discrs1 = {
  rec__linear_search__search_result__found = linear_search__search__result };
  us_split_fields1 = { rec__linear_search__search_result__at_index =
  linear_search__search__result1 }; attr__constrained =
  linear_search__search__result2 }) and ((res__split_discrs2 = {
  rec__linear_search__search_result__found = res__split_discrs }) and
  (res__split_fields2 = { rec__linear_search__search_result__at_index =
  res__split_fields }))) and ((linear_search__search__result6 = {
  us_split_discrs1 = { rec__linear_search__search_result__found =
  linear_search__search__result3 }; us_split_fields1 = {
  rec__linear_search__search_result__at_index =
  linear_search__search__result4 }; attr__constrained =
  linear_search__search__result5 }) and ((res__split_discrs2 = {
  rec__linear_search__search_result__found = res__split_discrs1 }) and
  (res__split_fields2 = { rec__linear_search__search_result__at_index =
  res__split_fields1 })))))) and ((((1 <= pos2) and (pos2 <= 10)) and
  (not (value_found_in_range(a, val__, 1, pos2) = true))) and
  ((((- 128) <= 127) -> in_range1(pos2)) and (((result5 = { int__content =
  temp___2082 }) and (temp___2083 = pos2)) and ((((o6 = (pos2 + 1)) and
  in_range1((pos2 + 1))) and ((result6 = { int__content = pos2 }) and
  (pos3 = o6))) and (not (pos3 <= 10)))))))))) and
  (((linear_search__search__result11 = { search_result__content =
  linear_search__search__result7 }) and ((res__split_discrs7 = {
  us_split_discrs__content = res__split_discrs3 }) and
  ((res__split_fields7 = { us_split_fields__content = res__split_fields3
  }) and (pos6 = { int__content = pos3 })))) and
  ((linear_search__search__result12 = linear_search__search__result7) and
  ((res__split_discrs8 = res__split_discrs3) and
  ((res__split_fields8 = res__split_fields3) and (pos7 = pos3)))))) and
  (((linear_search__search__result13 = linear_search__search__result11) and
  ((res__split_discrs9 = res__split_discrs7) and
  ((res__split_fields9 = res__split_fields7) and (pos8 = pos6)))) and
  ((linear_search__search__result14 = linear_search__search__result12) and
  ((res__split_discrs10 = res__split_discrs8) and
  ((res__split_fields10 = res__split_fields8) and (pos9 = pos7))))))) or
  ((not (pos1 <= 10)) and (((linear_search__search__result13 = {
  search_result__content = { us_split_discrs1 = {
  rec__linear_search__search_result__found = linear_search__search__result };
  us_split_fields1 = { rec__linear_search__search_result__at_index =
  linear_search__search__result1 }; attr__constrained =
  linear_search__search__result2 } }) and ((res__split_discrs9 = {
  us_split_discrs__content = { rec__linear_search__search_result__found =
  res__split_discrs } }) and ((res__split_fields9 = {
  us_split_fields__content = { rec__linear_search__search_result__at_index =
  res__split_fields } }) and (pos8 = { int__content = pos1 })))) and
  ((linear_search__search__result14 = { us_split_discrs1 = {
  rec__linear_search__search_result__found = linear_search__search__result3
  }; us_split_fields1 = { rec__linear_search__search_result__at_index =
  linear_search__search__result4 }; attr__constrained =
  linear_search__search__result5 }) and ((res__split_discrs10 = {
  rec__linear_search__search_result__found = res__split_discrs1 }) and
  ((res__split_fields10 = { rec__linear_search__search_result__at_index =
  res__split_fields1 }) and (pos9 = pos1))))))) and
  ((((linear_search__search__result18 = linear_search__search__result16) and
  ((res__split_discrs12 = { us_split_discrs__content = res__split_discrs11
  }) and ((res__split_fields12 = { us_split_fields__content =
  res__split_fields11 }) and (pos10 = pos8)))) and
  ((linear_search__search__result19 = linear_search__search__result17) and
  ((res__split_discrs13 = res__split_discrs11) and
  ((res__split_fields13 = res__split_fields11) and (pos11 = pos9))))) and
  (((((((res__attr__constrained = true) and
  (of_int(0) = ((res__split_discrs9).us_split_discrs__content).rec__linear_search__search_result__found)) or
  (not (res__attr__constrained = true))) and ((of_int(0) = usq_6) and
  ((dummy1 = usq_7) and (true = usq_8)))) and ((usq_6 = temp___211) and
  ((usq_7 = temp___2111) and (res__attr__constrained = temp___2112)))) and
  (((result11 = res__split_fields9) and (res__split_fields11 = {
  rec__linear_search__search_result__at_index = temp___2111 })) and
  ((result12 = res__split_discrs9) and (res__split_discrs11 = {
  rec__linear_search__search_result__found = temp___211 })))) and
  (((linear_search__search__result16 = { search_result__content =
  linear_search__search__result15 }) and
  (linear_search__search__result17 = linear_search__search__result15)) and
  ((result13 = linear_search__search__result13) and
  (linear_search__search__result15 = { us_split_discrs1 =
  res__split_discrs11; us_split_fields1 = res__split_fields11;
  attr__constrained = res__attr__constrained })))))))))) and
  (((linear_search__search__result20 = linear_search__search__result18) and
  ((res__split_discrs14 = res__split_discrs12) and
  ((res__split_fields14 = res__split_fields12) and (pos12 = pos10)))) and
  ((linear_search__search__result21 = linear_search__search__result19) and
  ((res__split_discrs15 = res__split_discrs13) and
  ((res__split_fields15 = res__split_fields13) and (pos13 = pos11)))))) ->
  (((((linear_search__search__result20).search_result__content).us_split_discrs1).rec__linear_search__search_result__found = true) ->
  (to_int((((linear_search__search__result20).search_result__content).us_split_discrs1).rec__linear_search__search_result__found) = 1))))))
