(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (natural natural) Bool)
(declare-const dummy3 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(define-fun default_initial_assumption ((temp___expr_338 us_rep) (temp___skip_top_level_339 Bool)) Bool (=> (not (= temp___skip_top_level_339 true)) (= (length temp___expr_338) 0)))
(assert (forall ((s us_rep)) (! (dynamic_invariant (length s) true false true true) :pattern ((length s)))))
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 3))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_330 Int) (temp___is_init_326 Bool) (temp___skip_constant_327 Bool) (temp___do_toplevel_328 Bool) (temp___do_typ_inv_329 Bool)) Bool (=> (or (= temp___is_init_326 true) (<= 0 3)) (in_range4 temp___expr_330)))
(assert (forall ((s us_rep)) (forall ((n Int)) (! (=> (and (dynamic_invariant1 n true true true true) (and (<= 1 n) (<= n (length s)))) (dynamic_invariant2 (get s n) true false true true)) :pattern ((get s n))))))
(declare-fun mem (us_rep Int) Bool)
(declare-fun mem__function_guard (Bool us_rep Int) Bool)
(declare-sort resource 0)
(declare-fun resourceqtint (resource) Int)
(assert (forall ((i resource)) (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 3))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (resource resource) Bool)
(declare-const dummy5 resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant3 ((temp___expr_310 Int) (temp___is_init_306 Bool) (temp___skip_constant_307 Bool) (temp___do_toplevel_308 Bool) (temp___do_typ_inv_309 Bool)) Bool (=> (or (= temp___is_init_306 true) (<= 0 3)) (in_range5 temp___expr_310)))
(assert true)
(assert (forall ((s us_rep)) (forall ((r Int)) (! (= (= (mem s r) true) (exists ((j Int)) (and (and (<= 1 j) (<= j (length s))) (= (get s j) r)))) :pattern ((mem s r))))))
(define-fun to_rep ((x resource)) Int (resourceqtint x))
(declare-fun of_rep (Int) resource)
(assert (forall ((x resource)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x resource)) (! (in_range5 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort valid_resource 0)
(declare-fun valid_resourceqtint (valid_resource) Int)
(assert (forall ((i valid_resource)) (and (<= 1 (valid_resourceqtint i)) (<= (valid_resourceqtint i) 3))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (valid_resource valid_resource) Bool)
(declare-const dummy6 valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(declare-sort status 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (status status) Bool)
(declare-const dummy7 status)
(declare-datatypes () ((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content a))
(declare-fun to_rep1 (status) Int)
(declare-fun of_rep1 (Int) status)
(assert (forall ((x status)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x status)) (! (in_range7 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_allocator__cell__stat status) (rec__list_allocator__cell__prev resource) (rec__list_allocator__cell__next resource)))))
(define-fun us_split_fields_Stat__projection ((a us_split_fields)) status (rec__list_allocator__cell__stat a))
(define-fun us_split_fields_Prev__projection ((a us_split_fields)) resource (rec__list_allocator__cell__prev a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) resource (rec__list_allocator__cell__next a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___8__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields1 a))) (to_rep1 (rec__list_allocator__cell__stat (us_split_fields1 b)))) (= (to_rep (rec__list_allocator__cell__prev (us_split_fields1 a))) (to_rep (rec__list_allocator__cell__prev (us_split_fields1 b))))) (= (to_rep (rec__list_allocator__cell__next (us_split_fields1 a))) (to_rep (rec__list_allocator__cell__next (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const list_allocator__cell__stat__first__bit Int)
(declare-const list_allocator__cell__stat__last__bit Int)
(declare-const list_allocator__cell__stat__position Int)
(assert (<= 0 list_allocator__cell__stat__first__bit))
(assert (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))
(assert (<= 0 list_allocator__cell__stat__position))
(declare-const list_allocator__cell__prev__first__bit Int)
(declare-const list_allocator__cell__prev__last__bit Int)
(declare-const list_allocator__cell__prev__position Int)
(assert (<= 0 list_allocator__cell__prev__first__bit))
(assert (< list_allocator__cell__prev__first__bit list_allocator__cell__prev__last__bit))
(assert (<= 0 list_allocator__cell__prev__position))
(declare-const list_allocator__cell__next__first__bit Int)
(declare-const list_allocator__cell__next__last__bit Int)
(declare-const list_allocator__cell__next__position Int)
(assert (<= 0 list_allocator__cell__next__first__bit))
(assert (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))
(assert (<= 0 list_allocator__cell__next__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep1)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep1 (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq1 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq1 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list_allocator__m__t__available us_rep) (rec__list_allocator__m__t__allocated us_rep)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields2)) us_rep (rec__list_allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields2)) us_rep (rec__list_allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___7__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (user_eq2 (rec__list_allocator__m__t__available (us_split_fields3 a)) (rec__list_allocator__m__t__available (us_split_fields3 b))) true) (= (user_eq2 (rec__list_allocator__m__t__allocated (us_split_fields3 a)) (rec__list_allocator__m__t__allocated (us_split_fields3 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const list_allocator__m__t__available__first__bit Int)
(declare-const list_allocator__m__t__available__last__bit Int)
(declare-const list_allocator__m__t__available__position Int)
(assert (<= 0 list_allocator__m__t__available__first__bit))
(assert (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))
(assert (<= 0 list_allocator__m__t__available__position))
(declare-const list_allocator__m__t__allocated__first__bit Int)
(declare-const list_allocator__m__t__allocated__last__bit Int)
(declare-const list_allocator__m__t__allocated__position Int)
(assert (<= 0 list_allocator__m__t__allocated__first__bit))
(assert (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))
(assert (<= 0 list_allocator__m__t__allocated__position))
(declare-fun user_eq9 (us_rep2 us_rep2) Bool)
(declare-const dummy9 us_rep2)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep2)))))
(define-fun t__ref___projection ((a t__ref)) us_rep2 (t__content a))
(declare-fun oeq1 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq9 a b) (oeq1 a b)) :pattern ((user_eq9 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_346 us_rep2) (temp___skip_top_level_347 Bool)) Bool (and (= (length (rec__list_allocator__m__t__available (us_split_fields3 temp___expr_346))) 0) (= (length (rec__list_allocator__m__t__allocated (us_split_fields3 temp___expr_346))) 0)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_362 Int) (temp___is_init_358 Bool) (temp___skip_constant_359 Bool) (temp___do_toplevel_360 Bool) (temp___do_typ_inv_361 Bool)) Bool (=> (or (= temp___is_init_358 true) (<= 0 1)) (in_range7 temp___expr_362)))
(define-fun dynamic_invariant6 ((temp___expr_317 Int) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool) (temp___do_typ_inv_316 Bool)) Bool (=> (or (= temp___is_init_313 true) (<= 1 3)) (in_range6 temp___expr_317)))
(assert true)
(assert (forall ((x us_rep2) (y us_rep2)) (! (= (= (oeq1 x y) true) (and (= (oeq (rec__list_allocator__m__t__available (us_split_fields3 x)) (rec__list_allocator__m__t__available (us_split_fields3 y))) true) (= (oeq (rec__list_allocator__m__t__allocated (us_split_fields3 x)) (rec__list_allocator__m__t__allocated (us_split_fields3 y))) true))) :pattern ((oeq1 x y)))))
(assert (forall ((s1 us_rep) (s2 us_rep)) (! (= (= (oeq s1 s2) true) (and (= (length s1) (length s2)) (forall ((n Int)) (=> (and (<= 1 n) (<= n (length s1))) (= (get s1 n) (get s2 n)))))) :pattern ((oeq s1 s2)))))
(declare-const model____split_fields us_rep)
(declare-const model____split_fields1 us_rep)
(declare-const first_available Int)
(declare-const first_allocated Int)
(declare-const j Int)
(declare-const o Int)
(declare-const o1 Bool)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(assert (in_range5 first_available))
(assert (in_range5 first_allocated))
(assert (=> (not (= first_available 0)) (and (= o10 (length model____split_fields)) (in_range3 o10))))
(assert (=> (not (= first_available 0)) (= result2 (ite (< 0 o10) true false))))
(assert (=> (not (= first_available 0)) (=> (= result2 true) (and (= o9 (get model____split_fields 1)) (in_range4 o9)))))
(assert (=> (not (= first_available 0)) (=> (= result2 true) (= result1 (ite (= o9 first_available) true false)))))
(assert (=> (not (= first_available 0)) (=> (not (= result2 true)) (= result1 false))))
(assert (=> (not (not (= first_available 0))) (and (= o11 (length model____split_fields)) (in_range3 o11))))
(assert (=> (not (not (= first_available 0))) (= result1 (ite (= o11 0) true false))))
(assert (=> (= result1 true) (=> (not (= first_allocated 0)) (and (= o7 (length model____split_fields1)) (in_range3 o7)))))
(assert (=> (= result1 true) (=> (not (= first_allocated 0)) (= result3 (ite (< 0 o7) true false)))))
(assert (=> (= result1 true) (=> (not (= first_allocated 0)) (=> (= result3 true) (and (= o6 (get model____split_fields1 1)) (in_range4 o6))))))
(assert (=> (= result1 true) (=> (not (= first_allocated 0)) (=> (= result3 true) (= result (ite (= o6 first_allocated) true false))))))
(assert (=> (= result1 true) (=> (not (= first_allocated 0)) (=> (not (= result3 true)) (= result false)))))
(assert (=> (= result1 true) (=> (not (not (= first_allocated 0))) (and (= o8 (length model____split_fields1)) (in_range3 o8)))))
(assert (=> (= result1 true) (=> (not (not (= first_allocated 0))) (= result (ite (= o8 0) true false)))))
(assert (=> (not (= result1 true)) (= result false)))
(assert (= result true))
(assert (and (= o (length model____split_fields)) (in_range3 o)))
(assert (= o1 (ite (<= j o) true false)))
(assert (= result4 (ite (<= 1 j) o1 false)))
(assert (= result4 true))
(assert (and (= o5 (get model____split_fields j)) (in_range4 o5)))
(assert (= result5 (ite (in_range6 o5) true false)))
(assert (= result5 true))
(assert (and (= o2 (length model____split_fields)) (in_range3 o2)))
(assert (= result6 (ite (< j o2) true false)))
(assert (=> (= result6 true) (and (= o3 (+ j 1)) (in_range1 (+ j 1)))))
(assert (=> (= result6 true) (and (= o4 (get model____split_fields o3)) (in_range4 o4))))
(assert (=> (not (= result6 true)) (= o4 0)))
(assert (not (<= j (length model____split_fields))))
(check-sat)
(exit)
