(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 1 100)) (in_range1 temp___expr_150)))
(declare-sort extended_index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (extended_index_type extended_index_type) Bool)
(declare-const dummy1 extended_index_type)
(declare-datatypes () ((extended_index_type__ref (mk_extended_index_type__ref (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type (extended_index_type__content a))
(declare-fun to_rep (extended_index_type) Int)
(declare-fun of_rep (Int) extended_index_type)
(assert (forall ((x extended_index_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x extended_index_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort position_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (position_type position_type) Bool)
(declare-const dummy2 position_type)
(declare-datatypes () ((position_type__ref (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type (position_type__content a))
(declare-fun to_rep1 (position_type) Int)
(declare-fun of_rep1 (Int) position_type)
(assert (forall ((x position_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x position_type)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort direction 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (direction direction) Bool)
(declare-const dummy3 direction)
(declare-datatypes () ((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction (direction__content a))
(define-fun dynamic_invariant1 ((temp___expr_168 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool)) Bool (=> (or (= temp___is_init_165 true) (<= 0 1)) (in_range4 temp___expr_168)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tree_model__path_type__a us_rep) (rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep (rec__tree_model__path_type__a a))
(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool (rec__tree_model__path_type__k a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq4 (rec__tree_model__path_type__a (us_split_fields1 a)) (rec__tree_model__path_type__a (us_split_fields1 b))) true) (= (rec__tree_model__path_type__k (us_split_fields1 a)) (rec__tree_model__path_type__k (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const tree_model__path_type__a__first__bit Int)
(declare-const tree_model__path_type__a__last__bit Int)
(declare-const tree_model__path_type__a__position Int)
(assert (<= 0 tree_model__path_type__a__first__bit))
(assert (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))
(assert (<= 0 tree_model__path_type__a__position))
(declare-const tree_model__path_type__k__first__bit Int)
(declare-const tree_model__path_type__k__last__bit Int)
(declare-const tree_model__path_type__k__position Int)
(assert (<= 0 tree_model__path_type__k__first__bit))
(assert (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))
(assert (<= 0 tree_model__path_type__k__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 (path_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))
(assert (forall ((v us_rep1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq1 (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-fun oeq1 ((Array Int us_rep1) (Array Int us_rep1)) Bool)
(declare-fun oeq__function_guard1 (Bool (Array Int us_rep1) (Array Int us_rep1)) Bool)
(define-fun dynamic_invariant2 ((temp___expr_216 (Array Int us_rep1)) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int)) (=> (and (<= 1 temp___217) (<= temp___217 100)) (=> (= temp___is_init_213 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_216 temp___217)))) 100)))))
(define-fun default_initial_assumption ((temp___expr_219 (Array Int us_rep1)) (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int)) (=> (and (<= 1 temp___221) (<= temp___221 100)) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___expr_219 temp___221)))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___expr_219 temp___221))) (of_int 0))))))
(assert true)
(assert (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1))) (! (= (= (oeq1 m1 m2) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (and (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i))) (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true) (= (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true)))))) :pattern ((oeq1 m1 m2)))))
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_199 us_rep) (temp___skip_top_level_200 Bool)) Bool (=> (not (= temp___skip_top_level_200 true)) (= (length temp___expr_199) 0)))
(define-fun olt ((left us_rep) (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (forall ((d Int)) (! (= (= (is_add s1 d s2) true) (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true)) (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__binary_trees__cell__left extended_index_type) (rec__binary_trees__cell__right extended_index_type) (rec__binary_trees__cell__parent extended_index_type) (rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__right a))
(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type (rec__binary_trees__cell__parent a))
(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type (rec__binary_trees__cell__position a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 a))) (to_rep (rec__binary_trees__cell__left (us_split_fields3 b)))) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 a))) (to_rep (rec__binary_trees__cell__right (us_split_fields3 b))))) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 a))) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 b))))) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 a))) (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const binary_trees__cell__left__first__bit Int)
(declare-const binary_trees__cell__left__last__bit Int)
(declare-const binary_trees__cell__left__position Int)
(assert (<= 0 binary_trees__cell__left__first__bit))
(assert (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))
(assert (<= 0 binary_trees__cell__left__position))
(declare-const binary_trees__cell__right__first__bit Int)
(declare-const binary_trees__cell__right__last__bit Int)
(declare-const binary_trees__cell__right__position Int)
(assert (<= 0 binary_trees__cell__right__first__bit))
(assert (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))
(assert (<= 0 binary_trees__cell__right__position))
(declare-const binary_trees__cell__parent__first__bit Int)
(declare-const binary_trees__cell__parent__last__bit Int)
(declare-const binary_trees__cell__parent__position Int)
(assert (<= 0 binary_trees__cell__parent__first__bit))
(assert (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))
(assert (<= 0 binary_trees__cell__parent__position))
(declare-const binary_trees__cell__position__first__bit Int)
(declare-const binary_trees__cell__position__last__bit Int)
(declare-const binary_trees__cell__position__position Int)
(assert (<= 0 binary_trees__cell__position__first__bit))
(assert (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))
(assert (<= 0 binary_trees__cell__position__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))
(assert (forall ((v us_rep2)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq3 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq3 (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))) true))))))))
(declare-const dummy7 (Array Int us_rep2))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep2)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep2)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep2)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq7 ((Array Int us_rep2) (Array Int us_rep2)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__binary_trees__forest__s extended_index_type) (rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type (rec__binary_trees__forest__s a))
(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) (rec__binary_trees__forest__c a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields5 a))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 b)))) (= (bool_eq4 (rec__binary_trees__forest__c (us_split_fields5 a)) 1 100 (rec__binary_trees__forest__c (us_split_fields5 b)) 1 100) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep3) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep3) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))
(declare-const binary_trees__forest__s__first__bit Int)
(declare-const binary_trees__forest__s__last__bit Int)
(declare-const binary_trees__forest__s__position Int)
(assert (<= 0 binary_trees__forest__s__first__bit))
(assert (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))
(assert (<= 0 binary_trees__forest__s__position))
(declare-const binary_trees__forest__c__first__bit Int)
(declare-const binary_trees__forest__c__last__bit Int)
(declare-const binary_trees__forest__c__position Int)
(assert (<= 0 binary_trees__forest__c__first__bit))
(assert (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))
(assert (<= 0 binary_trees__forest__c__position))
(declare-fun user_eq8 (us_rep3 us_rep3) Bool)
(declare-const dummy8 us_rep3)
(declare-datatypes () ((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content a))
(declare-fun size (us_rep3) Int)
(declare-fun size__function_guard (Int us_rep3) Bool)
(declare-fun tree_structure (us_rep3) Bool)
(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption2 ((temp___expr_275 us_rep3) (temp___skip_top_level_276 Bool)) Bool (and (and (= (to_rep (rec__binary_trees__forest__s (us_split_fields5 temp___expr_275))) 0) (forall ((temp___278 Int)) (=> (and (<= 1 temp___278) (<= temp___278 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields5 temp___expr_275)) temp___278)))) 2))))) (=> (not (= temp___skip_top_level_276 true)) (= (size temp___expr_275) 0))))
(define-fun type_invariant ((temp___281 us_rep3)) Bool (= (tree_structure temp___281) true))
(define-fun dynamic_invariant3 ((temp___expr_156 Int) (temp___is_init_153 Bool) (temp___skip_constant_154 Bool) (temp___do_toplevel_155 Bool)) Bool (=> (or (= temp___is_init_153 true) (<= 0 100)) (in_range2 temp___expr_156)))
(assert (forall ((f us_rep3)) (! (=> (type_invariant f) (dynamic_invariant3 (size f) true false true)) :pattern ((size f)))))
(assert (forall ((f us_rep3)) (! (= (size f) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))) :pattern ((size f)))))
(declare-fun valid_root (us_rep3 Int) Bool)
(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (and (dynamic_invariant i true true true) (type_invariant f)) (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (= (= (valid_root f i) true) (and (<= i (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___288 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___288 i))))) 2))) :pattern ((valid_root f i))))))
(declare-fun parent (us_rep3 Int) Int)
(declare-fun parent__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (and (dynamic_invariant i true true true) (type_invariant f)) (let ((result (parent f i))) (and (and (=> (= (valid_root f i) true) (= result 0)) (=> (= (size f) 0) (= result 0))) (dynamic_invariant3 result true false true)))) :pattern ((parent f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (dynamic_invariant i true true true) (= (parent f i) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___292 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___292 i))))))) :pattern ((parent f i))))))
(declare-fun position (us_rep3 Int) Int)
(declare-fun position__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant i true true true) (type_invariant f)) (not (= (parent f i) 0))) (dynamic_invariant1 (position f i) true false true)) :pattern ((position f i))))))
(assert (forall ((f us_rep3)) (forall ((i Int)) (! (=> (dynamic_invariant i true true true) (= (position f i) (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___296 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___296 i))))))) :pattern ((position f i))))))
(declare-fun peek (us_rep3 Int Int) Int)
(declare-fun peek__function_guard (Int us_rep3 Int Int) Bool)
(assert (forall ((f us_rep3)) (forall ((i Int) (d Int)) (! (=> (and (and (dynamic_invariant i true true true) (dynamic_invariant1 d true true true)) (type_invariant f)) (let ((result (peek f i d))) (and (and (ite (not (= result 0)) (and (= (position f result) d) (= (parent f result) i)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (= (parent f j) i) (not (= (position f j) d)))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (parent f j) i) (= (position f j) d)) (= result j))))) (dynamic_invariant3 result true false true)))) :pattern ((peek f i d))))))
(assert (forall ((f us_rep3)) (forall ((i Int) (d Int)) (! (=> (and (dynamic_invariant i true true true) (dynamic_invariant1 d true true true)) (= (peek f i d) (ite (= d 0) (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___301 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___301 i))))) (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___302 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___302 i)))))))) :pattern ((peek f i d))))))
(declare-fun model__ (us_rep3 Int) (Array Int us_rep1))
(declare-fun model____function_guard ((Array Int us_rep1) us_rep3 Int) Bool)
(assert (forall ((f us_rep3)) (forall ((root Int)) (! (=> (and (and (dynamic_invariant root true true true) (type_invariant f)) (= (valid_root f root) true)) (let ((result (model__ f root))) (and (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result root)))) 0) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (not (= i root)) (ite (and (not (= (parent f i) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result (parent f i)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)))))) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (not (= i root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select result (parent f i)))) (position f i) (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select result i))) (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true)) (= j i))))))))))) (dynamic_invariant2 result true false true)))) :pattern ((model__ f root))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const root Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const d Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun default_initial_assumption3 ((temp___expr_259 us_rep2) (temp___skip_top_level_260 Bool)) Bool (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 temp___expr_259))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 temp___expr_259))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 temp___expr_259))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 temp___expr_259))) 2)))
(define-fun default_initial_assumption4 ((temp___expr_266 (Array Int us_rep2)) (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int)) (=> (and (<= 1 temp___268) (<= temp___268 100)) (and (and (and (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select temp___expr_266 temp___268)))) 0) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select temp___expr_266 temp___268)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select temp___expr_266 temp___268)))) 2)))))
(assert true)
(assert (forall ((f us_rep3)) (! (= (= (tree_structure f) true) (and (and (and (and (and (and (and (and (forall ((i1 Int)) (=> (and (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))) 1) i1) (<= i1 100)) (= (bool_eq3 (let ((temp___397 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___397 i1)) (mk___rep1 (mk___split_fields1 (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___398 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___398 i1)))))) (<= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___398 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___398 i1))))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___399 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___399 i1)))))) (<= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___399 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___399 i1))))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (and (<= 0 (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___400 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___400 i1)))))) (<= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___400 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___400 i1))))) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (=> (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___402 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___402 i1))))) 2) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___401 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___401 i1))))) 0))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (=> (not (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___407 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___407 i1))))) 0)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___403 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___403 (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___404 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___404 i1)))))))))) 0) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___405 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___405 (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___406 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___406 i1)))))))))) i1)))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (=> (not (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___412 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___412 i1))))) 0)) (and (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___408 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___408 (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___409 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___409 i1)))))))))) 1) (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___410 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___410 (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___411 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___411 i1)))))))))) i1)))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___415 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___415 i1))))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___416 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___416 i1))))) 0)) (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (let ((temp___413 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___413 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___414 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___414 i1)))))))))) i1))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___419 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___419 i1))))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (let ((temp___420 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___420 i1))))) 1)) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (let ((temp___417 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___417 (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (let ((temp___418 (rec__binary_trees__forest__c (us_split_fields5 f)))) (select temp___418 i1)))))))))) i1)))))) :pattern ((tree_structure f)))))
(define-fun dynamic_invariant4 ((temp___expr_162 Int) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool)) Bool (=> (or (= temp___is_init_159 true) (<= 0 2)) (in_range3 temp___expr_162)))
(define-fun dynamic_invariant5 ((temp___expr_205 us_rep1) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true) (=> (= temp___is_init_202 true) (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_205))) 100))))
(define-fun default_initial_assumption5 ((temp___expr_207 us_rep1) (temp___skip_top_level_208 Bool)) Bool (and (= (length (rec__tree_model__path_type__a (us_split_fields1 temp___expr_207))) 0) (= (rec__tree_model__path_type__k (us_split_fields1 temp___expr_207)) (of_int 0))))
(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length (rec__tree_model__path_type__a (us_split_fields1 temp___211))) 100))
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (count_type count_type) Bool)
(declare-const dummy9 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant6 ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 0 2147483647)) (in_range5 temp___expr_144)))
(declare-sort extended_index 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq10 (extended_index extended_index) Bool)
(declare-const dummy10 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant7 ((temp___expr_192 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 0 2147483647)) (in_range6 temp___expr_192)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false true))) :pattern ((length container)))))
(declare-sort element_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (element_type element_type) Bool)
(declare-const dummy11 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant8 ((temp___expr_186 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 0 1)) (in_range7 temp___expr_186)))
(assert (forall ((container us_rep)) (forall ((position1 Int)) (! (=> (and (dynamic_invariant7 position1 true true true) (and (<= 1 position1) (<= position1 (last container)))) (dynamic_invariant8 (get container position1) true false true)) :pattern ((get container position1))))))
(declare-const f__split_fields extended_index_type)
(declare-const f__split_fields1 (Array Int us_rep2))
(declare-const v Int)
(declare-const f_old__split_fields extended_index_type)
(declare-const f_old__split_fields1 (Array Int us_rep2))
(declare-const o Int)
(declare-const temp___960 (Array Int us_rep1))
(declare-const o1 us_rep)
(declare-const o2 Bool)
(declare-const o3 us_rep)
(declare-const o4 Bool)
(declare-const o5 Int)
(declare-const o6 position_type)
(declare-const o7 extended_index_type)
(declare-const o8 extended_index_type)
(declare-const o9 extended_index_type)
(declare-const o10 position_type)
(declare-const o11 extended_index_type)
(declare-const o12 extended_index_type)
(declare-const o13 extended_index_type)
(declare-const o14 position_type)
(declare-const o15 (Array Int us_rep2))
(declare-const o16 extended_index_type)
(declare-const o17 (Array Int us_rep2))
(declare-const temp___890 extended_index_type)
(declare-const temp___8901 (Array Int us_rep2))
(declare-const o18 extended_index_type)
(declare-const o19 extended_index_type)
(declare-const o20 extended_index_type)
(declare-const o21 extended_index_type)
(declare-const o22 position_type)
(declare-const o23 extended_index_type)
(declare-const o24 extended_index_type)
(declare-const o25 extended_index_type)
(declare-const o26 position_type)
(declare-const o27 (Array Int us_rep2))
(declare-const o28 extended_index_type)
(declare-const o29 (Array Int us_rep2))
(declare-const temp___895 extended_index_type)
(declare-const temp___8951 (Array Int us_rep2))
(declare-const o30 extended_index_type)
(declare-const o31 extended_index_type)
(declare-const o32 extended_index_type)
(declare-const o33 extended_index_type)
(declare-const o34 position_type)
(declare-const o35 us_rep2)
(declare-const o36 (Array Int us_rep2))
(declare-const o37 us_split_fields4)
(declare-const temp___905 us_rep3)
(declare-const o38 extended_index_type)
(declare-const o39 us_split_fields2)
(declare-const o40 us_rep2)
(declare-const o41 (Array Int us_rep2))
(declare-const o42 us_split_fields4)
(declare-const temp___900 us_rep3)
(declare-const o43 Int)
(declare-const o44 extended_index_type)
(declare-const o45 us_split_fields4)
(declare-const temp___907 us_rep3)
(declare-const i1 Int)
(declare-const i2 Int)
(declare-const i3 Int)
(declare-const o46 Bool)
(declare-const o47 (Array Int us_rep1))
(declare-const temp___937 (Array Int us_rep1))
(declare-const o48 us_rep1)
(declare-const o49 us_split_fields)
(declare-const o50 us_rep)
(declare-const temp___938 (Array Int us_rep1))
(declare-const o51 us_rep1)
(declare-const o52 us_split_fields)
(declare-const o53 us_rep)
(declare-const j Int)
(declare-const temp___941 (Array Int us_rep1))
(declare-const o54 us_rep1)
(declare-const o55 us_split_fields)
(declare-const o56 Bool)
(declare-const j1 Int)
(declare-const j2 Int)
(declare-const j3 Int)
(declare-const e Int)
(declare-const o57 Int)
(declare-const j4 Int)
(declare-const o58 Int)
(declare-const o59 Bool)
(declare-const o60 Bool)
(declare-const o61 Int)
(declare-const j5 Int)
(declare-const o62 Int)
(declare-const temp___955 (Array Int us_rep1))
(declare-const o63 us_rep1)
(declare-const o64 us_split_fields)
(declare-const i4 Int)
(declare-const o65 Int)
(declare-const temp___957 (Array Int us_rep1))
(declare-const o66 us_rep1)
(declare-const o67 us_split_fields)
(declare-const o68 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 us_split_fields__ref2)
(declare-const f_old__split_fields2 us_split_fields4)
(declare-const result4 int__ref)
(declare-const v1 Int)
(declare-const result5 us_split_fields__ref2)
(declare-const f__split_fields2 us_split_fields4)
(declare-const result6 us_split_fields__ref2)
(declare-const f__split_fields3 us_split_fields4)
(declare-const result7 us_split_fields__ref2)
(declare-const f__split_fields4 us_split_fields4)
(declare-const result8 us_split_fields__ref2)
(declare-const f__split_fields5 us_split_fields4)
(declare-const result9 us_split_fields__ref2)
(declare-const f__split_fields6 us_split_fields4)
(declare-const f__split_fields7 us_split_fields__ref2)
(declare-const v2 int__ref)
(declare-const f_old__split_fields3 us_split_fields__ref2)
(declare-const f__split_fields8 us_split_fields4)
(declare-const v3 Int)
(declare-const f_old__split_fields4 us_split_fields4)
(declare-const result10 Bool)
(declare-const result11 Bool)
(declare-const result12 Bool)
(declare-const result13 Bool)
(declare-const result14 Bool)
(declare-const result15 Bool)
(declare-const result16 Bool)
(declare-const result17 Bool)
(declare-const result18 Bool)
(declare-const result19 Bool)
(declare-const result20 Bool)
(declare-const result21 Bool)
(declare-const result22 Bool)
(declare-const result23 Bool)
(declare-const result24 Bool)
(declare-const result25 Bool)
(assert (in_range1 root))
(assert (in_range1 i))
(assert (in_range4 d))
(assert (=> (<= 1 100) (in_range1 v)))
(assert (= (tree_structure (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))
(assert (and (= (valid_root (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) i))) true) (and (= (peek (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i d) 0) (< (size (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) 100)))))
(assert (and (and (and (= result3 (mk___split_fields__ref2 (mk___split_fields2 f_old__split_fields f_old__split_fields1))) (= f_old__split_fields2 (mk___split_fields2 f__split_fields f__split_fields1))) (and (and (and (= o5 (+ (to_rep f__split_fields) 1)) (in_range1 (+ (to_rep f__split_fields) 1))) (and (= result4 (mk_int__ref v)) (= v1 o5))) (and (and (and (and (and (and (and (= (to_rep1 o6) d) (and (= (rec__binary_trees__cell__left (us_split_fields3 (select f__split_fields1 v1))) o7) (and (= (rec__binary_trees__cell__right (us_split_fields3 (select f__split_fields1 v1))) o8) (and (= (rec__binary_trees__cell__parent (us_split_fields3 (select f__split_fields1 v1))) o9) (= o6 o10))))) (and (= o11 o7) (and (= o12 o8) (and (= o13 o9) (= o14 o10))))) (= o15 (store f__split_fields1 v1 (mk___rep1 (mk___split_fields1 o11 o12 o13 o14))))) (and (= f__split_fields o16) (= o15 o17))) (and (= temp___890 o16) (= temp___8901 o17))) (and (= result5 (mk___split_fields__ref2 (mk___split_fields2 f__split_fields f__split_fields1))) (= f__split_fields2 (mk___split_fields2 temp___890 temp___8901)))) (and (and (and (and (and (and (and (= (to_rep o18) i) (and (= (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields2) v1))) o19) (and (= (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields2) v1))) o20) (and (= o18 o21) (= (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields2) v1))) o22))))) (and (= o23 o19) (and (= o24 o20) (and (= o25 o21) (= o26 o22))))) (= o27 (store (rec__binary_trees__forest__c f__split_fields2) v1 (mk___rep1 (mk___split_fields1 o23 o24 o25 o26))))) (and (= (rec__binary_trees__forest__s f__split_fields2) o28) (= o27 o29))) (and (= temp___895 o28) (= temp___8951 o29))) (and (= result6 (mk___split_fields__ref2 f__split_fields2)) (= f__split_fields3 (mk___split_fields2 temp___895 temp___8951)))) (and (ite (= d 0) (and (and (and (and (and (and (= (to_rep o30) v1) (and (= o30 o31) (and (= (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields3) i))) o32) (and (= (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields3) i))) o33) (= (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields3) i))) o34))))) (= o35 (mk___rep1 (mk___split_fields1 o31 o32 o33 o34)))) (= o36 (store (rec__binary_trees__forest__c f__split_fields3) i o35))) (= o37 (mk___split_fields2 (rec__binary_trees__forest__s f__split_fields3) o36))) (= temp___905 (mk___rep2 o37))) (and (= result7 (mk___split_fields__ref2 f__split_fields3)) (= f__split_fields4 (us_split_fields5 temp___905)))) (and (and (and (and (and (and (and (= (to_rep o38) v1) (= o39 (mk___split_fields1 (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields3) i))) o38 (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields3) i))) (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields3) i)))))) (= o40 (mk___rep1 o39))) (= o41 (store (rec__binary_trees__forest__c f__split_fields3) i o40))) (= o42 (mk___split_fields2 (rec__binary_trees__forest__s f__split_fields3) o41))) (= temp___900 (mk___rep2 o42))) (and (= result8 (mk___split_fields__ref2 f__split_fields3)) (= f__split_fields5 (us_split_fields5 temp___900)))) (= f__split_fields4 f__split_fields5))) (and (and (and (and (and (and (= o43 (+ (to_rep (rec__binary_trees__forest__s f__split_fields4)) 1)) (in_range2 (+ (to_rep (rec__binary_trees__forest__s f__split_fields4)) 1))) (= (to_rep o44) o43)) (= o45 (mk___split_fields2 o44 (rec__binary_trees__forest__c f__split_fields4)))) (= temp___907 (mk___rep2 o45))) (and (= result9 (mk___split_fields__ref2 f__split_fields4)) (= f__split_fields6 (us_split_fields5 temp___907)))) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) i5)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) i5)))) 0)) (= (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) i5)))))))) i5)))) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (and (not (= (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) i5)))) 0)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) i5)))) 1)) (= (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) (to_rep (rec__binary_trees__cell__parent (us_split_fields3 (select (rec__binary_trees__forest__c f__split_fields6) i5)))))))) i5)))) (and (and (= (tree_structure (mk___rep2 f_old__split_fields2)) true) (= (tree_structure (mk___rep2 f__split_fields6)) true)) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) root) i5))) true) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) i5))) true)))) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) v1))) true) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) i5))) true) (not (= i5 v1))) (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) root) i5))) true)))) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) root) i5))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) i5))) (rec__tree_model__path_type__a (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) root) i5)))) true)))) (forall ((r Int)) (=> (and (<= 1 r) (<= r (to_rep (rec__binary_trees__forest__s f_old__split_fields2)))) (=> (and (and (not (= r root)) (= (to_rep1 (rec__binary_trees__cell__position (us_split_fields3 (select (rec__binary_trees__forest__c f_old__split_fields2) r)))) 2)) (not (= r v1))) (= (oeq1 (model__ (mk___rep2 f_old__split_fields2) r) (model__ (mk___rep2 f__split_fields6) r)) true))))))))))))))))) (and (and (= f_old__split_fields3 (mk___split_fields__ref2 f_old__split_fields2)) (and (= v2 (mk_int__ref v1)) (= f__split_fields7 (mk___split_fields__ref2 f__split_fields6)))) (and (= f_old__split_fields4 f_old__split_fields2) (and (= v3 v1) (= f__split_fields8 f__split_fields6))))))
(assert (= (tree_structure (mk___rep2 (us_split_fields__content2 f__split_fields7))) true))
(assert (= (tree_structure (mk___rep2 (us_split_fields__content2 f__split_fields7))) true))
(assert (and (= o68 (size (mk___rep2 (us_split_fields__content2 f__split_fields7)))) (and (in_range2 o68) (= o68 (to_rep (rec__binary_trees__forest__s (us_split_fields__content2 f__split_fields7)))))))
(assert (= result10 (ite (= o68 (+ (size (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) 1)) true false)))
(assert (= result10 true))
(assert (= (tree_structure (mk___rep2 (us_split_fields__content2 f__split_fields7))) true))
(assert (and (= temp___957 (model__ (mk___rep2 (us_split_fields__content2 f__split_fields7)) root)) (and (dynamic_invariant2 temp___957 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___957 root)))) 0) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (not (= i5 root)) (ite (and (not (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 i5))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 i5))) true)))))) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 i5))) true) (not (= i5 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___957 (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5)))) (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5) (rec__tree_model__path_type__a (us_split_fields1 (select temp___957 i5)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___957 i5)))) 0)))) (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 i5))) true) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___957 j6))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___957 i5))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___957 j6)))) true)) (= j6 i5))))))))))))))
(assert (= o66 (select temp___957 i)))
(assert (= o67 (us_split_fields1 o66)))
(assert (= result11 (rec__tree_model__path_type__k o67)))
(assert (= result11 true))
(assert (= (tree_structure (mk___rep2 (us_split_fields__content2 f__split_fields7))) true))
(assert (and (= o65 (peek (mk___rep2 (us_split_fields__content2 f__split_fields7)) i d)) (and (in_range2 o65) (and (= o65 (ite (= d 0) (to_rep (rec__binary_trees__cell__left (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields__content2 f__split_fields7)) i)))) (to_rep (rec__binary_trees__cell__right (us_split_fields3 (select (rec__binary_trees__forest__c (us_split_fields__content2 f__split_fields7)) i)))))) (and (ite (not (= o65 0)) (and (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) o65) d) (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) o65) i)) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (=> (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6) i) (not (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6) d)))))) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (=> (and (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6) i) (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6) d)) (= o65 j6)))))))))
(assert (= result12 (ite (= o65 (int__content v2)) true false)))
(assert (= result12 true))
(assert (= (= result13 true) (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (ite (= (valid_root (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i5) true) (= (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5) true) (not (= (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5) true)))))))
(assert (= result13 true))
(assert (= (tree_structure (mk___rep2 (us_split_fields__content2 f__split_fields7))) true))
(assert (and (= temp___955 (model__ (mk___rep2 (us_split_fields__content2 f__split_fields7)) root)) (and (dynamic_invariant2 temp___955 true false true) (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 root))) true) (and (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___955 root)))) 0) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (not (= i5 root)) (ite (and (not (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5) 0)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5)))) true)) (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 i5))) true) (not (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 i5))) true)))))) (and (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (ite (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 i5))) true) (not (= i5 root))) (= (is_add (rec__tree_model__path_type__a (us_split_fields1 (select temp___955 (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5)))) (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) i5) (rec__tree_model__path_type__a (us_split_fields1 (select temp___955 i5)))) true) (= (length (rec__tree_model__path_type__a (us_split_fields1 (select temp___955 i5)))) 0)))) (forall ((i5 Int)) (=> (and (<= 1 i5) (<= i5 100)) (=> (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 i5))) true) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (=> (and (= (rec__tree_model__path_type__k (us_split_fields1 (select temp___955 j6))) true) (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select temp___955 i5))) (rec__tree_model__path_type__a (us_split_fields1 (select temp___955 j6)))) true)) (= j6 i5))))))))))))))
(assert (= o63 (select temp___955 (int__content v2))))
(assert (= o64 (us_split_fields1 o63)))
(assert (= result15 (rec__tree_model__path_type__k o64)))
(assert (= result15 true))
(assert (not (= (rec__tree_model__path_type__k (us_split_fields1 (select (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root) (int__content v2)))) true)))
(assert (= (= result16 true) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (=> (not (= j6 (int__content v2))) (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6) (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j6)))))))
(assert (= result16 true))
(assert (= (= result17 true) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (=> (and (not (= j6 (int__content v2))) (not (= (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j6) 0))) (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6) (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j6)))))))
(assert (= result17 true))
(assert (= (= result19 true) (forall ((j6 Int)) (=> (and (<= 1 j6) (<= j6 100)) (forall ((e1 Int)) (=> (and (<= 0 e1) (<= e1 1)) (=> (or (not (= j6 i)) (not (= e1 d))) (= (peek (mk___rep2 (us_split_fields__content2 f__split_fields7)) j6 e1) (peek (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j6 e1)))))))))
(assert (= result19 true))
(assert (<= 1 j2))
(assert (<= j2 100))
(assert (= (tree_structure (mk___rep2 (us_split_fields__content2 f__split_fields7))) true))
(assert (not (= (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) root) true)))
(check-sat)
(exit)
