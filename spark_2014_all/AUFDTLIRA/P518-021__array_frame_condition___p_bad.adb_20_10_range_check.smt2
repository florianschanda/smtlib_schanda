(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-sort map1 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) (Array Int integer))
(declare-fun set (map1 Int Int (Array Int integer)) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a (Array Int integer))) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a (Array Int integer))) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide1 (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide1 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq1 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2))) (= (bool_eq (get a temp___idx_155 temp___idx_156) 1 3 (get b (+ (- b__first a__first) temp___idx_155) (+ (- b__first_2 a__first_2) temp___idx_156)) 1 3) true)))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq1 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2))) (= (bool_eq (get a temp___idx_155 temp___idx_156) 1 3 (get b (+ (- b__first a__first) temp___idx_155) (+ (- b__first_2 a__first_2) temp___idx_156)) 1 3) true))))))))
(declare-const dummy3 map1)
(declare-const value__size1 Int)
(declare-fun object__size1 (map1) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 (map1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (map1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a map1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a map1)) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a map1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (map1 map1) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int map1))))))
(declare-fun slide2 ((Array Int map1) Int Int) (Array Int map1))
(assert (forall ((a (Array Int map1))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int map1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int map1)) (a__first Int) (a__last Int) (b (Array Int map1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq1 (select a temp___idx_157) 1 3 1 3 (select b (+ (- b__first a__first) temp___idx_157)) 1 3 1 3) true)))) true false))
(assert (forall ((a (Array Int map1)) (b (Array Int map1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq1 (select a temp___idx_157) 1 3 1 3 (select b (+ (- b__first a__first) temp___idx_157)) 1 3 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y (Array Int map1))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq4 (integer integer) Bool)
(declare-const dummy4 integer)
(declare-datatypes () ((t12b__ref (mk_t12b__ref (t12b__content integer)))))
(define-fun t12b__ref___projection ((a t12b__ref)) integer (t12b__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int map1)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int map1) (elts a))
(define-fun of_array ((a (Array Int map1)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int map1)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int map1)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int map1)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int map1))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int map1))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int map1))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t) (y1 us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y1) (to_rep (first (rt y1))) (to_rep (last (rt y1)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content us_t)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_t (t13b__content a))
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content integer)))))
(define-fun t14b__ref___projection ((a t14b__ref)) integer (t14b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int map1)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int map1) (elts1 a))
(define-fun of_array1 ((a (Array Int map1)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int map1)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int map1)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int map1)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int map1))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int map1))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int map1))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq4 ((x us_t1) (y1 us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y1) (to_rep (first2 (rt1 y1))) (to_rep (last2 (rt1 y1)))))
(declare-fun user_eq7 (us_t1 us_t1) Bool)
(declare-const dummy7 us_t1)
(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))
(declare-fun p_bad__x__aggregate_def (map1) (Array Int map1))
(declare-fun temp___253 ((Array Int integer)) map1)
(declare-fun temp___258 (Int) (Array Int integer))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 1 3)) (in_range1 temp___expr_204)))
(assert (forall ((temp___251 map1)) (forall ((temp___252 Int)) (= (select (p_bad__x__aggregate_def temp___251) temp___252) temp___251))))
(assert (forall ((temp___255 (Array Int integer))) (forall ((temp___256 Int) (temp___257 Int)) (= (get (temp___253 temp___255) temp___256 temp___257) temp___255))))
(assert (forall ((temp___260 Int)) (=> (dynamic_invariant temp___260 true true true true) (forall ((temp___261 Int)) (= (to_rep (select (temp___258 temp___260) temp___261)) temp___260)))))
(declare-const x (Array Int map1))
(declare-const i3 Int)
(declare-const i21 Int)
(declare-const i22 Int)
(declare-const i1 Int)
(declare-const o integer)
(declare-const o1 (Array Int integer))
(declare-const o2 map1)
(declare-const o3 (Array Int map1))
(declare-const o4 integer)
(declare-const o5 (Array Int integer))
(declare-const o6 map1)
(declare-const o7 (Array Int map1))
(declare-const o8 integer)
(declare-const o9 (Array Int integer))
(declare-const o10 map1)
(declare-const o11 (Array Int map1))
(declare-const o12 integer)
(declare-const o13 (Array Int integer))
(declare-const o14 map1)
(declare-const o15 (Array Int map1))
(declare-const o16 integer)
(declare-const o17 (Array Int integer))
(declare-const o18 map1)
(declare-const o19 (Array Int map1))
(declare-const o20 integer)
(declare-const o21 (Array Int integer))
(declare-const o22 map1)
(declare-const o23 (Array Int map1))
(declare-const o24 integer)
(declare-const o25 (Array Int integer))
(declare-const o26 map1)
(declare-const o27 (Array Int map1))
(declare-const o28 integer)
(declare-const o29 (Array Int integer))
(declare-const o30 map1)
(declare-const o31 (Array Int map1))
(declare-const o32 integer)
(declare-const o33 (Array Int integer))
(declare-const o34 map1)
(declare-const o35 (Array Int map1))
(declare-const o36 integer)
(declare-const o37 (Array Int integer))
(declare-const o38 map1)
(declare-const o39 (Array Int map1))
(declare-const o40 integer)
(declare-const o41 (Array Int integer))
(declare-const o42 map1)
(declare-const o43 (Array Int map1))
(declare-const o44 integer)
(declare-const o45 (Array Int integer))
(declare-const o46 map1)
(declare-const o47 (Array Int map1))
(declare-const o48 integer)
(declare-const o49 (Array Int integer))
(declare-const o50 map1)
(declare-const o51 (Array Int map1))
(declare-const o52 integer)
(declare-const o53 (Array Int integer))
(declare-const o54 map1)
(declare-const o55 (Array Int map1))
(declare-const o56 integer)
(declare-const o57 (Array Int integer))
(declare-const o58 map1)
(declare-const o59 (Array Int map1))
(declare-const o60 integer)
(declare-const o61 (Array Int integer))
(declare-const o62 map1)
(declare-const o63 (Array Int map1))
(declare-const o64 integer)
(declare-const o65 (Array Int integer))
(declare-const o66 map1)
(declare-const o67 (Array Int map1))
(declare-const o68 integer)
(declare-const o69 (Array Int integer))
(declare-const o70 map1)
(declare-const o71 (Array Int map1))
(declare-const o72 integer)
(declare-const o73 (Array Int integer))
(declare-const o74 map1)
(declare-const o75 (Array Int map1))
(declare-const o76 integer)
(declare-const o77 (Array Int integer))
(declare-const o78 map1)
(declare-const o79 (Array Int map1))
(declare-const o80 integer)
(declare-const o81 (Array Int integer))
(declare-const o82 map1)
(declare-const o83 (Array Int map1))
(declare-const o84 integer)
(declare-const o85 (Array Int integer))
(declare-const o86 map1)
(declare-const o87 (Array Int map1))
(declare-const o88 integer)
(declare-const o89 (Array Int integer))
(declare-const o90 map1)
(declare-const o91 (Array Int map1))
(declare-const o92 integer)
(declare-const o93 (Array Int integer))
(declare-const o94 map1)
(declare-const o95 (Array Int map1))
(declare-const o96 integer)
(declare-const o97 (Array Int integer))
(declare-const o98 map1)
(declare-const o99 (Array Int map1))
(declare-const o100 integer)
(declare-const o101 (Array Int integer))
(declare-const o102 map1)
(declare-const o103 (Array Int map1))
(declare-const o104 integer)
(declare-const o105 (Array Int integer))
(declare-const o106 map1)
(declare-const o107 (Array Int map1))
(declare-const o108 (Array Int map1))
(declare-const temp___289 (Array Int map1))
(declare-const temp___2891 t1)
(declare-const result (Array Int map1))
(declare-const x1 (Array Int map1))
(declare-const result1 Int)
(declare-const i31 Int)
(declare-const result2 Int)
(declare-const i211 Int)
(declare-const result3 Int)
(declare-const i221 Int)
(declare-const result4 Int)
(declare-const i11 Int)
(declare-const result5 (Array Int map1))
(declare-const x2 (Array Int map1))
(declare-const result6 Int)
(declare-const i12 Int)
(declare-const result7 (Array Int map1))
(declare-const x3 (Array Int map1))
(declare-const result8 Int)
(declare-const i13 Int)
(declare-const result9 (Array Int map1))
(declare-const x4 (Array Int map1))
(declare-const result10 Int)
(declare-const i222 Int)
(declare-const result11 Int)
(declare-const i14 Int)
(declare-const result12 (Array Int map1))
(declare-const x5 (Array Int map1))
(declare-const result13 int__ref)
(declare-const i15 Int)
(declare-const result14 map__ref2)
(declare-const x6 (Array Int map1))
(declare-const result15 int__ref)
(declare-const i16 Int)
(declare-const result16 map__ref2)
(declare-const x7 (Array Int map1))
(declare-const result17 int__ref)
(declare-const i223 Int)
(declare-const result18 int__ref)
(declare-const i17 Int)
(declare-const result19 map__ref2)
(declare-const x8 (Array Int map1))
(declare-const result20 int__ref)
(declare-const i18 Int)
(declare-const result21 map__ref2)
(declare-const x9 (Array Int map1))
(declare-const result22 int__ref)
(declare-const i19 Int)
(declare-const result23 map__ref2)
(declare-const x10 (Array Int map1))
(declare-const result24 int__ref)
(declare-const i212 Int)
(declare-const result25 int__ref)
(declare-const i224 Int)
(declare-const result26 int__ref)
(declare-const i110 Int)
(declare-const result27 map__ref2)
(declare-const x11 (Array Int map1))
(declare-const result28 int__ref)
(declare-const i111 Int)
(declare-const result29 map__ref2)
(declare-const x12 (Array Int map1))
(declare-const result30 int__ref)
(declare-const i112 Int)
(declare-const result31 map__ref2)
(declare-const x13 (Array Int map1))
(declare-const result32 int__ref)
(declare-const i225 Int)
(declare-const result33 int__ref)
(declare-const i113 Int)
(declare-const result34 map__ref2)
(declare-const x14 (Array Int map1))
(declare-const result35 int__ref)
(declare-const i114 Int)
(declare-const result36 map__ref2)
(declare-const x15 (Array Int map1))
(declare-const result37 int__ref)
(declare-const i115 Int)
(declare-const result38 map__ref2)
(declare-const x16 (Array Int map1))
(declare-const result39 int__ref)
(declare-const i226 Int)
(declare-const result40 int__ref)
(declare-const i116 Int)
(declare-const result41 map__ref2)
(declare-const x17 (Array Int map1))
(declare-const result42 int__ref)
(declare-const i117 Int)
(declare-const result43 map__ref2)
(declare-const x18 (Array Int map1))
(declare-const result44 int__ref)
(declare-const i118 Int)
(declare-const result45 map__ref2)
(declare-const x19 (Array Int map1))
(declare-const result46 int__ref)
(declare-const i213 Int)
(declare-const result47 int__ref)
(declare-const i227 Int)
(declare-const result48 int__ref)
(declare-const i119 Int)
(declare-const result49 map__ref2)
(declare-const x20 (Array Int map1))
(declare-const result50 int__ref)
(declare-const i120 Int)
(declare-const result51 map__ref2)
(declare-const x21 (Array Int map1))
(declare-const result52 int__ref)
(declare-const i121 Int)
(declare-const result53 map__ref2)
(declare-const x22 (Array Int map1))
(declare-const result54 int__ref)
(declare-const i228 Int)
(declare-const result55 int__ref)
(declare-const i122 Int)
(declare-const result56 map__ref2)
(declare-const x23 (Array Int map1))
(declare-const result57 int__ref)
(declare-const i123 Int)
(declare-const result58 map__ref2)
(declare-const x24 (Array Int map1))
(declare-const result59 int__ref)
(declare-const i124 Int)
(declare-const result60 map__ref2)
(declare-const x25 (Array Int map1))
(declare-const result61 int__ref)
(declare-const i229 Int)
(declare-const result62 int__ref)
(declare-const i125 Int)
(declare-const result63 map__ref2)
(declare-const x26 (Array Int map1))
(declare-const result64 int__ref)
(declare-const i126 Int)
(declare-const result65 map__ref2)
(declare-const x27 (Array Int map1))
(declare-const result66 int__ref)
(declare-const i127 Int)
(declare-const result67 map__ref2)
(declare-const x28 (Array Int map1))
(assert (= result x))
(assert (= x1 (p_bad__x__aggregate_def (temp___253 (temp___258 0)))))
(assert (= x1 y))
(assert (= result1 i3))
(assert (= i31 1))
(assert (= result2 i21))
(assert (= i211 1))
(assert (= result3 i22))
(assert (= i221 1))
(assert (= result4 i1))
(assert (= i11 1))
(assert (= (to_rep o) 1))
(assert (= o1 (store (get (select x1 i31) i211 i221) i11 o)))
(assert (= o2 (set (select x1 i31) i211 i221 o1)))
(assert (= o3 (store x1 i31 o2)))
(assert (= result5 x1))
(assert (= x2 o3))
(assert (= result6 i11))
(assert (= i12 2))
(assert (= (to_rep o4) 1))
(assert (= o5 (store (get (select x2 i31) i211 i221) i12 o4)))
(assert (= o6 (set (select x2 i31) i211 i221 o5)))
(assert (= o7 (store x2 i31 o6)))
(assert (= result7 x2))
(assert (= x3 o7))
(assert (= result8 i12))
(assert (= i13 3))
(assert (= (to_rep o8) 1))
(assert (= o9 (store (get (select x3 i31) i211 i221) i13 o8)))
(assert (= o10 (set (select x3 i31) i211 i221 o9)))
(assert (= o11 (store x3 i31 o10)))
(assert (= result9 x3))
(assert (= x4 o11))
(assert (= result10 i221))
(assert (= i222 2))
(assert (= result11 i13))
(assert (= i14 1))
(assert (= (to_rep o12) 1))
(assert (= o13 (store (get (select x4 i31) i211 i222) i14 o12)))
(assert (= o14 (set (select x4 i31) i211 i222 o13)))
(assert (= o15 (store x4 i31 o14)))
(assert (= result12 x4))
(assert (= x5 o15))
(assert (= result13 (mk_int__ref i14)))
(assert (= i15 2))
(assert (= (to_rep o16) 1))
(assert (= o17 (store (get (select x5 i31) i211 i222) i15 o16)))
(assert (= o18 (set (select x5 i31) i211 i222 o17)))
(assert (= o19 (store x5 i31 o18)))
(assert (= result14 (mk_map__ref2 x5)))
(assert (= x6 o19))
(assert (= result15 (mk_int__ref i15)))
(assert (= i16 3))
(assert (= (to_rep o20) 1))
(assert (= o21 (store (get (select x6 i31) i211 i222) i16 o20)))
(assert (= o22 (set (select x6 i31) i211 i222 o21)))
(assert (= o23 (store x6 i31 o22)))
(assert (= result16 (mk_map__ref2 x6)))
(assert (= x7 o23))
(assert (= result17 (mk_int__ref i222)))
(assert (= i223 3))
(assert (= result18 (mk_int__ref i16)))
(assert (= i17 1))
(assert (= (to_rep o24) 1))
(assert (= o25 (store (get (select x7 i31) i211 i223) i17 o24)))
(assert (= o26 (set (select x7 i31) i211 i223 o25)))
(assert (= o27 (store x7 i31 o26)))
(assert (= result19 (mk_map__ref2 x7)))
(assert (= x8 o27))
(assert (= result20 (mk_int__ref i17)))
(assert (= i18 2))
(assert (= (to_rep o28) 1))
(assert (= o29 (store (get (select x8 i31) i211 i223) i18 o28)))
(assert (= o30 (set (select x8 i31) i211 i223 o29)))
(assert (= o31 (store x8 i31 o30)))
(assert (= result21 (mk_map__ref2 x8)))
(assert (= x9 o31))
(assert (= result22 (mk_int__ref i18)))
(assert (= i19 3))
(assert (= (to_rep o32) 1))
(assert (= o33 (store (get (select x9 i31) i211 i223) i19 o32)))
(assert (= o34 (set (select x9 i31) i211 i223 o33)))
(assert (= o35 (store x9 i31 o34)))
(assert (= result23 (mk_map__ref2 x9)))
(assert (= x10 o35))
(assert (= result24 (mk_int__ref i211)))
(assert (= i212 2))
(assert (= result25 (mk_int__ref i223)))
(assert (= i224 1))
(assert (= result26 (mk_int__ref i19)))
(assert (= i110 1))
(assert (= (to_rep o36) 1))
(assert (= o37 (store (get (select x10 i31) i212 i224) i110 o36)))
(assert (= o38 (set (select x10 i31) i212 i224 o37)))
(assert (= o39 (store x10 i31 o38)))
(assert (= result27 (mk_map__ref2 x10)))
(assert (= x11 o39))
(assert (= result28 (mk_int__ref i110)))
(assert (= i111 2))
(assert (= (to_rep o40) 1))
(assert (= o41 (store (get (select x11 i31) i212 i224) i111 o40)))
(assert (= o42 (set (select x11 i31) i212 i224 o41)))
(assert (= o43 (store x11 i31 o42)))
(assert (= result29 (mk_map__ref2 x11)))
(assert (= x12 o43))
(assert (= result30 (mk_int__ref i111)))
(assert (= i112 3))
(assert (= (to_rep o44) 1))
(assert (= o45 (store (get (select x12 i31) i212 i224) i112 o44)))
(assert (= o46 (set (select x12 i31) i212 i224 o45)))
(assert (= o47 (store x12 i31 o46)))
(assert (= result31 (mk_map__ref2 x12)))
(assert (= x13 o47))
(assert (= result32 (mk_int__ref i224)))
(assert (= i225 2))
(assert (= result33 (mk_int__ref i112)))
(assert (= i113 1))
(assert (= (to_rep o48) 1))
(assert (= o49 (store (get (select x13 i31) i212 i225) i113 o48)))
(assert (= o50 (set (select x13 i31) i212 i225 o49)))
(assert (= o51 (store x13 i31 o50)))
(assert (= result34 (mk_map__ref2 x13)))
(assert (= x14 o51))
(assert (= result35 (mk_int__ref i113)))
(assert (= i114 2))
(assert (= (to_rep o52) 1))
(assert (= o53 (store (get (select x14 i31) i212 i225) i114 o52)))
(assert (= o54 (set (select x14 i31) i212 i225 o53)))
(assert (= o55 (store x14 i31 o54)))
(assert (= result36 (mk_map__ref2 x14)))
(assert (= x15 o55))
(assert (= result37 (mk_int__ref i114)))
(assert (= i115 3))
(assert (= (to_rep o56) 1))
(assert (= o57 (store (get (select x15 i31) i212 i225) i115 o56)))
(assert (= o58 (set (select x15 i31) i212 i225 o57)))
(assert (= o59 (store x15 i31 o58)))
(assert (= result38 (mk_map__ref2 x15)))
(assert (= x16 o59))
(assert (= result39 (mk_int__ref i225)))
(assert (= i226 3))
(assert (= result40 (mk_int__ref i115)))
(assert (= i116 1))
(assert (= (to_rep o60) 1))
(assert (= o61 (store (get (select x16 i31) i212 i226) i116 o60)))
(assert (= o62 (set (select x16 i31) i212 i226 o61)))
(assert (= o63 (store x16 i31 o62)))
(assert (= result41 (mk_map__ref2 x16)))
(assert (= x17 o63))
(assert (= result42 (mk_int__ref i116)))
(assert (= i117 2))
(assert (= (to_rep o64) 1))
(assert (= o65 (store (get (select x17 i31) i212 i226) i117 o64)))
(assert (= o66 (set (select x17 i31) i212 i226 o65)))
(assert (= o67 (store x17 i31 o66)))
(assert (= result43 (mk_map__ref2 x17)))
(assert (= x18 o67))
(assert (= result44 (mk_int__ref i117)))
(assert (= i118 3))
(assert (= (to_rep o68) 1))
(assert (= o69 (store (get (select x18 i31) i212 i226) i118 o68)))
(assert (= o70 (set (select x18 i31) i212 i226 o69)))
(assert (= o71 (store x18 i31 o70)))
(assert (= result45 (mk_map__ref2 x18)))
(assert (= x19 o71))
(assert (= result46 (mk_int__ref i212)))
(assert (= i213 3))
(assert (= result47 (mk_int__ref i226)))
(assert (= i227 1))
(assert (= result48 (mk_int__ref i118)))
(assert (= i119 1))
(assert (= (to_rep o72) 1))
(assert (= o73 (store (get (select x19 i31) i213 i227) i119 o72)))
(assert (= o74 (set (select x19 i31) i213 i227 o73)))
(assert (= o75 (store x19 i31 o74)))
(assert (= result49 (mk_map__ref2 x19)))
(assert (= x20 o75))
(assert (= result50 (mk_int__ref i119)))
(assert (= i120 2))
(assert (= (to_rep o76) 1))
(assert (= o77 (store (get (select x20 i31) i213 i227) i120 o76)))
(assert (= o78 (set (select x20 i31) i213 i227 o77)))
(assert (= o79 (store x20 i31 o78)))
(assert (= result51 (mk_map__ref2 x20)))
(assert (= x21 o79))
(assert (= result52 (mk_int__ref i120)))
(assert (= i121 3))
(assert (= (to_rep o80) 1))
(assert (= o81 (store (get (select x21 i31) i213 i227) i121 o80)))
(assert (= o82 (set (select x21 i31) i213 i227 o81)))
(assert (= o83 (store x21 i31 o82)))
(assert (= result53 (mk_map__ref2 x21)))
(assert (= x22 o83))
(assert (= result54 (mk_int__ref i227)))
(assert (= i228 2))
(assert (= result55 (mk_int__ref i121)))
(assert (= i122 1))
(assert (= (to_rep o84) 1))
(assert (= o85 (store (get (select x22 i31) i213 i228) i122 o84)))
(assert (= o86 (set (select x22 i31) i213 i228 o85)))
(assert (= o87 (store x22 i31 o86)))
(assert (= result56 (mk_map__ref2 x22)))
(assert (= x23 o87))
(assert (= result57 (mk_int__ref i122)))
(assert (= i123 2))
(assert (= (to_rep o88) 1))
(assert (= o89 (store (get (select x23 i31) i213 i228) i123 o88)))
(assert (= o90 (set (select x23 i31) i213 i228 o89)))
(assert (= o91 (store x23 i31 o90)))
(assert (= result58 (mk_map__ref2 x23)))
(assert (= x24 o91))
(assert (= result59 (mk_int__ref i123)))
(assert (= i124 3))
(assert (= (to_rep o92) 1))
(assert (= o93 (store (get (select x24 i31) i213 i228) i124 o92)))
(assert (= o94 (set (select x24 i31) i213 i228 o93)))
(assert (= o95 (store x24 i31 o94)))
(assert (= result60 (mk_map__ref2 x24)))
(assert (= x25 o95))
(assert (= result61 (mk_int__ref i228)))
(assert (= i229 3))
(assert (= result62 (mk_int__ref i124)))
(assert (= i125 1))
(assert (= (to_rep o96) 1))
(assert (= o97 (store (get (select x25 i31) i213 i229) i125 o96)))
(assert (= o98 (set (select x25 i31) i213 i229 o97)))
(assert (= o99 (store x25 i31 o98)))
(assert (= result63 (mk_map__ref2 x25)))
(assert (= x26 o99))
(assert (= result64 (mk_int__ref i125)))
(assert (= i126 2))
(assert (= (to_rep o100) 1))
(assert (= o101 (store (get (select x26 i31) i213 i229) i126 o100)))
(assert (= o102 (set (select x26 i31) i213 i229 o101)))
(assert (= o103 (store x26 i31 o102)))
(assert (= result65 (mk_map__ref2 x26)))
(assert (= x27 o103))
(assert (= result66 (mk_int__ref i126)))
(assert (= i127 3))
(assert (= (to_rep o104) 1))
(assert (= o105 (store (get (select x27 i31) i213 i229) i127 o104)))
(assert (= o106 (set (select x27 i31) i213 i229 o105)))
(assert (= o107 (store x27 i31 o106)))
(assert (= result67 (mk_map__ref2 x27)))
(assert (= x28 o107))
(assert (=> (<= i31 3) (and (and (<= 1 i31) (<= i31 3)) (and (<= 1 3) (<= 3 3)))))
(assert (= o108 y))
(assert (= temp___289 o108))
(assert (= temp___2891 (mk1 i31 3)))
(assert (<= i31 3))
(assert (not (<= 1 i31)))
(check-sat)
(exit)
