(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort privileget 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (privileget privileget) Bool)
(declare-const dummy privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep (privileget) Int)
(declare-fun of_rep (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort opandnullt 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (opandnullt opandnullt) Bool)
(declare-const dummy1 opandnullt)
(declare-datatypes () ((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt (opandnullt__content a))
(declare-fun to_rep1 (opandnullt) Int)
(declare-fun of_rep1 (Int) opandnullt)
(assert (forall ((x opandnullt)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x opandnullt)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__admin__t__rolepresent privileget) (rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget (rec__admin__t__rolepresent a))
(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt (rec__admin__t__currentop a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__admin__t__rolepresent (us_split_fields1 a))) (to_rep (rec__admin__t__rolepresent (us_split_fields1 b)))) (= (to_rep1 (rec__admin__t__currentop (us_split_fields1 a))) (to_rep1 (rec__admin__t__currentop (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const admin__t__rolepresent__first__bit Int)
(declare-const admin__t__rolepresent__last__bit Int)
(declare-const admin__t__rolepresent__position Int)
(assert (<= 0 admin__t__rolepresent__first__bit))
(assert (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))
(assert (<= 0 admin__t__rolepresent__position))
(declare-const admin__t__currentop__first__bit Int)
(declare-const admin__t__currentop__last__bit Int)
(declare-const admin__t__currentop__position Int)
(assert (<= 0 admin__t__currentop__first__bit))
(assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))
(assert (<= 0 admin__t__currentop__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun ispresent (us_rep) Bool)
(declare-fun ispresent__function_guard (Bool us_rep) Bool)
(declare-sort adminprivileget 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (adminprivileget adminprivileget) Bool)
(declare-const dummy3 adminprivileget)
(declare-datatypes () ((adminprivileget__ref (mk_adminprivileget__ref (adminprivileget__content adminprivileget)))))
(define-fun adminprivileget__ref___projection ((a adminprivileget__ref)) adminprivileget (adminprivileget__content a))
(assert true)
(assert (forall ((theadmin us_rep)) (! (= (= (ispresent theadmin) true) (in_range3 (to_rep (rec__admin__t__rolepresent (us_split_fields1 theadmin))))) :pattern ((ispresent theadmin)))))
(declare-sort opt 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (opt opt) Bool)
(declare-const dummy4 opt)
(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))
(define-fun dynamic_invariant ((temp___expr_479 Int) (temp___is_init_475 Bool) (temp___skip_constant_476 Bool) (temp___do_toplevel_477 Bool) (temp___do_typ_inv_478 Bool)) Bool (=> (or (= temp___is_init_475 true) (<= 1 4)) (in_range4 temp___expr_479)))
(declare-const theadmin us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const op Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))))))))))
(declare-const dummy5 (Array Int Bool))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int Bool)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int Bool)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int Bool)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int Bool) (Array Int Bool)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int Bool)))))))
(declare-fun slide1 ((Array Int (Array Int Bool)) Int Int) (Array Int (Array Int Bool)))
(assert (forall ((a (Array Int (Array Int Bool)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int Bool)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int (Array Int Bool))) (a__first Int) (a__last Int) (b (Array Int (Array Int Bool))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 1 4 (select b (+ (- b__first a__first) temp___idx_156)) 1 4) true)))) true false))
(assert (forall ((a (Array Int (Array Int Bool))) (b (Array Int (Array Int Bool)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 1 4 (select b (+ (- b__first a__first) temp___idx_156)) 1 4) true))))))))
(declare-const isavailable (Array Int (Array Int Bool)))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun admin__isavailable__aggregate_def ((Array Int Bool) (Array Int Bool) (Array Int Bool)) (Array Int (Array Int Bool)))
(declare-fun temp_____aggregate_def_162 (Bool Bool) (Array Int Bool))
(declare-fun temp_____aggregate_def_167 (Bool Bool) (Array Int Bool))
(declare-fun temp_____aggregate_def_172 (Bool Bool Bool) (Array Int Bool))
(define-fun dynamic_invariant1 ((temp___expr_472 Int) (temp___is_init_468 Bool) (temp___skip_constant_469 Bool) (temp___do_toplevel_470 Bool) (temp___do_typ_inv_471 Bool)) Bool (=> (or (= temp___is_init_468 true) (<= 0 4)) (in_range2 temp___expr_472)))
(assert (= isavailable (admin__isavailable__aggregate_def (temp_____aggregate_def_162 (distinct 1 0) (distinct 0 0)) (temp_____aggregate_def_167 (distinct 1 0) (distinct 0 0)) (temp_____aggregate_def_172 (distinct 1 0) (distinct 1 0) (distinct 0 0)))))
(assert (forall ((temp___158 (Array Int Bool)) (temp___159 (Array Int Bool)) (temp___160 (Array Int Bool))) (let ((temp___157 (admin__isavailable__aggregate_def temp___158 temp___159 temp___160))) (and (and (= (select temp___157 1) temp___158) (= (select temp___157 2) temp___159)) (= (select temp___157 3) temp___160)))))
(assert (forall ((temp___164 Bool) (temp___165 Bool)) (let ((temp___163 (temp_____aggregate_def_162 temp___164 temp___165))) (forall ((temp___166 Int)) (ite (= temp___166 3) (= (select temp___163 temp___166) temp___164) (= (select temp___163 temp___166) temp___165))))))
(assert (forall ((temp___169 Bool) (temp___170 Bool)) (let ((temp___168 (temp_____aggregate_def_167 temp___169 temp___170))) (forall ((temp___171 Int)) (ite (= temp___171 1) (= (select temp___168 temp___171) temp___169) (= (select temp___168 temp___171) temp___170))))))
(assert (forall ((temp___174 Bool) (temp___175 Bool) (temp___176 Bool)) (let ((temp___173 (temp_____aggregate_def_172 temp___174 temp___175 temp___176))) (forall ((temp___177 Int)) (ite (= temp___177 4) (= (select temp___173 temp___177) temp___175) (ite (= temp___177 2) (= (select temp___173 temp___177) temp___174) (= (select temp___173 temp___177) temp___176)))))))
(define-fun dynamic_invariant2 ((temp___expr_402 Int) (temp___is_init_398 Bool) (temp___skip_constant_399 Bool) (temp___do_toplevel_400 Bool) (temp___do_typ_inv_401 Bool)) Bool (=> (or (= temp___is_init_398 true) (<= 0 3)) (in_range1 temp___expr_402)))
(define-fun dynamic_invariant3 ((temp___expr_409 Int) (temp___is_init_405 Bool) (temp___skip_constant_406 Bool) (temp___do_toplevel_407 Bool) (temp___do_typ_inv_408 Bool)) Bool (=> (or (= temp___is_init_405 true) (<= 1 3)) (in_range3 temp___expr_409)))
(assert (= (admin__isavailable__aggregate_def (temp_____aggregate_def_162 (distinct 1 0) (distinct 0 0)) (temp_____aggregate_def_167 (distinct 1 0) (distinct 0 0)) (temp_____aggregate_def_172 (distinct 1 0) (distinct 1 0) (distinct 0 0))) isavailable))
(assert (in_range4 op))
(assert (= (ispresent theadmin) true))
(assert (not (<= 1 (to_rep (rec__admin__t__rolepresent (us_split_fields1 theadmin))))))
(check-sat)
(exit)
