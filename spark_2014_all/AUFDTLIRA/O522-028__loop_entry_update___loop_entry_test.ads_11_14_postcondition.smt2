(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_t index_t) Bool)
(declare-const dummy index_t)
(declare-datatypes () ((index_t__ref (mk_index_t__ref (index_t__content index_t)))))
(define-fun index_t__ref___projection ((a index_t__ref)) index_t (index_t__content a))
(define-fun dynamic_invariant ((temp___expr_184 Int) (temp___is_init_181 Bool) (temp___skip_constant_182 Bool) (temp___do_toplevel_183 Bool)) Bool (=> (or (= temp___is_init_181 true) (<= 1 1000)) (in_range1 temp___expr_184)))
(declare-sort component_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (component_t component_t) Bool)
(declare-const dummy1 component_t)
(declare-datatypes () ((component_t__ref (mk_component_t__ref (component_t__content component_t)))))
(define-fun component_t__ref___projection ((a component_t__ref)) component_t (component_t__content a))
(declare-fun to_rep (component_t) Int)
(declare-fun of_rep (Int) component_t)
(assert (forall ((x component_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x component_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int component_t))))))
(declare-fun slide ((Array Int component_t) Int Int) (Array Int component_t))
(assert (forall ((a (Array Int component_t))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int component_t))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int component_t) Int Int (Array Int component_t) Int Int) (Array Int component_t))
(assert (forall ((a (Array Int component_t)) (b (Array Int component_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (component_t Int) (Array Int component_t))
(assert (forall ((v component_t)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int component_t)) (a__first Int) (a__last Int) (b (Array Int component_t)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int component_t)) (b (Array Int component_t))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int component_t) Int Int (Array Int component_t) Int Int) Int)
(assert (forall ((a (Array Int component_t)) (b (Array Int component_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int component_t)) (b (Array Int component_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int component_t)) (b (Array Int component_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const last Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___542 ((Array Int component_t) Int Int Int) (Array Int component_t))
(assert (forall ((temp___544 (Array Int component_t))) (forall ((temp___545 Int) (temp___546 Int) (temp___547 Int)) (let ((temp___543 (temp___542 temp___544 temp___545 temp___546 temp___547))) (forall ((temp___548 Int)) (ite (and (<= temp___545 temp___548) (<= temp___548 temp___546)) (= (select temp___543 temp___548) (of_rep temp___547)) (= (select temp___543 temp___548) (select temp___544 temp___548))))))))
(declare-fun temp___564 ((Array Int component_t) Int Int Int) (Array Int component_t))
(assert (forall ((temp___566 (Array Int component_t))) (forall ((temp___567 Int) (temp___568 Int) (temp___569 Int)) (let ((temp___565 (temp___564 temp___566 temp___567 temp___568 temp___569))) (forall ((temp___570 Int)) (ite (and (<= temp___567 temp___570) (<= temp___570 temp___568)) (= (select temp___565 temp___570) (of_rep temp___569)) (= (select temp___565 temp___570) (select temp___566 temp___570))))))))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_196 Int) (temp___is_init_193 Bool) (temp___skip_constant_194 Bool) (temp___do_toplevel_195 Bool)) Bool (=> (or (= temp___is_init_193 true) (<= 0 2147483647)) (in_range2 temp___expr_196)))
(declare-const a (Array Int component_t))
(declare-const a_loop_entry (Array Int component_t))
(declare-const j Int)
(declare-const temp___562 (Array Int component_t))
(declare-const temp___561 Int)
(declare-const o component_t)
(declare-const o1 (Array Int component_t))
(declare-const a1 (Array Int component_t))
(declare-const result (Array Int component_t))
(declare-const a_loop_entry1 (Array Int component_t))
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 (Array Int component_t))
(declare-const a2 (Array Int component_t))
(declare-const a3 (Array Int component_t))
(declare-const j2 Int)
(declare-const a4 (Array Int component_t))
(declare-const j3 Int)
(declare-const a5 (Array Int component_t))
(declare-const j4 Int)
(declare-const a6 (Array Int component_t))
(declare-const j5 Int)
(declare-const a7 (Array Int component_t))
(declare-const j6 Int)
(declare-const a8 (Array Int component_t))
(declare-const a_loop_entry2 (Array Int component_t))
(declare-const j7 Int)
(declare-const a9 (Array Int component_t))
(declare-const a_loop_entry3 (Array Int component_t))
(declare-const j8 Int)
(define-fun a10 () map__ref (mk_map__ref a6))
(define-fun a11 () map__ref (mk_map__ref a))
(assert (in_range1 first))
(assert (in_range1 last))
(assert (= (mk_map__ref result) (mk_map__ref a_loop_entry)))
(assert (= a_loop_entry1 a))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j1 first))
(assert (=> (and (<= first j1) (<= j1 last)) (= temp___562 a)))
(assert (=> (and (<= first j1) (<= j1 last)) (= temp___561 j1)))
(assert (=> (and (<= first j1) (<= j1 last)) (= (to_rep o) 0)))
(assert (=> (and (<= first j1) (<= j1 last)) (= o1 (store a j1 o))))
(assert (=> (and (<= first j1) (<= j1 last)) (= (mk_map__ref result2) a11)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a2 o1)))
(assert (=> (and (<= first j1) (<= j1 last)) (= (bool_eq a3 1 1000 (temp___564 a_loop_entry1 first j2 0) 1 1000) true)))
(assert (=> (and (<= first j1) (<= j1 last)) (and (and (=> (<= first last) (dynamic_property first last j2)) (forall ((temp___563 Int)) (=> (and (<= 1 temp___563) (<= temp___563 1000)) (=> (< j2 temp___563) (= (select a3 temp___563) (select temp___562 temp___563)))))) (and (<= first j2) (<= j2 last)))))
(assert (=> (and (<= first j1) (<= j1 last)) (= j2 last)))
(assert (=> (and (<= first j1) (<= j1 last)) (= j2 j3)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a3 a4)))
(assert (=> (and (<= first j1) (<= j1 last)) (= j4 j2)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a5 a3)))
(assert (=> (and (<= first j1) (<= j1 last)) (= (mk_int__ref j5) (mk_int__ref j3))))
(assert (=> (and (<= first j1) (<= j1 last)) (= a10 (mk_map__ref a4))))
(assert (=> (and (<= first j1) (<= j1 last)) (= j6 j4)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a7 a5)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= j1 j5)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= a10 a11)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= j6 j1)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= a7 a1)))
(assert (= j7 j5))
(assert (= a_loop_entry2 a_loop_entry1))
(assert (= (mk_map__ref a8) a10))
(assert (= j8 j6))
(assert (= a_loop_entry3 a_loop_entry1))
(assert (= a9 a7))
(assert (not (= (bool_eq a8 1 1000 (temp___542 a first last 0) 1 1000) true)))
(check-sat)
(exit)
