(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort only_true 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (only_true only_true) Bool)
(declare-const dummy only_true)
(declare-datatypes () ((only_true__ref (mk_only_true__ref (only_true__content only_true)))))
(define-fun only_true__ref___projection ((a only_true__ref)) only_true (only_true__content a))
(declare-fun to_rep (only_true) Int)
(declare-fun of_rep (Int) only_true)
(assert (forall ((x only_true)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x only_true)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int only_true))))))
(declare-fun slide ((Array Int only_true) Int Int) (Array Int only_true))
(assert (forall ((a (Array Int only_true))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int only_true))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int only_true) Int Int (Array Int only_true) Int Int) (Array Int only_true))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (only_true Int) (Array Int only_true))
(assert (forall ((v only_true)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int only_true)) (a__first Int) (a__last Int) (b (Array Int only_true)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array Int only_true) Int Int (Array Int only_true) Int Int) Int)
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(define-fun to_bool ((x only_true)) Bool (of_int (to_rep x)))
(define-fun of_bool ((x Bool)) only_true (of_rep (to_int1 x)))
(declare-fun xorb ((Array Int only_true) Int Int (Array Int only_true) Int Int) (Array Int only_true))
(declare-fun andb ((Array Int only_true) Int Int (Array Int only_true) Int Int) (Array Int only_true))
(declare-fun orb ((Array Int only_true) Int Int (Array Int only_true) Int Int) (Array Int only_true))
(declare-fun notb ((Array Int only_true) Int Int) (Array Int only_true))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (of_bool (or (to_bool (select a i)) (to_bool (select b (+ (- i a_first) b_first))))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (of_bool (and (to_bool (select a i)) (to_bool (select b (+ (- i a_first) b_first))))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int only_true)) (b (Array Int only_true))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (of_bool (xor (to_bool (select a i)) (to_bool (select b (+ (- i a_first) b_first))))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int only_true))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (of_bool (not (to_bool (select a i)))))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int only_true)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int only_true) (elts a))
(define-fun of_array ((a (Array Int only_true)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int only_true)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int only_true)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int only_true)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int only_true))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int only_true))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int only_true))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((true_array__ref (mk_true_array__ref (true_array__content us_t)))))
(define-fun true_array__ref___projection ((a true_array__ref)) us_t (true_array__content a))
(define-fun dynamic_invariant ((temp___expr_208 us_t) (temp___is_init_205 Bool) (temp___skip_constant_206 Bool) (temp___do_toplevel_207 Bool)) Bool (=> (not (= temp___skip_constant_206 true)) (dynamic_property (- 2147483648) 2147483647 (first1 temp___expr_208) (last1 temp___expr_208))))
(declare-sort t46b 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (t46b t46b) Bool)
(declare-const dummy3 t46b)
(declare-datatypes () ((t46b__ref (mk_t46b__ref (t46b__content t46b)))))
(define-fun t46b__ref___projection ((a t46b__ref)) t46b (t46b__content a))
(declare-const w us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun array_logical_ops__failing_content_check__w__aggregate_def (Int) (Array Int only_true))
(assert (forall ((temp___183 Int)) (forall ((temp___184 Int)) (= (select (array_logical_ops__failing_content_check__w__aggregate_def temp___183) temp___184) (of_rep temp___183)))))
(declare-sort t48b 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 6 x) (<= x 25)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (t48b t48b) Bool)
(declare-const dummy4 t48b)
(declare-datatypes () ((t48b__ref (mk_t48b__ref (t48b__content t48b)))))
(define-fun t48b__ref___projection ((a t48b__ref)) t48b (t48b__content a))
(declare-const v us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun array_logical_ops__failing_content_check__v__aggregate_def (Int) (Array Int only_true))
(assert (forall ((temp___186 Int)) (forall ((temp___187 Int)) (= (select (array_logical_ops__failing_content_check__v__aggregate_def temp___186) temp___187) (of_rep temp___186)))))
(declare-const r1 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r2 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_15)))
(assert (= w (of_array (array_logical_ops__failing_content_check__w__aggregate_def 1) 1 20)))
(assert (= v (of_array (array_logical_ops__failing_content_check__v__aggregate_def 1) 6 25)))
(assert (= r1 (of_array (xorb (to_array v) (first1 v) (last1 v) (to_array w) (first1 w) (last1 w)) (first1 v) (last1 v))))
(assert (= r2 (of_array (notb (to_array v) (first1 v) (last1 v)) (first1 v) (last1 v))))
(define-fun dynamic_invariant2 ((temp___expr_202 Int) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool)) Bool (=> (or (= temp___is_init_199 true) (<= 1 1)) (in_range1 temp___expr_202)))
(assert (= (mk___t (array_logical_ops__failing_content_check__w__aggregate_def 1) (mk 1 20)) w))
(assert (dynamic_invariant w true false true))
(assert (= (mk___t (array_logical_ops__failing_content_check__v__aggregate_def 1) (mk 6 25)) v))
(assert (dynamic_invariant v true false true))
(assert (not (not (< 0 (ite (<= (to_rep1 (first (rt v))) (to_rep1 (last (rt v)))) (+ (- (to_rep1 (last (rt v))) (to_rep1 (first (rt v)))) 1) 0)))))
(check-sat)
(exit)
