(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type pointer_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : pointer_range, pointer_range -> bool

logic dummy1 : pointer_range

type pointer_range__ref = { pointer_range__content : pointer_range
}

function pointer_range__ref___projection(a: pointer_range__ref) : pointer_range =
  (a).pointer_range__content

logic to_rep1 : pointer_range -> int

logic of_rep1 : int -> pointer_range

axiom inversion_axiom1 :
  (forall x:pointer_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:pointer_range [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index_range

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_range, index_range -> bool

logic dummy2 : index_range

type index_range__ref = { index_range__content : index_range
}

function index_range__ref___projection(a: index_range__ref) : index_range =
  (a).index_range__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy3 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__stack_functional_spec__stack_type__s :
(int,integer) farray; rec__stack_functional_spec__stack_type__pointer :
pointer_range
}

function us_split_fields_S__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__stack_functional_spec__stack_type__s

function us_split_fields_Pointer__projection(a: us_split_fields) : pointer_range =
  (a).rec__stack_functional_spec__stack_type__pointer

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((bool_eq5(((a).us_split_fields1).rec__stack_functional_spec__stack_type__s,
  1, 100, ((b).us_split_fields1).rec__stack_functional_spec__stack_type__s,
  1, 100) = true) and
  (to_rep1(((a).us_split_fields1).rec__stack_functional_spec__stack_type__pointer) = to_rep1(((b).us_split_fields1).rec__stack_functional_spec__stack_type__pointer))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields1).rec__stack_functional_spec__stack_type__s,
  1, 100, ((b).us_split_fields1).rec__stack_functional_spec__stack_type__s,
  1, 100) = true) and
  (to_rep1(((a).us_split_fields1).rec__stack_functional_spec__stack_type__pointer) = to_rep1(((b).us_split_fields1).rec__stack_functional_spec__stack_type__pointer)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. forall a1:pointer_range.
  (0 <= object__size1({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = a;
  rec__stack_functional_spec__stack_type__pointer = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. forall a1:pointer_range.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = a;
  rec__stack_functional_spec__stack_type__pointer = a1 } })))

logic stack_functional_spec__stack_type__s__first__bit : int

logic stack_functional_spec__stack_type__s__last__bit : int

logic stack_functional_spec__stack_type__s__position : int

axiom stack_functional_spec__stack_type__s__first__bit_axiom :
  (0 <= stack_functional_spec__stack_type__s__first__bit)

axiom stack_functional_spec__stack_type__s__last__bit_axiom :
  (stack_functional_spec__stack_type__s__first__bit <  stack_functional_spec__stack_type__s__last__bit)

axiom stack_functional_spec__stack_type__s__position_axiom :
  (0 <= stack_functional_spec__stack_type__s__position)

logic stack_functional_spec__stack_type__pointer__first__bit : int

logic stack_functional_spec__stack_type__pointer__last__bit : int

logic stack_functional_spec__stack_type__pointer__position : int

axiom stack_functional_spec__stack_type__pointer__first__bit_axiom :
  (0 <= stack_functional_spec__stack_type__pointer__first__bit)

axiom stack_functional_spec__stack_type__pointer__last__bit_axiom :
  (stack_functional_spec__stack_type__pointer__first__bit <  stack_functional_spec__stack_type__pointer__last__bit)

axiom stack_functional_spec__stack_type__pointer__position_axiom :
  (0 <= stack_functional_spec__stack_type__pointer__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : (int,integer) farray

logic dummy5 : pointer_range

type stack_type__ref = { stack_type__content : us_rep
}

function stack_type__ref___projection(a: stack_type__ref) : us_rep =
  (a).stack_type__content

logic attr__ATTRIBUTE_ADDRESS : int

logic state__2 : us_split_fields -> us_rep

logic state__2__function_guard : us_rep, us_split_fields -> prop

axiom state__2__post_axiom : true

axiom state__2__def_axiom :
  (forall stack_functional_spec__my_stack__fields:(int,integer) farray.
  forall stack_functional_spec__my_stack__fields1:pointer_range [state__2({
  rec__stack_functional_spec__stack_type__s =
  stack_functional_spec__my_stack__fields;
  rec__stack_functional_spec__stack_type__pointer =
  stack_functional_spec__my_stack__fields1 })]. (state__2({
  rec__stack_functional_spec__stack_type__s =
  stack_functional_spec__my_stack__fields;
  rec__stack_functional_spec__stack_type__pointer =
  stack_functional_spec__my_stack__fields1 }) = { us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s =
  stack_functional_spec__my_stack__fields;
  rec__stack_functional_spec__stack_type__pointer =
  stack_functional_spec__my_stack__fields1 } }))

logic count : us_rep -> int

logic count__function_guard : int, us_rep -> prop

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : natural, natural -> bool

logic dummy6 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

axiom count__post_axiom :
  (forall s:(int,integer) farray. forall s1:pointer_range [count({
  us_split_fields1 = { rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } })].
  in_range4(count({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } })))

axiom count__def_axiom :
  (forall s:(int,integer) farray. forall s1:pointer_range [count({
  us_split_fields1 = { rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } })]. (count({
  us_split_fields1 = { rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } }) = to_rep1(s1)))

logic stack_entry : us_rep, int -> int

logic stack_entry__function_guard : int, us_rep, int -> prop

axiom stack_entry__post_axiom :
  (forall s:(int,integer) farray. forall s1:pointer_range.
  (forall n:int [stack_entry({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } }, n)].
  ((in_range4(n) and ((1 <= n) and (n <= count({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } })))) ->
  in_range1(stack_entry({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } }, n)))))

axiom stack_entry__def_axiom :
  (forall s:(int,integer) farray. forall s1:pointer_range.
  (forall n:int [stack_entry({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } }, n)].
  (in_range4(n) -> (stack_entry({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = s;
  rec__stack_functional_spec__stack_type__pointer = s1 } },
  n) = to_rep((s[n]))))))

logic is_empty : us_split_fields -> bool

logic is_empty__function_guard : bool, us_split_fields -> prop

axiom is_empty__post_axiom : true

axiom is_empty__def_axiom :
  (forall stack_functional_spec__my_stack__fields:(int,integer) farray.
  forall stack_functional_spec__my_stack__fields1:pointer_range [is_empty({
  rec__stack_functional_spec__stack_type__s =
  stack_functional_spec__my_stack__fields;
  rec__stack_functional_spec__stack_type__pointer =
  stack_functional_spec__my_stack__fields1 })]. ((is_empty({
  rec__stack_functional_spec__stack_type__s =
  stack_functional_spec__my_stack__fields;
  rec__stack_functional_spec__stack_type__pointer =
  stack_functional_spec__my_stack__fields1 }) = true) <-> (count(state__2({
  rec__stack_functional_spec__stack_type__s =
  stack_functional_spec__my_stack__fields;
  rec__stack_functional_spec__stack_type__pointer =
  stack_functional_spec__my_stack__fields1 })) = 0)))

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "stack_functional_spec.ads", line 33, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall my_stack__split_fields:(int,integer) farray.
  forall my_stack__split_fields1:pointer_range. forall o:int.
  forall o1:integer. forall o2:int. forall o3:int. forall o4:pointer_range.
  forall o5:(int,integer) farray. forall o6:pointer_range.
  forall temp___240:(int,integer) farray. forall temp___2401:pointer_range.
  forall o7:int. forall i:int. forall o8:(int,integer) farray.
  forall o9:pointer_range. forall o10:int. forall o11:bool. forall o12:bool.
  forall result:int. forall x1:int. forall result1:(int,integer) farray.
  forall result2:pointer_range.
  forall my_stack__split_fields2:(int,integer) farray.
  forall my_stack__split_fields3:pointer_range. forall x2:int.
  forall my_stack__split_fields4:(int,integer) farray.
  forall my_stack__split_fields5:pointer_range. forall x3:int.
  forall my_stack__split_fields6:(int,integer) farray.
  forall my_stack__split_fields7:pointer_range. forall result3:bool.
  ((((- 2147483648) <= 2147483647) -> in_range1(x)) -> ((not (is_empty({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields1
  }) = true)) -> (((((((((1 <= to_rep1(my_stack__split_fields1)) and
  (to_rep1(my_stack__split_fields1) <= 100)) and
  (o = to_rep1(my_stack__split_fields1))) and
  (o1 = (my_stack__split_fields[o]))) and (o2 = to_rep(o1))) and (({
  int__content = result } = { int__content = x }) and (x1 = o2))) and
  ((((((o3 = (to_rep1(my_stack__split_fields1) - 1)) and
  in_range2((to_rep1(my_stack__split_fields1) - 1))) and
  (to_rep1(o4) = o3)) and ((my_stack__split_fields = o5) and (o4 = o6))) and
  ((temp___240 = o5) and (temp___2401 = o6))) and (({
  us_split_fields__content = { rec__stack_functional_spec__stack_type__s =
  result1; rec__stack_functional_spec__stack_type__pointer = result2 } } = {
  us_split_fields__content = { rec__stack_functional_spec__stack_type__s =
  my_stack__split_fields; rec__stack_functional_spec__stack_type__pointer =
  my_stack__split_fields1 } }) and
  ((temp___240 = my_stack__split_fields2) and
  (temp___2401 = my_stack__split_fields3))))) and
  ((((my_stack__split_fields4 = my_stack__split_fields2) and
  (my_stack__split_fields5 = my_stack__split_fields3)) and (x1 = x2)) and (({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields6;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields7
  } = { rec__stack_functional_spec__stack_type__s = my_stack__split_fields2;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields3
  }) and (x3 = x1)))) -> ((((((({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = o8;
  rec__stack_functional_spec__stack_type__pointer = o9 } } = state__2({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields4;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields5
  })) and ((my_stack__split_fields4 = o8) and
  (my_stack__split_fields5 = o9))) and ((o10 = count({ us_split_fields1 = {
  rec__stack_functional_spec__stack_type__s = o8;
  rec__stack_functional_spec__stack_type__pointer = o9 } })) and
  (in_range4(o10) and (o10 = to_rep1(o9))))) and (((i <= o10) and
  (o11 = true)) or ((not (i <= o10)) and (o11 = false)))) and (((1 <= i) and
  (result3 = o11)) or ((not (1 <= i)) and (result3 = false)))) and
  ((o12 = true) <->
  (forall i1:int. (((1 <= i1) and (i1 <= count(state__2({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields4;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields5
  })))) -> (stack_entry(state__2({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields4;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields5
  }), i1) = stack_entry(state__2({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields1
  }), i1)))))) -> (((o7 = count(state__2({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields1
  }))) and (in_range4(o7) and (o7 = to_rep1(((state__2({
  rec__stack_functional_spec__stack_type__s = my_stack__split_fields;
  rec__stack_functional_spec__stack_type__pointer = my_stack__split_fields1
  })).us_split_fields1).rec__stack_functional_spec__stack_type__pointer)))) ->
  (1 <= o7)))))))
