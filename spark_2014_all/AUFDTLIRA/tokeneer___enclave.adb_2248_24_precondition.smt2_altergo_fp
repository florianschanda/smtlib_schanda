(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type presencet

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : presencet, presencet -> bool

logic dummy5 : presencet

type presencet__ref = { presencet__content : presencet
}

function presencet__ref___projection(a: presencet__ref) : presencet =
  (a).presencet__content

type datai

predicate in_range5(x: int) = ((1 <= x) and (x <= 78))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : datai, datai -> bool

logic dummy6 : datai

type datai__ref = { datai__content : datai
}

function datai__ref___projection(a: datai__ref) : datai = (a).datai__content

type datalengtht

predicate in_range6(x: int) = ((0 <= x) and (x <= 78))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : datalengtht, datalengtht -> bool

logic dummy7 : datalengtht

type datalengtht__ref = { datalengtht__content : datalengtht
}

function datalengtht__ref___projection(a: datalengtht__ref) : datalengtht =
  (a).datalengtht__content

logic to_rep2 : datalengtht -> int

logic of_rep2 : int -> datalengtht

axiom inversion_axiom2 :
  (forall x:datalengtht [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:datalengtht [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic dummy8 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__keyboard__datat__length : datalengtht;
rec__keyboard__datat__text : (int,character) farray
}

function us_split_fields_Length__projection(a: us_split_fields) : datalengtht =
  (a).rec__keyboard__datat__length

function us_split_fields_Text__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__keyboard__datat__text

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__keyboard__datat__length) = to_rep2(((b).us_split_fields1).rec__keyboard__datat__length)) and
  (bool_eq5(((a).us_split_fields1).rec__keyboard__datat__text, 1, 78,
  ((b).us_split_fields1).rec__keyboard__datat__text, 1, 78) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__keyboard__datat__length) = to_rep2(((b).us_split_fields1).rec__keyboard__datat__length)) and
  (bool_eq5(((a).us_split_fields1).rec__keyboard__datat__text, 1, 78,
  ((b).us_split_fields1).rec__keyboard__datat__text, 1, 78) = true))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:datalengtht. forall a1:(int,character) farray.
  (0 <= object__size2({ us_split_fields1 = { rec__keyboard__datat__length =
  a; rec__keyboard__datat__text = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:datalengtht. forall a1:(int,character) farray.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__keyboard__datat__length = a; rec__keyboard__datat__text = a1 } })))

logic keyboard__datat__length__first__bit : int

logic keyboard__datat__length__last__bit : int

logic keyboard__datat__length__position : int

axiom keyboard__datat__length__first__bit_axiom :
  (0 <= keyboard__datat__length__first__bit)

axiom keyboard__datat__length__last__bit_axiom :
  (keyboard__datat__length__first__bit <  keyboard__datat__length__last__bit)

axiom keyboard__datat__length__position_axiom :
  (0 <= keyboard__datat__length__position)

logic keyboard__datat__text__first__bit : int

logic keyboard__datat__text__last__bit : int

logic keyboard__datat__text__position : int

axiom keyboard__datat__text__first__bit_axiom :
  (0 <= keyboard__datat__text__first__bit)

axiom keyboard__datat__text__last__bit_axiom :
  (keyboard__datat__text__first__bit <  keyboard__datat__text__last__bit)

axiom keyboard__datat__text__position_axiom :
  (0 <= keyboard__datat__text__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : datalengtht

logic dummy10 : (int,character) farray

type datat__ref = { datat__content : us_rep
}

function datat__ref___projection(a: datat__ref) : us_rep = (a).datat__content

type opandnullt

predicate in_range7(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : opandnullt, opandnullt -> bool

logic dummy11 : opandnullt

type opandnullt__ref = { opandnullt__content : opandnullt
}

function opandnullt__ref___projection(a: opandnullt__ref) : opandnullt =
  (a).opandnullt__content

type opt

predicate in_range8(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : opt, opt -> bool

logic dummy12 : opt

type opt__ref = { opt__content : opt
}

function opt__ref___projection(a: opt__ref) : opt = (a).opt__content

type privileget

predicate in_range9(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : privileget, privileget -> bool

logic dummy13 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep3 : privileget -> int

logic of_rep3 : int -> privileget

axiom inversion_axiom3 :
  (forall x:privileget [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:privileget [to_rep3(x)]. in_range9(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range9(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic to_rep4 : opandnullt -> int

logic of_rep4 : int -> opandnullt

axiom inversion_axiom4 :
  (forall x:opandnullt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:opandnullt [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields2 = { rec__admin__t__rolepresent : privileget;
rec__admin__t__currentop : opandnullt
}

function us_split_fields_RolePresent__projection(a: us_split_fields2) : privileget =
  (a).rec__admin__t__rolepresent

function us_split_fields_CurrentOp__projection(a: us_split_fields2) : opandnullt =
  (a).rec__admin__t__currentop

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  ((((to_rep3(((a).us_split_fields3).rec__admin__t__rolepresent) = to_rep3(((b).us_split_fields3).rec__admin__t__rolepresent)) and
  (to_rep4(((a).us_split_fields3).rec__admin__t__currentop) = to_rep4(((b).us_split_fields3).rec__admin__t__currentop))) ->
  (bool_eq14(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_fields3).rec__admin__t__rolepresent) = to_rep3(((b).us_split_fields3).rec__admin__t__rolepresent)) and
  (to_rep4(((a).us_split_fields3).rec__admin__t__currentop) = to_rep4(((b).us_split_fields3).rec__admin__t__currentop)))) ->
  (bool_eq14(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__size3({
  us_split_fields3 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__alignment3({
  us_split_fields3 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

logic admin__t__rolepresent__first__bit : int

logic admin__t__rolepresent__last__bit : int

logic admin__t__rolepresent__position : int

axiom admin__t__rolepresent__first__bit_axiom :
  (0 <= admin__t__rolepresent__first__bit)

axiom admin__t__rolepresent__last__bit_axiom :
  (admin__t__rolepresent__first__bit <  admin__t__rolepresent__last__bit)

axiom admin__t__rolepresent__position_axiom :
  (0 <= admin__t__rolepresent__position)

logic admin__t__currentop__first__bit : int

logic admin__t__currentop__last__bit : int

logic admin__t__currentop__position : int

axiom admin__t__currentop__first__bit_axiom :
  (0 <= admin__t__currentop__first__bit)

axiom admin__t__currentop__last__bit_axiom :
  (admin__t__currentop__first__bit <  admin__t__currentop__last__bit)

axiom admin__t__currentop__position_axiom :
  (0 <= admin__t__currentop__position)

logic user_eq12 : us_rep1, us_rep1 -> bool

logic dummy14 : privileget

logic dummy15 : opandnullt

type t__ref = { t__content : us_rep1
}

function t__ref___projection(a: t__ref) : us_rep1 = (a).t__content

logic rolepresent : us_rep1 -> int

logic rolepresent__function_guard : int, us_rep1 -> prop

axiom rolepresent__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. in_range9(rolepresent({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })))

logic isdoingop : us_rep1 -> bool

logic isdoingop__function_guard : bool, us_rep1 -> prop

axiom isdoingop__post_axiom : true

logic thecurrentop : us_rep1 -> int

logic thecurrentop__function_guard : int, us_rep1 -> prop

axiom thecurrentop__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [thecurrentop({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) ->
  in_range8(thecurrentop({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }))))

logic ispresent : us_rep1 -> bool

logic ispresent__function_guard : bool, us_rep1 -> prop

axiom ispresent__post_axiom : true

logic str_comp : us_rep, int -> bool

logic str_comp__function_guard : bool, us_rep, int -> prop

logic allowedop : us_rep1, int -> bool

logic allowedop__function_guard : bool, us_rep1, int -> prop

logic opisavailable : us_rep1, us_rep -> int

logic opisavailable__function_guard : int, us_rep1, us_rep -> prop

axiom opisavailable__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt.
  (forall keyedop:datalengtht. forall keyedop1:(int,character) farray
  [opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }, { us_split_fields1 = {
  rec__keyboard__datat__length = keyedop; rec__keyboard__datat__text =
  keyedop1 } })]. ((ispresent({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin; rec__admin__t__currentop = theadmin1
  } }) = true) ->
  (((((exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
      us_split_fields1 = { rec__keyboard__datat__length = keyedop;
      rec__keyboard__datat__text = keyedop1 } }, op) = true) and (allowedop({
      us_split_fields3 = { rec__admin__t__rolepresent = theadmin;
      rec__admin__t__currentop = theadmin1 } }, op) = true)) and
      (opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
      theadmin; rec__admin__t__currentop = theadmin1 } }, {
      us_split_fields1 = { rec__keyboard__datat__length = keyedop;
      rec__keyboard__datat__text = keyedop1 } }) = op)))) or
  ((not (exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
        us_split_fields1 = { rec__keyboard__datat__length = keyedop;
        rec__keyboard__datat__text = keyedop1 } }, op) = true) and
        (allowedop({ us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin; rec__admin__t__currentop = theadmin1 } }, op) = true)) and
        (opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin; rec__admin__t__currentop = theadmin1 } }, {
        us_split_fields1 = { rec__keyboard__datat__length = keyedop;
        rec__keyboard__datat__text = keyedop1 } }) = op))))) and
  (bool_eq1(opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }, { us_split_fields1 = {
  rec__keyboard__datat__length = keyedop; rec__keyboard__datat__text =
  keyedop1 } }), 0) = true))) ->
  (not (((exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
         us_split_fields1 = { rec__keyboard__datat__length = keyedop;
         rec__keyboard__datat__text = keyedop1 } }, op) = true) and
         (allowedop({ us_split_fields3 = { rec__admin__t__rolepresent =
         theadmin; rec__admin__t__currentop = theadmin1 } }, op) = true)) and
         (opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
         theadmin; rec__admin__t__currentop = theadmin1 } }, {
         us_split_fields1 = { rec__keyboard__datat__length = keyedop;
         rec__keyboard__datat__text = keyedop1 } }) = op)))) and
  (bool_eq1(opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }, { us_split_fields1 = {
  rec__keyboard__datat__length = keyedop; rec__keyboard__datat__text =
  keyedop1 } }), 0) = true)) or
  ((not (exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
        us_split_fields1 = { rec__keyboard__datat__length = keyedop;
        rec__keyboard__datat__text = keyedop1 } }, op) = true) and
        (allowedop({ us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin; rec__admin__t__currentop = theadmin1 } }, op) = true)) and
        (opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin; rec__admin__t__currentop = theadmin1 } }, {
        us_split_fields1 = { rec__keyboard__datat__length = keyedop;
        rec__keyboard__datat__text = keyedop1 } }) = op))))) and
  (false = true))))) and
  (not (((exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
         us_split_fields1 = { rec__keyboard__datat__length = keyedop;
         rec__keyboard__datat__text = keyedop1 } }, op) = true) and
         (allowedop({ us_split_fields3 = { rec__admin__t__rolepresent =
         theadmin; rec__admin__t__currentop = theadmin1 } }, op) = true)) and
         (opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
         theadmin; rec__admin__t__currentop = theadmin1 } }, {
         us_split_fields1 = { rec__keyboard__datat__length = keyedop;
         rec__keyboard__datat__text = keyedop1 } }) = op)))) and
  (true = false)) or
  ((not (exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
        us_split_fields1 = { rec__keyboard__datat__length = keyedop;
        rec__keyboard__datat__text = keyedop1 } }, op) = true) and
        (allowedop({ us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin; rec__admin__t__currentop = theadmin1 } }, op) = true)) and
        (opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin; rec__admin__t__currentop = theadmin1 } }, {
        us_split_fields1 = { rec__keyboard__datat__length = keyedop;
        rec__keyboard__datat__text = keyedop1 } }) = op))))) and
  (bool_eq1(opisavailable({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }, { us_split_fields1 = {
  rec__keyboard__datat__length = keyedop; rec__keyboard__datat__text =
  keyedop1 } }), 0) = false))))) and in_range7(opisavailable({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }, { us_split_fields1 = {
  rec__keyboard__datat__length = keyedop; rec__keyboard__datat__text =
  keyedop1 } }))))))

logic valid_numberlogentries : us_private -> bool

logic valid_numberlogentries__function_guard : bool, us_private -> prop

logic theauthcertrole : us_private -> int

logic theauthcertrole__function_guard : int, us_private -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__state:us_private [theauthcertrole(admintoken__state)].
  in_range9(theauthcertrole(admintoken__state)))

logic isgood : us_private -> bool

logic isgood__function_guard : bool, us_private -> prop

axiom isgood__post_axiom : true

logic authcertvalid : us_private -> bool

logic authcertvalid__function_guard : bool, us_private -> prop

axiom authcertvalid__post_axiom : true

logic extractuser : us_private -> (int,character) farray

logic extractuser__function_guard : (int,character) farray,
  us_private -> prop

axiom extractuser__post_axiom : true

type statust

predicate in_range10(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : statust, statust -> bool

logic dummy16 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___2__projection(a: statust__ref) : statust =
  (a).statust__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic adminopcanstart : us_private, us_split_fields2, int -> bool

logic adminopcanstart__function_guard : bool, us_private, us_split_fields2,
  int -> prop

logic ispresent1 : us_private -> bool

logic ispresent__function_guard1 : bool, us_private -> prop

axiom adminopcanstart__post_axiom : true

axiom adminopcanstart__def_axiom :
  (forall admintoken__state:us_private.
  (forall enclave__startadminactivity__theadmin__fields:privileget.
  forall enclave__startadminactivity__theadmin__fields1:opandnullt.
  (forall enclave__status:int [adminopcanstart(admintoken__state, {
  rec__admin__t__rolepresent = enclave__startadminactivity__theadmin__fields;
  rec__admin__t__currentop = enclave__startadminactivity__theadmin__fields1
  }, enclave__status)]. ((adminopcanstart(admintoken__state, {
  rec__admin__t__rolepresent = enclave__startadminactivity__theadmin__fields;
  rec__admin__t__currentop = enclave__startadminactivity__theadmin__fields1
  }, enclave__status) = true) <-> (((ispresent({ us_split_fields3 = {
  rec__admin__t__rolepresent = enclave__startadminactivity__theadmin__fields;
  rec__admin__t__currentop = enclave__startadminactivity__theadmin__fields1 }
  }) = true) and (enclave__status = 3)) and
  (ispresent1(admintoken__state) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom str_comp__post_axiom : true

axiom allowedop__post_axiom : true

axiom ispresent__post_axiom1 : true

axiom valid_numberlogentries__post_axiom : true

 (* File "enclave.adb", line 2122, characters 0-0 *)
goal WP_parameter_def :
  (forall theadmin__split_fields:privileget.
  forall theadmin__split_fields1:opandnullt. forall status:int.
  forall keyeddatapresence:int. forall theop:int. forall state:us_private.
  forall o:int. forall o1:int. forall o2:(int,character) farray.
  forall keyeddatapresence1:int. forall keyeddata__split_fields:datalengtht.
  forall keyeddata__split_fields1:(int,character) farray. forall result:int.
  forall theop1:int. forall result1:int. forall status1:int.
  forall state1:us_private. forall theadmin__split_fields2:privileget.
  forall theadmin__split_fields3:opandnullt. (in_range10(status) ->
  ((((((((adminopcanstart(state, { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  }, status) = true) and (status = 3)) and (ispresent({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true)) and
  (not (isdoingop({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true))) and ((rolepresent({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 1) ->
  (((isgood(state) = true) and (authcertvalid(state) = true)) and
  (theauthcertrole(state) = 1)))) and (((isdoingop({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true) and
  (thecurrentop({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = 3)) -> (rolepresent({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 1))) and
  ((rolepresent({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = 1) -> (((isdoingop({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true) and
  (thecurrentop({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = 3)) or (not (isdoingop({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true))))) ->
  (((0 <= 1) -> in_range4(keyeddatapresence)) -> (((0 <= 4) ->
  in_range7(theop)) -> (in_range4(keyeddatapresence1) ->
  ((keyeddatapresence1 = 0) -> ((((o = opisavailable({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }, {
  us_split_fields1 = { rec__keyboard__datat__length =
  keyeddata__split_fields; rec__keyboard__datat__text =
  keyeddata__split_fields1 } })) and (in_range7(o) and
  (((exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
    us_split_fields1 = { rec__keyboard__datat__length =
    keyeddata__split_fields; rec__keyboard__datat__text =
    keyeddata__split_fields1 } }, op) = true) and (allowedop({
    us_split_fields3 = { rec__admin__t__rolepresent = theadmin__split_fields;
    rec__admin__t__currentop = theadmin__split_fields1 } }, op) = true)) and
    (o = op)))) or
  ((not (exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
        us_split_fields1 = { rec__keyboard__datat__length =
        keyeddata__split_fields; rec__keyboard__datat__text =
        keyeddata__split_fields1 } }, op) = true) and (allowedop({
        us_split_fields3 = { rec__admin__t__rolepresent =
        theadmin__split_fields; rec__admin__t__currentop =
        theadmin__split_fields1 } }, op) = true)) and (o = op))))) and
  (bool_eq1(o, 0) = true))) and
  (((exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
    us_split_fields1 = { rec__keyboard__datat__length =
    keyeddata__split_fields; rec__keyboard__datat__text =
    keyeddata__split_fields1 } }, op) = true) and (allowedop({
    us_split_fields3 = { rec__admin__t__rolepresent = theadmin__split_fields;
    rec__admin__t__currentop = theadmin__split_fields1 } }, op) = true)) and
    (o = op)))) and
  (bool_eq1(o, 0) = false)) or
  (not (exists op:int. (((1 <= op) and (op <= 4)) and (((str_comp({
       us_split_fields1 = { rec__keyboard__datat__length =
       keyeddata__split_fields; rec__keyboard__datat__text =
       keyeddata__split_fields1 } }, op) = true) and (allowedop({
       us_split_fields3 = { rec__admin__t__rolepresent =
       theadmin__split_fields; rec__admin__t__currentop =
       theadmin__split_fields1 } }, op) = true)) and (o = op))))))))) and
  (({ int__content = result } = { int__content = theop }) and
  (theop1 = o))) -> ((not (theop1 = 0)) -> ((({ int__content = result1 } = {
  int__content = status }) and (status1 = 6)) -> ((((o1 = theop1) and
  in_range8(theop1)) and ((((rolepresent({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields2;
  rec__admin__t__currentop = theadmin__split_fields3 } }) = rolepresent({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and (ispresent({
  us_split_fields3 = { rec__admin__t__rolepresent = theadmin__split_fields2;
  rec__admin__t__currentop = theadmin__split_fields3 } }) = true)) and
  (isdoingop({ us_split_fields3 = { rec__admin__t__rolepresent =
  theadmin__split_fields2; rec__admin__t__currentop = theadmin__split_fields3
  } }) = true)) and (thecurrentop({ us_split_fields3 = {
  rec__admin__t__rolepresent = theadmin__split_fields2;
  rec__admin__t__currentop = theadmin__split_fields3 } }) = o1))) ->
  ((o2 = extractuser(state)) ->
  (valid_numberlogentries(state1) = true)))))))))))))
