(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun change_side (Int) Int)
(declare-fun change_side__function_guard (Int Int) Bool)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-fun fulfill_condition (Int (Array Int Bool) (Array Int Bool)) Bool)
(declare-fun fulfill_condition__function_guard (Bool Int (Array Int Bool) (Array Int Bool)) Bool)
(declare-sort location 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (location location) Bool)
(declare-const dummy location)
(declare-datatypes () ((location__ref (mk_location__ref (location__content location)))))
(define-fun location__ref___projection ((a location__ref)) location (location__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 2)) (in_range1 temp___expr_166)))
(assert (forall ((side Int)) (forall ((request (Array Int Bool)) (du_available (Array Int Bool))) (! (=> (dynamic_invariant side true true true true) (and (= (select du_available side) true) (or (= (select request side) true) (not (= (select du_available (change_side side)) true))))) :pattern ((fulfill_condition side request du_available))))))
(declare-fun none_available ((Array Int Bool)) Bool)
(declare-fun none_available__function_guard (Bool (Array Int Bool)) Bool)
(assert (forall ((du_available (Array Int Bool))) (! (and (not (= (select du_available 1) true)) (not (= (select du_available 2) true))) :pattern ((none_available du_available)))))
(declare-sort extended_location 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (extended_location extended_location) Bool)
(declare-const dummy1 extended_location)
(declare-datatypes () ((extended_location__ref (mk_extended_location__ref (extended_location__content extended_location)))))
(define-fun extended_location__ref___projection ((a extended_location__ref)) extended_location (extended_location__content a))
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 2)) (in_range2 temp___expr_159)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const request (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const du_available (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(assert (forall ((side Int)) (! (=> (dynamic_invariant side true true true true) (dynamic_invariant (change_side side) true false true true)) :pattern ((change_side side)))))
(assert (forall ((side Int)) (! (=> (dynamic_invariant side true true true true) (= (change_side side) (ite (= side 1) 2 1))) :pattern ((change_side side)))))
(declare-const current Int)
(declare-const current1 Int)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const current2 Int)
(declare-const result2 Bool)
(declare-const result3 Int)
(declare-const current3 Int)
(declare-const result4 Bool)
(declare-const result5 Int)
(declare-const current4 Int)
(declare-const current5 Int)
(declare-const current6 Int)
(assert (in_range2 current))
(assert (and (= result (fulfill_condition 1 request du_available)) (and (= (select du_available 1) true) (or (= (select request 1) true) (not (= (select du_available (change_side 1)) true))))))
(assert (=> (= result true) (= result1 current)))
(assert (=> (= result true) (= current2 1)))
(assert (=> (not (= result true)) (and (= result2 (fulfill_condition 2 request du_available)) (and (= (select du_available 2) true) (or (= (select request 2) true) (not (= (select du_available (change_side 2)) true)))))))
(assert (=> (not (= result true)) (=> (= result2 true) (= result3 current))))
(assert (=> (not (= result true)) (=> (= result2 true) (= current3 2))))
(assert (=> (not (= result true)) (=> (not (= result2 true)) (and (= result4 (none_available du_available)) (and (not (= (select du_available 1) true)) (not (= (select du_available 2) true)))))))
(assert (=> (not (= result true)) (=> (not (= result2 true)) (=> (= result4 true) (= result5 current)))))
(assert (=> (not (= result true)) (=> (not (= result2 true)) (=> (= result4 true) (= current4 0)))))
(assert (=> (not (= result true)) (=> (not (= result2 true)) (=> (not (= result4 true)) (= current4 current)))))
(assert (=> (not (= result true)) (=> (not (= result2 true)) (=> (not (= result4 true)) (= current4 current1)))))
(assert (=> (not (= result true)) (=> (not (= result2 true)) (= current3 current4))))
(assert (=> (not (= result true)) (= current2 current3)))
(assert (= current2 current5))
(assert (= current6 current2))
(assert (not (= (select du_available 2) true)))
(assert (not (not (= current5 2))))
(check-sat)
(exit)
