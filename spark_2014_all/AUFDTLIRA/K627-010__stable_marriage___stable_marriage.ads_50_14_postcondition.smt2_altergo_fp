(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type group1_id

predicate in_range1(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : group1_id, group1_id -> bool

logic dummy : group1_id

type group1_id__ref = { group1_id__content : group1_id
}

function group1_id__ref___projection(a: group1_id__ref) : group1_id =
  (a).group1_id__content

logic to_rep : group1_id -> int

logic of_rep : int -> group1_id

axiom inversion_axiom :
  (forall x:group1_id [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:group1_id [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type ranking

predicate in_range2(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ranking, ranking -> bool

logic dummy1 : ranking

type ranking__ref = { ranking__content : ranking
}

function ranking__ref___projection(a: ranking__ref) : ranking =
  (a).ranking__content

logic to_rep1 : ranking -> int

logic of_rep1 : int -> ranking

axiom inversion_axiom1 :
  (forall x:ranking [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:ranking [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,group1_id) farray
}

logic slide : (int,group1_id) farray, int, int -> (int,group1_id) farray

axiom slide_eq :
  (forall a:(int,group1_id) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,group1_id) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,group1_id) farray, int, int, (int,group1_id) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,group1_id) farray. forall a__first:int. forall a__last:int.
  forall b:(int,group1_id) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,group1_id) farray. forall b:(int,group1_id) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic is_permutation_1 : (int,group1_id) farray -> bool

logic is_permutation_1__function_guard : bool, (int,group1_id) farray -> prop

axiom is_permutation_1__post_axiom :
  (forall r1:(int,group1_id) farray [is_permutation_1(r1)].
  ((is_permutation_1(r1) = true) <->
  (forall g1:int. (((1 <= g1) and (g1 <= 64)) ->
  (exists rank:int. (((1 <= rank) and (rank <= 64)) and
  (to_rep((r1[rank])) = g1)))))))

type map__ref1 = { map__content1 : (int,ranking) farray
}

logic slide1 : (int,ranking) farray, int, int -> (int,ranking) farray

axiom slide_eq1 :
  (forall a:(int,ranking) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,ranking) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,ranking) farray. forall a__first:int. forall a__last:int.
  forall b:(int,ranking) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_158:int. ((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and
  (to_rep1((a[temp___idx_158])) = to_rep1((b[((b__first - a__first) + temp___idx_158)])))) or
  (not ((a__first <= temp___idx_158) and (temp___idx_158 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep1((a[temp___idx_158])) = to_rep1((b[((b__first - a__first) + temp___idx_158)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep1((a[temp___idx_158])) = to_rep1((b[((b__first - a__first) + temp___idx_158)])))))))))

logic r1 : (int,group1_id) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic stable_marriage__invert_1__result__aggregate_def : int -> (int,ranking) farray

axiom def_axiom :
  (forall temp___483:int. (in_range2(temp___483) ->
  (forall temp___484:int.
  (to_rep1((stable_marriage__invert_1__result__aggregate_def(temp___483)[temp___484])) = temp___483))))

 (* File "stable_marriage.ads", line 44, characters 0-0 *)
goal WP_parameter_def :
  (forall result__:(int,ranking) farray. forall rank:int.
  forall stable_marriage__invert_1__result:(int,ranking) farray.
  forall temp___487:int. forall temp___485:(int,ranking) farray.
  forall o:ranking. forall o1:(int,ranking) farray.
  forall result:(int,ranking) farray. forall result__1:(int,ranking) farray.
  forall result1:int. forall rank1:int.
  forall result__2:(int,ranking) farray. forall rank2:int.
  forall result2:(int,ranking) farray. forall result__3:(int,ranking) farray.
  forall result__4:(int,ranking) farray. forall rank3:int.
  forall result__5:(int,ranking) farray. forall rank4:int.
  forall result__6:(int,ranking) farray. forall rank5:int.
  forall result__7:(int,ranking) farray. forall rank6:int.
  forall result3:(int,ranking) farray.
  forall stable_marriage__invert_1__result1:(int,ranking) farray.
  forall stable_marriage__invert_1__result2:(int,ranking) farray.
  forall stable_marriage__invert_1__result3:(int,ranking) farray.
  forall result__8:(int,ranking) farray. forall rank7:int.
  forall stable_marriage__invert_1__result4:(int,ranking) farray.
  forall result__9:(int,ranking) farray. forall rank8:int.
  forall stable_marriage__invert_1__result5:(int,ranking) farray.
  (forall result4:(int,ranking) farray. (((is_permutation_1(r1) = true) and
  ((((({ map__content1 = result } = { map__content1 = result__ }) and
  (result__1 = stable_marriage__invert_1__result__aggregate_def(64))) and
  ((forall rank11:int. (((1 <= rank11) and (rank11 <= 64)) ->
   (forall rank21:int. (((1 <= rank21) and (rank21 <= 64)) ->
   ((not (rank11 = rank21)) ->
   (not (to_rep((r1[rank11])) = to_rep((r1[rank21]))))))))) and
  (((({ int__content = result1 } = { int__content = rank }) and
  (rank1 = 1)) and ((((1 <= rank1) and (rank1 <= 64)) and
  ((((temp___487 = rank1) and ((temp___485 = result__1) and
  (((forall prev:int. (((1 <= prev) and (prev <= (rank2 - 1))) ->
    (to_rep1((result__2[to_rep((r1[prev]))])) = prev))) and
  (forall g1:int. (((1 <= g1) and (g1 <= 64)) ->
  ((exists prev:int. (((1 <= prev) and (prev <= (rank2 - 1))) and
   (to_rep((r1[prev])) = g1))) ->
  (to_rep((r1[to_rep1((result__2[g1]))])) = g1))))) and ((((1 <= 64) ->
  in_range2(rank2)) and ((1 <= rank2) and (rank2 <= 64))) and
  ((((to_rep1(o) = rank2) and
  (o1 = (result__2[to_rep((r1[rank2])) <- o]))) and
  ((result__2 = result2) and (result__3 = o1))) and (rank2 = 64)))))) and
  (((rank2 = rank3) and (result__3 = result__4)) and ((rank4 = rank2) and
  (result__5 = result__3)))) and (((rank3 = rank5) and
  (result__4 = result__6)) and ((rank6 = rank4) and
  (result__7 = result__5))))) or ((not ((1 <= rank1) and (rank1 <= 64))) and
  (((rank1 = rank5) and (result__1 = result__6)) and ((rank6 = rank1) and
  (result__7 = result__1)))))) and
  (((stable_marriage__invert_1__result1 = stable_marriage__invert_1__result2) and
  (stable_marriage__invert_1__result3 = stable_marriage__invert_1__result1)) and
  ((result3 = stable_marriage__invert_1__result) and
  (stable_marriage__invert_1__result1 = result__6)))))) and
  (((stable_marriage__invert_1__result4 = stable_marriage__invert_1__result2) and
  (({ int__content = rank7 } = { int__content = rank5 }) and ({
  map__content1 = result__8 } = { map__content1 = result__6 }))) and
  ((stable_marriage__invert_1__result5 = stable_marriage__invert_1__result3) and
  ((rank8 = rank6) and (result__9 = result__7))))) and
  (result4 = stable_marriage__invert_1__result4))) ->
  (forall rank9:int. (((1 <= rank9) and (rank9 <= 64)) ->
  (to_rep1((stable_marriage__invert_1__result4[to_rep((r1[rank9]))])) = rank9))))))
