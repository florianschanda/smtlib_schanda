(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t4s

predicate in_range4(x: int) = ((1 <= x) and (x <= 20))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t4s, t4s -> bool

logic dummy6 : t4s

type t4s__ref = { t4s__content : t4s
}

function t4s__ref___projection(a: t4s__ref) : t4s = (a).t4s__content

logic dummy7 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq6 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__fixed_string__object__width : natural;
rec__fixed_string__object__name : (int,character) farray; rec__ext__ :
us_private
}

function us_split_fields_Width__projection(a: us_split_fields) : natural =
  (a).rec__fixed_string__object__width

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__fixed_string__object__name

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__fixed_string__object__width) = to_rep2(((b).us_split_fields1).rec__fixed_string__object__width)) and
  (bool_eq4(((a).us_split_fields1).rec__fixed_string__object__name, 1, 20,
  ((b).us_split_fields1).rec__fixed_string__object__name, 1, 20) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__fixed_string__object__width) = to_rep2(((b).us_split_fields1).rec__fixed_string__object__width)) and
  (bool_eq4(((a).us_split_fields1).rec__fixed_string__object__name, 1, 20,
  ((b).us_split_fields1).rec__fixed_string__object__name, 1, 20) = true))) ->
  (bool_eq8(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__size2({ us_split_fields1 = {
  rec__fixed_string__object__width = a; rec__fixed_string__object__name = a1;
  rec__ext__ = a2 }; attr__tag = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:(int,character) farray. forall a2:us_private.
  forall a3:int. (0 <= object__alignment2({ us_split_fields1 = {
  rec__fixed_string__object__width = a; rec__fixed_string__object__name = a1;
  rec__ext__ = a2 }; attr__tag = a3 })))

logic fixed_string__object__width__first__bit : int

logic fixed_string__object__width__last__bit : int

logic fixed_string__object__width__position : int

axiom fixed_string__object__width__first__bit_axiom :
  (0 <= fixed_string__object__width__first__bit)

axiom fixed_string__object__width__last__bit_axiom :
  (fixed_string__object__width__first__bit <  fixed_string__object__width__last__bit)

axiom fixed_string__object__width__position_axiom :
  (0 <= fixed_string__object__width__position)

logic fixed_string__object__name__first__bit : int

logic fixed_string__object__name__last__bit : int

logic fixed_string__object__name__position : int

axiom fixed_string__object__name__first__bit_axiom :
  (0 <= fixed_string__object__name__first__bit)

axiom fixed_string__object__name__last__bit_axiom :
  (fixed_string__object__name__first__bit <  fixed_string__object__name__last__bit)

axiom fixed_string__object__name__position_axiom :
  (0 <= fixed_string__object__name__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy8 : natural

logic dummy9 : (int,character) farray

logic dummy10 : us_private

logic dummy11 : int

type object__ref = { object__content : us_rep
}

function object__ref___projection(a: object__ref) : us_rep =
  (a).object__content

logic temp___139 : int -> (int,character) farray

axiom def_axiom :
  (forall temp___141:int.
  (forall temp___142:int.
  ((temp___139(temp___141)[temp___142]) = of_rep(temp___141))))

logic elem_width : int

logic attr__ATTRIBUTE_ADDRESS : int

logic name : (int,character) farray

logic name1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic elements : us_rep -> int

logic elements__function_guard : int, us_rep -> prop

logic elements1 : int, us_rep -> int

logic elements__function_guard1 : int, int, us_rep -> prop

axiom elements__post_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })]. in_range3(elements({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })))

axiom elements__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements1(attr__tag1, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. in_range3(elements1(attr__tag1, { us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }))))

axiom fixed_string__object__compat_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })]. (elements({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 }) = elements1(us_tag, {
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 })))

axiom elements__def_axiom :
  (forall this:natural. forall this1:(int,character) farray.
  forall this2:us_private. forall this3:int [elements({ us_split_fields1 = {
  rec__fixed_string__object__width = this; rec__fixed_string__object__name =
  this1; rec__ext__ = this2 }; attr__tag = this3 })]. (elements({
  us_split_fields1 = { rec__fixed_string__object__width = this;
  rec__fixed_string__object__name = this1; rec__ext__ = this2 }; attr__tag =
  this3 }) = to_rep2(this)))

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic this__split_fields : natural

logic this__split_fields1 : (int,character) farray

logic this__split_fields2 : us_private

logic fixed_string__create__result : natural

logic fixed_string__create__result1 : (int,character) farray

logic fixed_string__create__result2 : us_private

logic fixed_string__create__result3 : int

logic o : natural

logic o1 : natural

logic o2 : (int,character) farray

logic o3 : us_private

logic temp___215 : natural

logic temp___2151 : (int,character) farray

logic temp___2152 : us_private

logic temp___2153 : int

logic o4 : integer

logic o5 : integer

logic result : natural

logic result1 : (int,character) farray

logic result2 : us_private

logic this__split_fields3 : natural

logic this__split_fields4 : (int,character) farray

logic this__split_fields5 : us_private

logic fixed_string__trim_string__change : (int,character) farray

logic result3 : natural

logic result4 : (int,character) farray

logic result5 : us_private

logic this__split_fields6 : natural

logic this__split_fields7 : (int,character) farray

logic this__split_fields8 : us_private

logic result6 : natural

logic result7 : (int,character) farray

logic result8 : us_private

logic result9 : int

logic fixed_string__create__result4 : natural

logic fixed_string__create__result5 : (int,character) farray

logic fixed_string__create__result6 : us_private

logic fixed_string__create__result7 : int

logic fixed_string__create__result8 : natural

logic fixed_string__create__result9 : (int,character) farray

logic fixed_string__create__result10 : us_private

logic fixed_string__create__result11 : int

logic fixed_string__create__result12 : natural

logic fixed_string__create__result13 : (int,character) farray

logic fixed_string__create__result14 : us_private

logic fixed_string__create__result15 : int

logic this__split_fields9 : natural

logic this__split_fields10 : (int,character) farray

logic this__split_fields11 : us_private

logic fixed_string__create__result16 : natural

logic fixed_string__create__result17 : (int,character) farray

logic fixed_string__create__result18 : us_private

logic fixed_string__create__result19 : int

logic this__split_fields12 : natural

logic this__split_fields13 : (int,character) farray

logic this__split_fields14 : us_private

logic fixed_string__create__result20 : natural

logic fixed_string__create__result21 : (int,character) farray

logic fixed_string__create__result22 : us_private

logic fixed_string__create__result23 : int

logic result10 : natural

logic result11 : (int,character) farray

logic result12 : us_private

logic result13 : int

axiom H : in_range3(elem_width)

axiom H1 : dynamic_property(1, 2147483647, to_rep1(first(name1)),
  to_rep1(last(name1)))

axiom H2 : ((this__attr__tag = us_tag) and
  ((to_rep2(this__split_fields) = 0) and
  (this__split_fields1 = temp___139(0))))

axiom H3 : (to_rep2(o) = elem_width)

axiom H4 : (o = o1)

axiom H5 : (this__split_fields1 = o2)

axiom H6 : (this__split_fields2 = o3)

axiom H7 : (temp___215 = o1)

axiom H8 : (temp___2151 = o2)

axiom H9 : (temp___2152 = o3)

axiom H10 : (this__attr__tag = temp___2153)

axiom H11 : (result = this__split_fields)

axiom H12 : (result1 = this__split_fields1)

axiom H13 : (result2 = this__split_fields2)

axiom H14 : (temp___215 = this__split_fields3)

axiom H15 : (temp___2151 = this__split_fields4)

axiom H16 : (temp___2152 = this__split_fields5)

axiom H17 : (to_rep1(o5) = 20)

axiom H18 : (to_rep1(o4) = 1)

axiom H19 :
  (forall i:int. (((to_rep1(o4) <= i) and (i <= to_rep1(o5))) ->
  (((((to_rep1(first(name1)) <  0) or
  ((i - to_rep1(o4)) <= (2147483647 - to_rep1(first(name1))))) and
  (((i - to_rep1(o4)) + to_rep1(first(name1))) <= to_rep1(last(name1)))) and
  (to_rep((fixed_string__trim_string__change[i])) = to_rep((name[((i - to_rep1(o4)) + to_rep1(first(name1)))])))) or
  (to_rep((fixed_string__trim_string__change[i])) = 0))))

axiom H20 : (result3 = this__split_fields3)

axiom H21 : (result4 = this__split_fields4)

axiom H22 : (result5 = this__split_fields5)

axiom H23 : (this__split_fields3 = this__split_fields6)

axiom H24 : (slide(fixed_string__trim_string__change, to_rep1(first(mk(1,
  20))), 1) = this__split_fields7)

axiom H25 : (this__split_fields5 = this__split_fields8)

axiom H26 : (fixed_string__create__result8 = fixed_string__create__result4)

axiom H27 : (fixed_string__create__result9 = fixed_string__create__result5)

axiom H28 : (fixed_string__create__result10 = fixed_string__create__result6)

axiom H29 : (fixed_string__create__result11 = fixed_string__create__result7)

axiom H30 :
  (((fixed_string__create__result12 = fixed_string__create__result4) and
  ((fixed_string__create__result13 = fixed_string__create__result5) and
  (fixed_string__create__result14 = fixed_string__create__result6))) and
  (fixed_string__create__result15 = fixed_string__create__result7))

axiom H31 : (result6 = fixed_string__create__result)

axiom H32 : (result7 = fixed_string__create__result1)

axiom H33 : (result8 = fixed_string__create__result2)

axiom H34 : (result9 = fixed_string__create__result3)

axiom H35 : (fixed_string__create__result4 = this__split_fields6)

axiom H36 : (fixed_string__create__result5 = this__split_fields7)

axiom H37 : (fixed_string__create__result6 = this__split_fields8)

axiom H38 : (this__attr__tag = fixed_string__create__result7)

axiom H39 :
  (((fixed_string__create__result16 = fixed_string__create__result8) and
  ((fixed_string__create__result17 = fixed_string__create__result9) and
  (fixed_string__create__result18 = fixed_string__create__result10))) and
  (fixed_string__create__result19 = fixed_string__create__result11))

axiom H40 : ((this__split_fields9 = this__split_fields6) and
  ((this__split_fields10 = this__split_fields7) and
  (this__split_fields11 = this__split_fields8)))

axiom H41 :
  (((fixed_string__create__result20 = fixed_string__create__result12) and
  ((fixed_string__create__result21 = fixed_string__create__result13) and
  (fixed_string__create__result22 = fixed_string__create__result14))) and
  (fixed_string__create__result23 = fixed_string__create__result15))

axiom H42 : ((this__split_fields12 = this__split_fields6) and
  ((this__split_fields13 = this__split_fields7) and
  (this__split_fields14 = this__split_fields8)))

axiom H43 : (((result10 = fixed_string__create__result16) and
  ((result11 = fixed_string__create__result17) and
  (result12 = fixed_string__create__result18))) and
  (result13 = fixed_string__create__result19))

 (* File "fixed_string.ads", line 36, characters 0-0 *)
goal WP_parameter_def : (elements({ us_split_fields1 = {
  rec__fixed_string__object__width = fixed_string__create__result16;
  rec__fixed_string__object__name = fixed_string__create__result17;
  rec__ext__ = fixed_string__create__result18 }; attr__tag =
  fixed_string__create__result19 }) = elem_width)
