(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_164:int. ((((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) and
  (to_rep2((a[temp___idx_164])) = to_rep2((b[((b__first - a__first) + temp___idx_164)])))) or
  (not ((a__first <= temp___idx_164) and (temp___idx_164 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) ->
  (to_rep2((a[temp___idx_164])) = to_rep2((b[((b__first - a__first) + temp___idx_164)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) ->
  (to_rep2((a[temp___idx_164])) = to_rep2((b[((b__first - a__first) + temp___idx_164)])))))))))

logic sum_of : int -> int

logic sum_of__function_guard : int, int -> prop

type map

type map__ref2 = { map__content2 : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide2 : map, int, int, int, int -> map

axiom slide_def2 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq9 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def7 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq9(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_173:int. forall temp___idx_174:int.
  (((((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)) and
  ((a__first_2 <= temp___idx_174) and (temp___idx_174 <= a__last_2))) and
  (to_rep2(get(a, temp___idx_173, temp___idx_174)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_173),
  ((b__first_2 - a__first_2) + temp___idx_174))))) or
  (not (((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)) and
  ((a__first_2 <= temp___idx_174) and (temp___idx_174 <= a__last_2))))))) ->
  (bool_eq9(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_173:int. forall temp___idx_174:int.
  ((((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)) and
  ((a__first_2 <= temp___idx_174) and (temp___idx_174 <= a__last_2))) ->
  (to_rep2(get(a, temp___idx_173, temp___idx_174)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_173),
  ((b__first_2 - a__first_2) + temp___idx_174)))))))) -> (bool_eq9(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev2 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq9(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_173:int. forall temp___idx_174:int.
  ((((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)) and
  ((a__first_2 <= temp___idx_174) and (temp___idx_174 <= a__last_2))) ->
  (to_rep2(get(a, temp___idx_173, temp___idx_174)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_173),
  ((b__first_2 - a__first_2) + temp___idx_174))))))))))

type tTtaSP1

predicate in_range5(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTtaSP1, tTtaSP1 -> bool

logic dummy6 : tTtaSP1

type tTtaSP1__ref = { tTtaSP1__content : tTtaSP1
}

function tTtaSP1__ref___projection(a: tTtaSP1__ref) : tTtaSP1 =
  (a).tTtaSP1__content

logic attr__ATTRIBUTE_ADDRESS : int

type t6b

predicate in_range6(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : t6b, t6b -> bool

logic dummy7 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref___projection(a: t6b__ref) : t6b = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type tTtaSP11

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tTtaSP11, tTtaSP11 -> bool

logic dummy8 : tTtaSP11

type tTtaSP1__ref1 = { tTtaSP1__content1 : tTtaSP11
}

function tTtaSP1__ref___2__projection(a: tTtaSP1__ref1) : tTtaSP11 =
  (a).tTtaSP1__content1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type t11b

predicate in_range8(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : t11b, t11b -> bool

logic dummy9 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref___projection(a: t11b__ref) : t11b = (a).t11b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___String_Literal_614 : unit -> (int,character) farray

axiom temp___String_Literal_614__def_axiom :
  ((((((((to_rep((temp___String_Literal_614(void)[1])) = 79) and
  (to_rep((temp___String_Literal_614(void)[2])) = 112)) and
  (to_rep((temp___String_Literal_614(void)[3])) = 116)) and
  (to_rep((temp___String_Literal_614(void)[4])) = 105)) and
  (to_rep((temp___String_Literal_614(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_614(void)[6])) = 110)) and
  (to_rep((temp___String_Literal_614(void)[7])) = 97)) and
  (to_rep((temp___String_Literal_614(void)[8])) = 108))

logic optional__B_1__ta__aggregate_def : int -> (int,natural) farray

logic temp___String_Literal_631 : unit -> (int,character) farray

axiom temp___String_Literal_631__def_axiom :
  ((((((((((((((((((((((((((((to_rep((temp___String_Literal_631(void)[1])) = 69) and
  (to_rep((temp___String_Literal_631(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_631(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_631(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_631(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_631(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[7])) = 50)) and
  (to_rep((temp___String_Literal_631(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_631(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[10])) = 115)) and
  (to_rep((temp___String_Literal_631(void)[11])) = 104)) and
  (to_rep((temp___String_Literal_631(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_631(void)[13])) = 117)) and
  (to_rep((temp___String_Literal_631(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_631(void)[15])) = 100)) and
  (to_rep((temp___String_Literal_631(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[17])) = 110)) and
  (to_rep((temp___String_Literal_631(void)[18])) = 111)) and
  (to_rep((temp___String_Literal_631(void)[19])) = 116)) and
  (to_rep((temp___String_Literal_631(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[21])) = 103)) and
  (to_rep((temp___String_Literal_631(void)[22])) = 101)) and
  (to_rep((temp___String_Literal_631(void)[23])) = 116)) and
  (to_rep((temp___String_Literal_631(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[25])) = 104)) and
  (to_rep((temp___String_Literal_631(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_631(void)[27])) = 114)) and
  (to_rep((temp___String_Literal_631(void)[28])) = 101))

logic optional__B_3__ta__aggregate_def : int -> map

axiom def_axiom :
  (forall temp___622:int. (in_range4(temp___622) ->
  (forall temp___623:int.
  (to_rep2((optional__B_1__ta__aggregate_def(temp___622)[temp___623])) = temp___622))))

axiom def_axiom1 :
  (forall temp___633:int. (in_range4(temp___633) ->
  (forall temp___634:int. forall temp___635:int.
  (to_rep2(get(optional__B_3__ta__aggregate_def(temp___633), temp___634,
  temp___635)) = temp___633))))

 (* File "optional.adb", line 24, characters 0-0 *)
goal WP_parameter_def :
  (forall ta:(int,natural) farray. forall index:int. forall ta1:map.
  forall outer:int. forall inner:int. forall temp___617:int.
  forall temp___615:(int,natural) farray.
  forall temp___618:(int,natural) farray. forall o:natural.
  forall o1:(int,natural) farray. forall temp___624:int. forall o2:natural.
  forall o3:int. forall o4:map. forall result:(int,natural) farray.
  forall ta2:(int,natural) farray. forall result1:int. forall index1:int.
  forall ta3:(int,natural) farray. forall index2:int.
  forall result2:(int,natural) farray. forall ta4:(int,natural) farray.
  forall ta5:(int,natural) farray. forall index3:int.
  forall ta6:(int,natural) farray. forall index4:int.
  forall ta7:(int,natural) farray. forall index5:int.
  forall ta8:(int,natural) farray. forall index6:int. forall result3:map.
  forall ta9:map. forall result4:map. forall ta10:map. forall result5:int.
  forall outer1:int. forall result6:int. forall inner1:int.
  forall inner2:int. forall result7:int. forall inner3:int.
  forall inner4:int. forall inner5:int. (((({ map__content1 = result } = {
  map__content1 = ta }) and (ta2 = optional__B_1__ta__aggregate_def(0))) and
  ((({ int__content = result1 } = { int__content = index }) and
  (index1 = 1)) and ((((1 <= index1) and (index1 <= 5)) and
  ((((temp___617 = index1) and ((temp___615 = ta2) and
  ((temp___618 = ta2) and ((to_rep2((temp___618[index2])) = 0) and
  ((((forall temp___616:int. (((1 <= temp___616) and (temp___616 <= 5)) ->
     ((index2 <= temp___616) ->
     ((ta3[temp___616]) = (temp___615[temp___616]))))) and
  ((1 <= 5) -> in_range6(index2))) and ((1 <= index2) and (index2 <= 5))) and
  ((((to_rep2(o) = 1) and (o1 = (ta3[index2 <- o]))) and ((ta3 = result2) and
  (ta4 = o1))) and (index2 = 5))))))) and (((index2 = index3) and
  (ta4 = ta5)) and ((index4 = index2) and (ta6 = ta4)))) and
  (((index5 = index3) and (ta7 = ta5)) and ((index6 = index4) and
  (ta8 = ta6))))) or ((not ((1 <= index1) and (index1 <= 5))) and
  (((index1 = index5) and (ta2 = ta7)) and ((index6 = index1) and
  (ta8 = ta2))))))) -> (((result3 = ta1) and
  (ta9 = optional__B_3__ta__aggregate_def(0))) -> ((((to_rep2(o2) = 1) and
  ((((temp___624 = sum_of(2)) and in_range4(temp___624)) and
  (((1 <= temp___624) and (temp___624 <= 3)) and (o3 = temp___624))) and
  (o4 = set(ta9, o3, 2, o2)))) and ((result4 = ta9) and (ta10 = o4))) ->
  (((result5 = outer) and (outer1 = 1)) -> ((({ int__content = result6 } = {
  int__content = inner }) and (inner1 = 1)) -> (((1 <= inner1) and
  (inner1 <= 2)) -> ((to_rep2(get(ta10, outer1, inner2)) = 0) ->
  ((((((1 <= 2) -> in_range8(inner2)) and ((1 <= inner2) and
  (inner2 <= 2))) and ((not (inner2 = 2)) and ((result7 = inner2) and
  (inner3 = (inner2 + 1))))) and ((inner3 = inner4) and
  (inner5 = inner3))) -> (to_rep2(get(ta10, outer1, inner4)) = 0))))))))))
