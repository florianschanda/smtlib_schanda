(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type state

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : state, state -> bool

logic dummy1 : state

type state__ref = { state__content : state
}

function state__ref___projection(a: state__ref) : state = (a).state__content

logic attr__ATTRIBUTE_ADDRESS : int

type element

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : element, element -> bool

logic dummy2 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : natural, natural -> bool

logic dummy3 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : positive, positive -> bool

logic dummy4 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : positive -> int

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic to_rep3 : element -> int

logic of_rep3 : int -> element

axiom inversion_axiom3 :
  (forall x:element [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:element [to_rep3(x)]. in_range2(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range2(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,element) farray, int, int, (int,element) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,element) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)])))))))))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type t7s__ref = { t7s__content : integer
}

function t7s__ref___projection(a: t7s__ref) : integer = (a).t7s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,element) farray; rt : t
}

function to_array(a: us_t) : (int,element) farray = (a).elts

function of_array(a: (int,element) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,element) farray -> int

logic value__component__size : int

logic object__component__size : (int,element) farray -> int

logic value__alignment : int

logic object__alignment : (int,element) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,element) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,element) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,element) farray. (0 <= object__alignment(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : (int,element) farray

logic dummy7 : t

type t8s__ref = { t8s__content : us_t
}

function t8s__ref___projection(a: t8s__ref) : us_t = (a).t8s__content

type us_split_discrs = { rec__stacks__stack__max : positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__stacks__stack__max

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__stacks__stack__top : natural;
rec__stacks__stack__data : us_t; rec__ext__ : us_private
}

function us_split_fields_Top__projection(a: us_split_fields) : natural =
  (a).rec__stacks__stack__top

function us_split_fields_Data__projection(a: us_split_fields) : us_t =
  (a).rec__stacks__stack__data

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__stacks__stack__max) = to_rep1(((b).us_split_discrs1).rec__stacks__stack__max)) and
  ((to_rep(((a).us_split_fields1).rec__stacks__stack__top) = to_rep(((b).us_split_fields1).rec__stacks__stack__top)) and
  (bool_eq8(((a).us_split_fields1).rec__stacks__stack__data,
  ((b).us_split_fields1).rec__stacks__stack__data) = true))) -> (bool_eq9(a,
  b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__stacks__stack__max) = to_rep1(((b).us_split_discrs1).rec__stacks__stack__max)) and
  ((to_rep(((a).us_split_fields1).rec__stacks__stack__top) = to_rep(((b).us_split_fields1).rec__stacks__stack__top)) and
  (bool_eq8(((a).us_split_fields1).rec__stacks__stack__data,
  ((b).us_split_fields1).rec__stacks__stack__data) = true)))) -> (bool_eq9(a,
  b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:positive. forall a1:natural. forall a2:(int,element) farray.
  forall a3:t. forall a4:us_private. forall a5:int. (0 <= object__size1({
  us_split_discrs1 = { rec__stacks__stack__max = a }; us_split_fields1 = {
  rec__stacks__stack__top = a1; rec__stacks__stack__data = { elts = a2; rt =
  a3 }; rec__ext__ = a4 }; attr__tag = a5 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:positive. forall a1:natural. forall a2:(int,element) farray.
  forall a3:t. forall a4:us_private. forall a5:int.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__stacks__stack__max = a
  }; us_split_fields1 = { rec__stacks__stack__top = a1;
  rec__stacks__stack__data = { elts = a2; rt = a3 }; rec__ext__ = a4 };
  attr__tag = a5 })))

logic stacks__stack__max__first__bit : int

logic stacks__stack__max__last__bit : int

logic stacks__stack__max__position : int

axiom stacks__stack__max__first__bit_axiom :
  (0 <= stacks__stack__max__first__bit)

axiom stacks__stack__max__last__bit_axiom :
  (stacks__stack__max__first__bit <  stacks__stack__max__last__bit)

axiom stacks__stack__max__position_axiom :
  (0 <= stacks__stack__max__position)

logic stacks__stack__top__first__bit : int

logic stacks__stack__top__last__bit : int

logic stacks__stack__top__position : int

axiom stacks__stack__top__first__bit_axiom :
  (0 <= stacks__stack__top__first__bit)

axiom stacks__stack__top__last__bit_axiom :
  (stacks__stack__top__first__bit <  stacks__stack__top__last__bit)

axiom stacks__stack__top__position_axiom :
  (0 <= stacks__stack__top__position)

logic stacks__stack__data__first__bit : int

logic stacks__stack__data__last__bit : int

logic stacks__stack__data__position : int

axiom stacks__stack__data__first__bit_axiom :
  (0 <= stacks__stack__data__first__bit)

axiom stacks__stack__data__last__bit_axiom :
  (stacks__stack__data__first__bit <  stacks__stack__data__last__bit)

axiom stacks__stack__data__position_axiom :
  (0 <= stacks__stack__data__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy8 : positive

logic dummy9 : natural

logic dummy10 : (int,element) farray

logic dummy11 : t

logic dummy12 : us_private

logic dummy13 : int

type stack__ref = { stack__content : us_rep
}

function stack__ref___projection(a: stack__ref) : us_rep = (a).stack__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq10 : bool, bool -> bool

axiom bool_eq_def8 :
  (forall x:bool. forall y:bool [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

predicate in_range5(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE6 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> bool

logic is_full : us_rep -> bool

logic is_full__function_guard : bool, us_rep -> prop

logic is_full1 : int, us_rep -> bool

logic is_full__function_guard1 : bool, int, us_rep -> prop

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic size1 : int, us_rep -> int

logic size__function_guard1 : int, int, us_rep -> prop

axiom is_full__post_axiom : true

axiom is_full__post__dispatch_axiom : true

axiom stacks__stack__compat_axiom :
  (forall s:positive. forall s1:natural. forall s2:(int,element) farray.
  forall s3:t. forall s4:us_private. forall s5:int [is_full1(us_tag, {
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })]. (to_int(is_full({
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })) = to_int(is_full1(us_tag, {
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 }))))

axiom is_full__def_axiom :
  (forall s:positive. forall s1:natural. forall s2:(int,element) farray.
  forall s3:t. forall s4:us_private. forall s5:int [is_full({
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })]. ((is_full({ us_split_discrs1 =
  { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 }) = true) <-> (size({
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 }) = to_rep1(s))))

axiom size__post_axiom :
  (forall s:positive. forall s1:natural. forall s2:(int,element) farray.
  forall s3:t. forall s4:us_private. forall s5:int [size({ us_split_discrs1 =
  { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })]. ((dynamic_property1(1,
  to_rep1(s), to_rep2(first(s3)), to_rep2(last(s3))) and
  ((to_rep2(first(s3)) = 1) and (to_rep2(last(s3)) = to_rep1(s)))) ->
  in_range3(size({ us_split_discrs1 = { rec__stacks__stack__max = s };
  us_split_fields1 = { rec__stacks__stack__top = s1;
  rec__stacks__stack__data = { elts = s2; rt = s3 }; rec__ext__ = s4 };
  attr__tag = s5 }))))

axiom size__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall s:positive. forall s1:natural. forall s2:(int,element) farray.
  forall s3:t. forall s4:us_private. forall s5:int [size1(attr__tag1, {
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })]. ((dynamic_property1(1,
  to_rep1(s), to_rep2(first(s3)), to_rep2(last(s3))) and
  ((to_rep2(first(s3)) = 1) and (to_rep2(last(s3)) = to_rep1(s)))) ->
  in_range3(size1(attr__tag1, { us_split_discrs1 = {
  rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })))))

axiom stacks__stack__compat_axiom1 :
  (forall s:positive. forall s1:natural. forall s2:(int,element) farray.
  forall s3:t. forall s4:us_private. forall s5:int [size1(us_tag, {
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })]. (size({ us_split_discrs1 = {
  rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 }) = size1(us_tag, {
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })))

axiom size__def_axiom :
  (forall s:positive. forall s1:natural. forall s2:(int,element) farray.
  forall s3:t. forall s4:us_private. forall s5:int [size({ us_split_discrs1 =
  { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 })]. ((dynamic_property1(1,
  to_rep1(s), to_rep2(first(s3)), to_rep2(last(s3))) and
  ((to_rep2(first(s3)) = 1) and (to_rep2(last(s3)) = to_rep1(s)))) -> (size({
  us_split_discrs1 = { rec__stacks__stack__max = s }; us_split_fields1 = {
  rec__stacks__stack__top = s1; rec__stacks__stack__data = { elts = s2; rt =
  s3 }; rec__ext__ = s4 }; attr__tag = s5 }) = to_rep(s1))))

logic s__split_discrs : positive

logic s__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "stacks.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall mystate:int. forall s__split_fields:natural.
  forall s__split_fields1:(int,element) farray. forall s__split_fields2:t.
  forall s__split_fields3:us_private. forall mystate1:int.
  forall s__split_fields4:t. ((dynamic_property1(1, to_rep1(s__split_discrs),
  to_rep2(first(s__split_fields2)), to_rep2(last(s__split_fields2))) and
  ((to_rep2(first(s__split_fields2)) = 1) and
  (to_rep2(last(s__split_fields2)) = to_rep1(s__split_discrs)))) ->
  (in_range2(e) -> (in_range1(mystate) -> (((dynamic_property1(1,
  to_rep1(s__split_discrs), to_rep2(first(s__split_fields4)),
  to_rep2(last(s__split_fields4))) and
  ((to_rep2(first(s__split_fields4)) = 1) and
  (to_rep2(last(s__split_fields4)) = to_rep1(s__split_discrs)))) and
  in_range1(mystate1)) -> in_range((size({ us_split_discrs1 = {
  rec__stacks__stack__max = s__split_discrs }; us_split_fields1 = {
  rec__stacks__stack__top = s__split_fields; rec__stacks__stack__data = {
  elts = s__split_fields1; rt = s__split_fields2 }; rec__ext__ =
  s__split_fields3 }; attr__tag = s__attr__tag }) + 1)))))))
