(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort slot 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (slot slot) Bool)
(declare-const dummy slot)
(declare-datatypes () ((slot__ref (mk_slot__ref (slot__content slot)))))
(define-fun slot__ref___projection ((a slot__ref)) slot (slot__content a))
(declare-fun to_rep (slot) Int)
(declare-fun of_rep (Int) slot)
(assert (forall ((x slot)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x slot)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int slot))))))
(declare-fun slide ((Array Int slot) Int Int) (Array Int slot))
(assert (forall ((a (Array Int slot))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int slot))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int slot)) (a__first Int) (a__last Int) (b (Array Int slot)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep (select a temp___idx_173)) (to_rep (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int slot)) (b (Array Int slot))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep (select a temp___idx_173)) (to_rep (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-const dummy1 (Array Int slot))
(declare-const value__size Int)
(declare-fun object__size ((Array Int slot)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int slot)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int slot)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int slot))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int slot))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int slot))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int slot) (Array Int slot)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int slot)))))))
(declare-fun slide1 ((Array Int (Array Int slot)) Int Int) (Array Int (Array Int slot)))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int slot))) (a__first Int) (a__last Int) (b (Array Int (Array Int slot))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq (select a temp___idx_174) 1 3 (select b (+ (- b__first a__first) temp___idx_174)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq (select a temp___idx_174) 1 3 (select b (+ (- b__first a__first) temp___idx_174)) 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)
(declare-fun num_free_slots__function_guard (Int (Array Int (Array Int slot))) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)
(declare-fun count_free_slots__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (dynamic_invariant (num_free_slots tictactoe__my_board) true false true true) :pattern ((num_free_slots tictactoe__my_board)))))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3 tictactoe__my_board)) :pattern ((num_free_slots tictactoe__my_board)))))
(declare-fun temp___811 ((Array Int slot)) (Array Int (Array Int slot)))
(declare-fun temp___815 (Int) (Array Int slot))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(assert (forall ((temp___813 (Array Int slot))) (forall ((temp___814 Int)) (= (select (temp___811 temp___813) temp___814) temp___813))))
(define-fun dynamic_invariant2 ((temp___expr_584 Int) (temp___is_init_580 Bool) (temp___skip_constant_581 Bool) (temp___do_toplevel_582 Bool) (temp___do_typ_inv_583 Bool)) Bool (=> (or (= temp___is_init_580 true) (<= 0 2)) (in_range temp___expr_584)))
(assert (forall ((temp___817 Int)) (=> (dynamic_invariant2 temp___817 true true true true) (forall ((temp___818 Int)) (= (to_rep (select (temp___815 temp___817) temp___818)) temp___817)))))
(declare-sort pos 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (pos pos) Bool)
(declare-const dummy4 pos)
(declare-datatypes () ((pos__ref (mk_pos__ref (pos__content pos)))))
(define-fun pos__ref___projection ((a pos__ref)) pos (pos__content a))
(define-fun dynamic_invariant3 ((temp___expr_591 Int) (temp___is_init_587 Bool) (temp___skip_constant_588 Bool) (temp___do_toplevel_589 Bool) (temp___do_typ_inv_590 Bool)) Bool (=> (or (= temp___is_init_587 true) (<= 1 3)) (in_range3 temp___expr_591)))
(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)
(declare-fun one_free_slot__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (dynamic_invariant1 (one_free_slot x y tictactoe__my_board) true false true true)) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep (let ((temp___622 (select tictactoe__my_board x))) (select temp___622 y))) 0) 1 0))) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (dynamic_invariant1 (count_free_slots x y tictactoe__my_board) true false true true)) :pattern ((count_free_slots x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot 1 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 1 3 tictactoe__my_board) 0)) (ite (<= 2 x) (+ (+ (one_free_slot 2 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 2 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 2 3 tictactoe__my_board) 0)) 0)) (ite (<= 3 x) (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 3 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0)))) :pattern ((count_free_slots x y tictactoe__my_board))))))
(declare-const my_board (Array Int (Array Int slot)))
(declare-const result (Array Int (Array Int slot)))
(declare-const my_board1 (Array Int (Array Int slot)))
(declare-const my_board2 (Array Int (Array Int slot)))
(declare-const my_board3 (Array Int (Array Int slot)))
(assert (= result my_board))
(assert (= my_board1 (temp___811 (temp___815 0))))
(assert (= my_board1 my_board2))
(assert (= my_board3 my_board1))
(assert (not (= (num_free_slots my_board2) 9)))
(check-sat)
(exit)
