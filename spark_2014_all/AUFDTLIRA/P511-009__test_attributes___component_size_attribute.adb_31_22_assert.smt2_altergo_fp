(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type r

logic user_eq : r, r -> bool

logic value__size : int

logic object__size : r -> int

logic value__alignment : int

logic object__alignment : r -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:r. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:r. (0 <= object__alignment(a)))

logic dummy : r

type r__ref = { r__content : r
}

function r__ref___projection(a: r__ref) : r = (a).r__content

type map__ref = { map__content : (int,r) farray
}

logic slide : (int,r) farray, int, int -> (int,r) farray

axiom slide_eq :
  (forall a:(int,r) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,r) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq : (int,r) farray, int, int, (int,r) farray, int, int -> bool

axiom bool_eq_def :
  (forall a:(int,r) farray. forall a__first:int. forall a__last:int.
  forall b:(int,r) farray. forall b__first:int. forall b__last:int
  [bool_eq(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) or (not ((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)))))) -> (bool_eq(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first)))) -> (bool_eq(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,r) farray. forall b:(int,r) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq(b, b__first, b__last, a, a__first,
  a__last) = true) -> (((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))))))

logic dummy1 : (int,r) farray

logic value__size1 : int

logic object__size1 : (int,r) farray -> int

logic value__component__size : int

logic object__component__size : (int,r) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,r) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,r) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,r) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,r) farray. (0 <= object__alignment1(a)))

logic user_eq1 : (int,r) farray, (int,r) farray -> bool

 (* File "component_size_attribute.adb", line 13, characters 0-0 *)
goal WP_parameter_def : ((0 <= value__component__size) ->
  (value__component__size <  0))
