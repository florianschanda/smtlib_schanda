(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type my_boolean

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : my_boolean, my_boolean -> bool

logic dummy : my_boolean

type my_boolean__ref = { my_boolean__content : my_boolean
}

function my_boolean__ref___projection(a: my_boolean__ref) : my_boolean =
  (a).my_boolean__content

logic to_rep : my_boolean -> int

logic of_rep : int -> my_boolean

axiom inversion_axiom :
  (forall x:my_boolean [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_boolean [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,my_boolean) farray
}

logic slide : (int,my_boolean) farray, int, int -> (int,my_boolean) farray

axiom slide_eq :
  (forall a:(int,my_boolean) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,my_boolean) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,my_boolean) farray, int, int, (int,my_boolean) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,my_boolean) farray. forall a__first:int. forall a__last:int.
  forall b:(int,my_boolean) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic xorb1 : (int,my_boolean) farray, int, int, (int,my_boolean) farray,
  int, int -> (int,my_boolean) farray

logic andb1 : (int,my_boolean) farray, int, int, (int,my_boolean) farray,
  int, int -> (int,my_boolean) farray

logic orb1 : (int,my_boolean) farray, int, int, (int,my_boolean) farray, int,
  int -> (int,my_boolean) farray

logic notb1 : (int,my_boolean) farray, int, int -> (int,my_boolean) farray

axiom op_def :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = of_rep(to_int(match_bool(of_int(to_rep((a[i]))),
  true, of_int(to_rep((b[((i - a_first) + b_first)])))))))))))

axiom op_def1 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = of_rep(to_int(match_bool(of_int(to_rep((a[i]))),
  of_int(to_rep((b[((i - a_first) + b_first)]))), false))))))))

axiom op_def2 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = of_rep(to_int(xorb(of_int(to_rep((a[i]))),
  of_int(to_rep((b[((i - a_first) + b_first)])))))))))))

axiom notb_def :
  (forall a:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first,
  a_last)[i]) = of_rep(to_int(match_bool(of_int(to_rep((a[i]))), false,
  true))))))))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,my_boolean) farray; rt : t
}

function to_array(a: us_t) : (int,my_boolean) farray = (a).elts

function of_array(a: (int,my_boolean) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,my_boolean) farray -> int

logic value__component__size : int

logic object__component__size : (int,my_boolean) farray -> int

logic value__alignment : int

logic object__alignment : (int,my_boolean) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,my_boolean) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,my_boolean) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,my_boolean) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,my_boolean) farray

logic dummy3 : t

type bool_array__ref = { bool_array__content : us_t
}

function bool_array__ref___projection(a: bool_array__ref) : us_t =
  (a).bool_array__content

type t11b

predicate in_range3(x: int) = ((6 <= x) and (x <= 45))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : t11b, t11b -> bool

logic dummy4 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref___projection(a: t11b__ref) : t11b = (a).t11b__content

logic v : (int,my_boolean) farray

logic v1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic array_logical_ops__test_ok2__v__aggregate_def : int, int,
  int -> (int,my_boolean) farray

type t13b

predicate in_range4(x: int) = ((1 <= x) and (x <= 40))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : t13b, t13b -> bool

logic dummy5 : t13b

type t13b__ref = { t13b__content : t13b
}

function t13b__ref___projection(a: t13b__ref) : t13b = (a).t13b__content

logic x : (int,my_boolean) farray

logic x1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic array_logical_ops__test_ok2__x__aggregate_def : int, int, int,
  int -> (int,my_boolean) farray

logic r2 : (int,my_boolean) farray

logic r21 : t

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom v__def_axiom : ((v = array_logical_ops__test_ok2__v__aggregate_def(0,
  1, 0)) and (v1 = mk(6, 45)))

axiom def_axiom :
  (forall temp___168:int. forall temp___169:int. forall temp___170:int.
  (((in_range1(temp___168) and in_range1(temp___169)) and
  in_range1(temp___170)) ->
  (forall temp___171:int. ((((36 <= temp___171) and (temp___171 <= 45)) ->
  (to_rep((array_logical_ops__test_ok2__v__aggregate_def(temp___168,
  temp___169, temp___170)[temp___171])) = temp___170)) and
  ((not ((36 <= temp___171) and (temp___171 <= 45))) ->
  ((((16 <= temp___171) and (temp___171 <= 35)) ->
  (to_rep((array_logical_ops__test_ok2__v__aggregate_def(temp___168,
  temp___169, temp___170)[temp___171])) = temp___169)) and
  ((not ((16 <= temp___171) and (temp___171 <= 35))) ->
  (((6 <= temp___171) and (temp___171 <= 15)) ->
  (to_rep((array_logical_ops__test_ok2__v__aggregate_def(temp___168,
  temp___169, temp___170)[temp___171])) = temp___168)))))))))

axiom x__def_axiom : ((x = array_logical_ops__test_ok2__x__aggregate_def(1,
  0, 1, 0)) and (x1 = mk(1, 40)))

axiom def_axiom1 :
  (forall temp___173:int. forall temp___174:int. forall temp___175:int.
  forall temp___176:int. ((((in_range1(temp___173) and
  in_range1(temp___174)) and in_range1(temp___175)) and
  in_range1(temp___176)) ->
  (forall temp___177:int. ((((31 <= temp___177) and (temp___177 <= 40)) ->
  (to_rep((array_logical_ops__test_ok2__x__aggregate_def(temp___173,
  temp___174, temp___175, temp___176)[temp___177])) = temp___176)) and
  ((not ((31 <= temp___177) and (temp___177 <= 40))) ->
  ((((21 <= temp___177) and (temp___177 <= 30)) ->
  (to_rep((array_logical_ops__test_ok2__x__aggregate_def(temp___173,
  temp___174, temp___175, temp___176)[temp___177])) = temp___175)) and
  ((not ((21 <= temp___177) and (temp___177 <= 30))) ->
  ((((11 <= temp___177) and (temp___177 <= 20)) ->
  (to_rep((array_logical_ops__test_ok2__x__aggregate_def(temp___173,
  temp___174, temp___175, temp___176)[temp___177])) = temp___174)) and
  ((not ((11 <= temp___177) and (temp___177 <= 20))) ->
  (((1 <= temp___177) and (temp___177 <= 10)) ->
  (to_rep((array_logical_ops__test_ok2__x__aggregate_def(temp___173,
  temp___174, temp___175, temp___176)[temp___177])) = temp___173)))))))))))

axiom r2__def_axiom : ((r2 = orb1(x, to_rep1(first(x1)), to_rep1(last(x1)),
  v, to_rep1(first(v1)), to_rep1(last(v1)))) and
  (r21 = mk(to_rep1(first(x1)), to_rep1(last(x1)))))

 (* File "array_logical_ops.adb", line 4, characters 0-0 *)
goal WP_parameter_def : (((array_logical_ops__test_ok2__v__aggregate_def(0,
  1, 0) = v) and (mk(6, 45) = v1)) -> (dynamic_property((- 2147483648),
  2147483647, to_rep1(first(v1)), to_rep1(last(v1))) ->
  (((array_logical_ops__test_ok2__x__aggregate_def(1, 0, 1, 0) = x) and
  (mk(1, 40) = x1)) -> (dynamic_property((- 2147483648), 2147483647,
  to_rep1(first(x1)), to_rep1(last(x1))) -> (((orb1(x, to_rep1(first(x1)),
  to_rep1(last(x1)), v, to_rep1(first(v1)), to_rep1(last(v1))) = r2) and
  (mk(to_rep1(first(x1)), to_rep1(last(x1))) = r21)) ->
  (dynamic_property((- 2147483648), 2147483647, to_rep1(first(r21)),
  to_rep1(last(r21))) -> (to_rep1(first(r21)) = 1)))))))
