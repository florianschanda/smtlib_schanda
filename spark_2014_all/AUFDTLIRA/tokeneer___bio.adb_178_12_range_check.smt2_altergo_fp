(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type unsigned32t

predicate in_range4(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : unsigned32t, unsigned32t -> bool

logic dummy5 : unsigned32t

type unsigned32t__ref = { unsigned32t__content : unsigned32t
}

function unsigned32t__ref___projection(a: unsigned32t__ref) : unsigned32t =
  (a).unsigned32t__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,character) farray

logic dummy7 : t1

type stringf1l1000__ref = { stringf1l1000__content : us_t1
}

function stringf1l1000__ref___projection(a: stringf1l1000__ref) : us_t1 =
  (a).stringf1l1000__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq9(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq6 : us_t2, us_t2 -> bool

logic dummy8 : (int,character) farray

logic dummy9 : t2

type stringf1__ref = { stringf1__content : us_t2
}

function stringf1__ref___projection(a: stringf1__ref) : us_t2 =
  (a).stringf1__content

logic i15s : (int,character) farray

logic i15s1 : t1

logic attr__ATTRIBUTE_ADDRESS : int

logic unsigned32t_image : int -> us_t1

logic unsigned32t_image__function_guard : us_t1, int -> prop

axiom unsigned32t_image__post_axiom :
  (forall x:int [unsigned32t_image(x)]. (in_range4(x) ->
  (dynamic_property1(1, 2147483647,
  to_rep1(first2((unsigned32t_image(x)).rt1)),
  to_rep1(last2((unsigned32t_image(x)).rt1))) and
  ((to_rep1(first4(mk2(to_rep1(first2((unsigned32t_image(x)).rt1)),
  to_rep1(last2((unsigned32t_image(x)).rt1))))) = 1) and
  (to_rep1(last2((unsigned32t_image(x)).rt1)) <= 1000)))))

axiom unsigned32t_image__def_axiom :
  (forall x:int [unsigned32t_image(x)]. (in_range4(x) ->
  (unsigned32t_image(x) = { elts1 =
  (to_string(attr__ATTRIBUTE_IMAGE4(x))).elts; rt1 =
  mk1(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE4(x))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE4(x))).rt))) })))

type descriptioni

predicate in_range5(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : descriptioni, descriptioni -> bool

logic dummy10 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

type returnt

predicate in_range6(x: int) = ((0 <= x) and (x <= 16))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : returnt, returnt -> bool

logic dummy11 : returnt

type returnt__ref = { returnt__content : returnt
}

function returnt__ref___projection(a: returnt__ref) : returnt =
  (a).returnt__content

logic returnt_image : int -> us_t1

logic returnt_image__function_guard : us_t1, int -> prop

axiom returnt_image__post_axiom :
  (forall x:int [returnt_image(x)]. (in_range6(x) -> (dynamic_property1(1,
  2147483647, to_rep1(first2((returnt_image(x)).rt1)),
  to_rep1(last2((returnt_image(x)).rt1))) and
  ((to_rep1(first4(mk2(to_rep1(first2((returnt_image(x)).rt1)),
  to_rep1(last2((returnt_image(x)).rt1))))) = 1) and
  (to_rep1(last2((returnt_image(x)).rt1)) <= 1000)))))

axiom returnt_image__def_axiom :
  (forall x:int [returnt_image(x)]. (in_range6(x) -> (returnt_image(x) = {
  elts1 = (to_string(attr__ATTRIBUTE_IMAGE6(x))).elts; rt1 =
  mk1(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE6(x))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE6(x))).rt))) })))

logic text : (int,character) farray

logic text1 : t1

logic attr__ATTRIBUTE_ADDRESS1 : int

logic returnvalue : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic fullstring__first : integer

logic fullstring__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy12 : integer

type t18b__ref = { t18b__content : integer
}

function t18b__ref___projection(a: t18b__ref) : integer = (a).t18b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq13(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq10 : us_t3, us_t3 -> bool

logic dummy13 : (int,character) farray

logic dummy14 : t3

type t19b__ref = { t19b__content : us_t3
}

function t19b__ref___projection(a: t19b__ref) : us_t3 = (a).t19b__content

logic temp___String_Literal_1299 : unit -> (int,character) farray

axiom temp___String_Literal_1299__def_axiom :
  ((to_rep((temp___String_Literal_1299(void)[1])) = 58) and
  (to_rep((temp___String_Literal_1299(void)[2])) = 32))

logic temp___String_Literal_1303 : unit -> (int,character) farray

axiom temp___String_Literal_1303__def_axiom :
  (((to_rep((temp___String_Literal_1303(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1303(void)[2])) = 40)) and
  (to_rep((temp___String_Literal_1303(void)[3])) = 32))

logic temp___String_Literal_1308 : unit -> (int,character) farray

axiom temp___String_Literal_1308__def_axiom :
  ((to_rep((temp___String_Literal_1308(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1308(void)[2])) = 41))

logic result__ : (int,character) farray

logic thecodename : int

logic fullstring : (int,character) farray

logic temp___1307 : (int,character) farray

logic temp___13071 : t1

logic temp___1302 : (int,character) farray

logic temp___13021 : t1

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic temp___1301 : (int,character) farray

logic temp___13011 : t

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic temp___1304 : (int,character) farray

logic temp___13041 : t

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic temp___1306 : (int,character) farray

logic temp___13061 : t

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic o22 : int

logic o23 : int

logic temp___1309 : (int,character) farray

logic temp___13091 : t

logic o24 : int

logic o25 : int

logic o26 : int

logic o27 : int

logic o28 : int

logic o29 : int

logic bio__makedescription__setresultstring__fullstring__assume : (int,character) farray

logic bio__makedescription__setresultstring__fullstring__assume1 : t

logic temp___1315 : (int,character) farray

logic temp___13151 : t3

logic o30 : (int,character) farray

logic temp___1318 : (int,character) farray

logic temp___13181 : t3

logic result : (int,character) farray

logic fullstring1 : (int,character) farray

axiom H : (dynamic_property1(1, 2147483647, to_rep1(first2(i15s1)),
  to_rep1(last2(i15s1))) and ((to_rep1(first4(mk2(to_rep1(first2(i15s1)),
  to_rep1(last2(i15s1))))) = 1) and (to_rep1(last2(i15s1)) <= 1000)))

axiom H1 : (dynamic_property1(1, 2147483647, to_rep1(first2(text1)),
  to_rep1(last2(text1))) and ((to_rep1(first4(mk2(to_rep1(first2(text1)),
  to_rep1(last2(text1))))) = 1) and (to_rep1(last2(text1)) <= 1000)))

axiom H2 : in_range4(returnvalue)

axiom H3 : in_range6(thecodename)

axiom H4 : (({ elts1 = temp___1307; rt1 = temp___13071
  } = unsigned32t_image(returnvalue)) and ((dynamic_property1(1, 2147483647,
  to_rep1(first2(temp___13071)), to_rep1(last2(temp___13071))) and
  ((to_rep1(first4(mk2(to_rep1(first2(temp___13071)),
  to_rep1(last2(temp___13071))))) = 1) and
  (to_rep1(last2(temp___13071)) <= 1000))) and
  ((temp___1307 = (to_string(attr__ATTRIBUTE_IMAGE4(returnvalue))).elts) and
  (temp___13071 = mk1(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE4(returnvalue))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE4(returnvalue))).rt)))))))

axiom H5 : (({ elts1 = temp___1302; rt1 = temp___13021
  } = returnt_image(thecodename)) and ((dynamic_property1(1, 2147483647,
  to_rep1(first2(temp___13021)), to_rep1(last2(temp___13021))) and
  ((to_rep1(first4(mk2(to_rep1(first2(temp___13021)),
  to_rep1(last2(temp___13021))))) = 1) and
  (to_rep1(last2(temp___13021)) <= 1000))) and
  ((temp___1302 = (to_string(attr__ATTRIBUTE_IMAGE6(thecodename))).elts) and
  (temp___13021 = mk1(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE6(thecodename))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE6(thecodename))).rt)))))))

axiom H6 : ((length1({ elts1 = text; rt1 = text1 }) = 0) ->
  (temp___String_Literal_1299(void) = temp___1301))

axiom H7 : ((length1({ elts1 = text; rt1 = text1 }) = 0) -> (mk(1,
  2) = temp___13011))

axiom H8 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  ((1 <= 2) -> (o = ((2 - 1) + 1))))

axiom H9 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  ((not (1 <= 2)) -> (o = 0)))

axiom H10 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  ((to_rep1(first2(text1)) <= to_rep1(last2(text1))) ->
  (o1 = ((to_rep1(last2(text1)) - to_rep1(first2(text1))) + 1))))

axiom H11 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  ((not (to_rep1(first2(text1)) <= to_rep1(last2(text1)))) -> (o1 = 0)))

axiom H12 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  (o2 = (o1 + o)))

axiom H13 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  (o3 = (to_rep1(first2(text1)) + o2)))

axiom H14 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  (o4 = (o3 - 1)))

axiom H15 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  ((o5 = o4) and in_range2(o4)))

axiom H16 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  (concat(text, to_rep1(first2(text1)), to_rep1(last2(text1)),
  temp___String_Literal_1299(void), 1, 2) = temp___1301))

axiom H17 : ((not (length1({ elts1 = text; rt1 = text1 }) = 0)) ->
  (mk(to_rep1(first2(text1)), o5) = temp___13011))

axiom H18 : ((length({ elts = temp___1301; rt = temp___13011 }) = 0) ->
  (temp___1302 = temp___1304))

axiom H19 : ((length({ elts = temp___1301; rt = temp___13011 }) = 0) ->
  (mk(to_rep1(first2(temp___13021)),
  to_rep1(last2(temp___13021))) = temp___13041))

axiom H20 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  ((to_rep1(first2(temp___13021)) <= to_rep1(last2(temp___13021))) ->
  (o6 = ((to_rep1(last2(temp___13021)) - to_rep1(first2(temp___13021))) + 1))))

axiom H21 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  ((not (to_rep1(first2(temp___13021)) <= to_rep1(last2(temp___13021)))) ->
  (o6 = 0)))

axiom H22 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  ((to_rep1(first(temp___13011)) <= to_rep1(last(temp___13011))) ->
  (o7 = ((to_rep1(last(temp___13011)) - to_rep1(first(temp___13011))) + 1))))

axiom H23 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  ((not (to_rep1(first(temp___13011)) <= to_rep1(last(temp___13011)))) ->
  (o7 = 0)))

axiom H24 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  (o8 = (o7 + o6)))

axiom H25 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  (o9 = (to_rep1(first(temp___13011)) + o8)))

axiom H26 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  (o10 = (o9 - 1)))

axiom H27 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  ((o11 = o10) and in_range2(o10)))

axiom H28 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  (concat(temp___1301, to_rep1(first(temp___13011)),
  to_rep1(last(temp___13011)), temp___1302, to_rep1(first2(temp___13021)),
  to_rep1(last2(temp___13021))) = temp___1304))

axiom H29 : ((not (length({ elts = temp___1301; rt = temp___13011 }) = 0)) ->
  (mk(to_rep1(first(temp___13011)), o11) = temp___13041))

axiom H30 : ((length({ elts = temp___1304; rt = temp___13041 }) = 0) ->
  (temp___String_Literal_1303(void) = temp___1306))

axiom H31 : ((length({ elts = temp___1304; rt = temp___13041 }) = 0) ->
  (mk(1, 3) = temp___13061))

axiom H32 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  ((1 <= 3) -> (o12 = ((3 - 1) + 1))))

axiom H33 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  ((not (1 <= 3)) -> (o12 = 0)))

axiom H34 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  ((to_rep1(first(temp___13041)) <= to_rep1(last(temp___13041))) ->
  (o13 = ((to_rep1(last(temp___13041)) - to_rep1(first(temp___13041))) + 1))))

axiom H35 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  ((not (to_rep1(first(temp___13041)) <= to_rep1(last(temp___13041)))) ->
  (o13 = 0)))

axiom H36 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  (o14 = (o13 + o12)))

axiom H37 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  (o15 = (to_rep1(first(temp___13041)) + o14)))

axiom H38 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  (o16 = (o15 - 1)))

axiom H39 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  ((o17 = o16) and in_range2(o16)))

axiom H40 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  (concat(temp___1304, to_rep1(first(temp___13041)),
  to_rep1(last(temp___13041)), temp___String_Literal_1303(void), 1,
  3) = temp___1306))

axiom H41 : ((not (length({ elts = temp___1304; rt = temp___13041 }) = 0)) ->
  (mk(to_rep1(first(temp___13041)), o17) = temp___13061))

axiom H42 : (not (length({ elts = temp___1306; rt = temp___13061 }) = 0))

axiom H43 :
  ((to_rep1(first2(temp___13071)) <= to_rep1(last2(temp___13071))) ->
  (o18 = ((to_rep1(last2(temp___13071)) - to_rep1(first2(temp___13071))) + 1)))

axiom H44 :
  ((not (to_rep1(first2(temp___13071)) <= to_rep1(last2(temp___13071)))) ->
  (o18 = 0))

axiom H45 : ((to_rep1(first(temp___13061)) <= to_rep1(last(temp___13061))) ->
  (o19 = ((to_rep1(last(temp___13061)) - to_rep1(first(temp___13061))) + 1)))

axiom H46 :
  ((not (to_rep1(first(temp___13061)) <= to_rep1(last(temp___13061)))) ->
  (o19 = 0))

axiom H47 : (o20 = (o19 + o18))

axiom H48 : (o21 = (to_rep1(first(temp___13061)) + o20))

axiom H49 : (o22 = (o21 - 1))

 (* File "audittypes.ads", line 103, characters 0-0 *)
goal WP_parameter_def : in_range2(o22)
