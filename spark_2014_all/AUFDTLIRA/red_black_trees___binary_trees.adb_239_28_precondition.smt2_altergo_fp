(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : extended_index_type, extended_index_type -> bool

logic dummy1 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type position_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : position_type, position_type -> bool

logic dummy2 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type direction

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : direction, direction -> bool

logic dummy3 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq6 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : count_type, count_type -> bool

logic dummy5 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq4(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range5(length(container))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

type element_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic add : us_rep, int -> us_rep

logic add__function_guard : us_rep, us_rep, int -> prop

axiom add__post_axiom :
  (forall container:us_rep.
  (forall new_item:int [add(container, new_item)]. ((in_range6(new_item) and
  ((length(container) <  2147483647) and
  ((0 + length(container)) <  2147483647))) -> ((length(add(container,
  new_item)) = (length(container) + 1)) and ((get(add(container, new_item),
  (0 + length(add(container, new_item)))) = new_item) and
  (((bool_le(length(container), length(add(container, new_item))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(container)))) ->
  (get(container, n) = get(add(container, new_item), n))))) and
  (not (bool_le(length(container), length(add(container,
  new_item))) = false))))))))

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((user_eq4(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((user_eq4(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep

logic dummy8 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq10 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq10(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq9((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq9((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq10(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq9((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq11 : us_rep2, us_rep2 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq11(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy9 : extended_index_type

logic dummy10 : extended_index_type

logic dummy11 : extended_index_type

logic dummy12 : position_type

type cell__ref = { cell__content : us_rep2
}

function cell__ref___projection(a: cell__ref) : us_rep2 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq12 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq11((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq11((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq12(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq11((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy13 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq9 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep2) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep2) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq13 : us_rep3, us_rep3 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq13(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq12(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq13(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq12(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq13(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__size4({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy14 : extended_index_type

logic dummy15 : (int,us_rep2) farray

type forest__ref = { forest__content : us_rep3
}

function forest__ref___projection(a: forest__ref) : us_rep3 =
  (a).forest__content

logic size : us_rep3 -> int

logic size__function_guard : int, us_rep3 -> prop

logic tree_structure : us_rep3 -> bool

logic tree_structure__function_guard : bool, us_rep3 -> prop

logic valid_root : us_rep3, int -> bool

logic valid_root__function_guard : bool, us_rep3, int -> prop

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((in_range1(i) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) -> ((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) <  i) -> (not (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true))))))

axiom valid_root__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) <-> ((i <= to_rep(f)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 2)))))

logic parent : us_rep3, int -> int

logic parent__function_guard : int, us_rep3, int -> prop

axiom parent__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. ((in_range1(i) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true)) -> ((((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) and in_range2(parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i))))))

axiom parent__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. (in_range1(i) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  i) = to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)))))

logic position : us_rep3, int -> int

logic position__function_guard : int, us_rep3, int -> prop

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((in_range1(i) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) and (not (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range4(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom position__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (in_range1(i) -> (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position)))))

logic f : extended_index_type

logic f1 : (int,us_rep2) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic root : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type element_type1

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : element_type1, element_type1 -> bool

logic dummy16 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep4

logic bool_eq15 : us_rep4, us_rep4 -> bool

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep4. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep4. (0 <= object__alignment5(a)))

logic user_eq12 : us_rep4, us_rep4 -> bool

logic dummy17 : us_rep4

type set__ref = { set__content : us_rep4
}

function set__ref___2__projection(a: set__ref) : us_rep4 = (a).set__content

logic is_empty : us_rep4 -> bool

logic is_empty__function_guard : bool, us_rep4 -> prop

logic contains : us_rep4, int -> bool

logic contains__function_guard : bool, us_rep4, int -> prop

axiom contains__post_axiom :
  (forall container:us_rep4.
  (forall item:int [contains(container, item)]. (in_range7(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range7(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic length1 : us_rep4 -> int

logic length__function_guard1 : int, us_rep4 -> prop

axiom length__post_axiom1 :
  (forall container:us_rep4 [length1(container)].
  in_range5(length1(container)))

logic ole : us_rep4, us_rep4 -> bool

logic ole__function_guard1 : bool, us_rep4, us_rep4 -> prop

logic included_except : us_rep4, us_rep4, int -> bool

logic included_except__function_guard : bool, us_rep4, us_rep4, int -> prop

logic remove : us_rep4, int -> us_rep4

logic remove__function_guard : us_rep4, us_rep4, int -> prop

axiom remove__post_axiom :
  (forall container:us_rep4.
  (forall item:int [remove(container, item)]. ((in_range7(item) and
  (contains(container, item) = true)) -> ((((length1(remove(container,
  item)) = (length1(container) - 1)) and (not (contains(remove(container,
  item), item) = true))) and (ole(remove(container, item),
  container) = true)) and (included_except(container, remove(container,
  item), item) = true)))))

logic all_indexes : unit -> us_rep4

logic all_indexes__function_guard : us_rep4, unit -> prop

axiom all_indexes__post_axiom :
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (contains(all_indexes(void),
   i) = true))) and (length1(all_indexes(void)) = 100))

type map__ref2 = { map__content2 : (int,bool) farray
}

logic slide2 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq2 :
  (forall a:(int,bool) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : bool, int -> (int,bool) farray

axiom singleton_def2 :
  (forall v:bool.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq16 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def13 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq16(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  ((a[temp___idx_134]) = (b[((b__first - a__first) + temp___idx_134)]))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  ((a[temp___idx_134]) = (b[((b__first - a__first) + temp___idx_134)])))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  ((a[temp___idx_134]) = (b[((b__first - a__first) + temp___idx_134)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq16(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq16(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq16(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic next : (int,bool) farray -> int

logic next__function_guard : int, (int,bool) farray -> prop

axiom next__post_axiom :
  (forall todo:(int,bool) farray [next(todo)]. ((((next(todo) = 0) ->
  (forall i:int. (((1 <= i) and (i <= 100)) -> (not ((todo[i]) = true))))) and
  ((not (next(todo) = 0)) -> ((todo[next(todo)]) = true))) and
  in_range2(next(todo))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic binary_trees__model__todo__aggregate_def : bool -> (int,bool) farray

axiom def_axiom :
  (forall temp___588:bool.
  (forall temp___589:int.
  ((binary_trees__model__todo__aggregate_def(temp___588)[temp___589]) = temp___588)))

axiom size__post_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = true) -> in_range2(size({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }))))

axiom size__def_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. (size({ us_split_fields5 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 }
  }) = to_rep(f2)))

axiom tree_structure__post_axiom : true

axiom tree_structure__def_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep2) farray
  [tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = true) <->
  (((((((((forall i:int. ((((to_rep(f2) + 1) <= i) and (i <= 100)) ->
          (bool_eq11((f3[i]), { us_split_fields3 = {
          rec__binary_trees__cell__left = of_rep(0);
          rec__binary_trees__cell__right = of_rep(0);
          rec__binary_trees__cell__parent = of_rep(0);
          rec__binary_trees__cell__position = of_rep1(2) } }) = true))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent) <= to_rep(f2)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__left) <= to_rep(f2)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__right)) and
  (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__right) <= to_rep(f2)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((to_rep1((((f3[i])).us_split_fields3).rec__binary_trees__cell__position) = 2) ->
  (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__left) = 0)) ->
  ((to_rep1((((f3[to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__left)])).us_split_fields3).rec__binary_trees__cell__position) = 0) and
  (to_rep((((f3[to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__left)])).us_split_fields3).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__right) = 0)) ->
  ((to_rep1((((f3[to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__right)])).us_split_fields3).rec__binary_trees__cell__position) = 1) and
  (to_rep((((f3[to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__right)])).us_split_fields3).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f3[i])).us_split_fields3).rec__binary_trees__cell__position) = 0)) ->
  (to_rep((((f3[to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields3).rec__binary_trees__cell__left) = i))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f3[i])).us_split_fields3).rec__binary_trees__cell__position) = 1)) ->
  (to_rep((((f3[to_rep((((f3[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields3).rec__binary_trees__cell__right) = i)))))))

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : extended_index, extended_index -> bool

logic dummy18 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position1:int [get(container, position1)].
  ((in_range8(position1) and ((1 <= position1) and
  (position1 <= (0 + length(container))))) -> in_range6(get(container,
  position1)))))

axiom ole__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range7(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep4 [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range7(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length1(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall item:int [included_except(left, right, item)]. (in_range7(item) ->
  ((included_except(left, right, item) = true) <->
  (forall e:int. ((in_range7(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

logic todo : (int,bool) farray

logic unseen : us_rep4

logic r : (int,us_rep1) farray

logic i : int

logic j : int

logic binary_trees__model__result : (int,us_rep1) farray

logic o : us_rep4

logic o1 : int

logic temp___592 : us_rep

logic temp___5921 : bool

logic o2 : int

logic o3 : us_rep

logic o4 : bool

logic o5 : (int,us_rep1) farray

logic temp___614 : int

logic temp___612 : (int,us_rep1) farray

logic temp___611 : us_rep4

logic temp___609 : (int,bool) farray

logic temp___644 : int

logic j1 : int

logic j2 : int

logic o6 : int

logic j3 : int

logic o7 : int

logic o8 : us_rep

logic o9 : bool

logic o10 : us_rep

logic o11 : bool

logic j4 : int

logic o12 : int

logic o13 : us_rep4

logic o14 : int

logic o15 : extended_index_type

logic o16 : extended_index_type

logic o17 : extended_index_type

logic o18 : position_type

logic o19 : extended_index_type

logic o20 : extended_index_type

logic o21 : extended_index_type

logic o22 : position_type

logic o23 : extended_index_type

logic o24 : int

logic o25 : us_rep

logic o26 : bool

logic o27 : int

logic o28 : (int,us_rep1) farray

logic o29 : int

logic o30 : extended_index_type

logic o31 : extended_index_type

logic o32 : extended_index_type

logic o33 : position_type

logic o34 : extended_index_type

logic o35 : extended_index_type

logic o36 : extended_index_type

logic o37 : position_type

logic o38 : extended_index_type

logic temp___599 : int

logic o39 : int

logic o40 : us_rep

logic o41 : bool

logic o42 : us_rep

logic o43 : bool

logic o44 : us_rep

logic o45 : us_rep

logic o46 : us_rep

logic o47 : bool

logic temp___601 : us_rep

logic temp___6011 : bool

logic o48 : us_rep

logic o49 : bool

logic o50 : int

logic o51 : (int,us_rep1) farray

logic o52 : int

logic o53 : (int,bool) farray

logic o54 : int

logic o55 : extended_index_type

logic o56 : extended_index_type

logic o57 : extended_index_type

logic o58 : position_type

logic o59 : extended_index_type

logic o60 : extended_index_type

logic o61 : extended_index_type

logic o62 : position_type

logic o63 : extended_index_type

logic o64 : int

logic o65 : us_rep

logic o66 : bool

logic o67 : int

logic o68 : (int,us_rep1) farray

logic o69 : int

logic o70 : extended_index_type

logic o71 : extended_index_type

logic o72 : extended_index_type

logic o73 : position_type

logic o74 : extended_index_type

logic o75 : extended_index_type

logic o76 : extended_index_type

logic o77 : position_type

logic o78 : extended_index_type

logic temp___606 : int

logic o79 : int

logic o80 : us_rep

logic o81 : bool

logic o82 : us_rep

logic o83 : bool

logic o84 : us_rep

logic o85 : us_rep

logic o86 : us_rep

logic o87 : bool

logic temp___608 : us_rep

logic temp___6081 : bool

logic o88 : us_rep

logic o89 : bool

logic o90 : int

logic o91 : (int,us_rep1) farray

logic o92 : int

logic o93 : (int,bool) farray

logic o94 : int

logic o95 : (int,bool) farray

logic o96 : int

logic j5 : int

logic o97 : int

logic o98 : us_rep

logic o99 : bool

logic o100 : us_rep

logic o101 : bool

logic i1 : int

logic temp___657 : int

logic o102 : int

logic i2 : int

logic temp___658 : int

logic o103 : int

logic o104 : bool

logic o105 : int

logic j6 : int

logic result : (int,bool) farray

logic todo1 : (int,bool) farray

logic result1 : us_rep4

logic unseen1 : us_rep4

logic result2 : bool

logic result3 : int

logic i3 : int

logic result4 : (int,bool) farray

logic todo2 : (int,bool) farray

logic result5 : (int,us_rep1) farray

logic r1 : (int,us_rep1) farray

logic todo3 : (int,bool) farray

logic unseen2 : us_rep4

logic r2 : (int,us_rep1) farray

logic i4 : int

logic j7 : int

logic temp___6441 : int

logic result6 : bool

logic result7 : int

logic temp___6442 : int

logic result8 : us_rep4

logic unseen3 : us_rep4

logic result9 : int

logic j8 : int

logic result10 : (int,us_rep1) farray

logic r3 : (int,us_rep1) farray

logic result11 : (int,us_rep1) farray

logic r4 : (int,us_rep1) farray

logic result12 : (int,bool) farray

logic todo4 : (int,bool) farray

logic result13 : int

logic j9 : int

logic result14 : (int,us_rep1) farray

logic r5 : (int,us_rep1) farray

logic result15 : (int,us_rep1) farray

logic r6 : (int,us_rep1) farray

logic result16 : (int,bool) farray

logic todo5 : (int,bool) farray

logic result17 : (int,bool) farray

logic todo6 : (int,bool) farray

logic result18 : int

logic i5 : int

logic todo7 : (int,bool) farray

logic unseen4 : us_rep4

logic r7 : (int,us_rep1) farray

logic i6 : int

logic j10 : int

logic todo8 : (int,bool) farray

logic unseen5 : us_rep4

logic r8 : (int,us_rep1) farray

logic i7 : int

logic j11 : int

logic todo9 : (int,bool) farray

logic unseen6 : us_rep4

logic r9 : (int,us_rep1) farray

logic i8 : int

logic j12 : int

logic todo10 : (int,bool) farray

logic unseen7 : us_rep4

logic r10 : (int,us_rep1) farray

logic i9 : int

logic j13 : int

logic result19 : bool

logic result20 : (int,us_rep1) farray

logic binary_trees__model__result1 : (int,us_rep1) farray

logic binary_trees__model__result2 : (int,us_rep1) farray

logic binary_trees__model__result3 : (int,us_rep1) farray

logic todo11 : (int,bool) farray

logic unseen8 : us_rep4

logic r11 : (int,us_rep1) farray

logic i10 : int

logic j14 : int

logic binary_trees__model__result4 : (int,us_rep1) farray

logic todo12 : (int,bool) farray

logic unseen9 : us_rep4

logic r12 : (int,us_rep1) farray

logic i11 : int

logic j15 : int

logic binary_trees__model__result5 : (int,us_rep1) farray

logic result21 : bool

logic result22 : bool

logic result23 : bool

axiom H : in_range1(root)

axiom H1 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)

axiom H2 : (valid_root({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, root) = true)

axiom H3 : (result = todo)

axiom H4 : (todo1 = binary_trees__model__todo__aggregate_def(of_int(0)))

axiom H5 : ((o = all_indexes(void)) and
  ((forall i12:int. (((1 <= i12) and (i12 <= 100)) -> (contains(o,
   i12) = true))) and (length1(o) = 100)))

axiom H6 : (result1 = unseen)

axiom H7 : (unseen1 = o)

axiom H8 :
  (forall temp___221:int. (((1 <= temp___221) and (temp___221 <= 100)) ->
  ((length((((r[temp___221])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((((r[temp___221])).us_split_fields1).rec__tree_model__path_type__k = of_int(0)))))

axiom H9 : true

axiom H10 : ((o2 = root) and in_range2(root))

axiom H11 : (result3 = i)

axiom H12 : (i3 = o2)

axiom H13 : in_range2(i3)

axiom H14 : (result4 = todo1)

axiom H15 : (todo2 = (todo1[root <- of_int(1)]))

axiom H16 :
  (length((((r[root])).us_split_fields1).rec__tree_model__path_type__a) <  100)

axiom H17 :
  ((((r[root])).us_split_fields1).rec__tree_model__path_type__a = o3)

axiom H18 : (of_int(1) = o4)

axiom H19 : (o5 = (r[root <- { us_split_fields1 = {
  rec__tree_model__path_type__a = o3; rec__tree_model__path_type__k = o4 }
  }]))

axiom H20 : (result5 = r)

axiom H21 : (r1 = o5)

axiom H22 : (not (i3 = 0))

axiom H23 : ((todo3[i4]) = true)

axiom H24 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  (((todo3[j16]) = true) ->
  ((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true))))

axiom H25 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  (((todo3[j16]) = true) ->
  (forall k:int. (((1 <= k) and (k <= 100)) ->
  (((((r2[k])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (not ((bool_lt(length((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a),
  length((((r2[k])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((r2[k])).us_split_fields1).rec__tree_model__path_type__a, n))))))))))))

axiom H26 :
  (((((r2[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (length((((r2[root])).us_split_fields1).rec__tree_model__path_type__a) = 0))

axiom H27 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  ((((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (j16 = root))) ->
  ((not (to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  ((((r2[to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__k = true)))))

axiom H28 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  (((((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (j16 = root))) ->
  (is_add((((r2[to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__a,
  to_rep1((((f1[j16])).us_split_fields3).rec__binary_trees__cell__position),
  (((r2[j16])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
  ((not (((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (j16 = root)))) ->
  (length((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a) = 0)))))

axiom H29 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) -> ((not (j16 = root)) ->
  ((((not (to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  ((((r2[to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true) or
  ((todo3[to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent)]) = true))) and
  ((not ((not (to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  ((((r2[to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
  (not ((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true)))))))

axiom H30 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  ((((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (j16 = root))) ->
  (not ((todo3[to_rep((((f1[j16])).us_split_fields3).rec__binary_trees__cell__parent)]) = true)))))

axiom H31 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  (((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall k:int. (((1 <= k) and (k <= 100)) ->
  ((((((r2[k])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((r2[k])).us_split_fields1).rec__tree_model__path_type__a),
  length((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((r2[k])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((r2[k])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j16 = k)))))))

axiom H32 :
  (((((r2[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (length((((r2[root])).us_split_fields1).rec__tree_model__path_type__a) = 0))

axiom H33 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) ->
  (length((((r2[j16])).us_split_fields1).rec__tree_model__path_type__a) <= (100 - length1(unseen2)))))

axiom H34 :
  (forall j16:int. (((1 <= j16) and (j16 <= 100)) -> ((contains(unseen2,
  j16) = true) <->
  ((not ((((r2[j16])).us_split_fields1).rec__tree_model__path_type__k = true)) or
  ((todo3[j16]) = true)))))

axiom H35 : ((0 <= 100) -> in_range2(i4))

axiom H36 : (result7 = temp___6441)

axiom H37 : (temp___6442 = length1(unseen2))

axiom H38 : ((o12 = i4) and in_range7(i4))

axiom H39 : ((o13 = remove(unseen2, o12)) and
  ((((length1(o13) = (length1(unseen2) - 1)) and (not (contains(o13,
  o12) = true))) and (ole(o13, unseen2) = true)) and
  (included_except(unseen2, o13, o12) = true)))

axiom H40 : (result8 = unseen2)

axiom H41 : (unseen3 = o13)

axiom H42 : ((0 <= 100) -> in_range2(j7))

axiom H43 : ((1 <= i4) and (i4 <= 100))

axiom H44 : (o14 = i4)

axiom H45 : ({ us_split_fields3 = { rec__binary_trees__cell__left = o15;
  rec__binary_trees__cell__right = o16; rec__binary_trees__cell__parent =
  o17; rec__binary_trees__cell__position = o18 } } = (f1[o14]))

axiom H46 : (o15 = o19)

axiom H47 : (o16 = o20)

axiom H48 : (o17 = o21)

axiom H49 : (o18 = o22)

axiom H50 : (o23 = o19)

axiom H51 : (o24 = to_rep(o23))

axiom H52 : (result9 = j7)

axiom H53 : (j8 = o24)

axiom H54 : ((not (j8 = 0)) -> (0 <  length1(unseen3)))

axiom H55 : ((not (j8 = 0)) ->
  (length((((r2[j8])).us_split_fields1).rec__tree_model__path_type__a) <  100))

axiom H56 : ((not (j8 = 0)) ->
  ((((r2[j8])).us_split_fields1).rec__tree_model__path_type__a = o25))

axiom H57 : ((not (j8 = 0)) -> (of_int(1) = o26))

axiom H58 : ((not (j8 = 0)) -> ((1 <= j8) and (j8 <= 100)))

axiom H59 : ((not (j8 = 0)) -> (o27 = j8))

axiom H60 : ((not (j8 = 0)) -> (o28 = (r2[o27 <- { us_split_fields1 = {
  rec__tree_model__path_type__a = o25; rec__tree_model__path_type__k = o26 }
  }])))

axiom H61 : ((not (j8 = 0)) -> (result10 = r2))

axiom H62 : ((not (j8 = 0)) -> (r3 = o28))

axiom H63 : ((not (j8 = 0)) -> ((1 <= j8) and (j8 <= 100)))

axiom H64 : ((not (j8 = 0)) -> (o29 = j8))

axiom H65 : ((not (j8 = 0)) -> ({ us_split_fields3 = {
  rec__binary_trees__cell__left = o30; rec__binary_trees__cell__right = o31;
  rec__binary_trees__cell__parent = o32; rec__binary_trees__cell__position =
  o33 } } = (f1[o29])))

axiom H66 : ((not (j8 = 0)) -> ((o34 = o30) and ((o35 = o31) and
  ((o36 = o32) and (o37 = o33)))))

axiom H67 : ((not (j8 = 0)) -> (o38 = o36))

axiom H68 : ((not (j8 = 0)) -> (temp___599 = to_rep(o38)))

axiom H69 : ((not (j8 = 0)) -> ((1 <= temp___599) and (temp___599 <= 100)))

axiom H70 : ((not (j8 = 0)) -> (o39 = temp___599))

axiom H71 : ((not (j8 = 0)) -> ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o40; rec__tree_model__path_type__k = o41 }
  } = (r3[o39])))

axiom H72 : ((not (j8 = 0)) -> ((o42 = o40) and (o43 = o41)))

axiom H73 : ((not (j8 = 0)) -> (o44 = o42))

axiom H74 : ((not (j8 = 0)) -> ((o45 = add(o44, 0)) and
  ((length(o45) = (length(o44) + 1)) and ((get(o45,
  (0 + length(o45))) = 0) and (((bool_le(length(o44), length(o45)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(o44)))) -> (get(o44,
  n) = get(o45, n))))) and (not (bool_le(length(o44),
  length(o45)) = false)))))))

axiom H75 : ((not (j8 = 0)) -> ((o46 = o45) and
  (o47 = (((r3[j8])).us_split_fields1).rec__tree_model__path_type__k)))

axiom H76 : ((not (j8 = 0)) -> ((temp___601 = o46) and (temp___6011 = o47)))

axiom H77 : ((not (j8 = 0)) -> (length(temp___601) <  100))

axiom H78 : ((not (j8 = 0)) -> ((o48 = temp___601) and (o49 = temp___6011)))

axiom H79 : ((not (j8 = 0)) -> ((1 <= j8) and (j8 <= 100)))

axiom H80 : ((not (j8 = 0)) -> (o50 = j8))

axiom H81 : ((not (j8 = 0)) -> (o51 = (r3[o50 <- { us_split_fields1 = {
  rec__tree_model__path_type__a = o48; rec__tree_model__path_type__k = o49 }
  }])))

axiom H82 : ((not (j8 = 0)) -> (result11 = r3))

axiom H83 : ((not (j8 = 0)) -> (r4 = o51))

axiom H84 : ((not (j8 = 0)) -> ((1 <= j8) and (j8 <= 100)))

axiom H85 : ((not (j8 = 0)) -> (o52 = j8))

axiom H86 : ((not (j8 = 0)) -> (o53 = (todo3[o52 <- of_int(1)])))

axiom H87 : ((not (j8 = 0)) -> (result12 = todo3))

axiom H88 : ((not (j8 = 0)) -> (todo4 = o53))

axiom H89 : ((j8 = 0) -> (r4 = r2))

axiom H90 : ((j8 = 0) -> (todo4 = todo3))

axiom H91 : ((1 <= i4) and (i4 <= 100))

axiom H92 : (o54 = i4)

axiom H93 : ({ us_split_fields3 = { rec__binary_trees__cell__left = o55;
  rec__binary_trees__cell__right = o56; rec__binary_trees__cell__parent =
  o57; rec__binary_trees__cell__position = o58 } } = (f1[o54]))

axiom H94 : ((o59 = o55) and ((o60 = o56) and ((o61 = o57) and (o62 = o58))))

axiom H95 : (o63 = o60)

axiom H96 : (o64 = to_rep(o63))

axiom H97 : (result13 = j8)

axiom H98 : (j9 = o64)

axiom H99 : (not (j9 = 0))

axiom H100 : (0 <  length1(unseen3))

axiom H101 :
  (length((((r4[j9])).us_split_fields1).rec__tree_model__path_type__a) <  100)

axiom H102 :
  ((o65 = (((r4[j9])).us_split_fields1).rec__tree_model__path_type__a) and
  (o66 = of_int(1)))

axiom H103 : ((1 <= j9) and (j9 <= 100))

axiom H104 : (o67 = j9)

axiom H105 : (o68 = (r4[o67 <- { us_split_fields1 = {
  rec__tree_model__path_type__a = o65; rec__tree_model__path_type__k = o66 }
  }]))

axiom H106 : (result14 = r4)

axiom H107 : (r5 = o68)

axiom H108 : ((1 <= j9) and (j9 <= 100))

axiom H109 : (o69 = j9)

axiom H110 : ({ us_split_fields3 = { rec__binary_trees__cell__left = o70;
  rec__binary_trees__cell__right = o71; rec__binary_trees__cell__parent =
  o72; rec__binary_trees__cell__position = o73 } } = (f1[o69]))

axiom H111 : ((o74 = o70) and ((o75 = o71) and ((o76 = o72) and
  (o77 = o73))))

axiom H112 : (o78 = o76)

axiom H113 : (temp___606 = to_rep(o78))

axiom H114 : ((1 <= temp___606) and (temp___606 <= 100))

axiom H115 : (o79 = temp___606)

axiom H116 : ({ us_split_fields1 = { rec__tree_model__path_type__a = o80;
  rec__tree_model__path_type__k = o81 } } = (r5[o79]))

axiom H117 : ((o82 = o80) and (o83 = o81))

axiom H118 : (o84 = o82)

 (* File "tree_model.ads", line 49, characters 0-0 *)
goal WP_parameter_def : (length(o84) <  2147483647)
