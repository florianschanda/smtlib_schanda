(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy1 : (int,natural) farray

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

logic user_eq1 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields = { rec__composite_cursors__cont1__content :
(int,natural) farray; rec__composite_cursors__cont1__length : natural
}

function us_split_fields_Content__projection(a: us_split_fields) : (int,natural) farray =
  (a).rec__composite_cursors__cont1__content

function us_split_fields_Length__projection(a: us_split_fields) : natural =
  (a).rec__composite_cursors__cont1__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((bool_eq3(((a).us_split_fields1).rec__composite_cursors__cont1__content,
  1, 100, ((b).us_split_fields1).rec__composite_cursors__cont1__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__composite_cursors__cont1__length) = to_rep(((b).us_split_fields1).rec__composite_cursors__cont1__length))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields1).rec__composite_cursors__cont1__content,
  1, 100, ((b).us_split_fields1).rec__composite_cursors__cont1__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__composite_cursors__cont1__length) = to_rep(((b).us_split_fields1).rec__composite_cursors__cont1__length)))) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. forall a1:natural. (0 <= object__size1({
  us_split_fields1 = { rec__composite_cursors__cont1__content = a;
  rec__composite_cursors__cont1__length = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. forall a1:natural.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = a;
  rec__composite_cursors__cont1__length = a1 } })))

logic composite_cursors__cont1__content__first__bit : int

logic composite_cursors__cont1__content__last__bit : int

logic composite_cursors__cont1__content__position : int

axiom composite_cursors__cont1__content__first__bit_axiom :
  (0 <= composite_cursors__cont1__content__first__bit)

axiom composite_cursors__cont1__content__last__bit_axiom :
  (composite_cursors__cont1__content__first__bit <  composite_cursors__cont1__content__last__bit)

axiom composite_cursors__cont1__content__position_axiom :
  (0 <= composite_cursors__cont1__content__position)

logic composite_cursors__cont1__length__first__bit : int

logic composite_cursors__cont1__length__last__bit : int

logic composite_cursors__cont1__length__position : int

axiom composite_cursors__cont1__length__first__bit_axiom :
  (0 <= composite_cursors__cont1__length__first__bit)

axiom composite_cursors__cont1__length__last__bit_axiom :
  (composite_cursors__cont1__length__first__bit <  composite_cursors__cont1__length__last__bit)

axiom composite_cursors__cont1__length__position_axiom :
  (0 <= composite_cursors__cont1__length__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : (int,natural) farray

logic dummy3 : natural

type cont1__ref = { cont1__content : us_rep
}

function cont1__ref___projection(a: cont1__ref) : us_rep = (a).cont1__content

logic first : us_rep -> (int,natural) farray

logic first__function_guard : (int,natural) farray, us_rep -> prop

logic temp___164 : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___166:int. ((temp___164(temp___166)[1]) = of_rep(temp___166)))

axiom first__post_axiom : true

axiom first__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural [first({
  us_split_fields1 = { rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } })]. ((to_rep(c1) <= 100) ->
  (first({ us_split_fields1 = { rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }) = temp___164(1))))

logic has_element : us_rep, (int,natural) farray -> bool

logic has_element__function_guard : bool, us_rep,
  (int,natural) farray -> prop

axiom has_element__post_axiom : true

axiom has_element__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:(int,natural) farray [has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p)]. ((has_element({
  us_split_fields1 = { rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p) = true) <->
  ((1 <= to_rep((p[1]))) and (to_rep((p[1])) <= to_rep(c1))))))

logic next : us_rep, (int,natural) farray -> (int,natural) farray

logic next__function_guard : (int,natural) farray, us_rep,
  (int,natural) farray -> prop

logic temp___176 : int -> (int,natural) farray

axiom def_axiom1 :
  (forall temp___178:int. ((temp___176(temp___178)[1]) = of_rep(temp___178)))

axiom next__post_axiom : true

axiom next__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:(int,natural) farray [next({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p)].
  ((to_rep(c1) <= 100) -> (next({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } },
  p) = temp___176((to_rep((p[1])) + 1))))))

logic element : us_rep, (int,natural) farray -> int

logic element__function_guard : int, us_rep, (int,natural) farray -> prop

axiom element__post_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:(int,natural) farray [element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p)].
  (((to_rep(c1) <= 100) and (has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p) = true)) ->
  in_range1(element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p)))))

axiom element__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:(int,natural) farray [element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } }, p)].
  ((to_rep(c1) <= 100) -> (element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c;
  rec__composite_cursors__cont1__length = c1 } },
  p) = to_rep((c[to_rep((p[1]))]))))))

type us_split_fields2 = { rec__composite_cursors__rec_cursor__content :
natural
}

function us_split_fields_Content__2__projection(a: us_split_fields2) : natural =
  (a).rec__composite_cursors__rec_cursor__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  (((to_rep(((a).us_split_fields3).rec__composite_cursors__rec_cursor__content) = to_rep(((b).us_split_fields3).rec__composite_cursors__rec_cursor__content)) ->
  (bool_eq5(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__composite_cursors__rec_cursor__content) = to_rep(((b).us_split_fields3).rec__composite_cursors__rec_cursor__content))) ->
  (bool_eq5(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. (0 <= object__size2({ us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. (0 <= object__alignment2({ us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = a } })))

logic composite_cursors__rec_cursor__content__first__bit : int

logic composite_cursors__rec_cursor__content__last__bit : int

logic composite_cursors__rec_cursor__content__position : int

axiom composite_cursors__rec_cursor__content__first__bit_axiom :
  (0 <= composite_cursors__rec_cursor__content__first__bit)

axiom composite_cursors__rec_cursor__content__last__bit_axiom :
  (composite_cursors__rec_cursor__content__first__bit <  composite_cursors__rec_cursor__content__last__bit)

axiom composite_cursors__rec_cursor__content__position_axiom :
  (0 <= composite_cursors__rec_cursor__content__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : natural

type rec_cursor__ref = { rec_cursor__content : us_rep1
}

function rec_cursor__ref___projection(a: rec_cursor__ref) : us_rep1 =
  (a).rec_cursor__content

logic dummy5 : (int,natural) farray

logic value__size3 : int

logic object__size3 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,natural) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__alignment3(a)))

logic user_eq4 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields4 = { rec__composite_cursors__cont2__content :
(int,natural) farray; rec__composite_cursors__cont2__length : natural
}

function us_split_fields_Content__3__projection(a: us_split_fields4) : (int,natural) farray =
  (a).rec__composite_cursors__cont2__content

function us_split_fields_Length__2__projection(a: us_split_fields4) : natural =
  (a).rec__composite_cursors__cont2__length

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq6 : us_rep2, us_rep2 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq6(a, b)].
  ((((bool_eq3(((a).us_split_fields5).rec__composite_cursors__cont2__content,
  1, 100, ((b).us_split_fields5).rec__composite_cursors__cont2__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields5).rec__composite_cursors__cont2__length) = to_rep(((b).us_split_fields5).rec__composite_cursors__cont2__length))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields5).rec__composite_cursors__cont2__content,
  1, 100, ((b).us_split_fields5).rec__composite_cursors__cont2__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields5).rec__composite_cursors__cont2__length) = to_rep(((b).us_split_fields5).rec__composite_cursors__cont2__length)))) ->
  (bool_eq6(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,natural) farray. forall a1:natural. (0 <= object__size4({
  us_split_fields5 = { rec__composite_cursors__cont2__content = a;
  rec__composite_cursors__cont2__length = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,natural) farray. forall a1:natural.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = a;
  rec__composite_cursors__cont2__length = a1 } })))

logic composite_cursors__cont2__content__first__bit : int

logic composite_cursors__cont2__content__last__bit : int

logic composite_cursors__cont2__content__position : int

axiom composite_cursors__cont2__content__first__bit_axiom :
  (0 <= composite_cursors__cont2__content__first__bit)

axiom composite_cursors__cont2__content__last__bit_axiom :
  (composite_cursors__cont2__content__first__bit <  composite_cursors__cont2__content__last__bit)

axiom composite_cursors__cont2__content__position_axiom :
  (0 <= composite_cursors__cont2__content__position)

logic composite_cursors__cont2__length__first__bit : int

logic composite_cursors__cont2__length__last__bit : int

logic composite_cursors__cont2__length__position : int

axiom composite_cursors__cont2__length__first__bit_axiom :
  (0 <= composite_cursors__cont2__length__first__bit)

axiom composite_cursors__cont2__length__last__bit_axiom :
  (composite_cursors__cont2__length__first__bit <  composite_cursors__cont2__length__last__bit)

axiom composite_cursors__cont2__length__position_axiom :
  (0 <= composite_cursors__cont2__length__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy6 : (int,natural) farray

logic dummy7 : natural

type cont2__ref = { cont2__content : us_rep2
}

function cont2__ref___projection(a: cont2__ref) : us_rep2 =
  (a).cont2__content

logic first__2 : us_rep2 -> us_rep1

logic first__2__function_guard : us_rep1, us_rep2 -> prop

axiom first__2__post_axiom : true

axiom first__2__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural [first__2({
  us_split_fields5 = { rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } })]. ((to_rep(c1) <= 100) ->
  (first__2({ us_split_fields5 = { rec__composite_cursors__cont2__content =
  c; rec__composite_cursors__cont2__length = c1 } }) = { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = of_rep(1) } })))

logic has_element__2 : us_rep2, us_rep1 -> bool

logic has_element__2__function_guard : bool, us_rep2, us_rep1 -> prop

axiom has_element__2__post_axiom : true

axiom has_element__2__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:natural [has_element__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } })]. ((has_element__2({
  us_split_fields5 = { rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } }) = true) <->
  ((1 <= to_rep(p)) and (to_rep(p) <= to_rep(c1))))))

logic next__2 : us_rep2, us_rep1 -> us_rep1

logic next__2__function_guard : us_rep1, us_rep2, us_rep1 -> prop

axiom next__2__post_axiom : true

axiom next__2__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:natural [next__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } })].
  ((to_rep(c1) <= 100) -> (next__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } }) = { us_split_fields3 =
  { rec__composite_cursors__rec_cursor__content = of_rep((to_rep(p) + 1)) }
  }))))

logic element__2 : us_rep2, us_rep1 -> int

logic element__2__function_guard : int, us_rep2, us_rep1 -> prop

axiom element__2__post_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:natural [element__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } })].
  (((to_rep(c1) <= 100) and (has_element__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } }) = true)) ->
  in_range1(element__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } })))))

axiom element__2__def_axiom :
  (forall c:(int,natural) farray. forall c1:natural.
  (forall p:natural [element__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p } })].
  ((to_rep(c1) <= 100) -> (element__2({ us_split_fields5 = {
  rec__composite_cursors__cont2__content = c;
  rec__composite_cursors__cont2__length = c1 } }, { us_split_fields3 = {
  rec__composite_cursors__rec_cursor__content = p }
  }) = to_rep((c[to_rep(p)]))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___260 : int, int -> (int,natural) farray

axiom def_axiom2 :
  (forall temp___262:int. forall temp___263:int.
  (forall temp___264:int. ((((1 <= temp___264) and (temp___264 <= 10)) ->
  ((temp___260(temp___262,
  temp___263)[temp___264]) = of_rep(temp___262))) and
  ((not ((1 <= temp___264) and (temp___264 <= 10))) ->
  ((temp___260(temp___262, temp___263)[temp___264]) = of_rep(temp___263))))))

logic temp___266 : int, int -> (int,natural) farray

axiom def_axiom3 :
  (forall temp___268:int. forall temp___269:int.
  (forall temp___270:int. ((((1 <= temp___270) and (temp___270 <= 10)) ->
  ((temp___266(temp___268,
  temp___269)[temp___270]) = of_rep(temp___268))) and
  ((not ((1 <= temp___270) and (temp___270 <= 10))) ->
  ((temp___266(temp___268, temp___269)[temp___270]) = of_rep(temp___269))))))

logic c1__split_fields : (int,natural) farray

logic c1__split_fields1 : natural

logic c2__split_fields : (int,natural) farray

logic c2__split_fields1 : natural

logic e : int

logic e1 : int

logic o : natural

logic o1 : (int,natural) farray

logic o2 : natural

logic temp___265 : (int,natural) farray

logic temp___2651 : natural

logic loop_iterable__c1__assume : (int,natural) farray

logic loop_iterable__c1__assume1 : natural

logic o3 : natural

logic o4 : (int,natural) farray

logic o5 : natural

logic temp___271 : (int,natural) farray

logic temp___2711 : natural

logic loop_iterable__c2__assume : (int,natural) farray

logic loop_iterable__c2__assume1 : natural

logic o6 : (int,natural) farray

logic temp___274 : (int,natural) farray

logic o7 : int

logic o8 : (int,natural) farray

logic o9 : bool

logic o10 : (int,natural) farray

logic o11 : int

logic o12 : natural

logic temp___277 : natural

logic o13 : int

logic o14 : natural

logic o15 : bool

logic o16 : natural

logic o17 : int

logic e2 : int

logic e3 : int

logic result : (int,natural) farray

logic result1 : natural

logic c1__split_fields2 : (int,natural) farray

logic c1__split_fields3 : natural

logic result2 : (int,natural) farray

logic result3 : natural

logic c2__split_fields2 : (int,natural) farray

logic c2__split_fields3 : natural

logic temp___2741 : (int,natural) farray

logic result4 : bool

logic result5 : int

logic e4 : int

logic result6 : bool

logic e5 : int

logic temp___2742 : (int,natural) farray

logic result7 : bool

logic result8 : (int,natural) farray

logic temp___2743 : (int,natural) farray

logic result9 : bool

logic e6 : int

logic temp___2744 : (int,natural) farray

logic e7 : int

logic temp___2745 : (int,natural) farray

logic e8 : int

logic temp___2746 : (int,natural) farray

logic e9 : int

logic temp___2747 : (int,natural) farray

logic result10 : bool

logic result11 : int

logic e10 : int

logic e11 : int

logic e12 : int

logic result12 : bool

logic e13 : int

logic temp___2771 : natural

logic result13 : bool

logic result14 : natural

logic temp___2772 : natural

logic result15 : bool

axiom H : (to_rep(o) = 10)

axiom H1 : (temp___260(1, 0) = o1)

axiom H2 : (o = o2)

axiom H3 : (temp___265 = o1)

axiom H4 : (temp___2651 = o2)

axiom H5 : (to_rep(temp___2651) <= 100)

axiom H6 : ((loop_iterable__c1__assume = temp___265) and
  (loop_iterable__c1__assume1 = temp___2651))

axiom H7 : ((result = c1__split_fields) and (result1 = c1__split_fields1))

axiom H8 : ((c1__split_fields2 = loop_iterable__c1__assume) and
  (c1__split_fields3 = loop_iterable__c1__assume1))

axiom H9 : (to_rep(c1__split_fields3) <= 100)

axiom H10 : (to_rep(o3) = 10)

axiom H11 : (temp___266(1, 0) = o4)

axiom H12 : (o3 = o5)

axiom H13 : (temp___271 = o4)

axiom H14 : (temp___2711 = o5)

axiom H15 : (to_rep(temp___2711) <= 100)

axiom H16 : ((loop_iterable__c2__assume = temp___271) and
  (loop_iterable__c2__assume1 = temp___2711))

axiom H17 : ((result2 = c2__split_fields) and (result3 = c2__split_fields1))

axiom H18 : ((c2__split_fields2 = loop_iterable__c2__assume) and
  (c2__split_fields3 = loop_iterable__c2__assume1))

axiom H19 : (to_rep(c2__split_fields3) <= 100)

axiom H20 : ((o6 = first({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } })) and
  (o6 = temp___164(1)))

axiom H21 : (o6 = temp___274)

axiom H22 : ((result4 = has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___274)) and ((result4 = true) <-> ((1 <= to_rep((temp___274[1]))) and
  (to_rep((temp___274[1])) <= to_rep(c1__split_fields3)))))

axiom H23 : ((result4 = true) -> ((o7 = element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___274)) and (in_range1(o7) and
  (o7 = to_rep((c1__split_fields2[to_rep((temp___274[1]))]))))))

axiom H24 : ((result4 = true) -> (result5 = e))

axiom H25 : ((result4 = true) -> (e4 = o7))

axiom H26 : ((not (result4 = true)) -> (e4 = e))

axiom H27 : ((not (result4 = true)) -> (e4 = e2))

axiom H28 : ((result6 = has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___274)) and ((result6 = true) <-> ((1 <= to_rep((temp___274[1]))) and
  (to_rep((temp___274[1])) <= to_rep(c1__split_fields3)))))

axiom H29 : (result6 = true)

axiom H30 : ((has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___2742) = true) and (e5 = element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___2742)))

axiom H31 : (e5 = 1)

axiom H32 : ((o8 = next({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___2742)) and (o8 = temp___176((to_rep((temp___2742[1])) + 1))))

axiom H33 : ((o9 = has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } }, o8)) and
  ((o9 = true) <-> ((1 <= to_rep((o8[1]))) and
  (to_rep((o8[1])) <= to_rep(c1__split_fields3)))))

axiom H34 : (((not (o9 = true)) -> (result7 = true)) and ((o9 = true) ->
  (result7 = false)))

axiom H35 : (not (result7 = true))

axiom H36 : ((o10 = next({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___2742)) and (o10 = temp___176((to_rep((temp___2742[1])) + 1))))

axiom H37 : (result8 = temp___2742)

axiom H38 : (temp___2743 = o10)

axiom H39 : ((result9 = has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___2743)) and ((result9 = true) <->
  ((1 <= to_rep((temp___2743[1]))) and
  (to_rep((temp___2743[1])) <= to_rep(c1__split_fields3)))))

axiom H40 : (result9 = true)

 (* File "loop_iterable.adb", line 2, characters 0-0 *)
goal WP_parameter_def : (has_element({ us_split_fields1 = {
  rec__composite_cursors__cont1__content = c1__split_fields2;
  rec__composite_cursors__cont1__length = c1__split_fields3 } },
  temp___2743) = true)
