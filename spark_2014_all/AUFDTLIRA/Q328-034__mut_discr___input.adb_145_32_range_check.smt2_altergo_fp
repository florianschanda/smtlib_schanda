(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTlineSP1

predicate in_range3(x: int) = ((1 <= x) and (x <= 1024))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tTlineSP1, tTlineSP1 -> bool

logic dummy2 : tTlineSP1

type tTlineSP1__ref = { tTlineSP1__content : tTlineSP1
}

function tTlineSP1__ref___projection(a: tTlineSP1__ref) : tTlineSP1 =
  (a).tTlineSP1__content

type tfirst_charS

predicate in_range4(x: int) = ((1 <= x) and (x <= 1025))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tfirst_charS, tfirst_charS -> bool

logic dummy3 : tfirst_charS

type tfirst_charS__ref = { tfirst_charS__content : tfirst_charS
}

function tfirst_charS__ref___projection(a: tfirst_charS__ref) : tfirst_charS =
  (a).tfirst_charS__content

type tlast_charS

predicate in_range5(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tlast_charS, tlast_charS -> bool

logic dummy4 : tlast_charS

type tlast_charS__ref = { tlast_charS__content : tlast_charS
}

function tlast_charS__ref___projection(a: tlast_charS__ref) : tlast_charS =
  (a).tlast_charS__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic line : (int,character) farray

logic first_char : int

logic last_char : int

logic line_num : int

logic c : int

logic temp___645 : int

logic temp___644 : (int,character) farray

logic temp___643 : int

logic temp___642 : int

logic o : int

logic o1 : character

logic o2 : int

logic o3 : int

logic line1 : (int,character) farray

logic first_char1 : int

logic last_char1 : int

logic line_num1 : int

logic first_char2 : int

logic last_char2 : int

logic line_num2 : int

logic line2 : (int,character) farray

logic first_char3 : int

logic last_char3 : int

logic line_num3 : int

logic line3 : (int,character) farray

logic first_char4 : int

logic last_char4 : int

logic line_num4 : int

logic line4 : (int,character) farray

logic first_char5 : int

logic last_char5 : int

logic line_num5 : int

logic line5 : (int,character) farray

logic first_char6 : int

logic last_char6 : int

logic line_num6 : int

logic line6 : (int,character) farray

logic first_char7 : int

logic last_char7 : int

logic line_num7 : int

logic result : int

logic c1 : int

axiom H : in_range4(first_char)

axiom H1 : in_range5(last_char)

axiom H2 : in_range1(line_num)

axiom H3 : ((0 <= 255) -> in_range2(c))

axiom H4 : (first_char <= 1024)

axiom H5 : ((last_char <  (first_char + 0)) -> (temp___645 = first_char))

axiom H6 : ((last_char <  (first_char + 0)) -> (temp___644 = line))

axiom H7 : ((last_char <  (first_char + 0)) -> (temp___643 = line_num))

axiom H8 : ((last_char <  (first_char + 0)) -> (temp___642 = last_char))

axiom H9 : ((last_char <  (first_char + 0)) -> (((in_range5(last_char2) and
  in_range1(line_num2)) and in_range4(first_char2)) and (bool_lt(last_char2,
  (first_char2 + 0)) = true)))

axiom H10 : ((last_char <  (first_char + 0)) -> ((in_range5(last_char3) and
  in_range1(line_num3)) and in_range4(first_char3)))

axiom H11 : ((last_char <  (first_char + 0)) ->
  (not (last_char3 <  (first_char3 + 0))))

axiom H12 : ((last_char <  (first_char + 0)) -> (line_num3 = line_num4))

axiom H13 : ((last_char <  (first_char + 0)) -> (last_char3 = last_char4))

axiom H14 : ((last_char <  (first_char + 0)) -> (first_char3 = first_char4))

axiom H15 : ((last_char <  (first_char + 0)) -> (line2 = line3))

axiom H16 : ((last_char <  (first_char + 0)) -> (line_num5 = line_num3))

axiom H17 : ((last_char <  (first_char + 0)) -> (last_char5 = last_char3))

axiom H18 : ((last_char <  (first_char + 0)) -> (first_char5 = first_char3))

axiom H19 : ((last_char <  (first_char + 0)) -> (line4 = line2))

axiom H20 : ((last_char <  (first_char + 0)) -> (line_num6 = line_num4))

axiom H21 : ((last_char <  (first_char + 0)) -> (last_char6 = last_char4))

axiom H22 : ((last_char <  (first_char + 0)) -> (first_char6 = first_char4))

axiom H23 : ((last_char <  (first_char + 0)) -> (line5 = line3))

axiom H24 : ((last_char <  (first_char + 0)) -> (line_num7 = line_num5))

axiom H25 : ((last_char <  (first_char + 0)) -> (last_char7 = last_char5))

axiom H26 : ((last_char <  (first_char + 0)) -> (first_char7 = first_char5))

axiom H27 : ((last_char <  (first_char + 0)) -> (line6 = line4))

axiom H28 : ((not (last_char <  (first_char + 0))) -> (line_num6 = line_num))

axiom H29 : ((not (last_char <  (first_char + 0))) ->
  (last_char6 = last_char))

axiom H30 : ((not (last_char <  (first_char + 0))) ->
  (first_char6 = first_char))

axiom H31 : ((not (last_char <  (first_char + 0))) -> (line5 = line))

axiom H32 : ((not (last_char <  (first_char + 0))) ->
  (line_num7 = line_num1))

axiom H33 : ((not (last_char <  (first_char + 0))) ->
  (last_char7 = last_char1))

axiom H34 : ((not (last_char <  (first_char + 0))) ->
  (first_char7 = first_char1))

axiom H35 : ((not (last_char <  (first_char + 0))) -> (line6 = line1))

axiom H36 : ((1 <= first_char6) and (first_char6 <= 1024))

axiom H37 : (o = first_char6)

axiom H38 : (o1 = (line5[o]))

axiom H39 : (o2 = to_rep(o1))

axiom H40 : (result = c)

axiom H41 : (c1 = o2)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range4((first_char6 + 1))
