(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type it1

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range2(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type et1

predicate in_range3(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : et1, et1 -> bool

logic dummy2 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy3 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> (int,(int,et1) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,et1) farray, int -> (int,(int,et1) farray) farray

axiom singleton_def1 :
  (forall v:(int,et1) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq6 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq5((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq5((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq5((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___1068 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom :
  (forall temp___1070:(int,(int,et1) farray) farray.
  (forall temp___1071:int. forall temp___1073:int.
  (forall temp___1072:(int,et1) farray. forall temp___1074:(int,et1) farray.
  (forall temp___1075:int. (((temp___1075 = temp___1073) ->
  ((temp___1068(temp___1070, temp___1071, temp___1072, temp___1073,
  temp___1074)[temp___1075]) = temp___1074)) and
  ((not (temp___1075 = temp___1073)) -> (((temp___1075 = temp___1071) ->
  ((temp___1068(temp___1070, temp___1071, temp___1072, temp___1073,
  temp___1074)[temp___1075]) = temp___1072)) and
  ((not (temp___1075 = temp___1071)) -> ((temp___1068(temp___1070,
  temp___1071, temp___1072, temp___1073,
  temp___1074)[temp___1075]) = (temp___1070[temp___1075]))))))))))

logic temp___1076 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom1 :
  (forall temp___1078:(int,et1) farray.
  (forall temp___1079:int. forall temp___1080:int.
  (forall temp___1081:int. (((temp___1081 = temp___1079) ->
  ((temp___1076(temp___1078, temp___1079,
  temp___1080)[temp___1081]) = of_rep(temp___1080))) and
  ((not (temp___1081 = temp___1079)) -> ((temp___1076(temp___1078,
  temp___1079, temp___1080)[temp___1081]) = (temp___1078[temp___1081])))))))

logic temp___1083 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom2 :
  (forall temp___1085:(int,et1) farray.
  (forall temp___1086:int. forall temp___1087:int.
  (forall temp___1088:int. (((temp___1088 = temp___1086) ->
  ((temp___1083(temp___1085, temp___1086,
  temp___1087)[temp___1088]) = of_rep(temp___1087))) and
  ((not (temp___1088 = temp___1086)) -> ((temp___1083(temp___1085,
  temp___1086, temp___1087)[temp___1088]) = (temp___1085[temp___1088])))))))

logic temp___1091 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom3 :
  (forall temp___1093:(int,(int,et1) farray) farray.
  (forall temp___1094:int. forall temp___1096:int.
  (forall temp___1095:(int,et1) farray. forall temp___1097:(int,et1) farray.
  (forall temp___1098:int. (((temp___1098 = temp___1096) ->
  ((temp___1091(temp___1093, temp___1094, temp___1095, temp___1096,
  temp___1097)[temp___1098]) = temp___1097)) and
  ((not (temp___1098 = temp___1096)) -> (((temp___1098 = temp___1094) ->
  ((temp___1091(temp___1093, temp___1094, temp___1095, temp___1096,
  temp___1097)[temp___1098]) = temp___1095)) and
  ((not (temp___1098 = temp___1094)) -> ((temp___1091(temp___1093,
  temp___1094, temp___1095, temp___1096,
  temp___1097)[temp___1098]) = (temp___1093[temp___1098]))))))))))

logic temp___1099 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom4 :
  (forall temp___1101:(int,et1) farray.
  (forall temp___1102:int. forall temp___1103:int.
  (forall temp___1104:int. (((temp___1104 = temp___1102) ->
  ((temp___1099(temp___1101, temp___1102,
  temp___1103)[temp___1104]) = of_rep(temp___1103))) and
  ((not (temp___1104 = temp___1102)) -> ((temp___1099(temp___1101,
  temp___1102, temp___1103)[temp___1104]) = (temp___1101[temp___1104])))))))

logic temp___1106 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom5 :
  (forall temp___1108:(int,et1) farray.
  (forall temp___1109:int. forall temp___1110:int.
  (forall temp___1111:int. (((temp___1111 = temp___1109) ->
  ((temp___1106(temp___1108, temp___1109,
  temp___1110)[temp___1111]) = of_rep(temp___1110))) and
  ((not (temp___1111 = temp___1109)) -> ((temp___1106(temp___1108,
  temp___1109, temp___1110)[temp___1111]) = (temp___1108[temp___1111])))))))

logic temp___1114 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom6 :
  (forall temp___1116:(int,(int,et1) farray) farray.
  (forall temp___1117:int. forall temp___1119:int.
  (forall temp___1118:(int,et1) farray. forall temp___1120:(int,et1) farray.
  (forall temp___1121:int. (((temp___1121 = temp___1119) ->
  ((temp___1114(temp___1116, temp___1117, temp___1118, temp___1119,
  temp___1120)[temp___1121]) = temp___1120)) and
  ((not (temp___1121 = temp___1119)) -> (((temp___1121 = temp___1117) ->
  ((temp___1114(temp___1116, temp___1117, temp___1118, temp___1119,
  temp___1120)[temp___1121]) = temp___1118)) and
  ((not (temp___1121 = temp___1117)) -> ((temp___1114(temp___1116,
  temp___1117, temp___1118, temp___1119,
  temp___1120)[temp___1121]) = (temp___1116[temp___1121]))))))))))

logic temp___1122 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom7 :
  (forall temp___1124:(int,et1) farray.
  (forall temp___1125:int. forall temp___1126:int.
  (forall temp___1127:int. (((temp___1127 = temp___1125) ->
  ((temp___1122(temp___1124, temp___1125,
  temp___1126)[temp___1127]) = of_rep(temp___1126))) and
  ((not (temp___1127 = temp___1125)) -> ((temp___1122(temp___1124,
  temp___1125, temp___1126)[temp___1127]) = (temp___1124[temp___1127])))))))

logic temp___1129 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom8 :
  (forall temp___1131:(int,et1) farray.
  (forall temp___1132:int. forall temp___1133:int.
  (forall temp___1134:int. (((temp___1134 = temp___1132) ->
  ((temp___1129(temp___1131, temp___1132,
  temp___1133)[temp___1134]) = of_rep(temp___1133))) and
  ((not (temp___1134 = temp___1132)) -> ((temp___1129(temp___1131,
  temp___1132, temp___1133)[temp___1134]) = (temp___1131[temp___1134])))))))

logic temp___1137 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom9 :
  (forall temp___1139:(int,(int,et1) farray) farray.
  (forall temp___1140:int. forall temp___1142:int.
  (forall temp___1141:(int,et1) farray. forall temp___1143:(int,et1) farray.
  (forall temp___1144:int. (((temp___1144 = temp___1142) ->
  ((temp___1137(temp___1139, temp___1140, temp___1141, temp___1142,
  temp___1143)[temp___1144]) = temp___1143)) and
  ((not (temp___1144 = temp___1142)) -> (((temp___1144 = temp___1140) ->
  ((temp___1137(temp___1139, temp___1140, temp___1141, temp___1142,
  temp___1143)[temp___1144]) = temp___1141)) and
  ((not (temp___1144 = temp___1140)) -> ((temp___1137(temp___1139,
  temp___1140, temp___1141, temp___1142,
  temp___1143)[temp___1144]) = (temp___1139[temp___1144]))))))))))

logic temp___1145 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom10 :
  (forall temp___1147:(int,et1) farray.
  (forall temp___1148:int. forall temp___1149:int.
  (forall temp___1150:int. (((temp___1150 = temp___1148) ->
  ((temp___1145(temp___1147, temp___1148,
  temp___1149)[temp___1150]) = of_rep(temp___1149))) and
  ((not (temp___1150 = temp___1148)) -> ((temp___1145(temp___1147,
  temp___1148, temp___1149)[temp___1150]) = (temp___1147[temp___1150])))))))

logic temp___1152 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom11 :
  (forall temp___1154:(int,et1) farray.
  (forall temp___1155:int. forall temp___1156:int.
  (forall temp___1157:int. (((temp___1157 = temp___1155) ->
  ((temp___1152(temp___1154, temp___1155,
  temp___1156)[temp___1157]) = of_rep(temp___1156))) and
  ((not (temp___1157 = temp___1155)) -> ((temp___1152(temp___1154,
  temp___1155, temp___1156)[temp___1157]) = (temp___1154[temp___1157])))))))

logic temp___4717 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom12 :
  (forall temp___4719:(int,(int,et1) farray) farray.
  (forall temp___4720:int.
  (forall temp___4721:(int,et1) farray.
  (forall temp___4722:int. (((temp___4722 = temp___4720) ->
  ((temp___4717(temp___4719, temp___4720,
  temp___4721)[temp___4722]) = temp___4721)) and
  ((not (temp___4722 = temp___4720)) -> ((temp___4717(temp___4719,
  temp___4720, temp___4721)[temp___4722]) = (temp___4719[temp___4722]))))))))

logic temp___4723 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom13 :
  (forall temp___4725:(int,et1) farray.
  (forall temp___4726:int. forall temp___4727:int.
  (forall temp___4728:int. (((temp___4728 = temp___4726) ->
  ((temp___4723(temp___4725, temp___4726,
  temp___4727)[temp___4728]) = of_rep(temp___4727))) and
  ((not (temp___4728 = temp___4726)) -> ((temp___4723(temp___4725,
  temp___4726, temp___4727)[temp___4728]) = (temp___4725[temp___4728])))))))

logic a : (int,(int,et1) farray) farray

logic j_next : int

logic f : int

logic t : (int,(int,et1) farray) farray

logic o : et1

logic o1 : (int,et1) farray

logic o2 : (int,(int,et1) farray) farray

logic o3 : int

logic o4 : int

logic o5 : et1

logic o6 : (int,et1) farray

logic o7 : (int,(int,et1) farray) farray

logic o8 : int

logic o9 : int

logic o10 : (int,et1) farray

logic o11 : (int,et1) farray

logic o12 : int

logic temp___4745 : (int,(int,et1) farray) farray

logic o13 : int

logic o14 : int

logic o15 : (int,et1) farray

logic o16 : (int,et1) farray

logic o17 : int

logic temp___4740 : (int,(int,et1) farray) farray

logic result : (int,(int,et1) farray) farray

logic t1 : (int,(int,et1) farray) farray

logic result1 : (int,(int,et1) farray) farray

logic a1 : (int,(int,et1) farray) farray

logic result2 : int

logic j_next1 : int

logic result3 : int

logic j_next2 : int

logic result4 : int

logic f1 : int

logic result5 : int

logic f2 : int

logic result6 : (int,(int,et1) farray) farray

logic a2 : (int,(int,et1) farray) farray

logic a3 : (int,(int,et1) farray) farray

logic j_next3 : int

logic f3 : int

logic t2 : (int,(int,et1) farray) farray

logic a4 : (int,(int,et1) farray) farray

logic j_next4 : int

logic f4 : int

logic t3 : (int,(int,et1) farray) farray

logic result7 : bool

logic result8 : bool

axiom H : in_range1(i)

axiom H1 : in_range2(j)

axiom H2 : in_range3(e)

axiom H3 : ((((5 <= 50) -> in_range2(j_next)) and (((0 <= 99) ->
  in_range3(f)) and ((((bool_eq6(a1, 5, 50, temp___4717(t1, j,
  temp___4723((t1[j]), i, e)), 5, 50) = true) and (((j = 50) and
  (j_next1 = 5)) or ((j <  50) and (j_next1 = (j + 1))))) and
  in_range2(j_next1)) and (((5 <= 50) -> in_range2(j_next1)) and
  ((((e = 0) -> ((result4 = f) and (f1 = 99))) and ((not (e = 0)) ->
  ((((o4 = (e - 1)) and in_range3((e - 1))) and ((result5 = f) and
  (f2 = o4))) and (f1 = f2)))) and ((((to_rep(o5) = f1) and
  (o6 = ((a1[j_next1])[i <- o5]))) and (o7 = (a1[j_next1 <- o6]))) and
  ((a1 = result6) and (a2 = o7)))))))) and (((t1 = t2) and ((f1 = f3) and
  ((j_next1 = j_next3) and (a2 = a3)))) and ((t3 = t1) and ((f4 = f1) and
  ((j_next4 = j_next1) and (a4 = a2))))))

axiom H4 : ((j <  50) -> ((0 <  e) -> ((o14 = (e - 1)) and
  in_range3((e - 1)))))

axiom H5 : ((j <  50) -> ((0 <  e) -> ((5 <= (j + 1)) and ((j + 1) <= 50))))

axiom H6 : ((j <  50) -> ((0 <  e) -> (o13 = (j + 1))))

axiom H7 : ((j <  50) -> ((0 <  e) -> (o15 = (a[o13]))))

axiom H8 : ((j <  50) -> ((0 <  e) -> (o16 = temp___1083(o15, i, o14))))

axiom H9 : ((j <  50) -> ((0 <  e) -> ((o17 = (j + 1)) and
  in_range2((j + 1)))))

axiom H10 : ((j <  50) -> ((0 <  e) -> (temp___4740 = temp___1068(a, j,
  temp___1076((a[j]), i, e), o17, o16))))

axiom H11 : ((j <  50) -> ((0 <  e) -> (result8 = bool_eq6(a3, 5, 50,
  temp___4740, 5, 50))))

axiom H12 : ((j <  50) -> ((not (0 <  e)) -> (result8 = false)))

axiom H13 : ((j <  50) -> ((result8 = true) -> (result7 = true)))

axiom H14 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  ((5 <= (j + 1)) and ((j + 1) <= 50)))))

axiom H15 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  (o9 = (j + 1)))))

axiom H16 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  (o10 = (a[o9])))))

axiom H17 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  (o11 = temp___1106(o10, i, 99)))))

axiom H18 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  ((o12 = (j + 1)) and in_range2((j + 1))))))

axiom H19 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  (temp___4745 = temp___1091(a, j, temp___1099((a[j]), i, e), o12, o11)))))

axiom H20 : ((j <  50) -> ((not (result8 = true)) -> ((e = 0) ->
  (result7 = bool_eq6(a3, 5, 50, temp___4745, 5, 50)))))

axiom H21 : ((j <  50) -> ((not (result8 = true)) -> ((not (e = 0)) ->
  (result7 = false))))

axiom H22 : ((not (j <  50)) -> (result7 = false))

axiom H23 : (not (result7 = true))

axiom H24 : (j = 50)

axiom H25 : (0 <  e)

 (* File "ar.ads", line 339, characters 0-0 *)
goal WP_parameter_def : in_range3((e - 1))
