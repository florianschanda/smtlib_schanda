(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type et1

predicate in_range1(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___700 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___709 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___718 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___727 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___4424 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___4426:(int,et1) farray.
  (forall temp___4427:int. forall temp___4428:int.
  ((in_range(temp___4427) and in_range1(temp___4428)) ->
  (forall temp___4429:int. (((temp___4429 = temp___4427) ->
  (to_rep((temp___4424(temp___4426, temp___4427,
  temp___4428)[temp___4429])) = temp___4428)) and
  ((not (temp___4429 = temp___4427)) -> ((temp___4424(temp___4426,
  temp___4427, temp___4428)[temp___4429]) = (temp___4426[temp___4429]))))))))

axiom def_axiom1 :
  (forall temp___702:(int,et1) farray.
  (forall temp___703:int. forall temp___704:int. forall temp___705:int.
  forall temp___706:int. ((((in_range(temp___703) and
  in_range1(temp___704)) and in_range(temp___705)) and
  in_range1(temp___706)) ->
  (forall temp___707:int. (((temp___707 = temp___705) ->
  (to_rep((temp___700(temp___702, temp___703, temp___704, temp___705,
  temp___706)[temp___707])) = temp___706)) and
  ((not (temp___707 = temp___705)) -> (((temp___707 = temp___703) ->
  (to_rep((temp___700(temp___702, temp___703, temp___704, temp___705,
  temp___706)[temp___707])) = temp___704)) and
  ((not (temp___707 = temp___703)) -> ((temp___700(temp___702, temp___703,
  temp___704, temp___705,
  temp___706)[temp___707]) = (temp___702[temp___707]))))))))))

axiom def_axiom2 :
  (forall temp___711:(int,et1) farray.
  (forall temp___712:int. forall temp___713:int. forall temp___714:int.
  forall temp___715:int. ((((in_range(temp___712) and
  in_range1(temp___713)) and in_range(temp___714)) and
  in_range1(temp___715)) ->
  (forall temp___716:int. (((temp___716 = temp___714) ->
  (to_rep((temp___709(temp___711, temp___712, temp___713, temp___714,
  temp___715)[temp___716])) = temp___715)) and
  ((not (temp___716 = temp___714)) -> (((temp___716 = temp___712) ->
  (to_rep((temp___709(temp___711, temp___712, temp___713, temp___714,
  temp___715)[temp___716])) = temp___713)) and
  ((not (temp___716 = temp___712)) -> ((temp___709(temp___711, temp___712,
  temp___713, temp___714,
  temp___715)[temp___716]) = (temp___711[temp___716]))))))))))

axiom def_axiom3 :
  (forall temp___720:(int,et1) farray.
  (forall temp___721:int. forall temp___722:int. forall temp___723:int.
  forall temp___724:int. ((((in_range(temp___721) and
  in_range1(temp___722)) and in_range(temp___723)) and
  in_range1(temp___724)) ->
  (forall temp___725:int. (((temp___725 = temp___723) ->
  (to_rep((temp___718(temp___720, temp___721, temp___722, temp___723,
  temp___724)[temp___725])) = temp___724)) and
  ((not (temp___725 = temp___723)) -> (((temp___725 = temp___721) ->
  (to_rep((temp___718(temp___720, temp___721, temp___722, temp___723,
  temp___724)[temp___725])) = temp___722)) and
  ((not (temp___725 = temp___721)) -> ((temp___718(temp___720, temp___721,
  temp___722, temp___723,
  temp___724)[temp___725]) = (temp___720[temp___725]))))))))))

axiom def_axiom4 :
  (forall temp___729:(int,et1) farray.
  (forall temp___730:int. forall temp___731:int. forall temp___732:int.
  forall temp___733:int. ((((in_range(temp___730) and
  in_range1(temp___731)) and in_range(temp___732)) and
  in_range1(temp___733)) ->
  (forall temp___734:int. (((temp___734 = temp___732) ->
  (to_rep((temp___727(temp___729, temp___730, temp___731, temp___732,
  temp___733)[temp___734])) = temp___733)) and
  ((not (temp___734 = temp___732)) -> (((temp___734 = temp___730) ->
  (to_rep((temp___727(temp___729, temp___730, temp___731, temp___732,
  temp___733)[temp___734])) = temp___731)) and
  ((not (temp___734 = temp___730)) -> ((temp___727(temp___729, temp___730,
  temp___731, temp___732,
  temp___733)[temp___734]) = (temp___729[temp___734]))))))))))

 (* File "ar.adb", line 123, characters 0-0 *)
goal WP_parameter_def :
  (forall j:int. forall f:int. forall o:int. forall t:(int,et1) farray.
  forall a:(int,et1) farray. forall result:int. forall j1:int.
  forall result1:int. forall j2:int. (in_range(i) -> (in_range1(e) ->
  (((1 <= 10) -> in_range(j)) -> (((0 <= 99) -> in_range1(f)) ->
  ((bool_eq3(a, 1, 10, temp___4424(t, i, e), 1, 10) = true) ->
  ((((i = 10) and (({ int__content = result } = { int__content = j }) and
  (j1 = 1))) or ((not (i = 10)) and ((((o = (i + 1)) and
  in_range((i + 1))) and (({ int__content = result1 } = { int__content = j
  }) and (j2 = o))) and (j1 = j2)))) -> ((not (e = 0)) ->
  in_range1((e - 1))))))))))
