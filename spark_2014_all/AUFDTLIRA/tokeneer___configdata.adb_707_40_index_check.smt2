(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range4 temp___expr_33)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq2 (us_rep us_rep) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-sort accesspolicyt 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (accesspolicyt accesspolicyt) Bool)
(declare-const dummy6 accesspolicyt)
(declare-datatypes () ((accesspolicyt__ref (mk_accesspolicyt__ref (accesspolicyt__content accesspolicyt)))))
(define-fun accesspolicyt__ref___projection ((a accesspolicyt__ref)) accesspolicyt (accesspolicyt__content a))
(define-fun dynamic_invariant1 ((temp___expr_988 Int) (temp___is_init_985 Bool) (temp___skip_constant_986 Bool) (temp___do_toplevel_987 Bool)) Bool (=> (or (= temp___is_init_985 true) (<= 0 1)) (in_range5 temp___expr_988)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort accesspolicytexti 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 13)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (accesspolicytexti accesspolicytexti) Bool)
(declare-const dummy7 accesspolicytexti)
(declare-datatypes () ((accesspolicytexti__ref (mk_accesspolicytexti__ref (accesspolicytexti__content accesspolicytexti)))))
(define-fun accesspolicytexti__ref___projection ((a accesspolicytexti__ref)) accesspolicytexti (accesspolicytexti__content a))
(declare-const accesspolicytitle (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp___String_Literal_158 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_158 us_void_param) 1)) 65) (= (to_rep (select (temp___String_Literal_158 us_void_param) 2)) 67)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 3)) 67)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 4)) 69)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 5)) 83)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 6)) 83)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 7)) 80)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 8)) 79)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 9)) 76)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 10)) 73)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 11)) 67)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 12)) 89)) (= (to_rep (select (temp___String_Literal_158 us_void_param) 13)) 32)) :pattern ((temp___String_Literal_158 us_void_param)))))
(declare-sort accesstexti 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (accesstexti accesstexti) Bool)
(declare-const dummy8 accesstexti)
(declare-datatypes () ((accesstexti__ref (mk_accesstexti__ref (accesstexti__content accesstexti)))))
(define-fun accesstexti__ref___projection ((a accesstexti__ref)) accesstexti (accesstexti__content a))
(declare-fun to_rep2 (accesstexti) Int)
(declare-fun of_rep2 (Int) accesstexti)
(assert (forall ((x accesstexti)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x accesstexti)) (! (in_range7 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-const dummy9 (Array Int character))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int character)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq9 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__configdata__accessstringt__text (Array Int character)) (rec__configdata__accessstringt__length accesstexti)))))
(define-fun us_split_fields_Text__2__projection ((a us_split_fields)) (Array Int character) (rec__configdata__accessstringt__text a))
(define-fun us_split_fields_Length__3__projection ((a us_split_fields)) accesstexti (rec__configdata__accessstringt__length a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq (rec__configdata__accessstringt__text (us_split_fields1 a)) 1 12 (rec__configdata__accessstringt__text (us_split_fields1 b)) 1 12) true) (= (to_rep2 (rec__configdata__accessstringt__length (us_split_fields1 a))) (to_rep2 (rec__configdata__accessstringt__length (us_split_fields1 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const configdata__accessstringt__text__first__bit Int)
(declare-const configdata__accessstringt__text__last__bit Int)
(declare-const configdata__accessstringt__text__position Int)
(assert (<= 0 configdata__accessstringt__text__first__bit))
(assert (< configdata__accessstringt__text__first__bit configdata__accessstringt__text__last__bit))
(assert (<= 0 configdata__accessstringt__text__position))
(declare-const configdata__accessstringt__length__first__bit Int)
(declare-const configdata__accessstringt__length__last__bit Int)
(declare-const configdata__accessstringt__length__position Int)
(assert (<= 0 configdata__accessstringt__length__first__bit))
(assert (< configdata__accessstringt__length__first__bit configdata__accessstringt__length__last__bit))
(assert (<= 0 configdata__accessstringt__length__position))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((accessstringt__ref (mk_accessstringt__ref (accessstringt__content us_rep1)))))
(define-fun accessstringt__ref___projection ((a accessstringt__ref)) us_rep1 (accessstringt__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))
(assert (forall ((v us_rep1)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq4 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_178 Int)) (=> (and (<= a__first temp___idx_178) (<= temp___idx_178 a__last)) (= (bool_eq3 (select a temp___idx_178) (select b (+ (- b__first a__first) temp___idx_178))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_178 Int)) (=> (and (<= a__first temp___idx_178) (<= temp___idx_178 a__last)) (= (bool_eq3 (select a temp___idx_178) (select b (+ (- b__first a__first) temp___idx_178))) true))))))))
(declare-const accessstringlookup (Array Int us_rep1))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun configdata__accessstringlookup__aggregate_def (us_rep1 us_rep1) (Array Int us_rep1))
(assert (forall ((temp___180 us_rep1) (temp___181 us_rep1)) (let ((temp___179 (configdata__accessstringlookup__aggregate_def temp___180 temp___181))) (and (= (select temp___179 1) temp___180) (= (select temp___179 0) temp___181)))))
(declare-fun temp___String_Literal_183 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_183 us_void_param) 1)) 97) (= (to_rep (select (temp___String_Literal_183 us_void_param) 2)) 108)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 3)) 108)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 4)) 104)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 5)) 111)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 6)) 117)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 7)) 114)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 8)) 115)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_183 us_void_param) 12)) 32)) :pattern ((temp___String_Literal_183 us_void_param)))))
(declare-fun temp___String_Literal_184 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_184 us_void_param) 1)) 119) (= (to_rep (select (temp___String_Literal_184 us_void_param) 2)) 111)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 3)) 114)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 4)) 107)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 5)) 105)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 6)) 110)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 7)) 103)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 8)) 104)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 9)) 111)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 10)) 117)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 11)) 114)) (= (to_rep (select (temp___String_Literal_184 us_void_param) 12)) 115)) :pattern ((temp___String_Literal_184 us_void_param)))))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq11 (integer integer) Bool)
(declare-const dummy11 integer)
(declare-datatypes () ((t33b__ref (mk_t33b__ref (t33b__content integer)))))
(define-fun t33b__ref___projection ((a t33b__ref)) integer (t33b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(define-fun dynamic_invariant4 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant6 ((temp___expr_1129 Int) (temp___is_init_1126 Bool) (temp___skip_constant_1127 Bool) (temp___do_toplevel_1128 Bool)) Bool (=> (or (= temp___is_init_1126 true) (<= 1 13)) (in_range6 temp___expr_1129)))
(assert (= accesspolicytitle (temp___String_Literal_158 Tuple0)))
(define-fun dynamic_invariant7 ((temp___expr_1229 Int) (temp___is_init_1226 Bool) (temp___skip_constant_1227 Bool) (temp___do_toplevel_1228 Bool)) Bool (=> (or (= temp___is_init_1226 true) (<= 1 12)) (in_range7 temp___expr_1229)))
(assert (= accessstringlookup (configdata__accessstringlookup__aggregate_def (mk___rep (mk___split_fields (temp___String_Literal_183 Tuple0) (of_rep2 8))) (mk___rep (mk___split_fields (temp___String_Literal_184 Tuple0) (of_rep2 12))))))
(declare-const theaccesspolicy Int)
(declare-const thetitle (Array Int character))
(declare-const rawaccesspolicy (Array Int character))
(declare-const stop Int)
(declare-const matched Bool)
(declare-const ap Int)
(declare-const r32b Int)
(declare-const i Int)
(declare-const o accesstexti)
(declare-const o1 (Array Int character))
(declare-const o2 accesstexti)
(declare-const o3 accesstexti)
(declare-const o4 (Array Int character))
(declare-const o5 accesstexti)
(declare-const o6 (Array Int character))
(declare-const o7 accesstexti)
(declare-const o8 (Array Int character))
(declare-const o9 accesstexti)
(declare-const temp___1356 (Array Int us_rep1))
(declare-const o10 integer)
(declare-const o11 integer)
(declare-const o12 integer)
(declare-const o13 integer)
(declare-const temp___1347 Bool)
(declare-const temp___1348 Int)
(declare-const temp___1346 Int)
(declare-const o14 Int)
(declare-const o15 character)
(declare-const o16 Int)
(declare-const o17 character)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Bool)
(declare-const o21 Int)
(declare-const o22 character)
(declare-const o23 Int)
(declare-const o24 character)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Bool)
(declare-const r32b1 Int)
(declare-const i1 Int)
(declare-const result Bool)
(declare-const matched1 Bool)
(declare-const result1 Int)
(declare-const theaccesspolicy1 Int)
(declare-const stop1 Int)
(declare-const file__getstring__text (Array Int character))
(declare-const result2 (Array Int character))
(declare-const thetitle1 (Array Int character))
(declare-const stop2 Int)
(declare-const file__getline__item (Array Int character))
(declare-const result3 (Array Int character))
(declare-const rawaccesspolicy1 (Array Int character))
(declare-const result4 Int)
(declare-const ap1 Int)
(declare-const result5 Bool)
(declare-const matched2 Bool)
(declare-const result6 int__ref)
(declare-const r32b2 Int)
(declare-const result7 int__ref)
(declare-const i2 Int)
(declare-const matched3 Bool)
(declare-const i3 Int)
(declare-const result8 Bool)
(declare-const result9 bool__ref)
(declare-const matched4 Bool)
(declare-const result10 int__ref)
(declare-const i4 Int)
(declare-const matched5 bool__ref)
(declare-const matched6 Bool)
(declare-const matched7 bool__ref)
(declare-const i5 int__ref)
(declare-const matched8 Bool)
(declare-const i6 Int)
(declare-const matched9 bool__ref)
(declare-const i7 int__ref)
(declare-const matched10 Bool)
(declare-const i8 Int)
(declare-const matched11 bool__ref)
(declare-const i9 int__ref)
(declare-const matched12 Bool)
(declare-const i10 Int)
(declare-const matched13 bool__ref)
(declare-const r32b3 int__ref)
(declare-const i11 int__ref)
(declare-const matched14 Bool)
(declare-const r32b4 Int)
(declare-const i12 Int)
(declare-const theaccesspolicy2 int__ref)
(declare-const theaccesspolicy3 Int)
(declare-const result11 int__ref)
(declare-const ap2 Int)
(declare-const result12 bool__ref)
(declare-const matched15 Bool)
(declare-const result13 int__ref)
(declare-const r32b5 Int)
(declare-const result14 int__ref)
(declare-const i13 Int)
(declare-const matched16 Bool)
(declare-const i14 Int)
(declare-const result15 Bool)
(declare-const matched17 bool__ref)
(declare-const matched18 Bool)
(declare-const result16 int__ref)
(declare-const i15 Int)
(declare-const matched19 bool__ref)
(declare-const i16 int__ref)
(declare-const matched20 Bool)
(declare-const i17 Int)
(assert (= (temp___String_Literal_158 Tuple0) accesspolicytitle))
(assert (= (to_rep2 o3) 12))
(assert (= (temp___String_Literal_184 Tuple0) o4))
(assert (= o3 o5))
(assert (= o6 o4))
(assert (= o7 o5))
(assert (= (to_rep2 o) 8))
(assert (= (temp___String_Literal_183 Tuple0) o1))
(assert (= o o2))
(assert (= o8 o1))
(assert (= o9 o2))
(assert (= temp___1356 (configdata__accessstringlookup__aggregate_def (mk___rep (mk___split_fields o8 o9)) (mk___rep (mk___split_fields o6 o7)))))
(assert (= temp___1356 accessstringlookup))
(assert (=> (<= 0 1) (in_range5 theaccesspolicy)))
(assert (=> (<= 0 2147483647) (in_range4 stop)))
(assert (= result matched))
(assert (= matched1 (of_int 0)))
(assert (= result1 theaccesspolicy))
(assert (= theaccesspolicy1 0))
(assert (= (to_rep1 o11) 13))
(assert (= (to_rep1 o10) 1))
(assert (in_range4 stop1))
(assert (= result2 thetitle))
(assert (= thetitle1 (slide file__getstring__text (to_rep1 (first (mk 1 13))) 1)))
(assert (= stop1 13))
(assert (= (bool_eq thetitle1 1 13 accesspolicytitle 1 13) true))
(assert (= (to_rep1 o13) 12))
(assert (= (to_rep1 o12) 1))
(assert (in_range4 stop2))
(assert (= result3 rawaccesspolicy))
(assert (= rawaccesspolicy1 (slide file__getline__item (to_rep1 (first (mk 1 12))) 1)))
(assert (= result4 ap))
(assert (= ap1 0))
(assert (= stop2 (to_rep2 (rec__configdata__accessstringt__length (us_split_fields1 (select accessstringlookup ap1))))))
(assert (= matched1 result5))
(assert (= matched2 (of_int 1)))
(assert (= result6 (mk_int__ref r32b)))
(assert (= r32b2 stop2))
(assert (in_range4 r32b2))
(assert (= result7 (mk_int__ref i)))
(assert (= i2 1))
(assert (<= 1 i2))
(assert (<= i2 r32b2))
(assert (<= i3 stop2))
(assert (and (=> (<= 1 r32b2) (dynamic_property1 1 r32b2 i3)) (and (<= 1 i3) (<= i3 r32b2))))
(assert (not (<= 1 i3)))
(check-sat)
(exit)
