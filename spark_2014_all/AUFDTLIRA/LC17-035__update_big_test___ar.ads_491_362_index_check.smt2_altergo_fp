(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type it1

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range2(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type it3

predicate in_range3(x: int) = ((1 <= x) and (x <= 16))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : it3, it3 -> bool

logic dummy2 : it3

type it3__ref = { it3__content : it3
}

function it3__ref___projection(a: it3__ref) : it3 = (a).it3__content

type et1

predicate in_range4(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : et1, et1 -> bool

logic dummy3 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> (int,et1) farray

axiom concat_def :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : et1, int -> (int,et1) farray

axiom singleton_def :
  (forall v:et1.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,et1) farray, int, int, (int,et1) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy4 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq4 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> (int,(int,et1) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,et1) farray, int -> (int,(int,et1) farray) farray

axiom singleton_def1 :
  (forall v:(int,et1) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def6 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq7(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq6((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq6((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq6((a[temp___idx_133]), 1, 10,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 10) = true)))))))

logic dummy5 : (int,(int,et1) farray) farray

logic value__size1 : int

logic object__size1 : (int,(int,et1) farray) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,(int,et1) farray) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,(int,et1) farray) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,(int,et1) farray) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,(int,et1) farray) farray.
  (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,(int,et1) farray) farray. (0 <= object__alignment1(a)))

logic user_eq5 : (int,(int,et1) farray) farray,
  (int,(int,et1) farray) farray -> bool

type map__ref2 = { map__content2 : (int,(int,(int,et1) farray) farray) farray
}

logic slide2 : (int,(int,(int,et1) farray) farray) farray, int,
  int -> (int,(int,(int,et1) farray) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,(int,(int,et1) farray) farray) farray, int, int,
  (int,(int,(int,et1) farray) farray) farray, int,
  int -> (int,(int,(int,et1) farray) farray) farray

axiom concat_def2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  forall b:(int,(int,(int,et1) farray) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : (int,(int,et1) farray) farray,
  int -> (int,(int,(int,et1) farray) farray) farray

axiom singleton_def2 :
  (forall v:(int,(int,et1) farray) farray.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq8 : (int,(int,(int,et1) farray) farray) farray, int, int,
  (int,(int,(int,et1) farray) farray) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,(int,(int,et1) farray) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,(int,et1) farray) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq8(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and (bool_eq7((a[temp___idx_134]), 5, 50,
  (b[((b__first - a__first) + temp___idx_134)]), 5, 50) = true)) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) -> (bool_eq7((a[temp___idx_134]), 5, 50,
  (b[((b__first - a__first) + temp___idx_134)]), 5, 50) = true))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,(int,(int,et1) farray) farray) farray.
  forall b:(int,(int,(int,et1) farray) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) -> (bool_eq7((a[temp___idx_134]), 5, 50,
  (b[((b__first - a__first) + temp___idx_134)]), 5, 50) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic temp___1815 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom :
  (forall temp___1817:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1818:int. forall temp___1820:int.
  (forall temp___1819:(int,(int,et1) farray) farray.
  forall temp___1821:(int,(int,et1) farray) farray.
  (forall temp___1822:int. (((temp___1822 = temp___1820) ->
  ((temp___1815(temp___1817, temp___1818, temp___1819, temp___1820,
  temp___1821)[temp___1822]) = temp___1821)) and
  ((not (temp___1822 = temp___1820)) -> (((temp___1822 = temp___1818) ->
  ((temp___1815(temp___1817, temp___1818, temp___1819, temp___1820,
  temp___1821)[temp___1822]) = temp___1819)) and
  ((not (temp___1822 = temp___1818)) -> ((temp___1815(temp___1817,
  temp___1818, temp___1819, temp___1820,
  temp___1821)[temp___1822]) = (temp___1817[temp___1822]))))))))))

logic temp___1823 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom1 :
  (forall temp___1825:(int,(int,et1) farray) farray.
  (forall temp___1826:int.
  (forall temp___1827:(int,et1) farray.
  (forall temp___1828:int. (((temp___1828 = temp___1826) ->
  ((temp___1823(temp___1825, temp___1826,
  temp___1827)[temp___1828]) = temp___1827)) and
  ((not (temp___1828 = temp___1826)) -> ((temp___1823(temp___1825,
  temp___1826, temp___1827)[temp___1828]) = (temp___1825[temp___1828]))))))))

logic temp___1830 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom2 :
  (forall temp___1832:(int,et1) farray.
  (forall temp___1833:int. forall temp___1834:int.
  (forall temp___1835:int. (((temp___1835 = temp___1833) ->
  ((temp___1830(temp___1832, temp___1833,
  temp___1834)[temp___1835]) = of_rep(temp___1834))) and
  ((not (temp___1835 = temp___1833)) -> ((temp___1830(temp___1832,
  temp___1833, temp___1834)[temp___1835]) = (temp___1832[temp___1835])))))))

logic temp___1838 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom3 :
  (forall temp___1840:(int,(int,et1) farray) farray.
  (forall temp___1841:int.
  (forall temp___1842:(int,et1) farray.
  (forall temp___1843:int. (((temp___1843 = temp___1841) ->
  ((temp___1838(temp___1840, temp___1841,
  temp___1842)[temp___1843]) = temp___1842)) and
  ((not (temp___1843 = temp___1841)) -> ((temp___1838(temp___1840,
  temp___1841, temp___1842)[temp___1843]) = (temp___1840[temp___1843]))))))))

logic temp___1845 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom4 :
  (forall temp___1847:(int,et1) farray.
  (forall temp___1848:int. forall temp___1849:int.
  (forall temp___1850:int. (((temp___1850 = temp___1848) ->
  ((temp___1845(temp___1847, temp___1848,
  temp___1849)[temp___1850]) = of_rep(temp___1849))) and
  ((not (temp___1850 = temp___1848)) -> ((temp___1845(temp___1847,
  temp___1848, temp___1849)[temp___1850]) = (temp___1847[temp___1850])))))))

logic temp___1854 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom5 :
  (forall temp___1856:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1857:int. forall temp___1859:int.
  (forall temp___1858:(int,(int,et1) farray) farray.
  forall temp___1860:(int,(int,et1) farray) farray.
  (forall temp___1861:int. (((temp___1861 = temp___1859) ->
  ((temp___1854(temp___1856, temp___1857, temp___1858, temp___1859,
  temp___1860)[temp___1861]) = temp___1860)) and
  ((not (temp___1861 = temp___1859)) -> (((temp___1861 = temp___1857) ->
  ((temp___1854(temp___1856, temp___1857, temp___1858, temp___1859,
  temp___1860)[temp___1861]) = temp___1858)) and
  ((not (temp___1861 = temp___1857)) -> ((temp___1854(temp___1856,
  temp___1857, temp___1858, temp___1859,
  temp___1860)[temp___1861]) = (temp___1856[temp___1861]))))))))))

logic temp___1862 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom6 :
  (forall temp___1864:(int,(int,et1) farray) farray.
  (forall temp___1865:int.
  (forall temp___1866:(int,et1) farray.
  (forall temp___1867:int. (((temp___1867 = temp___1865) ->
  ((temp___1862(temp___1864, temp___1865,
  temp___1866)[temp___1867]) = temp___1866)) and
  ((not (temp___1867 = temp___1865)) -> ((temp___1862(temp___1864,
  temp___1865, temp___1866)[temp___1867]) = (temp___1864[temp___1867]))))))))

logic temp___1869 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom7 :
  (forall temp___1871:(int,et1) farray.
  (forall temp___1872:int. forall temp___1873:int.
  (forall temp___1874:int. (((temp___1874 = temp___1872) ->
  ((temp___1869(temp___1871, temp___1872,
  temp___1873)[temp___1874]) = of_rep(temp___1873))) and
  ((not (temp___1874 = temp___1872)) -> ((temp___1869(temp___1871,
  temp___1872, temp___1873)[temp___1874]) = (temp___1871[temp___1874])))))))

logic temp___1877 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom8 :
  (forall temp___1879:(int,(int,et1) farray) farray.
  (forall temp___1880:int.
  (forall temp___1881:(int,et1) farray.
  (forall temp___1882:int. (((temp___1882 = temp___1880) ->
  ((temp___1877(temp___1879, temp___1880,
  temp___1881)[temp___1882]) = temp___1881)) and
  ((not (temp___1882 = temp___1880)) -> ((temp___1877(temp___1879,
  temp___1880, temp___1881)[temp___1882]) = (temp___1879[temp___1882]))))))))

logic temp___1884 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom9 :
  (forall temp___1886:(int,et1) farray.
  (forall temp___1887:int. forall temp___1888:int.
  (forall temp___1889:int. (((temp___1889 = temp___1887) ->
  ((temp___1884(temp___1886, temp___1887,
  temp___1888)[temp___1889]) = of_rep(temp___1888))) and
  ((not (temp___1889 = temp___1887)) -> ((temp___1884(temp___1886,
  temp___1887, temp___1888)[temp___1889]) = (temp___1886[temp___1889])))))))

logic temp___1893 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom10 :
  (forall temp___1895:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1896:int. forall temp___1898:int.
  (forall temp___1897:(int,(int,et1) farray) farray.
  forall temp___1899:(int,(int,et1) farray) farray.
  (forall temp___1900:int. (((temp___1900 = temp___1898) ->
  ((temp___1893(temp___1895, temp___1896, temp___1897, temp___1898,
  temp___1899)[temp___1900]) = temp___1899)) and
  ((not (temp___1900 = temp___1898)) -> (((temp___1900 = temp___1896) ->
  ((temp___1893(temp___1895, temp___1896, temp___1897, temp___1898,
  temp___1899)[temp___1900]) = temp___1897)) and
  ((not (temp___1900 = temp___1896)) -> ((temp___1893(temp___1895,
  temp___1896, temp___1897, temp___1898,
  temp___1899)[temp___1900]) = (temp___1895[temp___1900]))))))))))

logic temp___1901 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom11 :
  (forall temp___1903:(int,(int,et1) farray) farray.
  (forall temp___1904:int.
  (forall temp___1905:(int,et1) farray.
  (forall temp___1906:int. (((temp___1906 = temp___1904) ->
  ((temp___1901(temp___1903, temp___1904,
  temp___1905)[temp___1906]) = temp___1905)) and
  ((not (temp___1906 = temp___1904)) -> ((temp___1901(temp___1903,
  temp___1904, temp___1905)[temp___1906]) = (temp___1903[temp___1906]))))))))

logic temp___1908 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom12 :
  (forall temp___1910:(int,et1) farray.
  (forall temp___1911:int. forall temp___1912:int.
  (forall temp___1913:int. (((temp___1913 = temp___1911) ->
  ((temp___1908(temp___1910, temp___1911,
  temp___1912)[temp___1913]) = of_rep(temp___1912))) and
  ((not (temp___1913 = temp___1911)) -> ((temp___1908(temp___1910,
  temp___1911, temp___1912)[temp___1913]) = (temp___1910[temp___1913])))))))

logic temp___1916 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom13 :
  (forall temp___1918:(int,(int,et1) farray) farray.
  (forall temp___1919:int.
  (forall temp___1920:(int,et1) farray.
  (forall temp___1921:int. (((temp___1921 = temp___1919) ->
  ((temp___1916(temp___1918, temp___1919,
  temp___1920)[temp___1921]) = temp___1920)) and
  ((not (temp___1921 = temp___1919)) -> ((temp___1916(temp___1918,
  temp___1919, temp___1920)[temp___1921]) = (temp___1918[temp___1921]))))))))

logic temp___1923 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom14 :
  (forall temp___1925:(int,et1) farray.
  (forall temp___1926:int. forall temp___1927:int.
  (forall temp___1928:int. (((temp___1928 = temp___1926) ->
  ((temp___1923(temp___1925, temp___1926,
  temp___1927)[temp___1928]) = of_rep(temp___1927))) and
  ((not (temp___1928 = temp___1926)) -> ((temp___1923(temp___1925,
  temp___1926, temp___1927)[temp___1928]) = (temp___1925[temp___1928])))))))

logic temp___1932 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom15 :
  (forall temp___1934:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___1935:int. forall temp___1937:int.
  (forall temp___1936:(int,(int,et1) farray) farray.
  forall temp___1938:(int,(int,et1) farray) farray.
  (forall temp___1939:int. (((temp___1939 = temp___1937) ->
  ((temp___1932(temp___1934, temp___1935, temp___1936, temp___1937,
  temp___1938)[temp___1939]) = temp___1938)) and
  ((not (temp___1939 = temp___1937)) -> (((temp___1939 = temp___1935) ->
  ((temp___1932(temp___1934, temp___1935, temp___1936, temp___1937,
  temp___1938)[temp___1939]) = temp___1936)) and
  ((not (temp___1939 = temp___1935)) -> ((temp___1932(temp___1934,
  temp___1935, temp___1936, temp___1937,
  temp___1938)[temp___1939]) = (temp___1934[temp___1939]))))))))))

logic temp___1940 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom16 :
  (forall temp___1942:(int,(int,et1) farray) farray.
  (forall temp___1943:int.
  (forall temp___1944:(int,et1) farray.
  (forall temp___1945:int. (((temp___1945 = temp___1943) ->
  ((temp___1940(temp___1942, temp___1943,
  temp___1944)[temp___1945]) = temp___1944)) and
  ((not (temp___1945 = temp___1943)) -> ((temp___1940(temp___1942,
  temp___1943, temp___1944)[temp___1945]) = (temp___1942[temp___1945]))))))))

logic temp___1947 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom17 :
  (forall temp___1949:(int,et1) farray.
  (forall temp___1950:int. forall temp___1951:int.
  (forall temp___1952:int. (((temp___1952 = temp___1950) ->
  ((temp___1947(temp___1949, temp___1950,
  temp___1951)[temp___1952]) = of_rep(temp___1951))) and
  ((not (temp___1952 = temp___1950)) -> ((temp___1947(temp___1949,
  temp___1950, temp___1951)[temp___1952]) = (temp___1949[temp___1952])))))))

logic temp___1955 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom18 :
  (forall temp___1957:(int,(int,et1) farray) farray.
  (forall temp___1958:int.
  (forall temp___1959:(int,et1) farray.
  (forall temp___1960:int. (((temp___1960 = temp___1958) ->
  ((temp___1955(temp___1957, temp___1958,
  temp___1959)[temp___1960]) = temp___1959)) and
  ((not (temp___1960 = temp___1958)) -> ((temp___1955(temp___1957,
  temp___1958, temp___1959)[temp___1960]) = (temp___1957[temp___1960]))))))))

logic temp___1962 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom19 :
  (forall temp___1964:(int,et1) farray.
  (forall temp___1965:int. forall temp___1966:int.
  (forall temp___1967:int. (((temp___1967 = temp___1965) ->
  ((temp___1962(temp___1964, temp___1965,
  temp___1966)[temp___1967]) = of_rep(temp___1966))) and
  ((not (temp___1967 = temp___1965)) -> ((temp___1962(temp___1964,
  temp___1965, temp___1966)[temp___1967]) = (temp___1964[temp___1967])))))))

logic temp___5471 : (int,(int,(int,et1) farray) farray) farray, int,
  (int,(int,et1) farray) farray -> (int,(int,(int,et1) farray) farray) farray

axiom def_axiom20 :
  (forall temp___5473:(int,(int,(int,et1) farray) farray) farray.
  (forall temp___5474:int.
  (forall temp___5475:(int,(int,et1) farray) farray.
  (forall temp___5476:int. (((temp___5476 = temp___5474) ->
  ((temp___5471(temp___5473, temp___5474,
  temp___5475)[temp___5476]) = temp___5475)) and
  ((not (temp___5476 = temp___5474)) -> ((temp___5471(temp___5473,
  temp___5474, temp___5475)[temp___5476]) = (temp___5473[temp___5476]))))))))

logic temp___5477 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

axiom def_axiom21 :
  (forall temp___5479:(int,(int,et1) farray) farray.
  (forall temp___5480:int.
  (forall temp___5481:(int,et1) farray.
  (forall temp___5482:int. (((temp___5482 = temp___5480) ->
  ((temp___5477(temp___5479, temp___5480,
  temp___5481)[temp___5482]) = temp___5481)) and
  ((not (temp___5482 = temp___5480)) -> ((temp___5477(temp___5479,
  temp___5480, temp___5481)[temp___5482]) = (temp___5479[temp___5482]))))))))

logic temp___5483 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom22 :
  (forall temp___5485:(int,et1) farray.
  (forall temp___5486:int. forall temp___5487:int.
  (forall temp___5488:int. (((temp___5488 = temp___5486) ->
  ((temp___5483(temp___5485, temp___5486,
  temp___5487)[temp___5488]) = of_rep(temp___5487))) and
  ((not (temp___5488 = temp___5486)) -> ((temp___5483(temp___5485,
  temp___5486, temp___5487)[temp___5488]) = (temp___5485[temp___5488])))))))

logic a : (int,(int,(int,et1) farray) farray) farray

logic k_next : int

logic f : int

logic t : (int,(int,(int,et1) farray) farray) farray

logic o : et1

logic o1 : (int,et1) farray

logic o2 : (int,(int,et1) farray) farray

logic o3 : (int,(int,(int,et1) farray) farray) farray

logic o4 : int

logic o5 : int

logic o6 : et1

logic o7 : (int,et1) farray

logic o8 : (int,(int,et1) farray) farray

logic o9 : (int,(int,(int,et1) farray) farray) farray

logic o10 : int

logic o11 : int

logic o12 : int

logic temp___5521 : (int,(int,et1) farray) farray

logic o13 : (int,et1) farray

logic o14 : (int,et1) farray

logic o15 : (int,(int,et1) farray) farray

logic o16 : (int,(int,et1) farray) farray

logic o17 : int

logic temp___5522 : (int,(int,(int,et1) farray) farray) farray

logic o18 : int

logic o19 : int

logic temp___5511 : (int,(int,et1) farray) farray

logic o20 : int

logic o21 : (int,et1) farray

logic o22 : (int,et1) farray

logic o23 : (int,(int,et1) farray) farray

logic o24 : (int,(int,et1) farray) farray

logic o25 : int

logic temp___5512 : (int,(int,(int,et1) farray) farray) farray

logic result : (int,(int,(int,et1) farray) farray) farray

logic t1 : (int,(int,(int,et1) farray) farray) farray

logic result1 : (int,(int,(int,et1) farray) farray) farray

logic a1 : (int,(int,(int,et1) farray) farray) farray

logic result2 : int

logic k_next1 : int

logic result3 : int

logic k_next2 : int

logic result4 : int

logic f1 : int

logic result5 : int

logic f2 : int

logic result6 : (int,(int,(int,et1) farray) farray) farray

logic a2 : (int,(int,(int,et1) farray) farray) farray

logic a3 : (int,(int,(int,et1) farray) farray) farray

logic k_next3 : int

logic f3 : int

logic t2 : (int,(int,(int,et1) farray) farray) farray

logic a4 : (int,(int,(int,et1) farray) farray) farray

logic k_next4 : int

logic f4 : int

logic t3 : (int,(int,(int,et1) farray) farray) farray

logic result7 : bool

logic result8 : bool

axiom H : in_range1(i)

axiom H1 : in_range2(j)

axiom H2 : in_range3(k)

axiom H3 : in_range4(e)

axiom H4 : ((((1 <= 16) -> in_range3(k_next)) and (((0 <= 99) ->
  in_range4(f)) and ((((bool_eq8(a1, 1, 16, temp___5471(t1, k,
  temp___5477((t1[k]), j, temp___5483(((t1[k])[j]), i, e))), 1,
  16) = true) and (((k = 16) and (k_next1 = 1)) or ((k <  16) and
  (k_next1 = (k + 1))))) and in_range3(k_next1)) and (((1 <= 16) ->
  in_range3(k_next1)) and ((((e = 0) -> ((result4 = f) and (f1 = 99))) and
  ((not (e = 0)) -> ((((o5 = (e - 1)) and in_range4((e - 1))) and
  ((result5 = f) and (f2 = o5))) and (f1 = f2)))) and
  (((((to_rep(o6) = f1) and (o7 = (((a1[k_next1])[j])[i <- o6]))) and
  (o8 = ((a1[k_next1])[j <- o7]))) and (o9 = (a1[k_next1 <- o8]))) and
  ((a1 = result6) and (a2 = o9)))))))) and (((t1 = t2) and ((f1 = f3) and
  ((k_next1 = k_next3) and (a2 = a3)))) and ((t3 = t1) and ((f4 = f1) and
  ((k_next4 = k_next1) and (a4 = a2))))))

axiom H5 : (k <  16)

axiom H6 : ((0 <  e) -> ((o20 = (e - 1)) and in_range4((e - 1))))

axiom H7 : ((0 <  e) -> ((1 <= (k + 1)) and ((k + 1) <= 16)))

axiom H8 : ((0 <  e) -> (o19 = (k + 1)))

axiom H9 : ((0 <  e) -> (temp___5511 = (a[o19])))

axiom H10 : ((0 <  e) -> (o21 = (temp___5511[j])))

axiom H11 : ((0 <  e) -> (o22 = temp___1845(o21, i, o20)))

axiom H12 : ((0 <  e) -> ((1 <= (k + 1)) and ((k + 1) <= 16)))

axiom H13 : ((0 <  e) -> (o18 = (k + 1)))

axiom H14 : ((0 <  e) -> (o23 = (a[o18])))

axiom H15 : ((0 <  e) -> (o24 = temp___1838(o23, j, o22)))

axiom H16 : ((0 <  e) -> ((o25 = (k + 1)) and in_range3((k + 1))))

axiom H17 : ((0 <  e) -> (temp___5512 = temp___1815(a, k, temp___1823((a[k]),
  j, temp___1830(((a[k])[j]), i, e)), o25, o24)))

axiom H18 : ((0 <  e) -> (result8 = bool_eq8(a3, 1, 16, temp___5512, 1, 16)))

axiom H19 : ((not (0 <  e)) -> (result8 = false))

axiom H20 : (not (result8 = true))

axiom H21 : (e = 0)

 (* File "ar.ads", line 486, characters 0-0 *)
goal WP_parameter_def : (1 <= (k + 1))
