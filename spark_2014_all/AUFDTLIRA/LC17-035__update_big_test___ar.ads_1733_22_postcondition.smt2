(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort it2 0)
(declare-fun it2qtint (it2) Int)
(assert (forall ((i it2)) (and (<= 5 (it2qtint i)) (<= (it2qtint i) 50))))
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range1 temp___expr_183)))
(declare-sort it4 0)
(declare-fun it4qtint (it4) Int)
(assert (forall ((i it4)) (and (<= 90 (it4qtint i)) (<= (it4qtint i) 99))))
(define-fun in_range2 ((x Int)) Bool (and (<= 90 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (it4 it4) Bool)
(declare-const dummy2 it4)
(declare-datatypes () ((it4__ref (mk_it4__ref (it4__content it4)))))
(define-fun it4__ref___projection ((a it4__ref)) it4 (it4__content a))
(define-fun dynamic_invariant2 ((temp___expr_197 Int) (temp___is_init_193 Bool) (temp___skip_constant_194 Bool) (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool)) Bool (=> (or (= temp___is_init_193 true) (<= 90 99)) (in_range2 temp___expr_197)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (et1 et1) Bool)
(declare-const dummy3 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant3 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range3 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy4 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const dummy5 (Array Int (Array Int et1)))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int (Array Int et1)) (Array Int (Array Int et1))) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ar__rofa4__s4 (Array Int et1)) (rec__ar__rofa4__t4 (Array Int (Array Int et1)))))))
(define-fun us_split_fields_S4__projection ((a us_split_fields)) (Array Int et1) (rec__ar__rofa4__s4 a))
(define-fun us_split_fields_T4__projection ((a us_split_fields)) (Array Int (Array Int et1)) (rec__ar__rofa4__t4 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___9__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__ar__rofa4__s4 (us_split_fields1 a)) 1 10 (rec__ar__rofa4__s4 (us_split_fields1 b)) 1 10) true) (= (bool_eq1 (rec__ar__rofa4__t4 (us_split_fields1 a)) 5 50 (rec__ar__rofa4__t4 (us_split_fields1 b)) 5 50) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const ar__rofa4__s4__first__bit Int)
(declare-const ar__rofa4__s4__last__bit Int)
(declare-const ar__rofa4__s4__position Int)
(assert (<= 0 ar__rofa4__s4__first__bit))
(assert (< ar__rofa4__s4__first__bit ar__rofa4__s4__last__bit))
(assert (<= 0 ar__rofa4__s4__position))
(declare-const ar__rofa4__t4__first__bit Int)
(declare-const ar__rofa4__t4__last__bit Int)
(declare-const ar__rofa4__t4__position Int)
(assert (<= 0 ar__rofa4__t4__first__bit))
(assert (< ar__rofa4__t4__first__bit ar__rofa4__t4__last__bit))
(assert (<= 0 ar__rofa4__t4__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((rofa4__ref (mk_rofa4__ref (rofa4__content us_rep)))))
(define-fun rofa4__ref___projection ((a rofa4__ref)) us_rep (rofa4__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep))))))
(declare-fun slide2 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_163 Int)) (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (= (bool_eq2 (select a temp___idx_163) (select b (+ (- b__first a__first) temp___idx_163))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_163 Int)) (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last)) (= (bool_eq2 (select a temp___idx_163) (select b (+ (- b__first a__first) temp___idx_163))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp_____aggregate_def_3858 ((Array Int us_rep) Int us_rep) (Array Int us_rep))
(declare-fun temp_____aggregate_def_3865 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_3872 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___3860 (Array Int us_rep))) (forall ((temp___3861 Int)) (forall ((temp___3862 us_rep)) (let ((temp___3859 (temp_____aggregate_def_3858 temp___3860 temp___3861 temp___3862))) (=> (dynamic_invariant2 temp___3861 true true true true) (forall ((temp___3863 Int)) (ite (= temp___3863 temp___3861) (= (select temp___3859 temp___3863) temp___3862) (= (select temp___3859 temp___3863) (select temp___3860 temp___3863))))))))))
(assert (forall ((temp___3867 (Array Int (Array Int et1)))) (forall ((temp___3868 Int)) (forall ((temp___3869 (Array Int et1))) (let ((temp___3866 (temp_____aggregate_def_3865 temp___3867 temp___3868 temp___3869))) (=> (dynamic_invariant1 temp___3868 true true true true) (forall ((temp___3870 Int)) (ite (= temp___3870 temp___3868) (= (select temp___3866 temp___3870) temp___3869) (= (select temp___3866 temp___3870) (select temp___3867 temp___3870))))))))))
(assert (forall ((temp___3874 (Array Int et1))) (forall ((temp___3875 Int) (temp___3876 Int)) (let ((temp___3873 (temp_____aggregate_def_3872 temp___3874 temp___3875 temp___3876))) (=> (and (dynamic_invariant temp___3875 true true true true) (dynamic_invariant3 temp___3876 true true true true)) (forall ((temp___3877 Int)) (ite (= temp___3877 temp___3875) (= (to_rep (select temp___3873 temp___3877)) temp___3876) (= (select temp___3873 temp___3877) (select temp___3874 temp___3877)))))))))
(declare-const a (Array Int us_rep))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 (Array Int (Array Int et1)))
(declare-const o3 (Array Int et1))
(declare-const o4 (Array Int (Array Int et1)))
(declare-const o5 (Array Int et1))
(declare-const o6 (Array Int (Array Int et1)))
(declare-const o7 (Array Int us_rep))
(declare-const result (Array Int us_rep))
(declare-const a1 (Array Int us_rep))
(declare-const a2 (Array Int us_rep))
(declare-const a3 (Array Int us_rep))
(assert (in_range2 i))
(assert (in_range1 j))
(assert (in_range k))
(assert (in_range3 e))
(assert (= (to_rep o) e))
(assert (= o1 (store (select (rec__ar__rofa4__t4 (us_split_fields1 (select a i))) j) k o)))
(assert (= o2 (store (rec__ar__rofa4__t4 (us_split_fields1 (select a i))) j o1)))
(assert (= (rec__ar__rofa4__s4 (us_split_fields1 (select a i))) o3))
(assert (= o2 o4))
(assert (= o5 o3))
(assert (= o6 o4))
(assert (= o7 (store a i (mk___rep (mk___split_fields o5 o6)))))
(assert (= result a))
(assert (= a1 o7))
(assert (= a1 a2))
(assert (= a3 a1))
(assert (not (= (bool_eq3 a2 90 99 (temp_____aggregate_def_3858 a i (mk___rep (mk___split_fields (rec__ar__rofa4__s4 (us_split_fields1 (select a i))) (temp_____aggregate_def_3865 (rec__ar__rofa4__t4 (us_split_fields1 (select a i))) j (temp_____aggregate_def_3872 (select (rec__ar__rofa4__t4 (us_split_fields1 (select a i))) j) k e))))) 90 99) true)))
(check-sat)
(exit)
