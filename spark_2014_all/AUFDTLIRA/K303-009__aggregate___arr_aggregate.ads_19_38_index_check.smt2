(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort ta2D1 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ta2D1 ta2D1) Bool)
(declare-const dummy1 ta2D1)
(declare-datatypes () ((ta2D1__ref (mk_ta2D1__ref (ta2D1__content ta2D1)))))
(define-fun ta2D1__ref___projection ((a ta2D1__ref)) ta2D1 (ta2D1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp___343 (Int Int) (Array Int integer))
(declare-fun temp___348 (Int) (Array Int integer))
(declare-fun temp___352 (Int Int) (Array Int integer))
(declare-fun temp___357 (Int Int) (Array Int integer))
(declare-fun temp___362 (Int Int) (Array Int integer))
(assert (forall ((temp___345 Int) (temp___346 Int)) (let ((temp___344 (temp___343 temp___345 temp___346))) (=> (and (dynamic_invariant temp___345 true true true true) (dynamic_invariant temp___346 true true true true)) (and (= (to_rep (select temp___344 1)) temp___345) (= (to_rep (select temp___344 2)) temp___346))))))
(assert (forall ((temp___350 Int)) (=> (dynamic_invariant temp___350 true true true true) (forall ((temp___351 Int)) (= (to_rep (select (temp___348 temp___350) temp___351)) temp___350)))))
(assert (forall ((temp___354 Int) (temp___355 Int)) (let ((temp___353 (temp___352 temp___354 temp___355))) (=> (and (dynamic_invariant temp___354 true true true true) (dynamic_invariant temp___355 true true true true)) (forall ((temp___356 Int)) (ite (= temp___356 1) (= (to_rep (select temp___353 temp___356)) temp___354) (= (to_rep (select temp___353 temp___356)) temp___355)))))))
(assert (forall ((temp___359 Int) (temp___360 Int)) (let ((temp___358 (temp___357 temp___359 temp___360))) (=> (and (dynamic_invariant temp___359 true true true true) (dynamic_invariant temp___360 true true true true)) (forall ((temp___361 Int)) (ite (= temp___361 1) (= (to_rep (select temp___358 temp___361)) temp___359) (= (to_rep (select temp___358 temp___361)) temp___360)))))))
(assert (forall ((temp___364 Int) (temp___365 Int)) (let ((temp___363 (temp___362 temp___364 temp___365))) (=> (and (dynamic_invariant temp___364 true true true true) (dynamic_invariant temp___365 true true true true)) (forall ((temp___366 Int)) (ite (= temp___366 2) (= (to_rep (select temp___363 temp___366)) temp___364) (= (to_rep (select temp___363 temp___366)) temp___365)))))))
(declare-const one Int)
(declare-const a (Array Int integer))
(declare-const result (Array Int integer))
(declare-const a1 (Array Int integer))
(declare-const result1 (Array Int integer))
(declare-const a2 (Array Int integer))
(declare-const result2 (Array Int integer))
(declare-const a3 (Array Int integer))
(declare-const result3 (Array Int integer))
(declare-const a4 (Array Int integer))
(declare-const result4 (Array Int integer))
(declare-const a5 (Array Int integer))
(declare-const a6 (Array Int integer))
(declare-const a7 (Array Int integer))
(define-fun a8 () map__ref (mk_map__ref a))
(assert (in_range1 one))
(assert (in_range1 b))
(assert (= one 1))
(assert (=> (= b 1) (= (mk_map__ref result) a8)))
(assert (=> (= b 1) (= a1 (temp___343 one 2))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (mk_map__ref result1) a8))))
(assert (=> (not (= b 1)) (=> (= b 2) (= a2 (temp___348 one)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (mk_map__ref result2) a8)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= a3 (temp___352 one one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (mk_map__ref result3) a8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= a4 (temp___357 2 one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (mk_map__ref result4) a8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a5 (temp___362 2 one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a4 a5))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (= a3 a4)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (= a2 a3))))
(assert (=> (not (= b 1)) (= a1 a2)))
(assert (= a1 a6))
(assert (= a7 a1))
(assert (not (= b 1)))
(assert (not (= b 2)))
(assert (not (= b 3)))
(assert (= b 4))
(assert (not (<= 1 one)))
(check-sat)
(exit)
