(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__frame_condition__cell__value natural) (rec__frame_condition__cell__max_left natural) (rec__frame_condition__cell__max_right natural)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) natural (rec__frame_condition__cell__value a))
(define-fun us_split_fields_Max_Left__projection ((a us_split_fields)) natural (rec__frame_condition__cell__max_left a))
(define-fun us_split_fields_Max_Right__projection ((a us_split_fields)) natural (rec__frame_condition__cell__max_right a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__frame_condition__cell__value (us_split_fields1 a))) (to_rep (rec__frame_condition__cell__value (us_split_fields1 b)))) (= (to_rep (rec__frame_condition__cell__max_left (us_split_fields1 a))) (to_rep (rec__frame_condition__cell__max_left (us_split_fields1 b))))) (= (to_rep (rec__frame_condition__cell__max_right (us_split_fields1 a))) (to_rep (rec__frame_condition__cell__max_right (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const frame_condition__cell__value__first__bit Int)
(declare-const frame_condition__cell__value__last__bit Int)
(declare-const frame_condition__cell__value__position Int)
(assert (<= 0 frame_condition__cell__value__first__bit))
(assert (< frame_condition__cell__value__first__bit frame_condition__cell__value__last__bit))
(assert (<= 0 frame_condition__cell__value__position))
(declare-const frame_condition__cell__max_left__first__bit Int)
(declare-const frame_condition__cell__max_left__last__bit Int)
(declare-const frame_condition__cell__max_left__position Int)
(assert (<= 0 frame_condition__cell__max_left__first__bit))
(assert (< frame_condition__cell__max_left__first__bit frame_condition__cell__max_left__last__bit))
(assert (<= 0 frame_condition__cell__max_left__position))
(declare-const frame_condition__cell__max_right__first__bit Int)
(declare-const frame_condition__cell__max_right__last__bit Int)
(declare-const frame_condition__cell__max_right__position Int)
(assert (<= 0 frame_condition__cell__max_right__first__bit))
(assert (< frame_condition__cell__max_right__first__bit frame_condition__cell__max_right__last__bit))
(assert (<= 0 frame_condition__cell__max_right__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep Int) (Array Int us_rep))
(assert (forall ((v us_rep)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int us_rep)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))
(define-fun of_array ((a (Array Int us_rep)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((cell_array__ref (mk_cell_array__ref (cell_array__content us_t)))))
(define-fun cell_array__ref___projection ((a cell_array__ref)) us_t (cell_array__content a))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant3 ((temp___expr_145 us_t) (temp___is_init_142 Bool) (temp___skip_constant_143 Bool) (temp___do_toplevel_144 Bool)) Bool (=> (not (= temp___skip_constant_143 true)) (dynamic_property 1 2147483647 (first1 temp___expr_145) (last1 temp___expr_145))))
(declare-const a (Array Int us_rep))
(declare-const k Int)
(declare-const max Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___228 Int)
(declare-const temp___226 (Array Int us_rep))
(declare-const temp___224 Int)
(declare-const o2 Int)
(declare-const o3 natural)
(declare-const o4 natural)
(declare-const o5 natural)
(declare-const o6 natural)
(declare-const o7 natural)
(declare-const o8 natural)
(declare-const o9 natural)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 natural)
(declare-const o13 natural)
(declare-const o14 natural)
(declare-const o15 natural)
(declare-const o16 natural)
(declare-const o17 natural)
(declare-const o18 natural)
(declare-const o19 Int)
(declare-const o20 natural)
(declare-const o21 natural)
(declare-const o22 natural)
(declare-const o23 natural)
(declare-const o24 natural)
(declare-const o25 natural)
(declare-const o26 natural)
(declare-const o27 Int)
(declare-const o28 (Array Int us_rep))
(declare-const o29 Int)
(declare-const temp___234 Int)
(declare-const temp___232 (Array Int us_rep))
(declare-const temp___230 Int)
(declare-const o30 Int)
(declare-const o31 us_rep)
(declare-const o32 us_split_fields)
(declare-const o33 natural)
(declare-const o34 Int)
(declare-const o35 Int)
(declare-const o36 us_rep)
(declare-const o37 us_split_fields)
(declare-const o38 natural)
(declare-const o39 Int)
(declare-const o40 natural)
(declare-const o41 us_split_fields)
(declare-const o42 us_rep)
(declare-const o43 Int)
(declare-const o44 (Array Int us_rep))
(declare-const i Int)
(declare-const j Int)
(declare-const o45 Int)
(declare-const o46 us_rep)
(declare-const o47 us_split_fields)
(declare-const o48 natural)
(declare-const o49 Int)
(declare-const a1 (Array Int us_rep))
(declare-const k1 Int)
(declare-const max1 Int)
(declare-const result Bool)
(declare-const result1 int__ref)
(declare-const k2 Int)
(declare-const result2 int__ref)
(declare-const max2 Int)
(declare-const result3 Bool)
(declare-const result4 int__ref)
(declare-const max3 Int)
(declare-const result5 map__ref)
(declare-const a2 (Array Int us_rep))
(declare-const a3 (Array Int us_rep))
(declare-const k3 Int)
(declare-const max4 Int)
(declare-const k4 int__ref)
(declare-const k5 Int)
(declare-const a4 map__ref)
(declare-const k6 int__ref)
(declare-const max5 int__ref)
(declare-const a5 (Array Int us_rep))
(declare-const k7 Int)
(declare-const max6 Int)
(declare-const a6 map__ref)
(declare-const k8 int__ref)
(declare-const max7 int__ref)
(declare-const a7 (Array Int us_rep))
(declare-const k9 Int)
(declare-const max8 Int)
(declare-const result6 int__ref)
(declare-const k10 Int)
(declare-const result7 int__ref)
(declare-const max9 Int)
(declare-const result8 Bool)
(declare-const result9 int__ref)
(declare-const max10 Int)
(declare-const max11 int__ref)
(declare-const max12 Int)
(declare-const result10 map__ref)
(declare-const a8 (Array Int us_rep))
(declare-const a9 (Array Int us_rep))
(declare-const k11 Int)
(declare-const max13 Int)
(declare-const k12 int__ref)
(declare-const k13 Int)
(declare-const a10 map__ref)
(declare-const k14 int__ref)
(declare-const max14 int__ref)
(declare-const a11 (Array Int us_rep))
(declare-const k15 Int)
(declare-const max15 Int)
(declare-const a12 map__ref)
(declare-const k16 int__ref)
(declare-const max16 int__ref)
(declare-const a13 (Array Int us_rep))
(declare-const k17 Int)
(declare-const max17 Int)
(declare-const a14 map__ref)
(declare-const k18 int__ref)
(declare-const max18 int__ref)
(declare-const a15 (Array Int us_rep))
(declare-const k19 Int)
(declare-const max19 Int)
(declare-const a16 map__ref)
(declare-const k20 int__ref)
(declare-const max20 int__ref)
(declare-const a17 (Array Int us_rep))
(declare-const k21 Int)
(declare-const max21 Int)
(define-fun max22 () int__ref (mk_int__ref max))
(define-fun k22 () int__ref (mk_int__ref k))
(define-fun a18 () map__ref (mk_map__ref a))
(assert (dynamic_property 1 2147483647 (to_rep1 a__first) (to_rep1 a__last)))
(assert (=> (<= 1 2147483647) (in_range3 k)))
(assert (=> (<= 0 2147483647) (in_range2 max)))
(assert (or (and (and (and (= max18 max22) (and (= k18 k22) (= a14 a18))) (and (= max19 max1) (and (= k19 k1) (= a15 a1)))) (and (and (ite (<= (to_rep1 a__first) (to_rep1 a__last)) (= o (+ (- (to_rep1 a__last) (to_rep1 a__first)) 1)) (= o 0)) (= result (ite (= o 0) true false))) (= result true))) (and (and (and (ite (<= (to_rep1 a__first) (to_rep1 a__last)) (= o (+ (- (to_rep1 a__last) (to_rep1 a__first)) 1)) (= o 0)) (= result (ite (= o 0) true false))) (not (= result true))) (and (and (and (= max18 max16) (and (= k18 k16) (= a14 a12))) (and (= max19 max17) (and (= k19 k17) (= a15 a13)))) (and (and (and (= o1 (to_rep1 a__first)) (in_range3 (to_rep1 a__first))) (and (= result1 k22) (= k2 o1))) (and (and (= result2 max22) (= max2 0)) (and (and (and (and (= temp___228 max2) (and (= temp___226 a) (and (= temp___224 k2) (and (and (and (and (and (and (and (and (and (<= (to_rep1 a__first) k2) (<= k2 (to_rep1 a__last))) (= o2 k2)) (= (mk___rep (mk___split_fields o3 o4 o5)) (select a o2))) (and (= o3 o6) (and (= o4 o7) (= o5 o8)))) (= o9 o6)) (= o10 (to_rep o9))) (= result3 (ite (< max2 o10) true false))) (ite (= result3 true) (and (and (and (and (and (and (and (<= (to_rep1 a__first) k2) (<= k2 (to_rep1 a__last))) (= o11 k2)) (= (mk___rep (mk___split_fields o12 o13 o14)) (select a o11))) (and (= o12 o15) (and (= o13 o16) (= o14 o17)))) (= o18 o15)) (= o19 (to_rep o18))) (and (= result4 (mk_int__ref max2)) (= max3 o19))) (= max3 max2))) (and (and (and (and (and (= (to_rep o20) max3) (and (= (rec__frame_condition__cell__value (us_split_fields1 (select a k2))) o21) (and (= o20 o22) (= (rec__frame_condition__cell__max_right (us_split_fields1 (select a k2))) o23)))) (and (= o24 o21) (and (= o25 o22) (= o26 o23)))) (and (and (and (<= (to_rep1 a__first) k2) (<= k2 (to_rep1 a__last))) (= o27 k2)) (= o28 (store a o27 (mk___rep (mk___split_fields o24 o25 o26)))))) (and (= result5 a18) (= a2 o28))) (and (and (and (<= (to_rep1 a__first) k3) (<= k3 (to_rep1 a__last))) (and (forall ((i1 Int)) (=> (and (<= (to_rep1 a__first) i1) (<= i1 k3)) (<= (to_rep (rec__frame_condition__cell__value (us_split_fields1 (select a3 i1)))) max4))) (forall ((i1 Int)) (=> (and (<= (to_rep1 a__first) i1) (<= i1 k3)) (forall ((j1 Int)) (=> (and (<= i1 j1) (<= j1 k3)) (<= (to_rep (rec__frame_condition__cell__value (us_split_fields1 (select a3 i1)))) (to_rep (rec__frame_condition__cell__max_left (us_split_fields1 (select a3 j1))))))))))) (and (and (and (=> (<= 1 2147483647) (in_range3 k3)) (forall ((temp___227 Int)) (=> (and (<= (to_rep1 a__first) temp___227) (<= temp___227 (to_rep1 a__last))) (and (= (rec__frame_condition__cell__value (us_split_fields1 (select a3 temp___227))) (rec__frame_condition__cell__value (us_split_fields1 (select temp___226 temp___227)))) (= (rec__frame_condition__cell__max_right (us_split_fields1 (select a3 temp___227))) (rec__frame_condition__cell__max_right (us_split_fields1 (select temp___226 temp___227)))))))) (=> (<= 0 2147483647) (in_range2 max4))) (and (and (= k4 (mk_int__ref k3)) (= k5 k3)) (= k3 (to_rep1 a__last)))))))))) (and (and (= max5 (mk_int__ref max4)) (and (= k6 k4) (= a4 (mk_map__ref a3)))) (and (= max6 max4) (and (= k7 k5) (= a5 a3))))) (and (and (= max7 max5) (and (= k8 k6) (= a6 a4))) (and (= max8 max6) (and (= k9 k7) (= a7 a5))))) (and (and (and (= o29 (to_rep1 a__last)) (in_range3 (to_rep1 a__last))) (and (= result6 k8) (= k10 o29))) (and (and (= result7 max7) (= max9 0)) (and (and (and (= temp___234 max9) (and (= temp___232 (map__content a6)) (and (= temp___230 k10) (and (and (and (and (and (and (and (and (and (<= (to_rep1 a__first) k10) (<= k10 (to_rep1 a__last))) (= o30 k10)) (= o31 (select (map__content a6) o30))) (= o32 (us_split_fields1 o31))) (= o33 (rec__frame_condition__cell__value o32))) (= o34 (to_rep o33))) (= result8 (ite (< max9 o34) true false))) (ite (= result8 true) (and (and (and (and (and (and (and (and (<= (to_rep1 a__first) k10) (<= k10 (to_rep1 a__last))) (= o35 k10)) (= o36 (select (map__content a6) o35))) (= o37 (us_split_fields1 o36))) (= o38 (rec__frame_condition__cell__value o37))) (= o39 (to_rep o38))) (and (= result9 (mk_int__ref max9)) (= max10 o39))) (and (= max11 (mk_int__ref max10)) (= max12 max10))) (and (= max11 (mk_int__ref max9)) (= max12 max9)))) (and (and (and (and (and (= (to_rep o40) (int__content max11)) (= o41 (mk___split_fields (rec__frame_condition__cell__value (us_split_fields1 (select (map__content a6) k10))) (rec__frame_condition__cell__max_left (us_split_fields1 (select (map__content a6) k10))) o40))) (= o42 (mk___rep o41))) (and (and (and (<= (to_rep1 a__first) k10) (<= k10 (to_rep1 a__last))) (= o43 k10)) (= o44 (store (map__content a6) o43 o42)))) (and (= result10 a6) (= a8 o44))) (and (and (and (<= (to_rep1 a__first) k11) (<= k11 (to_rep1 a__last))) (and (forall ((i1 Int)) (=> (and (<= k11 i1) (<= i1 (to_rep1 a__last))) (<= (to_rep (rec__frame_condition__cell__value (us_split_fields1 (select a9 i1)))) max13))) (forall ((i1 Int)) (=> (and (<= k11 i1) (<= i1 (to_rep1 a__last))) (forall ((j1 Int)) (=> (and (<= i1 j1) (<= j1 (to_rep1 a__last))) (<= (to_rep (rec__frame_condition__cell__value (us_split_fields1 (select a9 j1)))) (to_rep (rec__frame_condition__cell__max_right (us_split_fields1 (select a9 i1))))))))))) (and (and (and (=> (<= 1 2147483647) (in_range3 k11)) (forall ((temp___233 Int)) (=> (and (<= (to_rep1 a__first) temp___233) (<= temp___233 (to_rep1 a__last))) (and (= (rec__frame_condition__cell__value (us_split_fields1 (select a9 temp___233))) (rec__frame_condition__cell__value (us_split_fields1 (select temp___232 temp___233)))) (= (rec__frame_condition__cell__max_left (us_split_fields1 (select a9 temp___233))) (rec__frame_condition__cell__max_left (us_split_fields1 (select temp___232 temp___233)))))))) (=> (<= 0 2147483647) (in_range2 max13))) (and (and (= k12 (mk_int__ref k11)) (= k13 k11)) (= k11 (to_rep1 a__first)))))))))) (and (and (= max14 (mk_int__ref max13)) (and (= k14 k12) (= a10 (mk_map__ref a9)))) (and (= max15 max13) (and (= k15 k13) (= a11 a9))))) (and (and (= max16 max14) (and (= k16 k14) (= a12 a10))) (and (= max17 max15) (and (= k17 k15) (= a13 a11))))))))))))))
(assert (= max20 max18))
(assert (= k20 k18))
(assert (= a16 a14))
(assert (= max21 max19))
(assert (= k21 k19))
(assert (= a17 a15))
(assert (<= (to_rep1 a__first) i))
(assert (<= i (to_rep1 a__last)))
(assert (<= i j))
(assert (<= j (to_rep1 a__last)))
(assert (and (<= (to_rep1 a__first) i) (<= i (to_rep1 a__last))))
(assert (= o45 i))
(assert (= o46 (select (map__content a16) o45)))
(assert (= o47 (us_split_fields1 o46)))
(assert (= o48 (rec__frame_condition__cell__max_right o47)))
(assert (= o49 (to_rep o48)))
(assert (not (<= (to_rep1 a__first) j)))
(check-sat)
(exit)
