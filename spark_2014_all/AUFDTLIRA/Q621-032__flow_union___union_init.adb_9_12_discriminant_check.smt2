(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__union_init__basic_record__length integer) (rec__union_init__basic_record__basic_array (Array Int integer))))))
(define-fun us_split_fields_length__projection ((a us_split_fields)) integer (rec__union_init__basic_record__length a))
(define-fun us_split_fields_basic_array__projection ((a us_split_fields)) (Array Int integer) (rec__union_init__basic_record__basic_array a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__union_init__basic_record__length (us_split_fields1 a))) (to_rep (rec__union_init__basic_record__length (us_split_fields1 b)))) (= (bool_eq (rec__union_init__basic_record__basic_array (us_split_fields1 a)) 0 2 (rec__union_init__basic_record__basic_array (us_split_fields1 b)) 0 2) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const union_init__basic_record__length__first__bit Int)
(declare-const union_init__basic_record__length__last__bit Int)
(declare-const union_init__basic_record__length__position Int)
(assert (<= 0 union_init__basic_record__length__first__bit))
(assert (< union_init__basic_record__length__first__bit union_init__basic_record__length__last__bit))
(assert (<= 0 union_init__basic_record__length__position))
(declare-const union_init__basic_record__basic_array__first__bit Int)
(declare-const union_init__basic_record__basic_array__last__bit Int)
(declare-const union_init__basic_record__basic_array__position Int)
(assert (<= 0 union_init__basic_record__basic_array__first__bit))
(assert (< union_init__basic_record__basic_array__first__bit union_init__basic_record__basic_array__last__bit))
(assert (<= 0 union_init__basic_record__basic_array__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((basic_record__ref (mk_basic_record__ref (basic_record__content us_rep)))))
(define-fun basic_record__ref___projection ((a basic_record__ref)) us_rep (basic_record__content a))
(declare-fun to_rep1 (natural) Int)
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__union_init__union_test__discr integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer (rec__union_init__union_test__discr a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__union_init__union_test__field1 integer) (rec__union_init__union_test__field2 us_rep) (rec__union_init__union_test__field3 natural)))))
(define-fun us_split_fields_field1__projection ((a us_split_fields2)) integer (rec__union_init__union_test__field1 a))
(define-fun us_split_fields_field2__projection ((a us_split_fields2)) us_rep (rec__union_init__union_test__field2 a))
(define-fun us_split_fields_field3__projection ((a us_split_fields2)) natural (rec__union_init__union_test__field3 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2) (attr__constrained Bool)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Bool (attr__constrained a))
(define-fun union_init__union_test__field1__pred ((a us_rep1)) Bool (= (to_rep (rec__union_init__union_test__discr (us_split_discrs1 a))) 0))
(define-fun union_init__union_test__field2__pred ((a us_rep1)) Bool (= (to_rep (rec__union_init__union_test__discr (us_split_discrs1 a))) 1))
(define-fun union_init__union_test__field3__pred ((a us_rep1)) Bool (and (not (= (to_rep (rec__union_init__union_test__discr (us_split_discrs1 a))) 0)) (not (= (to_rep (rec__union_init__union_test__discr (us_split_discrs1 a))) 1))))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep (rec__union_init__union_test__discr (us_split_discrs1 a))) (to_rep (rec__union_init__union_test__discr (us_split_discrs1 b)))) (=> (union_init__union_test__field1__pred a) (= (to_rep (rec__union_init__union_test__field1 (us_split_fields3 a))) (to_rep (rec__union_init__union_test__field1 (us_split_fields3 b)))))) (=> (union_init__union_test__field2__pred a) (= (bool_eq1 (rec__union_init__union_test__field2 (us_split_fields3 a)) (rec__union_init__union_test__field2 (us_split_fields3 b))) true))) (=> (union_init__union_test__field3__pred a) (= (to_rep1 (rec__union_init__union_test__field3 (us_split_fields3 a))) (to_rep1 (rec__union_init__union_test__field3 (us_split_fields3 b)))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const union_init__union_test__discr__first__bit Int)
(declare-const union_init__union_test__discr__last__bit Int)
(declare-const union_init__union_test__discr__position Int)
(assert (<= 0 union_init__union_test__discr__first__bit))
(assert (< union_init__union_test__discr__first__bit union_init__union_test__discr__last__bit))
(assert (<= 0 union_init__union_test__discr__position))
(declare-const union_init__union_test__field1__first__bit Int)
(declare-const union_init__union_test__field1__last__bit Int)
(declare-const union_init__union_test__field1__position Int)
(assert (<= 0 union_init__union_test__field1__first__bit))
(assert (< union_init__union_test__field1__first__bit union_init__union_test__field1__last__bit))
(assert (<= 0 union_init__union_test__field1__position))
(declare-const union_init__union_test__field2__first__bit Int)
(declare-const union_init__union_test__field2__last__bit Int)
(declare-const union_init__union_test__field2__position Int)
(assert (<= 0 union_init__union_test__field2__first__bit))
(assert (< union_init__union_test__field2__first__bit union_init__union_test__field2__last__bit))
(assert (<= 0 union_init__union_test__field2__position))
(declare-const union_init__union_test__field3__first__bit Int)
(declare-const union_init__union_test__field3__last__bit Int)
(declare-const union_init__union_test__field3__position Int)
(assert (<= 0 union_init__union_test__field3__first__bit))
(assert (< union_init__union_test__field3__first__bit union_init__union_test__field3__last__bit))
(assert (<= 0 union_init__union_test__field3__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((union_test__ref (mk_union_test__ref (union_test__content us_rep1)))))
(define-fun union_test__ref___projection ((a union_test__ref)) us_rep1 (union_test__content a))
(declare-fun temp___149 (Int) (Array Int integer))
(assert (forall ((temp___151 Int)) (forall ((temp___152 Int)) (= (select (temp___149 temp___151) temp___152) (of_rep temp___151)))))
(define-fun default_initial_assumption ((temp___expr_159 us_rep1) (temp___skip_top_level_160 Bool)) Bool (and (= (attr__constrained temp___expr_159) false) (and (and (and (= (to_rep (rec__union_init__union_test__discr (us_split_discrs1 temp___expr_159))) 0) (=> (union_init__union_test__field1__pred temp___expr_159) (= (to_rep (rec__union_init__union_test__field1 (us_split_fields3 temp___expr_159))) 0))) (=> (union_init__union_test__field2__pred temp___expr_159) (and (= (to_rep (rec__union_init__basic_record__length (us_split_fields1 (rec__union_init__union_test__field2 (us_split_fields3 temp___expr_159))))) 0) (= (rec__union_init__basic_record__basic_array (us_split_fields1 (rec__union_init__union_test__field2 (us_split_fields3 temp___expr_159)))) (temp___149 0))))) (=> (union_init__union_test__field3__pred temp___expr_159) (= (to_rep1 (rec__union_init__union_test__field3 (us_split_fields3 temp___expr_159))) 0)))))
(declare-const test__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r2b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range2 ((rec__union_init__union_test__discr1 Int) (a us_rep1)) Bool (= rec__union_init__union_test__discr1 (to_rep (rec__union_init__union_test__discr (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const union_init__union_test__discr__first__bit1 Int)
(declare-const union_init__union_test__discr__last__bit1 Int)
(declare-const union_init__union_test__discr__position1 Int)
(assert (<= 0 union_init__union_test__discr__first__bit1))
(assert (< union_init__union_test__discr__first__bit1 union_init__union_test__discr__last__bit1))
(assert (<= 0 union_init__union_test__discr__position1))
(declare-const union_init__union_test__field1__first__bit1 Int)
(declare-const union_init__union_test__field1__last__bit1 Int)
(declare-const union_init__union_test__field1__position1 Int)
(assert (<= 0 union_init__union_test__field1__first__bit1))
(assert (< union_init__union_test__field1__first__bit1 union_init__union_test__field1__last__bit1))
(assert (<= 0 union_init__union_test__field1__position1))
(declare-const union_init__union_test__field3__first__bit1 Int)
(declare-const union_init__union_test__field3__last__bit1 Int)
(declare-const union_init__union_test__field3__position1 Int)
(assert (<= 0 union_init__union_test__field3__first__bit1))
(assert (< union_init__union_test__field3__first__bit1 union_init__union_test__field3__last__bit1))
(assert (<= 0 union_init__union_test__field3__position1))
(declare-const union_init__union_test__field2__first__bit1 Int)
(declare-const union_init__union_test__field2__last__bit1 Int)
(declare-const union_init__union_test__field2__position1 Int)
(assert (<= 0 union_init__union_test__field2__first__bit1))
(assert (< union_init__union_test__field2__first__bit1 union_init__union_test__field2__last__bit1))
(assert (<= 0 union_init__union_test__field2__position1))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_rep1)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep1 (t3b__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun default_initial_assumption1 ((temp___expr_147 us_rep) (temp___skip_top_level_148 Bool)) Bool (and (= (to_rep (rec__union_init__basic_record__length (us_split_fields1 temp___expr_147))) 0) (= (rec__union_init__basic_record__basic_array (us_split_fields1 temp___expr_147)) (temp___149 0))))
(declare-const test__split_discrs integer)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 (Array Int integer))
(declare-const o3 integer)
(declare-const temp___166 integer)
(declare-const temp___1661 integer)
(declare-const temp___1662 integer)
(declare-const temp___1663 (Array Int integer))
(declare-const temp___1664 natural)
(declare-const temp___1665 Bool)
(assert (= (to_rep test__split_discrs) r2b))
(assert (in_range r2b))
(assert (= (to_rep o) 1))
(assert (= o o3))
(assert (= temp___166 o3))
(assert (= dummy temp___1661))
(assert (= o1 temp___1662))
(assert (= o2 temp___1663))
(assert (= dummy1 temp___1664))
(assert (= true temp___1665))
(assert (= test__attr__constrained true))
(assert (not (= temp___166 test__split_discrs)))
(check-sat)
(exit)
