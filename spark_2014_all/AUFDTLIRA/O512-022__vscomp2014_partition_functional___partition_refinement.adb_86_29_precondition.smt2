(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun to_rep ((x positive)) Int (positiveqtint x))
(declare-fun of_rep (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep1 ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep1 (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x count_type)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__partition_refinement__inverse_sets__map__capacity count_type)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) count_type (rec__partition_refinement__inverse_sets__map__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__partition_refinement__inverse_sets__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type (rec__partition_refinement__inverse_sets__map a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___10__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___11__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__partition_refinement__inverse_sets__map__capacity (us_split_discrs1 a))) (to_rep1 (rec__partition_refinement__inverse_sets__map__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__partition_refinement__inverse_sets__map (us_split_fields1 a)) (rec__partition_refinement__inverse_sets__map (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const partition_refinement__inverse_sets__map__capacity__first__bit Int)
(declare-const partition_refinement__inverse_sets__map__capacity__last__bit Int)
(declare-const partition_refinement__inverse_sets__map__capacity__position Int)
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit))
(assert (< partition_refinement__inverse_sets__map__capacity__first__bit partition_refinement__inverse_sets__map__capacity__last__bit))
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___2__projection ((a map__ref)) us_rep (map__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__partition_refinement__inverse_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node__2__projection ((a us_split_fields2)) count_type (rec__partition_refinement__inverse_sets__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___12__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep1 (rec__partition_refinement__inverse_sets__cursor__node (us_split_fields3 a))) (to_rep1 (rec__partition_refinement__inverse_sets__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const partition_refinement__inverse_sets__cursor__node__first__bit Int)
(declare-const partition_refinement__inverse_sets__cursor__node__last__bit Int)
(declare-const partition_refinement__inverse_sets__cursor__node__position Int)
(assert (<= 0 partition_refinement__inverse_sets__cursor__node__first__bit))
(assert (< partition_refinement__inverse_sets__cursor__node__first__bit partition_refinement__inverse_sets__cursor__node__last__bit))
(assert (<= 0 partition_refinement__inverse_sets__cursor__node__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___2__projection ((a cursor__ref)) us_rep1 (cursor__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___4__projection ((a key_type__ref)) us_rep1 (key_type__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref___4__projection ((a map__ref1)) us_rep2 (map__content1 a))
(declare-fun has_key (us_rep2 us_rep1) Bool)
(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)
(declare-fun positions (us_rep) us_rep2)
(declare-fun positions__function_guard (us_rep2 us_rep) Bool)
(define-fun has_element ((container us_rep) (position us_rep1)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq5 (us_rep3 us_rep3) Bool)
(declare-const dummy5 us_rep3)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep3 (sequence__content a))
(declare-fun get (us_rep3 Int) Int)
(declare-fun get__function_guard (Int us_rep3 Int) Bool)
(declare-fun get1 (us_rep2 us_rep1) Int)
(declare-fun get__function_guard1 (Int us_rep2 us_rep1) Bool)
(declare-fun keys (us_rep) us_rep3)
(declare-fun keys__function_guard (us_rep3 us_rep) Bool)
(define-fun key ((container us_rep) (position us_rep1)) Int (get (keys container) (get1 (positions container) position)))
(declare-fun key__function_guard (Int us_rep us_rep1) Bool)
(declare-sort key_type 0)
(declare-fun key_typeqtint (key_type) Int)
(assert (forall ((i key_type)) (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (key_type key_type) Bool)
(declare-const dummy6 key_type)
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 key_type)))))
(define-fun key_type__ref___2__projection ((a key_type__ref1)) key_type (key_type__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_540 Int) (temp___is_init_536 Bool) (temp___skip_constant_537 Bool) (temp___do_toplevel_538 Bool) (temp___do_typ_inv_539 Bool)) Bool (=> (or (= temp___is_init_536 true) (<= 1 2147483647)) (in_range3 temp___expr_540)))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq7 (us_rep4 us_rep4) Bool)
(declare-const dummy7 us_rep4)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep4 (map__content2 a))
(declare-fun get2 (us_rep4 Int) Int)
(declare-fun get__function_guard2 (Int us_rep4 Int) Bool)
(declare-fun model__ (us_rep) us_rep4)
(declare-fun model____function_guard (us_rep4 us_rep) Bool)
(define-fun element ((container us_rep) (position us_rep1)) Int (get2 (model__ container) (key container position)))
(declare-fun element__function_guard (Int us_rep us_rep1) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 5))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq8 (element_type element_type) Bool)
(declare-const dummy8 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___4__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_547 Int) (temp___is_init_543 Bool) (temp___skip_constant_544 Bool) (temp___do_toplevel_545 Bool) (temp___do_typ_inv_546 Bool)) Bool (=> (or (= temp___is_init_543 true) (<= 0 5)) (in_range4 temp___expr_547)))
(declare-fun has_key1 (us_rep4 Int) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep4 Int) Bool)
(define-fun contains ((container us_rep) (key1 Int)) Bool (has_key1 (model__ container) key1))
(declare-fun contains__function_guard (Bool us_rep Int) Bool)
(define-fun element__2 ((container us_rep) (key1 Int)) Int (get2 (model__ container) key1))
(declare-fun element__2__function_guard (Int us_rep Int) Bool)
(declare-fun keys_included (us_rep4 us_rep4) Bool)
(declare-fun keys_included__function_guard (Bool us_rep4 us_rep4) Bool)
(define-fun same_keys ((left us_rep4) (right us_rep4)) Bool (and (keys_included left right) (keys_included right left)))
(declare-fun same_keys__function_guard (Bool us_rep4 us_rep4) Bool)
(declare-fun elements_equal_except (us_rep4 us_rep4 Int) Bool)
(declare-fun elements_equal_except__function_guard (Bool us_rep4 us_rep4 Int) Bool)
(declare-fun length (us_rep3) Int)
(declare-fun length__function_guard (Int us_rep3) Bool)
(define-fun last ((container us_rep3)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep3) Bool)
(define-fun equal_except ((left us_rep3) (right us_rep3) (position Int)) Bool (and (= (length left) (length right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)
(declare-fun find (us_rep3 Int) Int)
(declare-fun find__function_guard (Int us_rep3 Int) Bool)
(declare-fun oeq (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun oeq1 (us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq1 a b)) :pattern ((user_eq2 a b)))))
(declare-sort capacity_range 0)
(declare-fun capacity_rangeqtint (capacity_range) Int)
(assert (forall ((i capacity_range)) (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 10001))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (capacity_range capacity_range) Bool)
(declare-const dummy9 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type4 0)
(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs2)) capacity_range (rec__partition_refinement__partitions__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__partition_refinement__partitions__vector us_main_type4)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields4)) us_main_type4 (rec__partition_refinement__partitions__vector a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep5 (mk___rep2 (us_split_discrs3 us_split_discrs2) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___14__projection ((a us_rep5)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___15__projection ((a us_rep5)) us_split_fields4 (us_split_fields5 a))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep5) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep5) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))
(declare-const partition_refinement__partitions__vector__capacity__first__bit Int)
(declare-const partition_refinement__partitions__vector__capacity__last__bit Int)
(declare-const partition_refinement__partitions__vector__capacity__position Int)
(assert (<= 0 partition_refinement__partitions__vector__capacity__first__bit))
(assert (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))
(assert (<= 0 partition_refinement__partitions__vector__capacity__position))
(declare-fun user_eq10 (us_rep5 us_rep5) Bool)
(declare-const dummy10 us_rep5)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep5)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep5 (vector__content a))
(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))
(declare-fun of_rep2 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x capacity_range)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun capacity ((container us_rep5)) Int (ite (= (distinct 1 0) true) (to_rep2 (rec__partition_refinement__partitions__vector__capacity (us_split_discrs3 container))) 10001))
(declare-fun capacity__function_guard (Int us_rep5) Bool)
(define-fun dynamic_invariant3 ((temp___expr_799 Int) (temp___is_init_795 Bool) (temp___skip_constant_796 Bool) (temp___do_toplevel_797 Bool) (temp___do_typ_inv_798 Bool)) Bool (=> (or (= temp___is_init_795 true) (<= 0 10001)) (in_range5 temp___expr_799)))
(declare-fun length1 (us_rep5) Int)
(declare-fun length__function_guard1 (Int us_rep5) Bool)
(assert (forall ((container us_rep5)) (! (let ((result (length1 container))) (and (<= result (capacity container)) (dynamic_invariant3 result true false true true))) :pattern ((length1 container)))))
(declare-sort index_count 0)
(declare-fun index_countqtint (index_count) Int)
(assert (forall ((i index_count)) (and (<= 0 (index_countqtint i)) (<= (index_countqtint i) 6))))
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq11 (index_count index_count) Bool)
(declare-const dummy11 index_count)
(declare-datatypes () ((index_count__ref (mk_index_count__ref (index_count__content index_count)))))
(define-fun index_count__ref___projection ((a index_count__ref)) index_count (index_count__content a))
(define-fun to_rep3 ((x index_count)) Int (index_countqtint x))
(declare-fun of_rep3 (Int) index_count)
(assert (forall ((x index_count)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x index_count)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 5))))
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq12 (index index) Bool)
(declare-const dummy12 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun to_rep4 ((x index)) Int (indexqtint x))
(declare-fun of_rep4 (Int) index)
(assert (forall ((x index)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x index)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__partition_refinement__interval__first index) (rec__partition_refinement__interval__last index) (rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_First__projection ((a us_split_fields6)) index (rec__partition_refinement__interval__first a))
(define-fun us_split_fields_Last__projection ((a us_split_fields6)) index (rec__partition_refinement__interval__last a))
(define-fun us_split_fields_Count__projection ((a us_split_fields6)) index_count (rec__partition_refinement__interval__count a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep6 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___13__projection ((a us_rep6)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq5 ((a us_rep6) (b us_rep6)) Bool (ite (and (and (= (to_rep4 (rec__partition_refinement__interval__first (us_split_fields7 a))) (to_rep4 (rec__partition_refinement__interval__first (us_split_fields7 b)))) (= (to_rep4 (rec__partition_refinement__interval__last (us_split_fields7 a))) (to_rep4 (rec__partition_refinement__interval__last (us_split_fields7 b))))) (= (to_rep3 (rec__partition_refinement__interval__count (us_split_fields7 a))) (to_rep3 (rec__partition_refinement__interval__count (us_split_fields7 b))))) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep6) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep6) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep6)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment6 a))))
(declare-const partition_refinement__interval__first__first__bit Int)
(declare-const partition_refinement__interval__first__last__bit Int)
(declare-const partition_refinement__interval__first__position Int)
(assert (<= 0 partition_refinement__interval__first__first__bit))
(assert (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))
(assert (<= 0 partition_refinement__interval__first__position))
(declare-const partition_refinement__interval__last__first__bit Int)
(declare-const partition_refinement__interval__last__last__bit Int)
(declare-const partition_refinement__interval__last__position Int)
(assert (<= 0 partition_refinement__interval__last__first__bit))
(assert (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))
(assert (<= 0 partition_refinement__interval__last__position))
(declare-const partition_refinement__interval__count__first__bit Int)
(declare-const partition_refinement__interval__count__last__bit Int)
(declare-const partition_refinement__interval__count__position Int)
(assert (<= 0 partition_refinement__interval__count__first__bit))
(assert (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))
(assert (<= 0 partition_refinement__interval__count__position))
(declare-fun user_eq13 (us_rep6 us_rep6) Bool)
(declare-const dummy13 us_rep6)
(declare-datatypes () ((interval__ref (mk_interval__ref (interval__content us_rep6)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep6 (interval__content a))
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep6)))))
(define-fun element_type__ref___8__projection ((a element_type__ref1)) us_rep6 (element_type__content1 a))
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 us_rep6)))))
(define-fun element_type__ref___9__projection ((a element_type__ref2)) us_rep6 (element_type__content2 a))
(declare-sort us_main_type5 0)
(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)
(declare-sort us_rep7 0)
(declare-fun bool_eq6 (us_rep7 us_rep7) Bool)
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep7) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep7) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep7)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep7)) (<= 0 (object__alignment7 a))))
(declare-fun user_eq14 (us_rep7 us_rep7) Bool)
(declare-const dummy14 us_rep7)
(declare-datatypes () ((sequence__ref1 (mk_sequence__ref1 (sequence__content1 us_rep7)))))
(define-fun sequence__ref___3__projection ((a sequence__ref1)) us_rep7 (sequence__content1 a))
(declare-fun get3 (us_rep7 Int) us_rep6)
(declare-fun get__function_guard3 (us_rep6 us_rep7 Int) Bool)
(declare-fun model__1 (us_rep5) us_rep7)
(declare-fun model____function_guard1 (us_rep7 us_rep5) Bool)
(define-fun element1 ((container us_rep5) (index1 Int)) us_rep6 (get3 (model__1 container) index1))
(declare-fun element__function_guard1 (us_rep6 us_rep5 Int) Bool)
(declare-fun length2 (us_rep7) Int)
(declare-fun length__function_guard2 (Int us_rep7) Bool)
(define-fun last1 ((container us_rep7)) Int (+ (- 1) (length2 container)))
(declare-fun last__function_guard1 (Int us_rep7) Bool)
(define-fun last_index ((container us_rep5)) Int (last1 (model__1 container)))
(declare-fun last_index__function_guard (Int us_rep5) Bool)
(declare-fun first_index__function_guard (Int us_rep5) Bool)
(define-fun equal_except1 ((left us_rep7) (right us_rep7) (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((i Int)) (=> (and (<= 0 i) (<= i (last1 left))) (=> (not (= i position)) (= (bool_eq5 (get3 left i) (get3 right i)) true)))) true false)))
(declare-fun equal_except__function_guard1 (Bool us_rep7 us_rep7 Int) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int positive))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int positive)) (a__first Int) (a__last Int) (b (Array Int positive)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-fun temp_____aggregate_def_954 ((Array Int positive) Int Int Int Int) (Array Int positive))
(define-fun dynamic_invariant4 ((temp___expr_333 Int) (temp___is_init_329 Bool) (temp___skip_constant_330 Bool) (temp___do_toplevel_331 Bool) (temp___do_typ_inv_332 Bool)) Bool (=> (or (= temp___is_init_329 true) (<= 0 5)) (in_range7 temp___expr_333)))
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep)) (<= 0 (object__alignment8 a))))
(declare-const partition_refinement__inverse_sets__map__capacity__first__bit1 Int)
(declare-const partition_refinement__inverse_sets__map__capacity__last__bit1 Int)
(declare-const partition_refinement__inverse_sets__map__capacity__position1 Int)
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit1))
(assert (< partition_refinement__inverse_sets__map__capacity__first__bit1 partition_refinement__inverse_sets__map__capacity__last__bit1))
(assert (<= 0 partition_refinement__inverse_sets__map__capacity__position1))
(declare-fun user_eq15 (us_rep us_rep) Bool)
(declare-const dummy15 us_rep)
(declare-datatypes () ((inverse_set__ref (mk_inverse_set__ref (inverse_set__content us_rep)))))
(define-fun inverse_set__ref___projection ((a inverse_set__ref)) us_rep (inverse_set__content a))
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq15 a b) (oeq1 a b)) :pattern ((user_eq15 a b)))))
(declare-sort partition_index 0)
(declare-fun partition_indexqtint (partition_index) Int)
(assert (forall ((i partition_index)) (and (<= 0 (partition_indexqtint i)) (<= (partition_indexqtint i) 10000))))
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq16 (partition_index partition_index) Bool)
(declare-const dummy16 partition_index)
(declare-datatypes () ((partition_index__ref (mk_partition_index__ref (partition_index__content partition_index)))))
(define-fun partition_index__ref___projection ((a partition_index__ref)) partition_index (partition_index__content a))
(define-fun to_rep5 ((x partition_index)) Int (partition_indexqtint x))
(declare-fun of_rep5 (Int) partition_index)
(assert (forall ((x partition_index)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x partition_index)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep5) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep5) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep5)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment9 a))))
(declare-const partition_refinement__partitions__vector__capacity__first__bit1 Int)
(declare-const partition_refinement__partitions__vector__capacity__last__bit1 Int)
(declare-const partition_refinement__partitions__vector__capacity__position1 Int)
(assert (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))
(assert (< partition_refinement__partitions__vector__capacity__first__bit1 partition_refinement__partitions__vector__capacity__last__bit1))
(assert (<= 0 partition_refinement__partitions__vector__capacity__position1))
(declare-fun user_eq17 (us_rep5 us_rep5) Bool)
(declare-const dummy17 us_rep5)
(declare-datatypes () ((partition__ref (mk_partition__ref (partition__content us_rep5)))))
(define-fun partition__ref___projection ((a partition__ref)) us_rep5 (partition__content a))
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int partition_index))))))
(declare-fun slide1 ((Array Int partition_index) Int Int) (Array Int partition_index))
(assert (forall ((a (Array Int partition_index))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int partition_index))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq8 ((a (Array Int partition_index)) (a__first Int) (a__last Int) (b (Array Int partition_index)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep5 (select a temp___idx_156)) (to_rep5 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq8 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep5 (select a temp___idx_156)) (to_rep5 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const d__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const p__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const f (Array Int partition_index))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const x_elem Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const a_old (Array Int positive))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const a_update (Array Int positive))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-fun temp_____aggregate_def_157 ((Array Int positive) Int Int Int Int) (Array Int positive))
(assert (forall ((temp___956 (Array Int positive))) (forall ((temp___957 Int) (temp___958 Int) (temp___959 Int) (temp___960 Int)) (let ((temp___955 (temp_____aggregate_def_954 temp___956 temp___957 temp___958 temp___959 temp___960))) (=> (and (and (and (dynamic_invariant4 temp___957 true true true true) (dynamic_invariant temp___958 true true true true)) (dynamic_invariant4 temp___959 true true true true)) (dynamic_invariant temp___960 true true true true)) (forall ((temp___961 Int)) (ite (= temp___961 temp___959) (= (to_rep (select temp___955 temp___961)) temp___960) (ite (= temp___961 temp___957) (= (to_rep (select temp___955 temp___961)) temp___958) (= (select temp___955 temp___961) (select temp___956 temp___961))))))))))
(assert (= a_update (temp_____aggregate_def_157 a_old i (to_rep (select a_old j)) j (to_rep (select a_old i)))))
(assert (forall ((temp___159 (Array Int positive))) (forall ((temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int)) (let ((temp___158 (temp_____aggregate_def_157 temp___159 temp___160 temp___161 temp___162 temp___163))) (=> (and (and (and (dynamic_invariant4 temp___160 true true true true) (dynamic_invariant temp___161 true true true true)) (dynamic_invariant4 temp___162 true true true true)) (dynamic_invariant temp___163 true true true true)) (forall ((temp___164 Int)) (ite (= temp___164 temp___162) (= (to_rep (select temp___158 temp___164)) temp___163) (ite (= temp___164 temp___160) (= (to_rep (select temp___158 temp___164)) temp___161) (= (select temp___158 temp___164) (select temp___159 temp___164))))))))))
(define-fun dynamic_invariant5 ((temp___expr_326 Int) (temp___is_init_322 Bool) (temp___skip_constant_323 Bool) (temp___do_toplevel_324 Bool) (temp___do_typ_inv_325 Bool)) Bool (=> (or (= temp___is_init_322 true) (<= 0 6)) (in_range6 temp___expr_326)))
(define-fun dynamic_invariant6 ((temp___expr_768 Int) (temp___is_init_764 Bool) (temp___skip_constant_765 Bool) (temp___do_toplevel_766 Bool) (temp___do_typ_inv_767 Bool)) Bool (=> (or (= temp___is_init_764 true) (<= 0 10000)) (in_range8 temp___expr_768)))
(define-fun dynamic_invariant7 ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 0 2147483647)) (in_range2 temp___expr_176)))
(define-fun equivalent_keys ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)
(declare-const no_element us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const rliteral count_type)
(assert (= (count_typeqtint rliteral) 0))
(assert (= no_element (mk___rep1 (mk___split_fields1 rliteral))))
(declare-fun length3 (us_rep) Int)
(declare-fun length__function_guard3 (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length3 container))) (and (<= result (to_rep1 (rec__partition_refinement__inverse_sets__map__capacity (us_split_discrs1 container)))) (dynamic_invariant7 result true false true true))) :pattern ((length3 container)))))
(define-fun k_bigger_than_range ((container us_rep3) (fst Int) (lst Int) (key1 Int)) Bool (ite (forall ((i1 Int)) (=> (and (<= fst i1) (<= i1 lst)) (< (get container i1) key1))) true false))
(declare-fun k_bigger_than_range__function_guard (Bool us_rep3 Int Int Int) Bool)
(define-fun k_smaller_than_range ((container us_rep3) (fst Int) (lst Int) (key1 Int)) Bool (ite (forall ((i1 Int)) (=> (and (<= fst i1) (<= i1 lst)) (< key1 (get container i1)))) true false))
(declare-fun k_smaller_than_range__function_guard (Bool us_rep3 Int Int Int) Bool)
(define-fun k_is_find ((container us_rep3) (key1 Int) (position Int)) Bool (and (ite (< 0 position) (k_bigger_than_range container 1 (- position 1) key1) (distinct 1 0)) (ite (< position (length container)) (k_smaller_than_range container (+ position 1) (length container) key1) (distinct 1 0))))
(declare-fun k_is_find__function_guard (Bool us_rep3 Int Int) Bool)
(define-fun oeq2 ((left us_rep3) (right us_rep3)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq5 a b) (oeq2 a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption ((temp___expr_628 us_rep3) (temp___skip_top_level_629 Bool)) Bool (=> (not (= temp___skip_top_level_629 true)) (= (length temp___expr_628) 0)))
(assert (forall ((container us_rep3)) (forall ((key1 Int)) (! (=> (dynamic_invariant1 key1 true true true true) (let ((result (find container key1))) (and (=> (< 0 result) (and (<= result (length container)) (= (equivalent_keys key1 (get container result)) true))) (dynamic_invariant7 result true false true true)))) :pattern ((find container key1))))))
(declare-fun length4 (us_rep4) Int)
(declare-fun length__function_guard4 (Int us_rep4) Bool)
(declare-fun is_empty (us_rep4) Bool)
(declare-fun is_empty__function_guard (Bool us_rep4) Bool)
(define-fun default_initial_assumption1 ((temp___expr_592 us_rep4) (temp___skip_top_level_593 Bool)) Bool (=> (not (= temp___skip_top_level_593 true)) (and (= (is_empty temp___expr_592) true) (= (length4 temp___expr_592) 0))))
(assert true)
(define-fun iter_has_element ((container us_rep3) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)
(declare-sort key_type1 0)
(declare-fun key_typeqtint1 (key_type1) Int)
(assert (forall ((i1 key_type1)) (and (<= 1 (key_typeqtint1 i1)) (<= (key_typeqtint1 i1) 2147483647))))
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq18 (key_type1 key_type1) Bool)
(declare-const dummy18 key_type1)
(declare-datatypes () ((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___3__projection ((a key_type__ref2)) key_type1 (key_type__content2 a))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i1 extended_index)) (and (<= 0 (extended_indexqtint i1)) (<= (extended_indexqtint i1) 2147483647))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq19 (extended_index extended_index) Bool)
(declare-const dummy19 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(assert (forall ((container us_rep)) (! (let ((result (keys container))) (and (and (and (= (length result) (length3 container)) (forall ((temp___666 Int)) (=> (and (in_range10 temp___666) (= (iter_has_element result temp___666) true)) (= (has_key1 (model__ container) (get result temp___666)) true)))) (forall ((key1 Int)) (=> (and (in_range9 key1) (= (has_key1 (model__ container) key1) true)) (and (< 0 (find result key1)) (= (equivalent_keys (get result (find result key1)) key1) true))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 (length3 container))) (and (= (find result (get result i1)) i1) (= (k_is_find result (get result i1) i1) true)))))) :pattern ((keys container)))))
(declare-fun length5 (us_rep2) Int)
(declare-fun length__function_guard5 (Int us_rep2) Bool)
(declare-fun is_empty1 (us_rep2) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)
(define-fun default_initial_assumption2 ((temp___expr_651 us_rep2) (temp___skip_top_level_652 Bool)) Bool (=> (not (= temp___skip_top_level_652 true)) (and (= (is_empty1 temp___expr_651) true) (= (length5 temp___expr_651) 0))))
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i1 us_rep1)) (=> (= (has_key result i1) true) (and (and (<= 1 (get1 result i1)) (<= (get1 result i1) (length3 container))) (forall ((j1 us_rep1)) (=> (= (has_key result j1) true) (=> (= (get1 result i1) (get1 result j1)) (= (bool_eq1 i1 j1) true))))))))) :pattern ((positions container)))))
(declare-fun oeq3 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq1 left right) true) (= (oeq3 (model__ left) (model__ right)) true)) :pattern ((oeq1 left right)))))
(define-fun dynamic_invariant8 ((temp___expr_577 Int) (temp___is_init_573 Bool) (temp___skip_constant_574 Bool) (temp___do_toplevel_575 Bool) (temp___do_typ_inv_576 Bool)) Bool (=> (or (= temp___is_init_573 true) (<= 1 2147483647)) (in_range9 temp___expr_577)))
(assert (forall ((container us_rep4)) (forall ((key1 Int)) (! (=> (dynamic_invariant8 key1 true true true true) (=> (= (distinct 1 0) true) (=> (exists ((k Int)) (and (and (in_range9 k) (= (has_key1 container k) true)) (= (equivalent_keys k key1) true))) (= (has_key1 container key1) true)))) :pattern ((has_key1 container key1))))))
(declare-fun witness (us_rep4 Int) Int)
(declare-fun witness__function_guard (Int us_rep4 Int) Bool)
(declare-fun w_get (us_rep4 Int) Int)
(declare-fun w_get__function_guard (Int us_rep4 Int) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i1 element_type1)) (and (<= 0 (element_typeqtint1 i1)) (<= (element_typeqtint1 i1) 5))))
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq20 (element_type1 element_type1) Bool)
(declare-const dummy20 element_type1)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type1)))))
(define-fun element_type__ref___5__projection ((a element_type__ref3)) element_type1 (element_type__content3 a))
(define-fun dynamic_invariant9 ((temp___expr_584 Int) (temp___is_init_580 Bool) (temp___skip_constant_581 Bool) (temp___do_toplevel_582 Bool) (temp___do_typ_inv_583 Bool)) Bool (=> (or (= temp___is_init_580 true) (<= 0 5)) (in_range11 temp___expr_584)))
(assert (forall ((container us_rep4)) (forall ((key1 Int)) (! (=> (and (dynamic_invariant8 key1 true true true true) (= (has_key1 container key1) true)) (let ((result (get2 container key1))) (and (=> (= (distinct 1 0) true) (and (= result (w_get container (witness container key1))) (forall ((k Int)) (=> (and (in_range9 k) (= (has_key1 container k) true)) (= (= (equivalent_keys k key1) true) (= (witness container key1) (witness container k))))))) (dynamic_invariant9 result true false true true)))) :pattern ((get2 container key1))))))
(assert (forall ((container us_rep4)) (! (dynamic_invariant7 (length4 container) true false true true) :pattern ((length4 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq3 left right) true) (and (forall ((key1 Int)) (=> (and (in_range9 key1) (= (has_key1 left key1) true)) (and (= (has_key1 right key1) true) (= (get2 right key1) (get2 left key1))))) (forall ((key1 Int)) (=> (and (in_range9 key1) (= (has_key1 right key1) true)) (= (has_key1 left key1) true))))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep4)) (! (= (= (is_empty container) true) (forall ((key1 Int)) (not (and (in_range9 key1) (= (has_key1 container key1) true))))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (keys_included left right) true) (forall ((key1 Int)) (=> (and (in_range9 key1) (= (has_key1 left key1) true)) (= (has_key1 right key1) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep4) (right us_rep4)) (forall ((new_key Int)) (! (=> (dynamic_invariant8 new_key true true true true) (= (= (elements_equal_except left right new_key) true) (forall ((key1 Int)) (=> (and (in_range9 key1) (= (has_key1 left key1) true)) (=> (not (= (equivalent_keys key1 new_key) true)) (and (= (has_key1 right key1) true) (= (get2 left key1) (get2 right key1)))))))) :pattern ((elements_equal_except left right new_key))))))
(declare-fun has_witness (us_rep4 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep4 Int) Bool)
(assert true)
(assert (forall ((container us_rep4)) (forall ((key1 Int)) (! (=> (and (dynamic_invariant8 key1 true true true true) (= (has_key1 container key1) true)) (let ((result (witness container key1))) (and (= (has_witness container result) true) (dynamic_invariant7 result true false true true)))) :pattern ((witness container key1))))))
(assert (forall ((container us_rep4)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant7 witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant9 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(define-fun dynamic_invariant10 ((temp___expr_620 Int) (temp___is_init_616 Bool) (temp___skip_constant_617 Bool) (temp___do_toplevel_618 Bool) (temp___do_typ_inv_619 Bool)) Bool (=> (or (= temp___is_init_616 true) (<= 0 2147483647)) (in_range10 temp___expr_620)))
(assert (forall ((container us_rep3)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant7 result true false true true))) :pattern ((length container)))))
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i1 element_type2)) (and (<= 1 (element_typeqtint2 i1)) (<= (element_typeqtint2 i1) 2147483647))))
(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq21 (element_type2 element_type2) Bool)
(declare-const dummy21 element_type2)
(declare-datatypes () ((element_type__ref4 (mk_element_type__ref4 (element_type__content4 element_type2)))))
(define-fun element_type__ref___6__projection ((a element_type__ref4)) element_type2 (element_type__content4 a))
(define-fun dynamic_invariant11 ((temp___expr_613 Int) (temp___is_init_609 Bool) (temp___skip_constant_610 Bool) (temp___do_toplevel_611 Bool) (temp___do_typ_inv_612 Bool)) Bool (=> (or (= temp___is_init_609 true) (<= 1 2147483647)) (in_range12 temp___expr_613)))
(assert (forall ((container us_rep3)) (forall ((position Int)) (! (=> (and (dynamic_invariant10 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant11 (get container position) true false true true)) :pattern ((get container position))))))
(assert (forall ((container us_rep2)) (forall ((key1 us_rep1)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep1)) (and (= (has_key container k) true) (= (bool_eq1 k key1) true))) (= (has_key container key1) true))) :pattern ((has_key container key1))))))
(declare-fun witness1 (us_rep2 us_rep1) Int)
(declare-fun witness__function_guard1 (Int us_rep2 us_rep1) Bool)
(declare-fun w_get1 (us_rep2 Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep2 Int) Bool)
(declare-sort element_type3 0)
(declare-fun element_typeqtint3 (element_type3) Int)
(assert (forall ((i1 element_type3)) (and (<= 1 (element_typeqtint3 i1)) (<= (element_typeqtint3 i1) 2147483647))))
(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq22 (element_type3 element_type3) Bool)
(declare-const dummy22 element_type3)
(declare-datatypes () ((element_type__ref5 (mk_element_type__ref5 (element_type__content5 element_type3)))))
(define-fun element_type__ref___7__projection ((a element_type__ref5)) element_type3 (element_type__content5 a))
(define-fun dynamic_invariant12 ((temp___expr_643 Int) (temp___is_init_639 Bool) (temp___skip_constant_640 Bool) (temp___do_toplevel_641 Bool) (temp___do_typ_inv_642 Bool)) Bool (=> (or (= temp___is_init_639 true) (<= 1 2147483647)) (in_range13 temp___expr_643)))
(assert (forall ((container us_rep2)) (forall ((key1 us_rep1)) (! (=> (= (has_key container key1) true) (let ((result (get1 container key1))) (and (=> (= (distinct 0 0) true) (and (= result (w_get1 container (witness1 container key1))) (forall ((k us_rep1)) (=> (= (has_key container k) true) (= (= (bool_eq1 k key1) true) (= (witness1 container key1) (witness1 container k))))))) (dynamic_invariant12 result true false true true)))) :pattern ((get1 container key1))))))
(assert (forall ((container us_rep2)) (! (dynamic_invariant7 (length5 container) true false true true) :pattern ((length5 container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (oeq left right) true) (and (forall ((key1 us_rep1)) (=> (= (has_key left key1) true) (and (= (has_key right key1) true) (= (get1 right key1) (get1 left key1))))) (forall ((key1 us_rep1)) (=> (= (has_key right key1) true) (= (has_key left key1) true))))) :pattern ((oeq left right)))))
(assert (forall ((container us_rep2)) (! (= (= (is_empty1 container) true) (forall ((key1 us_rep1)) (not (= (has_key container key1) true)))) :pattern ((is_empty1 container)))))
(declare-fun has_witness1 (us_rep2 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep2 Int) Bool)
(assert true)
(assert (forall ((container us_rep2)) (forall ((key1 us_rep1)) (! (=> (= (has_key container key1) true) (let ((result (witness1 container key1))) (and (= (has_witness1 container result) true) (dynamic_invariant7 result true false true true)))) :pattern ((witness1 container key1))))))
(assert (forall ((container us_rep2)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant7 witness2 true true true true) (= (has_witness1 container witness2) true)) (dynamic_invariant12 (w_get1 container witness2) true false true true)) :pattern ((w_get1 container witness2))))))
(declare-sort extended_index1 0)
(declare-fun extended_indexqtint1 (extended_index1) Int)
(assert (forall ((i1 extended_index1)) (and (<= (- 1) (extended_indexqtint1 i1)) (<= (extended_indexqtint1 i1) 10001))))
(define-fun in_range14 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq23 (extended_index1 extended_index1) Bool)
(declare-const dummy23 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___3__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant13 ((temp___expr_792 Int) (temp___is_init_788 Bool) (temp___skip_constant_789 Bool) (temp___do_toplevel_790 Bool) (temp___do_typ_inv_791 Bool)) Bool (=> (or (= temp___is_init_788 true) (<= (- 1) 10001)) (in_range14 temp___expr_792)))
(define-fun oeq4 ((left us_rep7) (right us_rep7)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last1 left))) (= (bool_eq5 (get3 left n) (get3 right n)) true))) true false)))
(declare-fun oeq__function_guard4 (Bool us_rep7 us_rep7) Bool)
(assert (forall ((a us_rep7) (b us_rep7)) (! (= (user_eq14 a b) (oeq4 a b)) :pattern ((user_eq14 a b)))))
(define-fun default_initial_assumption3 ((temp___expr_841 us_rep7) (temp___skip_top_level_842 Bool)) Bool (=> (not (= temp___skip_top_level_842 true)) (= (length2 temp___expr_841) 0)))
(assert (forall ((container us_rep5)) (! (= (length2 (model__1 container)) (length1 container)) :pattern ((model__1 container)))))
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i1 index_type)) (and (<= 0 (index_typeqtint i1)) (<= (index_typeqtint i1) 10000))))
(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)
(declare-fun user_eq24 (index_type index_type) Bool)
(declare-const dummy24 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___3__projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant14 ((temp___expr_775 Int) (temp___is_init_771 Bool) (temp___skip_constant_772 Bool) (temp___do_toplevel_773 Bool) (temp___do_typ_inv_774 Bool)) Bool (=> (or (= temp___is_init_771 true) (<= 0 10000)) (in_range15 temp___expr_775)))
(declare-sort extended_index2 0)
(declare-fun extended_indexqtint2 (extended_index2) Int)
(assert (forall ((i1 extended_index2)) (and (<= (- 1) (extended_indexqtint2 i1)) (<= (extended_indexqtint2 i1) 10000))))
(define-fun in_range16 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)
(declare-fun user_eq25 (extended_index2 extended_index2) Bool)
(declare-const dummy25 extended_index2)
(declare-datatypes () ((extended_index__ref2 (mk_extended_index__ref2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref___4__projection ((a extended_index__ref2)) extended_index2 (extended_index__content2 a))
(define-fun dynamic_invariant15 ((temp___expr_833 Int) (temp___is_init_829 Bool) (temp___skip_constant_830 Bool) (temp___do_toplevel_831 Bool) (temp___do_typ_inv_832 Bool)) Bool (=> (or (= temp___is_init_829 true) (<= (- 1) 10000)) (in_range16 temp___expr_833)))
(assert (forall ((container us_rep7)) (! (let ((result (length2 container))) (and (<= (+ (- 1) result) 10000) (dynamic_invariant7 result true false true true))) :pattern ((length2 container)))))
(assert true)
(declare-const a (Array Int positive))
(declare-const d__split_fields us_main_type)
(declare-const p__split_fields us_main_type4)
(assert (in_range1 x_elem))
(assert (and (< (length1 (mk___rep2 p__split_discrs (mk___split_fields2 p__split_fields))) 10000) (and (= (has_key1 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem) true) (and (and (<= 0 (to_rep5 (select f (get2 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem)))) (<= (to_rep5 (select f (get2 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem))) (- (length1 (mk___rep2 p__split_discrs (mk___split_fields2 p__split_fields))) 1))) (and (forall ((j1 Int)) (=> (and (<= 0 j1) (<= j1 5)) (= (has_key1 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) (to_rep (select a j1))) true))) (forall ((c us_rep1)) (=> (= (has_key (positions (mk___rep d__split_discrs (mk___split_fields d__split_fields))) c) true) (= (to_rep (select a (element (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c))) (key (mk___rep d__split_discrs (mk___split_fields d__split_fields)) c)))))))))
(assert (not (= (has_key1 (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields))) x_elem) true)))
(check-sat)
(exit)
