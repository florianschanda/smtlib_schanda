(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type element_type

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : element_type, element_type -> bool

logic dummy : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic to_rep : element_type -> int

logic of_rep : int -> element_type

axiom inversion_axiom :
  (forall x:element_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type index_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

logic to_rep1 : index_type -> int

logic of_rep1 : int -> index_type

axiom inversion_axiom1 :
  (forall x:index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_handler__integer_list__list_node__value :
element_type; rec__list_handler__integer_list__list_node__next : index_type;
rec__list_handler__integer_list__list_node__previous : index_type
}

function us_split_fields_Value__projection(a: us_split_fields) : element_type =
  (a).rec__list_handler__integer_list__list_node__value

function us_split_fields_Next__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__list_node__next

function us_split_fields_Previous__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__list_node__previous

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__list_handler__integer_list__list_node__value) = to_rep(((b).us_split_fields1).rec__list_handler__integer_list__list_node__value)) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__next) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__next))) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__previous) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__previous))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__list_handler__integer_list__list_node__value) = to_rep(((b).us_split_fields1).rec__list_handler__integer_list__list_node__value)) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__next) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__next))) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__previous) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__previous)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:element_type. forall a1:index_type. forall a2:index_type.
  (0 <= object__size({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = a;
  rec__list_handler__integer_list__list_node__next = a1;
  rec__list_handler__integer_list__list_node__previous = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:element_type. forall a1:index_type. forall a2:index_type.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = a;
  rec__list_handler__integer_list__list_node__next = a1;
  rec__list_handler__integer_list__list_node__previous = a2 } })))

logic list_handler__integer_list__list_node__value__first__bit : int

logic list_handler__integer_list__list_node__value__last__bit : int

logic list_handler__integer_list__list_node__value__position : int

axiom list_handler__integer_list__list_node__value__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__value__first__bit)

axiom list_handler__integer_list__list_node__value__last__bit_axiom :
  (list_handler__integer_list__list_node__value__first__bit <  list_handler__integer_list__list_node__value__last__bit)

axiom list_handler__integer_list__list_node__value__position_axiom :
  (0 <= list_handler__integer_list__list_node__value__position)

logic list_handler__integer_list__list_node__next__first__bit : int

logic list_handler__integer_list__list_node__next__last__bit : int

logic list_handler__integer_list__list_node__next__position : int

axiom list_handler__integer_list__list_node__next__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__next__first__bit)

axiom list_handler__integer_list__list_node__next__last__bit_axiom :
  (list_handler__integer_list__list_node__next__first__bit <  list_handler__integer_list__list_node__next__last__bit)

axiom list_handler__integer_list__list_node__next__position_axiom :
  (0 <= list_handler__integer_list__list_node__next__position)

logic list_handler__integer_list__list_node__previous__first__bit : int

logic list_handler__integer_list__list_node__previous__last__bit : int

logic list_handler__integer_list__list_node__previous__position : int

axiom list_handler__integer_list__list_node__previous__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__previous__first__bit)

axiom list_handler__integer_list__list_node__previous__last__bit_axiom :
  (list_handler__integer_list__list_node__previous__first__bit <  list_handler__integer_list__list_node__previous__last__bit)

axiom list_handler__integer_list__list_node__previous__position_axiom :
  (0 <= list_handler__integer_list__list_node__previous__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : element_type

logic dummy3 : index_type

logic dummy4 : index_type

type list_node__ref = { list_node__content : us_rep
}

function list_node__ref___projection(a: list_node__ref) : us_rep =
  (a).list_node__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:element_type. forall v1:index_type. forall v2:index_type.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = v;
  rec__list_handler__integer_list__list_node__next = v1;
  rec__list_handler__integer_list__list_node__previous = v2 } }, i)[i])].
  ((singleton({ us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = v;
  rec__list_handler__integer_list__list_node__next = v1;
  rec__list_handler__integer_list__list_node__previous = v2 } }, i)[i]) = {
  us_split_fields1 = { rec__list_handler__integer_list__list_node__value = v;
  rec__list_handler__integer_list__list_node__next = v1;
  rec__list_handler__integer_list__list_node__previous = v2 } })))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq3((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type map__ref1 = { map__content1 : (int,index_type) farray
}

logic slide1 : (int,index_type) farray, int, int -> (int,index_type) farray

axiom slide_eq1 :
  (forall a:(int,index_type) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,index_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,index_type) farray, int, int, (int,index_type) farray,
  int, int -> (int,index_type) farray

axiom concat_def1 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : index_type, int -> (int,index_type) farray

axiom singleton_def1 :
  (forall v:index_type.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq5 : (int,index_type) farray, int, int, (int,index_type) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,index_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,index_type) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,index_type) farray, int, int, (int,index_type) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type status_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : status_type, status_type -> bool

logic dummy5 : status_type

type status_type__ref = { status_type__content : status_type
}

function status_type__ref___projection(a: status_type__ref) : status_type =
  (a).status_type__content

type us_split_fields2 = { rec__list_handler__integer_list__iterator__pointer
: index_type
}

function us_split_fields_Pointer__projection(a: us_split_fields2) : index_type =
  (a).rec__list_handler__integer_list__iterator__pointer

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  (((to_rep1(((a).us_split_fields3).rec__list_handler__integer_list__iterator__pointer) = to_rep1(((b).us_split_fields3).rec__list_handler__integer_list__iterator__pointer)) ->
  (bool_eq7(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields3).rec__list_handler__integer_list__iterator__pointer) = to_rep1(((b).us_split_fields3).rec__list_handler__integer_list__iterator__pointer))) ->
  (bool_eq7(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:index_type. (0 <= object__size1({ us_split_fields3 = {
  rec__list_handler__integer_list__iterator__pointer = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:index_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__list_handler__integer_list__iterator__pointer = a } })))

logic list_handler__integer_list__iterator__pointer__first__bit : int

logic list_handler__integer_list__iterator__pointer__last__bit : int

logic list_handler__integer_list__iterator__pointer__position : int

axiom list_handler__integer_list__iterator__pointer__first__bit_axiom :
  (0 <= list_handler__integer_list__iterator__pointer__first__bit)

axiom list_handler__integer_list__iterator__pointer__last__bit_axiom :
  (list_handler__integer_list__iterator__pointer__first__bit <  list_handler__integer_list__iterator__pointer__last__bit)

axiom list_handler__integer_list__iterator__pointer__position_axiom :
  (0 <= list_handler__integer_list__iterator__pointer__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy6 : index_type

type iterator__ref = { iterator__content : us_rep1
}

function iterator__ref___projection(a: iterator__ref) : us_rep1 =
  (a).iterator__content

logic it : index_type

logic attr__ATTRIBUTE_ADDRESS4 : int

logic item : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic status : int

logic memory : (int,us_rep) farray

logic count : int

logic free_list : (int,index_type) farray

logic free : int

logic new_pointer : int

logic o : element_type

logic o1 : element_type

logic o2 : index_type

logic o3 : index_type

logic o4 : element_type

logic o5 : index_type

logic o6 : index_type

logic o7 : (int,us_rep) farray

logic o8 : index_type

logic o9 : element_type

logic o10 : index_type

logic o11 : index_type

logic o12 : element_type

logic o13 : index_type

logic o14 : index_type

logic o15 : (int,us_rep) farray

logic o16 : index_type

logic o17 : element_type

logic o18 : index_type

logic o19 : index_type

logic o20 : element_type

logic o21 : index_type

logic o22 : index_type

logic o23 : (int,us_rep) farray

logic o24 : int

logic result : int

logic status1 : int

logic result1 : int

logic new_pointer1 : int

logic result2 : int

logic free1 : int

logic result3 : (int,us_rep) farray

logic memory1 : (int,us_rep) farray

logic result4 : (int,us_rep) farray

logic memory2 : (int,us_rep) farray

logic result5 : (int,us_rep) farray

logic memory3 : (int,us_rep) farray

axiom H : in_range(item)

axiom H1 : ((0 <= 3) -> in_range2(status))

axiom H2 : in_range1(count)

axiom H3 : in_range1(free)

axiom H4 : ((0 <= 128) -> in_range1(new_pointer))

axiom H5 : (not (count = 128))

axiom H6 : (result = status)

axiom H7 : (status1 = 0)

axiom H8 : (result1 = new_pointer)

axiom H9 : (new_pointer1 = free)

axiom H10 : (result2 = free)

axiom H11 : (free1 = to_rep1((free_list[free])))

axiom H12 : (to_rep(o) = item)

axiom H13 : (o = o1)

axiom H14 : (it = o2)

axiom H15 :
  ((((memory[to_rep1(it)])).us_split_fields1).rec__list_handler__integer_list__list_node__previous = o3)

axiom H16 : (o4 = o1)

axiom H17 : (o5 = o2)

axiom H18 : (o6 = o3)

axiom H19 : (o7 = (memory[new_pointer1 <- { us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = o4;
  rec__list_handler__integer_list__list_node__next = o5;
  rec__list_handler__integer_list__list_node__previous = o6 } }]))

axiom H20 : (result3 = memory)

axiom H21 : (memory1 = o7)

axiom H22 : (to_rep1(o8) = new_pointer1)

axiom H23 :
  ((((memory1[to_rep1((((memory1[to_rep1(it)])).us_split_fields1).rec__list_handler__integer_list__list_node__previous)])).us_split_fields1).rec__list_handler__integer_list__list_node__value = o9)

axiom H24 : (o8 = o10)

axiom H25 :
  ((((memory1[to_rep1((((memory1[to_rep1(it)])).us_split_fields1).rec__list_handler__integer_list__list_node__previous)])).us_split_fields1).rec__list_handler__integer_list__list_node__previous = o11)

axiom H26 : (o12 = o9)

axiom H27 : (o13 = o10)

axiom H28 : (o14 = o11)

axiom H29 :
  (o15 = (memory1[to_rep1((((memory1[to_rep1(it)])).us_split_fields1).rec__list_handler__integer_list__list_node__previous) <- {
  us_split_fields1 = { rec__list_handler__integer_list__list_node__value =
  o12; rec__list_handler__integer_list__list_node__next = o13;
  rec__list_handler__integer_list__list_node__previous = o14 } }]))

axiom H30 : (result4 = memory1)

axiom H31 : (memory2 = o15)

axiom H32 : (to_rep1(o16) = new_pointer1)

axiom H33 :
  ((((memory2[to_rep1(it)])).us_split_fields1).rec__list_handler__integer_list__list_node__value = o17)

axiom H34 :
  ((((memory2[to_rep1(it)])).us_split_fields1).rec__list_handler__integer_list__list_node__next = o18)

axiom H35 : (o16 = o19)

axiom H36 : (o20 = o17)

axiom H37 : (o21 = o18)

axiom H38 : (o22 = o19)

axiom H39 : (o23 = (memory2[to_rep1(it) <- { us_split_fields1 = {
  rec__list_handler__integer_list__list_node__value = o20;
  rec__list_handler__integer_list__list_node__next = o21;
  rec__list_handler__integer_list__list_node__previous = o22 } }]))

axiom H40 : (result5 = memory2)

axiom H41 : (memory3 = o23)

 (* File "double_list.ads", line 31, characters 0-0 *)
goal WP_parameter_def : in_range1((count + 1))
