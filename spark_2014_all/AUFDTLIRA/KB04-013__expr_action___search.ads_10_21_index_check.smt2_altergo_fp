(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type position

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : position, position -> bool

logic dummy1 : position

type position__ref = { position__content : position
}

function position__ref___projection(a: position__ref) : position =
  (a).position__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic no_v_in_range : (int,integer) farray, int, int, int -> bool

logic no_v_in_range__function_guard : bool, (int,integer) farray, int, int,
  int -> prop

axiom no_v_in_range__post_axiom : true

axiom no_v_in_range__def_axiom :
  (forall t:(int,integer) farray.
  (forall v:int. forall low:int. forall up:int [no_v_in_range(t, v, low,
  up)]. ((no_v_in_range(t, v, low, up) = true) <->
  (forall pos:int. (((low <= pos) and (pos <= up)) ->
  (not (to_rep((t[pos])) = v)))))))

logic t : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t1b

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t1b, t1b -> bool

logic dummy2 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a: t1b__ref) : t1b = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic pos : int

logic i : int

logic search__search__result : int

logic temp___154 : int

logic temp___153 : int

logic j : int

logic us : int

logic o : int

logic o1 : bool

logic o2 : int

logic o3 : integer

logic o4 : int

logic j1 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : integer

logic o9 : int

logic result : int

logic pos1 : int

logic result1 : int

logic i1 : int

logic pos2 : int

logic i2 : int

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : int

logic pos3 : int

logic result6 : int

logic i3 : int

logic pos4 : int

logic i4 : int

logic pos5 : int

logic i5 : int

logic pos6 : int

logic i6 : int

logic pos7 : int

logic i7 : int

logic pos8 : int

logic i8 : int

logic pos9 : int

logic i9 : int

logic result7 : int

logic search__search__result1 : int

logic search__search__result2 : int

logic search__search__result3 : int

logic pos10 : int

logic i10 : int

logic search__search__result4 : int

logic pos11 : int

logic i11 : int

logic search__search__result5 : int

logic result8 : bool

logic result9 : bool

axiom H : in_range1(v)

axiom H1 : (result = pos)

axiom H2 : (pos1 = 0)

axiom H3 : in_range1(pos1)

axiom H4 : (result1 = i)

axiom H5 : (i1 = 1)

axiom H6 : (((1 <= i1) and (i1 <= 10)) -> (((temp___154 = i1) and
  ((temp___153 = pos1) and ((((pos2 = 0) and
  (forall j2:int. (((1 <= j2) and (j2 <= (i2 - 1))) ->
  (not (to_rep((t[j2])) = v))))) or ((to_rep((t[pos2])) = v) and
  (forall j2:int. (((1 <= j2) and (j2 <= (pos2 - 1))) ->
  (not (to_rep((t[j2])) = v)))))) and ((((((- 2147483648) <= 2147483647) ->
  in_range1(pos2)) and ((1 <= 10) -> in_range3(i2))) and ((1 <= i2) and
  (i2 <= 10))) and ((((to_rep((t[i2])) = v) -> ((pos2 = result5) and
  (pos3 = i2))) and ((not (to_rep((t[i2])) = v)) -> (pos3 = pos2))) and
  (i2 = 10)))))) and (((i2 = i6) and (pos3 = pos6)) and ((i7 = i2) and
  (pos7 = pos3)))))

axiom H7 : (((1 <= i1) and (i1 <= 10)) -> (i8 = i6))

axiom H8 : (((1 <= i1) and (i1 <= 10)) -> (pos8 = pos6))

axiom H9 : (((1 <= i1) and (i1 <= 10)) -> (i9 = i7))

axiom H10 : (((1 <= i1) and (i1 <= 10)) -> (pos9 = pos7))

axiom H11 : ((not ((1 <= i1) and (i1 <= 10))) -> (i1 = i8))

axiom H12 : ((not ((1 <= i1) and (i1 <= 10))) -> (pos1 = pos8))

axiom H13 : ((not ((1 <= i1) and (i1 <= 10))) -> (i9 = i1))

axiom H14 : ((not ((1 <= i1) and (i1 <= 10))) -> (pos9 = pos1))

axiom H15 : (search__search__result1 = search__search__result2)

axiom H16 : (search__search__result3 = search__search__result1)

axiom H17 : (result7 = search__search__result)

axiom H18 : (search__search__result1 = pos8)

axiom H19 : (search__search__result4 = search__search__result2)

axiom H20 : (i10 = i8)

axiom H21 : (pos10 = pos8)

axiom H22 : (search__search__result5 = search__search__result3)

axiom H23 : (i11 = i9)

axiom H24 : (pos11 = pos9)

axiom H25 : ((search__search__result4 = 0) -> ((result8 = no_v_in_range(t, v,
  1, 10)) and ((result8 = true) <->
  (forall pos12:int. (((1 <= pos12) and (pos12 <= 10)) ->
  (not (to_rep((t[pos12])) = v)))))))

axiom H26 : ((not (search__search__result4 = 0)) -> (result8 = false))

axiom H27 : (not (result8 = true))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (1 <= search__search__result4)
