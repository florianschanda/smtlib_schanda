(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-sort logfileindext 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 17)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (logfileindext logfileindext) Bool)
(declare-const dummy1 logfileindext)
(declare-datatypes () ((logfileindext__ref (mk_logfileindext__ref (logfileindext__content logfileindext)))))
(define-fun logfileindext__ref___projection ((a logfileindext__ref)) logfileindext (logfileindext__content a))
(define-fun dynamic_invariant ((temp___expr_1211 Int) (temp___is_init_1207 Bool) (temp___skip_constant_1208 Bool) (temp___do_toplevel_1209 Bool) (temp___do_typ_inv_1210 Bool)) Bool (=> (or (= temp___is_init_1207 true) (<= 1 17)) (in_range1 temp___expr_1211)))
(declare-sort fileentrycountt 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (fileentrycountt fileentrycountt) Bool)
(declare-const dummy2 fileentrycountt)
(declare-datatypes () ((fileentrycountt__ref (mk_fileentrycountt__ref (fileentrycountt__content fileentrycountt)))))
(define-fun fileentrycountt__ref___projection ((a fileentrycountt__ref)) fileentrycountt (fileentrycountt__content a))
(declare-fun to_rep (fileentrycountt) Int)
(declare-fun of_rep (Int) fileentrycountt)
(assert (forall ((x fileentrycountt)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x fileentrycountt)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int fileentrycountt))))))
(declare-fun slide ((Array Int fileentrycountt) Int Int) (Array Int fileentrycountt))
(assert (forall ((a (Array Int fileentrycountt))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int fileentrycountt))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int fileentrycountt)) (a__first Int) (a__last Int) (b (Array Int fileentrycountt)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep (select a temp___idx_173)) (to_rep (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep (select a temp___idx_173)) (to_rep (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq (select a temp___idx_174) (select b (+ (- b__first a__first) temp___idx_174))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq (select a temp___idx_174) (select b (+ (- b__first a__first) temp___idx_174))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort filestatust 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (filestatust filestatust) Bool)
(declare-const dummy3 filestatust)
(declare-datatypes () ((filestatust__ref (mk_filestatust__ref (filestatust__content filestatust)))))
(define-fun filestatust__ref___projection ((a filestatust__ref)) filestatust (filestatust__content a))
(declare-fun to_rep1 (filestatust) Int)
(declare-fun of_rep1 (Int) filestatust)
(assert (forall ((x filestatust)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x filestatust)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int filestatust))))))
(declare-fun slide2 ((Array Int filestatust) Int Int) (Array Int filestatust))
(assert (forall ((a (Array Int filestatust))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int filestatust))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int filestatust)) (a__first Int) (a__last Int) (b (Array Int filestatust)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (to_rep1 (select a temp___idx_175)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_175))))))) true false))
(assert (forall ((a (Array Int filestatust)) (b (Array Int filestatust))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (to_rep1 (select a temp___idx_175)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_175)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const index Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant1 ((temp___expr_1324 Int) (temp___is_init_1320 Bool) (temp___skip_constant_1321 Bool) (temp___do_toplevel_1322 Bool) (temp___do_typ_inv_1323 Bool)) Bool (=> (or (= temp___is_init_1320 true) (<= 0 2)) (in_range3 temp___expr_1324)))
(define-fun dynamic_invariant2 ((temp___expr_1249 Int) (temp___is_init_1245 Bool) (temp___skip_constant_1246 Bool) (temp___do_toplevel_1247 Bool) (temp___do_typ_inv_1248 Bool)) Bool (=> (or (= temp___is_init_1245 true) (<= 0 1024)) (in_range2 temp___expr_1249)))
(declare-const logfiles (Array Int us_rep))
(declare-const logfilesstatus (Array Int filestatust))
(declare-const auditsystemfault Bool)
(declare-const logfileentries (Array Int fileentrycountt))
(declare-const thefile us_rep)
(declare-const o filestatust)
(declare-const o1 (Array Int filestatust))
(declare-const o2 fileentrycountt)
(declare-const o3 (Array Int fileentrycountt))
(declare-const result us_rep)
(declare-const thefile1 us_rep)
(declare-const ok Bool)
(declare-const result1 Bool)
(declare-const auditsystemfault1 Bool)
(declare-const ok1 Bool)
(declare-const thefile2 us_rep)
(declare-const result2 Bool)
(declare-const auditsystemfault2 Bool)
(declare-const result3 (Array Int us_rep))
(declare-const logfiles1 (Array Int us_rep))
(declare-const result4 (Array Int filestatust))
(declare-const logfilesstatus1 (Array Int filestatust))
(declare-const result5 (Array Int fileentrycountt))
(declare-const logfileentries1 (Array Int fileentrycountt))
(declare-const logfiles2 (Array Int us_rep))
(declare-const logfilesstatus2 (Array Int filestatust))
(declare-const auditsystemfault3 Bool)
(declare-const logfileentries2 (Array Int fileentrycountt))
(declare-const ok2 Bool)
(declare-const thefile3 us_rep)
(declare-const logfiles3 (Array Int us_rep))
(declare-const logfilesstatus3 (Array Int filestatust))
(declare-const auditsystemfault4 Bool)
(declare-const logfileentries3 (Array Int fileentrycountt))
(declare-const ok3 Bool)
(declare-const thefile4 us_rep)
(assert (in_range1 index))
(assert (= result thefile))
(assert (= thefile1 (select logfiles index)))
(assert (= result1 auditsystemfault))
(assert (= auditsystemfault1 (ite (= auditsystemfault true) (ite (not (= ok true)) true false) false)))
(assert (= result2 auditsystemfault1))
(assert (= auditsystemfault2 (ite (= auditsystemfault1 true) (ite (not (= ok1 true)) true false) false)))
(assert (= result3 logfiles))
(assert (= logfiles1 (store logfiles index thefile2)))
(assert (= (to_rep1 o) 0))
(assert (= o1 (store logfilesstatus index o)))
(assert (= result4 logfilesstatus))
(assert (= logfilesstatus1 o1))
(assert (= (to_rep o2) 0))
(assert (= o3 (store logfileentries index o2)))
(assert (= result5 logfileentries))
(assert (= logfileentries1 o3))
(assert (= thefile3 thefile2))
(assert (= ok2 ok1))
(assert (= logfileentries1 logfileentries2))
(assert (= auditsystemfault3 auditsystemfault2))
(assert (= logfilesstatus2 logfilesstatus1))
(assert (= logfiles2 logfiles1))
(assert (= thefile4 thefile2))
(assert (= ok3 ok1))
(assert (= logfileentries3 logfileentries1))
(assert (= auditsystemfault4 auditsystemfault2))
(assert (= logfilesstatus3 logfilesstatus1))
(assert (= logfiles3 logfiles1))
(declare-const i Int)
(assert (<= 1 i))
(assert (<= i 17))
(assert (not (= i index)))
(assert (not (= (to_rep (select logfileentries2 i)) (to_rep (select logfileentries i)))))
(check-sat)
(exit)
