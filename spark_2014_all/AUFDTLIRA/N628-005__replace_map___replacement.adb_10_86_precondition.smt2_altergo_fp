(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq1 : us_t, us_t -> bool

logic dummy1 : (int,integer) farray

logic dummy2 : t

type set__ref = { set__content : us_t
}

function set__ref___projection(a: set__ref) : us_t = (a).set__content

type count_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : count_type, count_type -> bool

logic dummy3 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep1 : count_type -> int

logic of_rep1 : int -> count_type

axiom inversion_axiom1 :
  (forall x:count_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:count_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__replacement__inverse_sets__map__capacity :
count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__replacement__inverse_sets__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__replacement__inverse_sets__map : us_main_type
}

function us_split_fields_Map__projection(a: us_split_fields) : us_main_type =
  (a).rec__replacement__inverse_sets__map

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__replacement__inverse_sets__map__capacity) = to_rep1(((b).us_split_discrs1).rec__replacement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__replacement__inverse_sets__map,
  ((b).us_split_fields1).rec__replacement__inverse_sets__map) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__replacement__inverse_sets__map__capacity) = to_rep1(((b).us_split_discrs1).rec__replacement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__replacement__inverse_sets__map,
  ((b).us_split_fields1).rec__replacement__inverse_sets__map) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment1({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } })))

logic replacement__inverse_sets__map__capacity__first__bit : int

logic replacement__inverse_sets__map__capacity__last__bit : int

logic replacement__inverse_sets__map__capacity__position : int

axiom replacement__inverse_sets__map__capacity__first__bit_axiom :
  (0 <= replacement__inverse_sets__map__capacity__first__bit)

axiom replacement__inverse_sets__map__capacity__last__bit_axiom :
  (replacement__inverse_sets__map__capacity__first__bit <  replacement__inverse_sets__map__capacity__last__bit)

axiom replacement__inverse_sets__map__capacity__position_axiom :
  (0 <= replacement__inverse_sets__map__capacity__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy4 : count_type

logic dummy5 : us_main_type

type map__ref1 = { map__content1 : us_rep
}

function map__ref___projection(a: map__ref1) : us_rep = (a).map__content1

type us_split_fields2 = { rec__replacement__inverse_sets__cursor__node :
count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__replacement__inverse_sets__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  (((to_rep1(((a).us_split_fields3).rec__replacement__inverse_sets__cursor__node) = to_rep1(((b).us_split_fields3).rec__replacement__inverse_sets__cursor__node)) ->
  (bool_eq7(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields3).rec__replacement__inverse_sets__cursor__node) = to_rep1(((b).us_split_fields3).rec__replacement__inverse_sets__cursor__node))) ->
  (bool_eq7(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:count_type. (0 <= object__size2({ us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:count_type. (0 <= object__alignment2({ us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = a } })))

logic replacement__inverse_sets__cursor__node__first__bit : int

logic replacement__inverse_sets__cursor__node__last__bit : int

logic replacement__inverse_sets__cursor__node__position : int

axiom replacement__inverse_sets__cursor__node__first__bit_axiom :
  (0 <= replacement__inverse_sets__cursor__node__first__bit)

axiom replacement__inverse_sets__cursor__node__last__bit_axiom :
  (replacement__inverse_sets__cursor__node__first__bit <  replacement__inverse_sets__cursor__node__last__bit)

axiom replacement__inverse_sets__cursor__node__position_axiom :
  (0 <= replacement__inverse_sets__cursor__node__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy6 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep2. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep2. (0 <= object__alignment3(a)))

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type map__ref2 = { map__content2 : us_rep2
}

function map__ref___3__projection(a: map__ref2) : us_rep2 = (a).map__content2

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___3__projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic has_key : us_rep2, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep2, us_rep1 -> prop

logic positions : us_rep -> us_rep2

logic positions__function_guard : us_rep2, us_rep -> prop

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq3({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = a }; us_split_fields1 = {
  rec__replacement__inverse_sets__map = a1 } }, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = b }; us_split_fields1 = {
  rec__replacement__inverse_sets__map = b1 } })]. (user_eq3({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } }, {
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__replacement__inverse_sets__map = b1 } }) = oeq({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } }, {
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__replacement__inverse_sets__map = b1 } })))

axiom has_element__post__dispatch_axiom : true

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq9 : us_rep3, us_rep3 -> bool

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep3. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep3. (0 <= object__alignment4(a)))

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref___projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic get : us_rep3, int -> int

logic get__function_guard : int, us_rep3, int -> prop

logic get1 : us_rep2, us_rep1 -> int

logic get__function_guard1 : int, us_rep2, us_rep1 -> prop

logic keys : us_rep -> us_rep3

logic keys__function_guard : us_rep3, us_rep -> prop

logic key__function_guard : int, us_rep, us_rep1 -> prop

logic key : int, us_rep, us_rep1 -> int

logic key__function_guard1 : int, int, us_rep, us_rep1 -> prop

type key_type

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq7 : key_type, key_type -> bool

logic dummy9 : key_type

type key_type__ref1 = { key_type__content1 : key_type
}

function key_type__ref___projection(a: key_type__ref1) : key_type =
  (a).key_type__content1

axiom key__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [key(attr__tag, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  position } })]. in_range3(key(attr__tag, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  position } })))))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq11 : us_rep4, us_rep4 -> bool

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep4. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep4. (0 <= object__alignment5(a)))

logic user_eq8 : us_rep4, us_rep4 -> bool

logic dummy10 : us_rep4

type map__ref3 = { map__content3 : us_rep4
}

function map__ref___2__projection(a: map__ref3) : us_rep4 = (a).map__content3

logic get2 : us_rep4, int -> int

logic get__function_guard2 : int, us_rep4, int -> prop

logic model__ : us_rep -> us_rep4

logic model____function_guard : us_rep4, us_rep -> prop

logic element__function_guard : int, us_rep, us_rep1 -> prop

logic element : int, us_rep, us_rep1 -> int

logic element__function_guard1 : int, int, us_rep, us_rep1 -> prop

type element_type

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq9 : element_type, element_type -> bool

logic dummy11 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [element(attr__tag, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  position } })]. in_range4(element(attr__tag, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  position } })))))

logic keys_included : us_rep4, us_rep4 -> bool

logic keys_included__function_guard : bool, us_rep4, us_rep4 -> prop

logic same_keys__function_guard : bool, us_rep4, us_rep4 -> prop

logic elements_equal_except : us_rep4, us_rep4, int -> bool

logic elements_equal_except__function_guard : bool, us_rep4, us_rep4,
  int -> prop

logic length1 : us_rep3 -> int

logic length__function_guard : int, us_rep3 -> prop

logic last__function_guard : int, us_rep3 -> prop

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic oeq2 : us_rep2, us_rep2 -> bool

logic oeq__function_guard3 : bool, us_rep2, us_rep2 -> prop

logic replace_element__specific_post : int, us_split_fields, us_split_discrs,
  us_rep1, int, us_split_fields -> prop

logic has_key1 : us_rep4, int -> bool

logic has_key__function_guard1 : bool, us_rep4, int -> prop

logic contains__function_guard : bool, us_rep, int -> prop

logic contains : int, us_rep, int -> bool

logic contains__function_guard1 : bool, int, us_rep, int -> prop

axiom contains__post__dispatch_axiom : true

logic equivalent_keys__function_guard : bool, int, int -> prop

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic find : us_rep3, int -> int

logic find__function_guard : int, us_rep3, int -> prop

logic find1 : us_rep, int -> us_rep1

logic find__function_guard1 : us_rep1, us_rep, int -> prop

logic find2 : int, us_rep, int -> us_rep1

logic find__function_guard2 : us_rep1, int, us_rep, int -> prop

axiom find__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall key1:int [find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1)]. (in_range3(key1) -> (((not (has_key1(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1) = true)) -> ((not (has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1)) = true)) and (bool_eq7(find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1), { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = no_element }
  }) = true))) and ((has_key1(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1) = true) -> (((has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1)) = true) and (get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1)) = find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1))) and ((not (bool_lt(get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1))), key1) = true)) and ((bool_lt(get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1))), key1) = false) -> (not (bool_lt(key1, get(keys({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find1({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } },
  key1)))) = true))))))))))

axiom find__post__dispatch_axiom : true

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size6({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment6({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } })))

logic replacement__inverse_sets__map__capacity__first__bit1 : int

logic replacement__inverse_sets__map__capacity__last__bit1 : int

logic replacement__inverse_sets__map__capacity__position1 : int

axiom replacement__inverse_sets__map__capacity__first__bit_axiom1 :
  (0 <= replacement__inverse_sets__map__capacity__first__bit1)

axiom replacement__inverse_sets__map__capacity__last__bit_axiom1 :
  (replacement__inverse_sets__map__capacity__first__bit1 <  replacement__inverse_sets__map__capacity__last__bit1)

axiom replacement__inverse_sets__map__capacity__position_axiom1 :
  (0 <= replacement__inverse_sets__map__capacity__position1)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy12 : count_type

logic dummy13 : us_main_type

type inverse_set__ref = { inverse_set__content : us_rep
}

function inverse_set__ref___projection(a: inverse_set__ref) : us_rep =
  (a).inverse_set__content

axiom user_eq__def_axiom1 :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq10({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = a }; us_split_fields1 = {
  rec__replacement__inverse_sets__map = a1 } }, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = b }; us_split_fields1 = {
  rec__replacement__inverse_sets__map = b1 } })]. (user_eq10({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } }, {
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__replacement__inverse_sets__map = b1 } }) = oeq({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = a };
  us_split_fields1 = { rec__replacement__inverse_sets__map = a1 } }, {
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = b };
  us_split_fields1 = { rec__replacement__inverse_sets__map = b1 } })))

logic a : (int,integer) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic d_old : count_type

logic d_old1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom no_element__def_axiom : (no_element = of_rep1(0))

logic length2 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

logic length3 : int, us_rep -> int

logic length__function_guard2 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length2({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } })]. ((length2({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }) <= to_rep1(container)) and in_range2(length2({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length3(attr__tag, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  })]. in_range2(length3(attr__tag, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))))

logic k_bigger_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

logic k_smaller_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

logic k_is_find__function_guard : bool, us_rep3, int, int -> prop

axiom user_eq__def_axiom2 :
  (forall a2:us_rep3. forall b:us_rep3 [user_eq6(a2, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a2)))) -> (get(a2,
    n) = get(b, n)))) ->
  (user_eq6(a2, b) = match_bool(bool_eq1(length1(a2), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a2)))) -> (get(a2,
        n) = get(b, n))))) ->
  (user_eq6(a2, b) = match_bool(bool_eq1(length1(a2), length1(b)), false,
  false)))))

axiom find__post_axiom1 :
  (forall container:us_rep3.
  (forall key1:int [find(container, key1)]. (in_range3(key1) ->
  (((0 <  find(container, key1)) -> ((find(container,
  key1) <= length1(container)) and ((not (bool_lt(key1, get(container,
  find(container, key1))) = true)) and ((bool_lt(key1, get(container,
  find(container, key1))) = false) -> (not (bool_lt(get(container,
  find(container, key1)), key1) = true)))))) and in_range2(find(container,
  key1))))))

logic length4 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

logic is_empty : us_rep4 -> bool

logic is_empty__function_guard : bool, us_rep4 -> prop

axiom model____post_axiom : true

type key_type1

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : key_type1, key_type1 -> bool

logic dummy14 : key_type1

type key_type__ref2 = { key_type__content2 : key_type1
}

function key_type__ref___2__projection(a2: key_type__ref2) : key_type1 =
  (a2).key_type__content2

type extended_index

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy15 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a2: extended_index__ref) : extended_index =
  (a2).extended_index__content

logic iter_has_element__function_guard : bool, us_rep3, int -> prop

axiom keys__post_axiom :
  (forall container:count_type. forall container1:us_main_type [keys({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } })]. ((((length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  })) = length2({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  })) and
  (forall temp___405:int. ((in_range6(temp___405) and ((1 <= temp___405) and
  (temp___405 <= (0 + length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  })))))) -> (has_key1(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  temp___405)) = true)))) and
  (forall key1:int. ((in_range5(key1) and (has_key1(model__({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } }), key1) = true)) -> ((0 <  find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1)) and ((not (bool_lt(get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1)), key1) = true)) and ((bool_lt(get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1)), key1) = false) -> (not (bool_lt(key1, get(keys({ us_split_discrs1 =
  { rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  key1))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length2({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))) -> ((find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get(keys({
    us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
    container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
    container1 } }), i1) <  get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i)))) ->
  (((i <  length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length1(keys({
    us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
    container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
    container1 } })))) -> (get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i) <  get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length1(keys({
        us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
        container }; us_split_fields1 = {
        rec__replacement__inverse_sets__map = container1 } })))) ->
        (get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i) <  get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i1))))) ->
  (match_bool(true, false, false) = true)))) and ((not (i <  length1(keys({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } })))) -> (match_bool(true, of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get(keys({
        us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
        container }; us_split_fields1 = {
        rec__replacement__inverse_sets__map = container1 } }),
        i1) <  get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i))))) ->
  (((i <  length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length1(keys({
    us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
    container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
    container1 } })))) -> (get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i) <  get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length1(keys({
        us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
        container }; us_split_fields1 = {
        rec__replacement__inverse_sets__map = container1 } })))) ->
        (get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i) <  get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i1))))) ->
  (match_bool(false, false, false) = true)))) and ((not (i <  length1(keys({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } })))) -> (match_bool(false, of_int(1), false) = true)))))) and
  ((not (0 <  i)) -> (((i <  length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length1(keys({
    us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
    container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
    container1 } })))) -> (get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i) <  get(keys({ us_split_discrs1 = {
    rec__replacement__inverse_sets__map__capacity = container };
    us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
    }), i1)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length1(keys({
        us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
        container }; us_split_fields1 = {
        rec__replacement__inverse_sets__map = container1 } })))) ->
        (get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i) <  get(keys({ us_split_discrs1 = {
        rec__replacement__inverse_sets__map__capacity = container };
        us_split_fields1 = { rec__replacement__inverse_sets__map = container1
        } }), i1))))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  })))) -> (match_bool(of_int(1), of_int(1), false) = true))))))))))

logic length5 : us_rep2 -> int

logic length__function_guard4 : int, us_rep2 -> prop

logic is_empty1 : us_rep2 -> bool

logic is_empty__function_guard1 : bool, us_rep2 -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  container }; us_split_fields1 = { rec__replacement__inverse_sets__map =
  container1 } })]. ((not (has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  no_element } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = i }
  }) = true) -> (((1 <= get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = i }
  })) and (get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = i }
  }) <= length2({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 }
  }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = j }
  }) = true) -> ((get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = i }
  }) = get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = container };
  us_split_fields1 = { rec__replacement__inverse_sets__map = container1 } }),
  { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = j }
  })) -> (bool_eq7({ us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = i } }, { us_split_fields3 =
  { rec__replacement__inverse_sets__cursor__node = j } }) = true)))))))))

logic oeq3 : us_rep4, us_rep4 -> bool

logic oeq__function_guard4 : bool, us_rep4, us_rep4 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = left
  }; us_split_fields1 = { rec__replacement__inverse_sets__map = left1 } }, {
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = right
  }; us_split_fields1 = { rec__replacement__inverse_sets__map = right1 } })].
  ((oeq({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = left }; us_split_fields1 =
  { rec__replacement__inverse_sets__map = left1 } }, { us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = right }; us_split_fields1 =
  { rec__replacement__inverse_sets__map = right1 } }) = true) <->
  (oeq3(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = left }; us_split_fields1 =
  { rec__replacement__inverse_sets__map = left1 } }), model__({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity = right
  }; us_split_fields1 = { rec__replacement__inverse_sets__map = right1 }
  })) = true)))

axiom oeq__post__dispatch_axiom : true

axiom has_key__post_axiom :
  (forall container:us_rep4.
  (forall key1:int [has_key1(container, key1)]. (in_range5(key1) ->
  ((of_int(1) = true) ->
  ((exists k1:int. ((in_range5(k1) and (has_key1(container, k1) = true)) and
   ((bool_lt(k1, key1) = false) and (bool_lt(key1, k1) = false)))) ->
  (has_key1(container, key1) = true))))))

type element_type1

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq13 : element_type1, element_type1 -> bool

logic dummy16 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a2: element_type__ref1) : element_type1 =
  (a2).element_type__content1

logic witness : us_rep4, int -> int

logic witness__function_guard : int, us_rep4, int -> prop

logic w_get : us_rep4, int -> int

logic w_get__function_guard : int, us_rep4, int -> prop

axiom get__post_axiom :
  (forall container:us_rep4.
  (forall key1:int [get2(container, key1)]. ((in_range5(key1) and
  (has_key1(container, key1) = true)) -> (((of_int(1) = true) ->
  ((get2(container, key1) = w_get(container, witness(container, key1))) and
  (forall k1:int. ((in_range5(k1) and (has_key1(container, k1) = true)) ->
  ((((bool_lt(k1, key1) = false) and (bool_lt(key1, k1) = false)) ->
  (witness(container, key1) = witness(container, k1))) and
  ((witness(container, key1) = witness(container, k1)) -> ((not (bool_lt(k1,
  key1) = true)) and ((bool_lt(k1, key1) = false) -> (not (bool_lt(key1,
  k1) = true)))))))))) and in_range7(get2(container, key1))))))

axiom length__post_axiom1 :
  (forall container:us_rep4 [length4(container)].
  in_range2(length4(container)))

axiom oeq__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key1:int. ((in_range5(key1) and (has_key1(left, key1) = true)) ->
   ((has_key1(right, key1) = true) and (get2(right, key1) = get2(left,
   key1))))) and
  (forall key1:int. ((in_range5(key1) and (has_key1(right, key1) = true)) ->
  (has_key1(left, key1) = true))))))

axiom is_empty__post_axiom :
  (forall container:us_rep4 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key1:int. (not (in_range5(key1) and (has_key1(container,
  key1) = true))))))

axiom keys_included__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key1:int. ((in_range5(key1) and (has_key1(left, key1) = true)) ->
  (has_key1(right, key1) = true)))))

axiom elements_equal_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (in_range5(new_key) -> (((elements_equal_except(left, right,
  new_key) = true) ->
  (forall key1:int. ((in_range5(key1) and (has_key1(left, key1) = true)) ->
  ((not ((not (bool_lt(key1, new_key) = true)) and ((bool_lt(key1,
  new_key) = false) -> (not (bool_lt(new_key, key1) = true))))) ->
  ((has_key1(right, key1) = true) and (get2(left, key1) = get2(right,
  key1))))))) and
  ((forall key1:int. ((in_range5(key1) and (has_key1(left, key1) = true)) ->
   ((not ((bool_lt(key1, new_key) = false) and (bool_lt(new_key,
   key1) = false))) -> ((has_key1(right, key1) = true) and (get2(left,
   key1) = get2(right, key1)))))) ->
  (elements_equal_except(left, right, new_key) = true))))))

logic has_witness : us_rep4, int -> bool

logic has_witness__function_guard : bool, us_rep4, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep4.
  (forall key1:int [witness(container, key1)]. ((in_range5(key1) and
  (has_key1(container, key1) = true)) -> ((has_witness(container,
  witness(container, key1)) = true) and in_range2(witness(container,
  key1))))))

axiom w_get__post_axiom :
  (forall container:us_rep4.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range2(witness1) and (has_witness(container, witness1) = true)) ->
  in_range7(w_get(container, witness1)))))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length1(container)].
  (((0 + length1(container)) <= 2147483647) and
  in_range2(length1(container))))

type element_type2

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : element_type2, element_type2 -> bool

logic dummy17 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___3__projection(a2: element_type__ref2) : element_type2 =
  (a2).element_type__content2

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall position:int [get(container, position)]. ((in_range6(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range8(get(container, position)))))

axiom has_key__post_axiom1 :
  (forall container:us_rep2.
  (forall key1:count_type [has_key(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } })].
  ((of_int(0) = true) ->
  ((exists k1:count_type. ((has_key(container, { us_split_fields3 = {
   rec__replacement__inverse_sets__cursor__node = k1 } }) = true) and
   (bool_eq7({ us_split_fields3 = {
   rec__replacement__inverse_sets__cursor__node = k1 } }, {
   us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = key1 }
   }) = true))) ->
  (has_key(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }) = true)))))

type element_type3

predicate in_range9(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : element_type3, element_type3 -> bool

logic dummy18 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___4__projection(a2: element_type__ref3) : element_type3 =
  (a2).element_type__content3

logic witness1 : us_rep2, us_rep1 -> int

logic witness__function_guard1 : int, us_rep2, us_rep1 -> prop

logic w_get1 : us_rep2, int -> int

logic w_get__function_guard1 : int, us_rep2, int -> prop

axiom get__post_axiom2 :
  (forall container:us_rep2.
  (forall key1:count_type [get1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } })].
  ((has_key(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }) = true) ->
  (((of_int(0) = true) -> ((get1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 }
  }) = w_get1(container, witness1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }))) and
  (forall k1:count_type. ((has_key(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = k1 } }) = true) ->
  ((bool_eq7({ us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = k1 } }, { us_split_fields3 =
  { rec__replacement__inverse_sets__cursor__node = key1 } }) = true) <->
  (witness1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 }
  }) = witness1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = k1 } }))))))) and
  in_range9(get1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }))))))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length5(container)].
  in_range2(length5(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  ((oeq2(left, right) = true) <->
  ((forall key1:count_type. ((has_key(left, { us_split_fields3 = {
   rec__replacement__inverse_sets__cursor__node = key1 } }) = true) ->
   ((has_key(right, { us_split_fields3 = {
   rec__replacement__inverse_sets__cursor__node = key1 } }) = true) and
   (get1(right, { us_split_fields3 = {
   rec__replacement__inverse_sets__cursor__node = key1 } }) = get1(left, {
   us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = key1 }
   }))))) and
  (forall key1:count_type. ((has_key(right, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }) = true) ->
  (has_key(left, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep2 [is_empty1(container)].
  ((is_empty1(container) = true) <->
  (forall key1:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }) = true)))))

logic has_witness1 : us_rep2, int -> bool

logic has_witness__function_guard1 : bool, us_rep2, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container:us_rep2.
  (forall key1:count_type [witness1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } })].
  ((has_key(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }) = true) ->
  ((has_witness1(container, witness1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } })) = true) and
  in_range2(witness1(container, { us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = key1 } }))))))

axiom w_get__post_axiom1 :
  (forall container:us_rep2.
  (forall witness2:int [w_get1(container, witness2)].
  ((in_range2(witness2) and (has_witness1(container, witness2) = true)) ->
  in_range9(w_get1(container, witness2)))))

logic d__split_fields : us_main_type

logic c : count_type

logic o : bool

logic o1 : bool

logic temp___599 : int

logic o2 : int

logic c1 : count_type

logic o3 : bool

logic o4 : bool

logic o5 : int

logic o6 : bool

logic temp___587 : int

logic o7 : int

logic o8 : count_type

logic c2 : count_type

logic o9 : bool

logic o10 : bool

logic o11 : int

logic o12 : bool

logic temp___592 : int

logic o13 : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic replacement__inverse_sets__replace_element__container__fields : us_main_type

logic result4 : us_main_type

logic d__split_fields1 : us_main_type

logic result5 : bool

logic result6 : bool

axiom H : dynamic_property((- 2147483648), 2147483647, to_rep(first(a1)),
  to_rep(last(a1)))

axiom H1 : in_range1(k)

axiom H2 : ((has_key1(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), k) = true) and
  (forall c3:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c3 } }) = true) -> (to_rep((a[get2(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c3 } })))])) = get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c3 } }))))))

axiom H3 : ((d__split_discrs = d_old) and (d__split_fields = d_old1))

axiom H4 :
  (forall c3:us_rep1. ((has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), c3) = true) -> ((not (get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), c3)) = k)) -> (to_rep((a[get2(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), c3)))])) = get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), c3))))))

axiom H5 : (({ us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = o8 } } = find1({
  us_split_discrs1 = { rec__replacement__inverse_sets__map__capacity =
  d__split_discrs }; us_split_fields1 = {
  rec__replacement__inverse_sets__map = d__split_fields } }, k)) and
  (((has_key1(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), k) = false) -> ((not (has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  o8 } }) = true)) and (bool_eq7({ us_split_fields3 = {
  rec__replacement__inverse_sets__cursor__node = o8 } }, { us_split_fields3 =
  { rec__replacement__inverse_sets__cursor__node = no_element }
  }) = true))) and ((has_key1(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), k) = true) -> (((has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  o8 } }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  o8 } }) = find(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), k))) and ((not (bool_lt(get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  o8 } })), k) = true)) and ((bool_lt(get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  o8 } })), k) = false) -> (not (bool_lt(k, get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  o8 } }))) = true))))))))

axiom H6 : (((((((bool_eq1(length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } })),
  length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length1(keys({ us_split_discrs1 =
  { rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }))))) ->
  (get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  n) = get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), n))))) and (not (bool_eq1(length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } })),
  length1(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }))) = false))) and (oeq2(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } })) = true)) and (get2(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }), {
  us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = o8 }
  }))) = 0)) and (match_bool(keys_included(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } })), keys_included(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } })),
  false) = true)) and (elements_equal_except(model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  model__({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields
  } }), get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }),
  get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map =
  replacement__inverse_sets__replace_element__container__fields } }), {
  us_split_fields3 = { rec__replacement__inverse_sets__cursor__node = o8 }
  }))) = true))

axiom H7 : (result4 = d__split_fields)

axiom H8 :
  (d__split_fields1 = replacement__inverse_sets__replace_element__container__fields)

axiom H9 : ((o9 = has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c2 } })) and ((o9 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c2 } }) = true)))

axiom H10 : (o10 = true)

axiom H11 : (result5 = match_bool(o10, o9, false))

axiom H12 : (result5 = true)

axiom H13 : ((o11 = get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c2 } }))) and (in_range3(o11) and (o11 = get(keys({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), get1(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c2 } })))))

axiom H14 : (((o11 = k) -> (o12 = true)) and ((not (o11 = k)) ->
  (o12 = false)))

axiom H15 : (((not (o12 = true)) -> (result6 = true)) and ((o12 = true) ->
  (result6 = false)))

axiom H16 : (result6 = true)

 (* File "a-cforma.ads", line 997, characters 0-0 *)
goal WP_parameter_def : (has_key(positions({ us_split_discrs1 = {
  rec__replacement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields1 = { rec__replacement__inverse_sets__map = d__split_fields1
  } }), { us_split_fields3 = { rec__replacement__inverse_sets__cursor__node =
  c2 } }) = true)
