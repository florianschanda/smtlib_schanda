(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort it2 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range1 temp___expr_183)))
(declare-sort it3 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (it3 it3) Bool)
(declare-const dummy2 it3)
(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))
(define-fun dynamic_invariant2 ((temp___expr_190 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= 1 16)) (in_range2 temp___expr_190)))
(declare-sort it4 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 90 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (it4 it4) Bool)
(declare-const dummy3 it4)
(declare-datatypes () ((it4__ref (mk_it4__ref (it4__content it4)))))
(define-fun it4__ref___projection ((a it4__ref)) it4 (it4__content a))
(define-fun dynamic_invariant3 ((temp___expr_197 Int) (temp___is_init_193 Bool) (temp___skip_constant_194 Bool) (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool)) Bool (=> (or (= temp___is_init_193 true) (<= 90 99)) (in_range3 temp___expr_197)))
(declare-sort et1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (et1 et1) Bool)
(declare-const dummy4 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant4 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range4 temp___expr_204)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy5 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq5 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const dummy6 (Array Int (Array Int et1)))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq6 ((Array Int (Array Int et1)) (Array Int (Array Int et1))) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int (Array Int et1))))))))
(declare-fun slide2 ((Array Int (Array Int (Array Int et1))) Int Int) (Array Int (Array Int (Array Int et1))))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int (Array Int (Array Int et1)))) (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int et1)))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 5 50 (select b (+ (- b__first a__first) temp___idx_156)) 5 50) true)))) true false))
(assert (forall ((a (Array Int (Array Int (Array Int et1)))) (b (Array Int (Array Int (Array Int et1))))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 5 50 (select b (+ (- b__first a__first) temp___idx_156)) 5 50) true))))))))
(declare-const dummy7 (Array Int (Array Int (Array Int et1))))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int (Array Int (Array Int et1)))) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int (Array Int (Array Int et1)))) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int (Array Int (Array Int et1)))) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq7 ((Array Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1)))) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int (Array Int (Array Int et1)))))))))
(declare-fun slide3 ((Array Int (Array Int (Array Int (Array Int et1)))) Int Int) (Array Int (Array Int (Array Int (Array Int et1)))))
(assert (forall ((a (Array Int (Array Int (Array Int (Array Int et1)))))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int (Array Int (Array Int et1)))))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int (Array Int (Array Int et1))))) (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int (Array Int et1))))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq2 (select a temp___idx_157) 1 16 (select b (+ (- b__first a__first) temp___idx_157)) 1 16) true)))) true false))
(assert (forall ((a (Array Int (Array Int (Array Int (Array Int et1))))) (b (Array Int (Array Int (Array Int (Array Int et1)))))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq2 (select a temp___idx_157) 1 16 (select b (+ (- b__first a__first) temp___idx_157)) 1 16) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const i2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const j1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const j2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const k1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const k2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const l1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const l2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const f Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun temp___2365 ((Array Int (Array Int (Array Int (Array Int et1)))) Int (Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int (Array Int et1)))) (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-fun temp___2373 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp___2380 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___2388 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___2397 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp___2404 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___2412 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___2367 (Array Int (Array Int (Array Int (Array Int et1)))))) (forall ((temp___2368 Int) (temp___2370 Int)) (forall ((temp___2369 (Array Int (Array Int (Array Int et1)))) (temp___2371 (Array Int (Array Int (Array Int et1))))) (let ((temp___2366 (temp___2365 temp___2367 temp___2368 temp___2369 temp___2370 temp___2371))) (=> (and (dynamic_invariant3 temp___2368 true true true true) (dynamic_invariant3 temp___2370 true true true true)) (forall ((temp___2372 Int)) (ite (= temp___2372 temp___2370) (= (select temp___2366 temp___2372) temp___2371) (ite (= temp___2372 temp___2368) (= (select temp___2366 temp___2372) temp___2369) (= (select temp___2366 temp___2372) (select temp___2367 temp___2372)))))))))))
(assert (forall ((temp___2375 (Array Int (Array Int (Array Int et1))))) (forall ((temp___2376 Int)) (forall ((temp___2377 (Array Int (Array Int et1)))) (let ((temp___2374 (temp___2373 temp___2375 temp___2376 temp___2377))) (=> (dynamic_invariant2 temp___2376 true true true true) (forall ((temp___2378 Int)) (ite (= temp___2378 temp___2376) (= (select temp___2374 temp___2378) temp___2377) (= (select temp___2374 temp___2378) (select temp___2375 temp___2378))))))))))
(assert (forall ((temp___2382 (Array Int (Array Int et1)))) (forall ((temp___2383 Int)) (forall ((temp___2384 (Array Int et1))) (let ((temp___2381 (temp___2380 temp___2382 temp___2383 temp___2384))) (=> (dynamic_invariant1 temp___2383 true true true true) (forall ((temp___2385 Int)) (ite (= temp___2385 temp___2383) (= (select temp___2381 temp___2385) temp___2384) (= (select temp___2381 temp___2385) (select temp___2382 temp___2385))))))))))
(assert (forall ((temp___2390 (Array Int et1))) (forall ((temp___2391 Int) (temp___2392 Int)) (let ((temp___2389 (temp___2388 temp___2390 temp___2391 temp___2392))) (=> (and (dynamic_invariant temp___2391 true true true true) (dynamic_invariant4 temp___2392 true true true true)) (forall ((temp___2393 Int)) (ite (= temp___2393 temp___2391) (= (to_rep (select temp___2389 temp___2393)) temp___2392) (= (select temp___2389 temp___2393) (select temp___2390 temp___2393)))))))))
(assert (forall ((temp___2399 (Array Int (Array Int (Array Int et1))))) (forall ((temp___2400 Int)) (forall ((temp___2401 (Array Int (Array Int et1)))) (let ((temp___2398 (temp___2397 temp___2399 temp___2400 temp___2401))) (=> (dynamic_invariant2 temp___2400 true true true true) (forall ((temp___2402 Int)) (ite (= temp___2402 temp___2400) (= (select temp___2398 temp___2402) temp___2401) (= (select temp___2398 temp___2402) (select temp___2399 temp___2402))))))))))
(assert (forall ((temp___2406 (Array Int (Array Int et1)))) (forall ((temp___2407 Int)) (forall ((temp___2408 (Array Int et1))) (let ((temp___2405 (temp___2404 temp___2406 temp___2407 temp___2408))) (=> (dynamic_invariant1 temp___2407 true true true true) (forall ((temp___2409 Int)) (ite (= temp___2409 temp___2407) (= (select temp___2405 temp___2409) temp___2408) (= (select temp___2405 temp___2409) (select temp___2406 temp___2409))))))))))
(assert (forall ((temp___2414 (Array Int et1))) (forall ((temp___2415 Int) (temp___2416 Int)) (let ((temp___2413 (temp___2412 temp___2414 temp___2415 temp___2416))) (=> (and (dynamic_invariant temp___2415 true true true true) (dynamic_invariant4 temp___2416 true true true true)) (forall ((temp___2417 Int)) (ite (= temp___2417 temp___2415) (= (to_rep (select temp___2413 temp___2417)) temp___2416) (= (select temp___2413 temp___2417) (select temp___2414 temp___2417)))))))))
(declare-const a (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 (Array Int (Array Int et1)))
(declare-const o3 (Array Int (Array Int (Array Int et1))))
(declare-const o4 (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const o5 et1)
(declare-const o6 (Array Int et1))
(declare-const o7 (Array Int (Array Int et1)))
(declare-const o8 (Array Int (Array Int (Array Int et1))))
(declare-const o9 (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const result (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const a1 (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const result1 (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const a2 (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const a3 (Array Int (Array Int (Array Int (Array Int et1)))))
(declare-const a4 (Array Int (Array Int (Array Int (Array Int et1)))))
(assert (in_range i1))
(assert (in_range i2))
(assert (in_range1 j1))
(assert (in_range1 j2))
(assert (in_range2 k1))
(assert (in_range2 k2))
(assert (in_range3 l1))
(assert (in_range3 l2))
(assert (in_range4 e))
(assert (in_range4 f))
(assert (and (not (= i1 i2)) (and (not (= j1 j2)) (and (not (= k1 k2)) (not (= l1 l2))))))
(assert (= (to_rep o) e))
(assert (= o1 (store (select (select (select a l1) k1) j1) i1 o)))
(assert (= o2 (store (select (select a l1) k1) j1 o1)))
(assert (= o3 (store (select a l1) k1 o2)))
(assert (= o4 (store a l1 o3)))
(assert (= result a))
(assert (= a1 o4))
(assert (= (to_rep o5) f))
(assert (= o6 (store (select (select (select a1 l2) k2) j2) i2 o5)))
(assert (= o7 (store (select (select a1 l2) k2) j2 o6)))
(assert (= o8 (store (select a1 l2) k2 o7)))
(assert (= o9 (store a1 l2 o8)))
(assert (= result1 a1))
(assert (= a2 o9))
(assert (= a2 a3))
(assert (= a4 a2))
(assert (not (= (bool_eq3 a3 90 99 (temp___2365 a l1 (temp___2373 (select a l1) k1 (temp___2380 (select (select a l1) k1) j1 (temp___2388 (select (select (select a l1) k1) j1) i1 e))) l2 (temp___2397 (select a l2) k2 (temp___2404 (select (select a l2) k2) j2 (temp___2412 (select (select (select a l2) k2) j2) i2 f)))) 90 99) true)))
(check-sat)
(exit)
