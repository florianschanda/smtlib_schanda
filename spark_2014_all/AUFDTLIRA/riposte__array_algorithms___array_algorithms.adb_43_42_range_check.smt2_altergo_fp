(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type value_type

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value_type, value_type -> bool

logic dummy : value_type

type value_type__ref = { value_type__content : value_type
}

function value_type__ref___projection(a: value_type__ref) : value_type =
  (a).value_type__content

logic to_rep : value_type -> int

logic of_rep : int -> value_type

axiom inversion_axiom :
  (forall x:value_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index_type

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type map__ref = { map__content : (int,value_type) farray
}

logic slide : (int,value_type) farray, int, int -> (int,value_type) farray

axiom slide_eq :
  (forall a:(int,value_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,value_type) farray, int, int, (int,value_type) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,value_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,value_type) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,value_type) farray. forall b:(int,value_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type tindex_typeB

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tindex_typeB, tindex_typeB -> bool

logic dummy2 : tindex_typeB

type tindex_typeB__ref = { tindex_typeB__content : tindex_typeB
}

function tindex_typeB__ref___projection(a: tindex_typeB__ref) : tindex_typeB =
  (a).tindex_typeB__content

logic to_rep1 : tindex_typeB -> int

logic of_rep1 : int -> tindex_typeB

axiom inversion_axiom1 :
  (forall x:tindex_typeB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:tindex_typeB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> tindex_typeB

logic last : t -> tindex_typeB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,value_type) farray; rt : t
}

function to_array(a: us_t) : (int,value_type) farray = (a).elts

function of_array(a: (int,value_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,value_type) farray -> int

logic value__component__size : int

logic object__component__size : (int,value_type) farray -> int

logic value__alignment : int

logic object__alignment : (int,value_type) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,value_type) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,value_type) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,value_type) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,value_type) farray

logic dummy4 : t

type generic_array__ref = { generic_array__content : us_t
}

function generic_array__ref___projection(a: generic_array__ref) : us_t =
  (a).generic_array__content

logic has_value_inc : us_t, int, int -> bool

logic has_value_inc__function_guard : bool, us_t, int, int -> prop

axiom has_value_inc__post_axiom : true

axiom has_value_inc__def_axiom :
  (forall a:(int,value_type) farray. forall a1:t.
  (forall lastindex:int. forall val__:int [has_value_inc({ elts = a; rt = a1
  }, lastindex, val__)]. ((has_value_inc({ elts = a; rt = a1 }, lastindex,
  val__) = true) <->
  (exists i:int. (((to_rep1(first(a1)) <= i) and (i <= lastindex)) and
  (to_rep((a[i])) = val__))))))

logic has_value_exc : us_t, int, int -> bool

logic has_value_exc__function_guard : bool, us_t, int, int -> prop

axiom has_value_exc__post_axiom : true

axiom has_value_exc__def_axiom :
  (forall a:(int,value_type) farray. forall a1:t.
  (forall lastindex:int. forall val__:int [has_value_exc({ elts = a; rt = a1
  }, lastindex, val__)]. ((has_value_exc({ elts = a; rt = a1 }, lastindex,
  val__) = true) <->
  (exists i:int. (((to_rep1(first(a1)) <= i) and (i <= lastindex)) and
  ((i <  lastindex) and (to_rep((a[i])) = val__)))))))

logic a : (int,value_type) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tindex_typeB, tindex_typeB -> bool

logic dummy5 : tindex_typeB

type t9b__ref = { t9b__content : tindex_typeB
}

function t9b__ref___projection(a2: t9b__ref) : tindex_typeB =
  (a2).t9b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "array_algorithms.ads", line 47, characters 0-0 *)
goal WP_parameter_def :
  (forall found:bool. forall location:int. forall i:int. forall result:bool.
  forall found1:bool. forall result1:int. forall location1:int.
  forall result2:int. forall i1:int. forall found2:bool.
  forall location2:int. forall found3:bool. forall location3:int.
  forall i2:int. (dynamic_property((- 2147483648), 2147483647,
  to_rep1(first(a1)), to_rep1(last(a1))) -> (in_range1(val__) ->
  ((((- 2147483648) <= 2147483647) -> in_range2(location)) -> ((({
  bool__content = result } = { bool__content = found }) and
  (found1 = of_int(0))) -> ((({ int__content = result1 } = { int__content =
  location }) and (location1 = to_rep1(first(a1)))) -> ((({ int__content =
  result2 } = { int__content = i }) and (i1 = to_rep1(first(a1)))) ->
  (((to_rep1(first(a1)) <= i1) and (i1 <= to_rep1(last(a1)))) ->
  (((not (to_rep((a[i1])) = val__)) and ((location2 = location1) and
  (found2 = found1))) ->
  (((forall j:int. (((to_rep1(first(a1)) <= j) and (j <= i2)) ->
    (not (to_rep((a[j])) = val__)))) and
  (not (found3 = true))) -> ((((((- 2147483648) <= 2147483647) ->
  in_range2(location3)) and ((to_rep1(first(a1)) <= to_rep1(last(a1))) ->
  dynamic_property1(to_rep1(first(a1)), to_rep1(last(a1)), i2))) and
  ((to_rep1(first(a1)) <= i2) and (i2 <= to_rep1(last(a1))))) ->
  ((to_rep1(first(a1)) <= i2) ->
  ((- 2147483648) <= to_rep1(first(a1)))))))))))))))
