(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,natural) farray

logic dummy4 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep1(first(a1)) = 1) and (0 <= to_rep1(last(a1))))))

logic remove : us_t, int -> us_t

logic remove__function_guard : us_t, us_t, int -> prop

axiom remove__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i:int [remove({ elts = a; rt = a1 }, i)]. ((in_range3(i) and
  ((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep1(first(a1)) <= i) and (i <= to_rep1(last(a1)))))) ->
  (((invariant__(remove({ elts = a; rt = a1 }, i)) = true) and
  ((to_rep1(last((remove({ elts = a; rt = a1 },
  i)).rt)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i - 1))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 }, i)).elts[k]))))) and
  ((forall k:int. ((((i + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 },
   i)).elts[(k - 1)]))))) and
  (forall k:int. (((i <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep(((remove({ elts = a; rt = a1 },
  i)).elts[k]))))))))) and dynamic_property(1, 100, to_rep1(first((remove({
  elts = a; rt = a1 }, i)).rt)), to_rep1(last((remove({ elts = a; rt = a1 },
  i)).rt)))))))

logic a : (int,natural) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic i1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic a11 : (int,natural) farray

logic a12 : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic a2 : (int,natural) farray

logic a21 : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic a121 : (int,natural) farray

logic a122 : t

logic attr__ATTRIBUTE_ADDRESS5 : int

logic a211 : (int,natural) farray

logic a212 : t

logic attr__ATTRIBUTE_ADDRESS6 : int

axiom a1__def_axiom : ({ elts = a11; rt = a12 } = remove({ elts = a; rt = a1
  }, i1))

axiom a2__def_axiom : ({ elts = a2; rt = a21 } = remove({ elts = a; rt = a1
  }, i2))

axiom a12__def_axiom : ({ elts = a121; rt = a122 } = remove(remove({ elts =
  a; rt = a1 }, i1), (i2 - 1)))

axiom a21__def_axiom : ({ elts = a211; rt = a212 } = remove(remove({ elts =
  a; rt = a1 }, i2), i1))

logic perm__remove_swap__result : int

logic perm__remove_swap__a1__assume : (int,natural) farray

logic perm__remove_swap__a1__assume1 : t

logic perm__remove_swap__a2__assume : (int,natural) farray

logic perm__remove_swap__a2__assume1 : t

logic o : (int,natural) farray

logic o1 : t

logic o2 : int

logic perm__remove_swap__a12__assume : (int,natural) farray

logic perm__remove_swap__a12__assume1 : t

logic o3 : (int,natural) farray

logic o4 : t

logic perm__remove_swap__a21__assume : (int,natural) farray

logic perm__remove_swap__a21__assume1 : t

logic i : int

logic o5 : int

logic o6 : natural

logic o7 : int

logic temp___553 : int

logic o8 : int

logic o9 : natural

logic o10 : int

logic temp___554 : int

logic o11 : int

logic o12 : natural

logic o13 : int

logic i3 : int

logic o14 : int

logic o15 : natural

logic o16 : int

logic temp___555 : int

logic o17 : int

logic o18 : natural

logic o19 : int

logic temp___556 : int

logic o20 : int

logic o21 : natural

logic o22 : int

logic o23 : (int,natural) farray

logic o24 : t

logic temp___558 : (int,natural) farray

logic temp___5581 : t

logic o25 : (int,natural) farray

logic o26 : t

logic o27 : int

logic temp___557 : (int,natural) farray

logic temp___5571 : t

logic result : int

logic perm__remove_swap__result1 : int

logic perm__remove_swap__result2 : int

logic perm__remove_swap__result3 : int

logic perm__remove_swap__result4 : int

logic perm__remove_swap__result5 : int

axiom H : dynamic_property(1, 100, to_rep1(first(a1)), to_rep1(last(a1)))

axiom H1 : in_range3(i1)

axiom H2 : in_range3(i2)

axiom H3 : ((invariant__({ elts = a; rt = a1 }) = true) and
  (((to_rep1(first(a1)) <= i1) and (i1 <= to_rep1(last(a1)))) and
  (((to_rep1(first(a1)) <= i2) and (i2 <= to_rep1(last(a1)))) and
  (i1 <  i2))))

axiom H4 : ((((({ elts = perm__remove_swap__a1__assume; rt =
  perm__remove_swap__a1__assume1 } = remove({ elts = a; rt = a1 }, i1)) and
  (dynamic_property(1, 100, to_rep1(first(perm__remove_swap__a1__assume1)),
  to_rep1(last(perm__remove_swap__a1__assume1))) and ((invariant__({ elts =
  perm__remove_swap__a1__assume; rt = perm__remove_swap__a1__assume1
  }) = true) and
  ((to_rep1(last(perm__remove_swap__a1__assume1)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i1 - 1))) ->
   (to_rep((a[k])) = to_rep((perm__remove_swap__a1__assume[k]))))) and
  ((forall k:int. ((((i1 + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((perm__remove_swap__a1__assume[(k - 1)]))))) and
  (forall k:int. (((i1 <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((perm__remove_swap__a1__assume[k]))))))))))) and
  ((perm__remove_swap__a1__assume = a11) and
  (perm__remove_swap__a1__assume1 = a12))) and (dynamic_property(1, 100,
  to_rep1(first(a12)), to_rep1(last(a12))) and (((({ elts =
  perm__remove_swap__a2__assume; rt = perm__remove_swap__a2__assume1
  } = remove({ elts = a; rt = a1 }, i2)) and (dynamic_property(1, 100,
  to_rep1(first(perm__remove_swap__a2__assume1)),
  to_rep1(last(perm__remove_swap__a2__assume1))) and ((invariant__({ elts =
  perm__remove_swap__a2__assume; rt = perm__remove_swap__a2__assume1
  }) = true) and
  ((to_rep1(last(perm__remove_swap__a2__assume1)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i2 - 1))) ->
   (to_rep((a[k])) = to_rep((perm__remove_swap__a2__assume[k]))))) and
  ((forall k:int. ((((i2 + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((perm__remove_swap__a2__assume[(k - 1)]))))) and
  (forall k:int. (((i2 <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((perm__remove_swap__a2__assume[k]))))))))))) and
  ((perm__remove_swap__a2__assume = a2) and
  (perm__remove_swap__a2__assume1 = a21))) and (dynamic_property(1, 100,
  to_rep1(first(a21)), to_rep1(last(a21))) and (((((o2 = (i2 - 1)) and
  in_range3((i2 - 1))) and ((({ elts = o; rt = o1 } = remove({ elts = a; rt =
  a1 }, i1)) and (dynamic_property(1, 100, to_rep1(first(o1)),
  to_rep1(last(o1))) and ((invariant__({ elts = o; rt = o1 }) = true) and
  ((to_rep1(last(o1)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i1 - 1))) ->
   (to_rep((a[k])) = to_rep((o[k]))))) and
  ((forall k:int. ((((i1 + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((o[(k - 1)]))))) and
  (forall k:int. (((i1 <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((o[k]))))))))))) and (({ elts =
  perm__remove_swap__a12__assume; rt = perm__remove_swap__a12__assume1
  } = remove({ elts = o; rt = o1 }, o2)) and (dynamic_property(1, 100,
  to_rep1(first(perm__remove_swap__a12__assume1)),
  to_rep1(last(perm__remove_swap__a12__assume1))) and ((invariant__({ elts =
  perm__remove_swap__a12__assume; rt = perm__remove_swap__a12__assume1
  }) = true) and
  ((to_rep1(last(perm__remove_swap__a12__assume1)) = (to_rep1(last(o1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (o2 - 1))) ->
   (to_rep((o[k])) = to_rep((perm__remove_swap__a12__assume[k]))))) and
  ((forall k:int. ((((o2 + 1) <= k) and (k <= to_rep1(last(o1)))) ->
   (to_rep((o[k])) = to_rep((perm__remove_swap__a12__assume[(k - 1)]))))) and
  (forall k:int. (((o2 <= k) and (k <= (to_rep1(last(o1)) - 1))) ->
  (to_rep((o[(k + 1)])) = to_rep((perm__remove_swap__a12__assume[k]))))))))))))) and
  ((perm__remove_swap__a12__assume = a121) and
  (perm__remove_swap__a12__assume1 = a122))) and (dynamic_property(1, 100,
  to_rep1(first(a122)), to_rep1(last(a122))) and ((((({ elts = o3; rt = o4
  } = remove({ elts = a; rt = a1 }, i2)) and (dynamic_property(1, 100,
  to_rep1(first(o4)), to_rep1(last(o4))) and ((invariant__({ elts = o3; rt =
  o4 }) = true) and ((to_rep1(last(o4)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i2 - 1))) ->
   (to_rep((a[k])) = to_rep((o3[k]))))) and
  ((forall k:int. ((((i2 + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((o3[(k - 1)]))))) and
  (forall k:int. (((i2 <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((o3[k]))))))))))) and (({ elts =
  perm__remove_swap__a21__assume; rt = perm__remove_swap__a21__assume1
  } = remove({ elts = o3; rt = o4 }, i1)) and (dynamic_property(1, 100,
  to_rep1(first(perm__remove_swap__a21__assume1)),
  to_rep1(last(perm__remove_swap__a21__assume1))) and ((invariant__({ elts =
  perm__remove_swap__a21__assume; rt = perm__remove_swap__a21__assume1
  }) = true) and
  ((to_rep1(last(perm__remove_swap__a21__assume1)) = (to_rep1(last(o4)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i1 - 1))) ->
   (to_rep((o3[k])) = to_rep((perm__remove_swap__a21__assume[k]))))) and
  ((forall k:int. ((((i1 + 1) <= k) and (k <= to_rep1(last(o4)))) ->
   (to_rep((o3[k])) = to_rep((perm__remove_swap__a21__assume[(k - 1)]))))) and
  (forall k:int. (((i1 <= k) and (k <= (to_rep1(last(o4)) - 1))) ->
  (to_rep((o3[(k + 1)])) = to_rep((perm__remove_swap__a21__assume[k])))))))))))) and
  ((perm__remove_swap__a21__assume = a211) and
  (perm__remove_swap__a21__assume1 = a212))) and (dynamic_property(1, 100,
  to_rep1(first(a212)), to_rep1(last(a212))) and
  ((forall i4:int. (((to_rep1(first(a122)) <= i4) and
   (i4 <= to_rep1(last(a122)))) -> (((i4 <  i1) ->
   (to_rep((a121[i4])) = to_rep((a[i4])))) and ((not (i4 <  i1)) ->
   (((i4 <  (i2 - 1)) -> (to_rep((a121[i4])) = to_rep((a[(i4 + 1)])))) and
   ((not (i4 <  (i2 - 1))) ->
   (to_rep((a121[i4])) = to_rep((a[(i4 + 2)]))))))))) and
  ((forall i4:int. (((to_rep1(first(a212)) <= i4) and
   (i4 <= to_rep1(last(a212)))) -> (((i4 <  i1) ->
   (to_rep((a211[i4])) = to_rep((a[i4])))) and ((not (i4 <  i1)) ->
   (((i4 <  (i2 - 1)) -> (to_rep((a211[i4])) = to_rep((a[(i4 + 1)])))) and
   ((not (i4 <  (i2 - 1))) ->
   (to_rep((a211[i4])) = to_rep((a[(i4 + 2)]))))))))) and
  (((perm__remove_swap__result1 = perm__remove_swap__result2) and
  (perm__remove_swap__result3 = perm__remove_swap__result1)) and
  ((result = perm__remove_swap__result) and
  (perm__remove_swap__result1 = 1))))))))))))) and
  ((perm__remove_swap__result4 = perm__remove_swap__result2) and
  (perm__remove_swap__result5 = perm__remove_swap__result3)))

axiom H5 : (of_int(perm__remove_swap__result4) = true)

axiom H6 : (({ elts = o23; rt = o24 } = remove({ elts = a; rt = a1 },
  i2)) and (dynamic_property(1, 100, to_rep1(first(o24)),
  to_rep1(last(o24))) and ((invariant__({ elts = o23; rt = o24 }) = true) and
  ((to_rep1(last(o24)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i2 - 1))) ->
   (to_rep((a[k])) = to_rep((o23[k]))))) and
  ((forall k:int. ((((i2 + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((o23[(k - 1)]))))) and
  (forall k:int. (((i2 <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((o23[k])))))))))))

axiom H7 : (({ elts = temp___558; rt = temp___5581 } = remove({ elts = o23;
  rt = o24 }, i1)) and (dynamic_property(1, 100, to_rep1(first(temp___5581)),
  to_rep1(last(temp___5581))) and ((invariant__({ elts = temp___558; rt =
  temp___5581 }) = true) and
  ((to_rep1(last(temp___5581)) = (to_rep1(last(o24)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i1 - 1))) ->
   (to_rep((o23[k])) = to_rep((temp___558[k]))))) and
  ((forall k:int. ((((i1 + 1) <= k) and (k <= to_rep1(last(o24)))) ->
   (to_rep((o23[k])) = to_rep((temp___558[(k - 1)]))))) and
  (forall k:int. (((i1 <= k) and (k <= (to_rep1(last(o24)) - 1))) ->
  (to_rep((o23[(k + 1)])) = to_rep((temp___558[k])))))))))))

axiom H8 : ((o27 = (i2 - 1)) and in_range3((i2 - 1)))

 (* File "perm.ads", line 2, characters 0-0 *)
goal WP_parameter_def : (invariant__({ elts = a; rt = a1 }) = true)
