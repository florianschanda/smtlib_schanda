(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((text__ref (mk_text__ref (text__content us_t)))))
(define-fun text__ref___projection ((a text__ref)) us_t (text__content a))
(define-fun dynamic_invariant2 ((temp___expr_142 us_t) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (not (= temp___skip_constant_140 true)) (dynamic_property 1 10 (first1 temp___expr_142) (last1 temp___expr_142))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 10)) (in_range3 temp___expr_136)))
(declare-const l Int)
(declare-const j Int)
(declare-const lcp__result Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 Int)
(declare-const temp___160 Int)
(declare-const temp___158 Int)
(declare-const o3 Int)
(declare-const o4 integer)
(declare-const temp___159 Int)
(declare-const o5 Int)
(declare-const o6 integer)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const o12 Int)
(declare-const temp___1581 Int)
(declare-const o13 Int)
(declare-const o14 integer)
(declare-const temp___1591 Int)
(declare-const o15 Int)
(declare-const o16 integer)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Bool)
(declare-const o22 Int)
(declare-const temp___1582 Int)
(declare-const o23 Int)
(declare-const o24 integer)
(declare-const temp___1592 Int)
(declare-const o25 Int)
(declare-const o26 integer)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 Bool)
(declare-const o32 Int)
(declare-const temp___1583 Int)
(declare-const o33 Int)
(declare-const o34 integer)
(declare-const temp___1593 Int)
(declare-const o35 Int)
(declare-const o36 integer)
(declare-const o37 Int)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const o41 Bool)
(declare-const o42 Int)
(declare-const temp___1584 Int)
(declare-const o43 Int)
(declare-const o44 integer)
(declare-const temp___1594 Int)
(declare-const o45 Int)
(declare-const o46 integer)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 Int)
(declare-const o50 Int)
(declare-const o51 Bool)
(declare-const o52 Int)
(declare-const temp___1585 Int)
(declare-const o53 Int)
(declare-const o54 integer)
(declare-const temp___1595 Int)
(declare-const o55 Int)
(declare-const o56 integer)
(declare-const o57 Int)
(declare-const o58 Int)
(declare-const o59 Int)
(declare-const o60 Int)
(declare-const o61 Bool)
(declare-const o62 Int)
(declare-const temp___1586 Int)
(declare-const o63 Int)
(declare-const o64 integer)
(declare-const temp___1596 Int)
(declare-const o65 Int)
(declare-const o66 integer)
(declare-const o67 Int)
(declare-const o68 Int)
(declare-const o69 Int)
(declare-const o70 Int)
(declare-const o71 Bool)
(declare-const o72 Int)
(declare-const temp___1587 Int)
(declare-const o73 Int)
(declare-const o74 integer)
(declare-const temp___1597 Int)
(declare-const o75 Int)
(declare-const o76 integer)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 Int)
(declare-const o80 Int)
(declare-const o81 Bool)
(declare-const o82 Int)
(declare-const temp___1588 Int)
(declare-const o83 Int)
(declare-const o84 integer)
(declare-const temp___1598 Int)
(declare-const o85 Int)
(declare-const o86 integer)
(declare-const o87 Int)
(declare-const o88 Int)
(declare-const o89 Int)
(declare-const o90 Int)
(declare-const o91 Bool)
(declare-const o92 Int)
(declare-const temp___1589 Int)
(declare-const o93 Int)
(declare-const o94 integer)
(declare-const temp___1599 Int)
(declare-const o95 Int)
(declare-const o96 integer)
(declare-const o97 Int)
(declare-const o98 Int)
(declare-const o99 Int)
(declare-const o100 Int)
(declare-const o101 Bool)
(declare-const o102 Int)
(declare-const temp___163 Int)
(declare-const temp___164 Int)
(declare-const o103 Int)
(declare-const o104 integer)
(declare-const o105 Int)
(declare-const o106 Int)
(declare-const o107 Int)
(declare-const o108 Int)
(declare-const o109 Int)
(declare-const k Int)
(declare-const temp___165 Int)
(declare-const temp___166 Int)
(declare-const o110 Int)
(declare-const o111 integer)
(declare-const o112 Int)
(declare-const o113 Int)
(declare-const o114 Int)
(declare-const o115 Int)
(declare-const result Int)
(declare-const l1 Int)
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Int)
(declare-const l2 Int)
(declare-const result6 Int)
(declare-const j2 Int)
(declare-const result7 Bool)
(declare-const result8 Bool)
(declare-const result9 Bool)
(declare-const result10 Int)
(declare-const l3 Int)
(declare-const result11 Int)
(declare-const j3 Int)
(declare-const result12 Bool)
(declare-const result13 Bool)
(declare-const result14 Bool)
(declare-const result15 Int)
(declare-const l4 Int)
(declare-const result16 Int)
(declare-const j4 Int)
(declare-const result17 Bool)
(declare-const result18 Bool)
(declare-const result19 Bool)
(declare-const result20 Int)
(declare-const l5 Int)
(declare-const result21 Int)
(declare-const j5 Int)
(declare-const result22 Bool)
(declare-const result23 Bool)
(declare-const result24 Bool)
(declare-const result25 Int)
(declare-const l6 Int)
(declare-const result26 Int)
(declare-const j6 Int)
(declare-const result27 Bool)
(declare-const result28 Bool)
(declare-const result29 Bool)
(declare-const result30 Int)
(declare-const l7 Int)
(declare-const result31 Int)
(declare-const j7 Int)
(declare-const result32 Bool)
(declare-const result33 Bool)
(declare-const result34 Bool)
(declare-const result35 Int)
(declare-const l8 Int)
(declare-const result36 Int)
(declare-const j8 Int)
(declare-const result37 Bool)
(declare-const result38 Bool)
(declare-const result39 Bool)
(declare-const result40 Int)
(declare-const l9 Int)
(declare-const result41 Int)
(declare-const j9 Int)
(declare-const result42 Bool)
(declare-const result43 Bool)
(declare-const result44 Bool)
(declare-const result45 int__ref)
(declare-const l10 Int)
(declare-const result46 int__ref)
(declare-const j10 Int)
(declare-const result47 Bool)
(declare-const result48 Bool)
(declare-const result49 Bool)
(declare-const result50 int__ref)
(declare-const l11 Int)
(declare-const l12 int__ref)
(declare-const j11 int__ref)
(declare-const l13 Int)
(declare-const j12 Int)
(declare-const l14 int__ref)
(declare-const j13 int__ref)
(declare-const l15 Int)
(declare-const j14 Int)
(declare-const l16 int__ref)
(declare-const j15 int__ref)
(declare-const l17 Int)
(declare-const j16 Int)
(declare-const l18 int__ref)
(declare-const j17 int__ref)
(declare-const l19 Int)
(declare-const j18 Int)
(declare-const l20 int__ref)
(declare-const j19 int__ref)
(declare-const l21 Int)
(declare-const j20 Int)
(declare-const l22 int__ref)
(declare-const j21 int__ref)
(declare-const l23 Int)
(declare-const j22 Int)
(declare-const l24 int__ref)
(declare-const j23 int__ref)
(declare-const l25 Int)
(declare-const j24 Int)
(declare-const l26 int__ref)
(declare-const j25 int__ref)
(declare-const l27 Int)
(declare-const j26 Int)
(declare-const l28 int__ref)
(declare-const j27 int__ref)
(declare-const l29 Int)
(declare-const j28 Int)
(declare-const l30 int__ref)
(declare-const j29 int__ref)
(declare-const l31 Int)
(declare-const j30 Int)
(declare-const result51 int__ref)
(declare-const lcp__result1 Int)
(declare-const lcp__result2 int__ref)
(declare-const lcp__result3 Int)
(declare-const l32 int__ref)
(declare-const j31 int__ref)
(declare-const lcp__result4 int__ref)
(declare-const l33 Int)
(declare-const j32 Int)
(declare-const lcp__result5 Int)
(declare-const result52 Bool)
(declare-const result53 Bool)
(declare-const result54 Bool)
(assert (dynamic_invariant2 a true false true))
(assert (in_range1 x))
(assert (in_range1 y))
(assert (and (and (<= (to_rep (first (rt a))) x) (<= x (to_rep (last (rt a))))) (and (<= (to_rep (first (rt a))) y) (<= y (to_rep (last (rt a)))))))
(assert (=> (<= 0 2147483647) (in_range2 l)))
(assert (= (mk_int__ref result) (mk_int__ref l)))
(assert (= l1 0))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j1 1))
(assert (and (= o10 (+ x l1)) (in_range1 (+ x l1))))
(assert (= result4 (ite (<= o10 (to_rep (last (rt a)))) true false)))
(assert (=> (= result4 true) (and (= o9 (+ y l1)) (in_range1 (+ y l1)))))
(assert (=> (= result4 true) (= result3 (ite (<= o9 (to_rep (last (rt a)))) true false))))
(assert (=> (not (= result4 true)) (= result3 false)))
(assert (= result3 true))
(assert (and (= temp___159 (+ y l1)) (in_range1 (+ y l1))))
(assert (and (<= (to_rep (first (rt a))) temp___159) (<= temp___159 (to_rep (last (rt a))))))
(assert (= o5 temp___159))
(assert (= o6 (select (elts a) o5)))
(assert (= o7 (to_rep o6)))
(assert (and (= temp___158 (+ x l1)) (in_range1 (+ x l1))))
(assert (not (<= (to_rep (first (rt a))) temp___158)))
(check-sat)
(exit)
