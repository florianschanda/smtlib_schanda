(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort contents_type 0)
(declare-fun contents_typeqtint (contents_type) Int)
(assert (forall ((i contents_type)) (and (<= (- 1000) (contents_typeqtint i)) (<= (contents_typeqtint i) 1000))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 1000) x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (contents_type contents_type) Bool)
(declare-const dummy contents_type)
(declare-datatypes () ((contents_type__ref (mk_contents_type__ref (contents_type__content contents_type)))))
(define-fun contents_type__ref___projection ((a contents_type__ref)) contents_type (contents_type__content a))
(define-fun to_rep ((x contents_type)) Int (contents_typeqtint x))
(declare-fun of_rep (Int) contents_type)
(assert (forall ((x contents_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x contents_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int contents_type))))))
(declare-fun slide ((Array Int contents_type) Int Int) (Array Int contents_type))
(assert (forall ((a (Array Int contents_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int contents_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int contents_type)) (a__first Int) (a__last Int) (b (Array Int contents_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int contents_type)) (b (Array Int contents_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun ordered ((Array Int contents_type) Int Int) Bool)
(declare-fun ordered__function_guard (Bool (Array Int contents_type) Int Int) Bool)
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range2 temp___expr_166)))
(assert true)
(assert (forall ((a (Array Int contents_type))) (forall ((l Int) (u Int)) (! (= (= (ordered a l u) true) (forall ((i Int)) (=> (and (<= l i) (<= i (- u 1))) (<= (to_rep (select a i)) (to_rep (select a (+ i 1))))))) :pattern ((ordered a l u))))))
(declare-fun perm ((Array Int contents_type) (Array Int contents_type)) Bool)
(declare-fun perm__function_guard (Bool (Array Int contents_type) (Array Int contents_type)) Bool)
(assert (forall ((a (Array Int contents_type)) (b (Array Int contents_type))) (! (=> (= (bool_eq a 1 100 b 1 100) true) (= (perm a b) true)) :pattern ((perm a b)))))
(declare-fun find_smallest ((Array Int contents_type) Int Int) Int)
(declare-fun find_smallest__function_guard (Int (Array Int contents_type) Int Int) Bool)
(assert (forall ((arr (Array Int contents_type))) (forall ((l Int) (u Int)) (! (=> (and (and (dynamic_invariant l true true true true) (dynamic_invariant u true true true true)) (and (and (<= 1 l) (< l u)) (<= u 100))) (let ((result (find_smallest arr l u))) (and (and (and (<= l result) (<= result u)) (forall ((x Int)) (=> (and (<= l x) (<= x u)) (<= (to_rep (select arr result)) (to_rep (select arr x)))))) (dynamic_invariant result true false true true)))) :pattern ((find_smallest arr l u))))))
(declare-sort tbase_index_typeB 0)
(declare-fun tbase_index_typeBqtint (tbase_index_typeB) Int)
(assert (forall ((i tbase_index_typeB)) (and (<= (- 128) (tbase_index_typeBqtint i)) (<= (tbase_index_typeBqtint i) 127))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tbase_index_typeB tbase_index_typeB) Bool)
(declare-const dummy2 tbase_index_typeB)
(declare-datatypes () ((tbase_index_typeB__ref (mk_tbase_index_typeB__ref (tbase_index_typeB__content tbase_index_typeB)))))
(define-fun tbase_index_typeB__ref___projection ((a tbase_index_typeB__ref)) tbase_index_typeB (tbase_index_typeB__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t18b 0)
(declare-fun t18bqtint (t18b) Int)
(assert (forall ((i t18b)) (and (<= 1 (t18bqtint i)) (<= (t18bqtint i) 99))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (t18b t18b) Bool)
(declare-const dummy3 t18b)
(declare-datatypes () ((t18b__ref (mk_t18b__ref (t18b__content t18b)))))
(define-fun t18b__ref___projection ((a t18b__ref)) t18b (t18b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 1000) 1000)) (in_range1 temp___expr_173)))
(declare-const table (Array Int contents_type))
(declare-const key Int)
(declare-const low Int)
(declare-const o Int)
(declare-const x Int)
(declare-const temp___206 Int)
(declare-const table1 (Array Int contents_type))
(declare-const result Int)
(declare-const low1 Int)
(declare-const result1 Int)
(declare-const key1 Int)
(declare-const table2 (Array Int contents_type))
(declare-const table3 (Array Int contents_type))
(declare-const key2 Int)
(declare-const low2 Int)
(assert (=> (<= 1 100) (in_range2 key)))
(assert (= (mk_int__ref result) (mk_int__ref low)))
(assert (= low1 1))
(assert (<= 1 low1))
(assert (<= low1 99))
(assert (and (= o (find_smallest table low1 100)) (and (in_range2 o) (and (and (<= low1 o) (<= o 100)) (forall ((x1 Int)) (=> (and (<= low1 x1) (<= x1 100)) (<= (to_rep (select table o)) (to_rep (select table x1)))))))))
(assert (= (mk_int__ref result1) (mk_int__ref key)))
(assert (= key1 o))
(assert (=> (not (= key1 low1)) (and (= (to_rep (select table2 low1)) (to_rep (select table key1))) (and (= (to_rep (select table2 key1)) (to_rep (select table low1))) (and (forall ((x1 Int)) (=> (and (<= 1 x1) (<= x1 100)) (=> (and (not (= x1 low1)) (not (= x1 key1))) (= (to_rep (select table2 x1)) (to_rep (select table x1)))))) (= (perm table2 table) true))))))
(assert (=> (not (not (= key1 low1))) (= table2 table)))
(assert (=> (not (not (= key1 low1))) (= table2 table1)))
(assert (and (and (forall ((x1 Int)) (=> (and (<= 1 x1) (<= x1 low2)) (<= (to_rep (select table3 x1)) (to_rep (select table3 (+ x1 1)))))) (forall ((x1 Int)) (=> (and (<= low2 x1) (<= x1 100)) (<= (to_rep (select table3 low2)) (to_rep (select table3 x1)))))) (= (perm table3 table) true)))
(assert (and (and (=> (<= 1 100) (in_range2 key2)) (=> (<= 1 99) (in_range4 low2))) (and (<= 1 low2) (<= low2 99))))
(assert (<= 1 x))
(assert (<= x low2))
(assert (and (= temp___206 (+ x 1)) (in_range3 (+ x 1))))
(assert (not (<= 1 temp___206)))
(check-sat)
(exit)
