(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort it1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range1 temp___expr_176)))
(declare-sort it2 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range2 temp___expr_183)))
(declare-sort et1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (et1 et1) Bool)
(declare-const dummy2 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant2 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range3 temp___expr_204)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun temp___1127 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1135 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1142 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1150 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1158 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1165 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1173 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1181 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1188 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1196 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1204 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1211 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___4776 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___4782 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___4778 (Array Int (Array Int et1)))) (forall ((temp___4779 Int)) (forall ((temp___4780 (Array Int et1))) (let ((temp___4777 (temp___4776 temp___4778 temp___4779 temp___4780))) (=> (dynamic_invariant1 temp___4779 true true true true) (forall ((temp___4781 Int)) (ite (= temp___4781 temp___4779) (= (select temp___4777 temp___4781) temp___4780) (= (select temp___4777 temp___4781) (select temp___4778 temp___4781))))))))))
(assert (forall ((temp___4784 (Array Int et1))) (forall ((temp___4785 Int) (temp___4786 Int)) (let ((temp___4783 (temp___4782 temp___4784 temp___4785 temp___4786))) (=> (and (dynamic_invariant temp___4785 true true true true) (dynamic_invariant2 temp___4786 true true true true)) (forall ((temp___4787 Int)) (ite (= temp___4787 temp___4785) (= (to_rep (select temp___4783 temp___4787)) temp___4786) (= (select temp___4783 temp___4787) (select temp___4784 temp___4787)))))))))
(assert (forall ((temp___1129 (Array Int (Array Int et1)))) (forall ((temp___1130 Int) (temp___1132 Int)) (forall ((temp___1131 (Array Int et1)) (temp___1133 (Array Int et1))) (let ((temp___1128 (temp___1127 temp___1129 temp___1130 temp___1131 temp___1132 temp___1133))) (=> (and (dynamic_invariant1 temp___1130 true true true true) (dynamic_invariant1 temp___1132 true true true true)) (forall ((temp___1134 Int)) (ite (= temp___1134 temp___1132) (= (select temp___1128 temp___1134) temp___1133) (ite (= temp___1134 temp___1130) (= (select temp___1128 temp___1134) temp___1131) (= (select temp___1128 temp___1134) (select temp___1129 temp___1134)))))))))))
(assert (forall ((temp___1137 (Array Int et1))) (forall ((temp___1138 Int) (temp___1139 Int)) (let ((temp___1136 (temp___1135 temp___1137 temp___1138 temp___1139))) (=> (and (dynamic_invariant temp___1138 true true true true) (dynamic_invariant2 temp___1139 true true true true)) (forall ((temp___1140 Int)) (ite (= temp___1140 temp___1138) (= (to_rep (select temp___1136 temp___1140)) temp___1139) (= (select temp___1136 temp___1140) (select temp___1137 temp___1140)))))))))
(assert (forall ((temp___1144 (Array Int et1))) (forall ((temp___1145 Int) (temp___1146 Int)) (let ((temp___1143 (temp___1142 temp___1144 temp___1145 temp___1146))) (=> (and (dynamic_invariant temp___1145 true true true true) (dynamic_invariant2 temp___1146 true true true true)) (forall ((temp___1147 Int)) (ite (= temp___1147 temp___1145) (= (to_rep (select temp___1143 temp___1147)) temp___1146) (= (select temp___1143 temp___1147) (select temp___1144 temp___1147)))))))))
(assert (forall ((temp___1152 (Array Int (Array Int et1)))) (forall ((temp___1153 Int) (temp___1155 Int)) (forall ((temp___1154 (Array Int et1)) (temp___1156 (Array Int et1))) (let ((temp___1151 (temp___1150 temp___1152 temp___1153 temp___1154 temp___1155 temp___1156))) (=> (and (dynamic_invariant1 temp___1153 true true true true) (dynamic_invariant1 temp___1155 true true true true)) (forall ((temp___1157 Int)) (ite (= temp___1157 temp___1155) (= (select temp___1151 temp___1157) temp___1156) (ite (= temp___1157 temp___1153) (= (select temp___1151 temp___1157) temp___1154) (= (select temp___1151 temp___1157) (select temp___1152 temp___1157)))))))))))
(assert (forall ((temp___1160 (Array Int et1))) (forall ((temp___1161 Int) (temp___1162 Int)) (let ((temp___1159 (temp___1158 temp___1160 temp___1161 temp___1162))) (=> (and (dynamic_invariant temp___1161 true true true true) (dynamic_invariant2 temp___1162 true true true true)) (forall ((temp___1163 Int)) (ite (= temp___1163 temp___1161) (= (to_rep (select temp___1159 temp___1163)) temp___1162) (= (select temp___1159 temp___1163) (select temp___1160 temp___1163)))))))))
(assert (forall ((temp___1167 (Array Int et1))) (forall ((temp___1168 Int) (temp___1169 Int)) (let ((temp___1166 (temp___1165 temp___1167 temp___1168 temp___1169))) (=> (and (dynamic_invariant temp___1168 true true true true) (dynamic_invariant2 temp___1169 true true true true)) (forall ((temp___1170 Int)) (ite (= temp___1170 temp___1168) (= (to_rep (select temp___1166 temp___1170)) temp___1169) (= (select temp___1166 temp___1170) (select temp___1167 temp___1170)))))))))
(assert (forall ((temp___1175 (Array Int (Array Int et1)))) (forall ((temp___1176 Int) (temp___1178 Int)) (forall ((temp___1177 (Array Int et1)) (temp___1179 (Array Int et1))) (let ((temp___1174 (temp___1173 temp___1175 temp___1176 temp___1177 temp___1178 temp___1179))) (=> (and (dynamic_invariant1 temp___1176 true true true true) (dynamic_invariant1 temp___1178 true true true true)) (forall ((temp___1180 Int)) (ite (= temp___1180 temp___1178) (= (select temp___1174 temp___1180) temp___1179) (ite (= temp___1180 temp___1176) (= (select temp___1174 temp___1180) temp___1177) (= (select temp___1174 temp___1180) (select temp___1175 temp___1180)))))))))))
(assert (forall ((temp___1183 (Array Int et1))) (forall ((temp___1184 Int) (temp___1185 Int)) (let ((temp___1182 (temp___1181 temp___1183 temp___1184 temp___1185))) (=> (and (dynamic_invariant temp___1184 true true true true) (dynamic_invariant2 temp___1185 true true true true)) (forall ((temp___1186 Int)) (ite (= temp___1186 temp___1184) (= (to_rep (select temp___1182 temp___1186)) temp___1185) (= (select temp___1182 temp___1186) (select temp___1183 temp___1186)))))))))
(assert (forall ((temp___1190 (Array Int et1))) (forall ((temp___1191 Int) (temp___1192 Int)) (let ((temp___1189 (temp___1188 temp___1190 temp___1191 temp___1192))) (=> (and (dynamic_invariant temp___1191 true true true true) (dynamic_invariant2 temp___1192 true true true true)) (forall ((temp___1193 Int)) (ite (= temp___1193 temp___1191) (= (to_rep (select temp___1189 temp___1193)) temp___1192) (= (select temp___1189 temp___1193) (select temp___1190 temp___1193)))))))))
(assert (forall ((temp___1198 (Array Int (Array Int et1)))) (forall ((temp___1199 Int) (temp___1201 Int)) (forall ((temp___1200 (Array Int et1)) (temp___1202 (Array Int et1))) (let ((temp___1197 (temp___1196 temp___1198 temp___1199 temp___1200 temp___1201 temp___1202))) (=> (and (dynamic_invariant1 temp___1199 true true true true) (dynamic_invariant1 temp___1201 true true true true)) (forall ((temp___1203 Int)) (ite (= temp___1203 temp___1201) (= (select temp___1197 temp___1203) temp___1202) (ite (= temp___1203 temp___1199) (= (select temp___1197 temp___1203) temp___1200) (= (select temp___1197 temp___1203) (select temp___1198 temp___1203)))))))))))
(assert (forall ((temp___1206 (Array Int et1))) (forall ((temp___1207 Int) (temp___1208 Int)) (let ((temp___1205 (temp___1204 temp___1206 temp___1207 temp___1208))) (=> (and (dynamic_invariant temp___1207 true true true true) (dynamic_invariant2 temp___1208 true true true true)) (forall ((temp___1209 Int)) (ite (= temp___1209 temp___1207) (= (to_rep (select temp___1205 temp___1209)) temp___1208) (= (select temp___1205 temp___1209) (select temp___1206 temp___1209)))))))))
(assert (forall ((temp___1213 (Array Int et1))) (forall ((temp___1214 Int) (temp___1215 Int)) (let ((temp___1212 (temp___1211 temp___1213 temp___1214 temp___1215))) (=> (and (dynamic_invariant temp___1214 true true true true) (dynamic_invariant2 temp___1215 true true true true)) (forall ((temp___1216 Int)) (ite (= temp___1216 temp___1214) (= (to_rep (select temp___1212 temp___1216)) temp___1215) (= (select temp___1212 temp___1216) (select temp___1213 temp___1216)))))))))
(declare-const a (Array Int (Array Int et1)))
(declare-const j_next Int)
(declare-const f Int)
(declare-const o Int)
(declare-const o1 et1)
(declare-const o2 (Array Int et1))
(declare-const o3 (Array Int (Array Int et1)))
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 (Array Int et1))
(declare-const o7 (Array Int et1))
(declare-const o8 Int)
(declare-const temp___4799 (Array Int (Array Int et1)))
(declare-const t (Array Int (Array Int et1)))
(declare-const a1 (Array Int (Array Int et1)))
(declare-const j_next1 Int)
(declare-const result Int)
(declare-const f1 Int)
(declare-const result1 Int)
(declare-const f2 Int)
(declare-const result2 (Array Int (Array Int et1)))
(declare-const a2 (Array Int (Array Int et1)))
(declare-const a3 (Array Int (Array Int et1)))
(declare-const j_next2 Int)
(declare-const f3 Int)
(declare-const t1 (Array Int (Array Int et1)))
(declare-const a4 (Array Int (Array Int et1)))
(declare-const j_next3 Int)
(declare-const f4 Int)
(declare-const t2 (Array Int (Array Int et1)))
(declare-const result3 Bool)
(define-fun f5 () int__ref (mk_int__ref f))
(assert (in_range1 i))
(assert (in_range2 j))
(assert (in_range3 e))
(assert (=> (<= 5 50) (in_range2 j_next)))
(assert (=> (<= 0 99) (in_range3 f)))
(assert (and (and (= (bool_eq1 a1 5 50 (temp___4776 t j (temp___4782 (select t j) i e)) 5 50) true) (or (and (= j 50) (= j_next1 5)) (and (< j 50) (= j_next1 (+ j 1))))) (in_range2 j_next1)))
(assert (=> (<= 5 50) (in_range2 j_next1)))
(assert (=> (= e 0) (= (mk_int__ref result) f5)))
(assert (=> (= e 0) (= f1 99)))
(assert (=> (not (= e 0)) (and (= o (- e 1)) (in_range3 (- e 1)))))
(assert (=> (not (= e 0)) (= (mk_int__ref result1) f5)))
(assert (=> (not (= e 0)) (= f2 o)))
(assert (=> (not (= e 0)) (= f1 f2)))
(assert (= (to_rep o1) f1))
(assert (= o2 (store (select a1 j_next1) i o1)))
(assert (= o3 (store a1 j_next1 o2)))
(assert (= a1 result2))
(assert (= a2 o3))
(assert (= t t1))
(assert (= f1 f3))
(assert (= j_next1 j_next2))
(assert (= a2 a3))
(assert (= t2 t))
(assert (= f4 f1))
(assert (= j_next3 j_next1))
(assert (= a4 a2))
(assert (< j 50))
(assert (=> (< 0 e) (and (= o5 (- e 1)) (in_range3 (- e 1)))))
(assert (=> (< 0 e) (and (<= 5 (+ j 1)) (<= (+ j 1) 50))))
(assert (=> (< 0 e) (= o4 (+ j 1))))
(assert (=> (< 0 e) (= o6 (select a o4))))
(assert (=> (< 0 e) (= o7 (temp___1142 o6 i o5))))
(assert (=> (< 0 e) (and (= o8 (+ j 1)) (in_range2 (+ j 1)))))
(assert (=> (< 0 e) (= temp___4799 (temp___1127 a j (temp___1135 (select a j) i e) o8 o7))))
(assert (=> (< 0 e) (= result3 (bool_eq1 a3 5 50 temp___4799 5 50))))
(assert (=> (not (< 0 e)) (= result3 false)))
(assert (not (= result3 true)))
(assert (= e 0))
(assert (not (<= 5 (+ j 1))))
(check-sat)
(exit)
