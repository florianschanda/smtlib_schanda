(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type elementtype

predicate in_range1(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : elementtype, elementtype -> bool

logic dummy : elementtype

type elementtype__ref = { elementtype__content : elementtype
}

function elementtype__ref___projection(a: elementtype__ref) : elementtype =
  (a).elementtype__content

logic to_rep : elementtype -> int

logic of_rep : int -> elementtype

axiom inversion_axiom :
  (forall x:elementtype [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:elementtype [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type indextype

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : indextype, indextype -> bool

logic dummy1 : indextype

type indextype__ref = { indextype__content : indextype
}

function indextype__ref___projection(a: indextype__ref) : indextype =
  (a).indextype__content

type map__ref = { map__content : (int,elementtype) farray
}

logic slide : (int,elementtype) farray, int, int -> (int,elementtype) farray

axiom slide_eq :
  (forall a:(int,elementtype) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,elementtype) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,elementtype) farray, int, int, (int,elementtype) farray,
  int, int -> (int,elementtype) farray

axiom concat_def :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : elementtype, int -> (int,elementtype) farray

axiom singleton_def :
  (forall v:elementtype.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,elementtype) farray, int, int,
  (int,elementtype) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,elementtype) farray. forall a__first:int.
  forall a__last:int. forall b:(int,elementtype) farray. forall b__first:int.
  forall b__last:int [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,elementtype) farray, int, int, (int,elementtype) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic u : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t1b__ref = { t1b__content : integer
}

function t1b__ref___projection(a: t1b__ref) : integer = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic a : (int,elementtype) farray

logic i : int

logic temp___160 : (int,elementtype) farray

logic temp___159 : int

logic temp___157 : (int,elementtype) farray

logic o : elementtype

logic o1 : (int,elementtype) farray

logic n : int

logic o2 : bool

logic o3 : elementtype

logic o4 : (int,elementtype) farray

logic n1 : int

logic o5 : bool

logic a1 : (int,elementtype) farray

logic result : int

logic i1 : int

logic result1 : (int,elementtype) farray

logic a2 : (int,elementtype) farray

logic a3 : (int,elementtype) farray

logic i2 : int

logic result2 : int

logic i3 : int

logic result3 : (int,elementtype) farray

logic a4 : (int,elementtype) farray

logic a5 : (int,elementtype) farray

logic i4 : int

logic a6 : (int,elementtype) farray

logic i5 : int

logic a7 : (int,elementtype) farray

logic i6 : int

logic a8 : (int,elementtype) farray

logic i7 : int

logic a9 : (int,elementtype) farray

logic i8 : int

logic a10 : (int,elementtype) farray

logic i9 : int

logic a11 : (int,elementtype) farray

logic i10 : int

logic a12 : (int,elementtype) farray

logic i11 : int

axiom H : in_range2(l)

axiom H1 : in_range2(u)

axiom H2 : (result = i)

axiom H3 : (i1 = l)

axiom H4 : (l <= i1)

axiom H5 : (i1 <= u)

axiom H6 : (to_rep(o) = 0)

axiom H7 : (o1 = (a[i1 <- o]))

axiom H8 : (result1 = a)

axiom H9 : (a2 = o1)

axiom H10 :
  ((forall n2:int. (((l <= n2) and (n2 <= i2)) -> (to_rep((a3[n2])) = 0))) and
  (forall n2:int. (((1 <= n2) and (n2 <= 100)) -> (((n2 <  l) or
  (i2 <  n2)) -> (to_rep((a3[n2])) = to_rep((a[n2])))))))

axiom H11 :
  (((forall temp___158:int. (((1 <= temp___158) and (temp___158 <= 100)) ->
    ((i2 <  temp___158) -> ((a3[temp___158]) = (a[temp___158]))))) and
  ((l <= u) -> dynamic_property(l, u, i2))) and ((l <= i2) and (i2 <= u)))

axiom H12 : ((o2 = true) <->
  (forall n2:int. (((1 <= n2) and (n2 <= 100)) -> (((n2 <  l) or
  (i2 <  n2)) -> (to_rep((a3[n2])) = to_rep((a[n2])))))))

axiom H13 : (l <= n)

axiom H14 : (n <= i2)

 (* File "loop_entry.ads", line 9, characters 0-0 *)
goal WP_parameter_def : (1 <= n)
