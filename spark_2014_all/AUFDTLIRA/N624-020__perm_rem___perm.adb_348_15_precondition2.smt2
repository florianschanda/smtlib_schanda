(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 100))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(define-fun dynamic_invariant ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property 1 100 (first1 temp___expr_173) (last1 temp___expr_173))))
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range3 temp___expr_166)))
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant a true true true true) (dynamic_invariant1 i true true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant result true false true true)))) :pattern ((remove a i))))))
(declare-fun remove_swap (us_t Int Int) Int)
(declare-fun remove_swap__function_guard (Int us_t Int Int) Bool)
(declare-sort true_bool 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (true_bool true_bool) Bool)
(declare-const dummy4 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 1)) (in_range4 temp___expr_159)))
(assert (forall ((a us_t)) (forall ((i1 Int) (i2 Int)) (! (=> (and (and (and (dynamic_invariant a true true true true) (dynamic_invariant1 i1 true true true true)) (dynamic_invariant1 i2 true true true true)) (and (= (invariant__ a) true) (and (and (<= (first1 a) i1) (<= i1 (last1 a))) (and (and (<= (first1 a) i2) (<= i2 (last1 a))) (< i1 i2))))) (let ((result (remove_swap a i1 i2))) (and (=> (= (distinct result 0) true) (= (let ((temp___185 (remove (remove a i2) i1))) (let ((temp___184 (remove (remove a i1) (- i2 1)))) (bool_eq (to_array temp___184) (first1 temp___184) (last1 temp___184) (to_array temp___185) (first1 temp___185) (last1 temp___185)))) true)) (dynamic_invariant2 result true false true true)))) :pattern ((remove_swap a i1 i2))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-fun perm_symmetric (us_t us_t) Int)
(declare-fun perm_symmetric__function_guard (Int us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant a true true true true) (dynamic_invariant b true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (is_perm a b) true)))) (let ((result (perm_symmetric a b))) (and (=> (= (distinct result 0) true) (= (is_perm b a) true)) (dynamic_invariant2 result true false true true)))) :pattern ((perm_symmetric a b)))))
(declare-fun get_witness (us_t us_t Int) Int)
(declare-fun get_witness__function_guard (Int us_t us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (forall ((ia Int)) (! (=> (and (and (and (dynamic_invariant a true true true true) (dynamic_invariant b true true true true)) (dynamic_invariant1 ia true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) (let ((result (get_witness a b ia))) (and (and (and (<= (first1 b) result) (<= result (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) result))) (= (is_perm (remove a ia) (remove b result)) true))) (dynamic_invariant1 result true false true true)))) :pattern ((get_witness a b ia))))))
(declare-fun shift_perm_l (us_t us_t us_t) Int)
(declare-fun shift_perm_l__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant a true true true true) (dynamic_invariant b true true true true)) (dynamic_invariant c true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (invariant__ c) true) (and (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array c) (first1 c) (last1 c)) true) (= (is_perm a b) true)))))) (let ((result (shift_perm_l a b c))) (and (=> (= (distinct result 0) true) (= (is_perm c b) true)) (dynamic_invariant2 result true false true true)))) :pattern ((shift_perm_l a b c)))))
(declare-fun extended_perm (us_t us_t) Int)
(declare-fun extended_perm__function_guard (Int us_t us_t) Bool)
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ia Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const ib Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const ib2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const aa us_t)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const bb us_t)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const bb2 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(assert (= ib2 (get_witness a b ia)))
(assert (= aa (remove a ia)))
(assert (= bb (remove b ib)))
(assert (= bb2 (remove b ib2)))
(declare-const h Int)
(declare-const ia2 Int)
(declare-const perm__remove_perm__result Int)
(declare-const o Int)
(declare-const perm__remove_perm__ib2__assume Int)
(declare-const perm__remove_perm__aa__assume (Array Int natural))
(declare-const perm__remove_perm__aa__assume1 t)
(declare-const perm__remove_perm__bb__assume (Array Int natural))
(declare-const perm__remove_perm__bb__assume1 t)
(declare-const perm__remove_perm__bb2__assume (Array Int natural))
(declare-const perm__remove_perm__bb2__assume1 t)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const perm__remove_perm__result1 Int)
(declare-const result Int)
(declare-const h1 Int)
(declare-const perm__remove_perm__result2 Int)
(declare-const result1 Int)
(declare-const h2 Int)
(declare-const result2 Int)
(declare-const h3 Int)
(declare-const result3 Int)
(declare-const ia21 Int)
(define-fun perm__remove_perm__bb2__assume2 () us_t (mk___t perm__remove_perm__bb2__assume perm__remove_perm__bb2__assume1))
(define-fun perm__remove_perm__bb__assume2 () us_t (mk___t perm__remove_perm__bb__assume perm__remove_perm__bb__assume1))
(define-fun perm__remove_perm__aa__assume2 () us_t (mk___t perm__remove_perm__aa__assume perm__remove_perm__aa__assume1))
(assert (dynamic_invariant a true false true true))
(assert (dynamic_invariant b true false true true))
(assert (in_range3 ia))
(assert (in_range3 ib))
(assert (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (to_rep1 (first (rt a))) ia) (<= ia (to_rep1 (last (rt a))))) (and (and (<= (to_rep1 (first (rt b))) ib) (<= ib (to_rep1 (last (rt b))))) (and (= (is_perm a b) true) (= (to_rep (select (elts a) ia)) (to_rep (select (elts b) ib)))))))))
(assert (and (= o (extended_perm a b)) (and (in_range4 o) (=> (= (distinct o 0) true) (forall ((ia1 Int)) (=> (and (<= (to_rep1 (first (rt a))) ia1) (<= ia1 (to_rep1 (last (rt a))))) (exists ((ib1 Int)) (and (and (<= (to_rep1 (first (rt b))) ib1) (<= ib1 (to_rep1 (last (rt b))))) (and (= (to_rep (select (elts a) ia1)) (to_rep (select (elts b) ib1))) (= (is_perm (remove a ia1) (remove b ib1)) true))))))))))
(assert (= (mk_int__ref result) (mk_int__ref h)))
(assert (= h1 o))
(assert (in_range4 h1))
(assert (and (= perm__remove_perm__ib2__assume (get_witness a b ia)) (and (in_range3 perm__remove_perm__ib2__assume) (and (and (<= (to_rep1 (first (rt b))) perm__remove_perm__ib2__assume) (<= perm__remove_perm__ib2__assume (to_rep1 (last (rt b))))) (and (= (to_rep (select (elts a) ia)) (to_rep (select (elts b) perm__remove_perm__ib2__assume))) (= (is_perm (remove a ia) (remove b perm__remove_perm__ib2__assume)) true))))))
(assert (= perm__remove_perm__ib2__assume ib2))
(assert (in_range3 ib2))
(assert (and (= perm__remove_perm__aa__assume2 (remove a ia)) (and (dynamic_invariant perm__remove_perm__aa__assume2 true false true true) (and (= (invariant__ perm__remove_perm__aa__assume2) true) (and (= (to_rep1 (last perm__remove_perm__aa__assume1)) (- (to_rep1 (last (rt a))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ia 1))) (= (to_rep (select (elts a) k)) (to_rep (select perm__remove_perm__aa__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ ia 1) k) (<= k (to_rep1 (last (rt a))))) (= (to_rep (select (elts a) k)) (to_rep (select perm__remove_perm__aa__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= ia k) (<= k (- (to_rep1 (last (rt a))) 1))) (= (to_rep (select (elts a) (+ k 1))) (to_rep (select perm__remove_perm__aa__assume k))))))))))))
(assert (= perm__remove_perm__aa__assume2 aa))
(assert (dynamic_invariant aa true false true true))
(assert (and (= perm__remove_perm__bb__assume2 (remove b ib)) (and (dynamic_invariant perm__remove_perm__bb__assume2 true false true true) (and (= (invariant__ perm__remove_perm__bb__assume2) true) (and (= (to_rep1 (last perm__remove_perm__bb__assume1)) (- (to_rep1 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ib 1))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ ib 1) k) (<= k (to_rep1 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= ib k) (<= k (- (to_rep1 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select perm__remove_perm__bb__assume k))))))))))))
(assert (= perm__remove_perm__bb__assume2 bb))
(assert (dynamic_invariant bb true false true true))
(assert (and (= perm__remove_perm__bb2__assume2 (remove b ib2)) (and (dynamic_invariant perm__remove_perm__bb2__assume2 true false true true) (and (= (invariant__ perm__remove_perm__bb2__assume2) true) (and (= (to_rep1 (last perm__remove_perm__bb2__assume1)) (- (to_rep1 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ib2 1))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb2__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ ib2 1) k) (<= k (to_rep1 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select perm__remove_perm__bb2__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= ib2 k) (<= k (- (to_rep1 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select perm__remove_perm__bb2__assume k))))))))))))
(assert (= perm__remove_perm__bb2__assume2 bb2))
(assert (dynamic_invariant bb2 true false true true))
(assert (=> (<= 1 100) (in_range3 ia2)))
(assert (not (= ib ib2)))
(assert (= perm__remove_perm__result2 perm__remove_perm__result))
(assert (= perm__remove_perm__result2 perm__remove_perm__result1))
(assert (and (= o1 (perm_symmetric aa bb2)) (and (in_range4 o1) (=> (= (distinct o1 0) true) (= (is_perm bb2 aa) true)))))
(assert (= h1 result1))
(assert (= h2 o1))
(assert (= (distinct h2 0) true))
(assert (and (= o2 (extended_perm bb2 aa)) (and (in_range4 o2) (=> (= (distinct o2 0) true) (forall ((ia3 Int)) (=> (and (<= (to_rep1 (first (rt bb2))) ia3) (<= ia3 (to_rep1 (last (rt bb2))))) (exists ((ib3 Int)) (and (and (<= (to_rep1 (first (rt aa))) ib3) (<= ib3 (to_rep1 (last (rt aa))))) (and (= (to_rep (select (elts bb2) ia3)) (to_rep (select (elts aa) ib3))) (= (is_perm (remove bb2 ia3) (remove aa ib3)) true))))))))))
(assert (= h2 result2))
(assert (= h3 o2))
(assert (= (distinct h3 0) true))
(assert (< ib ib2))
(assert (and (= o3 (get_witness bb2 aa ib)) (and (in_range3 o3) (and (and (<= (to_rep1 (first (rt aa))) o3) (<= o3 (to_rep1 (last (rt aa))))) (and (= (to_rep (select (elts bb2) ib)) (to_rep (select (elts aa) o3))) (= (is_perm (remove bb2 ib) (remove aa o3)) true))))))
(assert (= (mk_int__ref result3) (mk_int__ref ia2)))
(assert (= ia21 o3))
(assert (not (= (invariant__ b) true)))
(check-sat)
(exit)
