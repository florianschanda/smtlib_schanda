(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : index -> int

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,index) farray
}

logic slide : (int,index) farray, int, int -> (int,index) farray

axiom slide_eq :
  (forall a:(int,index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,index) farray, int, int, (int,index) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,index) farray. forall a__first:int. forall a__last:int.
  forall b:(int,index) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic consistent : (int,index) farray, int -> bool

logic consistent__function_guard : bool, (int,index) farray, int -> prop

axiom consistent__post_axiom : true

axiom consistent__def_axiom :
  (forall b:(int,index) farray.
  (forall k:int [consistent(b, k)]. ((consistent(b, k) = true) <->
  (forall i:int. (((1 <= i) and (i <= k)) ->
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (((not (to_rep((b[i])) = to_rep((b[j])))) and
  (not ((i - j) = (to_rep((b[i])) - to_rep((b[j])))))) and
  (not ((i - j) = (to_rep((b[j])) - to_rep((b[i])))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c : (int,index) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "queen.ads", line 27, characters 0-0 *)
goal WP_parameter_def :
  (forall b:(int,index) farray. forall done__:bool. forall o:int.
  forall j:int. forall o1:int. forall o2:index. forall o3:int.
  forall b1:(int,index) farray. forall done__1:bool. forall result:bool.
  forall result1:bool. forall done__2:bool. forall b2:(int,index) farray.
  forall done__3:bool. forall b3:(int,index) farray. forall done__4:bool.
  forall b4:(int,index) farray. forall done__5:bool.
  forall b5:(int,index) farray. forall done__6:bool.
  forall b6:(int,index) farray. forall done__7:bool. (in_range1(i) ->
  ((((not (done__ = true)) and
  (forall j1:int. (((1 <= j1) and (j1 <= i)) ->
  (to_rep((c[j1])) = to_rep((b[j1])))))) and ((1 <  i) -> (consistent(b,
  (i - 1)) = true))) -> (((((((done__2 = done__4) and (b2 = b3)) and
  ((done__5 = done__2) and (b4 = b2))) and (((result = consistent(b, i)) and
  ((result = true) <->
  (forall i1:int. (((1 <= i1) and (i1 <= i)) ->
  (forall j1:int. (((1 <= j1) and (j1 <= (i1 - 1))) ->
  (((not (to_rep((b[i1])) = to_rep((b[j1])))) and
  (not ((i1 - j1) = (to_rep((b[i1])) - to_rep((b[j1])))))) and
  (not ((i1 - j1) = (to_rep((b[j1])) - to_rep((b[i1])))))))))))) and
  ((result = true) and (((8 = i) and ((({ bool__content = result1 } = {
  bool__content = done__ }) and (done__2 = of_int(1))) and ((b2 = b) and
  (b2 = b1)))) or ((not (8 = i)) and ((((o = (i + 1)) and
  in_range1((i + 1))) and ((((done__3 = true) and (consistent(b2,
  8) = true)) or ((not (done__3 = true)) and (not (consistent(c,
  8) = true)))) and
  (forall j1:int. (((1 <= j1) and (j1 <= (o - 1))) ->
  (to_rep((b2[j1])) = to_rep((b[j1]))))))) and (done__2 = done__3))))))) or
  ((((result = consistent(b, i)) and ((result = true) <->
  (forall i1:int. (((1 <= i1) and (i1 <= i)) ->
  (forall j1:int. (((1 <= j1) and (j1 <= (i1 - 1))) ->
  (((not (to_rep((b[i1])) = to_rep((b[j1])))) and
  (not ((i1 - j1) = (to_rep((b[i1])) - to_rep((b[j1])))))) and
  (not ((i1 - j1) = (to_rep((b[j1])) - to_rep((b[i1])))))))))))) and
  ((not (result = true)) and (((not (consistent(c, i) = true)) and
  (not (forall j1:int. (((i <= j1) and (j1 <= 8)) -> (consistent(c,
       j1) = true))))) and
  (((done__2 = done__) and (b2 = b)) and ((done__2 = done__1) and
  (b2 = b1)))))) and (((done__2 = done__4) and (b2 = b3)) and
  ((done__5 = done__2) and (b4 = b2))))) and ((({ bool__content = done__6
  } = { bool__content = done__4 }) and ({ map__content = b5 } = {
  map__content = b3 })) and ((done__7 = done__5) and (b6 = b4)))) ->
  (((1 <= j) and (j <= i)) -> ((((((1 <= j) and (j <= 8)) and (o1 = j)) and
  (o2 = (b[o1]))) and (o3 = to_rep(o2))) -> (1 <= j)))))))
