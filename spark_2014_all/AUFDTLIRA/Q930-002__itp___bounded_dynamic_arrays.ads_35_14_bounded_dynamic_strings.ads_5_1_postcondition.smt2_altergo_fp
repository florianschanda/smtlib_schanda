(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

type list__ref = { list__content : us_t
}

function list__ref___projection(a: list__ref) : us_t = (a).list__content

type natural_index

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural_index, natural_index -> bool

logic dummy5 : natural_index

type natural_index__ref = { natural_index__content : natural_index
}

function natural_index__ref___projection(a: natural_index__ref) : natural_index =
  (a).natural_index__content

logic to_rep2 : natural_index -> int

logic of_rep2 : int -> natural_index

axiom inversion_axiom2 :
  (forall x:natural_index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:natural_index [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t50s__ref = { t50s__content : integer
}

function t50s__ref___projection(a: t50s__ref) : integer = (a).t50s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy7 : (int,character) farray

logic dummy8 : t1

type t51s__ref = { t51s__content : us_t1
}

function t51s__ref___projection(a: t51s__ref) : us_t1 = (a).t51s__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy9 : integer

type t48s__ref = { t48s__content : integer
}

function t48s__ref___projection(a: t48s__ref) : integer = (a).t48s__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq8 : us_t2, us_t2 -> bool

logic dummy10 : (int,character) farray

logic dummy11 : t2

type t49s__ref = { t49s__content : us_t2
}

function t49s__ref___projection(a: t49s__ref) : us_t2 = (a).t49s__content

type us_split_discrs = { rec__bounded_dynamic_strings__sequence__capacity :
natural_index
}

function us_split_discrs___projection(a: us_split_discrs) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__bounded_dynamic_strings__sequence__current_length : natural_index;
rec__bounded_dynamic_strings__sequence__content : us_t2
}

function us_split_fields_Current_Length__projection(a: us_split_fields) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__current_length

function us_split_fields_Content__projection(a: us_split_fields) : us_t2 =
  (a).rec__bounded_dynamic_strings__sequence__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  ((((to_rep2(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = to_rep2(((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (bool_eq11(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__content,
  ((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = true))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = to_rep2(((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (bool_eq11(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__content,
  ((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = true)))) ->
  (bool_eq12(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural_index. forall a1:natural_index.
  forall a2:(int,character) farray. forall a3:t2. (0 <= object__size3({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity = a
  }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = a1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = a2; rt2 = a3 }
  } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural_index. forall a1:natural_index.
  forall a2:(int,character) farray. forall a3:t2. (0 <= object__alignment3({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity = a
  }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = a1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = a2; rt2 = a3 }
  } })))

logic bounded_dynamic_strings__sequence__capacity__first__bit : int

logic bounded_dynamic_strings__sequence__capacity__last__bit : int

logic bounded_dynamic_strings__sequence__capacity__position : int

axiom bounded_dynamic_strings__sequence__capacity__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__first__bit)

axiom bounded_dynamic_strings__sequence__capacity__last__bit_axiom :
  (bounded_dynamic_strings__sequence__capacity__first__bit <  bounded_dynamic_strings__sequence__capacity__last__bit)

axiom bounded_dynamic_strings__sequence__capacity__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__position)

logic bounded_dynamic_strings__sequence__current_length__first__bit : int

logic bounded_dynamic_strings__sequence__current_length__last__bit : int

logic bounded_dynamic_strings__sequence__current_length__position : int

axiom bounded_dynamic_strings__sequence__current_length__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__first__bit)

axiom bounded_dynamic_strings__sequence__current_length__last__bit_axiom :
  (bounded_dynamic_strings__sequence__current_length__first__bit <  bounded_dynamic_strings__sequence__current_length__last__bit)

axiom bounded_dynamic_strings__sequence__current_length__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__position)

logic bounded_dynamic_strings__sequence__content__first__bit : int

logic bounded_dynamic_strings__sequence__content__last__bit : int

logic bounded_dynamic_strings__sequence__content__position : int

axiom bounded_dynamic_strings__sequence__content__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__first__bit)

axiom bounded_dynamic_strings__sequence__content__last__bit_axiom :
  (bounded_dynamic_strings__sequence__content__first__bit <  bounded_dynamic_strings__sequence__content__last__bit)

axiom bounded_dynamic_strings__sequence__content__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy12 : natural_index

logic dummy13 : natural_index

logic dummy14 : (int,character) farray

logic dummy15 : t2

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length3 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall this:natural_index. forall this1:natural_index.
  forall this2:(int,character) farray. forall this3:t2 [length3({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })]. ((((0 <= to_rep2(this1)) and
  (to_rep2(this1) <= to_rep2(this))) and (dynamic_property4(1, to_rep2(this),
  to_rep1(first4(this3)), to_rep1(last4(this3))) and
  ((to_rep1(first4(this3)) = 1) and
  (to_rep1(last4(this3)) = to_rep2(this))))) -> in_range4(length3({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }))))

axiom length__def_axiom :
  (forall this:natural_index. forall this1:natural_index.
  forall this2:(int,character) farray. forall this3:t2 [length3({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })]. ((((0 <= to_rep2(this1)) and
  (to_rep2(this1) <= to_rep2(this))) and (dynamic_property4(1, to_rep2(this),
  to_rep1(first4(this3)), to_rep1(last4(this3))) and
  ((to_rep1(first4(this3)) = 1) and
  (to_rep1(last4(this3)) = to_rep2(this))))) -> (length3({ us_split_discrs1 =
  { rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }) = to_rep2(this1))))

logic value : us_rep -> us_t

logic value__function_guard : us_t, us_rep -> prop

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy16 : integer

type t59s__ref = { t59s__content : integer
}

function t59s__ref___projection(a: t59s__ref) : integer = (a).t59s__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length4 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length4(a)]. (((first7(a) <= last7(a)) ->
  (length4(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length4(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq14(x: us_t3, y: us_t3) : bool = bool_eq4((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq11 : us_t3, us_t3 -> bool

logic dummy17 : (int,character) farray

logic dummy18 : t3

type t60s__ref = { t60s__content : us_t3
}

function t60s__ref___projection(a: t60s__ref) : us_t3 = (a).t60s__content

axiom value__post_axiom :
  (forall this:natural_index. forall this1:natural_index.
  forall this2:(int,character) farray. forall this3:t2 [value({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })]. ((((0 <= to_rep2(this1)) and
  (to_rep2(this1) <= to_rep2(this))) and (dynamic_property4(1, to_rep2(this),
  to_rep1(first4(this3)), to_rep1(last4(this3))) and
  ((to_rep1(first4(this3)) = 1) and
  (to_rep1(last4(this3)) = to_rep2(this))))) -> (((((length(value({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })) = length3({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })) and (to_rep1(first((value({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })).rt)) = 1)) and (to_rep1(last((value({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })).rt)) = length3({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }))) and ((0 <  length3({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })) <-> (not (empty({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }) = true)))) and dynamic_property(1, 2147483647,
  to_rep1(first((value({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })).rt)), to_rep1(last((value({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })).rt))))))

axiom value__def_axiom :
  (forall this:natural_index. forall this1:natural_index.
  forall this2:(int,character) farray. forall this3:t2 [value({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })]. ((((0 <= to_rep2(this1)) and
  (to_rep2(this1) <= to_rep2(this))) and (dynamic_property4(1, to_rep2(this),
  to_rep1(first4(this3)), to_rep1(last4(this3))) and
  ((to_rep1(first4(this3)) = 1) and
  (to_rep1(last4(this3)) = to_rep2(this))))) -> (value({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }) = { elts = this2; rt = mk(to_rep1(first6(mk3(1,
  to_rep2(this1)))), to_rep1(last6(mk3(1, to_rep2(this1))))) })))

logic capacity : int

logic attr__ATTRIBUTE_ADDRESS : int

logic content : (int,character) farray

logic content1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy19 : integer

type tT87bP1__ref = { tT87bP1__content : integer
}

function tT87bP1__ref___projection(a: tT87bP1__ref) : integer =
  (a).tT87bP1__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length5 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length5(a)]. (((first9(a) <= last9(a)) ->
  (length5(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length5(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq16(x: us_t4, y: us_t4) : bool = bool_eq4((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq13 : us_t4, us_t4 -> bool

logic dummy20 : (int,character) farray

logic dummy21 : t4

type t87b__ref = { t87b__content : us_t4
}

function t87b__ref___projection(a: t87b__ref) : us_t4 = (a).t87b__content

type us_split_fields2 = {
rec__bounded_dynamic_strings__sequence__current_length1 : natural_index;
rec__bounded_dynamic_strings__sequence__content1 : us_t4
}

function us_split_fields_Current_Length__3__projection(a: us_split_fields2) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__current_length1

function us_split_fields_Content__3__projection(a: us_split_fields2) : us_t4 =
  (a).rec__bounded_dynamic_strings__sequence__content1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___5__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___6__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length =
  ((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__current_length1;
  rec__bounded_dynamic_strings__sequence__content =
  of_array2(to_array4(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1),
  first9(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1),
  last9(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1))
  } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 =
  ((r).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length;
  rec__bounded_dynamic_strings__sequence__content1 =
  of_array4(to_array2(((r).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  first5(((r).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  last5(((r).us_split_fields1).rec__bounded_dynamic_strings__sequence__content))
  } }

logic bool_eq17 : us_rep1, us_rep1 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq17(a, b)].
  ((((to_rep2(((a).us_split_discrs2).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs2).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__current_length1) = to_rep2(((b).us_split_fields3).rec__bounded_dynamic_strings__sequence__current_length1)) and
  (bool_eq16(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1,
  ((b).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1) = true))) ->
  (bool_eq17(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs2).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs2).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__current_length1) = to_rep2(((b).us_split_fields3).rec__bounded_dynamic_strings__sequence__current_length1)) and
  (bool_eq16(((a).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1,
  ((b).us_split_fields3).rec__bounded_dynamic_strings__sequence__content1) = true)))) ->
  (bool_eq17(a, b) = false))))

predicate in_range5(rec__bounded_dynamic_strings__sequence__capacity1: int,
  a: us_rep) =
  (rec__bounded_dynamic_strings__sequence__capacity1 = to_rep2(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))

logic value__size6 : int

logic object__size6 : us_rep1 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep1 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:natural_index. forall a1:natural_index.
  forall a2:(int,character) farray. forall a3:t4. (0 <= object__size6({
  us_split_discrs2 = { rec__bounded_dynamic_strings__sequence__capacity = a
  }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = a1;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = a2; rt4 = a3 }
  } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:natural_index. forall a1:natural_index.
  forall a2:(int,character) farray. forall a3:t4. (0 <= object__alignment6({
  us_split_discrs2 = { rec__bounded_dynamic_strings__sequence__capacity = a
  }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = a1;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = a2; rt4 = a3 }
  } })))

logic bounded_dynamic_strings__sequence__capacity__first__bit1 : int

logic bounded_dynamic_strings__sequence__capacity__last__bit1 : int

logic bounded_dynamic_strings__sequence__capacity__position1 : int

axiom bounded_dynamic_strings__sequence__capacity__first__bit_axiom1 :
  (0 <= bounded_dynamic_strings__sequence__capacity__first__bit1)

axiom bounded_dynamic_strings__sequence__capacity__last__bit_axiom1 :
  (bounded_dynamic_strings__sequence__capacity__first__bit1 <  bounded_dynamic_strings__sequence__capacity__last__bit1)

axiom bounded_dynamic_strings__sequence__capacity__position_axiom1 :
  (0 <= bounded_dynamic_strings__sequence__capacity__position1)

logic bounded_dynamic_strings__sequence__current_length__first__bit1 : int

logic bounded_dynamic_strings__sequence__current_length__last__bit1 : int

logic bounded_dynamic_strings__sequence__current_length__position1 : int

axiom bounded_dynamic_strings__sequence__current_length__first__bit_axiom1 :
  (0 <= bounded_dynamic_strings__sequence__current_length__first__bit1)

axiom bounded_dynamic_strings__sequence__current_length__last__bit_axiom1 :
  (bounded_dynamic_strings__sequence__current_length__first__bit1 <  bounded_dynamic_strings__sequence__current_length__last__bit1)

axiom bounded_dynamic_strings__sequence__current_length__position_axiom1 :
  (0 <= bounded_dynamic_strings__sequence__current_length__position1)

logic bounded_dynamic_strings__sequence__content__first__bit1 : int

logic bounded_dynamic_strings__sequence__content__last__bit1 : int

logic bounded_dynamic_strings__sequence__content__position1 : int

axiom bounded_dynamic_strings__sequence__content__first__bit_axiom1 :
  (0 <= bounded_dynamic_strings__sequence__content__first__bit1)

axiom bounded_dynamic_strings__sequence__content__last__bit_axiom1 :
  (bounded_dynamic_strings__sequence__content__first__bit1 <  bounded_dynamic_strings__sequence__content__last__bit1)

axiom bounded_dynamic_strings__sequence__content__position_axiom1 :
  (0 <= bounded_dynamic_strings__sequence__content__position1)

logic user_eq14 : us_rep1, us_rep1 -> bool

logic dummy22 : natural_index

logic dummy23 : natural_index

logic dummy24 : (int,character) farray

logic dummy25 : t4

type tresultS__ref = { tresultS__content : us_rep1
}

function tresultS__ref___2__projection(a: tresultS__ref) : us_rep1 =
  (a).tresultS__content

logic temp___526 : int, int, int -> us_t1

logic result____split_discrs : natural_index

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r88b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property9(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : integer, integer -> bool

logic dummy26 : integer

type t89b__ref = { t89b__content : integer
}

function t89b__ref___projection(a: t89b__ref) : integer = (a).t89b__content

type t5

logic first10 : t5 -> integer

logic last10 : t5 -> integer

logic mk5 : int, int -> t5

axiom mk_def5 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first10(mk5(f, l))) = f) and (to_rep1(last10(mk5(f, l))) = l)))))

predicate dynamic_property10(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property9(range_first, range_last, low) and
  dynamic_property9(range_first, range_last, high)))))

type us_t5 = { elts5 : (int,character) farray; rt5 : t5
}

function to_array5(a: us_t5) : (int,character) farray = (a).elts5

function of_array5(a: (int,character) farray, f: int, l: int) : us_t5 = {
  elts5 = a; rt5 = mk5(f, l) }

function first11(a: us_t5) : int = to_rep1(first10((a).rt5))

function last11(a: us_t5) : int = to_rep1(last10((a).rt5))

logic length6 : us_t5 -> int

axiom length_def5 :
  (forall a:us_t5 [length6(a)]. (((first11(a) <= last11(a)) ->
  (length6(a) = ((last11(a) - first11(a)) + 1))) and
  ((not (first11(a) <= last11(a))) -> (length6(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,character) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,character) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,character) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,character) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,character) farray. (0 <= object__alignment7(a)))

function bool_eq19(x: us_t5, y: us_t5) : bool = bool_eq4((x).elts5,
  to_rep1(first10((x).rt5)), to_rep1(last10((x).rt5)), (y).elts5,
  to_rep1(first10((y).rt5)), to_rep1(last10((y).rt5)))

logic user_eq16 : us_t5, us_t5 -> bool

logic dummy27 : (int,character) farray

logic dummy28 : t5

type t90b__ref = { t90b__content : us_t5
}

function t90b__ref___projection(a: t90b__ref) : us_t5 = (a).t90b__content

type t6

logic first12 : t6 -> integer

logic last12 : t6 -> integer

logic mk6 : int, int -> t6

axiom mk_def6 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first12(mk6(f, l))) = f) and (to_rep1(last12(mk6(f, l))) = l)))))

predicate dynamic_property11(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t6 = { elts6 : (int,character) farray; rt6 : t6
}

function to_array6(a: us_t6) : (int,character) farray = (a).elts6

function of_array6(a: (int,character) farray, f: int, l: int) : us_t6 = {
  elts6 = a; rt6 = mk6(f, l) }

function first13(a: us_t6) : int = to_rep1(first12((a).rt6))

function last13(a: us_t6) : int = to_rep1(last12((a).rt6))

logic length7 : us_t6 -> int

axiom length_def6 :
  (forall a:us_t6 [length7(a)]. (((first13(a) <= last13(a)) ->
  (length7(a) = ((last13(a) - first13(a)) + 1))) and
  ((not (first13(a) <= last13(a))) -> (length7(a) = 0))))

logic value__size8 : int

logic object__size8 : (int,character) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,character) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,character) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,character) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__component__size6(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,character) farray. (0 <= object__alignment8(a)))

function bool_eq20(x: us_t6, y: us_t6) : bool = bool_eq4((x).elts6,
  to_rep1(first12((x).rt6)), to_rep1(last12((x).rt6)), (y).elts6,
  to_rep1(first12((y).rt6)), to_rep1(last12((y).rt6)))

logic user_eq17 : us_t6, us_t6 -> bool

logic dummy29 : (int,character) farray

logic dummy30 : t6

logic to_string : us_image -> us_t6

logic from_string : us_t6 -> us_image

type string__ref = { string__content : us_t6
}

function string__ref___projection(a: string__ref) : us_t6 =
  (a).string__content

axiom empty__post_axiom :
  (forall this:natural_index. forall this1:natural_index.
  forall this2:(int,character) farray. forall this3:t2 [empty({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })]. ((((0 <= to_rep2(this1)) and
  (to_rep2(this1) <= to_rep2(this))) and (dynamic_property4(1, to_rep2(this),
  to_rep1(first4(this3)), to_rep1(last4(this3))) and
  ((to_rep1(first4(this3)) = 1) and
  (to_rep1(last4(this3)) = to_rep2(this))))) -> ((empty({ us_split_discrs1 =
  { rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }) = true) <-> (length3({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }) = 0))))

axiom empty__def_axiom :
  (forall this:natural_index. forall this1:natural_index.
  forall this2:(int,character) farray. forall this3:t2 [empty({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  this }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } })]. ((empty({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = this };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = this1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = this2; rt2 =
  this3 } } }) = true) <-> (to_rep2(this1) = 0)))

axiom def_axiom :
  (forall temp___528:int. forall temp___529:int. forall temp___530:int.
  (in_range2(temp___528) -> ((dynamic_property11(1, 2147483647, temp___529,
  temp___530) -> ((to_rep1(first2((temp___526(temp___528, temp___529,
  temp___530)).rt1)) = temp___529) and (to_rep1(last2((temp___526(temp___528,
  temp___529, temp___530)).rt1)) = temp___530))) and
  (forall temp___531:int. (to_rep(((temp___526(temp___528, temp___529,
  temp___530)).elts1[temp___531])) = temp___528)))))

 (* File "bounded_dynamic_arrays.ads", line 210, characters 0-0 *)
goal WP_parameter_def :
  (forall result____split_fields:natural_index.
  forall result____split_fields1:(int,character) farray.
  forall result____split_fields2:t4.
  forall bounded_dynamic_strings__instance__result:natural_index.
  forall bounded_dynamic_strings__instance__result1:natural_index.
  forall bounded_dynamic_strings__instance__result2:(int,character) farray.
  forall bounded_dynamic_strings__instance__result3:t2. forall us:int.
  forall o:int. forall o1:natural_index. forall o2:natural_index.
  forall o3:(int,character) farray. forall o4:t4.
  forall temp___948:natural_index. forall temp___9481:natural_index.
  forall temp___9482:(int,character) farray. forall temp___9483:t4.
  forall temp___949:natural_index. forall temp___9491:natural_index.
  forall temp___9492:(int,character) farray. forall temp___9493:t4.
  forall temp___950:(int,character) farray. forall temp___9501:t5.
  forall o5:(int,character) farray. forall temp___953:(int,character) farray.
  forall temp___9531:t5. forall temp___955:(int,character) farray.
  forall temp___9551:t5. forall o6:(int,character) farray. forall o7:t4.
  forall o8:natural_index. forall o9:(int,character) farray. forall o10:t4.
  forall temp___958:natural_index. forall temp___9581:natural_index.
  forall temp___9582:(int,character) farray. forall temp___9583:t4.
  forall temp___959:natural_index. forall temp___9591:natural_index.
  forall temp___9592:(int,character) farray. forall temp___9593:t4.
  forall result:natural_index. forall result1:(int,character) farray.
  forall result2:t4. forall result____split_fields3:us_split_fields2.
  forall result3:us_split_fields__ref1.
  forall result____split_fields4:us_split_fields2.
  forall result4:sequence__ref.
  forall bounded_dynamic_strings__instance__result4:us_rep.
  forall bounded_dynamic_strings__instance__result5:sequence__ref.
  forall bounded_dynamic_strings__instance__result6:us_rep.
  forall result____split_fields5:us_split_fields__ref1.
  forall bounded_dynamic_strings__instance__result7:sequence__ref.
  forall result____split_fields6:us_split_fields2.
  forall bounded_dynamic_strings__instance__result8:us_rep.
  (forall result5:natural_index. forall result6:natural_index.
  forall result7:(int,character) farray. forall result8:t2.
  ((in_range4(capacity) and (dynamic_property(1, 2147483647,
  to_rep1(first(content1)), to_rep1(last(content1))) and ((length({ elts =
  content; rt = content1 }) <= capacity) and (((((us = capacity) and
  in_range4(capacity)) and
  ((((to_rep2(result____split_discrs) = capacity) and
  (to_rep2(result____split_fields) = 0)) and
  ((result____split_fields1 = (temp___526(32, 1,
  to_rep2(result____split_discrs))).elts1) and
  (result____split_fields2 = mk4(to_rep1(first2((temp___526(32, 1,
  to_rep2(result____split_discrs))).rt1)), to_rep1(last2((temp___526(32, 1,
  to_rep2(result____split_discrs))).rt1)))))) and
  (((capacity = to_rep2(((to_base({ us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = result____split_discrs
  }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 =
  result____split_fields; rec__bounded_dynamic_strings__sequence__content1 =
  { elts4 = result____split_fields1; rt4 = result____split_fields2 } }
  })).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  (dynamic_property8(1, capacity, to_rep1(first8(result____split_fields2)),
  to_rep1(last8(result____split_fields2))) and
  ((to_rep1(first8(result____split_fields2)) = 1) and
  (to_rep1(last8(result____split_fields2)) = capacity)))) and
  ((((((((o = length({ elts = content; rt = content1 })) and
  in_range4(length({ elts = content; rt = content1 }))) and
  (to_rep2(o1) = o)) and ((o1 = o2) and ((result____split_fields1 = o3) and
  (result____split_fields2 = o4)))) and
  ((result____split_discrs = temp___948) and ((temp___9481 = o2) and
  ((temp___9482 = o3) and (temp___9483 = o4))))) and
  (((0 <= to_rep2(((to_base({ us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = temp___948 };
  us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9481;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9482;
  rt4 = temp___9483 } }
  })).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (to_rep2(((to_base({ us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = temp___948 };
  us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9481;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9482;
  rt4 = temp___9483 } }
  })).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) <= to_rep2(((to_base({
  us_split_discrs2 = { rec__bounded_dynamic_strings__sequence__capacity =
  temp___948 }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9481;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9482;
  rt4 = temp___9483 } }
  })).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))) and
  ({ us_split_discrs2 = { rec__bounded_dynamic_strings__sequence__capacity =
  temp___949 }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9491;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9492;
  rt4 = temp___9493 } } } = { us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = temp___948 };
  us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9481;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9482;
  rt4 = temp___9483 } } }))) and ((((result = result____split_fields) and
  ((result1 = result____split_fields1) and
  (result2 = result____split_fields2))) and (result____split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9491;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9492;
  rt4 = temp___9493 } })) and (result____split_discrs = temp___949))) and
  (((to_rep2((result____split_fields3).rec__bounded_dynamic_strings__sequence__current_length1) = r88b) and
  in_range4(r88b)) and
  (((((((((((to_rep1(first(content1)) <= to_rep1(last(content1))) and
  (((1 <= r88b) and
  (((to_rep1(last(content1)) - to_rep1(first(content1))) + 1) = ((r88b - 1) + 1))) or
  ((not (1 <= r88b)) and
  (((to_rep1(last(content1)) - to_rep1(first(content1))) + 1) = 0)))) or
  ((not (to_rep1(first(content1)) <= to_rep1(last(content1)))) and
  (((1 <= r88b) and (0 = ((r88b - 1) + 1))) or (not (1 <= r88b))))) and
  ((slide(content, to_rep1(first(content1)), 1) = temp___950) and (mk5(1,
  r88b) = temp___9501))) and (((((1 <= r88b) ->
  (((to_rep1(first8(((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).rt4)) <= 1) and
  (1 <= to_rep1(last8(((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).rt4)))) and
  ((to_rep1(first8(((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).rt4)) <= r88b) and
  (r88b <= to_rep1(last8(((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).rt4)))))) and
  (o5 = ((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).elts4)) and
  ((o5 = temp___953) and (mk5(1, r88b) = temp___9531))) and
  ((((to_rep1(first10(temp___9501)) <= to_rep1(last10(temp___9501))) and
  (((to_rep1(first10(temp___9531)) <= to_rep1(last10(temp___9531))) and
  (((to_rep1(last10(temp___9501)) - to_rep1(first10(temp___9501))) + 1) = ((to_rep1(last10(temp___9531)) - to_rep1(first10(temp___9531))) + 1))) or
  ((not (to_rep1(first10(temp___9531)) <= to_rep1(last10(temp___9531)))) and
  (((to_rep1(last10(temp___9501)) - to_rep1(first10(temp___9501))) + 1) = 0)))) or
  ((not (to_rep1(first10(temp___9501)) <= to_rep1(last10(temp___9501)))) and
  (((to_rep1(first10(temp___9531)) <= to_rep1(last10(temp___9531))) and
  (0 = ((to_rep1(last10(temp___9531)) - to_rep1(first10(temp___9531))) + 1))) or
  (not (to_rep1(first10(temp___9531)) <= to_rep1(last10(temp___9531))))))) and
  ({ elts5 = temp___955; rt5 = temp___9551 } = { elts5 = temp___950; rt5 =
  temp___9501 })))) and
  (((to_rep1(first8(((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).rt4)) = to_rep1(first8(o7))) and
  (to_rep1(last8(((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).rt4)) = to_rep1(last8(o7)))) and
  (forall temp___956:int. ((((1 <= temp___956) and (temp___956 <= r88b)) and
  ((o6[temp___956]) = (temp___955[temp___956]))) or
  ((not ((1 <= temp___956) and (temp___956 <= r88b))) and
  ((o6[temp___956]) = (((result____split_fields3).rec__bounded_dynamic_strings__sequence__content1).elts4[temp___956]))))))) and
  (((result____split_fields3).rec__bounded_dynamic_strings__sequence__current_length1 = o8) and
  ((o9 = o6) and (o10 = o7)))) and ((result____split_discrs = temp___958) and
  ((temp___9581 = o8) and ((temp___9582 = o9) and (temp___9583 = o10))))) and
  (((0 <= to_rep2(((to_base({ us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = temp___958 };
  us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9581;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9582;
  rt4 = temp___9583 } }
  })).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (to_rep2(((to_base({ us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = temp___958 };
  us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9581;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9582;
  rt4 = temp___9583 } }
  })).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) <= to_rep2(((to_base({
  us_split_discrs2 = { rec__bounded_dynamic_strings__sequence__capacity =
  temp___958 }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9581;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9582;
  rt4 = temp___9583 } }
  })).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))) and
  ({ us_split_discrs2 = { rec__bounded_dynamic_strings__sequence__capacity =
  temp___959 }; us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9591;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9592;
  rt4 = temp___9593 } } } = { us_split_discrs2 = {
  rec__bounded_dynamic_strings__sequence__capacity = temp___958 };
  us_split_fields3 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9581;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9582;
  rt4 = temp___9583 } } }))) and (((result3 = { us_split_fields__content1 =
  result____split_fields3 }) and (result____split_fields4 = {
  rec__bounded_dynamic_strings__sequence__current_length1 = temp___9591;
  rec__bounded_dynamic_strings__sequence__content1 = { elts4 = temp___9592;
  rt4 = temp___9593 } })) and (result____split_discrs = temp___959))) and
  (((bounded_dynamic_strings__instance__result5 = { sequence__content =
  bounded_dynamic_strings__instance__result4 }) and
  (bounded_dynamic_strings__instance__result6 = bounded_dynamic_strings__instance__result4)) and
  ((result4 = { sequence__content = { us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity =
  bounded_dynamic_strings__instance__result }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length =
  bounded_dynamic_strings__instance__result1;
  rec__bounded_dynamic_strings__sequence__content = { elts2 =
  bounded_dynamic_strings__instance__result2; rt2 =
  bounded_dynamic_strings__instance__result3 } } } }) and
  (bounded_dynamic_strings__instance__result4 = to_base({ us_split_discrs2 =
  { rec__bounded_dynamic_strings__sequence__capacity = result____split_discrs
  }; us_split_fields3 = result____split_fields4 })))))))))) and
  (((bounded_dynamic_strings__instance__result7 = bounded_dynamic_strings__instance__result5) and
  (result____split_fields5 = { us_split_fields__content1 =
  result____split_fields4 })) and
  ((bounded_dynamic_strings__instance__result8 = bounded_dynamic_strings__instance__result6) and
  (result____split_fields6 = result____split_fields4)))) and ({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  result5 }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = result6;
  rec__bounded_dynamic_strings__sequence__content = { elts2 = result7; rt2 =
  result8 } }
  } = (bounded_dynamic_strings__instance__result7).sequence__content))))) ->
  (to_rep2((((bounded_dynamic_strings__instance__result7).sequence__content).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = capacity))))
