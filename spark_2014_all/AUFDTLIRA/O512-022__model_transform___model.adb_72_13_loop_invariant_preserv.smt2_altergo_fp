(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type name_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : name_t, name_t -> bool

logic dummy : name_t

type name_t__ref = { name_t__content : name_t
}

function name_t__ref___projection(a: name_t__ref) : name_t =
  (a).name_t__content

logic to_rep : name_t -> int

logic of_rep : int -> name_t

axiom inversion_axiom :
  (forall x:name_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:name_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__model__uml_state__name_data : name_t
}

function us_split_fields_Name_Data__projection(a: us_split_fields) : name_t =
  (a).rec__model__uml_state__name_data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep(((a).us_split_fields1).rec__model__uml_state__name_data) = to_rep(((b).us_split_fields1).rec__model__uml_state__name_data)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__model__uml_state__name_data) = to_rep(((b).us_split_fields1).rec__model__uml_state__name_data))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:name_t. (0 <= object__size({ us_split_fields1 = {
  rec__model__uml_state__name_data = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:name_t. (0 <= object__alignment({ us_split_fields1 = {
  rec__model__uml_state__name_data = a } })))

logic model__uml_state__name_data__first__bit : int

logic model__uml_state__name_data__last__bit : int

logic model__uml_state__name_data__position : int

axiom model__uml_state__name_data__first__bit_axiom :
  (0 <= model__uml_state__name_data__first__bit)

axiom model__uml_state__name_data__last__bit_axiom :
  (model__uml_state__name_data__first__bit <  model__uml_state__name_data__last__bit)

axiom model__uml_state__name_data__position_axiom :
  (0 <= model__uml_state__name_data__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : name_t

type uml_state__ref = { uml_state__content : us_rep
}

function uml_state__ref___projection(a: uml_state__ref) : us_rep =
  (a).uml_state__content

type uml_state_access

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : uml_state_access, uml_state_access -> bool

logic dummy2 : uml_state_access

type uml_state_access__ref = { uml_state_access__content : uml_state_access
}

function uml_state_access__ref___projection(a: uml_state_access__ref) : uml_state_access =
  (a).uml_state_access__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq5(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic name : us_rep -> int

logic name__function_guard : int, us_rep -> prop

axiom name__post_axiom :
  (forall self:name_t [name({ us_split_fields1 = {
  rec__model__uml_state__name_data = self } })]. in_range1(name({
  us_split_fields1 = { rec__model__uml_state__name_data = self } })))

axiom name__def_axiom :
  (forall self:name_t [name({ us_split_fields1 = {
  rec__model__uml_state__name_data = self } })]. (name({ us_split_fields1 = {
  rec__model__uml_state__name_data = self } }) = to_rep(self)))

logic to_rep1 : uml_state_access -> int

logic of_rep1 : int -> uml_state_access

axiom inversion_axiom1 :
  (forall x:uml_state_access [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:uml_state_access [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__model__uml_transition__from_data :
uml_state_access; rec__model__uml_transition__to_data : uml_state_access
}

function us_split_fields_From_Data__projection(a: us_split_fields2) : uml_state_access =
  (a).rec__model__uml_transition__from_data

function us_split_fields_To_Data__projection(a: us_split_fields2) : uml_state_access =
  (a).rec__model__uml_transition__to_data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((to_rep1(((a).us_split_fields3).rec__model__uml_transition__from_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__from_data)) and
  (to_rep1(((a).us_split_fields3).rec__model__uml_transition__to_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__to_data))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields3).rec__model__uml_transition__from_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__from_data)) and
  (to_rep1(((a).us_split_fields3).rec__model__uml_transition__to_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__to_data)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:uml_state_access. forall a1:uml_state_access.
  (0 <= object__size1({ us_split_fields3 = {
  rec__model__uml_transition__from_data = a;
  rec__model__uml_transition__to_data = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:uml_state_access. forall a1:uml_state_access.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__model__uml_transition__from_data = a;
  rec__model__uml_transition__to_data = a1 } })))

logic model__uml_transition__from_data__first__bit : int

logic model__uml_transition__from_data__last__bit : int

logic model__uml_transition__from_data__position : int

axiom model__uml_transition__from_data__first__bit_axiom :
  (0 <= model__uml_transition__from_data__first__bit)

axiom model__uml_transition__from_data__last__bit_axiom :
  (model__uml_transition__from_data__first__bit <  model__uml_transition__from_data__last__bit)

axiom model__uml_transition__from_data__position_axiom :
  (0 <= model__uml_transition__from_data__position)

logic model__uml_transition__to_data__first__bit : int

logic model__uml_transition__to_data__last__bit : int

logic model__uml_transition__to_data__position : int

axiom model__uml_transition__to_data__first__bit_axiom :
  (0 <= model__uml_transition__to_data__first__bit)

axiom model__uml_transition__to_data__last__bit_axiom :
  (model__uml_transition__to_data__first__bit <  model__uml_transition__to_data__last__bit)

axiom model__uml_transition__to_data__position_axiom :
  (0 <= model__uml_transition__to_data__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : uml_state_access

logic dummy4 : uml_state_access

type uml_transition__ref = { uml_transition__content : us_rep1
}

function uml_transition__ref___projection(a: uml_transition__ref) : us_rep1 =
  (a).uml_transition__content

type uml_transition_access

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : uml_transition_access, uml_transition_access -> bool

logic dummy5 : uml_transition_access

type uml_transition_access__ref = { uml_transition_access__content :
uml_transition_access
}

function uml_transition_access__ref___projection(a: uml_transition_access__ref) : uml_transition_access =
  (a).uml_transition_access__content

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq6((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq6((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))) -> (bool_eq8(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq6((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))))))

logic from : us_rep1 -> int

logic from__function_guard : int, us_rep1 -> prop

axiom from__post_axiom :
  (forall self:uml_state_access. forall self1:uml_state_access [from({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } })]. in_range2(from({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } })))

axiom from__def_axiom :
  (forall self:uml_state_access. forall self1:uml_state_access [from({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } })]. (from({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } }) = to_rep1(self)))

logic to__ : us_rep1 -> int

logic to____function_guard : int, us_rep1 -> prop

axiom to____post_axiom :
  (forall self:uml_state_access. forall self1:uml_state_access [to__({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } })]. in_range2(to__({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } })))

axiom to____def_axiom :
  (forall self:uml_state_access. forall self1:uml_state_access [to__({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } })]. (to__({
  us_split_fields3 = { rec__model__uml_transition__from_data = self;
  rec__model__uml_transition__to_data = self1 } }) = to_rep1(self1)))

logic dummy6 : (int,us_rep) farray

logic value__size2 : int

logic object__size2 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,us_rep) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment2(a)))

logic user_eq5 : (int,us_rep) farray, (int,us_rep) farray -> bool

logic dummy7 : (int,us_rep1) farray

logic value__size3 : int

logic object__size3 : (int,us_rep1) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,us_rep1) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep1) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep1) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,us_rep1) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep1) farray. (0 <= object__alignment3(a)))

logic user_eq6 : (int,us_rep1) farray, (int,us_rep1) farray -> bool

type us_split_fields4 = { rec__model__uml_state_machine__owned_state_data :
(int,us_rep) farray; rec__model__uml_state_machine__owned_transition_data :
(int,us_rep1) farray
}

function us_split_fields_Owned_State_Data__projection(a: us_split_fields4) : (int,us_rep) farray =
  (a).rec__model__uml_state_machine__owned_state_data

function us_split_fields_Owned_Transition_Data__projection(a: us_split_fields4) : (int,us_rep1) farray =
  (a).rec__model__uml_state_machine__owned_transition_data

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq9 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq9(a, b)].
  ((((bool_eq5(((a).us_split_fields5).rec__model__uml_state_machine__owned_state_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_state_data, 0,
  100) = true) and
  (bool_eq8(((a).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100) = true)) -> (bool_eq9(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields5).rec__model__uml_state_machine__owned_state_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_state_data, 0,
  100) = true) and
  (bool_eq8(((a).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100) = true))) -> (bool_eq9(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,us_rep) farray. forall a1:(int,us_rep1) farray.
  (0 <= object__size4({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = a;
  rec__model__uml_state_machine__owned_transition_data = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,us_rep) farray. forall a1:(int,us_rep1) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = a;
  rec__model__uml_state_machine__owned_transition_data = a1 } })))

logic model__uml_state_machine__owned_state_data__first__bit : int

logic model__uml_state_machine__owned_state_data__last__bit : int

logic model__uml_state_machine__owned_state_data__position : int

axiom model__uml_state_machine__owned_state_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_state_data__first__bit)

axiom model__uml_state_machine__owned_state_data__last__bit_axiom :
  (model__uml_state_machine__owned_state_data__first__bit <  model__uml_state_machine__owned_state_data__last__bit)

axiom model__uml_state_machine__owned_state_data__position_axiom :
  (0 <= model__uml_state_machine__owned_state_data__position)

logic model__uml_state_machine__owned_transition_data__first__bit : int

logic model__uml_state_machine__owned_transition_data__last__bit : int

logic model__uml_state_machine__owned_transition_data__position : int

axiom model__uml_state_machine__owned_transition_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__first__bit)

axiom model__uml_state_machine__owned_transition_data__last__bit_axiom :
  (model__uml_state_machine__owned_transition_data__first__bit <  model__uml_state_machine__owned_transition_data__last__bit)

axiom model__uml_state_machine__owned_transition_data__position_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : (int,us_rep) farray

logic dummy9 : (int,us_rep1) farray

type uml_state_machine__ref = { uml_state_machine__content : us_rep2
}

function uml_state_machine__ref___projection(a: uml_state_machine__ref) : us_rep2 =
  (a).uml_state_machine__content

logic owned_state : us_rep2 -> (int,us_rep) farray

logic owned_state__function_guard : (int,us_rep) farray, us_rep2 -> prop

axiom owned_state__post_axiom : true

axiom owned_state__def_axiom :
  (forall self:(int,us_rep) farray. forall self1:(int,us_rep1) farray
  [owned_state({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self;
  rec__model__uml_state_machine__owned_transition_data = self1 } })].
  (owned_state({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self;
  rec__model__uml_state_machine__owned_transition_data = self1 } }) = self))

logic owned_transition : us_rep2 -> (int,us_rep1) farray

logic owned_transition__function_guard : (int,us_rep1) farray,
  us_rep2 -> prop

axiom owned_transition__post_axiom : true

axiom owned_transition__def_axiom :
  (forall self:(int,us_rep) farray. forall self1:(int,us_rep1) farray
  [owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self;
  rec__model__uml_state_machine__owned_transition_data = self1 } })].
  (owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = self;
  rec__model__uml_state_machine__owned_transition_data = self1 } }) = self1))

type us_split_fields6 = { rec__model__uml_action__name_data : name_t
}

function us_split_fields_Name_Data__2__projection(a: us_split_fields6) : name_t =
  (a).rec__model__uml_action__name_data

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq10 : us_rep3, us_rep3 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq10(a, b)].
  (((to_rep(((a).us_split_fields7).rec__model__uml_action__name_data) = to_rep(((b).us_split_fields7).rec__model__uml_action__name_data)) ->
  (bool_eq10(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields7).rec__model__uml_action__name_data) = to_rep(((b).us_split_fields7).rec__model__uml_action__name_data))) ->
  (bool_eq10(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:name_t. (0 <= object__size5({ us_split_fields7 = {
  rec__model__uml_action__name_data = a } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:name_t. (0 <= object__alignment5({ us_split_fields7 = {
  rec__model__uml_action__name_data = a } })))

logic model__uml_action__name_data__first__bit : int

logic model__uml_action__name_data__last__bit : int

logic model__uml_action__name_data__position : int

axiom model__uml_action__name_data__first__bit_axiom :
  (0 <= model__uml_action__name_data__first__bit)

axiom model__uml_action__name_data__last__bit_axiom :
  (model__uml_action__name_data__first__bit <  model__uml_action__name_data__last__bit)

axiom model__uml_action__name_data__position_axiom :
  (0 <= model__uml_action__name_data__position)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy10 : name_t

type uml_action__ref = { uml_action__content : us_rep3
}

function uml_action__ref___projection(a: uml_action__ref) : us_rep3 =
  (a).uml_action__content

logic no_uml_action : name_t

logic attr__ATTRIBUTE_ADDRESS : int

type uml_action_access

predicate in_range4(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq9 : uml_action_access, uml_action_access -> bool

logic dummy11 : uml_action_access

type uml_action_access__ref = { uml_action_access__content :
uml_action_access
}

function uml_action_access__ref___projection(a: uml_action_access__ref) : uml_action_access =
  (a).uml_action_access__content

type map__ref2 = { map__content2 : (int,us_rep3) farray
}

logic slide2 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq2 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq12 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def11 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and (bool_eq10((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq10((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))) -> (bool_eq12(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq10((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))))))

logic no_uml_action_vector : (int,us_rep3) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic model__no_uml_action_vector__aggregate_def : us_rep3 -> (int,us_rep3) farray

logic name__2 : us_rep3 -> int

logic name__2__function_guard : int, us_rep3 -> prop

axiom name__2__post_axiom :
  (forall self:name_t [name__2({ us_split_fields7 = {
  rec__model__uml_action__name_data = self } })]. in_range1(name__2({
  us_split_fields7 = { rec__model__uml_action__name_data = self } })))

axiom name__2__def_axiom :
  (forall self:name_t [name__2({ us_split_fields7 = {
  rec__model__uml_action__name_data = self } })]. (name__2({
  us_split_fields7 = { rec__model__uml_action__name_data = self }
  }) = to_rep(self)))

logic to_rep2 : uml_action_access -> int

logic of_rep2 : int -> uml_action_access

axiom inversion_axiom2 :
  (forall x:uml_action_access [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:uml_action_access [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields8 = { rec__model__uml_control_flow__from_data :
uml_action_access; rec__model__uml_control_flow__to_data : uml_action_access
}

function us_split_fields_From_Data__2__projection(a: us_split_fields8) : uml_action_access =
  (a).rec__model__uml_control_flow__from_data

function us_split_fields_To_Data__2__projection(a: us_split_fields8) : uml_action_access =
  (a).rec__model__uml_control_flow__to_data

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq13 : us_rep4, us_rep4 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq13(a, b)].
  ((((to_rep2(((a).us_split_fields9).rec__model__uml_control_flow__from_data) = to_rep2(((b).us_split_fields9).rec__model__uml_control_flow__from_data)) and
  (to_rep2(((a).us_split_fields9).rec__model__uml_control_flow__to_data) = to_rep2(((b).us_split_fields9).rec__model__uml_control_flow__to_data))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields9).rec__model__uml_control_flow__from_data) = to_rep2(((b).us_split_fields9).rec__model__uml_control_flow__from_data)) and
  (to_rep2(((a).us_split_fields9).rec__model__uml_control_flow__to_data) = to_rep2(((b).us_split_fields9).rec__model__uml_control_flow__to_data)))) ->
  (bool_eq13(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:uml_action_access. forall a1:uml_action_access.
  (0 <= object__size6({ us_split_fields9 = {
  rec__model__uml_control_flow__from_data = a;
  rec__model__uml_control_flow__to_data = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:uml_action_access. forall a1:uml_action_access.
  (0 <= object__alignment6({ us_split_fields9 = {
  rec__model__uml_control_flow__from_data = a;
  rec__model__uml_control_flow__to_data = a1 } })))

logic model__uml_control_flow__from_data__first__bit : int

logic model__uml_control_flow__from_data__last__bit : int

logic model__uml_control_flow__from_data__position : int

axiom model__uml_control_flow__from_data__first__bit_axiom :
  (0 <= model__uml_control_flow__from_data__first__bit)

axiom model__uml_control_flow__from_data__last__bit_axiom :
  (model__uml_control_flow__from_data__first__bit <  model__uml_control_flow__from_data__last__bit)

axiom model__uml_control_flow__from_data__position_axiom :
  (0 <= model__uml_control_flow__from_data__position)

logic model__uml_control_flow__to_data__first__bit : int

logic model__uml_control_flow__to_data__last__bit : int

logic model__uml_control_flow__to_data__position : int

axiom model__uml_control_flow__to_data__first__bit_axiom :
  (0 <= model__uml_control_flow__to_data__first__bit)

axiom model__uml_control_flow__to_data__last__bit_axiom :
  (model__uml_control_flow__to_data__first__bit <  model__uml_control_flow__to_data__last__bit)

axiom model__uml_control_flow__to_data__position_axiom :
  (0 <= model__uml_control_flow__to_data__position)

logic user_eq10 : us_rep4, us_rep4 -> bool

logic dummy12 : uml_action_access

logic dummy13 : uml_action_access

type uml_control_flow__ref = { uml_control_flow__content : us_rep4
}

function uml_control_flow__ref___projection(a: uml_control_flow__ref) : us_rep4 =
  (a).uml_control_flow__content

logic no_uml_control_flow : uml_action_access

logic no_uml_control_flow1 : uml_action_access

logic attr__ATTRIBUTE_ADDRESS2 : int

type uml_control_flow_access

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : uml_control_flow_access, uml_control_flow_access -> bool

logic dummy14 : uml_control_flow_access

type uml_control_flow_access__ref = { uml_control_flow_access__content :
uml_control_flow_access
}

function uml_control_flow_access__ref___projection(a: uml_control_flow_access__ref) : uml_control_flow_access =
  (a).uml_control_flow_access__content

type map__ref3 = { map__content3 : (int,us_rep4) farray
}

logic slide3 : (int,us_rep4) farray, int, int -> (int,us_rep4) farray

axiom slide_eq3 :
  (forall a:(int,us_rep4) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep4) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq15 : (int,us_rep4) farray, int, int, (int,us_rep4) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,us_rep4) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep4) farray. forall b__first:int. forall b__last:int
  [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_160:int. ((((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) and (bool_eq13((a[temp___idx_160]),
  (b[((b__first - a__first) + temp___idx_160)])) = true)) or
  (not ((a__first <= temp___idx_160) and (temp___idx_160 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) -> (bool_eq13((a[temp___idx_160]),
  (b[((b__first - a__first) + temp___idx_160)])) = true))))) -> (bool_eq15(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) -> (bool_eq13((a[temp___idx_160]),
  (b[((b__first - a__first) + temp___idx_160)])) = true)))))))

logic no_uml_control_flow_vector : (int,us_rep4) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic model__no_uml_control_flow_vector__aggregate_def : us_rep4 -> (int,us_rep4) farray

logic from__2 : us_rep4 -> int

logic from__2__function_guard : int, us_rep4 -> prop

axiom from__2__post_axiom :
  (forall self:uml_action_access. forall self1:uml_action_access [from__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } })]. in_range4(from__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } })))

axiom from__2__def_axiom :
  (forall self:uml_action_access. forall self1:uml_action_access [from__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } })]. (from__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } }) = to_rep2(self)))

logic to__2 : us_rep4 -> int

logic to__2__function_guard : int, us_rep4 -> prop

axiom to__2__post_axiom :
  (forall self:uml_action_access. forall self1:uml_action_access [to__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } })]. in_range4(to__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } })))

axiom to__2__def_axiom :
  (forall self:uml_action_access. forall self1:uml_action_access [to__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } })]. (to__2({
  us_split_fields9 = { rec__model__uml_control_flow__from_data = self;
  rec__model__uml_control_flow__to_data = self1 } }) = to_rep2(self1)))

logic dummy15 : (int,us_rep3) farray

logic value__size7 : int

logic object__size7 : (int,us_rep3) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,us_rep3) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,us_rep3) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,us_rep3) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,us_rep3) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,us_rep3) farray. (0 <= object__alignment7(a)))

logic user_eq12 : (int,us_rep3) farray, (int,us_rep3) farray -> bool

logic dummy16 : (int,us_rep4) farray

logic value__size8 : int

logic object__size8 : (int,us_rep4) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,us_rep4) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,us_rep4) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,us_rep4) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,us_rep4) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,us_rep4) farray. (0 <= object__alignment8(a)))

logic user_eq13 : (int,us_rep4) farray, (int,us_rep4) farray -> bool

type us_split_fields10 = { rec__model__uml_activity__owned_action_data :
(int,us_rep3) farray; rec__model__uml_activity__owned_flow_data :
(int,us_rep4) farray
}

function us_split_fields_Owned_Action_Data__projection(a: us_split_fields10) : (int,us_rep3) farray =
  (a).rec__model__uml_activity__owned_action_data

function us_split_fields_Owned_Flow_Data__projection(a: us_split_fields10) : (int,us_rep4) farray =
  (a).rec__model__uml_activity__owned_flow_data

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___6__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq16 : us_rep5, us_rep5 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq16(a, b)].
  ((((bool_eq12(((a).us_split_fields11).rec__model__uml_activity__owned_action_data,
  0, 100,
  ((b).us_split_fields11).rec__model__uml_activity__owned_action_data, 0,
  100) = true) and
  (bool_eq15(((a).us_split_fields11).rec__model__uml_activity__owned_flow_data,
  0, 100, ((b).us_split_fields11).rec__model__uml_activity__owned_flow_data,
  0, 100) = true)) -> (bool_eq16(a, b) = true)) and
  ((not ((bool_eq12(((a).us_split_fields11).rec__model__uml_activity__owned_action_data,
  0, 100,
  ((b).us_split_fields11).rec__model__uml_activity__owned_action_data, 0,
  100) = true) and
  (bool_eq15(((a).us_split_fields11).rec__model__uml_activity__owned_flow_data,
  0, 100, ((b).us_split_fields11).rec__model__uml_activity__owned_flow_data,
  0, 100) = true))) -> (bool_eq16(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep5 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep5 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,us_rep3) farray. forall a1:(int,us_rep4) farray.
  (0 <= object__size9({ us_split_fields11 = {
  rec__model__uml_activity__owned_action_data = a;
  rec__model__uml_activity__owned_flow_data = a1 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,us_rep3) farray. forall a1:(int,us_rep4) farray.
  (0 <= object__alignment9({ us_split_fields11 = {
  rec__model__uml_activity__owned_action_data = a;
  rec__model__uml_activity__owned_flow_data = a1 } })))

logic model__uml_activity__owned_action_data__first__bit : int

logic model__uml_activity__owned_action_data__last__bit : int

logic model__uml_activity__owned_action_data__position : int

axiom model__uml_activity__owned_action_data__first__bit_axiom :
  (0 <= model__uml_activity__owned_action_data__first__bit)

axiom model__uml_activity__owned_action_data__last__bit_axiom :
  (model__uml_activity__owned_action_data__first__bit <  model__uml_activity__owned_action_data__last__bit)

axiom model__uml_activity__owned_action_data__position_axiom :
  (0 <= model__uml_activity__owned_action_data__position)

logic model__uml_activity__owned_flow_data__first__bit : int

logic model__uml_activity__owned_flow_data__last__bit : int

logic model__uml_activity__owned_flow_data__position : int

axiom model__uml_activity__owned_flow_data__first__bit_axiom :
  (0 <= model__uml_activity__owned_flow_data__first__bit)

axiom model__uml_activity__owned_flow_data__last__bit_axiom :
  (model__uml_activity__owned_flow_data__first__bit <  model__uml_activity__owned_flow_data__last__bit)

axiom model__uml_activity__owned_flow_data__position_axiom :
  (0 <= model__uml_activity__owned_flow_data__position)

logic user_eq14 : us_rep5, us_rep5 -> bool

logic dummy17 : (int,us_rep3) farray

logic dummy18 : (int,us_rep4) farray

type uml_activity__ref = { uml_activity__content : us_rep5
}

function uml_activity__ref___projection(a: uml_activity__ref) : us_rep5 =
  (a).uml_activity__content

logic no_uml_activity : (int,us_rep3) farray

logic no_uml_activity1 : (int,us_rep4) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic owned_action : us_rep5 -> (int,us_rep3) farray

logic owned_action__function_guard : (int,us_rep3) farray, us_rep5 -> prop

axiom owned_action__post_axiom : true

axiom owned_action__def_axiom :
  (forall self:(int,us_rep3) farray. forall self1:(int,us_rep4) farray
  [owned_action({ us_split_fields11 = {
  rec__model__uml_activity__owned_action_data = self;
  rec__model__uml_activity__owned_flow_data = self1 } })]. (owned_action({
  us_split_fields11 = { rec__model__uml_activity__owned_action_data = self;
  rec__model__uml_activity__owned_flow_data = self1 } }) = self))

logic owned_flow : us_rep5 -> (int,us_rep4) farray

logic owned_flow__function_guard : (int,us_rep4) farray, us_rep5 -> prop

axiom owned_flow__post_axiom : true

axiom owned_flow__def_axiom :
  (forall self:(int,us_rep3) farray. forall self1:(int,us_rep4) farray
  [owned_flow({ us_split_fields11 = {
  rec__model__uml_activity__owned_action_data = self;
  rec__model__uml_activity__owned_flow_data = self1 } })]. (owned_flow({
  us_split_fields11 = { rec__model__uml_activity__owned_action_data = self;
  rec__model__uml_activity__owned_flow_data = self1 } }) = self1))

logic sm : (int,us_rep) farray

logic sm1 : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r1b : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

type t2b

predicate in_range6(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq15 : t2b, t2b -> bool

logic dummy19 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref___projection(a: t2b__ref) : t2b = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r7b : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS11 : int

type t8b

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq16 : t8b, t8b -> bool

logic dummy20 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref___projection(a: t8b__ref) : t8b = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS12 : int

axiom no_uml_action__def_axiom : (no_uml_action = of_rep(0))

axiom no_uml_action_vector__def_axiom :
  (no_uml_action_vector = model__no_uml_action_vector__aggregate_def({
  us_split_fields7 = { rec__model__uml_action__name_data = no_uml_action }
  }))

axiom def_axiom :
  (forall temp___158:name_t.
  (forall temp___159:int. ((model__no_uml_action_vector__aggregate_def({
  us_split_fields7 = { rec__model__uml_action__name_data = temp___158 }
  })[temp___159]) = { us_split_fields7 = {
  rec__model__uml_action__name_data = temp___158 } })))

axiom no_uml_control_flow__def_axiom :
  ((no_uml_control_flow = of_rep2(0)) and
  (no_uml_control_flow1 = of_rep2(0)))

axiom no_uml_control_flow_vector__def_axiom :
  (no_uml_control_flow_vector = model__no_uml_control_flow_vector__aggregate_def({
  us_split_fields9 = { rec__model__uml_control_flow__from_data =
  no_uml_control_flow; rec__model__uml_control_flow__to_data =
  no_uml_control_flow1 } }))

axiom def_axiom1 :
  (forall temp___162:uml_action_access. forall temp___1621:uml_action_access.
  (forall temp___163:int.
  ((model__no_uml_control_flow_vector__aggregate_def({ us_split_fields9 = {
  rec__model__uml_control_flow__from_data = temp___162;
  rec__model__uml_control_flow__to_data = temp___1621 } })[temp___163]) = {
  us_split_fields9 = { rec__model__uml_control_flow__from_data = temp___162;
  rec__model__uml_control_flow__to_data = temp___1621 } })))

axiom no_uml_activity__def_axiom :
  ((no_uml_activity = no_uml_action_vector) and
  (no_uml_activity1 = no_uml_control_flow_vector))

 (* File "model.ads", line 121, characters 0-0 *)
goal WP_parameter_def :
  (forall av:(int,us_rep3) farray. forall cfv:(int,us_rep4) farray.
  forall act__split_fields:(int,us_rep3) farray.
  forall act__split_fields1:(int,us_rep4) farray. forall s:int.
  forall s1:int.
  forall model__transform__L_1__R1b__assume:(int,us_rep) farray.
  forall temp___475:(int,us_rep3) farray. forall temp___474:int.
  forall temp___473:(int,us_rep) farray. forall o:name_t. forall o1:int.
  forall o2:name_t. forall o3:name_t. forall o4:name_t.
  forall o5:(int,us_rep3) farray.
  forall model__transform__L_2__R7b__assume:(int,us_rep1) farray.
  forall temp___482:(int,us_rep1) farray. forall o6:uml_state_access.
  forall o7:uml_state_access. forall o8:int.
  forall temp___483:(int,us_rep1) farray. forall o9:uml_state_access.
  forall o10:uml_state_access. forall o11:int.
  forall result:(int,us_rep3) farray. forall av1:(int,us_rep3) farray.
  forall result1:(int,us_rep4) farray. forall cfv1:(int,us_rep4) farray.
  forall result2:(int,us_rep3) farray. forall result3:(int,us_rep4) farray.
  forall act__split_fields2:(int,us_rep3) farray.
  forall act__split_fields3:(int,us_rep4) farray. forall result4:int.
  forall s2:int. forall av2:(int,us_rep3) farray. forall s3:int.
  forall result5:(int,us_rep3) farray. forall av3:(int,us_rep3) farray.
  forall av4:(int,us_rep3) farray. forall s4:int__ref.
  forall av5:(int,us_rep3) farray. forall s5:int. forall av6:map__ref2.
  forall s6:int__ref. forall av7:(int,us_rep3) farray. forall s7:int.
  forall result6:int__ref. forall s8:int. forall cfv2:(int,us_rep4) farray.
  forall s9:int. forall model__set_from__2__self__fields:us_split_fields8.
  forall result7:map__ref3. forall cfv3:(int,us_rep4) farray.
  forall model__set_to__2__self__fields:us_split_fields8.
  forall result8:map__ref3. forall cfv4:(int,us_rep4) farray.
  forall result9:int__ref. forall s10:int. forall cfv5:map__ref3.
  forall s11:int__ref. forall cfv6:(int,us_rep4) farray. forall s12:int.
  forall rho:us_split_fields8. forall rho1:us_split_fields8.
  ((model__no_uml_action_vector__aggregate_def({ us_split_fields7 = {
  rec__model__uml_action__name_data = no_uml_action }
  }) = no_uml_action_vector) ->
  ((model__no_uml_control_flow_vector__aggregate_def({ us_split_fields9 = {
  rec__model__uml_control_flow__from_data = no_uml_control_flow;
  rec__model__uml_control_flow__to_data = no_uml_control_flow1 }
  }) = no_uml_control_flow_vector) ->
  (((no_uml_action_vector = no_uml_activity) and
  (no_uml_control_flow_vector = no_uml_activity1)) -> (((result = av) and
  (av1 = no_uml_action_vector)) -> (((result1 = cfv) and
  (cfv1 = no_uml_control_flow_vector)) ->
  ((((result2 = act__split_fields) and (result3 = act__split_fields1)) and
  ((act__split_fields2 = no_uml_activity) and
  (act__split_fields3 = no_uml_activity1))) ->
  ((((model__transform__L_1__R1b__assume = owned_state({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 } })) and
  (model__transform__L_1__R1b__assume = sm)) and
  (model__transform__L_1__R1b__assume = r1b)) -> ((((result4 = s) and
  (s2 = 0)) and ((((0 <= s2) and (s2 <= 100)) and ((((temp___475 = av1) and
  ((temp___474 = s2) and
  ((forall t:int. (((0 <= t) and (t <= (s3 - 1))) -> (name((owned_state({
   us_split_fields5 = { rec__model__uml_state_machine__owned_state_data = sm;
   rec__model__uml_state_machine__owned_transition_data = sm1 }
   })[t])) = name__2((av2[t]))))) and
  ((((0 <= 100) -> in_range6(s3)) and ((0 <= s3) and (s3 <= 100))) and
  ((((((((((temp___473 = owned_state({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 } })) and
  (temp___473 = sm)) and ({ us_split_fields1 = {
  rec__model__uml_state__name_data = o } } = (temp___473[s3]))) and
  ((o1 = name({ us_split_fields1 = { rec__model__uml_state__name_data = o }
  })) and (in_range1(o1) and (o1 = to_rep(o))))) and (to_rep(o2) = o1)) and
  (o2 = o3)) and (o4 = o3)) and (o5 = (av2[s3 <- { us_split_fields7 = {
  rec__model__uml_action__name_data = o4 } }]))) and ((result5 = av2) and
  (av3 = o5))) and (s3 = 100)))))) and (((s4 = { int__content = s3 }) and
  (av3 = av4)) and ((s5 = s3) and (av5 = av3)))) and (((s6 = s4) and (av6 = {
  map__content2 = av4 })) and ((s7 = s5) and (av7 = av5))))) or
  ((not ((0 <= s2) and (s2 <= 100))) and (((s6 = { int__content = s2 }) and
  (av6 = { map__content2 = av1 })) and ((s7 = s2) and (av7 = av1)))))) ->
  ((((model__transform__L_2__R7b__assume = owned_transition({
  us_split_fields5 = { rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 } })) and
  (model__transform__L_2__R7b__assume = sm1)) and
  (model__transform__L_2__R7b__assume = r7b)) -> (((result6 = {
  int__content = s1 }) and (s8 = 0)) -> (((0 <= s8) and (s8 <= 100)) ->
  ((forall t:int. (((0 <= t) and (t <= (s9 - 1))) -> ((name((owned_state({
   us_split_fields5 = { rec__model__uml_state_machine__owned_state_data = sm;
   rec__model__uml_state_machine__owned_transition_data = sm1 }
   })[from((owned_transition({ us_split_fields5 = {
   rec__model__uml_state_machine__owned_state_data = sm;
   rec__model__uml_state_machine__owned_transition_data = sm1 }
   })[t]))])) = name__2(((av6).map__content2[from__2((cfv2[t]))]))) and
   (name((owned_state({ us_split_fields5 = {
   rec__model__uml_state_machine__owned_state_data = sm;
   rec__model__uml_state_machine__owned_transition_data = sm1 }
   })[to__((owned_transition({ us_split_fields5 = {
   rec__model__uml_state_machine__owned_state_data = sm;
   rec__model__uml_state_machine__owned_transition_data = sm1 }
   })[t]))])) = name__2(((av6).map__content2[to__2((cfv2[t]))])))))) ->
  ((((((0 <= 100) -> in_range7(s9)) and ((0 <= s9) and (s9 <= 100))) and
  (((((((temp___482 = owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 } })) and
  (temp___482 = sm1)) and ({ us_split_fields3 = {
  rec__model__uml_transition__from_data = o6;
  rec__model__uml_transition__to_data = o7 } } = (temp___482[s9]))) and
  ((o8 = from({ us_split_fields3 = { rec__model__uml_transition__from_data =
  o6; rec__model__uml_transition__to_data = o7 } })) and (in_range2(o8) and
  (o8 = to_rep1(o6))))) and ((from__2({ us_split_fields9 =
  model__set_from__2__self__fields }) = o8) and (to__2({ us_split_fields9 =
  model__set_from__2__self__fields }) = to__2({ us_split_fields9 =
  ((cfv2[s9])).us_split_fields9 })))) and ((result7 = { map__content3 = cfv2
  }) and (cfv3 = (cfv2[s9 <- { us_split_fields9 =
  model__set_from__2__self__fields }])))) and
  (((((((temp___483 = owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 } })) and
  (temp___483 = sm1)) and ({ us_split_fields3 = {
  rec__model__uml_transition__from_data = o9;
  rec__model__uml_transition__to_data = o10 } } = (temp___483[s9]))) and
  ((o11 = to__({ us_split_fields3 = { rec__model__uml_transition__from_data =
  o9; rec__model__uml_transition__to_data = o10 } })) and (in_range2(o11) and
  (o11 = to_rep1(o10))))) and ((to__2({ us_split_fields9 =
  model__set_to__2__self__fields }) = o11) and (from__2({ us_split_fields9 =
  model__set_to__2__self__fields }) = from__2({ us_split_fields9 =
  ((cfv3[s9])).us_split_fields9 })))) and ((result8 = { map__content3 = cfv3
  }) and (cfv4 = (cfv3[s9 <- { us_split_fields9 =
  model__set_to__2__self__fields }])))) and ((not (s9 = 100)) and
  ((result9 = { int__content = s9 }) and (s10 = (s9 + 1))))))) and (((s11 = {
  int__content = s10 }) and (cfv5 = { map__content3 = cfv4 })) and
  ((rho1 = model__set_to__2__self__fields) and
  ((rho = model__set_from__2__self__fields) and ((s12 = s10) and
  (cfv6 = cfv4)))))) ->
  (forall t:int. (((0 <= t) and (t <= ((s11).int__content - 1))) ->
  (name((owned_state({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 }
  })[from((owned_transition({ us_split_fields5 = {
  rec__model__uml_state_machine__owned_state_data = sm;
  rec__model__uml_state_machine__owned_transition_data = sm1 }
  })[t]))])) = name__2(((av6).map__content2[from__2(((cfv5).map__content3[t]))])))))))))))))))))))
