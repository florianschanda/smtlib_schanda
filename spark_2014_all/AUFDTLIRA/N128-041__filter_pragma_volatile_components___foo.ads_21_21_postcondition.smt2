(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tarray_tD1 0)
(declare-fun tarray_tD1qtint (tarray_tD1) Int)
(assert (forall ((i tarray_tD1)) (and (<= 1 (tarray_tD1qtint i)) (<= (tarray_tD1qtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (tarray_tD1 tarray_tD1) Bool)
(declare-const dummy1 tarray_tD1)
(declare-datatypes () ((tarray_tD1__ref (mk_tarray_tD1__ref (tarray_tD1__content tarray_tD1)))))
(define-fun tarray_tD1__ref___projection ((a tarray_tD1__ref)) tarray_tD1 (tarray_tD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const r1b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const r2b Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const a (Array Int integer))
(declare-const s Int)
(declare-const total Int)
(declare-const a_lb Int)
(declare-const a_ub Int)
(declare-const item Int)
(declare-const i Int)
(declare-const temp___210 Int)
(declare-const temp___209 Int)
(declare-const temp___208 (Array Int integer))
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const a1 (Array Int integer))
(declare-const item1 Int)
(declare-const result Int)
(declare-const a_lb1 Int)
(declare-const result1 Int)
(declare-const a_ub1 Int)
(declare-const result2 Int)
(declare-const total1 Int)
(declare-const result3 Int)
(declare-const i1 Int)
(declare-const total2 Int)
(declare-const item2 Int)
(declare-const i2 Int)
(declare-const a2 (Array Int integer))
(declare-const result4 Int)
(declare-const item3 Int)
(declare-const result5 Int)
(declare-const total3 Int)
(declare-const a3 (Array Int integer))
(declare-const total4 Int)
(declare-const item4 Int)
(declare-const i3 Int)
(declare-const a4 (Array Int integer))
(declare-const total5 Int)
(declare-const item5 Int)
(declare-const i4 Int)
(declare-const a5 map__ref)
(declare-const total6 int__ref)
(declare-const item6 int__ref)
(declare-const i5 int__ref)
(declare-const a6 (Array Int integer))
(declare-const total7 Int)
(declare-const item7 Int)
(declare-const i6 Int)
(declare-const result6 int__ref)
(declare-const s1 Int)
(declare-const a7 map__ref)
(declare-const s2 int__ref)
(declare-const total8 int__ref)
(declare-const a_lb2 int__ref)
(declare-const a_ub2 int__ref)
(declare-const item8 int__ref)
(declare-const i7 int__ref)
(declare-const a8 (Array Int integer))
(declare-const s3 Int)
(declare-const total9 Int)
(declare-const a_lb3 Int)
(declare-const a_ub3 Int)
(declare-const item9 Int)
(declare-const i8 Int)
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 s)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 total)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 a_lb)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 a_ub)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 item)))
(assert (= (mk_int__ref result) (mk_int__ref a_lb)))
(assert (= a_lb1 1))
(assert (= (mk_int__ref result1) (mk_int__ref a_ub)))
(assert (= a_ub1 10))
(assert (= (mk_int__ref result2) (mk_int__ref total)))
(assert (= total1 0))
(assert (= a_lb1 r1b))
(assert (in_range1 r1b))
(assert (= a_ub1 r2b))
(assert (in_range1 r2b))
(assert (= (mk_int__ref result3) (mk_int__ref i)))
(assert (= i1 r1b))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= temp___210 item)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= temp___209 total1)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 total2)) (=> (<= (- 2147483648) 2147483647) (in_range1 item2))) (and (<= r1b i2) (<= i2 r2b)))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= temp___208 a2)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (and (<= 1 i2) (<= i2 10))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= o i2)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= o1 (select temp___208 o))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= o2 (to_rep o1))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item2 result4)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item3 o2)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (and (= o3 (+ total2 item3)) (in_range1 (+ total2 item3)))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= result5 total2)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total3 o3)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i2 r2b)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i2 i3)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item3 item4)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total3 total4)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a2 a3)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i4 i2)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item5 item3)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total5 total3)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a4 a2)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i5 (mk_int__ref i3))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item6 (mk_int__ref item4))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total6 (mk_int__ref total4))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a5 (mk_map__ref a3))))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= i6 i4)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= item7 item5)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= total7 total5)))
(assert (=> (and (<= r1b i1) (<= i1 r2b)) (= a6 a4)))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= i5 (mk_int__ref i1))))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= item6 (mk_int__ref item))))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= total6 (mk_int__ref total1))))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= a5 (mk_map__ref a))))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= i6 i1)))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= item7 item1)))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= total7 total1)))
(assert (=> (not (and (<= r1b i1) (<= i1 r2b))) (= a6 a1)))
(assert (= result6 (mk_int__ref s)))
(assert (= s1 (int__content total6)))
(assert (= i7 i5))
(assert (= item8 item6))
(assert (= a_ub2 (mk_int__ref a_ub1)))
(assert (= a_lb2 (mk_int__ref a_lb1)))
(assert (= total8 total6))
(assert (= s2 (mk_int__ref s1)))
(assert (= a7 a5))
(assert (= i8 i6))
(assert (= item9 item7))
(assert (= a_ub3 a_ub1))
(assert (= a_lb3 a_lb1))
(assert (= total9 total7))
(assert (= s3 s1))
(assert (= a8 a6))
(assert (not (<= (int__content s2) 100)))
(check-sat)
(exit)
