(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort resource 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (resource resource) Bool)
(declare-const dummy1 resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 10000)) (in_range2 temp___expr_173)))
(declare-fun to_rep (resource) Int)
(declare-fun of_rep (Int) resource)
(assert (forall ((x resource)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x resource)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort valid_resource 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (valid_resource valid_resource) Bool)
(declare-const dummy2 valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(declare-sort status 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (status status) Bool)
(declare-const dummy3 status)
(declare-datatypes () ((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content a))
(declare-fun to_rep1 (status) Int)
(declare-fun of_rep1 (Int) status)
(assert (forall ((x status)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x status)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_mod_allocator__cell__stat status) (rec__list_mod_allocator__cell__next resource)))))
(define-fun us_split_fields_Stat__projection ((a us_split_fields)) status (rec__list_mod_allocator__cell__stat a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) resource (rec__list_mod_allocator__cell__next a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 a))) (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 b)))) (= (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 a))) (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const list_mod_allocator__cell__stat__first__bit Int)
(declare-const list_mod_allocator__cell__stat__last__bit Int)
(declare-const list_mod_allocator__cell__stat__position Int)
(assert (<= 0 list_mod_allocator__cell__stat__first__bit))
(assert (< list_mod_allocator__cell__stat__first__bit list_mod_allocator__cell__stat__last__bit))
(assert (<= 0 list_mod_allocator__cell__stat__position))
(declare-const list_mod_allocator__cell__next__first__bit Int)
(declare-const list_mod_allocator__cell__next__last__bit Int)
(declare-const list_mod_allocator__cell__next__position Int)
(assert (<= 0 list_mod_allocator__cell__next__first__bit))
(assert (< list_mod_allocator__cell__next__first__bit list_mod_allocator__cell__next__last__bit))
(assert (<= 0 list_mod_allocator__cell__next__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq2 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun length (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption ((temp___expr_215 us_rep1) (temp___skip_top_level_216 Bool)) Bool (=> (not (= temp___skip_top_level_216 true)) (= (length temp___expr_215) 0)))
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (count_type count_type) Bool)
(declare-const dummy6 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range5 temp___expr_166)))
(assert (forall ((container us_rep1)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true true))) :pattern ((length container)))))
(declare-sort element_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (element_type element_type) Bool)
(declare-const dummy7 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_200 Int) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (or (= temp___is_init_196 true) (<= 0 10000)) (in_range6 temp___expr_200)))
(declare-sort extended_index 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (extended_index extended_index) Bool)
(declare-const dummy8 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant3 ((temp___expr_207 Int) (temp___is_init_203 Bool) (temp___skip_constant_204 Bool) (temp___do_toplevel_205 Bool) (temp___do_typ_inv_206 Bool)) Bool (=> (or (= temp___is_init_203 true) (<= 0 2147483647)) (in_range7 temp___expr_207)))
(assert (forall ((container us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant3 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant2 (get container position) true false true true)) :pattern ((get container position))))))
(define-fun ole ((left us_rep1) (right us_rep1)) Bool (and (<= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-fun add (us_rep1 Int) us_rep1)
(declare-fun add__function_guard (us_rep1 us_rep1 Int) Bool)
(assert (forall ((container us_rep1)) (forall ((new_item Int)) (! (=> (and (dynamic_invariant2 new_item true true true true) (and (< (length container) 2147483647) (< (last container) 2147483647))) (let ((result (add container new_item))) (and (= (length result) (+ (length container) 1)) (and (= (get result (last result)) new_item) (= (ole container result) true))))) :pattern ((add container new_item))))))
(declare-sort element_type1 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (element_type1 element_type1) Bool)
(declare-const dummy9 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption1 ((temp___expr_230 us_rep2) (temp___skip_top_level_231 Bool)) Bool (=> (not (= temp___skip_top_level_231 true)) (= (is_empty temp___expr_230) true)))
(declare-fun contains (us_rep2 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)
(define-fun dynamic_invariant4 ((temp___expr_222 Int) (temp___is_init_218 Bool) (temp___skip_constant_219 Bool) (temp___do_toplevel_220 Bool) (temp___do_typ_inv_221 Bool)) Bool (=> (or (= temp___is_init_218 true) (<= 0 10000)) (in_range8 temp___expr_222)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range8 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(assert (forall ((container us_rep2)) (! (dynamic_invariant1 (length1 container) true false true true) :pattern ((length1 container)))))
(declare-fun ole1 (us_rep2 us_rep2) Bool)
(declare-fun ole__function_guard1 (Bool us_rep2 us_rep2) Bool)
(declare-fun included_except (us_rep2 us_rep2 Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun add1 (us_rep2 Int) us_rep2)
(declare-fun add__function_guard1 (us_rep2 us_rep2 Int) Bool)
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (and (dynamic_invariant4 item true true true true) (and (not (= (contains container item) true)) (< (length1 container) 2147483647))) (let ((result (add1 container item))) (and (and (and (= (length1 result) (+ (length1 container) 1)) (= (contains result item) true)) (= (ole1 container result) true)) (= (included_except result container item) true)))) :pattern ((add1 container item))))))
(declare-fun remove (us_rep2 Int) us_rep2)
(declare-fun remove__function_guard (us_rep2 us_rep2 Int) Bool)
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (and (dynamic_invariant4 item true true true true) (= (contains container item) true)) (let ((result (remove container item))) (and (and (and (= (length1 result) (- (length1 container) 1)) (not (= (contains result item) true))) (= (ole1 result container) true)) (= (included_except container result item) true)))) :pattern ((remove container item))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list_mod_allocator__m__t__available us_rep1) (rec__list_mod_allocator__m__t__allocated us_rep2)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields2)) us_rep1 (rec__list_mod_allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields2)) us_rep2 (rec__list_mod_allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (user_eq5 (rec__list_mod_allocator__m__t__available (us_split_fields3 a)) (rec__list_mod_allocator__m__t__available (us_split_fields3 b))) true) (= (bool_eq3 (rec__list_mod_allocator__m__t__allocated (us_split_fields3 a)) (rec__list_mod_allocator__m__t__allocated (us_split_fields3 b))) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const list_mod_allocator__m__t__available__first__bit Int)
(declare-const list_mod_allocator__m__t__available__last__bit Int)
(declare-const list_mod_allocator__m__t__available__position Int)
(assert (<= 0 list_mod_allocator__m__t__available__first__bit))
(assert (< list_mod_allocator__m__t__available__first__bit list_mod_allocator__m__t__available__last__bit))
(assert (<= 0 list_mod_allocator__m__t__available__position))
(declare-const list_mod_allocator__m__t__allocated__first__bit Int)
(declare-const list_mod_allocator__m__t__allocated__last__bit Int)
(declare-const list_mod_allocator__m__t__allocated__position Int)
(assert (<= 0 list_mod_allocator__m__t__allocated__first__bit))
(assert (< list_mod_allocator__m__t__allocated__first__bit list_mod_allocator__m__t__allocated__last__bit))
(assert (<= 0 list_mod_allocator__m__t__allocated__position))
(declare-fun user_eq11 (us_rep3 us_rep3) Bool)
(declare-const dummy11 us_rep3)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep3)))))
(define-fun t__ref___projection ((a t__ref)) us_rep3 (t__content a))
(declare-fun contains1 (us_rep1 Int) Bool)
(declare-fun contains__function_guard1 (Bool us_rep1 Int) Bool)
(assert true)
(assert (forall ((s us_rep1)) (forall ((e Int)) (! (= (= (contains1 s e) true) (exists ((i Int)) (and (and (<= 1 i) (<= i (length s))) (= (get s i) e)))) :pattern ((contains1 s e))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun is_well_formed ((Array Int us_rep) Int) Bool)
(declare-fun is_well_formed__function_guard (Bool (Array Int us_rep) Int) Bool)
(assert true)
(assert (forall ((list_mod_allocator__data (Array Int us_rep))) (forall ((list_mod_allocator__first_available Int)) (! (= (= (is_well_formed list_mod_allocator__data list_mod_allocator__first_available) true) (and (=> (not (= list_mod_allocator__first_available 0)) (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select list_mod_allocator__data list_mod_allocator__first_available)))) 0)) (forall ((r Int)) (=> (and (<= 1 r) (<= r 10000)) (=> (and (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select list_mod_allocator__data r)))) 0) (not (= (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select list_mod_allocator__data r)))) 0))) (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select list_mod_allocator__data (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select list_mod_allocator__data r)))))))) 0)))))) :pattern ((is_well_formed list_mod_allocator__data list_mod_allocator__first_available))))))
(declare-fun model_is_well_formed (us_rep3 (Array Int us_rep) Int) Bool)
(declare-fun model_is_well_formed__function_guard (Bool us_rep3 (Array Int us_rep) Int) Bool)
(declare-fun oeq1 (us_rep3 us_rep3) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq11 a b) (oeq1 a b)) :pattern ((user_eq11 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_245 us_rep3) (temp___skip_top_level_246 Bool)) Bool (and (= (length (rec__list_mod_allocator__m__t__available (us_split_fields3 temp___expr_245))) 0) (= (is_empty (rec__list_mod_allocator__m__t__allocated (us_split_fields3 temp___expr_245))) true)))
(assert true)
(assert (forall ((m us_rep3)) (forall ((list_mod_allocator__data (Array Int us_rep))) (forall ((list_mod_allocator__first_available Int)) (! (= (= (model_is_well_formed m list_mod_allocator__data list_mod_allocator__first_available) true) (and (and (and (and (and (and (and (<= (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))) 10000) (ite (not (= list_mod_allocator__first_available 0)) (and (< 0 (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m)))) (= (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) 1) list_mod_allocator__first_available)) (= (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))) 0))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))))) (and (in_range3 (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) j)) (=> (< j (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m)))) (= (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select list_mod_allocator__data (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) j))))) (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) (+ j 1)))))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))))) (=> (< 1 j) (and (in_range3 (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) (- j 1))) (= (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) j) (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select list_mod_allocator__data (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) (- j 1)))))))))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))))) (=> (= (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) j) (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) k)) (= j k))))))) (=> (and (not (= list_mod_allocator__first_available 0)) (in_range3 (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select list_mod_allocator__data (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m)))))))))) (= (contains1 (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select list_mod_allocator__data (get (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) (length (rec__list_mod_allocator__m__t__available (us_split_fields3 m))))))))) true))) (forall ((e Int)) (=> (and (in_range8 e) (= (contains (rec__list_mod_allocator__m__t__allocated (us_split_fields3 m)) e) true)) (in_range3 e)))) (forall ((r Int)) (=> (and (<= 1 r) (<= r 10000)) (ite (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select list_mod_allocator__data r)))) 0) (not (= (contains (rec__list_mod_allocator__m__t__allocated (us_split_fields3 m)) r) true)) (and (not (= (contains1 (rec__list_mod_allocator__m__t__available (us_split_fields3 m)) r) true)) (= (contains (rec__list_mod_allocator__m__t__allocated (us_split_fields3 m)) r) true))))))) :pattern ((model_is_well_formed m list_mod_allocator__data list_mod_allocator__first_available)))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant5 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant6 ((temp___expr_269 Int) (temp___is_init_265 Bool) (temp___skip_constant_266 Bool) (temp___do_toplevel_267 Bool) (temp___do_typ_inv_268 Bool)) Bool (=> (or (= temp___is_init_265 true) (<= 0 1)) (in_range4 temp___expr_269)))
(define-fun dynamic_invariant7 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 10000)) (in_range3 temp___expr_180)))
(declare-fun oeq2 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)
(assert true)
(assert (forall ((x us_rep3) (y us_rep3)) (! (= (= (oeq1 x y) true) (and (= (oeq (rec__list_mod_allocator__m__t__available (us_split_fields3 x)) (rec__list_mod_allocator__m__t__available (us_split_fields3 y))) true) (= (oeq2 (rec__list_mod_allocator__m__t__allocated (us_split_fields3 x)) (rec__list_mod_allocator__m__t__allocated (us_split_fields3 y))) true))) :pattern ((oeq1 x y)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (ole1 left right) true) (forall ((item Int)) (=> (and (in_range8 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole1 left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (oeq2 left right) true) (and (= (ole1 left right) true) (= (ole1 right left) true))) :pattern ((oeq2 left right)))))
(assert (forall ((container us_rep2)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range8 item) (= (contains container item) true))))) (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true true) (= (= (included_except left right item) true) (forall ((e Int)) (=> (and (in_range8 e) (= (contains left e) true)) (or (= (contains right e) true) (= e item)))))) :pattern ((included_except left right item))))))
(declare-const data (Array Int us_rep))
(declare-const first_available Int)
(declare-const avail us_rep1)
(declare-const alloc us_rep2)
(declare-const unseen us_rep2)
(declare-const r Int)
(declare-const r1 Int)
(declare-const temp___327 Int)
(declare-const temp___326 us_rep2)
(declare-const temp___325 us_rep2)
(declare-const o us_rep2)
(declare-const o1 us_rep2)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const o4 us_rep2)
(declare-const o5 us_rep1)
(declare-const o6 Int)
(declare-const o7 status)
(declare-const o8 resource)
(declare-const o9 status)
(declare-const o10 resource)
(declare-const o11 resource)
(declare-const o12 Int)
(declare-const o13 Bool)
(declare-const o14 Bool)
(declare-const o15 Bool)
(declare-const o16 us_rep2)
(declare-const o17 us_rep1)
(declare-const o18 Int)
(declare-const o19 status)
(declare-const o20 resource)
(declare-const o21 us_split_fields)
(declare-const o22 resource)
(declare-const o23 Int)
(declare-const alloc1 us_rep2)
(declare-const unseen1 us_rep2)
(declare-const result int__ref)
(declare-const r2 Int)
(declare-const alloc2 us_rep2)
(declare-const unseen2 us_rep2)
(declare-const r3 Int)
(declare-const result1 set__ref)
(declare-const alloc3 us_rep2)
(declare-const result2 set__ref)
(declare-const unseen3 us_rep2)
(declare-const alloc4 set__ref)
(declare-const unseen4 set__ref)
(declare-const r4 int__ref)
(declare-const alloc5 us_rep2)
(declare-const unseen5 us_rep2)
(declare-const r5 Int)
(declare-const alloc6 set__ref)
(declare-const unseen6 set__ref)
(declare-const r6 int__ref)
(declare-const alloc7 us_rep2)
(declare-const unseen7 us_rep2)
(declare-const r7 Int)
(declare-const result3 int__ref)
(declare-const r8 Int)
(declare-const result4 Bool)
(declare-const result5 set__ref)
(declare-const unseen8 us_rep2)
(declare-const result6 sequence__ref)
(declare-const avail1 us_rep1)
(declare-const result7 int__ref)
(declare-const r9 Int)
(declare-const avail2 us_rep1)
(declare-const unseen9 us_rep2)
(declare-const r10 Int)
(declare-const temp___336 Int)
(declare-const result8 int__ref)
(declare-const temp___3361 Int)
(declare-const result9 Bool)
(declare-const result10 set__ref)
(declare-const unseen10 us_rep2)
(declare-const result11 sequence__ref)
(declare-const avail3 us_rep1)
(declare-const result12 int__ref)
(declare-const r11 Int)
(declare-const avail4 sequence__ref)
(declare-const unseen11 set__ref)
(declare-const r12 int__ref)
(declare-const temp___3362 int__ref)
(declare-const avail5 us_rep1)
(declare-const unseen12 us_rep2)
(declare-const r13 Int)
(declare-const temp___3363 Int)
(assert (in_range2 first_available))
(assert (= (is_well_formed data first_available) true))
(assert (= (length avail) 0))
(assert (= (is_empty alloc) true))
(assert (= (is_empty unseen) true))
(assert (= result (mk_int__ref r)))
(assert (= r2 1))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= temp___327 r2)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= temp___326 unseen)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= temp___325 alloc)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (forall ((e Int)) (=> (and (in_range8 e) (= (contains alloc2 e) true)) (and (<= 1 e) (<= e (- r3 1)))))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (forall ((e Int)) (=> (and (in_range8 e) (= (contains unseen2 e) true)) (and (<= 1 e) (<= e (- r3 1)))))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (forall ((e Int)) (=> (and (<= 1 e) (<= e 10000)) (=> (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data e)))) 0) (not (= (contains alloc2 e) true)))))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (forall ((e Int)) (=> (and (<= 1 e) (<= e (- r3 1))) (ite (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data e)))) 1) (= (contains alloc2 e) true) (= (contains unseen2 e) true))))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (<= (length1 alloc2) (- r3 1))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (<= (length1 unseen2) (- r3 1))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (and (=> (<= 1 10000) (in_range3 r3)) (and (<= 1 r3) (<= r3 10000)))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1) (and (= o (add1 alloc2 r3)) (and (and (and (= (length1 o) (+ (length1 alloc2) 1)) (= (contains o r3) true)) (= (ole1 alloc2 o) true)) (= (included_except o alloc2 r3) true))))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1) (= result1 (mk_set__ref alloc2)))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1) (= alloc3 o))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1) (= unseen3 unseen2))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (not (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1)) (and (= o1 (add1 unseen2 r3)) (and (and (and (= (length1 o1) (+ (length1 unseen2) 1)) (= (contains o1 r3) true)) (= (ole1 unseen2 o1) true)) (= (included_except o1 unseen2 r3) true))))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (not (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1)) (= result2 (mk_set__ref unseen2)))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (not (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1)) (= unseen3 o1))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (=> (not (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data r3)))) 1)) (= alloc3 alloc2))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= r3 10000)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= r4 (mk_int__ref r3))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= unseen4 (mk_set__ref unseen3))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= alloc4 (mk_set__ref alloc3))))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= r5 r3)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= unseen5 unseen3)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= alloc5 alloc3)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= r6 r4)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= unseen6 unseen4)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= alloc6 alloc4)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= r7 r5)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= unseen7 unseen5)))
(assert (=> (and (<= 1 r2) (<= r2 10000)) (= alloc7 alloc5)))
(assert (=> (not (and (<= 1 r2) (<= r2 10000))) (= r6 (mk_int__ref r2))))
(assert (=> (not (and (<= 1 r2) (<= r2 10000))) (= unseen6 (mk_set__ref unseen))))
(assert (=> (not (and (<= 1 r2) (<= r2 10000))) (= alloc6 (mk_set__ref alloc))))
(assert (=> (not (and (<= 1 r2) (<= r2 10000))) (= r7 r2)))
(assert (=> (not (and (<= 1 r2) (<= r2 10000))) (= unseen7 unseen1)))
(assert (=> (not (and (<= 1 r2) (<= r2 10000))) (= alloc7 alloc1)))
(assert (= result3 (mk_int__ref r1)))
(assert (= r8 first_available))
(assert (in_range2 r8))
(assert (and (= o2 (contains1 avail r8)) (= (= o2 true) (exists ((i Int)) (and (and (<= 1 i) (<= i (length avail))) (= (get avail i) r8))))))
(assert (= o3 (ite (not (= o2 true)) true false)))
(assert (= result4 (ite (not (= r8 0)) o3 false)))
(assert (= result4 true))
(assert (and (= o4 (remove (set__content unseen6) r8)) (and (and (and (= (length1 o4) (- (length1 (set__content unseen6)) 1)) (not (= (contains o4 r8) true))) (= (ole1 o4 (set__content unseen6)) true)) (= (included_except (set__content unseen6) o4 r8) true))))
(assert (= result5 unseen6))
(assert (= unseen8 o4))
(assert (and (= o5 (add avail r8)) (and (= (length o5) (+ (length avail) 1)) (and (= (get o5 (last o5)) r8) (= (ole avail o5) true)))))
(assert (= result6 (mk_sequence__ref avail)))
(assert (= avail1 o5))
(assert (and (<= 1 r8) (<= r8 10000)))
(assert (= o6 r8))
(assert (= (mk___rep (mk___split_fields o7 o8)) (select data o6)))
(assert (= o7 o9))
(assert (= o8 o10))
(assert (= o11 o10))
(assert (= o12 (to_rep o11)))
(assert (= result7 (mk_int__ref r8)))
(assert (= r9 o12))
(assert (<= (length1 unseen9) 10000))
(assert (<= (length avail2) (- 10000 (length1 unseen9))))
(assert (forall ((e Int)) (=> (and (<= 1 e) (<= e 10000)) (=> (and (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data e)))) 0) (not (= (contains1 avail2 e) true))) (= (contains unseen9 e) true)))))
(assert (and (< 0 (length avail2)) (= (get avail2 1) first_available)))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j (length avail2))) (in_range3 (get avail2 j)))))
(assert (= r10 (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select data (get avail2 (length avail2))))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j (- (length avail2) 1))) (= (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select data (get avail2 j))))) (get avail2 (+ j 1))))))
(assert (forall ((j Int)) (=> (and (<= 2 j) (<= j (length avail2))) (= (get avail2 j) (to_rep (rec__list_mod_allocator__cell__next (us_split_fields1 (select data (get avail2 (- j 1))))))))))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j (length avail2))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (length avail2))) (=> (= (get avail2 j) (get avail2 k)) (= j k)))))))
(assert (forall ((e Int)) (=> (and (<= 1 e) (<= e 10000)) (=> (= (to_rep1 (rec__list_mod_allocator__cell__stat (us_split_fields1 (select data e)))) 1) (not (= (contains1 avail2 e) true))))))
(assert (=> (<= 0 10000) (in_range2 r10)))
(assert (= result8 (mk_int__ref temp___336)))
(assert (= temp___3361 (length avail2)))
(assert (and (= o13 (contains1 avail2 r10)) (= (= o13 true) (exists ((i Int)) (and (and (<= 1 i) (<= i (length avail2))) (= (get avail2 i) r10))))))
(assert (= o14 (ite (not (= o13 true)) true false)))
(assert (= o15 (ite (not (= r10 0)) o14 false)))
(assert (= result9 (ite (not (= o15 true)) true false)))
(assert (not (= result9 true)))
(assert (and (= o16 (remove unseen9 r10)) (and (and (and (= (length1 o16) (- (length1 unseen9) 1)) (not (= (contains o16 r10) true))) (= (ole1 o16 unseen9) true)) (= (included_except unseen9 o16 r10) true))))
(assert (= result10 (mk_set__ref unseen9)))
(assert (= unseen10 o16))
(assert (and (= o17 (add avail2 r10)) (and (= (length o17) (+ (length avail2) 1)) (and (= (get o17 (last o17)) r10) (= (ole avail2 o17) true)))))
(assert (= result11 (mk_sequence__ref avail2)))
(assert (= avail3 o17))
(assert (and (<= 1 r10) (<= r10 10000)))
(assert (= o18 r10))
(assert (= (mk___rep (mk___split_fields o19 o20)) (select data o18)))
(assert (= o21 (mk___split_fields o19 o20)))
(assert (= o22 (rec__list_mod_allocator__cell__next o21)))
(assert (= o23 (to_rep o22)))
(assert (= result12 (mk_int__ref r10)))
(assert (= r11 o23))
(assert (= temp___3362 (mk_int__ref temp___3361)))
(assert (= r12 (mk_int__ref r11)))
(assert (= unseen11 (mk_set__ref unseen10)))
(assert (= avail4 (mk_sequence__ref avail3)))
(assert (= temp___3363 temp___3361))
(assert (= r13 r11))
(assert (= unseen12 unseen10))
(assert (= avail5 avail3))
(assert (not (<= (length (sequence__content avail4)) (- 10000 (length1 (set__content unseen11))))))
(check-sat)
(exit)
