(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type resource

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : resource, resource -> bool

logic dummy2 : resource

type resource__ref = { resource__content : resource
}

function resource__ref___projection(a: resource__ref) : resource =
  (a).resource__content

logic to_rep : resource -> int

logic of_rep : int -> resource

axiom inversion_axiom :
  (forall x:resource [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:resource [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type valid_resource

predicate in_range4(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : valid_resource, valid_resource -> bool

logic dummy3 : valid_resource

type valid_resource__ref = { valid_resource__content : valid_resource
}

function valid_resource__ref___projection(a: valid_resource__ref) : valid_resource =
  (a).valid_resource__content

type status

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : status, status -> bool

logic dummy4 : status

type status__ref = { status__content : status
}

function status__ref___projection(a: status__ref) : status =
  (a).status__content

logic to_rep1 : status -> int

logic of_rep1 : int -> status

axiom inversion_axiom1 :
  (forall x:status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:status [to_rep1(x)]. in_range5(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range5(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_allocator__cell__stat : status;
rec__list_allocator__cell__prev : resource; rec__list_allocator__cell__next :
resource
}

function us_split_fields_Stat__projection(a: us_split_fields) : status =
  (a).rec__list_allocator__cell__stat

function us_split_fields_Prev__projection(a: us_split_fields) : resource =
  (a).rec__list_allocator__cell__prev

function us_split_fields_Next__projection(a: us_split_fields) : resource =
  (a).rec__list_allocator__cell__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  (((((to_rep1(((a).us_split_fields1).rec__list_allocator__cell__stat) = to_rep1(((b).us_split_fields1).rec__list_allocator__cell__stat)) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__prev) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__prev))) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__next) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__next))) ->
  (bool_eq7(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields1).rec__list_allocator__cell__stat) = to_rep1(((b).us_split_fields1).rec__list_allocator__cell__stat)) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__prev) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__prev))) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__next) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__next)))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:status. forall a1:resource. forall a2:resource.
  (0 <= object__size({ us_split_fields1 = { rec__list_allocator__cell__stat =
  a; rec__list_allocator__cell__prev = a1; rec__list_allocator__cell__next =
  a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:status. forall a1:resource. forall a2:resource.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__list_allocator__cell__stat = a; rec__list_allocator__cell__prev = a1;
  rec__list_allocator__cell__next = a2 } })))

logic list_allocator__cell__stat__first__bit : int

logic list_allocator__cell__stat__last__bit : int

logic list_allocator__cell__stat__position : int

axiom list_allocator__cell__stat__first__bit_axiom :
  (0 <= list_allocator__cell__stat__first__bit)

axiom list_allocator__cell__stat__last__bit_axiom :
  (list_allocator__cell__stat__first__bit <  list_allocator__cell__stat__last__bit)

axiom list_allocator__cell__stat__position_axiom :
  (0 <= list_allocator__cell__stat__position)

logic list_allocator__cell__prev__first__bit : int

logic list_allocator__cell__prev__last__bit : int

logic list_allocator__cell__prev__position : int

axiom list_allocator__cell__prev__first__bit_axiom :
  (0 <= list_allocator__cell__prev__first__bit)

axiom list_allocator__cell__prev__last__bit_axiom :
  (list_allocator__cell__prev__first__bit <  list_allocator__cell__prev__last__bit)

axiom list_allocator__cell__prev__position_axiom :
  (0 <= list_allocator__cell__prev__position)

logic list_allocator__cell__next__first__bit : int

logic list_allocator__cell__next__last__bit : int

logic list_allocator__cell__next__position : int

axiom list_allocator__cell__next__first__bit_axiom :
  (0 <= list_allocator__cell__next__first__bit)

axiom list_allocator__cell__next__last__bit_axiom :
  (list_allocator__cell__next__first__bit <  list_allocator__cell__next__last__bit)

axiom list_allocator__cell__next__position_axiom :
  (0 <= list_allocator__cell__next__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : status

logic dummy6 : resource

logic dummy7 : resource

type cell__ref = { cell__content : us_rep
}

function cell__ref___projection(a: cell__ref) : us_rep = (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:status. forall v1:resource. forall v2:resource.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__list_allocator__cell__stat = v; rec__list_allocator__cell__prev = v1;
  rec__list_allocator__cell__next = v2 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__list_allocator__cell__stat = v;
  rec__list_allocator__cell__prev = v1; rec__list_allocator__cell__next = v2
  } }, i)[i]) = { us_split_fields1 = { rec__list_allocator__cell__stat = v;
  rec__list_allocator__cell__prev = v1; rec__list_allocator__cell__next = v2
  } })))

logic bool_eq8 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq7((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq7((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq8(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq7((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq9 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic length1 : int, us_rep1 -> int

logic length__function_guard1 : int, int, us_rep1 -> prop

type natural

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : natural, natural -> bool

logic dummy9 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic oeq1 : int, us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, int, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq(a, b)))

axiom length__post_axiom :
  (forall s:us_rep1 [length(s)]. in_range6(length(s)))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall s:us_rep1 [length1(attr__tag, s)]. in_range6(length1(attr__tag,
  s))))

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic get1 : int, us_rep1, int -> int

logic get__function_guard1 : int, int, us_rep1, int -> prop

type element_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : element_type, element_type -> bool

logic dummy10 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall s:us_rep1.
  (forall n:int [get(s, n)]. ((in_range2(n) and ((1 <= n) and
  (n <= length(s)))) -> in_range7(get(s, n)))))

axiom get__post__dispatch_axiom :
  (forall attr__tag:int. forall n:int.
  (forall s:us_rep1 [get1(attr__tag, s, n)]. (in_range2(n) ->
  in_range7(get1(attr__tag, s, n)))))

logic is_prepend : us_rep1, int, us_rep1 -> bool

logic is_prepend__function_guard : bool, us_rep1, int, us_rep1 -> prop

logic is_prepend1 : int, us_rep1, int, us_rep1 -> bool

logic is_prepend__function_guard1 : bool, int, us_rep1, int, us_rep1 -> prop

axiom is_prepend__post_axiom :
  (forall s:us_rep1. forall result__:us_rep1.
  (forall e:int [is_prepend(s, e, result__)]. (in_range7(e) ->
  ((is_prepend(s, e, result__) = true) <->
  (((length(result__) = (length(s) + 1)) and (get(result__, 1) = e)) and
  (forall m:int. (((2 <= m) and (m <= length(result__))) -> (get(result__,
  m) = get(s, (m - 1))))))))))

axiom is_prepend__post__dispatch_axiom : true

logic prepend : us_rep1, int -> us_rep1

logic prepend__function_guard : us_rep1, us_rep1, int -> prop

logic prepend1 : int, us_rep1, int -> us_rep1

logic prepend__function_guard1 : us_rep1, int, us_rep1, int -> prop

axiom prepend__post_axiom :
  (forall s:us_rep1.
  (forall e:int [prepend(s, e)]. (in_range7(e) -> (is_prepend(s, e,
  prepend(s, e)) = true))))

axiom prepend__post__dispatch_axiom : true

logic is_removed_at : us_rep1, int, us_rep1 -> bool

logic is_removed_at__function_guard : bool, us_rep1, int, us_rep1 -> prop

logic is_removed_at1 : int, us_rep1, int, us_rep1 -> bool

logic is_removed_at__function_guard1 : bool, int, us_rep1, int,
  us_rep1 -> prop

logic remove_at : us_rep1, int -> us_rep1

logic remove_at__function_guard : us_rep1, us_rep1, int -> prop

logic remove_at1 : int, us_rep1, int -> us_rep1

logic remove_at__function_guard1 : us_rep1, int, us_rep1, int -> prop

axiom remove_at__post_axiom :
  (forall s:us_rep1.
  (forall n:int [remove_at(s, n)]. ((in_range2(n) and ((1 <= n) and
  (n <= length(s)))) -> (is_removed_at(s, n, remove_at(s, n)) = true))))

axiom remove_at__post__dispatch_axiom : true

type us_split_fields2 = { rec__list_allocator__m__t__available : us_rep1;
rec__list_allocator__m__t__allocated : us_rep1
}

function us_split_fields_Available__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__list_allocator__m__t__available

function us_split_fields_Allocated__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__list_allocator__m__t__allocated

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___7__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq12 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq12(a, b)].
  ((((user_eq6(((a).us_split_fields3).rec__list_allocator__m__t__available,
  ((b).us_split_fields3).rec__list_allocator__m__t__available) = true) and
  (user_eq6(((a).us_split_fields3).rec__list_allocator__m__t__allocated,
  ((b).us_split_fields3).rec__list_allocator__m__t__allocated) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((user_eq6(((a).us_split_fields3).rec__list_allocator__m__t__available,
  ((b).us_split_fields3).rec__list_allocator__m__t__available) = true) and
  (user_eq6(((a).us_split_fields3).rec__list_allocator__m__t__allocated,
  ((b).us_split_fields3).rec__list_allocator__m__t__allocated) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_rep1. forall a1:us_rep1. (0 <= object__size2({
  us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep1. forall a1:us_rep1. (0 <= object__alignment2({
  us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } })))

logic list_allocator__m__t__available__first__bit : int

logic list_allocator__m__t__available__last__bit : int

logic list_allocator__m__t__available__position : int

axiom list_allocator__m__t__available__first__bit_axiom :
  (0 <= list_allocator__m__t__available__first__bit)

axiom list_allocator__m__t__available__last__bit_axiom :
  (list_allocator__m__t__available__first__bit <  list_allocator__m__t__available__last__bit)

axiom list_allocator__m__t__available__position_axiom :
  (0 <= list_allocator__m__t__available__position)

logic list_allocator__m__t__allocated__first__bit : int

logic list_allocator__m__t__allocated__last__bit : int

logic list_allocator__m__t__allocated__position : int

axiom list_allocator__m__t__allocated__first__bit_axiom :
  (0 <= list_allocator__m__t__allocated__first__bit)

axiom list_allocator__m__t__allocated__last__bit_axiom :
  (list_allocator__m__t__allocated__first__bit <  list_allocator__m__t__allocated__last__bit)

axiom list_allocator__m__t__allocated__position_axiom :
  (0 <= list_allocator__m__t__allocated__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep1

logic dummy12 : us_rep1

type t__ref = { t__content : us_rep2
}

function t__ref___projection(a: t__ref) : us_rep2 = (a).t__content

logic oeq2 : us_rep2, us_rep2 -> bool

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall a1:us_rep1. forall b:us_rep1. forall b1:us_rep1
  [user_eq9({ us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } })]. (user_eq9({
  us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } }) = oeq2({ us_split_fields3 =
  { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } })))

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x:us_rep1. forall x1:us_rep1. forall y:us_rep1. forall y1:us_rep1
  [oeq2({ us_split_fields3 = { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } })]. ((oeq2({
  us_split_fields3 = { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } }) = true) <-> ((oeq(x,
  y) = true) and (oeq(x1, y1) = true))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic mem : us_rep1, int -> bool

logic mem__function_guard : bool, us_rep1, int -> prop

axiom mem__post_axiom : true

axiom mem__def_axiom :
  (forall s:us_rep1.
  (forall r:int [mem(s, r)]. ((mem(s, r) = true) <->
  (exists j:int. (((1 <= j) and (j <= length(s))) and (get(s, j) = r))))))

logic find : us_rep1, int -> int

logic find__function_guard : int, us_rep1, int -> prop

axiom find__post_axiom :
  (forall s:us_rep1.
  (forall r:int [find(s, r)]. (in_range3(r) -> ((((mem(s, r) = true) ->
  (((1 <= find(s, r)) and (find(s, r) <= length(s))) and (get(s, find(s,
  r)) = r))) and ((not (mem(s, r) = true)) -> (find(s, r) = 0))) and
  in_range6(find(s, r))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic is_valid : int, int, us_split_fields2, (int,us_rep) farray -> bool

logic is_valid__function_guard : bool, int, int, us_split_fields2,
  (int,us_rep) farray -> prop

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall list_allocator__first_available:int.
  forall list_allocator__first_allocated:int.
  (forall list_allocator__m__model__fields:us_rep1.
  forall list_allocator__m__model__fields1:us_rep1.
  (forall list_allocator__data:(int,us_rep) farray
  [is_valid(list_allocator__first_available, list_allocator__first_allocated,
  { rec__list_allocator__m__t__available = list_allocator__m__model__fields;
  rec__list_allocator__m__t__allocated = list_allocator__m__model__fields1 },
  list_allocator__data)]. (((is_valid(list_allocator__first_available,
  list_allocator__first_allocated, { rec__list_allocator__m__t__available =
  list_allocator__m__model__fields; rec__list_allocator__m__t__allocated =
  list_allocator__m__model__fields1 }, list_allocator__data) = true) ->
  (((((((not (list_allocator__first_available = 0)) ->
  ((0 <  length(list_allocator__m__model__fields)) and
  (get(list_allocator__m__model__fields,
  1) = list_allocator__first_available))) and
  ((list_allocator__first_available = 0) ->
  (length(list_allocator__m__model__fields) = 0))) and
  (((not (list_allocator__first_allocated = 0)) ->
  ((0 <  length(list_allocator__m__model__fields1)) and
  (get(list_allocator__m__model__fields1,
  1) = list_allocator__first_allocated))) and
  ((list_allocator__first_allocated = 0) ->
  (length(list_allocator__m__model__fields1) = 0)))) and
  (forall j:int. (((1 <= j) and
  (j <= length(list_allocator__m__model__fields))) ->
  (((in_range4(get(list_allocator__m__model__fields, j)) and
  (((j <  length(list_allocator__m__model__fields)) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = get(list_allocator__m__model__fields,
  (j + 1)))) and ((not (j <  length(list_allocator__m__model__fields))) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = 0)))) and
  (((1 <  j) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = get(list_allocator__m__model__fields,
  (j - 1)))) and ((not (1 <  j)) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = 0)))) and
  (forall k:int. (((1 <= k) and
  (k <= length(list_allocator__m__model__fields))) -> ((not (j = k)) ->
  (not (get(list_allocator__m__model__fields,
  j) = get(list_allocator__m__model__fields, k)))))))))) and
  (forall j:int. (((1 <= j) and
  (j <= length(list_allocator__m__model__fields1))) ->
  (((in_range4(get(list_allocator__m__model__fields1, j)) and
  (((j <  length(list_allocator__m__model__fields1)) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = get(list_allocator__m__model__fields1,
  (j + 1)))) and ((not (j <  length(list_allocator__m__model__fields1))) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = 0)))) and
  (((1 <  j) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = get(list_allocator__m__model__fields1,
  (j - 1)))) and ((not (1 <  j)) ->
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = 0)))) and
  (forall k:int. (((1 <= k) and
  (k <= length(list_allocator__m__model__fields1))) -> ((not (j = k)) ->
  (not (get(list_allocator__m__model__fields1,
  j) = get(list_allocator__m__model__fields1, k)))))))))) and
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  (((to_rep1((((list_allocator__data[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0) ->
  ((mem(list_allocator__m__model__fields, r) = true) and
  (not (mem(list_allocator__m__model__fields1, r) = true)))) and
  ((not (to_rep1((((list_allocator__data[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0)) ->
  ((not (mem(list_allocator__m__model__fields, r) = true)) and
  (mem(list_allocator__m__model__fields1, r) = true)))))))) and
  ((((((((not (list_allocator__first_available = 0)) and
  ((0 <  length(list_allocator__m__model__fields)) and
  (get(list_allocator__m__model__fields,
  1) = list_allocator__first_available))) or
  ((list_allocator__first_available = 0) and
  (length(list_allocator__m__model__fields) = 0))) and
  (((not (list_allocator__first_allocated = 0)) and
  ((0 <  length(list_allocator__m__model__fields1)) and
  (get(list_allocator__m__model__fields1,
  1) = list_allocator__first_allocated))) or
  ((list_allocator__first_allocated = 0) and
  (length(list_allocator__m__model__fields1) = 0)))) and
  (forall j:int. (((1 <= j) and
  (j <= length(list_allocator__m__model__fields))) ->
  (((in_range4(get(list_allocator__m__model__fields, j)) and
  (((j <  length(list_allocator__m__model__fields)) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = get(list_allocator__m__model__fields,
  (j + 1)))) or ((not (j <  length(list_allocator__m__model__fields))) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = 0)))) and
  (((1 <  j) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = get(list_allocator__m__model__fields,
  (j - 1)))) or ((not (1 <  j)) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = 0)))) and
  (forall k:int. (((1 <= k) and
  (k <= length(list_allocator__m__model__fields))) -> ((not (j = k)) ->
  (not (get(list_allocator__m__model__fields,
  j) = get(list_allocator__m__model__fields, k)))))))))) and
  (forall j:int. (((1 <= j) and
  (j <= length(list_allocator__m__model__fields1))) ->
  (((in_range4(get(list_allocator__m__model__fields1, j)) and
  (((j <  length(list_allocator__m__model__fields1)) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = get(list_allocator__m__model__fields1,
  (j + 1)))) or ((not (j <  length(list_allocator__m__model__fields1))) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = 0)))) and
  (((1 <  j) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = get(list_allocator__m__model__fields1,
  (j - 1)))) or ((not (1 <  j)) and
  (to_rep((((list_allocator__data[get(list_allocator__m__model__fields1,
  j)])).us_split_fields1).rec__list_allocator__cell__prev) = 0)))) and
  (forall k:int. (((1 <= k) and
  (k <= length(list_allocator__m__model__fields1))) -> ((not (j = k)) ->
  (not (get(list_allocator__m__model__fields1,
  j) = get(list_allocator__m__model__fields1, k)))))))))) and
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  (((to_rep1((((list_allocator__data[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0) and
  ((mem(list_allocator__m__model__fields, r) = true) and
  (not (mem(list_allocator__m__model__fields1, r) = true)))) or
  ((not (to_rep1((((list_allocator__data[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0)) and
  ((not (mem(list_allocator__m__model__fields, r) = true)) and
  (mem(list_allocator__m__model__fields1, r) = true))))))) ->
  (is_valid(list_allocator__first_available, list_allocator__first_allocated,
  { rec__list_allocator__m__t__available = list_allocator__m__model__fields;
  rec__list_allocator__m__t__allocated = list_allocator__m__model__fields1 },
  list_allocator__data) = true))))))

logic res : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

axiom oeq__post_axiom1 :
  (forall s1:us_rep1. forall s2:us_rep1 [oeq(s1, s2)]. ((oeq(s1,
  s2) = true) <-> ((length(s1) = length(s2)) and
  (forall n:int. (((1 <= n) and (n <= length(s1))) -> (get(s1, n) = get(s2,
  n)))))))

axiom oeq__post__dispatch_axiom : true

axiom is_removed_at__post_axiom :
  (forall s:us_rep1. forall result__:us_rep1.
  (forall n:int [is_removed_at(s, n, result__)]. ((in_range2(n) and
  ((1 <= n) and (n <= length(s)))) -> (((is_removed_at(s, n,
  result__) = true) -> ((length(result__) = (length(s) - 1)) and
  (forall m:int. (((1 <= m) and (m <= length(result__))) -> (((m <  n) ->
  (get(result__, m) = get(s, m))) and ((not (m <  n)) -> ((n <= m) ->
  (get(result__, m) = get(s, (m + 1)))))))))) and
  (((length(result__) = (length(s) - 1)) and
  (forall m:int. (((1 <= m) and (m <= length(result__))) -> (((m <  n) and
  (get(result__, m) = get(s, m))) or ((not (m <  n)) and ((n <= m) ->
  (get(result__, m) = get(s, (m + 1))))))))) -> (is_removed_at(s, n,
  result__) = true))))))

axiom is_removed_at__post__dispatch_axiom : true

logic model____split_fields : us_rep1

logic model____split_fields1 : us_rep1

logic data : (int,us_rep) farray

logic first_available : int

logic first_allocated : int

logic prev_alloc : int

logic next_alloc : int

logic o : int

logic o1 : status

logic o2 : resource

logic o3 : resource

logic o4 : status

logic o5 : resource

logic o6 : resource

logic o7 : status

logic o8 : int

logic o9 : int

logic o10 : status

logic o11 : resource

logic o12 : resource

logic o13 : status

logic o14 : resource

logic o15 : resource

logic o16 : resource

logic o17 : int

logic o18 : int

logic o19 : status

logic o20 : resource

logic o21 : resource

logic o22 : status

logic o23 : resource

logic o24 : resource

logic o25 : resource

logic o26 : int

logic o27 : resource

logic o28 : resource

logic o29 : status

logic o30 : status

logic o31 : resource

logic o32 : resource

logic o33 : status

logic o34 : resource

logic o35 : resource

logic o36 : int

logic o37 : (int,us_rep) farray

logic o38 : resource

logic o39 : status

logic o40 : resource

logic o41 : resource

logic o42 : status

logic o43 : resource

logic o44 : resource

logic o45 : int

logic o46 : (int,us_rep) farray

logic o47 : resource

logic o48 : status

logic o49 : resource

logic o50 : resource

logic o51 : status

logic o52 : resource

logic o53 : resource

logic o54 : int

logic o55 : (int,us_rep) farray

logic o56 : int

logic o57 : int

logic o58 : us_rep1

logic o59 : us_rep1

logic o60 : us_rep1

logic temp___422 : us_rep1

logic temp___4221 : us_rep1

logic o61 : us_rep1

logic o62 : us_rep1

logic o63 : us_rep1

logic temp___424 : us_rep1

logic temp___4241 : us_rep1

logic j : int

logic o64 : int

logic o65 : bool

logic temp___425 : int

logic o66 : int

logic o67 : int

logic o68 : int

logic o69 : int

logic j1 : int

logic o70 : int

logic o71 : bool

logic o72 : int

logic j2 : int

logic o73 : int

logic o74 : bool

logic temp___426 : int

logic o75 : int

logic o76 : int

logic o77 : int

logic o78 : int

logic j3 : int

logic o79 : int

logic o80 : bool

logic k : int

logic o81 : int

logic o82 : bool

logic o83 : int

logic o84 : int

logic temp___428 : int

logic o85 : int

logic o86 : status

logic o87 : resource

logic o88 : resource

logic o89 : status

logic o90 : resource

logic o91 : resource

logic o92 : resource

logic o93 : int

logic o94 : int

logic o95 : int

logic temp___427 : int

logic o96 : int

logic o97 : status

logic o98 : resource

logic o99 : resource

logic o100 : status

logic o101 : resource

logic o102 : resource

logic o103 : resource

logic o104 : int

logic o105 : int

logic o106 : int

logic o107 : int

logic o108 : int

logic j4 : int

logic o109 : int

logic o110 : bool

logic k1 : int

logic o111 : int

logic o112 : bool

logic o113 : int

logic o114 : int

logic temp___430 : int

logic o115 : int

logic o116 : status

logic o117 : resource

logic o118 : resource

logic o119 : status

logic o120 : resource

logic o121 : resource

logic o122 : resource

logic o123 : int

logic o124 : int

logic o125 : int

logic temp___429 : int

logic o126 : int

logic o127 : status

logic o128 : resource

logic o129 : resource

logic o130 : status

logic o131 : resource

logic o132 : resource

logic o133 : resource

logic o134 : int

logic o135 : int

logic o136 : int

logic o137 : int

logic o138 : int

logic j5 : int

logic o139 : int

logic o140 : bool

logic temp___432 : int

logic o141 : int

logic o142 : int

logic o143 : int

logic o144 : int

logic j6 : int

logic o145 : int

logic o146 : bool

logic temp___431 : int

logic o147 : int

logic o148 : int

logic o149 : int

logic o150 : int

logic o151 : int

logic o152 : int

logic o153 : int

logic o154 : int

logic o155 : int

logic o156 : int

logic j7 : int

logic o157 : int

logic o158 : bool

logic o159 : int

logic o160 : int

logic model____split_fields2 : us_rep1

logic model____split_fields3 : us_rep1

logic data1 : (int,us_rep) farray

logic first_available1 : int

logic first_allocated1 : int

logic prev_alloc1 : int

logic next_alloc1 : int

logic result : bool

logic result1 : int

logic prev_alloc2 : int

logic result2 : int

logic next_alloc2 : int

logic result3 : (int,us_rep) farray

logic data2 : (int,us_rep) farray

logic result4 : (int,us_rep) farray

logic data3 : (int,us_rep) farray

logic result5 : (int,us_rep) farray

logic data4 : (int,us_rep) farray

logic result6 : int

logic first_available2 : int

logic result7 : int

logic first_allocated2 : int

logic result8 : us_rep1

logic result9 : us_rep1

logic model____split_fields4 : us_rep1

logic model____split_fields5 : us_rep1

logic result10 : us_rep1

logic result11 : us_rep1

logic model____split_fields6 : us_rep1

logic model____split_fields7 : us_rep1

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic result15 : bool

logic result16 : bool

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic result20 : bool

logic result21 : bool

logic result22 : bool

logic result23 : bool

logic result24 : bool

logic result25 : bool

logic result26 : bool

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic result30 : bool

logic result31 : bool

logic result32 : bool

logic result33 : bool

logic result34 : bool

logic result35 : bool

logic result36 : bool

logic result37 : bool

logic result38 : bool

logic result39 : bool

logic result40 : bool

logic result41 : bool

logic model____split_fields8 : us_rep1

logic model____split_fields9 : us_rep1

logic data5 : (int,us_rep) farray

logic first_available3 : int

logic first_allocated3 : int

logic prev_alloc3 : int

logic next_alloc3 : int

logic model____split_fields10 : us_rep1

logic model____split_fields11 : us_rep1

logic data6 : (int,us_rep) farray

logic first_available4 : int

logic first_allocated4 : int

logic prev_alloc4 : int

logic next_alloc4 : int

logic result42 : bool

logic result43 : bool

logic result44 : bool

axiom H : in_range3(first_available)

axiom H1 : in_range3(first_allocated)

axiom H2 : in_range3(res)

axiom H3 : (is_valid(first_available, first_allocated, {
  rec__list_allocator__m__t__available = model____split_fields;
  rec__list_allocator__m__t__allocated = model____split_fields1 },
  data) = true)

axiom H4 : ((0 <= 3) -> in_range3(prev_alloc))

axiom H5 : ((0 <= 3) -> in_range3(next_alloc))

axiom H6 : ((not (res = 0)) -> ((1 <= res) and (res <= 3)))

axiom H7 : ((not (res = 0)) -> (o = res))

axiom H8 : ((not (res = 0)) -> ({ us_split_fields1 = {
  rec__list_allocator__cell__stat = o1; rec__list_allocator__cell__prev = o2;
  rec__list_allocator__cell__next = o3 } } = (data[o])))

axiom H9 : ((not (res = 0)) -> (o1 = o4))

axiom H10 : ((not (res = 0)) -> (o2 = o5))

axiom H11 : ((not (res = 0)) -> (o3 = o6))

axiom H12 : ((not (res = 0)) -> (o7 = o4))

axiom H13 : ((not (res = 0)) -> (o8 = to_rep1(o7)))

axiom H14 : ((not (res = 0)) -> (((o8 = 1) -> (result = true)) and
  ((not (o8 = 1)) -> (result = false))))

axiom H15 : ((res = 0) -> (result = false))

axiom H16 : (result = true)

axiom H17 : ((1 <= res) and (res <= 3))

axiom H18 : (o9 = res)

axiom H19 : ({ us_split_fields1 = { rec__list_allocator__cell__stat = o10;
  rec__list_allocator__cell__prev = o11; rec__list_allocator__cell__next =
  o12 } } = (data[o9]))

axiom H20 : (o10 = o13)

axiom H21 : (o11 = o14)

axiom H22 : (o12 = o15)

axiom H23 : (o16 = o14)

axiom H24 : (o17 = to_rep(o16))

axiom H25 : (result1 = prev_alloc)

axiom H26 : (prev_alloc2 = o17)

axiom H27 : ((1 <= res) and (res <= 3))

axiom H28 : (o18 = res)

axiom H29 : ({ us_split_fields1 = { rec__list_allocator__cell__stat = o19;
  rec__list_allocator__cell__prev = o20; rec__list_allocator__cell__next =
  o21 } } = (data[o18]))

axiom H30 : (o19 = o22)

axiom H31 : (o20 = o23)

axiom H32 : (o21 = o24)

axiom H33 : (o25 = o24)

axiom H34 : (o26 = to_rep(o25))

axiom H35 : (result2 = next_alloc)

axiom H36 : (next_alloc2 = o26)

axiom H37 : (to_rep(o27) = first_available)

axiom H38 : (to_rep(o28) = 0)

axiom H39 : (to_rep1(o29) = 0)

axiom H40 : (o29 = o30)

axiom H41 : (o28 = o31)

axiom H42 : (o27 = o32)

axiom H43 : (o33 = o30)

axiom H44 : (o34 = o31)

axiom H45 : (o35 = o32)

axiom H46 : ((1 <= res) and (res <= 3))

axiom H47 : (o36 = res)

axiom H48 : (o37 = (data[o36 <- { us_split_fields1 = {
  rec__list_allocator__cell__stat = o33; rec__list_allocator__cell__prev =
  o34; rec__list_allocator__cell__next = o35 } }]))

axiom H49 : (result3 = data)

axiom H50 : (data2 = o37)

axiom H51 : ((not (prev_alloc2 = 0)) -> (to_rep(o38) = next_alloc2))

axiom H52 : ((not (prev_alloc2 = 0)) ->
  ((((data2[prev_alloc2])).us_split_fields1).rec__list_allocator__cell__stat = o39))

axiom H53 : ((not (prev_alloc2 = 0)) ->
  ((((data2[prev_alloc2])).us_split_fields1).rec__list_allocator__cell__prev = o40))

axiom H54 : ((not (prev_alloc2 = 0)) -> (o38 = o41))

axiom H55 : ((not (prev_alloc2 = 0)) -> (o42 = o39))

axiom H56 : ((not (prev_alloc2 = 0)) -> (o43 = o40))

axiom H57 : ((not (prev_alloc2 = 0)) -> (o44 = o41))

axiom H58 : ((not (prev_alloc2 = 0)) -> ((1 <= prev_alloc2) and
  (prev_alloc2 <= 3)))

axiom H59 : ((not (prev_alloc2 = 0)) -> (o45 = prev_alloc2))

axiom H60 : ((not (prev_alloc2 = 0)) -> (o46 = (data2[o45 <- {
  us_split_fields1 = { rec__list_allocator__cell__stat = o42;
  rec__list_allocator__cell__prev = o43; rec__list_allocator__cell__next =
  o44 } }])))

axiom H61 : ((not (prev_alloc2 = 0)) -> (result4 = data2))

axiom H62 : ((not (prev_alloc2 = 0)) -> (data3 = o46))

axiom H63 : ((prev_alloc2 = 0) -> (data3 = data2))

axiom H64 : ((not (next_alloc2 = 0)) -> (to_rep(o47) = prev_alloc2))

axiom H65 : ((not (next_alloc2 = 0)) ->
  ((o48 = (((data3[next_alloc2])).us_split_fields1).rec__list_allocator__cell__stat) and
  ((o49 = o47) and
  (o50 = (((data3[next_alloc2])).us_split_fields1).rec__list_allocator__cell__next))))

axiom H66 : ((not (next_alloc2 = 0)) -> ((o51 = o48) and ((o52 = o49) and
  (o53 = o50))))

axiom H67 : ((not (next_alloc2 = 0)) -> ((1 <= next_alloc2) and
  (next_alloc2 <= 3)))

axiom H68 : ((not (next_alloc2 = 0)) -> (o54 = next_alloc2))

axiom H69 : ((not (next_alloc2 = 0)) -> (o55 = (data3[o54 <- {
  us_split_fields1 = { rec__list_allocator__cell__stat = o51;
  rec__list_allocator__cell__prev = o52; rec__list_allocator__cell__next =
  o53 } }])))

axiom H70 : ((not (next_alloc2 = 0)) -> (result5 = data3))

axiom H71 : ((not (next_alloc2 = 0)) -> (data4 = o55))

axiom H72 : ((next_alloc2 = 0) -> (data4 = data3))

axiom H73 : (result6 = first_available)

axiom H74 : (first_available2 = res)

axiom H75 : ((res = first_allocated) -> (result7 = first_allocated))

axiom H76 : ((res = first_allocated) -> (first_allocated2 = next_alloc2))

axiom H77 : ((not (res = first_allocated)) ->
  (first_allocated2 = first_allocated))

axiom H78 : ((not (res = first_allocated)) ->
  (first_allocated2 = first_allocated1))

axiom H79 : ((o56 = find(model____split_fields1, res)) and
  (in_range6(o56) and (((mem(model____split_fields1, res) = true) ->
  (((1 <= o56) and (o56 <= length(model____split_fields1))) and
  (get(model____split_fields1, o56) = res))) and
  ((not (mem(model____split_fields1, res) = true)) -> (o56 = 0)))))

axiom H80 : ((o57 = o56) and in_range2(o56))

axiom H81 : ((o58 = remove_at(model____split_fields1, o57)) and
  (is_removed_at(model____split_fields1, o57, o58) = true))

axiom H82 : ((o59 = model____split_fields) and (o60 = o58))

axiom H83 : ((temp___422 = o59) and (temp___4221 = o60))

axiom H84 : ((result8 = model____split_fields) and
  (result9 = model____split_fields1))

axiom H85 : ((model____split_fields4 = temp___422) and
  (model____split_fields5 = temp___4221))

axiom H86 : ((o61 = prepend(model____split_fields4, res)) and
  (is_prepend(model____split_fields4, res, o61) = true))

axiom H87 : ((o62 = o61) and (o63 = model____split_fields5))

axiom H88 : ((temp___424 = o62) and (temp___4241 = o63))

axiom H89 : ((result10 = model____split_fields4) and
  (result11 = model____split_fields5))

axiom H90 : ((model____split_fields6 = temp___424) and
  (model____split_fields7 = temp___4241))

axiom H91 :
  (forall j8:int. (((1 <= j8) and (j8 <= length(model____split_fields6))) ->
  (in_range4(get(model____split_fields6, j8)) and
  (((j8 <  length(model____split_fields6)) ->
  (to_rep((((data4[get(model____split_fields6,
  j8)])).us_split_fields1).rec__list_allocator__cell__next) = get(model____split_fields6,
  (j8 + 1)))) and ((not (j8 <  length(model____split_fields6))) ->
  (to_rep((((data4[get(model____split_fields6,
  j8)])).us_split_fields1).rec__list_allocator__cell__next) = 0))))))

axiom H92 :
  (forall j8:int. (((1 <= j8) and (j8 <= length(model____split_fields7))) ->
  in_range4(get(model____split_fields7, j8))))

axiom H93 :
  (forall j8:int. (((1 <= j8) and (j8 <= length(model____split_fields7))) ->
  (in_range4(get(model____split_fields7, j8)) and
  (((j8 <  length(model____split_fields7)) ->
  (to_rep((((data4[get(model____split_fields7,
  j8)])).us_split_fields1).rec__list_allocator__cell__next) = get(model____split_fields7,
  (j8 + 1)))) and ((not (j8 <  length(model____split_fields7))) ->
  (to_rep((((data4[get(model____split_fields7,
  j8)])).us_split_fields1).rec__list_allocator__cell__next) = 0))))))

axiom H94 : ((o79 = length(model____split_fields6)) and in_range6(o79))

axiom H95 : (((j3 <= o79) -> (o80 = true)) and ((not (j3 <= o79)) ->
  (o80 = false)))

axiom H96 : (((1 <= j3) -> (result19 = o80)) and ((not (1 <= j3)) ->
  (result19 = false)))

axiom H97 : (result19 = true)

axiom H98 : ((o108 = get(model____split_fields6, j3)) and in_range7(o108))

axiom H99 : ((in_range4(o108) -> (result22 = true)) and
  ((not in_range4(o108)) -> (result22 = false)))

axiom H100 : ((result22 = true) ->
  ((o104 = length(model____split_fields6)) and in_range6(o104)))

axiom H101 : ((result22 = true) -> (((j3 <  o104) -> (result23 = true)) and
  ((not (j3 <  o104)) -> (result23 = false))))

axiom H102 : ((result22 = true) -> ((result23 = true) ->
  ((o105 = (j3 + 1)) and in_range1((j3 + 1)))))

axiom H103 : ((result22 = true) -> ((result23 = true) ->
  ((o106 = get(model____split_fields6, o105)) and in_range7(o106))))

axiom H104 : ((result22 = true) -> ((not (result23 = true)) -> (o106 = 0)))

axiom H105 : ((result22 = true) -> ((temp___427 = get(model____split_fields6,
  j3)) and in_range7(temp___427)))

axiom H106 : ((result22 = true) -> ((1 <= temp___427) and (temp___427 <= 3)))

axiom H107 : ((result22 = true) -> (o96 = temp___427))

axiom H108 : ((result22 = true) -> ({ us_split_fields1 = {
  rec__list_allocator__cell__stat = o97; rec__list_allocator__cell__prev =
  o98; rec__list_allocator__cell__next = o99 } } = (data4[o96])))

axiom H109 : ((result22 = true) -> ((o100 = o97) and ((o101 = o98) and
  (o102 = o99))))

axiom H110 : ((result22 = true) -> (o103 = o102))

axiom H111 : ((result22 = true) -> (o107 = to_rep(o103)))

axiom H112 : ((result22 = true) -> (((o107 = o106) -> (result21 = true)) and
  ((not (o107 = o106)) -> (result21 = false))))

axiom H113 : ((not (result22 = true)) -> (result21 = false))

axiom H114 : (result21 = true)

axiom H115 : ((1 <  j3) -> ((o93 = (j3 - 1)) and in_range2((j3 - 1))))

axiom H116 : ((1 <  j3) -> ((o94 = get(model____split_fields6, o93)) and
  in_range7(o94)))

axiom H117 : ((not (1 <  j3)) -> (o94 = 0))

 (* File "list_allocator.ads", line 30, characters 0-0 *)
goal WP_parameter_def : (1 <= j3)
