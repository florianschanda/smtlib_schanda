(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort my_index 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (my_index my_index) Bool)
(declare-const dummy1 my_index)
(declare-datatypes () ((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__my_container__cursor__index natural)))))
(define-fun us_split_fields_Index__projection ((a us_split_fields)) natural (rec__my_container__cursor__index a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__my_container__cursor__index (us_split_fields1 a))) (to_rep (rec__my_container__cursor__index (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const my_container__cursor__index__first__bit Int)
(declare-const my_container__cursor__index__last__bit Int)
(declare-const my_container__cursor__index__position Int)
(assert (<= 0 my_container__cursor__index__first__bit))
(assert (< my_container__cursor__index__first__bit my_container__cursor__index__last__bit))
(assert (<= 0 my_container__cursor__index__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep (cursor__content a))
(declare-fun valid (Int) Bool)
(declare-fun valid__function_guard (Bool Int) Bool)
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(assert true)
(assert (forall ((e Int)) (! (= (= (valid e) true) (< 0 e)) :pattern ((valid e)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun has_element ((Array Int natural) us_rep) Bool)
(declare-fun has_element__function_guard (Bool (Array Int natural) us_rep) Bool)
(assert true)
(assert (forall ((c (Array Int natural))) (forall ((p us_rep)) (! (= (= (has_element c p) true) (and (<= 1 (to_rep (rec__my_container__cursor__index (us_split_fields1 p)))) (<= (to_rep (rec__my_container__cursor__index (us_split_fields1 p))) 100))) :pattern ((has_element c p))))))
(declare-fun element ((Array Int natural) us_rep) Int)
(declare-fun element__function_guard (Int (Array Int natural) us_rep) Bool)
(assert (forall ((c (Array Int natural))) (forall ((p us_rep)) (! (=> (= (has_element c p) true) (dynamic_invariant (element c p) true false true true)) :pattern ((element c p))))))
(assert (forall ((c (Array Int natural))) (forall ((p us_rep)) (! (= (element c p) (to_rep (select c (to_rep (rec__my_container__cursor__index (us_split_fields1 p)))))) :pattern ((element c p))))))
(declare-sort t2b 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (t2b t2b) Bool)
(declare-const dummy3 t2b)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content t2b)))))
(define-fun t2b__ref___projection ((a t2b__ref)) t2b (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 100)) (in_range2 temp___expr_159)))
(declare-const c (Array Int natural))
(declare-const i Int)
(declare-const temp___199 Int)
(declare-const temp___197 (Array Int natural))
(declare-const o natural)
(declare-const o1 (Array Int natural))
(declare-const temp___203 natural)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const c1 (Array Int natural))
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 (Array Int natural))
(declare-const c2 (Array Int natural))
(declare-const c3 (Array Int natural))
(declare-const i2 Int)
(declare-const c4 (Array Int natural))
(declare-const i3 Int)
(declare-const c5 (Array Int natural))
(declare-const i4 Int)
(declare-const c6 (Array Int natural))
(declare-const i5 Int)
(declare-const c7 (Array Int natural))
(declare-const i6 Int)
(declare-const c8 (Array Int natural))
(declare-const i7 Int)
(declare-const c9 (Array Int natural))
(declare-const i8 Int)
(declare-const result2 Bool)
(define-fun i9 () int__ref (mk_int__ref i5))
(define-fun c10 () map__ref (mk_map__ref c6))
(define-fun temp___2031 () us_rep (mk___rep (mk___split_fields temp___203)))
(define-fun c11 () map__ref (mk_map__ref c))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___199 i1)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___197 c)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (=> (= (to_rep (select c i1)) 0) (= (to_rep o) 1))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (=> (= (to_rep (select c i1)) 0) (= o1 (store c i1 o)))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (=> (= (to_rep (select c i1)) 0) (= (mk_map__ref result1) c11))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (=> (= (to_rep (select c i1)) 0) (= c2 o1))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (=> (not (= (to_rep (select c i1)) 0)) (= c2 c))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (=> (not (= (to_rep (select c i1)) 0)) (= c2 c1))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (forall ((j Int)) (=> (and (<= 1 j) (<= j i2)) (= (valid (to_rep (select c3 j))) true)))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (and (and (forall ((temp___198 Int)) (=> (and (<= 1 temp___198) (<= temp___198 100)) (=> (< i2 temp___198) (= (select c3 temp___198) (select temp___197 temp___198))))) (=> (<= 1 100) (in_range3 i2))) (and (<= 1 i2) (<= i2 100)))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 100)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= c3 c4)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= c5 c3)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i9 (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= c10 (mk_map__ref c4))))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 100)) (= c7 c5)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= c10 c11)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 100))) (= c7 c1)))
(assert (= (mk_int__ref i7) i9))
(assert (= (mk_map__ref c8) c10))
(assert (= i8 i6))
(assert (= c9 c7))
(assert (and (= o2 (has_element c8 temp___2031)) (= (= o2 true) (and (<= 1 (to_rep temp___203)) (<= (to_rep temp___203) 100)))))
(assert (= o3 true))
(assert (= result2 (ite (= o3 true) o2 false)))
(assert (= result2 true))
(assert (not (= (has_element c8 temp___2031) true)))
(check-sat)
(exit)
