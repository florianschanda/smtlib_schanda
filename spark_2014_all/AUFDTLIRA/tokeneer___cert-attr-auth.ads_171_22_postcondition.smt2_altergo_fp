(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type algorithmt

predicate in_range(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : algorithmt, algorithmt -> bool

logic dummy : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep : algorithmt -> int

logic of_rep : int -> algorithmt

axiom inversion_axiom :
  (forall x:algorithmt [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:algorithmt [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type namecountt

predicate in_range1(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : namecountt, namecountt -> bool

logic dummy1 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep1 : namecountt -> int

logic of_rep1 : int -> namecountt

axiom inversion_axiom1 :
  (forall x:namecountt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:namecountt [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep2 : character -> int

logic of_rep2 : int -> character

axiom inversion_axiom2 :
  (forall x:character [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:character [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic dummy3 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range3(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : issueridt, issueridt -> bool

logic dummy4 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep3 : issueridt -> int

logic of_rep3 : int -> issueridt

axiom inversion_axiom3 :
  (forall x:issueridt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:issueridt [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep1(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep1(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq4(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep1(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep1(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq4(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size1({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : issueridt

logic dummy6 : namecountt

logic dummy7 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

type serialnumbert

predicate in_range4(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : serialnumbert, serialnumbert -> bool

logic dummy8 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep4 : serialnumbert -> int

logic of_rep4 : int -> serialnumbert

axiom inversion_axiom4 :
  (forall x:serialnumbert [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:serialnumbert [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields2 = { rec__certtypes__idt__issuer : us_rep;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields2) : us_rep =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields2) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((bool_eq6(((a).us_split_fields3).rec__certtypes__idt__issuer,
  ((b).us_split_fields3).rec__certtypes__idt__issuer) = true) and
  (to_rep4(((a).us_split_fields3).rec__certtypes__idt__serialnumber) = to_rep4(((b).us_split_fields3).rec__certtypes__idt__serialnumber))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((bool_eq6(((a).us_split_fields3).rec__certtypes__idt__issuer,
  ((b).us_split_fields3).rec__certtypes__idt__issuer) = true) and
  (to_rep4(((a).us_split_fields3).rec__certtypes__idt__serialnumber) = to_rep4(((b).us_split_fields3).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size2({ us_split_fields3 = { rec__certtypes__idt__issuer = {
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy9 : issueridt

logic dummy10 : namecountt

logic dummy11 : (int,character) farray

logic dummy12 : serialnumbert

type idt__ref = { idt__content : us_rep1
}

function idt__ref___projection(a: idt__ref) : us_rep1 = (a).idt__content

logic nullid : issueridt

logic nullid1 : namecountt

logic nullid2 : (int,character) farray

logic nullid3 : serialnumbert

logic attr__ATTRIBUTE_ADDRESS : int

type privileget

predicate in_range5(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : privileget, privileget -> bool

logic dummy13 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep5 : privileget -> int

logic of_rep5 : int -> privileget

axiom inversion_axiom5 :
  (forall x:privileget [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:privileget [to_rep5(x)]. in_range5(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range5(x) ->
  (to_rep5(of_rep5(x)) = x)))

type classt

predicate in_range6(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : classt, classt -> bool

logic dummy14 : classt

type classt__ref = { classt__content : classt
}

function classt__ref___projection(a: classt__ref) : classt =
  (a).classt__content

logic to_rep6 : classt -> int

logic of_rep6 : int -> classt

axiom inversion_axiom6 :
  (forall x:classt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:classt [to_rep6(x)]. in_range6(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range6(x) ->
  (to_rep6(of_rep6(x)) = x)))

type us_split_fields4 = { rec__privtypes__clearancet__class : classt
}

function us_split_fields_Class__projection(a: us_split_fields4) : classt =
  (a).rec__privtypes__clearancet__class

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___7__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq11 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq11(a, b)].
  (((to_rep6(((a).us_split_fields5).rec__privtypes__clearancet__class) = to_rep6(((b).us_split_fields5).rec__privtypes__clearancet__class)) ->
  (bool_eq11(a, b) = true)) and
  ((not (to_rep6(((a).us_split_fields5).rec__privtypes__clearancet__class) = to_rep6(((b).us_split_fields5).rec__privtypes__clearancet__class))) ->
  (bool_eq11(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:classt. (0 <= object__size3({ us_split_fields5 = {
  rec__privtypes__clearancet__class = a } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:classt. (0 <= object__alignment3({ us_split_fields5 = {
  rec__privtypes__clearancet__class = a } })))

logic privtypes__clearancet__class__first__bit : int

logic privtypes__clearancet__class__last__bit : int

logic privtypes__clearancet__class__position : int

axiom privtypes__clearancet__class__first__bit_axiom :
  (0 <= privtypes__clearancet__class__first__bit)

axiom privtypes__clearancet__class__last__bit_axiom :
  (privtypes__clearancet__class__first__bit <  privtypes__clearancet__class__last__bit)

axiom privtypes__clearancet__class__position_axiom :
  (0 <= privtypes__clearancet__class__position)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy15 : classt

type clearancet__ref = { clearancet__content : us_rep2
}

function clearancet__ref___projection(a: clearancet__ref) : us_rep2 =
  (a).clearancet__content

type yearst

predicate in_range7(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : yearst, yearst -> bool

logic dummy16 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep7 : yearst -> int

logic of_rep7 : int -> yearst

axiom inversion_axiom7 :
  (forall x:yearst [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : (forall x:yearst [to_rep7(x)]. in_range7(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range7(x) ->
  (to_rep7(of_rep7(x)) = x)))

type monthst

predicate in_range8(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : monthst, monthst -> bool

logic dummy17 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep8 : monthst -> int

logic of_rep8 : int -> monthst

axiom inversion_axiom8 :
  (forall x:monthst [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 : (forall x:monthst [to_rep8(x)]. in_range8(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range8(x) ->
  (to_rep8(of_rep8(x)) = x)))

type dayst

predicate in_range9(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : dayst, dayst -> bool

logic dummy18 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep9 : dayst -> int

logic of_rep9 : int -> dayst

axiom inversion_axiom9 :
  (forall x:dayst [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 : (forall x:dayst [to_rep9(x)]. in_range9(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range9(x) ->
  (to_rep9(of_rep9(x)) = x)))

type millisecst

predicate in_range10(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq14 : millisecst, millisecst -> bool

logic dummy19 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep10 : millisecst -> int

logic of_rep10 : int -> millisecst

axiom inversion_axiom10 :
  (forall x:millisecst [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:millisecst [to_rep10(x)]. in_range10(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range10(x) ->
  (to_rep10(of_rep10(x)) = x)))

type us_split_fields6 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__2__projection(a: us_split_fields6) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__2__projection(a: us_split_fields6) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__2__projection(a: us_split_fields6) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields6) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___16__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___16__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq16 : us_rep3, us_rep3 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq16(a, b)].
  ((((((to_rep7(((a).us_split_fields7).rec__clock__timet__year) = to_rep7(((b).us_split_fields7).rec__clock__timet__year)) and
  (to_rep8(((a).us_split_fields7).rec__clock__timet__month) = to_rep8(((b).us_split_fields7).rec__clock__timet__month))) and
  (to_rep9(((a).us_split_fields7).rec__clock__timet__day) = to_rep9(((b).us_split_fields7).rec__clock__timet__day))) and
  (to_rep10(((a).us_split_fields7).rec__clock__timet__millisec) = to_rep10(((b).us_split_fields7).rec__clock__timet__millisec))) ->
  (bool_eq16(a, b) = true)) and
  ((not ((((to_rep7(((a).us_split_fields7).rec__clock__timet__year) = to_rep7(((b).us_split_fields7).rec__clock__timet__year)) and
  (to_rep8(((a).us_split_fields7).rec__clock__timet__month) = to_rep8(((b).us_split_fields7).rec__clock__timet__month))) and
  (to_rep9(((a).us_split_fields7).rec__clock__timet__day) = to_rep9(((b).us_split_fields7).rec__clock__timet__day))) and
  (to_rep10(((a).us_split_fields7).rec__clock__timet__millisec) = to_rep10(((b).us_split_fields7).rec__clock__timet__millisec)))) ->
  (bool_eq16(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size4({ us_split_fields7 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment4({ us_split_fields7 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq15 : us_rep3, us_rep3 -> bool

logic dummy20 : yearst

logic dummy21 : monthst

logic dummy22 : dayst

logic dummy23 : millisecst

type timet__ref = { timet__content : us_rep3
}

function timet__ref___2__projection(a: timet__ref) : us_rep3 =
  (a).timet__content

logic zerotime : yearst

logic zerotime1 : monthst

logic zerotime2 : dayst

logic zerotime3 : millisecst

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields8 = { rec__cert__attr__auth__contentst__id : us_rep1;
rec__cert__attr__auth__contentst__notbefore : us_rep3;
rec__cert__attr__auth__contentst__notafter : us_rep3;
rec__cert__attr__auth__contentst__mechanism : algorithmt;
rec__cert__attr__auth__contentst__basecertid : us_rep1;
rec__cert__attr__auth__contentst__role : privileget;
rec__cert__attr__auth__contentst__clearance : us_rep2
}

function us_split_fields_ID__5__projection(a: us_split_fields8) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__id

function us_split_fields_NotBefore__4__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__cert__attr__auth__contentst__notbefore

function us_split_fields_NotAfter__4__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__cert__attr__auth__contentst__notafter

function us_split_fields_Mechanism__3__projection(a: us_split_fields8) : algorithmt =
  (a).rec__cert__attr__auth__contentst__mechanism

function us_split_fields_BaseCertID__2__projection(a: us_split_fields8) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__basecertid

function us_split_fields_Role__2__projection(a: us_split_fields8) : privileget =
  (a).rec__cert__attr__auth__contentst__role

function us_split_fields_Clearance__projection(a: us_split_fields8) : us_rep2 =
  (a).rec__cert__attr__auth__contentst__clearance

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___23__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___24__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq17 : us_rep4, us_rep4 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq17(a, b)].
  (((((((((bool_eq8(((a).us_split_fields9).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq16(((a).us_split_fields9).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq16(((a).us_split_fields9).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep(((a).us_split_fields9).rec__cert__attr__auth__contentst__mechanism) = to_rep(((b).us_split_fields9).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq8(((a).us_split_fields9).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep5(((a).us_split_fields9).rec__cert__attr__auth__contentst__role) = to_rep5(((b).us_split_fields9).rec__cert__attr__auth__contentst__role))) and
  (bool_eq11(((a).us_split_fields9).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__clearance) = true)) ->
  (bool_eq17(a, b) = true)) and
  ((not (((((((bool_eq8(((a).us_split_fields9).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq16(((a).us_split_fields9).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq16(((a).us_split_fields9).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep(((a).us_split_fields9).rec__cert__attr__auth__contentst__mechanism) = to_rep(((b).us_split_fields9).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq8(((a).us_split_fields9).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep5(((a).us_split_fields9).rec__cert__attr__auth__contentst__role) = to_rep5(((b).us_split_fields9).rec__cert__attr__auth__contentst__role))) and
  (bool_eq11(((a).us_split_fields9).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__clearance) = true))) ->
  (bool_eq17(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep4. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep4. (0 <= object__alignment5(a)))

logic cert__attr__auth__contentst__id__first__bit : int

logic cert__attr__auth__contentst__id__last__bit : int

logic cert__attr__auth__contentst__id__position : int

axiom cert__attr__auth__contentst__id__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__id__first__bit)

axiom cert__attr__auth__contentst__id__last__bit_axiom :
  (cert__attr__auth__contentst__id__first__bit <  cert__attr__auth__contentst__id__last__bit)

axiom cert__attr__auth__contentst__id__position_axiom :
  (0 <= cert__attr__auth__contentst__id__position)

logic cert__attr__auth__contentst__notbefore__first__bit : int

logic cert__attr__auth__contentst__notbefore__last__bit : int

logic cert__attr__auth__contentst__notbefore__position : int

axiom cert__attr__auth__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__first__bit)

axiom cert__attr__auth__contentst__notbefore__last__bit_axiom :
  (cert__attr__auth__contentst__notbefore__first__bit <  cert__attr__auth__contentst__notbefore__last__bit)

axiom cert__attr__auth__contentst__notbefore__position_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__position)

logic cert__attr__auth__contentst__notafter__first__bit : int

logic cert__attr__auth__contentst__notafter__last__bit : int

logic cert__attr__auth__contentst__notafter__position : int

axiom cert__attr__auth__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notafter__first__bit)

axiom cert__attr__auth__contentst__notafter__last__bit_axiom :
  (cert__attr__auth__contentst__notafter__first__bit <  cert__attr__auth__contentst__notafter__last__bit)

axiom cert__attr__auth__contentst__notafter__position_axiom :
  (0 <= cert__attr__auth__contentst__notafter__position)

logic cert__attr__auth__contentst__mechanism__first__bit : int

logic cert__attr__auth__contentst__mechanism__last__bit : int

logic cert__attr__auth__contentst__mechanism__position : int

axiom cert__attr__auth__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__first__bit)

axiom cert__attr__auth__contentst__mechanism__last__bit_axiom :
  (cert__attr__auth__contentst__mechanism__first__bit <  cert__attr__auth__contentst__mechanism__last__bit)

axiom cert__attr__auth__contentst__mechanism__position_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__position)

logic cert__attr__auth__contentst__basecertid__first__bit : int

logic cert__attr__auth__contentst__basecertid__last__bit : int

logic cert__attr__auth__contentst__basecertid__position : int

axiom cert__attr__auth__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__first__bit)

axiom cert__attr__auth__contentst__basecertid__last__bit_axiom :
  (cert__attr__auth__contentst__basecertid__first__bit <  cert__attr__auth__contentst__basecertid__last__bit)

axiom cert__attr__auth__contentst__basecertid__position_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__position)

logic cert__attr__auth__contentst__role__first__bit : int

logic cert__attr__auth__contentst__role__last__bit : int

logic cert__attr__auth__contentst__role__position : int

axiom cert__attr__auth__contentst__role__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__role__first__bit)

axiom cert__attr__auth__contentst__role__last__bit_axiom :
  (cert__attr__auth__contentst__role__first__bit <  cert__attr__auth__contentst__role__last__bit)

axiom cert__attr__auth__contentst__role__position_axiom :
  (0 <= cert__attr__auth__contentst__role__position)

logic cert__attr__auth__contentst__clearance__first__bit : int

logic cert__attr__auth__contentst__clearance__last__bit : int

logic cert__attr__auth__contentst__clearance__position : int

axiom cert__attr__auth__contentst__clearance__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__clearance__first__bit)

axiom cert__attr__auth__contentst__clearance__last__bit_axiom :
  (cert__attr__auth__contentst__clearance__first__bit <  cert__attr__auth__contentst__clearance__last__bit)

axiom cert__attr__auth__contentst__clearance__position_axiom :
  (0 <= cert__attr__auth__contentst__clearance__position)

logic user_eq16 : us_rep4, us_rep4 -> bool

logic dummy24 : issueridt

logic dummy25 : namecountt

logic dummy26 : (int,character) farray

logic dummy27 : serialnumbert

logic dummy28 : yearst

logic dummy29 : monthst

logic dummy30 : dayst

logic dummy31 : millisecst

logic dummy32 : yearst

logic dummy33 : monthst

logic dummy34 : dayst

logic dummy35 : millisecst

logic dummy36 : algorithmt

logic dummy37 : issueridt

logic dummy38 : namecountt

logic dummy39 : (int,character) farray

logic dummy40 : serialnumbert

logic dummy41 : privileget

logic dummy42 : classt

type contentst__ref = { contentst__content : us_rep4
}

function contentst__ref___3__projection(a: contentst__ref) : us_rep4 =
  (a).contentst__content

logic therole : us_rep4 -> int

logic therole__function_guard : int, us_rep4 -> prop

axiom therole__post_axiom :
  (forall contents:us_rep4 [therole(contents)]. in_range5(therole(contents)))

axiom therole__def_axiom :
  (forall contents:us_rep4 [therole(contents)].
  (therole(contents) = to_rep5(((contents).us_split_fields9).rec__cert__attr__auth__contentst__role)))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic nullcontents : issueridt

logic nullcontents1 : namecountt

logic nullcontents2 : (int,character) farray

logic nullcontents3 : serialnumbert

logic nullcontents4 : yearst

logic nullcontents5 : monthst

logic nullcontents6 : dayst

logic nullcontents7 : millisecst

logic nullcontents8 : yearst

logic nullcontents9 : monthst

logic nullcontents10 : dayst

logic nullcontents11 : millisecst

logic nullcontents12 : algorithmt

logic nullcontents13 : issueridt

logic nullcontents14 : namecountt

logic nullcontents15 : (int,character) farray

logic nullcontents16 : serialnumbert

logic nullcontents17 : privileget

logic nullcontents18 : classt

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom nullcontents__def_axiom : ((((nullcontents = nullid) and
  ((nullcontents1 = nullid1) and (nullcontents2 = nullid2))) and
  (nullcontents3 = nullid3)) and (((nullcontents4 = zerotime) and
  ((nullcontents5 = zerotime1) and ((nullcontents6 = zerotime2) and
  (nullcontents7 = zerotime3)))) and (((nullcontents8 = zerotime) and
  ((nullcontents9 = zerotime1) and ((nullcontents10 = zerotime2) and
  (nullcontents11 = zerotime3)))) and ((nullcontents12 = of_rep(0)) and
  ((((nullcontents13 = nullid) and ((nullcontents14 = nullid1) and
  (nullcontents15 = nullid2))) and (nullcontents16 = nullid3)) and
  ((nullcontents17 = of_rep5(0)) and (nullcontents18 = of_rep6(0))))))))

axiom zerotime__def_axiom : ((zerotime = of_rep7(1901)) and
  ((zerotime1 = of_rep8(1)) and ((zerotime2 = of_rep9(1)) and
  (zerotime3 = of_rep10(0)))))

logic blankname : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic cryptotypes__blankname__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___134:int.
  (forall temp___135:int.
  ((cryptotypes__blankname__aggregate_def(temp___134)[temp___135]) = of_rep2(temp___134))))

axiom blankname__def_axiom :
  (blankname = cryptotypes__blankname__aggregate_def(32))

logic nullissuer : issueridt

logic nullissuer1 : namecountt

logic nullissuer2 : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom nullissuer__def_axiom : ((nullissuer = of_rep3(0)) and
  ((nullissuer1 = of_rep1(0)) and (nullissuer2 = blankname)))

axiom nullid__def_axiom : (((nullid = nullissuer) and
  ((nullid1 = nullissuer1) and (nullid2 = nullissuer2))) and
  (nullid3 = of_rep4(0)))

logic contents__split_fields : issueridt

logic contents__split_fields1 : namecountt

logic contents__split_fields2 : (int,character) farray

logic contents__split_fields3 : serialnumbert

logic contents__split_fields4 : yearst

logic contents__split_fields5 : monthst

logic contents__split_fields6 : dayst

logic contents__split_fields7 : millisecst

logic contents__split_fields8 : yearst

logic contents__split_fields9 : monthst

logic contents__split_fields10 : dayst

logic contents__split_fields11 : millisecst

logic contents__split_fields12 : algorithmt

logic contents__split_fields13 : issueridt

logic contents__split_fields14 : namecountt

logic contents__split_fields15 : (int,character) farray

logic contents__split_fields16 : serialnumbert

logic contents__split_fields17 : privileget

logic contents__split_fields18 : classt

logic o : classt

logic o1 : classt

logic o2 : classt

logic o3 : privileget

logic o4 : algorithmt

logic o5 : issueridt

logic o6 : namecountt

logic o7 : (int,character) farray

logic o8 : serialnumbert

logic o9 : yearst

logic o10 : monthst

logic o11 : dayst

logic o12 : millisecst

logic o13 : yearst

logic o14 : monthst

logic o15 : dayst

logic o16 : millisecst

logic o17 : algorithmt

logic o18 : issueridt

logic o19 : namecountt

logic o20 : (int,character) farray

logic o21 : serialnumbert

logic o22 : privileget

logic o23 : classt

logic temp___1899 : issueridt

logic temp___18991 : namecountt

logic temp___18992 : (int,character) farray

logic temp___18993 : serialnumbert

logic temp___18994 : yearst

logic temp___18995 : monthst

logic temp___18996 : dayst

logic temp___18997 : millisecst

logic temp___18998 : yearst

logic temp___18999 : monthst

logic temp___189910 : dayst

logic temp___189911 : millisecst

logic temp___189912 : algorithmt

logic temp___189913 : issueridt

logic temp___189914 : namecountt

logic temp___189915 : (int,character) farray

logic temp___189916 : serialnumbert

logic temp___189917 : privileget

logic temp___189918 : classt

logic result : issueridt

logic result1 : namecountt

logic result2 : (int,character) farray

logic result3 : serialnumbert

logic result4 : yearst

logic result5 : monthst

logic result6 : dayst

logic result7 : millisecst

logic result8 : yearst

logic result9 : monthst

logic result10 : dayst

logic result11 : millisecst

logic result12 : algorithmt

logic result13 : issueridt

logic result14 : namecountt

logic result15 : (int,character) farray

logic result16 : serialnumbert

logic result17 : privileget

logic result18 : classt

logic contents__split_fields19 : issueridt

logic contents__split_fields20 : namecountt

logic contents__split_fields21 : (int,character) farray

logic contents__split_fields22 : serialnumbert

logic contents__split_fields23 : yearst

logic contents__split_fields24 : monthst

logic contents__split_fields25 : dayst

logic contents__split_fields26 : millisecst

logic contents__split_fields27 : yearst

logic contents__split_fields28 : monthst

logic contents__split_fields29 : dayst

logic contents__split_fields30 : millisecst

logic contents__split_fields31 : algorithmt

logic contents__split_fields32 : issueridt

logic contents__split_fields33 : namecountt

logic contents__split_fields34 : (int,character) farray

logic contents__split_fields35 : serialnumbert

logic contents__split_fields36 : privileget

logic contents__split_fields37 : classt

logic contents__split_fields38 : issueridt

logic contents__split_fields39 : namecountt

logic contents__split_fields40 : (int,character) farray

logic contents__split_fields41 : serialnumbert

logic contents__split_fields42 : yearst

logic contents__split_fields43 : monthst

logic contents__split_fields44 : dayst

logic contents__split_fields45 : millisecst

logic contents__split_fields46 : yearst

logic contents__split_fields47 : monthst

logic contents__split_fields48 : dayst

logic contents__split_fields49 : millisecst

logic contents__split_fields50 : algorithmt

logic contents__split_fields51 : issueridt

logic contents__split_fields52 : namecountt

logic contents__split_fields53 : (int,character) farray

logic contents__split_fields54 : serialnumbert

logic contents__split_fields55 : privileget

logic contents__split_fields56 : classt

logic contents__split_fields57 : issueridt

logic contents__split_fields58 : namecountt

logic contents__split_fields59 : (int,character) farray

logic contents__split_fields60 : serialnumbert

logic contents__split_fields61 : yearst

logic contents__split_fields62 : monthst

logic contents__split_fields63 : dayst

logic contents__split_fields64 : millisecst

logic contents__split_fields65 : yearst

logic contents__split_fields66 : monthst

logic contents__split_fields67 : dayst

logic contents__split_fields68 : millisecst

logic contents__split_fields69 : algorithmt

logic contents__split_fields70 : issueridt

logic contents__split_fields71 : namecountt

logic contents__split_fields72 : (int,character) farray

logic contents__split_fields73 : serialnumbert

logic contents__split_fields74 : privileget

logic contents__split_fields75 : classt

axiom H : (to_rep6(o) = 0)

axiom H1 : (o = o1)

axiom H2 : (o2 = o1)

axiom H3 : (to_rep5(o3) = 0)

axiom H4 : (to_rep(o4) = 0)

axiom H5 : ((((o5 = nullid) and ((o6 = nullid1) and (o7 = nullid2))) and
  (o8 = nullid3)) and (((o9 = zerotime) and ((o10 = zerotime1) and
  ((o11 = zerotime2) and (o12 = zerotime3)))) and (((o13 = zerotime) and
  ((o14 = zerotime1) and ((o15 = zerotime2) and (o16 = zerotime3)))) and
  ((o17 = o4) and ((((o18 = nullid) and ((o19 = nullid1) and
  (o20 = nullid2))) and (o21 = nullid3)) and ((o22 = o3) and (o23 = o2)))))))

axiom H6 : ((((temp___1899 = o5) and ((temp___18991 = o6) and
  (temp___18992 = o7))) and (temp___18993 = o8)) and
  (((temp___18994 = o9) and ((temp___18995 = o10) and
  ((temp___18996 = o11) and (temp___18997 = o12)))) and
  (((temp___18998 = o13) and ((temp___18999 = o14) and
  ((temp___189910 = o15) and (temp___189911 = o16)))) and
  ((temp___189912 = o17) and ((((temp___189913 = o18) and
  ((temp___189914 = o19) and (temp___189915 = o20))) and
  (temp___189916 = o21)) and ((temp___189917 = o22) and
  (temp___189918 = o23)))))))

axiom H7 : ((((temp___1899 = nullcontents) and
  ((temp___18991 = nullcontents1) and (temp___18992 = nullcontents2))) and
  (temp___18993 = nullcontents3)) and (((temp___18994 = nullcontents4) and
  ((temp___18995 = nullcontents5) and ((temp___18996 = nullcontents6) and
  (temp___18997 = nullcontents7)))) and (((temp___18998 = nullcontents8) and
  ((temp___18999 = nullcontents9) and ((temp___189910 = nullcontents10) and
  (temp___189911 = nullcontents11)))) and
  ((temp___189912 = nullcontents12) and
  ((((temp___189913 = nullcontents13) and
  ((temp___189914 = nullcontents14) and
  (temp___189915 = nullcontents15))) and
  (temp___189916 = nullcontents16)) and ((temp___189917 = nullcontents17) and
  (temp___189918 = nullcontents18)))))))

axiom H8 : ((((result = contents__split_fields) and
  ((result1 = contents__split_fields1) and
  (result2 = contents__split_fields2))) and
  (result3 = contents__split_fields3)) and
  (((result4 = contents__split_fields4) and
  ((result5 = contents__split_fields5) and
  ((result6 = contents__split_fields6) and
  (result7 = contents__split_fields7)))) and
  (((result8 = contents__split_fields8) and
  ((result9 = contents__split_fields9) and
  ((result10 = contents__split_fields10) and
  (result11 = contents__split_fields11)))) and
  ((result12 = contents__split_fields12) and
  ((((result13 = contents__split_fields13) and
  ((result14 = contents__split_fields14) and
  (result15 = contents__split_fields15))) and
  (result16 = contents__split_fields16)) and
  ((result17 = contents__split_fields17) and
  (result18 = contents__split_fields18)))))))

axiom H9 : ((((contents__split_fields19 = nullcontents) and
  ((contents__split_fields20 = nullcontents1) and
  (contents__split_fields21 = nullcontents2))) and
  (contents__split_fields22 = nullcontents3)) and
  (((contents__split_fields23 = nullcontents4) and
  ((contents__split_fields24 = nullcontents5) and
  ((contents__split_fields25 = nullcontents6) and
  (contents__split_fields26 = nullcontents7)))) and
  (((contents__split_fields27 = nullcontents8) and
  ((contents__split_fields28 = nullcontents9) and
  ((contents__split_fields29 = nullcontents10) and
  (contents__split_fields30 = nullcontents11)))) and
  ((contents__split_fields31 = nullcontents12) and
  ((((contents__split_fields32 = nullcontents13) and
  ((contents__split_fields33 = nullcontents14) and
  (contents__split_fields34 = nullcontents15))) and
  (contents__split_fields35 = nullcontents16)) and
  ((contents__split_fields36 = nullcontents17) and
  (contents__split_fields37 = nullcontents18)))))))

axiom H10 : ((((contents__split_fields38 = contents__split_fields19) and
  ((contents__split_fields39 = contents__split_fields20) and
  (contents__split_fields40 = contents__split_fields21))) and
  (contents__split_fields41 = contents__split_fields22)) and
  (((contents__split_fields42 = contents__split_fields23) and
  ((contents__split_fields43 = contents__split_fields24) and
  ((contents__split_fields44 = contents__split_fields25) and
  (contents__split_fields45 = contents__split_fields26)))) and
  (((contents__split_fields46 = contents__split_fields27) and
  ((contents__split_fields47 = contents__split_fields28) and
  ((contents__split_fields48 = contents__split_fields29) and
  (contents__split_fields49 = contents__split_fields30)))) and
  ((contents__split_fields50 = contents__split_fields31) and
  ((((contents__split_fields51 = contents__split_fields32) and
  ((contents__split_fields52 = contents__split_fields33) and
  (contents__split_fields53 = contents__split_fields34))) and
  (contents__split_fields54 = contents__split_fields35)) and
  ((contents__split_fields55 = contents__split_fields36) and
  (contents__split_fields56 = contents__split_fields37)))))))

axiom H11 : ((((contents__split_fields57 = contents__split_fields19) and
  ((contents__split_fields58 = contents__split_fields20) and
  (contents__split_fields59 = contents__split_fields21))) and
  (contents__split_fields60 = contents__split_fields22)) and
  (((contents__split_fields61 = contents__split_fields23) and
  ((contents__split_fields62 = contents__split_fields24) and
  ((contents__split_fields63 = contents__split_fields25) and
  (contents__split_fields64 = contents__split_fields26)))) and
  (((contents__split_fields65 = contents__split_fields27) and
  ((contents__split_fields66 = contents__split_fields28) and
  ((contents__split_fields67 = contents__split_fields29) and
  (contents__split_fields68 = contents__split_fields30)))) and
  ((contents__split_fields69 = contents__split_fields31) and
  ((((contents__split_fields70 = contents__split_fields32) and
  ((contents__split_fields71 = contents__split_fields33) and
  (contents__split_fields72 = contents__split_fields34))) and
  (contents__split_fields73 = contents__split_fields35)) and
  ((contents__split_fields74 = contents__split_fields36) and
  (contents__split_fields75 = contents__split_fields37)))))))

 (* File "cert-attr-auth.adb", line 172, characters 0-0 *)
goal WP_parameter_def : (therole({ us_split_fields9 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = contents__split_fields38;
  rec__cryptotypes__issuert__namelength = contents__split_fields39;
  rec__cryptotypes__issuert__name = contents__split_fields40 } };
  rec__certtypes__idt__serialnumber = contents__split_fields41 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields7 = {
  rec__clock__timet__year = contents__split_fields42;
  rec__clock__timet__month = contents__split_fields43;
  rec__clock__timet__day = contents__split_fields44;
  rec__clock__timet__millisec = contents__split_fields45 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields7 = {
  rec__clock__timet__year = contents__split_fields46;
  rec__clock__timet__month = contents__split_fields47;
  rec__clock__timet__day = contents__split_fields48;
  rec__clock__timet__millisec = contents__split_fields49 } };
  rec__cert__attr__auth__contentst__mechanism = contents__split_fields50;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = contents__split_fields51;
  rec__cryptotypes__issuert__namelength = contents__split_fields52;
  rec__cryptotypes__issuert__name = contents__split_fields53 } };
  rec__certtypes__idt__serialnumber = contents__split_fields54 } };
  rec__cert__attr__auth__contentst__role = contents__split_fields55;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields5 = {
  rec__privtypes__clearancet__class = contents__split_fields56 } } } }) = 0)
