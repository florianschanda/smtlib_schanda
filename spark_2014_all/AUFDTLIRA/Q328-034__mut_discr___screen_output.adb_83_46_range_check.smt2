(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (character Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a character)) (forall ((b (Array Int character))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int character) Int Int character) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((b character)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (character Int character) (Array Int character))
(assert (forall ((a character) (b character)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun current_line (us_private us_private) us_t)
(declare-fun current_line__function_guard (us_t us_private us_private) Bool)
(assert (forall ((input__line us_private) (input__last_char us_private)) (! (dynamic_invariant2 (current_line input__line input__last_char) true false true true) :pattern ((current_line input__line input__last_char)))))
(declare-fun column_number (us_private us_private) Int)
(declare-fun column_number__function_guard (Int us_private us_private) Bool)
(assert (forall ((input__line us_private) (input__first_char us_private)) (! (dynamic_invariant (column_number input__line input__first_char) true false true true) :pattern ((column_number input__line input__first_char)))))
(declare-fun line_number (us_private) Int)
(declare-fun line_number__function_guard (Int us_private) Bool)
(assert (forall ((input__line_num us_private)) (! (dynamic_invariant (line_number input__line_num) true false true true) :pattern ((line_number input__line_num)))))
(declare-const s us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const error_pos Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r14b Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___String_Literal_675 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (= (to_rep (select (temp___String_Literal_675 us_void_param) 1)) 115) (= (to_rep (select (temp___String_Literal_675 us_void_param) 2)) 100)) (= (to_rep (select (temp___String_Literal_675 us_void_param) 3)) 99)) (= (to_rep (select (temp___String_Literal_675 us_void_param) 4)) 58)) :pattern ((temp___String_Literal_675 us_void_param)))))
(declare-fun temp___String_Literal_676 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (= (to_rep (select (temp___String_Literal_676 us_void_param) 1)) 115) (= (to_rep (select (temp___String_Literal_676 us_void_param) 2)) 100)) (= (to_rep (select (temp___String_Literal_676 us_void_param) 3)) 99)) (= (to_rep (select (temp___String_Literal_676 us_void_param) 4)) 58)) :pattern ((temp___String_Literal_676 us_void_param)))))
(declare-fun temp___String_Literal_677 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_677 us_void_param) 1)) 45) :pattern ((temp___String_Literal_677 us_void_param)))))
(declare-fun temp___String_Literal_680 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_680 us_void_param) 1)) 33) :pattern ((temp___String_Literal_680 us_void_param)))))
(declare-fun temp___String_Literal_681 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_681 us_void_param) 1)) 115) (= (to_rep (select (temp___String_Literal_681 us_void_param) 2)) 100)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 3)) 99)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 5)) 105)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 6)) 110)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 7)) 112)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 8)) 117)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 9)) 116)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 11)) 101)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 12)) 114)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 13)) 114)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 14)) 111)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 15)) 114)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 16)) 32)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 17)) 97)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 18)) 116)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 19)) 32)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 20)) 108)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 21)) 105)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 22)) 110)) (= (to_rep (select (temp___String_Literal_681 us_void_param) 23)) 101)) :pattern ((temp___String_Literal_681 us_void_param)))))
(declare-fun temp___String_Literal_682 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_682 us_void_param) 1)) 58) (= (to_rep (select (temp___String_Literal_682 us_void_param) 2)) 32)) :pattern ((temp___String_Literal_682 us_void_param)))))
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(declare-const pos Int)
(declare-const i Int)
(declare-const line us_private)
(declare-const first_char us_private)
(declare-const last_char us_private)
(declare-const line_num us_private)
(declare-const o Int)
(declare-const o1 (Array Int character))
(declare-const o2 t)
(declare-const o3 Int)
(declare-const o4 us_image)
(declare-const temp___683 (Array Int character))
(declare-const temp___6831 t)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const result Int)
(declare-const pos1 Int)
(declare-const result1 Int)
(declare-const pos2 Int)
(declare-const result2 Int)
(declare-const i1 Int)
(declare-const i2 Int)
(declare-const i3 Int)
(declare-const i4 Int)
(declare-const i5 Int)
(declare-const i6 Int)
(define-fun temp___6832 () us_t (mk___t temp___683 temp___6831))
(define-fun o10 () us_t (mk___t o1 o2))
(assert (dynamic_invariant2 s true false true true))
(assert (in_range4 error_pos))
(assert (= result pos))
(assert (= pos1 error_pos))
(assert (in_range4 pos1))
(assert (=> (= pos1 0) (and (= o (column_number line first_char)) (in_range4 o))))
(assert (=> (= pos1 0) (= result1 pos1)))
(assert (=> (= pos1 0) (= pos2 o)))
(assert (=> (not (= pos1 0)) (= pos2 pos1)))
(assert (and (= o10 (current_line line last_char)) (dynamic_invariant2 o10 true false true true)))
(assert (= (- pos2 1) r14b))
(assert (in_range1 r14b))
(assert (= result2 i))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 r14b)) (and (<= 1 i2) (<= i2 r14b))))
(assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i2 r14b)))
(assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 r14b)) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i6 i4)))
(assert (=> (not (and (<= 1 i1) (<= i1 r14b))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 r14b))) (= i6 i1)))
(assert (and (= o3 (line_number line_num)) (in_range4 o3)))
(assert (= o4 (attr__ATTRIBUTE_IMAGE4 o3)))
(assert (= temp___6832 (to_string o4)))
(assert (not (= (length temp___6832) 0)))
(assert (=> (<= 1 2) (= o5 (+ (- 2 1) 1))))
(assert (=> (not (<= 1 2)) (= o5 0)))
(assert (=> (<= (to_rep1 (first temp___6831)) (to_rep1 (last temp___6831))) (= o6 (+ (- (to_rep1 (last temp___6831)) (to_rep1 (first temp___6831))) 1))))
(assert (=> (not (<= (to_rep1 (first temp___6831)) (to_rep1 (last temp___6831)))) (= o6 0)))
(assert (= o7 (+ o6 o5)))
(assert (= o8 (+ (to_rep1 (first temp___6831)) o7)))
(assert (= o9 (- o8 1)))
(assert (not (in_range2 o9)))
(check-sat)
(exit)
