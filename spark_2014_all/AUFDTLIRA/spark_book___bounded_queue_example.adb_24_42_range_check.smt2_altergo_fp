(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic to_rep3 : positive -> int

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range1(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range1(x) ->
  (to_rep3(of_rep3(x)) = x)))

type element_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic to_rep4 : element_type -> int

logic of_rep4 : int -> element_type

axiom inversion_axiom4 :
  (forall x:element_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:element_type [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic max_size : int

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref1 = { map__content1 : (int,element_type) farray
}

logic slide1 : (int,element_type) farray, int,
  int -> (int,element_type) farray

axiom slide_eq1 :
  (forall a:(int,element_type) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,element_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> (int,element_type) farray

axiom concat_def1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : element_type, int -> (int,element_type) farray

axiom singleton_def1 :
  (forall v:element_type.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq8 : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> bool

axiom bool_eq_def6 :
  (forall a:(int,element_type) farray. forall a__first:int.
  forall a__last:int. forall b:(int,element_type) farray.
  forall b__first:int. forall b__last:int [bool_eq8(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep4((a[temp___idx_151])) = to_rep4((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep4((a[temp___idx_151])) = to_rep4((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep4((a[temp___idx_151])) = to_rep4((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare1 : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep4((a[(i + 1)])) <  to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep4((b[(i + 1)])) <  to_rep4((a[(j + 1)]))))))))))))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t14b__ref = { t14b__content : integer
}

function t14b__ref___projection(a: t14b__ref) : integer = (a).t14b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,element_type) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,element_type) farray = (a).elts1

function of_array1(a: (int,element_type) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,element_type) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,element_type) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,element_type) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,element_type) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,element_type) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,element_type) farray. (0 <= object__alignment1(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,element_type) farray

logic dummy9 : t1

type t15b__ref = { t15b__content : us_t1
}

function t15b__ref___projection(a: t15b__ref) : us_t1 = (a).t15b__content

type us_split_discrs = {
rec__bounded_queue_example__char_queue__queue_type__max_size : positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__max_size

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__bounded_queue_example__char_queue__queue_type__count : natural;
rec__bounded_queue_example__char_queue__queue_type__front : positive;
rec__bounded_queue_example__char_queue__queue_type__rear : positive;
rec__bounded_queue_example__char_queue__queue_type__items : us_t1
}

function us_split_fields_Count__projection(a: us_split_fields) : natural =
  (a).rec__bounded_queue_example__char_queue__queue_type__count

function us_split_fields_Front__projection(a: us_split_fields) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__front

function us_split_fields_Rear__projection(a: us_split_fields) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__rear

function us_split_fields_Items__projection(a: us_split_fields) : us_t1 =
  (a).rec__bounded_queue_example__char_queue__queue_type__items

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def8 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((to_rep3(((a).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size) = to_rep3(((b).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count) = to_rep2(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count)) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front) = to_rep3(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front))) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear) = to_rep3(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear))) and
  (bool_eq10(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items,
  ((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items) = true))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size) = to_rep3(((b).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count) = to_rep2(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count)) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front) = to_rep3(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front))) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear) = to_rep3(((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear))) and
  (bool_eq10(((a).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items,
  ((b).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items) = true)))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray. forall a5:t1.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = a };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = a1;
  rec__bounded_queue_example__char_queue__queue_type__front = a2;
  rec__bounded_queue_example__char_queue__queue_type__rear = a3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 = a4;
  rt1 = a5 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray. forall a5:t1.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = a };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = a1;
  rec__bounded_queue_example__char_queue__queue_type__front = a2;
  rec__bounded_queue_example__char_queue__queue_type__rear = a3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 = a4;
  rt1 = a5 } } })))

logic bounded_queue_example__char_queue__queue_type__max_size__first__bit : int

logic bounded_queue_example__char_queue__queue_type__max_size__last__bit : int

logic bounded_queue_example__char_queue__queue_type__max_size__position : int

axiom bounded_queue_example__char_queue__queue_type__max_size__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__max_size__first__bit)

axiom bounded_queue_example__char_queue__queue_type__max_size__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__max_size__first__bit <  bounded_queue_example__char_queue__queue_type__max_size__last__bit)

axiom bounded_queue_example__char_queue__queue_type__max_size__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__max_size__position)

logic bounded_queue_example__char_queue__queue_type__count__first__bit : int

logic bounded_queue_example__char_queue__queue_type__count__last__bit : int

logic bounded_queue_example__char_queue__queue_type__count__position : int

axiom bounded_queue_example__char_queue__queue_type__count__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__count__first__bit)

axiom bounded_queue_example__char_queue__queue_type__count__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__count__first__bit <  bounded_queue_example__char_queue__queue_type__count__last__bit)

axiom bounded_queue_example__char_queue__queue_type__count__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__count__position)

logic bounded_queue_example__char_queue__queue_type__front__first__bit : int

logic bounded_queue_example__char_queue__queue_type__front__last__bit : int

logic bounded_queue_example__char_queue__queue_type__front__position : int

axiom bounded_queue_example__char_queue__queue_type__front__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__front__first__bit)

axiom bounded_queue_example__char_queue__queue_type__front__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__front__first__bit <  bounded_queue_example__char_queue__queue_type__front__last__bit)

axiom bounded_queue_example__char_queue__queue_type__front__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__front__position)

logic bounded_queue_example__char_queue__queue_type__rear__first__bit : int

logic bounded_queue_example__char_queue__queue_type__rear__last__bit : int

logic bounded_queue_example__char_queue__queue_type__rear__position : int

axiom bounded_queue_example__char_queue__queue_type__rear__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__rear__first__bit)

axiom bounded_queue_example__char_queue__queue_type__rear__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__rear__first__bit <  bounded_queue_example__char_queue__queue_type__rear__last__bit)

axiom bounded_queue_example__char_queue__queue_type__rear__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__rear__position)

logic bounded_queue_example__char_queue__queue_type__items__first__bit : int

logic bounded_queue_example__char_queue__queue_type__items__last__bit : int

logic bounded_queue_example__char_queue__queue_type__items__position : int

axiom bounded_queue_example__char_queue__queue_type__items__first__bit_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__items__first__bit)

axiom bounded_queue_example__char_queue__queue_type__items__last__bit_axiom :
  (bounded_queue_example__char_queue__queue_type__items__first__bit <  bounded_queue_example__char_queue__queue_type__items__last__bit)

axiom bounded_queue_example__char_queue__queue_type__items__position_axiom :
  (0 <= bounded_queue_example__char_queue__queue_type__items__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy10 : positive

logic dummy11 : natural

logic dummy12 : positive

logic dummy13 : positive

logic dummy14 : (int,element_type) farray

logic dummy15 : t1

type queue_type__ref = { queue_type__content : us_rep
}

function queue_type__ref___projection(a: queue_type__ref) : us_rep =
  (a).queue_type__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

axiom size__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t1 [size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } })]. ((dynamic_property2(1, to_rep3(queue),
  to_rep1(first2(queue5)), to_rep1(last2(queue5))) and
  ((to_rep1(first2(queue5)) = 1) and
  (to_rep1(last2(queue5)) = to_rep3(queue)))) -> in_range3(size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } }))))

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

logic full : us_rep -> bool

logic full__function_guard : bool, us_rep -> prop

logic last_element : us_rep -> int

logic last_element__function_guard : int, us_rep -> prop

logic first_element : us_rep -> int

logic first_element__function_guard : int, us_rep -> prop

type tT16bP1

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : tT16bP1, tT16bP1 -> bool

logic dummy16 : tT16bP1

type tT16bP1__ref = { tT16bP1__content : tT16bP1
}

function tT16bP1__ref___projection(a: tT16bP1__ref) : tT16bP1 =
  (a).tT16bP1__content

logic dummy17 : (int,element_type) farray

logic value__size3 : int

logic object__size3 : (int,element_type) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,element_type) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,element_type) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,element_type) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,element_type) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,element_type) farray. (0 <= object__alignment3(a)))

logic user_eq10 : (int,element_type) farray,
  (int,element_type) farray -> bool

type us_split_fields2 = {
rec__bounded_queue_example__char_queue__queue_type__count1 : natural;
rec__bounded_queue_example__char_queue__queue_type__front1 : positive;
rec__bounded_queue_example__char_queue__queue_type__rear1 : positive;
rec__bounded_queue_example__char_queue__queue_type__items1 :
(int,element_type) farray
}

function us_split_fields_Count__7__projection(a: us_split_fields2) : natural =
  (a).rec__bounded_queue_example__char_queue__queue_type__count1

function us_split_fields_Front__7__projection(a: us_split_fields2) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__front1

function us_split_fields_Rear__7__projection(a: us_split_fields2) : positive =
  (a).rec__bounded_queue_example__char_queue__queue_type__rear1

function us_split_fields_Items__7__projection(a: us_split_fields2) : (int,element_type) farray =
  (a).rec__bounded_queue_example__char_queue__queue_type__items1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___15__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___16__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  ((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__count1;
  rec__bounded_queue_example__char_queue__queue_type__front =
  ((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__front1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  ((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__rear1;
  rec__bounded_queue_example__char_queue__queue_type__items =
  of_array1(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__items1,
  1, 100) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__bounded_queue_example__char_queue__queue_type__count1 =
  ((r).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__count;
  rec__bounded_queue_example__char_queue__queue_type__front1 =
  ((r).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__front;
  rec__bounded_queue_example__char_queue__queue_type__rear1 =
  ((r).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__rear;
  rec__bounded_queue_example__char_queue__queue_type__items1 =
  to_array1(((r).us_split_fields1).rec__bounded_queue_example__char_queue__queue_type__items)
  } }

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  ((((to_rep3(((a).us_split_discrs2).rec__bounded_queue_example__char_queue__queue_type__max_size) = to_rep3(((b).us_split_discrs2).rec__bounded_queue_example__char_queue__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__count1) = to_rep2(((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__count1)) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__front1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__front1))) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__rear1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__rear1))) and
  (bool_eq8(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__items1,
  1, 100,
  ((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__items1,
  1, 100) = true))) -> (bool_eq13(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs2).rec__bounded_queue_example__char_queue__queue_type__max_size) = to_rep3(((b).us_split_discrs2).rec__bounded_queue_example__char_queue__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__count1) = to_rep2(((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__count1)) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__front1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__front1))) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__rear1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__rear1))) and
  (bool_eq8(((a).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__items1,
  1, 100,
  ((b).us_split_fields3).rec__bounded_queue_example__char_queue__queue_type__items1,
  1, 100) = true)))) -> (bool_eq13(a, b) = false))))

predicate in_range6(rec__bounded_queue_example__char_queue__queue_type__max_size1: int,
  a: us_rep) =
  (rec__bounded_queue_example__char_queue__queue_type__max_size1 = to_rep3(((a).us_split_discrs1).rec__bounded_queue_example__char_queue__queue_type__max_size))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray.
  (0 <= object__size4({ us_split_discrs2 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = a };
  us_split_fields3 = {
  rec__bounded_queue_example__char_queue__queue_type__count1 = a1;
  rec__bounded_queue_example__char_queue__queue_type__front1 = a2;
  rec__bounded_queue_example__char_queue__queue_type__rear1 = a3;
  rec__bounded_queue_example__char_queue__queue_type__items1 = a4 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray.
  (0 <= object__alignment4({ us_split_discrs2 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = a };
  us_split_fields3 = {
  rec__bounded_queue_example__char_queue__queue_type__count1 = a1;
  rec__bounded_queue_example__char_queue__queue_type__front1 = a2;
  rec__bounded_queue_example__char_queue__queue_type__rear1 = a3;
  rec__bounded_queue_example__char_queue__queue_type__items1 = a4 } })))

logic bounded_queue_example__char_queue__queue_type__max_size__first__bit1 : int

logic bounded_queue_example__char_queue__queue_type__max_size__last__bit1 : int

logic bounded_queue_example__char_queue__queue_type__max_size__position1 : int

axiom bounded_queue_example__char_queue__queue_type__max_size__first__bit_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__max_size__first__bit1)

axiom bounded_queue_example__char_queue__queue_type__max_size__last__bit_axiom1 :
  (bounded_queue_example__char_queue__queue_type__max_size__first__bit1 <  bounded_queue_example__char_queue__queue_type__max_size__last__bit1)

axiom bounded_queue_example__char_queue__queue_type__max_size__position_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__max_size__position1)

logic bounded_queue_example__char_queue__queue_type__count__first__bit1 : int

logic bounded_queue_example__char_queue__queue_type__count__last__bit1 : int

logic bounded_queue_example__char_queue__queue_type__count__position1 : int

axiom bounded_queue_example__char_queue__queue_type__count__first__bit_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__count__first__bit1)

axiom bounded_queue_example__char_queue__queue_type__count__last__bit_axiom1 :
  (bounded_queue_example__char_queue__queue_type__count__first__bit1 <  bounded_queue_example__char_queue__queue_type__count__last__bit1)

axiom bounded_queue_example__char_queue__queue_type__count__position_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__count__position1)

logic bounded_queue_example__char_queue__queue_type__front__first__bit1 : int

logic bounded_queue_example__char_queue__queue_type__front__last__bit1 : int

logic bounded_queue_example__char_queue__queue_type__front__position1 : int

axiom bounded_queue_example__char_queue__queue_type__front__first__bit_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__front__first__bit1)

axiom bounded_queue_example__char_queue__queue_type__front__last__bit_axiom1 :
  (bounded_queue_example__char_queue__queue_type__front__first__bit1 <  bounded_queue_example__char_queue__queue_type__front__last__bit1)

axiom bounded_queue_example__char_queue__queue_type__front__position_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__front__position1)

logic bounded_queue_example__char_queue__queue_type__rear__first__bit1 : int

logic bounded_queue_example__char_queue__queue_type__rear__last__bit1 : int

logic bounded_queue_example__char_queue__queue_type__rear__position1 : int

axiom bounded_queue_example__char_queue__queue_type__rear__first__bit_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__rear__first__bit1)

axiom bounded_queue_example__char_queue__queue_type__rear__last__bit_axiom1 :
  (bounded_queue_example__char_queue__queue_type__rear__first__bit1 <  bounded_queue_example__char_queue__queue_type__rear__last__bit1)

axiom bounded_queue_example__char_queue__queue_type__rear__position_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__rear__position1)

logic bounded_queue_example__char_queue__queue_type__items__first__bit1 : int

logic bounded_queue_example__char_queue__queue_type__items__last__bit1 : int

logic bounded_queue_example__char_queue__queue_type__items__position1 : int

axiom bounded_queue_example__char_queue__queue_type__items__first__bit_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__items__first__bit1)

axiom bounded_queue_example__char_queue__queue_type__items__last__bit_axiom1 :
  (bounded_queue_example__char_queue__queue_type__items__first__bit1 <  bounded_queue_example__char_queue__queue_type__items__last__bit1)

axiom bounded_queue_example__char_queue__queue_type__items__position_axiom1 :
  (0 <= bounded_queue_example__char_queue__queue_type__items__position1)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy18 : positive

logic dummy19 : natural

logic dummy20 : positive

logic dummy21 : positive

logic dummy22 : (int,element_type) farray

type tmy_queueS__ref = { tmy_queueS__content : us_rep1
}

function tmy_queueS__ref___projection(a: tmy_queueS__ref) : us_rep1 =
  (a).tmy_queueS__content

logic my_queue__split_discrs : positive

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___String_Literal_650 : unit -> (int,character) farray

axiom temp___String_Literal_650__def_axiom :
  (((((((((((((((((((((((((to_rep((temp___String_Literal_650(void)[1])) = 83) and
  (to_rep((temp___String_Literal_650(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_650(void)[3])) = 122)) and
  (to_rep((temp___String_Literal_650(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_650(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_650(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_650(void)[7])) = 102)) and
  (to_rep((temp___String_Literal_650(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_650(void)[9])) = 99)) and
  (to_rep((temp___String_Literal_650(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_650(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_650(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_650(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_650(void)[14])) = 101)) and
  (to_rep((temp___String_Literal_650(void)[15])) = 100)) and
  (to_rep((temp___String_Literal_650(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_650(void)[17])) = 113)) and
  (to_rep((temp___String_Literal_650(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_650(void)[19])) = 101)) and
  (to_rep((temp___String_Literal_650(void)[20])) = 117)) and
  (to_rep((temp___String_Literal_650(void)[21])) = 101)) and
  (to_rep((temp___String_Literal_650(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_650(void)[23])) = 105)) and
  (to_rep((temp___String_Literal_650(void)[24])) = 115)) and
  (to_rep((temp___String_Literal_650(void)[25])) = 32))

axiom full__post_axiom : true

axiom empty__post_axiom : true

axiom first_element__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t1 [first_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } })]. (((dynamic_property2(1, to_rep3(queue),
  to_rep1(first2(queue5)), to_rep1(last2(queue5))) and
  ((to_rep1(first2(queue5)) = 1) and
  (to_rep1(last2(queue5)) = to_rep3(queue)))) and (not (empty({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } }) = true))) -> in_range4(first_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } }))))

axiom last_element__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t1 [last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } })]. (((dynamic_property2(1, to_rep3(queue),
  to_rep1(first2(queue5)), to_rep1(last2(queue5))) and
  ((to_rep1(first2(queue5)) = 1) and
  (to_rep1(last2(queue5)) = to_rep3(queue)))) and (not (empty({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } }) = true))) -> in_range4(last_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size = queue };
  us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count = queue1;
  rec__bounded_queue_example__char_queue__queue_type__front = queue2;
  rec__bounded_queue_example__char_queue__queue_type__rear = queue3;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  queue4; rt1 = queue5 } } }))))

logic my_queue__split_fields : natural

logic my_queue__split_fields1 : positive

logic my_queue__split_fields2 : positive

logic my_queue__split_fields3 : (int,element_type) farray

logic value : int

logic char : int

logic count : int

logic us : int

logic o : int

logic o1 : us_image

logic temp___652 : (int,character) farray

logic temp___6521 : t

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic bounded_queue_example__char_queue__clear__queue__fields : natural

logic bounded_queue_example__char_queue__clear__queue__fields1 : positive

logic bounded_queue_example__char_queue__clear__queue__fields2 : positive

logic bounded_queue_example__char_queue__clear__queue__fields3 : (int,element_type) farray

logic bounded_queue_example__char_queue__clear__queue__fields4 : t1

logic result : natural

logic result1 : positive

logic result2 : positive

logic result3 : (int,element_type) farray

logic my_queue__split_fields4 : natural

logic my_queue__split_fields5 : positive

logic my_queue__split_fields6 : positive

logic my_queue__split_fields7 : (int,element_type) farray

logic result4 : int

logic char1 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields1 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields2 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields3 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields4 : t1

logic result5 : natural

logic result6 : positive

logic result7 : positive

logic result8 : (int,element_type) farray

logic my_queue__split_fields8 : natural

logic my_queue__split_fields9 : positive

logic my_queue__split_fields10 : positive

logic my_queue__split_fields11 : (int,element_type) farray

logic result9 : int

logic char2 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields5 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields6 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields7 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields8 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields9 : t1

logic result10 : natural

logic result11 : positive

logic result12 : positive

logic result13 : (int,element_type) farray

logic my_queue__split_fields12 : natural

logic my_queue__split_fields13 : positive

logic my_queue__split_fields14 : positive

logic my_queue__split_fields15 : (int,element_type) farray

logic result14 : int

logic char3 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields10 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields11 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields12 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields13 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields14 : t1

logic result15 : natural

logic result16 : positive

logic result17 : positive

logic result18 : (int,element_type) farray

logic my_queue__split_fields16 : natural

logic my_queue__split_fields17 : positive

logic my_queue__split_fields18 : positive

logic my_queue__split_fields19 : (int,element_type) farray

logic result19 : int

logic char4 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields15 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields16 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields17 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields18 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields19 : t1

logic result20 : natural

logic result21 : positive

logic result22 : positive

logic result23 : (int,element_type) farray

logic my_queue__split_fields20 : natural

logic my_queue__split_fields21 : positive

logic my_queue__split_fields22 : positive

logic my_queue__split_fields23 : (int,element_type) farray

logic result24 : int

logic char5 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields20 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields21 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields22 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields23 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields24 : t1

logic result25 : natural

logic result26 : positive

logic result27 : positive

logic result28 : (int,element_type) farray

logic my_queue__split_fields24 : natural

logic my_queue__split_fields25 : positive

logic my_queue__split_fields26 : positive

logic my_queue__split_fields27 : (int,element_type) farray

logic result29 : int

logic char6 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields25 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields26 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields27 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields28 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields29 : t1

logic result30 : natural

logic result31 : positive

logic result32 : positive

logic result33 : (int,element_type) farray

logic my_queue__split_fields28 : natural

logic my_queue__split_fields29 : positive

logic my_queue__split_fields30 : positive

logic my_queue__split_fields31 : (int,element_type) farray

logic result34 : int

logic char7 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields30 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields31 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields32 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields33 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields34 : t1

logic result35 : natural

logic result36 : positive

logic result37 : positive

logic result38 : (int,element_type) farray

logic my_queue__split_fields32 : natural

logic my_queue__split_fields33 : positive

logic my_queue__split_fields34 : positive

logic my_queue__split_fields35 : (int,element_type) farray

logic result39 : int

logic char8 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields35 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields36 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields37 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields38 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields39 : t1

logic result40 : natural

logic result41 : positive

logic result42 : positive

logic result43 : (int,element_type) farray

logic my_queue__split_fields36 : natural

logic my_queue__split_fields37 : positive

logic my_queue__split_fields38 : positive

logic my_queue__split_fields39 : (int,element_type) farray

logic result44 : int

logic char9 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields40 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields41 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields42 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields43 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields44 : t1

logic result45 : natural

logic result46 : positive

logic result47 : positive

logic result48 : (int,element_type) farray

logic my_queue__split_fields40 : natural

logic my_queue__split_fields41 : positive

logic my_queue__split_fields42 : positive

logic my_queue__split_fields43 : (int,element_type) farray

logic result49 : int

logic char10 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields45 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields46 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields47 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields48 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields49 : t1

logic result50 : natural

logic result51 : positive

logic result52 : positive

logic result53 : (int,element_type) farray

logic my_queue__split_fields44 : natural

logic my_queue__split_fields45 : positive

logic my_queue__split_fields46 : positive

logic my_queue__split_fields47 : (int,element_type) farray

logic result54 : int

logic char11 : int

logic bounded_queue_example__char_queue__enqueue__queue__fields50 : natural

logic bounded_queue_example__char_queue__enqueue__queue__fields51 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields52 : positive

logic bounded_queue_example__char_queue__enqueue__queue__fields53 : (int,element_type) farray

logic bounded_queue_example__char_queue__enqueue__queue__fields54 : t1

logic result55 : natural

logic result56 : positive

logic result57 : positive

logic result58 : (int,element_type) farray

logic my_queue__split_fields48 : natural

logic my_queue__split_fields49 : positive

logic my_queue__split_fields50 : positive

logic my_queue__split_fields51 : (int,element_type) farray

logic result59 : int

logic count1 : int

logic bounded_queue_example__char_queue__dequeue__item : int

logic bounded_queue_example__char_queue__dequeue__queue__fields : natural

logic bounded_queue_example__char_queue__dequeue__queue__fields1 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields2 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields3 : (int,element_type) farray

logic bounded_queue_example__char_queue__dequeue__queue__fields4 : t1

logic result60 : natural

logic result61 : positive

logic result62 : positive

logic result63 : (int,element_type) farray

logic my_queue__split_fields52 : natural

logic my_queue__split_fields53 : positive

logic my_queue__split_fields54 : positive

logic my_queue__split_fields55 : (int,element_type) farray

logic result64 : int

logic value1 : int

logic result65 : int

logic count2 : int

logic bounded_queue_example__char_queue__dequeue__item1 : int

logic bounded_queue_example__char_queue__dequeue__queue__fields5 : natural

logic bounded_queue_example__char_queue__dequeue__queue__fields6 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields7 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields8 : (int,element_type) farray

logic bounded_queue_example__char_queue__dequeue__queue__fields9 : t1

logic result66 : natural

logic result67 : positive

logic result68 : positive

logic result69 : (int,element_type) farray

logic my_queue__split_fields56 : natural

logic my_queue__split_fields57 : positive

logic my_queue__split_fields58 : positive

logic my_queue__split_fields59 : (int,element_type) farray

logic result70 : int

logic value2 : int

logic result71 : int

logic count3 : int

logic bounded_queue_example__char_queue__dequeue__item2 : int

logic bounded_queue_example__char_queue__dequeue__queue__fields10 : natural

logic bounded_queue_example__char_queue__dequeue__queue__fields11 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields12 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields13 : (int,element_type) farray

logic bounded_queue_example__char_queue__dequeue__queue__fields14 : t1

logic result72 : natural

logic result73 : positive

logic result74 : positive

logic result75 : (int,element_type) farray

logic my_queue__split_fields60 : natural

logic my_queue__split_fields61 : positive

logic my_queue__split_fields62 : positive

logic my_queue__split_fields63 : (int,element_type) farray

logic result76 : int

logic value3 : int

logic result77 : int

logic count4 : int

logic bounded_queue_example__char_queue__dequeue__item3 : int

logic bounded_queue_example__char_queue__dequeue__queue__fields15 : natural

logic bounded_queue_example__char_queue__dequeue__queue__fields16 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields17 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields18 : (int,element_type) farray

logic bounded_queue_example__char_queue__dequeue__queue__fields19 : t1

logic result78 : natural

logic result79 : positive

logic result80 : positive

logic result81 : (int,element_type) farray

logic my_queue__split_fields64 : natural

logic my_queue__split_fields65 : positive

logic my_queue__split_fields66 : positive

logic my_queue__split_fields67 : (int,element_type) farray

logic result82 : int

logic value4 : int

logic result83 : int

logic count5 : int

logic bounded_queue_example__char_queue__dequeue__item4 : int

logic bounded_queue_example__char_queue__dequeue__queue__fields20 : natural

logic bounded_queue_example__char_queue__dequeue__queue__fields21 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields22 : positive

logic bounded_queue_example__char_queue__dequeue__queue__fields23 : (int,element_type) farray

logic bounded_queue_example__char_queue__dequeue__queue__fields24 : t1

logic result84 : natural

logic result85 : positive

logic result86 : positive

logic result87 : (int,element_type) farray

logic my_queue__split_fields68 : natural

logic my_queue__split_fields69 : positive

logic my_queue__split_fields70 : positive

logic my_queue__split_fields71 : (int,element_type) farray

logic result88 : int

logic value5 : int

logic bounded_queue_example__char_queue__clear__queue__fields5 : natural

logic bounded_queue_example__char_queue__clear__queue__fields6 : positive

logic bounded_queue_example__char_queue__clear__queue__fields7 : positive

logic bounded_queue_example__char_queue__clear__queue__fields8 : (int,element_type) farray

logic bounded_queue_example__char_queue__clear__queue__fields9 : t1

logic result89 : natural

logic result90 : positive

logic result91 : positive

logic result92 : (int,element_type) farray

logic my_queue__split_fields72 : natural

logic my_queue__split_fields73 : positive

logic my_queue__split_fields74 : positive

logic my_queue__split_fields75 : (int,element_type) farray

axiom H : ((us = 100) and in_range1(100))

axiom H1 : ((((to_rep3(my_queue__split_discrs) = 100) and
  (to_rep2(my_queue__split_fields) = 0)) and
  (to_rep3(my_queue__split_fields1) = 1)) and
  (to_rep3(my_queue__split_fields2) = max_size))

axiom H2 : (100 = to_rep3(my_queue__split_discrs))

axiom H3 : ((0 <= 255) -> in_range2(value))

axiom H4 : (((empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__clear__queue__fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__clear__queue__fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__clear__queue__fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__clear__queue__fields3; rt1 =
  bounded_queue_example__char_queue__clear__queue__fields4 } } }) = true) and
  (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__clear__queue__fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__clear__queue__fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__clear__queue__fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__clear__queue__fields3; rt1 =
  bounded_queue_example__char_queue__clear__queue__fields4 } } }) = 0)) and
  (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__clear__queue__fields4)),
  to_rep1(last2(bounded_queue_example__char_queue__clear__queue__fields4))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__clear__queue__fields4)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__clear__queue__fields4)) = to_rep3(my_queue__split_discrs)))))

axiom H5 : (result = my_queue__split_fields)

axiom H6 : (result1 = my_queue__split_fields1)

axiom H7 : (result2 = my_queue__split_fields2)

axiom H8 : (result3 = my_queue__split_fields3)

axiom H9 :
  (bounded_queue_example__char_queue__clear__queue__fields = my_queue__split_fields4)

axiom H10 :
  (bounded_queue_example__char_queue__clear__queue__fields1 = my_queue__split_fields5)

axiom H11 :
  (bounded_queue_example__char_queue__clear__queue__fields2 = my_queue__split_fields6)

axiom H12 :
  (bounded_queue_example__char_queue__clear__queue__fields3 = my_queue__split_fields7)

axiom H13 : (result4 = char)

axiom H14 : (char1 = 102)

axiom H15 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields3; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields4 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields3; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields4 } } }) = (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields4;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields5;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields6;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields7; rt1 = mk1(1, 100) } } }) + 1)) and (last_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields3; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields4 } }
  }) = char1))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields4)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields4))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields4)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields4)) = to_rep3(my_queue__split_discrs)))))

axiom H16 : (result5 = my_queue__split_fields4)

axiom H17 : (result6 = my_queue__split_fields5)

axiom H18 : (result7 = my_queue__split_fields6)

axiom H19 : (result8 = my_queue__split_fields7)

axiom H20 :
  (bounded_queue_example__char_queue__enqueue__queue__fields = my_queue__split_fields8)

axiom H21 :
  (bounded_queue_example__char_queue__enqueue__queue__fields1 = my_queue__split_fields9)

axiom H22 :
  (bounded_queue_example__char_queue__enqueue__queue__fields2 = my_queue__split_fields10)

axiom H23 :
  (bounded_queue_example__char_queue__enqueue__queue__fields3 = my_queue__split_fields11)

axiom H24 : (char1 = result9)

axiom H25 : (char2 = 103)

axiom H26 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields5;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields6;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields7;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields8; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields9 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields5;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields6;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields7;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields8; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields9 } } }) = (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields8;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields9;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields10;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields11; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields5;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields6;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields7;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields8; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields9 } }
  }) = char2))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields9)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields9))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields9)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields9)) = to_rep3(my_queue__split_discrs)))))

axiom H27 : (result10 = my_queue__split_fields8)

axiom H28 : (result11 = my_queue__split_fields9)

axiom H29 : (result12 = my_queue__split_fields10)

axiom H30 : (result13 = my_queue__split_fields11)

axiom H31 :
  ((my_queue__split_fields12 = bounded_queue_example__char_queue__enqueue__queue__fields5) and
  ((my_queue__split_fields13 = bounded_queue_example__char_queue__enqueue__queue__fields6) and
  ((my_queue__split_fields14 = bounded_queue_example__char_queue__enqueue__queue__fields7) and
  (my_queue__split_fields15 = bounded_queue_example__char_queue__enqueue__queue__fields8))))

axiom H32 : (result14 = char2)

axiom H33 : (char3 = 104)

axiom H34 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields10;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields11;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields12;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields13; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields14 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields10;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields11;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields12;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields13; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields14 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields12;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields13;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields14;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields15; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields10;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields11;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields12;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields13; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields14 } }
  }) = char3))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields14)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields14))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields14)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields14)) = to_rep3(my_queue__split_discrs)))))

axiom H35 : ((result15 = my_queue__split_fields12) and
  ((result16 = my_queue__split_fields13) and
  ((result17 = my_queue__split_fields14) and
  (result18 = my_queue__split_fields15))))

axiom H36 :
  ((my_queue__split_fields16 = bounded_queue_example__char_queue__enqueue__queue__fields10) and
  ((my_queue__split_fields17 = bounded_queue_example__char_queue__enqueue__queue__fields11) and
  ((my_queue__split_fields18 = bounded_queue_example__char_queue__enqueue__queue__fields12) and
  (my_queue__split_fields19 = bounded_queue_example__char_queue__enqueue__queue__fields13))))

axiom H37 : (result19 = char3)

axiom H38 : (char4 = 105)

axiom H39 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields15;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields16;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields17;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields18; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields19 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields15;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields16;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields17;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields18; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields19 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields16;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields17;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields18;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields19; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields15;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields16;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields17;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields18; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields19 } }
  }) = char4))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields19)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields19))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields19)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields19)) = to_rep3(my_queue__split_discrs)))))

axiom H40 : ((result20 = my_queue__split_fields16) and
  ((result21 = my_queue__split_fields17) and
  ((result22 = my_queue__split_fields18) and
  (result23 = my_queue__split_fields19))))

axiom H41 :
  ((my_queue__split_fields20 = bounded_queue_example__char_queue__enqueue__queue__fields15) and
  ((my_queue__split_fields21 = bounded_queue_example__char_queue__enqueue__queue__fields16) and
  ((my_queue__split_fields22 = bounded_queue_example__char_queue__enqueue__queue__fields17) and
  (my_queue__split_fields23 = bounded_queue_example__char_queue__enqueue__queue__fields18))))

axiom H42 : (result24 = char4)

axiom H43 : (char5 = 106)

axiom H44 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields20;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields21;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields22;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields23; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields24 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields20;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields21;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields22;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields23; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields24 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields20;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields21;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields22;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields23; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields20;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields21;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields22;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields23; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields24 } }
  }) = char5))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields24)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields24))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields24)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields24)) = to_rep3(my_queue__split_discrs)))))

axiom H45 : ((result25 = my_queue__split_fields20) and
  ((result26 = my_queue__split_fields21) and
  ((result27 = my_queue__split_fields22) and
  (result28 = my_queue__split_fields23))))

axiom H46 :
  ((my_queue__split_fields24 = bounded_queue_example__char_queue__enqueue__queue__fields20) and
  ((my_queue__split_fields25 = bounded_queue_example__char_queue__enqueue__queue__fields21) and
  ((my_queue__split_fields26 = bounded_queue_example__char_queue__enqueue__queue__fields22) and
  (my_queue__split_fields27 = bounded_queue_example__char_queue__enqueue__queue__fields23))))

axiom H47 : (result29 = char5)

axiom H48 : (char6 = 107)

axiom H49 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields25;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields26;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields27;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields28; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields29 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields25;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields26;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields27;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields28; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields29 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields24;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields25;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields26;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields27; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields25;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields26;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields27;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields28; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields29 } }
  }) = char6))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields29)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields29))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields29)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields29)) = to_rep3(my_queue__split_discrs)))))

axiom H50 : ((result30 = my_queue__split_fields24) and
  ((result31 = my_queue__split_fields25) and
  ((result32 = my_queue__split_fields26) and
  (result33 = my_queue__split_fields27))))

axiom H51 :
  ((my_queue__split_fields28 = bounded_queue_example__char_queue__enqueue__queue__fields25) and
  ((my_queue__split_fields29 = bounded_queue_example__char_queue__enqueue__queue__fields26) and
  ((my_queue__split_fields30 = bounded_queue_example__char_queue__enqueue__queue__fields27) and
  (my_queue__split_fields31 = bounded_queue_example__char_queue__enqueue__queue__fields28))))

axiom H52 : (result34 = char6)

axiom H53 : (char7 = 108)

axiom H54 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields30;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields31;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields32;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields33; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields34 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields30;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields31;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields32;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields33; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields34 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields28;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields29;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields30;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields31; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields30;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields31;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields32;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields33; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields34 } }
  }) = char7))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields34)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields34))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields34)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields34)) = to_rep3(my_queue__split_discrs)))))

axiom H55 : ((result35 = my_queue__split_fields28) and
  ((result36 = my_queue__split_fields29) and
  ((result37 = my_queue__split_fields30) and
  (result38 = my_queue__split_fields31))))

axiom H56 :
  ((my_queue__split_fields32 = bounded_queue_example__char_queue__enqueue__queue__fields30) and
  ((my_queue__split_fields33 = bounded_queue_example__char_queue__enqueue__queue__fields31) and
  ((my_queue__split_fields34 = bounded_queue_example__char_queue__enqueue__queue__fields32) and
  (my_queue__split_fields35 = bounded_queue_example__char_queue__enqueue__queue__fields33))))

axiom H57 : (result39 = char7)

axiom H58 : (char8 = 109)

axiom H59 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields35;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields36;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields37;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields38; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields39 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields35;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields36;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields37;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields38; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields39 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields32;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields33;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields34;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields35; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields35;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields36;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields37;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields38; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields39 } }
  }) = char8))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields39)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields39))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields39)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields39)) = to_rep3(my_queue__split_discrs)))))

axiom H60 : ((result40 = my_queue__split_fields32) and
  ((result41 = my_queue__split_fields33) and
  ((result42 = my_queue__split_fields34) and
  (result43 = my_queue__split_fields35))))

axiom H61 :
  ((my_queue__split_fields36 = bounded_queue_example__char_queue__enqueue__queue__fields35) and
  ((my_queue__split_fields37 = bounded_queue_example__char_queue__enqueue__queue__fields36) and
  ((my_queue__split_fields38 = bounded_queue_example__char_queue__enqueue__queue__fields37) and
  (my_queue__split_fields39 = bounded_queue_example__char_queue__enqueue__queue__fields38))))

axiom H62 : (result44 = char8)

axiom H63 : (char9 = 110)

axiom H64 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields40;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields41;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields42;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields43; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields44 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields40;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields41;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields42;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields43; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields44 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields36;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields37;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields38;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields39; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields40;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields41;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields42;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields43; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields44 } }
  }) = char9))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields44)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields44))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields44)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields44)) = to_rep3(my_queue__split_discrs)))))

axiom H65 : ((result45 = my_queue__split_fields36) and
  ((result46 = my_queue__split_fields37) and
  ((result47 = my_queue__split_fields38) and
  (result48 = my_queue__split_fields39))))

axiom H66 :
  ((my_queue__split_fields40 = bounded_queue_example__char_queue__enqueue__queue__fields40) and
  ((my_queue__split_fields41 = bounded_queue_example__char_queue__enqueue__queue__fields41) and
  ((my_queue__split_fields42 = bounded_queue_example__char_queue__enqueue__queue__fields42) and
  (my_queue__split_fields43 = bounded_queue_example__char_queue__enqueue__queue__fields43))))

axiom H67 : (result49 = char9)

axiom H68 : (char10 = 111)

axiom H69 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields45;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields46;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields47;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields48; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields49 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields45;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields46;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields47;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields48; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields49 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields40;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields41;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields42;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields43; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields45;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields46;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields47;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields48; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields49 } }
  }) = char10))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields49)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields49))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields49)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields49)) = to_rep3(my_queue__split_discrs)))))

axiom H70 : ((result50 = my_queue__split_fields40) and
  ((result51 = my_queue__split_fields41) and
  ((result52 = my_queue__split_fields42) and
  (result53 = my_queue__split_fields43))))

axiom H71 :
  ((my_queue__split_fields44 = bounded_queue_example__char_queue__enqueue__queue__fields45) and
  ((my_queue__split_fields45 = bounded_queue_example__char_queue__enqueue__queue__fields46) and
  ((my_queue__split_fields46 = bounded_queue_example__char_queue__enqueue__queue__fields47) and
  (my_queue__split_fields47 = bounded_queue_example__char_queue__enqueue__queue__fields48))))

axiom H72 : (result54 = char10)

axiom H73 : (char11 = 112)

axiom H74 : (((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields50;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields51;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields52;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields53; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields54 } }
  }) = true)) and ((size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields50;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields51;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields52;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields53; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields54 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields44;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields45;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields46;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields47; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__enqueue__queue__fields50;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__enqueue__queue__fields51;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__enqueue__queue__fields52;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__enqueue__queue__fields53; rt1 =
  bounded_queue_example__char_queue__enqueue__queue__fields54 } }
  }) = char11))) and (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields54)),
  to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields54))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__enqueue__queue__fields54)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__enqueue__queue__fields54)) = to_rep3(my_queue__split_discrs)))))

axiom H75 : ((result55 = my_queue__split_fields44) and
  ((result56 = my_queue__split_fields45) and
  ((result57 = my_queue__split_fields46) and
  (result58 = my_queue__split_fields47))))

axiom H76 :
  ((my_queue__split_fields48 = bounded_queue_example__char_queue__enqueue__queue__fields50) and
  ((my_queue__split_fields49 = bounded_queue_example__char_queue__enqueue__queue__fields51) and
  ((my_queue__split_fields50 = bounded_queue_example__char_queue__enqueue__queue__fields52) and
  (my_queue__split_fields51 = bounded_queue_example__char_queue__enqueue__queue__fields53))))

axiom H77 : (result59 = count)

axiom H78 : (count1 = 1)

axiom H79 :
  (((bounded_queue_example__char_queue__dequeue__item = first_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields48;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields49;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields50;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields51; rt1 = mk1(1, 100) } } })) and (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__dequeue__queue__fields;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__dequeue__queue__fields1;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__dequeue__queue__fields2;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__dequeue__queue__fields3; rt1 =
  bounded_queue_example__char_queue__dequeue__queue__fields4 } } }) = (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields48;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields49;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields50;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields51; rt1 = mk1(1, 100) } } }) - 1))) and
  ((dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields4)),
  to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields4))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields4)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields4)) = to_rep3(my_queue__split_discrs)))) and
  in_range4(bounded_queue_example__char_queue__dequeue__item)))

axiom H80 : ((result60 = my_queue__split_fields48) and
  ((result61 = my_queue__split_fields49) and
  ((result62 = my_queue__split_fields50) and
  (result63 = my_queue__split_fields51))))

axiom H81 :
  ((my_queue__split_fields52 = bounded_queue_example__char_queue__dequeue__queue__fields) and
  ((my_queue__split_fields53 = bounded_queue_example__char_queue__dequeue__queue__fields1) and
  ((my_queue__split_fields54 = bounded_queue_example__char_queue__dequeue__queue__fields2) and
  (my_queue__split_fields55 = bounded_queue_example__char_queue__dequeue__queue__fields3))))

axiom H82 : (result64 = value)

axiom H83 : (value1 = bounded_queue_example__char_queue__dequeue__item)

axiom H84 : (result65 = count1)

axiom H85 : (count2 = 2)

axiom H86 :
  (((bounded_queue_example__char_queue__dequeue__item1 = first_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields52;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields53;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields54;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields55; rt1 = mk1(1, 100) } } })) and (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__dequeue__queue__fields5;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__dequeue__queue__fields6;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__dequeue__queue__fields7;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__dequeue__queue__fields8; rt1 =
  bounded_queue_example__char_queue__dequeue__queue__fields9 } } }) = (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields52;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields53;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields54;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields55; rt1 = mk1(1, 100) } } }) - 1))) and
  ((dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields9)),
  to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields9))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields9)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields9)) = to_rep3(my_queue__split_discrs)))) and
  in_range4(bounded_queue_example__char_queue__dequeue__item1)))

axiom H87 : ((result66 = my_queue__split_fields52) and
  ((result67 = my_queue__split_fields53) and
  ((result68 = my_queue__split_fields54) and
  (result69 = my_queue__split_fields55))))

axiom H88 :
  ((my_queue__split_fields56 = bounded_queue_example__char_queue__dequeue__queue__fields5) and
  ((my_queue__split_fields57 = bounded_queue_example__char_queue__dequeue__queue__fields6) and
  ((my_queue__split_fields58 = bounded_queue_example__char_queue__dequeue__queue__fields7) and
  (my_queue__split_fields59 = bounded_queue_example__char_queue__dequeue__queue__fields8))))

axiom H89 : (result70 = value1)

axiom H90 : (value2 = bounded_queue_example__char_queue__dequeue__item1)

axiom H91 : (result71 = count2)

axiom H92 : (count3 = 3)

axiom H93 :
  (((bounded_queue_example__char_queue__dequeue__item2 = first_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields56;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields57;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields58;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields59; rt1 = mk1(1, 100) } } })) and (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__dequeue__queue__fields10;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__dequeue__queue__fields11;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__dequeue__queue__fields12;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__dequeue__queue__fields13; rt1 =
  bounded_queue_example__char_queue__dequeue__queue__fields14 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields56;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields57;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields58;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields59; rt1 = mk1(1, 100) } } }) - 1))) and
  ((dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields14)),
  to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields14))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields14)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields14)) = to_rep3(my_queue__split_discrs)))) and
  in_range4(bounded_queue_example__char_queue__dequeue__item2)))

axiom H94 : ((result72 = my_queue__split_fields56) and
  ((result73 = my_queue__split_fields57) and
  ((result74 = my_queue__split_fields58) and
  (result75 = my_queue__split_fields59))))

axiom H95 :
  ((my_queue__split_fields60 = bounded_queue_example__char_queue__dequeue__queue__fields10) and
  ((my_queue__split_fields61 = bounded_queue_example__char_queue__dequeue__queue__fields11) and
  ((my_queue__split_fields62 = bounded_queue_example__char_queue__dequeue__queue__fields12) and
  (my_queue__split_fields63 = bounded_queue_example__char_queue__dequeue__queue__fields13))))

axiom H96 : (result76 = value2)

axiom H97 : (value3 = bounded_queue_example__char_queue__dequeue__item2)

axiom H98 : (result77 = count3)

axiom H99 : (count4 = 4)

axiom H100 :
  (((bounded_queue_example__char_queue__dequeue__item3 = first_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields60;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields61;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields62;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields63; rt1 = mk1(1, 100) } } })) and (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__dequeue__queue__fields15;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__dequeue__queue__fields16;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__dequeue__queue__fields17;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__dequeue__queue__fields18; rt1 =
  bounded_queue_example__char_queue__dequeue__queue__fields19 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields60;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields61;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields62;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields63; rt1 = mk1(1, 100) } } }) - 1))) and
  ((dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields19)),
  to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields19))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields19)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields19)) = to_rep3(my_queue__split_discrs)))) and
  in_range4(bounded_queue_example__char_queue__dequeue__item3)))

axiom H101 : ((result78 = my_queue__split_fields60) and
  ((result79 = my_queue__split_fields61) and
  ((result80 = my_queue__split_fields62) and
  (result81 = my_queue__split_fields63))))

axiom H102 :
  ((my_queue__split_fields64 = bounded_queue_example__char_queue__dequeue__queue__fields15) and
  ((my_queue__split_fields65 = bounded_queue_example__char_queue__dequeue__queue__fields16) and
  ((my_queue__split_fields66 = bounded_queue_example__char_queue__dequeue__queue__fields17) and
  (my_queue__split_fields67 = bounded_queue_example__char_queue__dequeue__queue__fields18))))

axiom H103 : (result82 = value3)

axiom H104 : (value4 = bounded_queue_example__char_queue__dequeue__item3)

axiom H105 : (result83 = count4)

axiom H106 : (count5 = 5)

axiom H107 :
  (((bounded_queue_example__char_queue__dequeue__item4 = first_element({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields64;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields65;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields66;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields67; rt1 = mk1(1, 100) } } })) and (size({
  us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__dequeue__queue__fields20;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__dequeue__queue__fields21;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__dequeue__queue__fields22;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__dequeue__queue__fields23; rt1 =
  bounded_queue_example__char_queue__dequeue__queue__fields24 } }
  }) = (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields64;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields65;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields66;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields67; rt1 = mk1(1, 100) } } }) - 1))) and
  ((dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields24)),
  to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields24))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__dequeue__queue__fields24)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__dequeue__queue__fields24)) = to_rep3(my_queue__split_discrs)))) and
  in_range4(bounded_queue_example__char_queue__dequeue__item4)))

axiom H108 : ((result84 = my_queue__split_fields64) and
  ((result85 = my_queue__split_fields65) and
  ((result86 = my_queue__split_fields66) and
  (result87 = my_queue__split_fields67))))

axiom H109 :
  ((my_queue__split_fields68 = bounded_queue_example__char_queue__dequeue__queue__fields20) and
  ((my_queue__split_fields69 = bounded_queue_example__char_queue__dequeue__queue__fields21) and
  ((my_queue__split_fields70 = bounded_queue_example__char_queue__dequeue__queue__fields22) and
  (my_queue__split_fields71 = bounded_queue_example__char_queue__dequeue__queue__fields23))))

axiom H110 : (result88 = value4)

axiom H111 : (value5 = bounded_queue_example__char_queue__dequeue__item4)

axiom H112 : (((empty({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__clear__queue__fields5;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__clear__queue__fields6;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__clear__queue__fields7;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__clear__queue__fields8; rt1 =
  bounded_queue_example__char_queue__clear__queue__fields9 } } }) = true) and
  (size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  bounded_queue_example__char_queue__clear__queue__fields5;
  rec__bounded_queue_example__char_queue__queue_type__front =
  bounded_queue_example__char_queue__clear__queue__fields6;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  bounded_queue_example__char_queue__clear__queue__fields7;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  bounded_queue_example__char_queue__clear__queue__fields8; rt1 =
  bounded_queue_example__char_queue__clear__queue__fields9 } } }) = 0)) and
  (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_example__char_queue__clear__queue__fields9)),
  to_rep1(last2(bounded_queue_example__char_queue__clear__queue__fields9))) and
  ((to_rep1(first2(bounded_queue_example__char_queue__clear__queue__fields9)) = 1) and
  (to_rep1(last2(bounded_queue_example__char_queue__clear__queue__fields9)) = to_rep3(my_queue__split_discrs)))))

axiom H113 : ((result89 = my_queue__split_fields68) and
  ((result90 = my_queue__split_fields69) and
  ((result91 = my_queue__split_fields70) and
  (result92 = my_queue__split_fields71))))

axiom H114 :
  ((my_queue__split_fields72 = bounded_queue_example__char_queue__clear__queue__fields5) and
  ((my_queue__split_fields73 = bounded_queue_example__char_queue__clear__queue__fields6) and
  ((my_queue__split_fields74 = bounded_queue_example__char_queue__clear__queue__fields7) and
  (my_queue__split_fields75 = bounded_queue_example__char_queue__clear__queue__fields8))))

axiom H115 : ((o = size({ us_split_discrs1 = {
  rec__bounded_queue_example__char_queue__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_example__char_queue__queue_type__count =
  my_queue__split_fields72;
  rec__bounded_queue_example__char_queue__queue_type__front =
  my_queue__split_fields73;
  rec__bounded_queue_example__char_queue__queue_type__rear =
  my_queue__split_fields74;
  rec__bounded_queue_example__char_queue__queue_type__items = { elts1 =
  my_queue__split_fields75; rt1 = mk1(1, 100) } } })) and in_range3(o))

axiom H116 : (o1 = attr__ATTRIBUTE_IMAGE(o))

axiom H117 : ({ elts = temp___652; rt = temp___6521 } = to_string(o1))

axiom H118 : ((to_rep1(first(temp___6521)) <= to_rep1(last(temp___6521))) ->
  (o2 = ((to_rep1(last(temp___6521)) - to_rep1(first(temp___6521))) + 1)))

axiom H119 :
  ((not (to_rep1(first(temp___6521)) <= to_rep1(last(temp___6521)))) ->
  (o2 = 0))

axiom H120 : ((1 <= 25) -> (o3 = ((25 - 1) + 1)))

axiom H121 : ((not (1 <= 25)) -> (o3 = 0))

axiom H122 : (o4 = (o3 + o2))

axiom H123 : (o5 = (1 + o4))

axiom H124 : (o6 = (o5 - 1))

 (* File "bounded_queue.ads", line 36, characters 0-0 *)
goal WP_parameter_def : in_range1(o6)
