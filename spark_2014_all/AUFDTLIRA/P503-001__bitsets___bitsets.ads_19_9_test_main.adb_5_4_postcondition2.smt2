(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))))))))))
(declare-fun mem ((Array Int Bool) Int) Bool)
(declare-fun mem__function_guard (Bool (Array Int Bool) Int) Bool)
(declare-sort element 0)
(declare-fun elementqtint (element) Int)
(assert (forall ((i element)) (and (<= 1 (elementqtint i)) (<= (elementqtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (element element) Bool)
(declare-const dummy element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(define-fun dynamic_invariant ((temp___expr_312 Int) (temp___is_init_308 Bool) (temp___skip_constant_309 Bool) (temp___do_toplevel_310 Bool) (temp___do_typ_inv_311 Bool)) Bool (=> (or (= temp___is_init_308 true) (<= 1 10)) (in_range1 temp___expr_312)))
(assert true)
(assert (forall ((s (Array Int Bool))) (forall ((e Int)) (! (= (= (mem s e) true) (= (select s e) true)) :pattern ((mem s e))))))
(declare-const s (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const res (Array Int Bool))
(declare-const test_main__my_sets__add__result (Array Int Bool))
(declare-const result (Array Int Bool))
(declare-const res1 (Array Int Bool))
(declare-const result1 (Array Int Bool))
(declare-const res2 (Array Int Bool))
(declare-const result2 (Array Int Bool))
(declare-const test_main__my_sets__add__result1 (Array Int Bool))
(declare-const test_main__my_sets__add__result2 (Array Int Bool))
(declare-const test_main__my_sets__add__result3 (Array Int Bool))
(declare-const res3 (Array Int Bool))
(declare-const test_main__my_sets__add__result4 (Array Int Bool))
(declare-const res4 (Array Int Bool))
(declare-const test_main__my_sets__add__result5 (Array Int Bool))
(declare-const result3 (Array Int Bool))
(assert (in_range1 e))
(assert (= result res))
(assert (= res1 s))
(assert (= result1 res1))
(assert (= res2 (store res1 e (distinct 1 0))))
(assert (= test_main__my_sets__add__result1 test_main__my_sets__add__result2))
(assert (= test_main__my_sets__add__result3 test_main__my_sets__add__result1))
(assert (= result2 test_main__my_sets__add__result))
(assert (= test_main__my_sets__add__result1 res2))
(assert (= (mk_map__ref test_main__my_sets__add__result4) (mk_map__ref test_main__my_sets__add__result2)))
(assert (= res3 res2))
(assert (= test_main__my_sets__add__result5 test_main__my_sets__add__result3))
(assert (= res4 res2))
(assert (= result3 test_main__my_sets__add__result4))
(declare-const elt Int)
(assert (<= 1 elt))
(assert (<= elt 10))
(assert (= (mem test_main__my_sets__add__result4 elt) true))
(assert (not (= elt e)))
(assert (not (= (mem s elt) true)))
(check-sat)
(exit)
