(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun temp_____aggregate_def_167 ((Array Int Bool) Int Int Bool Int Int Bool Int Int Bool Int Int Bool Int Bool) (Array Int Bool))
(declare-sort tarray_tD1 0)
(declare-fun tarray_tD1qtint (tarray_tD1) Int)
(assert (forall ((i tarray_tD1)) (and (<= 1 (tarray_tD1qtint i)) (<= (tarray_tD1qtint i) 5))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tarray_tD1 tarray_tD1) Bool)
(declare-const dummy tarray_tD1)
(declare-datatypes () ((tarray_tD1__ref (mk_tarray_tD1__ref (tarray_tD1__content tarray_tD1)))))
(define-fun tarray_tD1__ref___projection ((a tarray_tD1__ref)) tarray_tD1 (tarray_tD1__content a))
(assert (forall ((temp___169 (Array Int Bool))) (forall ((temp___170 Int) (temp___171 Int) (temp___173 Int) (temp___174 Int) (temp___176 Int) (temp___177 Int) (temp___179 Int) (temp___180 Int) (temp___182 Int)) (forall ((temp___172 Bool) (temp___175 Bool) (temp___178 Bool) (temp___181 Bool) (temp___183 Bool)) (let ((temp___168 (temp_____aggregate_def_167 temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 temp___175 temp___176 temp___177 temp___178 temp___179 temp___180 temp___181 temp___182 temp___183))) (=> (and (and (and (and (and (and (and (and (in_range1 temp___170) (in_range1 temp___171)) (in_range1 temp___173)) (in_range1 temp___174)) (in_range1 temp___176)) (in_range1 temp___177)) (in_range1 temp___179)) (in_range1 temp___180)) (in_range1 temp___182)) (forall ((temp___184 Int)) (ite (= temp___184 temp___182) (= (select temp___168 temp___184) temp___183) (ite (and (<= temp___179 temp___184) (<= temp___184 temp___180)) (= (select temp___168 temp___184) temp___181) (ite (and (<= temp___176 temp___184) (<= temp___184 temp___177)) (= (select temp___168 temp___184) temp___178) (ite (and (<= temp___173 temp___184) (<= temp___184 temp___174)) (= (select temp___168 temp___184) temp___175) (ite (and (<= temp___170 temp___184) (<= temp___184 temp___171)) (= (select temp___168 temp___184) temp___172) (= (select temp___168 temp___184) (select temp___169 temp___184))))))))))))))
(declare-const arr (Array Int Bool))
(declare-const result (Array Int Bool))
(declare-const arr1 (Array Int Bool))
(assert (= result arr))
(assert (= arr1 (temp_____aggregate_def_167 arr 1 5 (distinct 1 0) 2 5 (distinct 0 0) 3 5 (distinct 1 0) 4 5 (distinct 0 0) 5 (distinct 1 0))))
(assert (not (= (select arr1 1) true)))
(check-sat)
(exit)
