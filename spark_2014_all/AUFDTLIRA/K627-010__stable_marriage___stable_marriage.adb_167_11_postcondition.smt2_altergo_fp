(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type group1_id

predicate in_range1(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : group1_id, group1_id -> bool

logic dummy : group1_id

type group1_id__ref = { group1_id__content : group1_id
}

function group1_id__ref___projection(a: group1_id__ref) : group1_id =
  (a).group1_id__content

type group2_id

predicate in_range2(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : group2_id, group2_id -> bool

logic dummy1 : group2_id

type group2_id__ref = { group2_id__content : group2_id
}

function group2_id__ref___projection(a: group2_id__ref) : group2_id =
  (a).group2_id__content

logic to_rep : group1_id -> int

logic of_rep : int -> group1_id

axiom inversion_axiom :
  (forall x:group1_id [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:group1_id [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,group1_id) farray
}

logic slide : (int,group1_id) farray, int, int -> (int,group1_id) farray

axiom slide_eq :
  (forall a:(int,group1_id) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,group1_id) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,group1_id) farray, int, int, (int,group1_id) farray, int,
  int -> (int,group1_id) farray

axiom concat_def :
  (forall a:(int,group1_id) farray. forall b:(int,group1_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : group1_id, int -> (int,group1_id) farray

axiom singleton_def :
  (forall v:group1_id.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,group1_id) farray, int, int, (int,group1_id) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,group1_id) farray. forall a__first:int. forall a__last:int.
  forall b:(int,group1_id) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,group1_id) farray. forall b:(int,group1_id) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,group1_id) farray, int, int, (int,group1_id) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,group1_id) farray. forall b:(int,group1_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,group1_id) farray. forall b:(int,group1_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,group1_id) farray. forall b:(int,group1_id) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy2 : (int,group1_id) farray

logic value__size : int

logic object__size : (int,group1_id) farray -> int

logic value__component__size : int

logic object__component__size : (int,group1_id) farray -> int

logic value__alignment : int

logic object__alignment : (int,group1_id) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,group1_id) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,group1_id) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,group1_id) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,group1_id) farray, (int,group1_id) farray -> bool

type map__ref1 = { map__content1 : (int,(int,group1_id) farray) farray
}

logic slide1 : (int,(int,group1_id) farray) farray, int,
  int -> (int,(int,group1_id) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,group1_id) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,group1_id) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,group1_id) farray) farray, int, int,
  (int,(int,group1_id) farray) farray, int,
  int -> (int,(int,group1_id) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,group1_id) farray) farray.
  forall b:(int,(int,group1_id) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,group1_id) farray,
  int -> (int,(int,group1_id) farray) farray

axiom singleton_def1 :
  (forall v:(int,group1_id) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq5 : (int,(int,group1_id) farray) farray, int, int,
  (int,(int,group1_id) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,group1_id) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,group1_id) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and (bool_eq4((a[temp___idx_135]), 1, 64,
  (b[((b__first - a__first) + temp___idx_135)]), 1, 64) = true)) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) -> (bool_eq4((a[temp___idx_135]), 1, 64,
  (b[((b__first - a__first) + temp___idx_135)]), 1, 64) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,group1_id) farray) farray.
  forall b:(int,(int,group1_id) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) -> (bool_eq4((a[temp___idx_135]), 1, 64,
  (b[((b__first - a__first) + temp___idx_135)]), 1, 64) = true)))))))

logic is_permutation_1 : (int,group1_id) farray -> bool

logic is_permutation_1__function_guard : bool, (int,group1_id) farray -> prop

axiom is_permutation_1__post_axiom :
  (forall r1:(int,group1_id) farray [is_permutation_1(r1)].
  ((is_permutation_1(r1) = true) <->
  (forall g1:int. (((1 <= g1) and (g1 <= 64)) ->
  (exists rank:int. (((1 <= rank) and (rank <= 64)) and
  (to_rep((r1[rank])) = g1)))))))

type ranking

predicate in_range3(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : ranking, ranking -> bool

logic dummy3 : ranking

type ranking__ref = { ranking__content : ranking
}

function ranking__ref___projection(a: ranking__ref) : ranking =
  (a).ranking__content

logic to_rep1 : ranking -> int

logic of_rep1 : int -> ranking

axiom inversion_axiom1 :
  (forall x:ranking [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:ranking [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref2 = { map__content2 : (int,ranking) farray
}

logic slide2 : (int,ranking) farray, int, int -> (int,ranking) farray

axiom slide_eq2 :
  (forall a:(int,ranking) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,ranking) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> (int,ranking) farray

axiom concat_def2 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : ranking, int -> (int,ranking) farray

axiom singleton_def2 :
  (forall v:ranking.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq7 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,ranking) farray. forall a__first:int. forall a__last:int.
  forall b:(int,ranking) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_136:int. ((((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) and
  (to_rep1((a[temp___idx_136])) = to_rep1((b[((b__first - a__first) + temp___idx_136)])))) or
  (not ((a__first <= temp___idx_136) and (temp___idx_136 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) ->
  (to_rep1((a[temp___idx_136])) = to_rep1((b[((b__first - a__first) + temp___idx_136)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) ->
  (to_rep1((a[temp___idx_136])) = to_rep1((b[((b__first - a__first) + temp___idx_136)])))))))))

logic compare1 : (int,ranking) farray, int, int, (int,ranking) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,ranking) farray. forall b:(int,ranking) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic invert_1 : (int,group1_id) farray -> (int,ranking) farray

logic invert_1__function_guard : (int,ranking) farray,
  (int,group1_id) farray -> prop

axiom invert_1__post_axiom :
  (forall r1:(int,group1_id) farray [invert_1(r1)].
  ((is_permutation_1(r1) = true) ->
  ((forall rank:int. (((1 <= rank) and (rank <= 64)) ->
   (to_rep1((invert_1(r1)[to_rep((r1[rank]))])) = rank))) and
  (forall g1:int. (((1 <= g1) and (g1 <= 64)) ->
  (to_rep((r1[to_rep1((invert_1(r1)[g1]))])) = g1))))))

logic dummy4 : (int,ranking) farray

logic value__size1 : int

logic object__size1 : (int,ranking) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,ranking) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,ranking) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,ranking) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,ranking) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,ranking) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,ranking) farray, (int,ranking) farray -> bool

type map__ref3 = { map__content3 : (int,(int,ranking) farray) farray
}

logic slide3 : (int,(int,ranking) farray) farray, int,
  int -> (int,(int,ranking) farray) farray

axiom slide_eq3 :
  (forall a:(int,(int,ranking) farray) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,(int,ranking) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,(int,ranking) farray) farray, int, int,
  (int,(int,ranking) farray) farray, int,
  int -> (int,(int,ranking) farray) farray

axiom concat_def3 :
  (forall a:(int,(int,ranking) farray) farray.
  forall b:(int,(int,ranking) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : (int,ranking) farray,
  int -> (int,(int,ranking) farray) farray

axiom singleton_def3 :
  (forall v:(int,ranking) farray.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq8 : (int,(int,ranking) farray) farray, int, int,
  (int,(int,ranking) farray) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,(int,ranking) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,ranking) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq8(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_138:int. ((((a__first <= temp___idx_138) and
  (temp___idx_138 <= a__last)) and (bool_eq7((a[temp___idx_138]), 1, 64,
  (b[((b__first - a__first) + temp___idx_138)]), 1, 64) = true)) or
  (not ((a__first <= temp___idx_138) and (temp___idx_138 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_138:int. (((a__first <= temp___idx_138) and
  (temp___idx_138 <= a__last)) -> (bool_eq7((a[temp___idx_138]), 1, 64,
  (b[((b__first - a__first) + temp___idx_138)]), 1, 64) = true))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,(int,ranking) farray) farray.
  forall b:(int,(int,ranking) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_138:int. (((a__first <= temp___idx_138) and
  (temp___idx_138 <= a__last)) -> (bool_eq7((a[temp___idx_138]), 1, 64,
  (b[((b__first - a__first) + temp___idx_138)]), 1, 64) = true)))))))

logic r2 : (int,(int,group1_id) farray) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___524 : (int,ranking) farray -> (int,(int,ranking) farray) farray

axiom def_axiom :
  (forall temp___526:(int,ranking) farray.
  (forall temp___527:int.
  ((temp___524(temp___526)[temp___527]) = temp___526)))

logic temp___528 : int -> (int,ranking) farray

axiom def_axiom1 :
  (forall temp___530:int.
  (forall temp___531:int.
  ((temp___528(temp___530)[temp___531]) = of_rep1(temp___530))))

logic result__ : (int,(int,ranking) farray) farray

logic g2 : int

logic stable_marriage__matching__invert__result : (int,(int,ranking) farray) farray

logic temp___533 : (int,(int,ranking) farray) farray

logic temp___532 : int

logic prev : int

logic o : int

logic o1 : (int,group1_id) farray

logic temp___536 : (int,ranking) farray

logic o2 : (int,ranking) farray

logic o3 : (int,(int,ranking) farray) farray

logic g21 : int

logic temp___544 : (int,ranking) farray

logic result : (int,(int,ranking) farray) farray

logic result__1 : (int,(int,ranking) farray) farray

logic result1 : int

logic g22 : int

logic result__2 : (int,(int,ranking) farray) farray

logic g23 : int

logic result2 : (int,(int,ranking) farray) farray

logic result__3 : (int,(int,ranking) farray) farray

logic result3 : int

logic g24 : int

logic result__4 : (int,(int,ranking) farray) farray

logic g25 : int

logic result__5 : (int,(int,ranking) farray) farray

logic g26 : int

logic result__6 : (int,(int,ranking) farray) farray

logic g27 : int

logic result__7 : (int,(int,ranking) farray) farray

logic g28 : int

logic result__8 : (int,(int,ranking) farray) farray

logic g29 : int

logic result__9 : (int,(int,ranking) farray) farray

logic g210 : int

logic result4 : (int,(int,ranking) farray) farray

logic stable_marriage__matching__invert__result1 : (int,(int,ranking) farray) farray

logic stable_marriage__matching__invert__result2 : (int,(int,ranking) farray) farray

logic stable_marriage__matching__invert__result3 : (int,(int,ranking) farray) farray

logic result__10 : (int,(int,ranking) farray) farray

logic g211 : int

logic stable_marriage__matching__invert__result4 : (int,(int,ranking) farray) farray

logic result__11 : (int,(int,ranking) farray) farray

logic g212 : int

logic stable_marriage__matching__invert__result5 : (int,(int,ranking) farray) farray

logic result5 : (int,(int,ranking) farray) farray

axiom H :
  (forall g213:int. (((1 <= g213) and (g213 <= 64)) ->
  (is_permutation_1((r2[g213])) = true)))

axiom H1 : (result = result__)

axiom H2 : (result__1 = temp___524(temp___528(64)))

axiom H3 : (result1 = g2)

axiom H4 : (g22 = 1)

axiom H5 : (((1 <= g22) and (g22 <= 64)) -> (((temp___533 = result__1) and
  ((temp___532 = g22) and
  ((forall prev1:int. (((1 <= prev1) and (prev1 <= (g23 - 1))) ->
   (bool_eq7((result__2[prev1]), 1, 64, invert_1((r2[prev1])), 1,
   64) = true))) and (((((1 <= 64) -> in_range2(g23)) and
  (forall temp___534:int. (((1 <= temp___534) and (temp___534 <= 64)) ->
  ((g23 <= temp___534) ->
  ((result__2[temp___534]) = (temp___533[temp___534])))))) and
  ((1 <= g23) and (g23 <= 64))) and (((((o2 = invert_1((r2[g23]))) and
  ((forall rank:int. (((1 <= rank) and (rank <= 64)) ->
   (to_rep1((o2[to_rep(((r2[g23])[rank]))])) = rank))) and
  (forall g1:int. (((1 <= g1) and (g1 <= 64)) ->
  (to_rep(((r2[g23])[to_rep1((o2[g1]))])) = g1))))) and
  (o3 = (result__2[g23 <- o2]))) and ((result__2 = result2) and
  (result__3 = o3))) and (g23 = 64)))))) and (((g23 = g27) and
  (result__3 = result__6)) and ((g28 = g23) and (result__7 = result__3)))))

axiom H6 : (((1 <= g22) and (g22 <= 64)) -> (g29 = g27))

axiom H7 : (((1 <= g22) and (g22 <= 64)) -> (result__8 = result__6))

axiom H8 : (((1 <= g22) and (g22 <= 64)) -> (g210 = g28))

axiom H9 : (((1 <= g22) and (g22 <= 64)) -> (result__9 = result__7))

axiom H10 : ((not ((1 <= g22) and (g22 <= 64))) -> (g22 = g29))

axiom H11 : ((not ((1 <= g22) and (g22 <= 64))) -> (result__1 = result__8))

axiom H12 : ((not ((1 <= g22) and (g22 <= 64))) -> (g210 = g22))

axiom H13 : ((not ((1 <= g22) and (g22 <= 64))) -> (result__9 = result__1))

axiom H14 :
  (stable_marriage__matching__invert__result1 = stable_marriage__matching__invert__result2)

axiom H15 :
  (stable_marriage__matching__invert__result3 = stable_marriage__matching__invert__result1)

axiom H16 : (result4 = stable_marriage__matching__invert__result)

axiom H17 : (stable_marriage__matching__invert__result1 = result__8)

axiom H18 :
  (stable_marriage__matching__invert__result4 = stable_marriage__matching__invert__result2)

axiom H19 : (g211 = g29)

axiom H20 : (result__10 = result__8)

axiom H21 :
  (stable_marriage__matching__invert__result5 = stable_marriage__matching__invert__result3)

axiom H22 : (g212 = g210)

axiom H23 : (result__11 = result__9)

axiom H24 : (result5 = stable_marriage__matching__invert__result4)

logic g213 : int

axiom H25 : (1 <= g213)

axiom H26 : (g213 <= 64)

 (* File "stable_marriage.adb", line 127, characters 0-0 *)
goal WP_parameter_def :
  (bool_eq7((stable_marriage__matching__invert__result4[g213]), 1, 64,
  invert_1((r2[g213])), 1, 64) = true)
