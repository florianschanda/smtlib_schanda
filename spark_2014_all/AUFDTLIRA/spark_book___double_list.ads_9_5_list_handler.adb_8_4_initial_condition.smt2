(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun size (Int) Int)
(declare-fun size__function_guard (Int Int) Bool)
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 0 (index_typeqtint i)) (<= (index_typeqtint i) 128))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 128)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_190 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= 0 128)) (in_range1 temp___expr_190)))
(assert (forall ((list_handler__integer_list__count Int)) (! (=> (dynamic_invariant1 list_handler__integer_list__count true true true true) (dynamic_invariant (size list_handler__integer_list__count) true false true true)) :pattern ((size list_handler__integer_list__count)))))
(assert (forall ((list_handler__integer_list__count Int)) (! (=> (dynamic_invariant1 list_handler__integer_list__count true true true true) (= (size list_handler__integer_list__count) list_handler__integer_list__count)) :pattern ((size list_handler__integer_list__count)))))
(define-fun to_rep ((x index_type)) Int (index_typeqtint x))
(declare-fun of_rep (Int) index_type)
(assert (forall ((x index_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int index_type))))))
(declare-fun slide ((Array Int index_type) Int Int) (Array Int index_type))
(assert (forall ((a (Array Int index_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int index_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int index_type)) (a__first Int) (a__last Int) (b (Array Int index_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int index_type)) (b (Array Int index_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (element_type element_type) Bool)
(declare-const dummy2 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun to_rep1 ((x element_type)) Int (element_typeqtint x))
(declare-fun of_rep1 (Int) element_type)
(assert (forall ((x element_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x element_type)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_handler__integer_list__list_node__value element_type) (rec__list_handler__integer_list__list_node__next index_type) (rec__list_handler__integer_list__list_node__previous index_type)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) element_type (rec__list_handler__integer_list__list_node__value a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) index_type (rec__list_handler__integer_list__list_node__next a))
(define-fun us_split_fields_Previous__projection ((a us_split_fields)) index_type (rec__list_handler__integer_list__list_node__previous a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__list_handler__integer_list__list_node__value (us_split_fields1 a))) (to_rep1 (rec__list_handler__integer_list__list_node__value (us_split_fields1 b)))) (= (to_rep (rec__list_handler__integer_list__list_node__next (us_split_fields1 a))) (to_rep (rec__list_handler__integer_list__list_node__next (us_split_fields1 b))))) (= (to_rep (rec__list_handler__integer_list__list_node__previous (us_split_fields1 a))) (to_rep (rec__list_handler__integer_list__list_node__previous (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const list_handler__integer_list__list_node__value__first__bit Int)
(declare-const list_handler__integer_list__list_node__value__last__bit Int)
(declare-const list_handler__integer_list__list_node__value__position Int)
(assert (<= 0 list_handler__integer_list__list_node__value__first__bit))
(assert (< list_handler__integer_list__list_node__value__first__bit list_handler__integer_list__list_node__value__last__bit))
(assert (<= 0 list_handler__integer_list__list_node__value__position))
(declare-const list_handler__integer_list__list_node__next__first__bit Int)
(declare-const list_handler__integer_list__list_node__next__last__bit Int)
(declare-const list_handler__integer_list__list_node__next__position Int)
(assert (<= 0 list_handler__integer_list__list_node__next__first__bit))
(assert (< list_handler__integer_list__list_node__next__first__bit list_handler__integer_list__list_node__next__last__bit))
(assert (<= 0 list_handler__integer_list__list_node__next__position))
(declare-const list_handler__integer_list__list_node__previous__first__bit Int)
(declare-const list_handler__integer_list__list_node__previous__last__bit Int)
(declare-const list_handler__integer_list__list_node__previous__position Int)
(assert (<= 0 list_handler__integer_list__list_node__previous__first__bit))
(assert (< list_handler__integer_list__list_node__previous__first__bit list_handler__integer_list__list_node__previous__last__bit))
(assert (<= 0 list_handler__integer_list__list_node__previous__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((list_node__ref (mk_list_node__ref (list_node__content us_rep)))))
(define-fun list_node__ref___projection ((a list_node__ref)) us_rep (list_node__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_164 Int) (temp___is_init_160 Bool) (temp___skip_constant_161 Bool) (temp___do_toplevel_162 Bool) (temp___do_typ_inv_163 Bool)) Bool (=> (or (= temp___is_init_160 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_164)))
(declare-const max_size Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const default_element Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert (= max_size 128))
(assert (= default_element 0))
(declare-const count Int)
(declare-const free Int)
(declare-const o Int)
(declare-const count1 Int)
(declare-const free1 Int)
(declare-const result Bool)
(assert (in_range max_size))
(assert (in_range2 default_element))
(assert (=> (<= 0 128) (in_range1 count)))
(assert (=> (<= 0 128) (in_range1 free)))
(assert (and (= (size count1) 0) (and (in_range1 free1) (in_range1 count1))))
(assert (and (= o (size count1)) (and (in_range o) (= o count1))))
(assert (= result (ite (= o 0) true false)))
(assert (not (= (size count1) 0)))
(check-sat)
(exit)
