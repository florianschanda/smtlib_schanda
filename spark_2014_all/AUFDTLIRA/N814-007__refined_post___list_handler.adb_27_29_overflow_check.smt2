(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const lower Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const upper Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort element_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (element_type element_type) Bool)
(declare-const dummy1 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(declare-fun to_rep (element_type) Int)
(declare-fun of_rep (Int) element_type)
(assert (forall ((x element_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x element_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 128)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index_type index_type) Bool)
(declare-const dummy2 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-fun to_rep1 (index_type) Int)
(declare-fun of_rep1 (Int) index_type)
(assert (forall ((x index_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x index_type)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_handler__integer_list__list_node__value element_type) (rec__list_handler__integer_list__list_node__next index_type) (rec__list_handler__integer_list__list_node__previous index_type)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) element_type (rec__list_handler__integer_list__list_node__value a))
(define-fun us_split_fields_Next__projection ((a us_split_fields)) index_type (rec__list_handler__integer_list__list_node__next a))
(define-fun us_split_fields_Previous__projection ((a us_split_fields)) index_type (rec__list_handler__integer_list__list_node__previous a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__list_handler__integer_list__list_node__value (us_split_fields1 a))) (to_rep (rec__list_handler__integer_list__list_node__value (us_split_fields1 b)))) (= (to_rep1 (rec__list_handler__integer_list__list_node__next (us_split_fields1 a))) (to_rep1 (rec__list_handler__integer_list__list_node__next (us_split_fields1 b))))) (= (to_rep1 (rec__list_handler__integer_list__list_node__previous (us_split_fields1 a))) (to_rep1 (rec__list_handler__integer_list__list_node__previous (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const list_handler__integer_list__list_node__value__first__bit Int)
(declare-const list_handler__integer_list__list_node__value__last__bit Int)
(declare-const list_handler__integer_list__list_node__value__position Int)
(assert (<= 0 list_handler__integer_list__list_node__value__first__bit))
(assert (< list_handler__integer_list__list_node__value__first__bit list_handler__integer_list__list_node__value__last__bit))
(assert (<= 0 list_handler__integer_list__list_node__value__position))
(declare-const list_handler__integer_list__list_node__next__first__bit Int)
(declare-const list_handler__integer_list__list_node__next__last__bit Int)
(declare-const list_handler__integer_list__list_node__next__position Int)
(assert (<= 0 list_handler__integer_list__list_node__next__first__bit))
(assert (< list_handler__integer_list__list_node__next__first__bit list_handler__integer_list__list_node__next__last__bit))
(assert (<= 0 list_handler__integer_list__list_node__next__position))
(declare-const list_handler__integer_list__list_node__previous__first__bit Int)
(declare-const list_handler__integer_list__list_node__previous__last__bit Int)
(declare-const list_handler__integer_list__list_node__previous__position Int)
(assert (<= 0 list_handler__integer_list__list_node__previous__first__bit))
(assert (< list_handler__integer_list__list_node__previous__first__bit list_handler__integer_list__list_node__previous__last__bit))
(assert (<= 0 list_handler__integer_list__list_node__previous__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((list_node__ref (mk_list_node__ref (list_node__content us_rep)))))
(define-fun list_node__ref___projection ((a list_node__ref)) us_rep (list_node__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep Int) (Array Int us_rep))
(assert (forall ((v us_rep)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (bool_eq (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int index_type))))))
(declare-fun slide1 ((Array Int index_type) Int Int) (Array Int index_type))
(assert (forall ((a (Array Int index_type))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int index_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int index_type) Int Int (Array Int index_type) Int Int) (Array Int index_type))
(assert (forall ((a (Array Int index_type)) (b (Array Int index_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (index_type Int) (Array Int index_type))
(assert (forall ((v index_type)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq2 ((a (Array Int index_type)) (a__first Int) (a__last Int) (b (Array Int index_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int index_type)) (b (Array Int index_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array Int index_type) Int Int (Array Int index_type) Int Int) Int)
(assert (forall ((a (Array Int index_type)) (b (Array Int index_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int index_type)) (b (Array Int index_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int index_type)) (b (Array Int index_type))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort status_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (status_type status_type) Bool)
(declare-const dummy4 status_type)
(declare-datatypes () ((status_type__ref (mk_status_type__ref (status_type__content status_type)))))
(define-fun status_type__ref___projection ((a status_type__ref)) status_type (status_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_147 Int) (temp___is_init_144 Bool) (temp___skip_constant_145 Bool) (temp___do_toplevel_146 Bool)) Bool (=> (or (= temp___is_init_144 true) (<= 0 3)) (in_range4 temp___expr_147)))
(define-fun dynamic_invariant2 ((temp___expr_153 Int) (temp___is_init_150 Bool) (temp___skip_constant_151 Bool) (temp___do_toplevel_152 Bool)) Bool (=> (or (= temp___is_init_150 true) (<= 0 128)) (in_range3 temp___expr_153)))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list_handler__integer_list__iterator__pointer index_type)))))
(define-fun us_split_fields_Pointer__projection ((a us_split_fields2)) index_type (rec__list_handler__integer_list__iterator__pointer a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep1 (rec__list_handler__integer_list__iterator__pointer (us_split_fields3 a))) (to_rep1 (rec__list_handler__integer_list__iterator__pointer (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const list_handler__integer_list__iterator__pointer__first__bit Int)
(declare-const list_handler__integer_list__iterator__pointer__last__bit Int)
(declare-const list_handler__integer_list__iterator__pointer__position Int)
(assert (<= 0 list_handler__integer_list__iterator__pointer__first__bit))
(assert (< list_handler__integer_list__iterator__pointer__first__bit list_handler__integer_list__iterator__pointer__last__bit))
(assert (<= 0 list_handler__integer_list__iterator__pointer__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((iterator__ref (mk_iterator__ref (iterator__content us_rep1)))))
(define-fun iterator__ref___projection ((a iterator__ref)) us_rep1 (iterator__content a))
(declare-fun back (tuple0) us_rep1)
(declare-fun back__function_guard (us_rep1 tuple0) Bool)
(assert true)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant3 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_141)))
(declare-const count Int)
(declare-const free Int)
(declare-const current Int)
(declare-const status Int)
(declare-const o index_type)
(declare-const o1 Int)
(declare-const result Int)
(declare-const current1 Int)
(declare-const count1 Int)
(declare-const free1 Int)
(declare-const current2 Int)
(declare-const status1 Int)
(declare-const count2 Int)
(declare-const free2 Int)
(declare-const status2 Int)
(assert (in_range1 lower))
(assert (in_range1 upper))
(assert (in_range3 count))
(assert (in_range3 free))
(assert (= result current))
(assert (= current1 lower))
(assert (in_range1 current1))
(assert (=> (<= 0 3) (in_range4 status)))
(assert (<= current1 upper))
(assert (and (and (and (and (in_range3 count1) (=> (<= (- 2147483648) 2147483647) (in_range1 current2))) (in_range3 free1)) (=> (<= 0 3) (in_range4 status1))) (<= current2 upper)))
(assert (= (mk___rep1 (mk___split_fields1 o)) (back Tuple0)))
(assert (and (and (in_range4 status2) (in_range3 count2)) (in_range3 free2)))
(assert (= status2 0))
(assert (not (= current2 upper)))
(assert (not (in_range1 (+ current2 1))))
(check-sat)
(exit)
