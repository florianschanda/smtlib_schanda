(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : extended_index_type, extended_index_type -> bool

logic dummy1 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type direction

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : direction, direction -> bool

logic dummy2 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

type position_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : position_type, position_type -> bool

logic dummy3 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__binary_trees__cell__left : extended_index_type;
rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((((to_rep(((a).us_split_fields1).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields1).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields1).rec__binary_trees__cell__position))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields1).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields1).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields1).rec__binary_trees__cell__position)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size({ us_split_fields1 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : extended_index_type

logic dummy5 : extended_index_type

logic dummy6 : extended_index_type

logic dummy7 : position_type

type cell__ref = { cell__content : us_rep
}

function cell__ref___projection(a: cell__ref) : us_rep = (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton({ us_split_fields1 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields1 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq6((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq6((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq6((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy8 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq5 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep) farray
}

function us_split_fields_S__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields3).rec__binary_trees__forest__s)) and
  (bool_eq7(((a).us_split_fields3).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields3).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields3).rec__binary_trees__forest__s)) and
  (bool_eq7(((a).us_split_fields3).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields3).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:(int,us_rep) farray.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:(int,us_rep) farray.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy9 : extended_index_type

logic dummy10 : (int,us_rep) farray

type forest__ref = { forest__content : us_rep1
}

function forest__ref___projection(a: forest__ref) : us_rep1 =
  (a).forest__content

logic size : us_rep1 -> int

logic size__function_guard : int, us_rep1 -> prop

logic tree_structure : us_rep1 -> bool

logic tree_structure__function_guard : bool, us_rep1 -> prop

logic parent : us_rep1, int -> int

logic parent__function_guard : int, us_rep1, int -> prop

logic valid_root : us_rep1, int -> bool

logic valid_root__function_guard : bool, us_rep1, int -> prop

axiom parent__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i:int [parent({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. ((in_range1(i) and
  (tree_structure({ us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true)) -> ((((valid_root({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) -> (parent({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((size({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({ us_split_fields3 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) and in_range2(parent({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i))))))

axiom parent__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i:int [parent({ us_split_fields3 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. (in_range1(i) -> (parent({
  us_split_fields3 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  i) = to_rep((((f1[i])).us_split_fields1).rec__binary_trees__cell__parent)))))

logic position : us_rep1, int -> int

logic position__function_guard : int, us_rep1, int -> prop

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i:int [position({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((in_range1(i) and (tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) and (not (parent({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range3(position({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom position__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep) farray.
  (forall i:int [position({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (in_range1(i) -> (position({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = to_rep1((((f1[i])).us_split_fields1).rec__binary_trees__cell__position)))))

logic f : extended_index_type

logic f1 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom size__post_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep) farray [size({
  us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. ((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = true) -> in_range2(size({
  us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }))))

axiom size__def_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep) farray [size({
  us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. (size({ us_split_fields3 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 }
  }) = to_rep(f2)))

axiom valid_root__post_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep) farray.
  (forall i1:int [valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i1)]. ((in_range1(i1) and (tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 }
  }) = true)) -> ((size({ us_split_fields3 = { rec__binary_trees__forest__s =
  f2; rec__binary_trees__forest__c = f3 } }) <  i1) -> (not (valid_root({
  us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }, i1) = true))))))

axiom valid_root__def_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep) farray.
  (forall i1:int [valid_root({ us_split_fields3 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i1)]. ((valid_root({ us_split_fields3 = { rec__binary_trees__forest__s =
  f2; rec__binary_trees__forest__c = f3 } }, i1) = true) <->
  ((i1 <= to_rep(f2)) and
  (to_rep1((((f3[i1])).us_split_fields1).rec__binary_trees__cell__position) = 2)))))

axiom tree_structure__post_axiom : true

axiom tree_structure__def_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep) farray
  [tree_structure({ us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. ((tree_structure({
  us_split_fields3 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = true) <->
  (((((((((forall i1:int. ((((to_rep(f2) + 1) <= i1) and (i1 <= 100)) ->
          (bool_eq6((f3[i1]), { us_split_fields1 = {
          rec__binary_trees__cell__left = of_rep(0);
          rec__binary_trees__cell__right = of_rep(0);
          rec__binary_trees__cell__parent = of_rep(0);
          rec__binary_trees__cell__position = of_rep1(2) } }) = true))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  ((0 <= to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent)) and
  (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent) <= to_rep(f2)))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  ((0 <= to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__left) <= to_rep(f2)))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  ((0 <= to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__right)) and
  (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__right) <= to_rep(f2)))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  ((to_rep1((((f3[i1])).us_split_fields1).rec__binary_trees__cell__position) = 2) ->
  (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent) = 0))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  ((not (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__left) = 0)) ->
  ((to_rep1((((f3[to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__position) = 0) and
  (to_rep((((f3[to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__parent) = i1)))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  ((not (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__right) = 0)) ->
  ((to_rep1((((f3[to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__position) = 1) and
  (to_rep((((f3[to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__parent) = i1)))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  (((not (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f3[i1])).us_split_fields1).rec__binary_trees__cell__position) = 0)) ->
  (to_rep((((f3[to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__left) = i1))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  (((not (to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f3[i1])).us_split_fields1).rec__binary_trees__cell__position) = 1)) ->
  (to_rep((((f3[to_rep((((f3[i1])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__right) = i1)))))))

logic binary_trees__peek__result : int

logic o : int

logic j : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic j1 : int

logic o8 : int

logic result : int

logic binary_trees__peek__result1 : int

logic binary_trees__peek__result2 : int

logic binary_trees__peek__result3 : int

logic binary_trees__peek__result4 : int

logic binary_trees__peek__result5 : int

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

axiom H : in_range1(i)

axiom H1 : in_range3(d)

axiom H2 : (tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)

axiom H3 : (binary_trees__peek__result1 = binary_trees__peek__result2)

axiom H4 : (binary_trees__peek__result3 = binary_trees__peek__result1)

axiom H5 : ((d = 0) ->
  (o = to_rep((((f1[i])).us_split_fields1).rec__binary_trees__cell__left)))

axiom H6 : ((not (d = 0)) ->
  (o = to_rep((((f1[i])).us_split_fields1).rec__binary_trees__cell__right)))

axiom H7 : (result = binary_trees__peek__result)

axiom H8 : (binary_trees__peek__result1 = o)

axiom H9 : (binary_trees__peek__result4 = binary_trees__peek__result2)

axiom H10 : (binary_trees__peek__result5 = binary_trees__peek__result3)

axiom H11 : (not (binary_trees__peek__result4 = 0))

axiom H12 : ((o5 = binary_trees__peek__result4) and
  in_range1(binary_trees__peek__result4))

axiom H13 : (tree_structure({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)

axiom H14 : ((o6 = binary_trees__peek__result4) and
  in_range1(binary_trees__peek__result4))

 (* File "tree_model.ads", line 15, characters 0-0 *)
goal WP_parameter_def : (not (parent({ us_split_fields3 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  o6) = 0))
