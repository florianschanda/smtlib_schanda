(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (natural natural) Bool)
(declare-const dummy3 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(define-fun default_initial_assumption ((temp___expr_338 us_rep) (temp___skip_top_level_339 Bool)) Bool (=> (not (= temp___skip_top_level_339 true)) (= (length temp___expr_338) 0)))
(assert (forall ((s us_rep)) (! (dynamic_invariant (length s) true false true true) :pattern ((length s)))))
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 3))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_330 Int) (temp___is_init_326 Bool) (temp___skip_constant_327 Bool) (temp___do_toplevel_328 Bool) (temp___do_typ_inv_329 Bool)) Bool (=> (or (= temp___is_init_326 true) (<= 0 3)) (in_range4 temp___expr_330)))
(assert (forall ((s us_rep)) (forall ((n Int)) (! (=> (and (dynamic_invariant1 n true true true true) (and (<= 1 n) (<= n (length s)))) (dynamic_invariant2 (get s n) true false true true)) :pattern ((get s n))))))
(declare-fun is_prepend (us_rep Int us_rep) Bool)
(declare-fun is_prepend__function_guard (Bool us_rep Int us_rep) Bool)
(assert (forall ((s us_rep) (result__ us_rep)) (forall ((e Int)) (! (=> (dynamic_invariant2 e true true true true) (= (= (is_prepend s e result__) true) (and (and (= (length result__) (+ (length s) 1)) (= (get result__ 1) e)) (forall ((m Int)) (=> (and (<= 2 m) (<= m (length result__))) (= (get result__ m) (get s (- m 1)))))))) :pattern ((is_prepend s e result__))))))
(declare-fun prepend (us_rep Int) us_rep)
(declare-fun prepend__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((s us_rep)) (forall ((e Int)) (! (=> (dynamic_invariant2 e true true true true) (= (is_prepend s e (prepend s e)) true)) :pattern ((prepend s e))))))
(declare-fun is_removed_at (us_rep Int us_rep) Bool)
(declare-fun is_removed_at__function_guard (Bool us_rep Int us_rep) Bool)
(declare-fun remove_at (us_rep Int) us_rep)
(declare-fun remove_at__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((s us_rep)) (forall ((n Int)) (! (=> (and (dynamic_invariant1 n true true true true) (and (<= 1 n) (<= n (length s)))) (= (is_removed_at s n (remove_at s n)) true)) :pattern ((remove_at s n))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_allocator__m__t__available us_rep) (rec__list_allocator__m__t__allocated us_rep)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) us_rep (rec__list_allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields)) us_rep (rec__list_allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq2 (rec__list_allocator__m__t__available (us_split_fields1 a)) (rec__list_allocator__m__t__available (us_split_fields1 b))) true) (= (user_eq2 (rec__list_allocator__m__t__allocated (us_split_fields1 a)) (rec__list_allocator__m__t__allocated (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const list_allocator__m__t__available__first__bit Int)
(declare-const list_allocator__m__t__available__last__bit Int)
(declare-const list_allocator__m__t__available__position Int)
(assert (<= 0 list_allocator__m__t__available__first__bit))
(assert (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))
(assert (<= 0 list_allocator__m__t__available__position))
(declare-const list_allocator__m__t__allocated__first__bit Int)
(declare-const list_allocator__m__t__allocated__last__bit Int)
(declare-const list_allocator__m__t__allocated__position Int)
(assert (<= 0 list_allocator__m__t__allocated__first__bit))
(assert (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))
(assert (<= 0 list_allocator__m__t__allocated__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))
(declare-fun oeq1 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq5 a b) (oeq1 a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_346 us_rep1) (temp___skip_top_level_347 Bool)) Bool (and (= (length (rec__list_allocator__m__t__available (us_split_fields1 temp___expr_346))) 0) (= (length (rec__list_allocator__m__t__allocated (us_split_fields1 temp___expr_346))) 0)))
(assert true)
(assert (forall ((x us_rep1) (y us_rep1)) (! (= (= (oeq1 x y) true) (and (= (oeq (rec__list_allocator__m__t__available (us_split_fields1 x)) (rec__list_allocator__m__t__available (us_split_fields1 y))) true) (= (oeq (rec__list_allocator__m__t__allocated (us_split_fields1 x)) (rec__list_allocator__m__t__allocated (us_split_fields1 y))) true))) :pattern ((oeq1 x y)))))
(declare-fun mem (us_rep Int) Bool)
(declare-fun mem__function_guard (Bool us_rep Int) Bool)
(declare-sort resource 0)
(declare-fun resourceqtint (resource) Int)
(assert (forall ((i resource)) (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 3))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (resource resource) Bool)
(declare-const dummy6 resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant3 ((temp___expr_310 Int) (temp___is_init_306 Bool) (temp___skip_constant_307 Bool) (temp___do_toplevel_308 Bool) (temp___do_typ_inv_309 Bool)) Bool (=> (or (= temp___is_init_306 true) (<= 0 3)) (in_range5 temp___expr_310)))
(assert true)
(assert (forall ((s us_rep)) (forall ((r Int)) (! (= (= (mem s r) true) (exists ((j Int)) (and (and (<= 1 j) (<= j (length s))) (= (get s j) r)))) :pattern ((mem s r))))))
(declare-fun find (us_rep Int) Int)
(declare-fun find__function_guard (Int us_rep Int) Bool)
(assert (forall ((s us_rep)) (forall ((r Int)) (! (=> (dynamic_invariant3 r true true true true) (let ((result (find s r))) (and (ite (= (mem s r) true) (and (and (<= 1 result) (<= result (length s))) (= (get s result) r)) (= result 0)) (dynamic_invariant result true false true true)))) :pattern ((find s r))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun to_rep ((x resource)) Int (resourceqtint x))
(declare-fun of_rep (Int) resource)
(assert (forall ((x resource)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x resource)) (! (in_range5 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort status 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (status status) Bool)
(declare-const dummy7 status)
(declare-datatypes () ((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content a))
(declare-fun to_rep1 (status) Int)
(declare-fun of_rep1 (Int) status)
(assert (forall ((x status)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x status)) (! (in_range6 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list_allocator__cell__stat status) (rec__list_allocator__cell__prev resource) (rec__list_allocator__cell__next resource)))))
(define-fun us_split_fields_Stat__projection ((a us_split_fields2)) status (rec__list_allocator__cell__stat a))
(define-fun us_split_fields_Prev__projection ((a us_split_fields2)) resource (rec__list_allocator__cell__prev a))
(define-fun us_split_fields_Next__projection ((a us_split_fields2)) resource (rec__list_allocator__cell__next a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___8__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields3 a))) (to_rep1 (rec__list_allocator__cell__stat (us_split_fields3 b)))) (= (to_rep (rec__list_allocator__cell__prev (us_split_fields3 a))) (to_rep (rec__list_allocator__cell__prev (us_split_fields3 b))))) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 a))) (to_rep (rec__list_allocator__cell__next (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const list_allocator__cell__stat__first__bit Int)
(declare-const list_allocator__cell__stat__last__bit Int)
(declare-const list_allocator__cell__stat__position Int)
(assert (<= 0 list_allocator__cell__stat__first__bit))
(assert (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))
(assert (<= 0 list_allocator__cell__stat__position))
(declare-const list_allocator__cell__prev__first__bit Int)
(declare-const list_allocator__cell__prev__last__bit Int)
(declare-const list_allocator__cell__prev__position Int)
(assert (<= 0 list_allocator__cell__prev__first__bit))
(assert (< list_allocator__cell__prev__first__bit list_allocator__cell__prev__last__bit))
(assert (<= 0 list_allocator__cell__prev__position))
(declare-const list_allocator__cell__next__first__bit Int)
(declare-const list_allocator__cell__next__last__bit Int)
(declare-const list_allocator__cell__next__position Int)
(assert (<= 0 list_allocator__cell__next__first__bit))
(assert (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))
(assert (<= 0 list_allocator__cell__next__position))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep2))))))
(declare-fun slide ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq2 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq2 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun is_valid (Int Int us_split_fields (Array Int us_rep2)) Bool)
(declare-fun is_valid__function_guard (Bool Int Int us_split_fields (Array Int us_rep2)) Bool)
(declare-sort valid_resource 0)
(declare-fun valid_resourceqtint (valid_resource) Int)
(assert (forall ((i valid_resource)) (and (<= 1 (valid_resourceqtint i)) (<= (valid_resourceqtint i) 3))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (valid_resource valid_resource) Bool)
(declare-const dummy9 valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(assert true)
(assert (forall ((list_allocator__first_available Int) (list_allocator__first_allocated Int)) (forall ((list_allocator__m__model__fields us_split_fields)) (forall ((list_allocator__data (Array Int us_rep2))) (! (= (= (is_valid list_allocator__first_available list_allocator__first_allocated list_allocator__m__model__fields list_allocator__data) true) (and (and (and (and (ite (not (= list_allocator__first_available 0)) (and (< 0 (length (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))))) (= (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) 1) list_allocator__first_available)) (= (length (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields)))) 0)) (ite (not (= list_allocator__first_allocated 0)) (and (< 0 (length (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))))) (= (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) 1) list_allocator__first_allocated)) (= (length (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields)))) 0))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields)))))) (and (and (and (in_range7 (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select list_allocator__data (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j))))) (ite (< j (length (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))))) (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) (+ j 1)) 0))) (= (to_rep (rec__list_allocator__cell__prev (us_split_fields3 (select list_allocator__data (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j))))) (ite (< 1 j) (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) (- j 1)) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (length (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields)))))) (=> (not (= j k)) (not (= (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j) (get (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) k)))))))))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields)))))) (and (and (and (in_range7 (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select list_allocator__data (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j))))) (ite (< j (length (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))))) (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) (+ j 1)) 0))) (= (to_rep (rec__list_allocator__cell__prev (us_split_fields3 (select list_allocator__data (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j))))) (ite (< 1 j) (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) (- j 1)) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (length (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields)))))) (=> (not (= j k)) (not (= (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) j) (get (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) k)))))))))) (forall ((r Int)) (=> (and (<= 1 r) (<= r 3)) (ite (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields3 (select list_allocator__data r)))) 0) (and (= (mem (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) r) true) (not (= (mem (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) r) true))) (and (not (= (mem (rec__list_allocator__m__t__available (us_split_fields1 (mk___rep list_allocator__m__model__fields))) r) true)) (= (mem (rec__list_allocator__m__t__allocated (us_split_fields1 (mk___rep list_allocator__m__model__fields))) r) true))))))) :pattern ((is_valid list_allocator__first_available list_allocator__first_allocated list_allocator__m__model__fields list_allocator__data)))))))
(declare-const res Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_362 Int) (temp___is_init_358 Bool) (temp___skip_constant_359 Bool) (temp___do_toplevel_360 Bool) (temp___do_typ_inv_361 Bool)) Bool (=> (or (= temp___is_init_358 true) (<= 0 1)) (in_range6 temp___expr_362)))
(define-fun dynamic_invariant6 ((temp___expr_317 Int) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool) (temp___do_typ_inv_316 Bool)) Bool (=> (or (= temp___is_init_313 true) (<= 1 3)) (in_range7 temp___expr_317)))
(assert (forall ((s1 us_rep) (s2 us_rep)) (! (= (= (oeq s1 s2) true) (and (= (length s1) (length s2)) (forall ((n Int)) (=> (and (<= 1 n) (<= n (length s1))) (= (get s1 n) (get s2 n)))))) :pattern ((oeq s1 s2)))))
(assert (forall ((s us_rep) (result__ us_rep)) (forall ((n Int)) (! (=> (and (dynamic_invariant1 n true true true true) (and (<= 1 n) (<= n (length s)))) (= (= (is_removed_at s n result__) true) (and (= (length result__) (- (length s) 1)) (forall ((m Int)) (=> (and (<= 1 m) (<= m (length result__))) (ite (< m n) (= (get result__ m) (get s m)) (=> (<= n m) (= (get result__ m) (get s (+ m 1)))))))))) :pattern ((is_removed_at s n result__))))))
(declare-const rliteral resource)
(assert (= (resourceqtint rliteral) 0))
(declare-const model____split_fields us_rep)
(declare-const model____split_fields1 us_rep)
(declare-const data (Array Int us_rep2))
(declare-const first_available Int)
(declare-const first_allocated Int)
(declare-const prev_alloc Int)
(declare-const next_alloc Int)
(declare-const o Int)
(declare-const o1 status)
(declare-const o2 resource)
(declare-const o3 resource)
(declare-const o4 status)
(declare-const o5 resource)
(declare-const o6 resource)
(declare-const o7 status)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 status)
(declare-const o11 resource)
(declare-const o12 resource)
(declare-const o13 status)
(declare-const o14 resource)
(declare-const o15 resource)
(declare-const o16 resource)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 status)
(declare-const o20 resource)
(declare-const o21 resource)
(declare-const o22 status)
(declare-const o23 resource)
(declare-const o24 resource)
(declare-const o25 resource)
(declare-const o26 Int)
(declare-const o27 resource)
(declare-const o28 status)
(declare-const o29 status)
(declare-const o30 resource)
(declare-const o31 resource)
(declare-const o32 status)
(declare-const o33 resource)
(declare-const o34 resource)
(declare-const o35 Int)
(declare-const o36 (Array Int us_rep2))
(declare-const o37 resource)
(declare-const o38 status)
(declare-const o39 resource)
(declare-const o40 resource)
(declare-const o41 status)
(declare-const o42 resource)
(declare-const o43 resource)
(declare-const o44 Int)
(declare-const o45 (Array Int us_rep2))
(declare-const o46 resource)
(declare-const o47 us_split_fields2)
(declare-const o48 us_rep2)
(declare-const o49 Int)
(declare-const o50 (Array Int us_rep2))
(declare-const o51 Int)
(declare-const o52 Int)
(declare-const o53 us_rep)
(declare-const o54 us_split_fields)
(declare-const temp___455 us_rep1)
(declare-const o55 us_rep)
(declare-const o56 us_split_fields)
(declare-const temp___457 us_rep1)
(declare-const j Int)
(declare-const o57 Int)
(declare-const model____split_fields2 us_split_fields)
(declare-const data1 (Array Int us_rep2))
(declare-const first_available1 Int)
(declare-const first_allocated1 Int)
(declare-const prev_alloc1 Int)
(declare-const next_alloc1 Int)
(declare-const result Bool)
(declare-const result1 int__ref)
(declare-const prev_alloc2 Int)
(declare-const result2 int__ref)
(declare-const next_alloc2 Int)
(declare-const result3 map__ref)
(declare-const data2 (Array Int us_rep2))
(declare-const result4 map__ref)
(declare-const data3 (Array Int us_rep2))
(declare-const result5 map__ref)
(declare-const data4 (Array Int us_rep2))
(declare-const result6 int__ref)
(declare-const first_available2 Int)
(declare-const result7 int__ref)
(declare-const first_allocated2 Int)
(declare-const result8 us_split_fields__ref)
(declare-const model____split_fields3 us_split_fields)
(declare-const result9 us_split_fields__ref)
(declare-const model____split_fields4 us_split_fields)
(declare-const model____split_fields5 us_split_fields__ref)
(declare-const data5 map__ref)
(declare-const first_available3 int__ref)
(declare-const first_allocated3 int__ref)
(declare-const prev_alloc3 int__ref)
(declare-const next_alloc3 int__ref)
(declare-const model____split_fields6 us_split_fields)
(declare-const data6 (Array Int us_rep2))
(declare-const first_available4 Int)
(declare-const first_allocated4 Int)
(declare-const prev_alloc4 Int)
(declare-const next_alloc4 Int)
(declare-const result10 Bool)
(declare-const result11 Bool)
(assert (in_range5 first_available))
(assert (in_range5 first_allocated))
(assert (in_range5 res))
(assert (= (is_valid first_available first_allocated (mk___split_fields model____split_fields model____split_fields1) data) true))
(assert (=> (<= 0 3) (in_range5 prev_alloc)))
(assert (=> (<= 0 3) (in_range5 next_alloc)))
(assert (=> (not (= res 0)) (and (<= 1 res) (<= res 3))))
(assert (=> (not (= res 0)) (= o res)))
(assert (=> (not (= res 0)) (= (mk___rep1 (mk___split_fields1 o1 o2 o3)) (select data o))))
(assert (=> (not (= res 0)) (= o1 o4)))
(assert (=> (not (= res 0)) (= o2 o5)))
(assert (=> (not (= res 0)) (= o3 o6)))
(assert (=> (not (= res 0)) (= o7 o4)))
(assert (=> (not (= res 0)) (= o8 (to_rep1 o7))))
(assert (=> (not (= res 0)) (= result (ite (= o8 1) true false))))
(assert (=> (not (not (= res 0))) (= result false)))
(assert (=> (= result true) (and (<= 1 res) (<= res 3))))
(assert (=> (= result true) (= o9 res)))
(assert (=> (= result true) (= (mk___rep1 (mk___split_fields1 o10 o11 o12)) (select data o9))))
(assert (=> (= result true) (= o10 o13)))
(assert (=> (= result true) (= o11 o14)))
(assert (=> (= result true) (= o12 o15)))
(assert (=> (= result true) (= o16 o14)))
(assert (=> (= result true) (= o17 (to_rep o16))))
(assert (=> (= result true) (= result1 (mk_int__ref prev_alloc))))
(assert (=> (= result true) (= prev_alloc2 o17)))
(assert (=> (= result true) (and (<= 1 res) (<= res 3))))
(assert (=> (= result true) (= o18 res)))
(assert (=> (= result true) (= (mk___rep1 (mk___split_fields1 o19 o20 o21)) (select data o18))))
(assert (=> (= result true) (= o19 o22)))
(assert (=> (= result true) (= o20 o23)))
(assert (=> (= result true) (= o21 o24)))
(assert (=> (= result true) (= o25 o24)))
(assert (=> (= result true) (= o26 (to_rep o25))))
(assert (=> (= result true) (= result2 (mk_int__ref next_alloc))))
(assert (=> (= result true) (= next_alloc2 o26)))
(assert (=> (= result true) (= (to_rep o27) first_available)))
(assert (=> (= result true) (= (to_rep1 o28) 0)))
(assert (=> (= result true) (= o28 o29)))
(assert (=> (= result true) (= rliteral o30)))
(assert (=> (= result true) (= o27 o31)))
(assert (=> (= result true) (= o32 o29)))
(assert (=> (= result true) (= o33 o30)))
(assert (=> (= result true) (= o34 o31)))
(assert (=> (= result true) (and (<= 1 res) (<= res 3))))
(assert (=> (= result true) (= o35 res)))
(assert (=> (= result true) (= o36 (store data o35 (mk___rep1 (mk___split_fields1 o32 o33 o34))))))
(assert (=> (= result true) (= result3 (mk_map__ref data))))
(assert (=> (= result true) (= data2 o36)))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= (to_rep o37) next_alloc2))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= (rec__list_allocator__cell__stat (us_split_fields3 (select data2 prev_alloc2))) o38))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= (rec__list_allocator__cell__prev (us_split_fields3 (select data2 prev_alloc2))) o39))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= o37 o40))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= o41 o38))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= o42 o39))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= o43 o40))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (and (<= 1 prev_alloc2) (<= prev_alloc2 3)))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= o44 prev_alloc2))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= o45 (store data2 o44 (mk___rep1 (mk___split_fields1 o41 o42 o43)))))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= result4 (mk_map__ref data2)))))
(assert (=> (= result true) (=> (not (= prev_alloc2 0)) (= data3 o45))))
(assert (=> (= result true) (=> (not (not (= prev_alloc2 0))) (= data3 data2))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= (to_rep o46) prev_alloc2))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= o47 (mk___split_fields1 (rec__list_allocator__cell__stat (us_split_fields3 (select data3 next_alloc2))) o46 (rec__list_allocator__cell__next (us_split_fields3 (select data3 next_alloc2))))))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= o48 (mk___rep1 o47)))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (and (<= 1 next_alloc2) (<= next_alloc2 3)))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= o49 next_alloc2))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= o50 (store data3 o49 o48)))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= result5 (mk_map__ref data3)))))
(assert (=> (= result true) (=> (not (= next_alloc2 0)) (= data4 o50))))
(assert (=> (= result true) (=> (not (not (= next_alloc2 0))) (= data4 data3))))
(assert (=> (= result true) (= result6 (mk_int__ref first_available))))
(assert (=> (= result true) (= first_available2 res)))
(assert (=> (= result true) (=> (= res first_allocated) (= result7 (mk_int__ref first_allocated)))))
(assert (=> (= result true) (=> (= res first_allocated) (= first_allocated2 next_alloc2))))
(assert (=> (= result true) (=> (not (= res first_allocated)) (= first_allocated2 first_allocated))))
(assert (=> (= result true) (=> (not (= res first_allocated)) (= first_allocated2 first_allocated1))))
(assert (=> (= result true) (and (= o51 (find model____split_fields1 res)) (and (in_range3 o51) (ite (= (mem model____split_fields1 res) true) (and (and (<= 1 o51) (<= o51 (length model____split_fields1))) (= (get model____split_fields1 o51) res)) (= o51 0))))))
(assert (=> (= result true) (and (= o52 o51) (in_range2 o51))))
(assert (=> (= result true) (and (= o53 (remove_at model____split_fields1 o52)) (= (is_removed_at model____split_fields1 o52 o53) true))))
(assert (=> (= result true) (= o54 (mk___split_fields model____split_fields o53))))
(assert (=> (= result true) (= temp___455 (mk___rep o54))))
(assert (=> (= result true) (= result8 (mk___split_fields__ref (mk___split_fields model____split_fields model____split_fields1)))))
(assert (=> (= result true) (= model____split_fields3 (us_split_fields1 temp___455))))
(assert (=> (= result true) (and (= o55 (prepend (rec__list_allocator__m__t__available model____split_fields3) res)) (= (is_prepend (rec__list_allocator__m__t__available model____split_fields3) res o55) true))))
(assert (=> (= result true) (= o56 (mk___split_fields o55 (rec__list_allocator__m__t__allocated model____split_fields3)))))
(assert (=> (= result true) (= temp___457 (mk___rep o56))))
(assert (=> (= result true) (= result9 (mk___split_fields__ref model____split_fields3))))
(assert (=> (= result true) (= model____split_fields4 (us_split_fields1 temp___457))))
(assert (=> (= result true) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__available model____split_fields4)))) (and (in_range7 (get (rec__list_allocator__m__t__available model____split_fields4) j1)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__available model____split_fields4) j1))))) (ite (< j1 (length (rec__list_allocator__m__t__available model____split_fields4))) (get (rec__list_allocator__m__t__available model____split_fields4) (+ j1 1)) 0)))))))
(assert (=> (= result true) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__allocated model____split_fields4)))) (in_range7 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1))))))
(assert (=> (= result true) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__allocated model____split_fields4)))) (and (in_range7 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1))))) (ite (< j1 (length (rec__list_allocator__m__t__allocated model____split_fields4))) (get (rec__list_allocator__m__t__allocated model____split_fields4) (+ j1 1)) 0)))))))
(assert (=> (= result true) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__available model____split_fields4)))) (and (and (and (in_range7 (get (rec__list_allocator__m__t__available model____split_fields4) j1)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__available model____split_fields4) j1))))) (ite (< j1 (length (rec__list_allocator__m__t__available model____split_fields4))) (get (rec__list_allocator__m__t__available model____split_fields4) (+ j1 1)) 0))) (= (to_rep (rec__list_allocator__cell__prev (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__available model____split_fields4) j1))))) (ite (< 1 j1) (get (rec__list_allocator__m__t__available model____split_fields4) (- j1 1)) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (length (rec__list_allocator__m__t__available model____split_fields4)))) (=> (not (= j1 k)) (not (= (get (rec__list_allocator__m__t__available model____split_fields4) j1) (get (rec__list_allocator__m__t__available model____split_fields4) k)))))))))))
(assert (=> (= result true) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__allocated model____split_fields4)))) (and (and (and (in_range7 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1))))) (ite (< j1 (length (rec__list_allocator__m__t__allocated model____split_fields4))) (get (rec__list_allocator__m__t__allocated model____split_fields4) (+ j1 1)) 0))) (= (to_rep (rec__list_allocator__cell__prev (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1))))) (ite (< 1 j1) (get (rec__list_allocator__m__t__allocated model____split_fields4) (- j1 1)) 0))) (forall ((k Int)) (=> (and (<= 1 k) (<= k (length (rec__list_allocator__m__t__allocated model____split_fields4)))) (=> (not (= j1 k)) (not (= (get (rec__list_allocator__m__t__allocated model____split_fields4) j1) (get (rec__list_allocator__m__t__allocated model____split_fields4) k)))))))))))
(assert (=> (= result true) (forall ((r Int)) (=> (and (<= 1 r) (<= r 3)) (ite (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields3 (select data4 r)))) 0) (and (= (mem (rec__list_allocator__m__t__available model____split_fields4) r) true) (not (= (mem (rec__list_allocator__m__t__allocated model____split_fields4) r) true))) (and (not (= (mem (rec__list_allocator__m__t__available model____split_fields4) r) true)) (= (mem (rec__list_allocator__m__t__allocated model____split_fields4) r) true)))))))
(assert (=> (= result true) (and (and (and (and (ite (not (= first_available2 0)) (and (< 0 (length (rec__list_allocator__m__t__available model____split_fields4))) (= (get (rec__list_allocator__m__t__available model____split_fields4) 1) first_available2)) (= (length (rec__list_allocator__m__t__available model____split_fields4)) 0)) (ite (not (= first_allocated2 0)) (and (< 0 (length (rec__list_allocator__m__t__allocated model____split_fields4))) (= (get (rec__list_allocator__m__t__allocated model____split_fields4) 1) first_allocated2)) (= (length (rec__list_allocator__m__t__allocated model____split_fields4)) 0))) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__available model____split_fields4)))) (and (in_range7 (get (rec__list_allocator__m__t__available model____split_fields4) j1)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__available model____split_fields4) j1))))) (ite (< j1 (length (rec__list_allocator__m__t__available model____split_fields4))) (get (rec__list_allocator__m__t__available model____split_fields4) (+ j1 1)) 0)))))) (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 (length (rec__list_allocator__m__t__allocated model____split_fields4)))) (and (in_range7 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1)) (= (to_rep (rec__list_allocator__cell__next (us_split_fields3 (select data4 (get (rec__list_allocator__m__t__allocated model____split_fields4) j1))))) (ite (< j1 (length (rec__list_allocator__m__t__allocated model____split_fields4))) (get (rec__list_allocator__m__t__allocated model____split_fields4) (+ j1 1)) 0)))))) (forall ((r Int)) (=> (and (<= 1 r) (<= r 3)) (ite (= (to_rep1 (rec__list_allocator__cell__stat (us_split_fields3 (select data4 r)))) 0) (and (= (mem (rec__list_allocator__m__t__available model____split_fields4) r) true) (not (= (mem (rec__list_allocator__m__t__allocated model____split_fields4) r) true))) (and (not (= (mem (rec__list_allocator__m__t__available model____split_fields4) r) true)) (= (mem (rec__list_allocator__m__t__allocated model____split_fields4) r) true))))))))
(assert (=> (not (= result true)) (= next_alloc2 next_alloc)))
(assert (=> (not (= result true)) (= prev_alloc2 prev_alloc)))
(assert (=> (not (= result true)) (= first_allocated2 first_allocated)))
(assert (=> (not (= result true)) (= first_available2 first_available)))
(assert (=> (not (= result true)) (= data4 data)))
(assert (=> (not (= result true)) (= model____split_fields4 (mk___split_fields model____split_fields model____split_fields1))))
(assert (=> (not (= result true)) (= next_alloc2 next_alloc1)))
(assert (=> (not (= result true)) (= prev_alloc2 prev_alloc1)))
(assert (=> (not (= result true)) (= first_allocated2 first_allocated1)))
(assert (=> (not (= result true)) (= first_available2 first_available1)))
(assert (=> (not (= result true)) (= data4 data1)))
(assert (=> (not (= result true)) (= model____split_fields4 model____split_fields2)))
(assert (= next_alloc3 (mk_int__ref next_alloc2)))
(assert (= prev_alloc3 (mk_int__ref prev_alloc2)))
(assert (= first_allocated3 (mk_int__ref first_allocated2)))
(assert (= first_available3 (mk_int__ref first_available2)))
(assert (= data5 (mk_map__ref data4)))
(assert (= model____split_fields5 (mk___split_fields__ref model____split_fields4)))
(assert (= next_alloc4 next_alloc2))
(assert (= prev_alloc4 prev_alloc2))
(assert (= first_allocated4 first_allocated2))
(assert (= first_available4 first_available2))
(assert (= data6 data4))
(assert (= model____split_fields6 model____split_fields4))
(assert (= (mem model____split_fields1 res) true))
(assert (and (= result11 (is_prepend model____split_fields res (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields5)))) (= (= result11 true) (and (and (= (length (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields5))) (+ (length model____split_fields) 1)) (= (get (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields5)) 1) res)) (forall ((m Int)) (=> (and (<= 2 m) (<= m (length (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields5))))) (= (get (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields5)) m) (get model____split_fields (- m 1)))))))))
(assert (=> (= result11 true) (and (= o57 (length (rec__list_allocator__m__t__allocated (us_split_fields__content model____split_fields5)))) (in_range3 o57))))
(assert (=> (= result11 true) (= result10 (ite (= o57 (- (length model____split_fields1) 1)) true false))))
(assert (=> (not (= result11 true)) (= result10 false)))
(assert (= result10 true))
(assert (<= 1 j))
(assert (<= j (length model____split_fields1)))
(assert (not (<= j (length model____split_fields1))))
(check-sat)
(exit)
