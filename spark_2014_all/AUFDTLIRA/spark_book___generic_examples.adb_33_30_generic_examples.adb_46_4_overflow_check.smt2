(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort percent 0)
(declare-fun percentqtint (percent) Int)
(assert (forall ((i percent)) (and (<= 0 (percentqtint i)) (<= (percentqtint i) 100))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (percent percent) Bool)
(declare-const dummy2 percent)
(declare-datatypes () ((percent__ref (mk_percent__ref (percent__content percent)))))
(define-fun percent__ref___projection ((a percent__ref)) percent (percent__content a))
(define-fun to_rep ((x percent)) Int (percentqtint x))
(declare-fun of_rep (Int) percent)
(assert (forall ((x percent)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x percent)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int percent))))))
(declare-fun slide ((Array Int percent) Int Int) (Array Int percent))
(assert (forall ((a (Array Int percent))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int percent))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int percent)) (a__first Int) (a__last Int) (b (Array Int percent)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep (select a temp___idx_173)) (to_rep (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int percent)) (b (Array Int percent))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep (select a temp___idx_173)) (to_rep (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-sort component_type 0)
(declare-fun component_typeqtint (component_type) Int)
(assert (forall ((i component_type)) (and (<= 0 (component_typeqtint i)) (<= (component_typeqtint i) 100))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (component_type component_type) Bool)
(declare-const dummy3 component_type)
(declare-datatypes () ((component_type__ref (mk_component_type__ref (component_type__content component_type)))))
(define-fun component_type__ref___2__projection ((a component_type__ref)) component_type (component_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_638 Int) (temp___is_init_634 Bool) (temp___skip_constant_635 Bool) (temp___do_toplevel_636 Bool) (temp___do_typ_inv_637 Bool)) Bool (=> (or (= temp___is_init_634 true) (<= 0 100)) (in_range4 temp___expr_638)))
(declare-sort character 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (character character) Bool)
(declare-const dummy4 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep1 (character) Int)
(declare-fun of_rep1 (Int) character)
(assert (forall ((x character)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x character)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) character)
(declare-fun last (t) character)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range5 f) (=> (in_range5 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range5 low) (and (in_range5 high) (=> (<= low high) (and (in_range5 low) (in_range5 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int percent)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int percent) (elts a))
(define-fun of_array ((a (Array Int percent)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int percent)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int percent)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int percent)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int percent))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int percent))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int percent))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((array_type__ref (mk_array_type__ref (array_type__content us_t)))))
(define-fun array_type__ref___2__projection ((a array_type__ref)) us_t (array_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_652 us_t) (temp___is_init_648 Bool) (temp___skip_constant_649 Bool) (temp___do_toplevel_650 Bool) (temp___do_typ_inv_651 Bool)) Bool (=> (not (= temp___skip_constant_649 true)) (dynamic_property 0 255 (first1 temp___expr_652) (last1 temp___expr_652))))
(declare-const source us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const pattern Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range5 temp___expr_74)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_625 Int) (temp___is_init_621 Bool) (temp___skip_constant_622 Bool) (temp___do_toplevel_623 Bool) (temp___do_typ_inv_624 Bool)) Bool (=> (or (= temp___is_init_621 true) (<= 0 100)) (in_range3 temp___expr_625)))
(declare-const result__ Int)
(declare-const index Int)
(declare-const result Int)
(declare-const result__1 Int)
(declare-const result1 Int)
(declare-const index1 Int)
(declare-const result__2 Int)
(declare-const index2 Int)
(assert (dynamic_invariant2 source true false true true))
(assert (in_range4 pattern))
(assert (= result result__))
(assert (= result__1 0))
(assert (in_range2 result__1))
(assert (= result1 index))
(assert (= index1 (to_rep1 (first (rt source)))))
(assert (<= (to_rep1 (first (rt source))) index1))
(assert (<= index1 (to_rep1 (last (rt source)))))
(assert (and (=> (<= 0 2147483647) (in_range2 result__2)) (and (<= (to_rep1 (first (rt source))) index2) (<= index2 (to_rep1 (last (rt source)))))))
(assert (= (to_rep (select (elts source) index2)) pattern))
(assert (not (in_range1 (+ result__2 1))))
(check-sat)
(exit)
