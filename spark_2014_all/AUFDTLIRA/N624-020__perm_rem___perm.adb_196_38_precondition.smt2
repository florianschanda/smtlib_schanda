(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort true_bool 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (true_bool true_bool) Bool)
(declare-const dummy2 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 1)) (in_range3 temp___expr_136)))
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant1 ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 100)) (in_range4 temp___expr_142)))
(declare-fun to_rep1 (index) Int)
(declare-fun of_rep1 (Int) index)
(assert (forall ((x index)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x index)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(define-fun dynamic_invariant2 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property 1 100 (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant2 a true true true) (dynamic_invariant1 i true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant2 result true false true)))) :pattern ((remove a i))))))
(declare-fun remove_swap (us_t Int Int) Int)
(declare-fun remove_swap__function_guard (Int us_t Int Int) Bool)
(assert (forall ((a us_t)) (forall ((i1 Int) (i2 Int)) (! (=> (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant1 i1 true true true)) (dynamic_invariant1 i2 true true true)) (and (= (invariant__ a) true) (and (and (<= (first1 a) i1) (<= i1 (last1 a))) (and (and (<= (first1 a) i2) (<= i2 (last1 a))) (< i1 i2))))) (let ((result (remove_swap a i1 i2))) (and (=> (= (of_int result) true) (= (let ((temp___160 (remove (remove a i2) i1))) (let ((temp___159 (remove (remove a i1) (- i2 1)))) (bool_eq (to_array temp___159) (first1 temp___159) (last1 temp___159) (to_array temp___160) (first1 temp___160) (last1 temp___160)))) true)) (dynamic_invariant result true false true)))) :pattern ((remove_swap a i1 i2))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-fun get_witness (us_t us_t Int) Int)
(declare-fun get_witness__function_guard (Int us_t us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (forall ((ia Int)) (! (=> (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (dynamic_invariant1 ia true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) (let ((result (get_witness a b ia))) (and (and (and (<= (first1 b) result) (<= result (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) result))) (= (is_perm (remove a ia) (remove b result)) true))) (dynamic_invariant1 result true false true)))) :pattern ((get_witness a b ia))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__perm__witnesses__ia index) (rec__perm__witnesses__ib index)))))
(define-fun us_split_fields_Ia__projection ((a us_split_fields)) index (rec__perm__witnesses__ia a))
(define-fun us_split_fields_Ib__projection ((a us_split_fields)) index (rec__perm__witnesses__ib a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 a))) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 b)))) (= (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 a))) (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const perm__witnesses__ia__first__bit Int)
(declare-const perm__witnesses__ia__last__bit Int)
(declare-const perm__witnesses__ia__position Int)
(assert (<= 0 perm__witnesses__ia__first__bit))
(assert (< perm__witnesses__ia__first__bit perm__witnesses__ia__last__bit))
(assert (<= 0 perm__witnesses__ia__position))
(declare-const perm__witnesses__ib__first__bit Int)
(declare-const perm__witnesses__ib__last__bit Int)
(declare-const perm__witnesses__ib__position Int)
(assert (<= 0 perm__witnesses__ib__first__bit))
(assert (< perm__witnesses__ib__first__bit perm__witnesses__ib__last__bit))
(assert (<= 0 perm__witnesses__ib__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((witnesses__ref (mk_witnesses__ref (witnesses__content us_rep)))))
(define-fun witnesses__ref___projection ((a witnesses__ref)) us_rep (witnesses__content a))
(declare-fun get_witnesses (us_t us_t) us_rep)
(declare-fun get_witnesses__function_guard (us_rep us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (is_perm a b) true) (< 0 (length a)))))) (let ((result (get_witnesses a b))) (and (and (<= (first1 a) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result)))) (<= (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result))) (last1 a))) (and (and (<= (first1 b) (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result)))) (<= (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result))) (last1 b))) (and (= (to_rep (select (to_array a) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result))))) (to_rep (select (to_array b) (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result)))))) (= (is_perm (remove a (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result)))) (remove b (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result))))) true)))))) :pattern ((get_witnesses a b)))))
(declare-fun shift_perm_l (us_t us_t us_t) Int)
(declare-fun shift_perm_l__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (dynamic_invariant2 c true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (invariant__ c) true) (and (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array c) (first1 c) (last1 c)) true) (= (is_perm a b) true)))))) (let ((result (shift_perm_l a b c))) (and (=> (= (of_int result) true) (= (is_perm c b) true)) (dynamic_invariant result true false true)))) :pattern ((shift_perm_l a b c)))))
(declare-fun shift_perm_r (us_t us_t us_t) Int)
(declare-fun shift_perm_r__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (dynamic_invariant2 c true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (invariant__ c) true) (and (= (bool_eq (to_array c) (first1 c) (last1 c) (to_array b) (first1 b) (last1 b)) true) (= (is_perm a b) true)))))) (let ((result (shift_perm_r a b c))) (and (=> (= (of_int result) true) (= (is_perm a c) true)) (dynamic_invariant result true false true)))) :pattern ((shift_perm_r a b c)))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun extended_perm (us_t us_t) Int)
(declare-fun extended_perm__function_guard (Int us_t us_t) Bool)
(declare-const w us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const aa us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const bb us_t)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t125b__ref (mk_t125b__ref (t125b__content integer)))))
(define-fun t125b__ref___projection ((a1 t125b__ref)) integer (t125b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(assert (= w (get_witnesses a b)))
(assert (= aa (remove a (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))))))
(assert (= bb (remove b (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))))))
(declare-const ih Int)
(declare-const ia Int)
(declare-const ib Int)
(declare-const perm__extended_perm__result Int)
(declare-const perm__extended_perm__B_6__w__assume index)
(declare-const perm__extended_perm__B_6__w__assume1 index)
(declare-const perm__extended_perm__B_6__aa__assume (Array Int natural))
(declare-const perm__extended_perm__B_6__aa__assume1 t)
(declare-const perm__extended_perm__B_6__bb__assume (Array Int natural))
(declare-const perm__extended_perm__B_6__bb__assume1 t)
(declare-const o Int)
(declare-const temp___595 Int)
(declare-const temp___594 Int)
(declare-const temp___593 Int)
(declare-const ia1 Int)
(declare-const ib1 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 us_t)
(declare-const o4 Int)
(declare-const o5 natural)
(declare-const o6 Int)
(declare-const o7 natural)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const ih1 Int)
(declare-const ia2 Int)
(declare-const ib2 Int)
(declare-const perm__extended_perm__result1 Int)
(declare-const result int__ref)
(declare-const perm__extended_perm__result2 Int)
(declare-const result1 int__ref)
(declare-const ih2 Int)
(declare-const result2 int__ref)
(declare-const ia3 Int)
(declare-const ih3 Int)
(declare-const ia4 Int)
(declare-const ib3 Int)
(declare-const ih4 int__ref)
(declare-const ia5 int__ref)
(declare-const ib4 int__ref)
(declare-const ih5 Int)
(declare-const ia6 Int)
(declare-const ib5 Int)
(declare-const ih6 int__ref)
(declare-const ia7 int__ref)
(declare-const ib6 int__ref)
(declare-const ih7 Int)
(declare-const ia8 Int)
(declare-const ib7 Int)
(declare-const result3 int__ref)
(declare-const perm__extended_perm__result3 Int)
(declare-const ih8 int__ref)
(declare-const ia9 int__ref)
(declare-const ib8 int__ref)
(declare-const perm__extended_perm__result4 int__ref)
(declare-const ih9 Int)
(declare-const ia10 Int)
(declare-const ib9 Int)
(declare-const perm__extended_perm__result5 Int)
(declare-const ih10 int__ref)
(declare-const ia11 int__ref)
(declare-const ib10 int__ref)
(declare-const perm__extended_perm__result6 int__ref)
(declare-const ih11 Int)
(declare-const ia12 Int)
(declare-const ib11 Int)
(declare-const perm__extended_perm__result7 Int)
(declare-const ih12 int__ref)
(declare-const ia13 int__ref)
(declare-const ib12 int__ref)
(declare-const perm__extended_perm__result8 int__ref)
(declare-const ih13 Int)
(declare-const ia14 Int)
(declare-const ib13 Int)
(declare-const perm__extended_perm__result9 Int)
(declare-const result4 Bool)
(define-fun perm__extended_perm__B_6__bb__assume2 () us_t (mk___t perm__extended_perm__B_6__bb__assume perm__extended_perm__B_6__bb__assume1))
(define-fun perm__extended_perm__B_6__aa__assume2 () us_t (mk___t perm__extended_perm__B_6__aa__assume perm__extended_perm__B_6__aa__assume1))
(define-fun perm__extended_perm__B_6__w__assume2 () us_rep (mk___rep (mk___split_fields perm__extended_perm__B_6__w__assume perm__extended_perm__B_6__w__assume1)))
(define-fun ib14 () int__ref (mk_int__ref ib))
(define-fun ia15 () int__ref (mk_int__ref ia))
(define-fun ih14 () int__ref (mk_int__ref ih))
(assert (dynamic_invariant2 a true false true))
(assert (dynamic_invariant2 b true false true))
(assert (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (is_perm a b) true))))
(assert (or (and (and (and (= perm__extended_perm__result6 (mk_int__ref perm__extended_perm__result2)) (and (= ib10 ib14) (and (= ia11 ia15) (= ih10 ih14)))) (and (= perm__extended_perm__result7 perm__extended_perm__result2) (and (= ib11 ib2) (and (= ia12 ia2) (= ih11 ih1))))) (and (= (length a) 0) (and (= result (mk_int__ref perm__extended_perm__result)) (= perm__extended_perm__result2 1)))) (and (and (not (= (length a) 0)) (and (= perm__extended_perm__result2 perm__extended_perm__result) (= perm__extended_perm__result2 perm__extended_perm__result1))) (and (and (and (= perm__extended_perm__result6 perm__extended_perm__result4) (and (= ib10 ib8) (and (= ia11 ia9) (= ih10 ih8)))) (and (= perm__extended_perm__result7 perm__extended_perm__result5) (and (= ib11 ib9) (and (= ia12 ia10) (= ih11 ih9))))) (and (and (and (= perm__extended_perm__result4 (mk_int__ref perm__extended_perm__result3)) (and (= ib8 ib6) (and (= ia9 ia7) (= ih8 ih6)))) (and (= perm__extended_perm__result5 perm__extended_perm__result3) (and (= ib9 ib7) (and (= ia10 ia8) (= ih9 ih7))))) (and (and (and (= perm__extended_perm__B_6__w__assume2 (get_witnesses a b)) (and (and (<= (to_rep2 (first (rt a))) (to_rep1 perm__extended_perm__B_6__w__assume)) (<= (to_rep1 perm__extended_perm__B_6__w__assume) (to_rep2 (last (rt a))))) (and (and (<= (to_rep2 (first (rt b))) (to_rep1 perm__extended_perm__B_6__w__assume1)) (<= (to_rep1 perm__extended_perm__B_6__w__assume1) (to_rep2 (last (rt b))))) (and (= (to_rep (select (elts a) (to_rep1 perm__extended_perm__B_6__w__assume))) (to_rep (select (elts b) (to_rep1 perm__extended_perm__B_6__w__assume1)))) (= (is_perm (remove a (to_rep1 perm__extended_perm__B_6__w__assume)) (remove b (to_rep1 perm__extended_perm__B_6__w__assume1))) true))))) (= perm__extended_perm__B_6__w__assume2 w)) (and (and (and (= perm__extended_perm__B_6__aa__assume2 (remove a (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))))) (and (dynamic_invariant2 perm__extended_perm__B_6__aa__assume2 true false true) (and (= (invariant__ perm__extended_perm__B_6__aa__assume2) true) (and (= (to_rep2 (last perm__extended_perm__B_6__aa__assume1)) (- (to_rep2 (last (rt a))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))) 1))) (= (to_rep (select (elts a) k)) (to_rep (select perm__extended_perm__B_6__aa__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))) 1) k) (<= k (to_rep2 (last (rt a))))) (= (to_rep (select (elts a) k)) (to_rep (select perm__extended_perm__B_6__aa__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))) k) (<= k (- (to_rep2 (last (rt a))) 1))) (= (to_rep (select (elts a) (+ k 1))) (to_rep (select perm__extended_perm__B_6__aa__assume k))))))))))) (= perm__extended_perm__B_6__aa__assume2 aa)) (and (dynamic_invariant2 aa true false true) (and (and (and (= perm__extended_perm__B_6__bb__assume2 (remove b (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))))) (and (dynamic_invariant2 perm__extended_perm__B_6__bb__assume2 true false true) (and (= (invariant__ perm__extended_perm__B_6__bb__assume2) true) (and (= (to_rep2 (last perm__extended_perm__B_6__bb__assume1)) (- (to_rep2 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))) 1))) (= (to_rep (select (elts b) k)) (to_rep (select perm__extended_perm__B_6__bb__assume k))))) (and (forall ((k Int)) (=> (and (<= (+ (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))) 1) k) (<= k (to_rep2 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select perm__extended_perm__B_6__bb__assume (- k 1)))))) (forall ((k Int)) (=> (and (<= (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))) k) (<= k (- (to_rep2 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select perm__extended_perm__B_6__bb__assume k))))))))))) (= perm__extended_perm__B_6__bb__assume2 bb)) (and (dynamic_invariant2 bb true false true) (and (and (and (= o (extended_perm aa bb)) (and (in_range3 o) (=> (= (of_int o) true) (forall ((ia16 Int)) (=> (and (<= (to_rep2 (first (rt aa))) ia16) (<= ia16 (to_rep2 (last (rt aa))))) (exists ((ib15 Int)) (and (and (<= (to_rep2 (first (rt bb))) ib15) (<= ib15 (to_rep2 (last (rt bb))))) (and (= (to_rep (select (elts aa) ia16)) (to_rep (select (elts bb) ib15))) (= (is_perm (remove aa ia16) (remove bb ib15)) true))))))))) (and (= result1 ih14) (= ih2 o))) (and (in_range3 ih2) (and (= (of_int ih2) true) (and (and (and (= result2 ia15) (= ia3 (to_rep2 (first (rt a))))) (ite (and (<= (to_rep2 (first (rt a))) ia3) (<= ia3 (to_rep2 (last (rt a))))) (and (and (and (= temp___595 ib) (and (= temp___594 ia3) (and (= temp___593 ih2) (and (exists ((ib15 Int)) (and (and (<= (to_rep2 (first (rt b))) ib15) (<= ib15 (to_rep2 (last (rt b))))) (and (= (to_rep (select (elts a) ia3)) (to_rep (select (elts b) ib15))) (= (is_perm (remove a ia3) (remove b ib15)) true)))) (and (=> (<= (to_rep2 (first (rt a))) (to_rep2 (last (rt a)))) (dynamic_property1 (to_rep2 (first (rt a))) (to_rep2 (last (rt a))) ia3)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k ia4)) (exists ((ib15 Int)) (and (and (<= (to_rep2 (first (rt b))) ib15) (<= ib15 (to_rep2 (last (rt b))))) (and (= (to_rep (select (elts a) k)) (to_rep (select (elts b) ib15))) (= (is_perm (remove a k) (remove b ib15)) true)))))) (and (and (and (and (=> (<= 1 1) (in_range3 ih3)) (=> (<= (to_rep2 (first (rt a))) (to_rep2 (last (rt a)))) (dynamic_property1 (to_rep2 (first (rt a))) (to_rep2 (last (rt a))) ia4))) (=> (<= 1 100) (in_range4 ib3))) (and (<= (to_rep2 (first (rt a))) ia4) (<= ia4 (to_rep2 (last (rt a)))))) (= ia4 (to_rep2 (last (rt a))))))))))) (and (and (= ib4 (mk_int__ref ib3)) (and (= ia5 (mk_int__ref ia4)) (= ih4 (mk_int__ref ih3)))) (and (= ib5 ib3) (and (= ia6 ia4) (= ih5 ih3))))) (and (and (= ib6 ib4) (and (= ia7 ia5) (= ih6 ih4))) (and (= ib7 ib5) (and (= ia8 ia6) (= ih7 ih5))))) (and (and (= ib6 ib14) (and (= ia7 (mk_int__ref ia3)) (= ih6 (mk_int__ref ih2)))) (and (= ib7 ib2) (and (= ia8 ia3) (= ih7 ih2)))))) (and (= result3 (mk_int__ref perm__extended_perm__result2)) (= perm__extended_perm__result3 (int__content ih6)))))))))))))))))
(assert (= perm__extended_perm__result8 perm__extended_perm__result6))
(assert (= ib12 ib10))
(assert (= ia13 ia11))
(assert (= ih12 ih10))
(assert (= perm__extended_perm__result9 perm__extended_perm__result7))
(assert (= ib13 ib11))
(assert (= ia14 ia12))
(assert (= ih13 ih11))
(assert (= (of_int (int__content perm__extended_perm__result8)) true))
(assert (<= (to_rep2 (first (rt a))) ia1))
(assert (<= ia1 (to_rep2 (last (rt a)))))
(assert (<= (to_rep2 (first (rt b))) ib1))
(assert (<= ib1 (to_rep2 (last (rt b)))))
(assert (and (<= (to_rep2 (first (rt b))) ib1) (<= ib1 (to_rep2 (last (rt b))))))
(assert (= o6 ib1))
(assert (= o7 (select (elts b) o6)))
(assert (= o8 (to_rep o7)))
(assert (and (<= (to_rep2 (first (rt a))) ia1) (<= ia1 (to_rep2 (last (rt a))))))
(assert (= o4 ia1))
(assert (= o5 (select (elts a) o4)))
(assert (= o9 (to_rep o5)))
(assert (= result4 (ite (= o9 o8) true false)))
(assert (= result4 true))
(assert (and (= o2 ib1) (in_range4 ib1)))
(assert (and (= o3 (remove b o2)) (and (dynamic_invariant2 o3 true false true) (and (= (invariant__ o3) true) (and (= (to_rep2 (last (rt o3))) (- (to_rep2 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- o2 1))) (= (to_rep (select (elts b) k)) (to_rep (select (elts o3) k))))) (and (forall ((k Int)) (=> (and (<= (+ o2 1) k) (<= k (to_rep2 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select (elts o3) (- k 1)))))) (forall ((k Int)) (=> (and (<= o2 k) (<= k (- (to_rep2 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select (elts o3) k))))))))))))
(assert (and (= o1 ia1) (in_range4 ia1)))
(assert (not (= (invariant__ a) true)))
(check-sat)
(exit)
