(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort it1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_152 Int) (temp___is_init_149 Bool) (temp___skip_constant_150 Bool) (temp___do_toplevel_151 Bool)) Bool (=> (or (= temp___is_init_149 true) (<= 1 10)) (in_range1 temp___expr_152)))
(declare-sort it2 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_158 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 5 50)) (in_range2 temp___expr_158)))
(declare-sort et1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (et1 et1) Bool)
(declare-const dummy2 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant2 ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 99)) (in_range3 temp___expr_176)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (et1 Int) (Array Int et1))
(assert (forall ((v et1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy3 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int (Array Int et1)) Int Int (Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 ((Array Int et1) Int) (Array Int (Array Int et1)))
(assert (forall ((v (Array Int et1))) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq (select a temp___idx_133) 1 10 (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq (select a temp___idx_133) 1 10 (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun temp___4613 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(assert (forall ((temp___4615 (Array Int (Array Int et1)))) (forall ((temp___4616 Int)) (forall ((temp___4617 (Array Int et1))) (let ((temp___4614 (temp___4613 temp___4615 temp___4616 temp___4617))) (forall ((temp___4618 Int)) (ite (= temp___4618 temp___4616) (= (select temp___4614 temp___4618) temp___4617) (= (select temp___4614 temp___4618) (select temp___4615 temp___4618)))))))))
(declare-fun temp___4619 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___4621 (Array Int et1))) (forall ((temp___4622 Int) (temp___4623 Int)) (let ((temp___4620 (temp___4619 temp___4621 temp___4622 temp___4623))) (forall ((temp___4624 Int)) (ite (= temp___4624 temp___4622) (= (select temp___4620 temp___4624) (of_rep temp___4623)) (= (select temp___4620 temp___4624) (select temp___4621 temp___4624))))))))
(declare-const a (Array Int (Array Int et1)))
(declare-const j_next Int)
(declare-const f Int)
(declare-const t (Array Int (Array Int et1)))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 (Array Int (Array Int et1)))
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 et1)
(declare-const o6 (Array Int et1))
(declare-const o7 (Array Int (Array Int et1)))
(declare-const result (Array Int (Array Int et1)))
(declare-const t1 (Array Int (Array Int et1)))
(declare-const result1 (Array Int (Array Int et1)))
(declare-const a1 (Array Int (Array Int et1)))
(declare-const result2 Int)
(declare-const j_next1 Int)
(declare-const result3 Int)
(declare-const j_next2 Int)
(declare-const result4 Int)
(declare-const f1 Int)
(declare-const result5 Int)
(declare-const f2 Int)
(declare-const result6 (Array Int (Array Int et1)))
(declare-const a2 (Array Int (Array Int et1)))
(declare-const a3 (Array Int (Array Int et1)))
(declare-const j_next3 Int)
(declare-const f3 Int)
(declare-const t2 (Array Int (Array Int et1)))
(declare-const a4 (Array Int (Array Int et1)))
(declare-const j_next4 Int)
(declare-const f4 Int)
(declare-const t3 (Array Int (Array Int et1)))
(assert (in_range1 i))
(assert (in_range2 j))
(assert (in_range3 e))
(assert (and (and (=> (<= 5 50) (in_range2 j_next)) (and (=> (<= 0 99) (in_range3 f)) (and (= (bool_eq1 a1 5 50 (temp___4613 t1 j (temp___4619 (select t1 j) i e)) 5 50) true) (and (ite (= j 50) (and (= (mk_int__ref result2) (mk_int__ref j_next)) (= j_next1 5)) (and (and (and (= o3 (+ j 1)) (in_range2 (+ j 1))) (and (= (mk_int__ref result3) (mk_int__ref j_next)) (= j_next2 o3))) (= j_next1 j_next2))) (and (ite (= e 0) (and (= result4 f) (= f1 99)) (and (and (and (= o4 (- e 1)) (in_range3 (- e 1))) (and (= result5 f) (= f2 o4))) (= f1 f2))) (and (and (and (= (to_rep o5) f1) (= o6 (store (select a1 j_next1) i o5))) (= o7 (store a1 j_next1 o6))) (and (= result6 a1) (= a2 o7)))))))) (and (and (= t1 t2) (and (= f1 f3) (and (= j_next1 j_next3) (= a2 a3)))) (and (= t3 t1) (and (= f4 f1) (and (= j_next4 j_next1) (= a4 a2)))))))
(declare-const n Int)
(assert (<= 1 n))
(assert (<= n 10))
(declare-const m Int)
(assert (<= 5 m))
(assert (<= m 50))
(assert (not (in_range3 (to_rep (select (select a3 m) n)))))
(check-sat)
(exit)
