(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort group1_id 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (group1_id group1_id) Bool)
(declare-const dummy group1_id)
(declare-datatypes () ((group1_id__ref (mk_group1_id__ref (group1_id__content group1_id)))))
(define-fun group1_id__ref___projection ((a group1_id__ref)) group1_id (group1_id__content a))
(define-fun dynamic_invariant ((temp___expr_143 Int) (temp___is_init_140 Bool) (temp___skip_constant_141 Bool) (temp___do_toplevel_142 Bool)) Bool (=> (or (= temp___is_init_140 true) (<= 1 64)) (in_range1 temp___expr_143)))
(declare-fun to_rep (group1_id) Int)
(declare-fun of_rep (Int) group1_id)
(assert (forall ((x group1_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x group1_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort group2_id 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (group2_id group2_id) Bool)
(declare-const dummy1 group2_id)
(declare-datatypes () ((group2_id__ref (mk_group2_id__ref (group2_id__content group2_id)))))
(define-fun group2_id__ref___projection ((a group2_id__ref)) group2_id (group2_id__content a))
(define-fun dynamic_invariant1 ((temp___expr_149 Int) (temp___is_init_146 Bool) (temp___skip_constant_147 Bool) (temp___do_toplevel_148 Bool)) Bool (=> (or (= temp___is_init_146 true) (<= 1 64)) (in_range2 temp___expr_149)))
(declare-fun to_rep1 (group2_id) Int)
(declare-fun of_rep1 (Int) group2_id)
(assert (forall ((x group2_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x group2_id)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort ranking 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (ranking ranking) Bool)
(declare-const dummy2 ranking)
(declare-datatypes () ((ranking__ref (mk_ranking__ref (ranking__content ranking)))))
(define-fun ranking__ref___projection ((a ranking__ref)) ranking (ranking__content a))
(define-fun dynamic_invariant2 ((temp___expr_155 Int) (temp___is_init_152 Bool) (temp___skip_constant_153 Bool) (temp___do_toplevel_154 Bool)) Bool (=> (or (= temp___is_init_152 true) (<= 1 64)) (in_range3 temp___expr_155)))
(declare-fun to_rep2 (ranking) Int)
(declare-fun of_rep2 (Int) ranking)
(assert (forall ((x ranking)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x ranking)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int group1_id))))))
(declare-fun slide ((Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int group1_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int group1_id) Int Int (Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (group1_id Int) (Array Int group1_id))
(assert (forall ((v group1_id)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int group1_id)) (a__first Int) (a__last Int) (b (Array Int group1_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int group1_id) Int Int (Array Int group1_id) Int Int) Int)
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int group2_id))))))
(declare-fun slide1 ((Array Int group2_id) Int Int) (Array Int group2_id))
(assert (forall ((a (Array Int group2_id))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int group2_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int group2_id) Int Int (Array Int group2_id) Int Int) (Array Int group2_id))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (group2_id Int) (Array Int group2_id))
(assert (forall ((v group2_id)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int group2_id)) (a__first Int) (a__last Int) (b (Array Int group2_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare1 ((Array Int group2_id) Int Int (Array Int group2_id) Int Int) Int)
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-const dummy3 (Array Int group2_id))
(declare-const value__size Int)
(declare-fun object__size ((Array Int group2_id)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int group2_id)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int group2_id)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int group2_id) (Array Int group2_id)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int group2_id)))))))
(declare-fun slide2 ((Array Int (Array Int group2_id)) Int Int) (Array Int (Array Int group2_id)))
(assert (forall ((a (Array Int (Array Int group2_id)))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int group2_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int (Array Int group2_id)) Int Int (Array Int (Array Int group2_id)) Int Int) (Array Int (Array Int group2_id)))
(assert (forall ((a (Array Int (Array Int group2_id))) (b (Array Int (Array Int group2_id)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 ((Array Int group2_id) Int) (Array Int (Array Int group2_id)))
(assert (forall ((v (Array Int group2_id))) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq2 ((a (Array Int (Array Int group2_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group2_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq1 (select a temp___idx_134) 1 64 (select b (+ (- b__first a__first) temp___idx_134)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group2_id))) (b (Array Int (Array Int group2_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq1 (select a temp___idx_134) 1 64 (select b (+ (- b__first a__first) temp___idx_134)) 1 64) true))))))))
(declare-const dummy4 (Array Int group1_id))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int group1_id)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int group1_id)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int group1_id)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int group1_id)))))))
(declare-fun slide3 ((Array Int (Array Int group1_id)) Int Int) (Array Int (Array Int group1_id)))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(declare-fun concat4 ((Array Int (Array Int group1_id)) Int Int (Array Int (Array Int group1_id)) Int Int) (Array Int (Array Int group1_id)))
(assert (forall ((a (Array Int (Array Int group1_id))) (b (Array Int (Array Int group1_id)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat4 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton4 ((Array Int group1_id) Int) (Array Int (Array Int group1_id)))
(assert (forall ((v (Array Int group1_id))) (forall ((i Int)) (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i))))))
(define-fun bool_eq3 ((a (Array Int (Array Int group1_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group1_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_135 Int)) (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last)) (= (bool_eq (select a temp___idx_135) 1 64 (select b (+ (- b__first a__first) temp___idx_135)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group1_id))) (b (Array Int (Array Int group1_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_135 Int)) (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last)) (= (bool_eq (select a temp___idx_135) 1 64 (select b (+ (- b__first a__first) temp___idx_135)) 1 64) true))))))))
(declare-fun is_permutation_1 ((Array Int group1_id)) Bool)
(declare-fun is_permutation_1__function_guard (Bool (Array Int group1_id)) Bool)
(assert (forall ((r1 (Array Int group1_id))) (! (= (= (is_permutation_1 r1) true) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (exists ((rank Int)) (and (and (<= 1 rank) (<= rank 64)) (= (to_rep (select r1 rank)) g1)))))) :pattern ((is_permutation_1 r1)))))
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int ranking))))))
(declare-fun slide4 ((Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int ranking))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(declare-fun concat5 ((Array Int ranking) Int Int (Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat5 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton5 (ranking Int) (Array Int ranking))
(assert (forall ((v ranking)) (forall ((i Int)) (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i))))))
(define-fun bool_eq4 ((a (Array Int ranking)) (a__first Int) (a__last Int) (b (Array Int ranking)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_136 Int)) (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last)) (= (to_rep2 (select a temp___idx_136)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_136))))))) true false))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_136 Int)) (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last)) (= (to_rep2 (select a temp___idx_136)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_136)))))))))))
(declare-fun compare2 ((Array Int ranking) Int Int (Array Int ranking) Int Int) Int)
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare2 a a_first a_last b b_first b_last) 0) (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare2 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq4 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare2 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq4 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(declare-fun is_preferred_1 (Int Int (Array Int group1_id)) Bool)
(declare-fun is_preferred_1__function_guard (Bool Int Int (Array Int group1_id)) Bool)
(declare-fun invert_1 ((Array Int group1_id)) (Array Int ranking))
(declare-fun invert_1__function_guard ((Array Int ranking) (Array Int group1_id)) Bool)
(assert (forall ((g1_a Int) (g1_b Int)) (forall ((r1 (Array Int group1_id))) (! (=> (and (and (dynamic_invariant g1_a true true true) (dynamic_invariant g1_b true true true)) (= (is_permutation_1 r1) true)) (= (= (is_preferred_1 g1_a g1_b r1) true) (<= (to_rep2 (let ((temp___258 (invert_1 r1))) (select temp___258 g1_a))) (to_rep2 (let ((temp___259 (invert_1 r1))) (select temp___259 g1_b)))))) :pattern ((is_preferred_1 g1_a g1_b r1))))))
(declare-const ranking_1 (Array Int (Array Int group2_id)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const ranking_2 (Array Int (Array Int group1_id)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((map__ref5 (mk_map__ref5 (map__content5 (Array Int Bool))))))
(declare-fun slide5 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide5 a first first) a) :pattern ((slide5 a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide5 a old_first new_first) i))))))))
(declare-fun concat6 ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat6 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat6 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat6 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton6 (Bool Int) (Array Int Bool))
(assert (forall ((v Bool)) (forall ((i Int)) (! (= (select (singleton6 v i) i) v) :pattern ((select (singleton6 v i) i))))))
(define-fun bool_eq5 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_137 Int)) (=> (and (<= a__first temp___idx_137) (<= temp___idx_137 a__last)) (= (select a temp___idx_137) (select b (+ (- b__first a__first) temp___idx_137)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_137 Int)) (=> (and (<= a__first temp___idx_137) (<= temp___idx_137 a__last)) (= (select a temp___idx_137) (select b (+ (- b__first a__first) temp___idx_137))))))))))
(declare-fun compare3 ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare3 a a_first a_last b b_first b_last) 0) (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare3 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq5 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare3 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq5 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-const dummy5 (Array Int ranking))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int ranking)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int ranking)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int ranking)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 ((Array Int ranking) (Array Int ranking)) Bool)
(declare-datatypes () ((map__ref6 (mk_map__ref6 (map__content6 (Array Int (Array Int ranking)))))))
(declare-fun slide6 ((Array Int (Array Int ranking)) Int Int) (Array Int (Array Int ranking)))
(assert (forall ((a (Array Int (Array Int ranking)))) (forall ((first Int)) (! (= (slide6 a first first) a) :pattern ((slide6 a first first))))))
(assert (forall ((a (Array Int (Array Int ranking)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide6 a old_first new_first) i))))))))
(declare-fun concat7 ((Array Int (Array Int ranking)) Int Int (Array Int (Array Int ranking)) Int Int) (Array Int (Array Int ranking)))
(assert (forall ((a (Array Int (Array Int ranking))) (b (Array Int (Array Int ranking)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat7 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat7 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat7 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton7 ((Array Int ranking) Int) (Array Int (Array Int ranking)))
(assert (forall ((v (Array Int ranking))) (forall ((i Int)) (! (= (select (singleton7 v i) i) v) :pattern ((select (singleton7 v i) i))))))
(define-fun bool_eq6 ((a (Array Int (Array Int ranking))) (a__first Int) (a__last Int) (b (Array Int (Array Int ranking))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_138 Int)) (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last)) (= (bool_eq4 (select a temp___idx_138) 1 64 (select b (+ (- b__first a__first) temp___idx_138)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int ranking))) (b (Array Int (Array Int ranking)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_138 Int)) (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last)) (= (bool_eq4 (select a temp___idx_138) 1 64 (select b (+ (- b__first a__first) temp___idx_138)) 1 64) true))))))))
(declare-sort count 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (count count) Bool)
(declare-const dummy6 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___projection ((a count__ref)) count (count__content a))
(define-fun dynamic_invariant3 ((temp___expr_306 Int) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool)) Bool (=> (or (= temp___is_init_303 true) (<= 0 64)) (in_range4 temp___expr_306)))
(declare-fun to_rep3 (count) Int)
(declare-fun of_rep3 (Int) count)
(assert (forall ((x count)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x count)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort index 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (index index) Bool)
(declare-const dummy7 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref7 (mk_map__ref7 (map__content7 (Array Int count))))))
(declare-fun slide7 ((Array Int count) Int Int) (Array Int count))
(assert (forall ((a (Array Int count))) (forall ((first Int)) (! (= (slide7 a first first) a) :pattern ((slide7 a first first))))))
(assert (forall ((a (Array Int count))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide7 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide7 a old_first new_first) i))))))))
(declare-fun concat8 ((Array Int count) Int Int (Array Int count) Int Int) (Array Int count))
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat8 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat8 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat8 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton8 (count Int) (Array Int count))
(assert (forall ((v count)) (forall ((i Int)) (! (= (select (singleton8 v i) i) v) :pattern ((select (singleton8 v i) i))))))
(define-fun bool_eq7 ((a (Array Int count)) (a__first Int) (a__last Int) (b (Array Int count)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_139 Int)) (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last)) (= (to_rep3 (select a temp___idx_139)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_139))))))) true false))
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_139 Int)) (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last)) (= (to_rep3 (select a temp___idx_139)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_139)))))))))))
(declare-fun compare4 ((Array Int count) Int Int (Array Int count) Int Int) Int)
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare4 a a_first a_last b b_first b_last) 0) (= (bool_eq7 a a_first a_last b b_first b_last) true)) :pattern ((compare4 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare4 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq7 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern ((compare4 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare4 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq7 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern ((compare4 a a_first a_last b b_first b_last))))))
(declare-const dummy8 (Array Int group1_id))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int group1_id)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int group1_id)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int group1_id)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stable_marriage__matching__group1_set__elements (Array Int group1_id)) (rec__stable_marriage__matching__group1_set__cardinality count)))))
(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int group1_id) (rec__stable_marriage__matching__group1_set__elements a))
(define-fun us_split_fields_Cardinality__projection ((a us_split_fields)) count (rec__stable_marriage__matching__group1_set__cardinality a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq8 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 a)) 1 64 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 b)) 1 64) true) (= (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 a))) (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 b))))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const stable_marriage__matching__group1_set__elements__first__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__last__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__elements__first__bit))
(assert (< stable_marriage__matching__group1_set__elements__first__bit stable_marriage__matching__group1_set__elements__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__elements__position))
(declare-const stable_marriage__matching__group1_set__cardinality__first__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__last__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__first__bit))
(assert (< stable_marriage__matching__group1_set__cardinality__first__bit stable_marriage__matching__group1_set__cardinality__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__position))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((group1_set__ref (mk_group1_set__ref (group1_set__content us_rep)))))
(define-fun group1_set__ref___projection ((a group1_set__ref)) us_rep (group1_set__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun invert ((Array Int (Array Int group1_id))) (Array Int (Array Int ranking)))
(declare-fun invert__function_guard ((Array Int (Array Int ranking)) (Array Int (Array Int group1_id))) Bool)
(assert (forall ((r2 (Array Int (Array Int group1_id)))) (! (=> (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (is_permutation_1 (select r2 g2)) true))) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (let ((temp___356 (invert_1 (select r2 g2)))) (let ((temp___355 (select (invert r2) g2))) (bool_eq4 temp___355 1 64 temp___356 1 64))) true)))) :pattern ((invert r2)))))
(declare-fun all_unmatched_g1_set_elements_distinct (us_split_fields) Bool)
(declare-fun all_unmatched_g1_set_elements_distinct__function_guard (Bool us_split_fields) Bool)
(assert true)
(assert (forall ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields)) (! (= (= (all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields) true) (forall ((idx_1 Int)) (=> (and (<= 1 idx_1) (<= idx_1 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (forall ((idx_2 Int)) (=> (and (<= 1 idx_2) (<= idx_2 (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (=> (not (= idx_1 idx_2)) (not (= (to_rep (let ((temp___361 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___361 idx_1))) (to_rep (let ((temp___362 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___362 idx_2))))))))))) :pattern ((all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields)))))
(declare-fun invariant_holds (us_split_fields (Array Int count) (Array Int group1_id) (Array Int Bool)) Bool)
(declare-fun invariant_holds__function_guard (Bool us_split_fields (Array Int count) (Array Int group1_id) (Array Int Bool)) Bool)
(assert true)
(assert (forall ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields)) (forall ((stable_marriage__matching__proposals_made (Array Int count))) (forall ((stable_marriage__matching__result (Array Int group1_id))) (forall ((stable_marriage__matching__unmatched_g2_set (Array Int Bool))) (! (= (= (invariant_holds stable_marriage__matching__unmatched_g1_set__fields stable_marriage__matching__proposals_made stable_marriage__matching__result stable_marriage__matching__unmatched_g2_set) true) (and (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (is_permutation_1 (select ranking_2 g2)) true))) (and (and (and (and (and (= (all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields) true) (forall ((g2_id Int)) (=> (and (<= 1 g2_id) (<= g2_id 64)) (=> (not (= (select stable_marriage__matching__unmatched_g2_set g2_id) true)) (forall ((idx Int)) (=> (and (<= 1 idx) (<= idx (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (not (= (to_rep (let ((temp___379 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___379 idx))) (to_rep (select stable_marriage__matching__result g2_id)))))))))) (forall ((g21_id Int)) (=> (and (<= 1 g21_id) (<= g21_id 64)) (forall ((g22_id Int)) (=> (and (<= 1 g22_id) (<= g22_id 64)) (=> (and (and (not (= (select stable_marriage__matching__unmatched_g2_set g21_id) true)) (not (= (select stable_marriage__matching__unmatched_g2_set g22_id) true))) (not (= g21_id g22_id))) (not (= (to_rep (select stable_marriage__matching__result g21_id)) (to_rep (select stable_marriage__matching__result g22_id)))))))))) (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank (to_rep3 (select stable_marriage__matching__proposals_made g1_id)))) (and (not (= (select stable_marriage__matching__unmatched_g2_set (to_rep1 (let ((temp___380 (select ranking_1 g1_id))) (select temp___380 rank)))) true)) (=> (not (= (to_rep (select stable_marriage__matching__result (to_rep1 (let ((temp___383 (select ranking_1 g1_id))) (select temp___383 rank))))) g1_id)) (not (= (is_preferred_1 g1_id (to_rep (select stable_marriage__matching__result (to_rep1 (let ((temp___381 (select ranking_1 g1_id))) (select temp___381 rank))))) (select ranking_2 (to_rep1 (let ((temp___382 (select ranking_1 g1_id))) (select temp___382 rank))))) true))))))))) (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (=> (= (to_rep3 (select stable_marriage__matching__proposals_made g1_id)) 0) (exists ((idx Int)) (and (and (<= 1 idx) (<= idx (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (= (to_rep (let ((temp___384 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___384 idx))) g1_id))))))) (forall ((g1_id Int)) (=> (and (<= 1 g1_id) (<= g1_id 64)) (=> (forall ((idx Int)) (=> (and (<= 1 idx) (<= idx (to_rep3 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (not (= (to_rep (let ((temp___386 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___386 idx))) g1_id)))) (and (< 0 (to_rep3 (select stable_marriage__matching__proposals_made g1_id))) (= (to_rep (select stable_marriage__matching__result (to_rep1 (let ((temp___385 (select ranking_1 g1_id))) (select temp___385 (to_rep3 (select stable_marriage__matching__proposals_made g1_id))))))) g1_id)))))))) :pattern ((invariant_holds stable_marriage__matching__unmatched_g1_set__fields stable_marriage__matching__proposals_made stable_marriage__matching__result stable_marriage__matching__unmatched_g2_set))))))))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const c132b Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const c134b Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(define-fun dynamic_invariant4 ((temp___expr_312 Int) (temp___is_init_309 Bool) (temp___skip_constant_310 Bool) (temp___do_toplevel_311 Bool)) Bool (=> (or (= temp___is_init_309 true) (<= 1 64)) (in_range5 temp___expr_312)))
(assert (forall ((r1 (Array Int group1_id))) (! (=> (= (is_permutation_1 r1) true) (let ((result (invert_1 r1))) (and (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank 64)) (= (to_rep2 (select result (to_rep (select r1 rank)))) rank))) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (= (to_rep (select r1 (to_rep2 (select result g1)))) g1)))))) :pattern ((invert_1 r1)))))
(declare-const ranking_2_inverted (Array Int (Array Int ranking)))
(declare-const proposals_made (Array Int count))
(declare-const unmatched_g1_set__split_fields (Array Int group1_id))
(declare-const unmatched_g1_set__split_fields1 count)
(declare-const unmatched_g2_set (Array Int Bool))
(declare-const result__ (Array Int group1_id))
(declare-const g1 Int)
(declare-const g2 Int)
(declare-const rank Int)
(declare-const already_asked Int)
(declare-const o Int)
(declare-const o1 group1_id)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 count)
(declare-const o5 (Array Int group1_id))
(declare-const o6 count)
(declare-const temp___586 (Array Int group1_id))
(declare-const temp___5861 count)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const result int__ref)
(declare-const rank1 Int)
(declare-const result1 int__ref)
(declare-const g11 Int)
(declare-const result2 us_split_fields__ref)
(declare-const unmatched_g1_set__split_fields2 us_split_fields)
(declare-const result3 int__ref)
(declare-const already_asked1 Int)
(assert (and (forall ((g21 Int)) (=> (and (<= 1 g21) (<= g21 64)) (= (is_permutation_1 (select ranking_2 g21)) true))) (and (= (bool_eq6 (invert ranking_2) 1 64 ranking_2_inverted 1 64) true) (and (= (invariant_holds (mk___split_fields unmatched_g1_set__split_fields unmatched_g1_set__split_fields1) proposals_made result__ unmatched_g2_set) true) (< 0 (to_rep3 unmatched_g1_set__split_fields1))))))
(assert (=> (<= 1 64) (in_range1 g1)))
(assert (=> (<= 1 64) (in_range2 g2)))
(assert (= result (mk_int__ref rank)))
(assert (= rank1 1))
(assert (in_range3 rank1))
(assert (=> (<= 0 64) (in_range4 already_asked)))
(assert (and (<= 1 (to_rep3 unmatched_g1_set__split_fields1)) (<= (to_rep3 unmatched_g1_set__split_fields1) 64)))
(assert (= o (to_rep3 unmatched_g1_set__split_fields1)))
(assert (= o1 (select unmatched_g1_set__split_fields o)))
(assert (= o2 (to_rep o1)))
(assert (= result1 (mk_int__ref g1)))
(assert (= g11 o2))
(assert (and (= o3 (- (to_rep3 unmatched_g1_set__split_fields1) 1)) (in_range4 (- (to_rep3 unmatched_g1_set__split_fields1) 1))))
(assert (= (to_rep3 o4) o3))
(assert (= unmatched_g1_set__split_fields o5))
(assert (= o4 o6))
(assert (= temp___586 o5))
(assert (= temp___5861 o6))
(assert (= result2 (mk___split_fields__ref (mk___split_fields unmatched_g1_set__split_fields unmatched_g1_set__split_fields1))))
(assert (= unmatched_g1_set__split_fields2 (mk___split_fields temp___586 temp___5861)))
(assert (< (to_rep3 (select proposals_made g11)) 64))
(assert (= result3 (mk_int__ref already_asked)))
(assert (= already_asked1 (to_rep3 (select proposals_made g11))))
(assert (not (= already_asked1 0)))
(assert (and (= o7 already_asked1) (in_range3 already_asked1)))
(assert (= o8 (+ o7 1)))
(assert (not (in_range3 o8)))
(check-sat)
(exit)
