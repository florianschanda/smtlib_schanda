(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort scalar_with_default 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (scalar_with_default scalar_with_default) Bool)
(declare-const dummy3 scalar_with_default)
(declare-datatypes () ((scalar_with_default__ref (mk_scalar_with_default__ref (scalar_with_default__content scalar_with_default)))))
(define-fun scalar_with_default__ref___4__projection ((a scalar_with_default__ref)) scalar_with_default (scalar_with_default__content a))
(declare-fun to_rep2 (scalar_with_default) Int)
(declare-fun of_rep2 (Int) scalar_with_default)
(assert (forall ((x scalar_with_default)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x scalar_with_default)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort tscalar_with_defaultB 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (tscalar_with_defaultB tscalar_with_defaultB) Bool)
(declare-const dummy4 tscalar_with_defaultB)
(declare-datatypes () ((tscalar_with_defaultB__ref (mk_tscalar_with_defaultB__ref (tscalar_with_defaultB__content tscalar_with_defaultB)))))
(define-fun tscalar_with_defaultB__ref___4__projection ((a tscalar_with_defaultB__ref)) tscalar_with_defaultB (tscalar_with_defaultB__content a))
(declare-fun to_rep3 (tscalar_with_defaultB) Int)
(declare-fun of_rep3 (Int) tscalar_with_defaultB)
(assert (forall ((x tscalar_with_defaultB)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x tscalar_with_defaultB)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-const first Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (tscalar_with_defaultB tscalar_with_defaultB) Bool)
(declare-const dummy5 tscalar_with_defaultB)
(declare-datatypes () ((scalar_bad_default__ref (mk_scalar_bad_default__ref (scalar_bad_default__content tscalar_with_defaultB)))))
(define-fun scalar_bad_default__ref___4__projection ((a scalar_bad_default__ref)) tscalar_with_defaultB (scalar_bad_default__content a))
(declare-const first1 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((scalar_no_default__ref (mk_scalar_no_default__ref (scalar_no_default__content integer)))))
(define-fun scalar_no_default__ref___3__projection ((a scalar_no_default__ref)) integer (scalar_no_default__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int scalar_with_default))))))
(declare-fun slide ((Array Int scalar_with_default) Int Int) (Array Int scalar_with_default))
(assert (forall ((a (Array Int scalar_with_default))) (forall ((first2 Int)) (! (= (slide a first2 first2) a) :pattern ((slide a first2 first2))))))
(assert (forall ((a (Array Int scalar_with_default))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int scalar_with_default) Int Int (Array Int scalar_with_default) Int Int) (Array Int scalar_with_default))
(assert (forall ((a (Array Int scalar_with_default)) (b (Array Int scalar_with_default))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (scalar_with_default Int) (Array Int scalar_with_default))
(assert (forall ((v scalar_with_default)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int scalar_with_default)) (a__first Int) (a__last Int) (b (Array Int scalar_with_default)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep2 (select a temp___idx_134)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_134))))))) true false))
(assert (forall ((a (Array Int scalar_with_default)) (b (Array Int scalar_with_default))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (to_rep2 (select a temp___idx_134)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_134)))))))))))
(declare-fun compare ((Array Int scalar_with_default) Int Int (Array Int scalar_with_default) Int Int) Int)
(assert (forall ((a (Array Int scalar_with_default)) (b (Array Int scalar_with_default))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int scalar_with_default)) (b (Array Int scalar_with_default))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int scalar_with_default)) (b (Array Int scalar_with_default))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_135 Int)) (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last)) (= (to_rep (select a temp___idx_135)) (to_rep (select b (+ (- b__first a__first) temp___idx_135))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_135 Int)) (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last)) (= (to_rep (select a temp___idx_135)) (to_rep (select b (+ (- b__first a__first) temp___idx_135)))))))))))
(declare-fun compare1 ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int tscalar_with_defaultB))))))
(declare-fun slide2 ((Array Int tscalar_with_defaultB) Int Int) (Array Int tscalar_with_defaultB))
(assert (forall ((a (Array Int tscalar_with_defaultB))) (forall ((first2 Int)) (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2))))))
(assert (forall ((a (Array Int tscalar_with_defaultB))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int tscalar_with_defaultB) Int Int (Array Int tscalar_with_defaultB) Int Int) (Array Int tscalar_with_defaultB))
(assert (forall ((a (Array Int tscalar_with_defaultB)) (b (Array Int tscalar_with_defaultB))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 (tscalar_with_defaultB Int) (Array Int tscalar_with_defaultB))
(assert (forall ((v tscalar_with_defaultB)) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq2 ((a (Array Int tscalar_with_defaultB)) (a__first Int) (a__last Int) (b (Array Int tscalar_with_defaultB)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_136 Int)) (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last)) (= (to_rep3 (select a temp___idx_136)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_136))))))) true false))
(assert (forall ((a (Array Int tscalar_with_defaultB)) (b (Array Int tscalar_with_defaultB))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_136 Int)) (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last)) (= (to_rep3 (select a temp___idx_136)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_136)))))))))))
(declare-fun compare2 ((Array Int tscalar_with_defaultB) Int Int (Array Int tscalar_with_defaultB) Int Int) Int)
(assert (forall ((a (Array Int tscalar_with_defaultB)) (b (Array Int tscalar_with_defaultB))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare2 a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int tscalar_with_defaultB)) (b (Array Int tscalar_with_defaultB))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare2 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int tscalar_with_defaultB)) (b (Array Int tscalar_with_defaultB))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare2 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern ((compare2 a a_first a_last b b_first b_last))))))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int integer))))))
(declare-fun slide3 ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first2 Int)) (! (= (slide3 a first2 first2) a) :pattern ((slide3 a first2 first2))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(declare-fun concat4 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat4 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton4 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i))))))
(define-fun bool_eq3 ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_137 Int)) (=> (and (<= a__first temp___idx_137) (<= temp___idx_137 a__last)) (= (to_rep1 (select a temp___idx_137)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_137))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_137 Int)) (=> (and (<= a__first temp___idx_137) (<= temp___idx_137 a__last)) (= (to_rep1 (select a temp___idx_137)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_137)))))))))))
(declare-fun compare3 ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare3 a a_first a_last b b_first b_last) 0) (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare3 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq3 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare3 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq3 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare3 a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first2 (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range3 f) (=> (in_range3 l) (and (= (to_rep1 (first2 (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range3 low) (and (in_range3 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first3 ((a us_t)) Int (to_rep1 (first2 (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first3 a) (last1 a)) (+ (- (last1 a) (first3 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq4 ((x us_t) (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first2 (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first2 (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq7 (us_t us_t) Bool)
(declare-const dummy7 us_t)
(declare-datatypes () ((array_bad_default2__ref (mk_array_bad_default2__ref (array_bad_default2__content us_t)))))
(define-fun array_bad_default2__ref___2__projection ((a array_bad_default2__ref)) us_t (array_bad_default2__content a))
(define-fun dynamic_invariant1 ((temp___expr_268 (Array Int tscalar_with_defaultB)) (temp___is_init_265 Bool) (temp___skip_constant_266 Bool) (temp___do_toplevel_267 Bool)) Bool (forall ((temp___269 Int)) (=> (and (<= 1 temp___269) (<= temp___269 0)) (=> (or (= temp___is_init_265 true) (<= first 2147483647)) (dynamic_property first 2147483647 (to_rep3 (select temp___expr_268 temp___269)))))))
(define-fun default_initial_assumption ((temp___expr_270 (Array Int tscalar_with_defaultB)) (temp___skip_top_level_271 Bool)) Bool (forall ((temp___272 Int)) (=> (and (<= 1 temp___272) (<= temp___272 0)) (= (to_rep3 (select temp___expr_270 temp___272)) 0))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_277 (Array Int integer)) (temp___is_init_274 Bool) (temp___skip_constant_275 Bool) (temp___do_toplevel_276 Bool)) Bool (forall ((temp___278 Int)) (=> (and (<= 1 temp___278) (<= temp___278 0)) (=> (or (= temp___is_init_274 true) (<= first1 2147483647)) (dynamic_property1 first1 2147483647 (to_rep1 (select temp___expr_277 temp___278)))))))
(define-fun default_initial_assumption1 ((temp___expr_279 (Array Int integer)) (temp___skip_top_level_280 Bool)) Bool (forall ((temp___281 Int)) (=> (and (<= 1 temp___281) (<= temp___281 0)) (= (to_rep1 (select temp___expr_279 temp___281)) 0))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort t17b 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (t17b t17b) Bool)
(declare-const dummy8 t17b)
(declare-datatypes () ((t17b__ref (mk_t17b__ref (t17b__content t17b)))))
(define-fun t17b__ref___projection ((a t17b__ref)) t17b (t17b__content a))
(declare-const no_def__first integer)
(declare-const no_def__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort tTall_0SP1 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq9 (tTall_0SP1 tTall_0SP1) Bool)
(declare-const dummy9 tTall_0SP1)
(declare-datatypes () ((tTall_0SP1__ref (mk_tTall_0SP1__ref (tTall_0SP1__content tTall_0SP1)))))
(define-fun tTall_0SP1__ref___projection ((a tTall_0SP1__ref)) tTall_0SP1 (tTall_0SP1__content a))
(define-fun default_initial_assumption2 ((temp___expr_296 (Array Int scalar_with_default)) (temp___skip_top_level_297 Bool)) Bool (forall ((temp___298 Int)) (=> (and (<= 1 temp___298) (<= temp___298 100)) (= (to_rep2 (select temp___expr_296 temp___298)) 0))))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort tTall_1SP1 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq10 (tTall_1SP1 tTall_1SP1) Bool)
(declare-const dummy10 tTall_1SP1)
(declare-datatypes () ((tTall_1SP1__ref (mk_tTall_1SP1__ref (tTall_1SP1__content tTall_1SP1)))))
(define-fun tTall_1SP1__ref___projection ((a tTall_1SP1__ref)) tTall_1SP1 (tTall_1SP1__content a))
(define-fun default_initial_assumption3 ((temp___expr_305 (Array Int natural)) (temp___skip_top_level_306 Bool)) Bool (forall ((temp___307 Int)) (=> (and (<= 1 temp___307) (<= temp___307 100)) (= (to_rep (select temp___expr_305 temp___307)) 1))))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-sort tTall_2SP1 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq11 (tTall_2SP1 tTall_2SP1) Bool)
(declare-const dummy11 tTall_2SP1)
(declare-datatypes () ((tTall_2SP1__ref (mk_tTall_2SP1__ref (tTall_2SP1__content tTall_2SP1)))))
(define-fun tTall_2SP1__ref___projection ((a tTall_2SP1__ref)) tTall_2SP1 (tTall_2SP1__content a))
(define-fun dynamic_invariant3 ((temp___expr_311 (Array Int tscalar_with_defaultB)) (temp___is_init_308 Bool) (temp___skip_constant_309 Bool) (temp___do_toplevel_310 Bool)) Bool (forall ((temp___312 Int)) (=> (and (<= 1 temp___312) (<= temp___312 100)) (=> (or (= temp___is_init_308 true) (<= first 2147483647)) (dynamic_property first 2147483647 (to_rep3 (select temp___expr_311 temp___312)))))))
(define-fun default_initial_assumption4 ((temp___expr_313 (Array Int tscalar_with_defaultB)) (temp___skip_top_level_314 Bool)) Bool (forall ((temp___315 Int)) (=> (and (<= 1 temp___315) (<= temp___315 100)) (= (to_rep3 (select temp___expr_313 temp___315)) 2))))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun with_default__ok_array__no_def__aggregate_def (Int) (Array Int integer))
(assert (forall ((temp___610 Int)) (forall ((temp___611 Int)) (= (select (with_default__ok_array__no_def__aggregate_def temp___610) temp___611) (of_rep1 temp___610)))))
(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_15)))
(define-fun dynamic_invariant6 ((temp___expr_220 Int) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool)) Bool (=> (or (= temp___is_init_217 true) (<= 0 2147483647)) (in_range4 temp___expr_220)))
(define-fun dynamic_invariant7 ((temp___expr_226 Int) (temp___is_init_223 Bool) (temp___skip_constant_224 Bool) (temp___do_toplevel_225 Bool)) Bool (=> (or (= temp___is_init_223 true) (<= first 2147483647)) (dynamic_property first 2147483647 temp___expr_226)))
(assert (= first c))
(define-fun dynamic_invariant8 ((temp___expr_232 Int) (temp___is_init_229 Bool) (temp___skip_constant_230 Bool) (temp___do_toplevel_231 Bool)) Bool (=> (or (= temp___is_init_229 true) (<= first1 2147483647)) (dynamic_property1 first1 2147483647 temp___expr_232)))
(assert (= first1 c))
(define-fun dynamic_invariant9 ((temp___expr_263 us_t) (temp___is_init_260 Bool) (temp___skip_constant_261 Bool) (temp___do_toplevel_262 Bool)) Bool (and (=> (not (= temp___skip_constant_261 true)) (dynamic_property2 1 2147483647 (first3 temp___expr_263) (last1 temp___expr_263))) (forall ((temp___264 Int)) (=> (and (<= (first3 temp___expr_263) temp___264) (<= temp___264 (last1 temp___expr_263))) (=> (or (= temp___is_init_260 true) (<= first1 2147483647)) (dynamic_property1 first1 2147483647 (to_rep1 (select (to_array temp___expr_263) temp___264))))))))
(declare-const empty1 (Array Int tscalar_with_defaultB))
(declare-const empty2 (Array Int integer))
(declare-const no_def (Array Int integer))
(declare-const us Int)
(declare-const o Int)
(declare-const o1 (Array Int integer))
(declare-const with_default__ok_array__no_def__assume (Array Int integer))
(declare-const with_default__ok_array__no_def__assume1 t)
(declare-const o2 Int)
(declare-const result (Array Int integer))
(declare-const no_def1 (Array Int integer))
(declare-const result1 Bool)
(assert (in_range1 c))
(assert (<= c 2))
(assert (default_initial_assumption empty1 false))
(assert (dynamic_invariant1 empty1 false false true))
(assert (default_initial_assumption1 empty2 false))
(assert (dynamic_invariant2 empty2 false false true))
(assert (and (= us c) (dynamic_property1 first1 2147483647 c)))
(assert (= o c))
(assert (= o1 (with_default__ok_array__no_def__aggregate_def o)))
(assert (= o1 with_default__ok_array__no_def__assume))
(assert (= (mk 1 100) with_default__ok_array__no_def__assume1))
(assert (= result no_def))
(assert (= no_def1 with_default__ok_array__no_def__assume))
(assert (= (to_rep1 no_def__first) (to_rep1 (first2 with_default__ok_array__no_def__assume1))))
(assert (= (to_rep1 no_def__last) (to_rep1 (last with_default__ok_array__no_def__assume1))))
(assert (and (dynamic_property2 1 2147483647 (to_rep1 no_def__first) (to_rep1 no_def__last)) (forall ((temp___612 Int)) (=> (and (<= (to_rep1 no_def__first) temp___612) (<= temp___612 (to_rep1 no_def__last))) (dynamic_property1 first1 2147483647 (to_rep1 (select no_def1 temp___612)))))))
(assert (=> (<= 1 100) (= o2 (+ (- 100 1) 1))))
(assert (=> (not (<= 1 100)) (= o2 0)))
(assert (= result1 (ite (< 0 o2) true false)))
(assert (= result1 true))
(assert (not (in_range4 0)))
(check-sat)
(exit)
