(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type slot

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : slot, slot -> bool

logic dummy1 : slot

type slot__ref = { slot__content : slot
}

function slot__ref___projection(a: slot__ref) : slot = (a).slot__content

logic to_rep1 : slot -> int

logic of_rep1 : int -> slot

axiom inversion_axiom1 :
  (forall x:slot [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:slot [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type pos

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : pos, pos -> bool

logic dummy2 : pos

type pos__ref = { pos__content : pos
}

function pos__ref___projection(a: pos__ref) : pos = (a).pos__content

logic to_rep2 : pos -> int

logic of_rep2 : int -> pos

axiom inversion_axiom2 :
  (forall x:pos [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:pos [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,slot) farray
}

logic slide : (int,slot) farray, int, int -> (int,slot) farray

axiom slide_eq :
  (forall a:(int,slot) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,slot) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,slot) farray, int, int, (int,slot) farray, int,
  int -> (int,slot) farray

axiom concat_def :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : slot, int -> (int,slot) farray

axiom singleton_def :
  (forall v:slot.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,slot) farray, int, int, (int,slot) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,slot) farray. forall a__first:int. forall a__last:int.
  forall b:(int,slot) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep1((a[temp___idx_151])) = to_rep1((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep1((a[temp___idx_151])) = to_rep1((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep1((a[temp___idx_151])) = to_rep1((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare : (int,slot) farray, int, int, (int,slot) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic dummy3 : (int,slot) farray

logic value__size : int

logic object__size : (int,slot) farray -> int

logic value__component__size : int

logic object__component__size : (int,slot) farray -> int

logic value__alignment : int

logic object__alignment : (int,slot) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,slot) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,slot) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,slot) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,slot) farray, (int,slot) farray -> bool

type map__ref1 = { map__content1 : (int,(int,slot) farray) farray
}

logic slide1 : (int,(int,slot) farray) farray, int,
  int -> (int,(int,slot) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,slot) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,slot) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,slot) farray) farray, int, int,
  (int,(int,slot) farray) farray, int, int -> (int,(int,slot) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,slot) farray, int -> (int,(int,slot) farray) farray

axiom singleton_def1 :
  (forall v:(int,slot) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq6 : (int,(int,slot) farray) farray, int, int,
  (int,(int,slot) farray) farray, int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,(int,slot) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,slot) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq5((a[temp___idx_152]), 1, 3,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 3) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq5((a[temp___idx_152]), 1, 3,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 3) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq5((a[temp___idx_152]), 1, 3,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 3) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic num_free_slots : (int,(int,slot) farray) farray -> int

logic num_free_slots__function_guard : int,
  (int,(int,slot) farray) farray -> prop

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy4 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic count_free_slots : int, int, (int,(int,slot) farray) farray -> int

logic count_free_slots__function_guard : int, int, int,
  (int,(int,slot) farray) farray -> prop

axiom num_free_slots__post_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [num_free_slots(tictactoe__my_board)].
  in_range4(num_free_slots(tictactoe__my_board)))

axiom num_free_slots__def_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [num_free_slots(tictactoe__my_board)].
  (num_free_slots(tictactoe__my_board) = count_free_slots(3, 3,
  tictactoe__my_board)))

logic is_full : (int,(int,slot) farray) farray -> bool

logic is_full__function_guard : bool, (int,(int,slot) farray) farray -> prop

axiom is_full__post_axiom : true

axiom is_full__def_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [is_full(tictactoe__my_board)]. ((is_full(tictactoe__my_board) = true) <->
  (num_free_slots(tictactoe__my_board) = 0)))

type us_split_fields = { rec__tictactoe__position__x : pos;
rec__tictactoe__position__y : pos
}

function us_split_fields_X__projection(a: us_split_fields) : pos =
  (a).rec__tictactoe__position__x

function us_split_fields_Y__projection(a: us_split_fields) : pos =
  (a).rec__tictactoe__position__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__tictactoe__position__x) = to_rep2(((b).us_split_fields1).rec__tictactoe__position__x)) and
  (to_rep2(((a).us_split_fields1).rec__tictactoe__position__y) = to_rep2(((b).us_split_fields1).rec__tictactoe__position__y))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__tictactoe__position__x) = to_rep2(((b).us_split_fields1).rec__tictactoe__position__x)) and
  (to_rep2(((a).us_split_fields1).rec__tictactoe__position__y) = to_rep2(((b).us_split_fields1).rec__tictactoe__position__y)))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:pos. forall a1:pos. (0 <= object__size1({ us_split_fields1 = {
  rec__tictactoe__position__x = a; rec__tictactoe__position__y = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:pos. forall a1:pos. (0 <= object__alignment1({ us_split_fields1 =
  { rec__tictactoe__position__x = a; rec__tictactoe__position__y = a1 } })))

logic tictactoe__position__x__first__bit : int

logic tictactoe__position__x__last__bit : int

logic tictactoe__position__x__position : int

axiom tictactoe__position__x__first__bit_axiom :
  (0 <= tictactoe__position__x__first__bit)

axiom tictactoe__position__x__last__bit_axiom :
  (tictactoe__position__x__first__bit <  tictactoe__position__x__last__bit)

axiom tictactoe__position__x__position_axiom :
  (0 <= tictactoe__position__x__position)

logic tictactoe__position__y__first__bit : int

logic tictactoe__position__y__last__bit : int

logic tictactoe__position__y__position : int

axiom tictactoe__position__y__first__bit_axiom :
  (0 <= tictactoe__position__y__first__bit)

axiom tictactoe__position__y__last__bit_axiom :
  (tictactoe__position__y__first__bit <  tictactoe__position__y__last__bit)

axiom tictactoe__position__y__position_axiom :
  (0 <= tictactoe__position__y__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : pos

logic dummy6 : pos

type position__ref = { position__content : us_rep
}

function position__ref___projection(a: position__ref) : us_rep =
  (a).position__content

type map__ref2 = { map__content2 : (int,us_rep) farray
}

logic slide2 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq2 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : us_rep, int -> (int,us_rep) farray

axiom singleton_def2 :
  (forall v:pos. forall v1:pos.
  (forall i:int [(singleton2({ us_split_fields1 = {
  rec__tictactoe__position__x = v; rec__tictactoe__position__y = v1 } },
  i)[i])]. ((singleton2({ us_split_fields1 = { rec__tictactoe__position__x =
  v; rec__tictactoe__position__y = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tictactoe__position__x = v; rec__tictactoe__position__y = v1 } })))

logic bool_eq9 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and (bool_eq8((a[temp___idx_153]),
  (b[((b__first - a__first) + temp___idx_153)])) = true)) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) -> (bool_eq8((a[temp___idx_153]),
  (b[((b__first - a__first) + temp___idx_153)])) = true))))) -> (bool_eq9(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) -> (bool_eq8((a[temp___idx_153]),
  (b[((b__first - a__first) + temp___idx_153)])) = true)))))))

logic dummy7 : (int,us_rep) farray

logic value__size2 : int

logic object__size2 : (int,us_rep) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,us_rep) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,us_rep) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment2(a)))

logic user_eq6 : (int,us_rep) farray, (int,us_rep) farray -> bool

type map__ref3 = { map__content3 : (int,(int,us_rep) farray) farray
}

logic slide3 : (int,(int,us_rep) farray) farray, int,
  int -> (int,(int,us_rep) farray) farray

axiom slide_eq3 :
  (forall a:(int,(int,us_rep) farray) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,(int,us_rep) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,(int,us_rep) farray) farray, int, int,
  (int,(int,us_rep) farray) farray, int,
  int -> (int,(int,us_rep) farray) farray

axiom concat_def3 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : (int,us_rep) farray,
  int -> (int,(int,us_rep) farray) farray

axiom singleton_def3 :
  (forall v:(int,us_rep) farray.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq10 : (int,(int,us_rep) farray) farray, int, int,
  (int,(int,us_rep) farray) farray, int, int -> bool

axiom bool_eq_def9 :
  (forall a:(int,(int,us_rep) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,us_rep) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq10(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq9((a[temp___idx_154]), 1, 3,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 3) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq9((a[temp___idx_154]), 1, 3,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 3) = true))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq9((a[temp___idx_154]), 1, 3,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 3) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic won : (int,(int,slot) farray) farray,
  (int,(int,us_rep) farray) farray -> int

logic won__function_guard : int, (int,(int,slot) farray) farray,
  (int,(int,us_rep) farray) farray -> prop

axiom won__post_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  (forall tictactoe__all_solutions:(int,(int,us_rep) farray) farray
  [won(tictactoe__my_board, tictactoe__all_solutions)].
  in_range2(won(tictactoe__my_board, tictactoe__all_solutions))))

logic attr__ATTRIBUTE_ADDRESS2 : int

type map__ref4 = { map__content4 : (int,integer) farray
}

logic slide4 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq4 :
  (forall a:(int,integer) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : integer, int -> (int,integer) farray

axiom singleton_def4 :
  (forall v:integer.
  (forall i:int [(singleton4(v, i)[i])]. ((singleton4(v, i)[i]) = v)))

logic bool_eq11 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))))))

logic compare1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq11(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq11(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq11(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic tictactoe__computer_play__target_scores__aggregate_def : int,
  int -> (int,integer) farray

axiom def_axiom :
  (forall temp___788:int. forall temp___789:int.
  (((tictactoe__computer_play__target_scores__aggregate_def(temp___788,
  temp___789)[1]) = of_rep(temp___788)) and
  ((tictactoe__computer_play__target_scores__aggregate_def(temp___788,
  temp___789)[2]) = of_rep(temp___789))))

logic one_free_slot : int, int, (int,(int,slot) farray) farray -> int

logic one_free_slot__function_guard : int, int, int,
  (int,(int,slot) farray) farray -> prop

axiom one_free_slot__post_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [one_free_slot(x, y, tictactoe__my_board)]. ((in_range3(x) and
  in_range3(y)) -> in_range1(one_free_slot(x, y, tictactoe__my_board)))))

axiom one_free_slot__def_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [one_free_slot(x, y, tictactoe__my_board)]. ((in_range3(x) and
  in_range3(y)) -> (((to_rep1(((tictactoe__my_board[x])[y])) = 0) ->
  (one_free_slot(x, y, tictactoe__my_board) = 1)) and
  ((not (to_rep1(((tictactoe__my_board[x])[y])) = 0)) -> (one_free_slot(x, y,
  tictactoe__my_board) = 0))))))

axiom count_free_slots__post_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [count_free_slots(x, y, tictactoe__my_board)]. ((in_range3(x) and
  in_range3(y)) -> in_range1(count_free_slots(x, y, tictactoe__my_board)))))

axiom count_free_slots__def_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [count_free_slots(x, y, tictactoe__my_board)]. ((in_range3(x) and
  in_range3(y)) -> (((2 <= y) -> (((3 <= y) -> (((2 <= x) -> (((2 <= y) ->
  (((3 <= y) -> (((3 <= x) -> (((2 <= y) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + 0))))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + 0))))))))) and ((not (2 <= x)) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + 0))))))) and ((not (3 <= y)) -> (((2 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (((3 <= x) -> (((2 <= y) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + 0))))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + 0))))))))) and ((not (2 <= x)) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + one_free_slot(1, 2,
  tictactoe__my_board)) + 0) + 0) + 0))))))))) and ((not (2 <= y)) ->
  (((3 <= y) -> (((2 <= x) -> (((2 <= y) -> (((3 <= y) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + 0))))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + 0))))))))) and ((not (2 <= x)) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + one_free_slot(1, 3,
  tictactoe__my_board)) + 0) + 0))))))) and ((not (3 <= y)) -> (((2 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (((3 <= x) -> (((2 <= y) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + one_free_slot(2, 2,
  tictactoe__my_board)) + 0)) + 0))))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + one_free_slot(2, 3,
  tictactoe__my_board))) + 0))))) and ((not (3 <= y)) -> (((3 <= x) ->
  (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + ((one_free_slot(2, 1,
  tictactoe__my_board) + 0) + 0)) + 0))))))))) and ((not (2 <= x)) ->
  (((3 <= x) -> (((2 <= y) -> (((3 <= y) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + one_free_slot(3, 3, tictactoe__my_board))))) and
  ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + one_free_slot(3, 2,
  tictactoe__my_board)) + 0)))))) and ((not (2 <= y)) -> (((3 <= y) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + one_free_slot(3, 3,
  tictactoe__my_board))))) and ((not (3 <= y)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + 0) + ((one_free_slot(3, 1,
  tictactoe__my_board) + 0) + 0)))))))) and ((not (3 <= x)) ->
  (count_free_slots(x, y, tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + 0) + 0) + 0) + 0)))))))))))))

logic my_board : (int,(int,slot) farray) farray

logic all_solutions : (int,(int,us_rep) farray) farray

logic score : int

logic target_scores : (int,integer) farray

logic p__split_fields : pos

logic p__split_fields1 : pos

logic found : bool

logic target_score : int

logic c38b : int

logic i : int

logic c41b : int

logic i1 : int

logic j : int

logic o : pos

logic o1 : pos

logic o2 : pos

logic o3 : pos

logic tictactoe__computer_play__p__assume : pos

logic tictactoe__computer_play__p__assume1 : pos

logic temp___816 : int

logic temp___815 : bool

logic temp___814 : pos

logic temp___8141 : pos

logic temp___811 : int

logic temp___810 : bool

logic temp___809 : pos

logic temp___8091 : pos

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic temp___806 : bool

logic temp___805 : pos

logic temp___8051 : pos

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic temp___8061 : bool

logic temp___8052 : pos

logic temp___8053 : pos

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic temp___8062 : bool

logic temp___8054 : pos

logic temp___8055 : pos

logic o22 : int

logic o23 : int

logic o24 : int

logic o25 : int

logic o26 : int

logic o27 : int

logic temp___8063 : bool

logic temp___8056 : pos

logic temp___8057 : pos

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : int

logic o32 : int

logic o33 : int

logic temp___8064 : bool

logic temp___8058 : pos

logic temp___8059 : pos

logic o34 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic o39 : int

logic temp___8065 : bool

logic temp___80510 : pos

logic temp___80511 : pos

logic o40 : int

logic o41 : int

logic o42 : int

logic o43 : int

logic o44 : int

logic o45 : int

logic temp___8066 : bool

logic temp___80512 : pos

logic temp___80513 : pos

logic o46 : int

logic o47 : int

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : int

logic temp___8067 : bool

logic temp___80514 : pos

logic temp___80515 : pos

logic temp___8111 : int

logic temp___8101 : bool

logic temp___8092 : pos

logic temp___8093 : pos

logic o52 : int

logic o53 : int

logic o54 : int

logic o55 : int

logic o56 : int

logic o57 : int

logic temp___8068 : bool

logic temp___80516 : pos

logic temp___80517 : pos

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : int

logic o62 : int

logic o63 : int

logic temp___8069 : bool

logic temp___80518 : pos

logic temp___80519 : pos

logic o64 : int

logic o65 : int

logic o66 : int

logic o67 : int

logic o68 : int

logic o69 : int

logic temp___80610 : bool

logic temp___80520 : pos

logic temp___80521 : pos

logic o70 : int

logic o71 : int

logic o72 : int

logic o73 : int

logic o74 : int

logic o75 : int

logic temp___80611 : bool

logic temp___80522 : pos

logic temp___80523 : pos

logic o76 : int

logic o77 : int

logic o78 : int

logic o79 : int

logic o80 : int

logic o81 : int

logic temp___80612 : bool

logic temp___80524 : pos

logic temp___80525 : pos

logic o82 : int

logic o83 : int

logic o84 : int

logic o85 : int

logic o86 : int

logic o87 : int

logic temp___80613 : bool

logic temp___80526 : pos

logic temp___80527 : pos

logic o88 : int

logic o89 : int

logic o90 : int

logic o91 : int

logic o92 : int

logic o93 : int

logic temp___80614 : bool

logic temp___80528 : pos

logic temp___80529 : pos

logic o94 : int

logic o95 : int

logic o96 : int

logic o97 : int

logic o98 : int

logic o99 : int

logic temp___80615 : bool

logic temp___80530 : pos

logic temp___80531 : pos

logic temp___823 : (int,(int,slot) farray) farray

logic temp___820 : (int,(int,slot) farray) farray

logic o100 : pos

logic o101 : pos

logic o102 : pos

logic o103 : pos

logic o104 : pos

logic o105 : pos

logic o106 : pos

logic o107 : pos

logic o108 : pos

logic o109 : pos

logic o110 : pos

logic o111 : pos

logic o112 : pos

logic o113 : pos

logic o114 : pos

logic o115 : pos

logic o116 : pos

logic o117 : pos

logic temp___8201 : (int,(int,slot) farray) farray

logic o118 : pos

logic o119 : pos

logic o120 : pos

logic o121 : pos

logic o122 : pos

logic o123 : pos

logic o124 : pos

logic o125 : pos

logic o126 : pos

logic o127 : pos

logic o128 : pos

logic o129 : pos

logic o130 : pos

logic o131 : pos

logic o132 : pos

logic o133 : pos

logic o134 : pos

logic o135 : pos

logic temp___8202 : (int,(int,slot) farray) farray

logic o136 : pos

logic o137 : pos

logic o138 : pos

logic o139 : pos

logic o140 : pos

logic o141 : pos

logic o142 : pos

logic o143 : pos

logic o144 : pos

logic o145 : pos

logic o146 : pos

logic o147 : pos

logic o148 : pos

logic o149 : pos

logic o150 : pos

logic o151 : pos

logic o152 : pos

logic o153 : pos

logic my_board1 : (int,(int,slot) farray) farray

logic c41b1 : int

logic i2 : int

logic j1 : int

logic result : (int,integer) farray

logic target_scores1 : (int,integer) farray

logic result1 : pos

logic result2 : pos

logic p__split_fields2 : pos

logic p__split_fields3 : pos

logic result3 : bool

logic found1 : bool

logic result4 : int

logic target_score1 : int

logic result5 : int

logic c38b1 : int

logic result6 : int

logic score1 : int

logic result7 : int

logic i3 : int

logic result8 : pos

logic result9 : pos

logic p__split_fields4 : pos

logic p__split_fields5 : pos

logic result10 : int

logic score2 : int

logic result11 : int

logic score3 : int

logic result12 : int

logic i4 : int

logic result13 : pos

logic result14 : pos

logic p__split_fields6 : pos

logic p__split_fields7 : pos

logic result15 : int

logic score4 : int

logic result16 : int

logic score5 : int

logic result17 : int

logic i5 : int

logic result18 : pos

logic result19 : pos

logic p__split_fields8 : pos

logic p__split_fields9 : pos

logic result20 : int

logic score6 : int

logic result21 : int

logic score7 : int

logic result22 : int

logic c41b2 : int

logic result23 : bool

logic found2 : bool

logic result24 : pos

logic result25 : pos

logic p__split_fields10 : pos

logic p__split_fields11 : pos

logic result26 : int

logic c41b3 : int

logic result27 : bool

logic found3 : bool

logic result28 : pos

logic result29 : pos

logic p__split_fields12 : pos

logic p__split_fields13 : pos

logic result30 : int

logic c41b4 : int

logic result31 : bool

logic found4 : bool

logic result32 : pos

logic result33 : pos

logic p__split_fields14 : pos

logic p__split_fields15 : pos

logic p__split_fields16 : pos

logic p__split_fields17 : pos

logic found5 : bool

logic c41b5 : int

logic p__split_fields18 : pos

logic p__split_fields19 : pos

logic found6 : bool

logic c41b6 : int

logic p__split_fields20 : pos

logic p__split_fields21 : pos

logic found7 : bool

logic c41b7 : int

logic p__split_fields22 : pos

logic p__split_fields23 : pos

logic found8 : bool

logic c41b8 : int

logic result34 : int

logic c38b2 : int

logic result35 : int

logic score8 : int

logic result36 : int

logic i6 : int

logic result37 : pos

logic result38 : pos

logic p__split_fields24 : pos

logic p__split_fields25 : pos

logic result39 : int

logic score9 : int

logic result40 : int

logic score10 : int

logic result41 : int

logic i7 : int

logic result42 : pos

logic result43 : pos

logic p__split_fields26 : pos

logic p__split_fields27 : pos

logic result44 : int

logic score11 : int

logic result45 : int

logic score12 : int

logic result46 : int

logic i8 : int

logic result47 : pos

logic result48 : pos

logic p__split_fields28 : pos

logic p__split_fields29 : pos

logic result49 : int

logic score13 : int

logic result50 : int

logic score14 : int

logic result51 : int

logic c41b9 : int

logic result52 : bool

logic found9 : bool

logic result53 : pos

logic result54 : pos

logic p__split_fields30 : pos

logic p__split_fields31 : pos

logic result55 : int

logic c41b10 : int

logic result56 : bool

logic found10 : bool

logic result57 : pos

logic result58 : pos

logic p__split_fields32 : pos

logic p__split_fields33 : pos

logic result59 : int

logic c41b11 : int

logic result60 : bool

logic found11 : bool

logic result61 : pos

logic result62 : pos

logic p__split_fields34 : pos

logic p__split_fields35 : pos

logic p__split_fields36 : pos

logic p__split_fields37 : pos

logic found12 : bool

logic c41b12 : int

logic p__split_fields38 : pos

logic p__split_fields39 : pos

logic found13 : bool

logic c41b13 : int

logic p__split_fields40 : pos

logic p__split_fields41 : pos

logic found14 : bool

logic c41b14 : int

logic p__split_fields42 : pos

logic p__split_fields43 : pos

logic found15 : bool

logic c41b15 : int

logic result63 : int

logic c38b3 : int

logic result64 : int

logic score15 : int

logic result65 : int

logic i9 : int

logic result66 : pos

logic result67 : pos

logic p__split_fields44 : pos

logic p__split_fields45 : pos

logic result68 : int

logic score16 : int

logic result69 : int

logic score17 : int

logic result70 : int

logic i10 : int

logic result71 : pos

logic result72 : pos

logic p__split_fields46 : pos

logic p__split_fields47 : pos

logic result73 : int

logic score18 : int

logic result74 : int

logic score19 : int

logic result75 : int

logic i11 : int

logic result76 : pos

logic result77 : pos

logic p__split_fields48 : pos

logic p__split_fields49 : pos

logic result78 : int

logic score20 : int

logic result79 : int

logic score21 : int

logic result80 : int

logic c41b16 : int

logic result81 : bool

logic found16 : bool

logic result82 : pos

logic result83 : pos

logic p__split_fields50 : pos

logic p__split_fields51 : pos

logic result84 : int

logic c41b17 : int

logic result85 : bool

logic found17 : bool

logic result86 : pos

logic result87 : pos

logic p__split_fields52 : pos

logic p__split_fields53 : pos

logic result88 : int

logic c41b18 : int

logic result89 : bool

logic found18 : bool

logic result90 : pos

logic result91 : pos

logic p__split_fields54 : pos

logic p__split_fields55 : pos

logic p__split_fields56 : pos

logic p__split_fields57 : pos

logic found19 : bool

logic c41b19 : int

logic p__split_fields58 : pos

logic p__split_fields59 : pos

logic found20 : bool

logic c41b20 : int

logic p__split_fields60 : pos

logic p__split_fields61 : pos

logic found21 : bool

logic c41b21 : int

logic p__split_fields62 : pos

logic p__split_fields63 : pos

logic found22 : bool

logic c41b22 : int

logic result92 : int

logic c38b4 : int

logic result93 : int

logic score22 : int

logic result94 : int

logic i12 : int

logic result95 : pos

logic result96 : pos

logic p__split_fields64 : pos

logic p__split_fields65 : pos

logic result97 : int

logic score23 : int

logic result98 : int

logic score24 : int

logic result99 : int

logic i13 : int

logic result100 : pos

logic result101 : pos

logic p__split_fields66 : pos

logic p__split_fields67 : pos

logic result102 : int

logic score25 : int

logic result103 : int

logic score26 : int

logic result104 : int

logic i14 : int

logic result105 : pos

logic result106 : pos

logic p__split_fields68 : pos

logic p__split_fields69 : pos

logic result107 : int

logic score27 : int

logic result108 : int

logic score28 : int

logic result109 : int

logic c41b23 : int

logic result110 : bool

logic found23 : bool

logic result111 : pos

logic result112 : pos

logic p__split_fields70 : pos

logic p__split_fields71 : pos

logic result113 : int

logic c41b24 : int

logic result114 : bool

logic found24 : bool

logic result115 : pos

logic result116 : pos

logic p__split_fields72 : pos

logic p__split_fields73 : pos

logic result117 : int

logic c41b25 : int

logic result118 : bool

logic found25 : bool

logic result119 : pos

logic result120 : pos

logic p__split_fields74 : pos

logic p__split_fields75 : pos

logic p__split_fields76 : pos

logic p__split_fields77 : pos

logic found26 : bool

logic c41b26 : int

logic p__split_fields78 : pos

logic p__split_fields79 : pos

logic found27 : bool

logic c41b27 : int

logic p__split_fields80 : pos

logic p__split_fields81 : pos

logic found28 : bool

logic c41b28 : int

logic p__split_fields82 : pos

logic p__split_fields83 : pos

logic found29 : bool

logic c41b29 : int

logic result121 : int

logic c38b5 : int

logic result122 : int

logic score29 : int

logic result123 : int

logic i15 : int

logic result124 : pos

logic result125 : pos

logic p__split_fields84 : pos

logic p__split_fields85 : pos

logic result126 : int

logic score30 : int

logic result127 : int

logic score31 : int

logic result128 : int

logic i16 : int

logic result129 : pos

logic result130 : pos

logic p__split_fields86 : pos

logic p__split_fields87 : pos

logic result131 : int

logic score32 : int

logic result132 : int

logic score33 : int

logic result133 : int

logic i17 : int

logic result134 : pos

logic result135 : pos

logic p__split_fields88 : pos

logic p__split_fields89 : pos

logic result136 : int

logic score34 : int

logic result137 : int

logic score35 : int

logic result138 : int

logic c41b30 : int

logic result139 : bool

logic found30 : bool

logic result140 : pos

logic result141 : pos

logic p__split_fields90 : pos

logic p__split_fields91 : pos

logic result142 : int

logic c41b31 : int

logic result143 : bool

logic found31 : bool

logic result144 : pos

logic result145 : pos

logic p__split_fields92 : pos

logic p__split_fields93 : pos

logic result146 : int

logic c41b32 : int

logic result147 : bool

logic found32 : bool

logic result148 : pos

logic result149 : pos

logic p__split_fields94 : pos

logic p__split_fields95 : pos

logic p__split_fields96 : pos

logic p__split_fields97 : pos

logic found33 : bool

logic c41b33 : int

logic p__split_fields98 : pos

logic p__split_fields99 : pos

logic found34 : bool

logic c41b34 : int

logic p__split_fields100 : pos

logic p__split_fields101 : pos

logic found35 : bool

logic c41b35 : int

logic p__split_fields102 : pos

logic p__split_fields103 : pos

logic found36 : bool

logic c41b36 : int

logic result150 : int

logic c38b6 : int

logic result151 : int

logic score36 : int

logic result152 : int

logic i18 : int

logic result153 : pos

logic result154 : pos

logic p__split_fields104 : pos

logic p__split_fields105 : pos

logic result155 : int

logic score37 : int

logic result156 : int

logic score38 : int

logic result157 : int

logic i19 : int

logic result158 : pos

logic result159 : pos

logic p__split_fields106 : pos

logic p__split_fields107 : pos

logic result160 : int

logic score39 : int

logic result161 : int

logic score40 : int

logic result162 : int

logic i20 : int

logic result163 : pos

logic result164 : pos

logic p__split_fields108 : pos

logic p__split_fields109 : pos

logic result165 : int

logic score41 : int

logic result166 : int

logic score42 : int

logic result167 : int

logic c41b37 : int

logic result168 : bool

logic found37 : bool

logic result169 : pos

logic result170 : pos

logic p__split_fields110 : pos

logic p__split_fields111 : pos

logic result171 : int

logic c41b38 : int

logic result172 : bool

logic found38 : bool

logic result173 : pos

logic result174 : pos

logic p__split_fields112 : pos

logic p__split_fields113 : pos

logic result175 : int

logic c41b39 : int

logic result176 : bool

logic found39 : bool

logic result177 : pos

logic result178 : pos

logic p__split_fields114 : pos

logic p__split_fields115 : pos

logic p__split_fields116 : pos

logic p__split_fields117 : pos

logic found40 : bool

logic c41b40 : int

logic p__split_fields118 : pos

logic p__split_fields119 : pos

logic found41 : bool

logic c41b41 : int

logic p__split_fields120 : pos

logic p__split_fields121 : pos

logic found42 : bool

logic c41b42 : int

logic p__split_fields122 : pos

logic p__split_fields123 : pos

logic found43 : bool

logic c41b43 : int

logic result179 : int

logic c38b7 : int

logic result180 : int

logic score43 : int

logic result181 : int

logic i21 : int

logic result182 : pos

logic result183 : pos

logic p__split_fields124 : pos

logic p__split_fields125 : pos

logic result184 : int

logic score44 : int

logic result185 : int

logic score45 : int

logic result186 : int

logic i22 : int

logic result187 : pos

logic result188 : pos

logic p__split_fields126 : pos

logic p__split_fields127 : pos

logic result189 : int

logic score46 : int

logic result190 : int

logic score47 : int

logic result191 : int

logic i23 : int

logic result192 : pos

logic result193 : pos

logic p__split_fields128 : pos

logic p__split_fields129 : pos

logic result194 : int

logic score48 : int

logic result195 : int

logic score49 : int

logic result196 : int

logic c41b44 : int

logic result197 : bool

logic found44 : bool

logic result198 : pos

logic result199 : pos

logic p__split_fields130 : pos

logic p__split_fields131 : pos

logic result200 : int

logic c41b45 : int

logic result201 : bool

logic found45 : bool

logic result202 : pos

logic result203 : pos

logic p__split_fields132 : pos

logic p__split_fields133 : pos

logic result204 : int

logic c41b46 : int

logic result205 : bool

logic found46 : bool

logic result206 : pos

logic result207 : pos

logic p__split_fields134 : pos

logic p__split_fields135 : pos

logic p__split_fields136 : pos

logic p__split_fields137 : pos

logic found47 : bool

logic c41b47 : int

logic p__split_fields138 : pos

logic p__split_fields139 : pos

logic found48 : bool

logic c41b48 : int

logic p__split_fields140 : pos

logic p__split_fields141 : pos

logic found49 : bool

logic c41b49 : int

logic p__split_fields142 : pos

logic p__split_fields143 : pos

logic found50 : bool

logic c41b50 : int

logic result208 : int

logic c38b8 : int

logic result209 : int

logic score50 : int

logic result210 : int

logic i24 : int

logic result211 : pos

logic result212 : pos

logic p__split_fields144 : pos

logic p__split_fields145 : pos

logic result213 : int

logic score51 : int

logic result214 : int

logic score52 : int

logic result215 : int

logic i25 : int

logic result216 : pos

logic result217 : pos

logic p__split_fields146 : pos

logic p__split_fields147 : pos

logic result218 : int

logic score53 : int

logic result219 : int

logic score54 : int

logic result220 : int

logic i26 : int

logic result221 : pos

logic result222 : pos

logic p__split_fields148 : pos

logic p__split_fields149 : pos

logic result223 : int

logic score55 : int

logic result224 : int

logic score56 : int

logic result225 : int

logic c41b51 : int

logic result226 : bool

logic found51 : bool

logic result227 : pos

logic result228 : pos

logic p__split_fields150 : pos

logic p__split_fields151 : pos

logic result229 : int

logic c41b52 : int

logic result230 : bool

logic found52 : bool

logic result231 : pos

logic result232 : pos

logic p__split_fields152 : pos

logic p__split_fields153 : pos

logic result233 : int

logic c41b53 : int

logic result234 : bool

logic found53 : bool

logic result235 : pos

logic result236 : pos

logic p__split_fields154 : pos

logic p__split_fields155 : pos

logic p__split_fields156 : pos

logic p__split_fields157 : pos

logic found54 : bool

logic c41b54 : int

logic p__split_fields158 : pos

logic p__split_fields159 : pos

logic found55 : bool

logic c41b55 : int

logic p__split_fields160 : pos

logic p__split_fields161 : pos

logic found56 : bool

logic c41b56 : int

logic p__split_fields162 : pos

logic p__split_fields163 : pos

logic found57 : bool

logic c41b57 : int

logic score57 : int

logic p__split_fields164 : pos

logic p__split_fields165 : pos

logic found58 : bool

logic c38b9 : int

logic i27 : int

logic c41b58 : int

logic score58 : int

logic p__split_fields166 : pos

logic p__split_fields167 : pos

logic found59 : bool

logic c38b10 : int

logic i28 : int

logic c41b59 : int

logic score59 : int

logic p__split_fields168 : pos

logic p__split_fields169 : pos

logic found60 : bool

logic c38b11 : int

logic i29 : int

logic c41b60 : int

logic score60 : int

logic p__split_fields170 : pos

logic p__split_fields171 : pos

logic found61 : bool

logic c38b12 : int

logic i30 : int

logic c41b61 : int

logic score61 : int

logic p__split_fields172 : pos

logic p__split_fields173 : pos

logic found62 : bool

logic c38b13 : int

logic i31 : int

logic c41b62 : int

logic score62 : int

logic p__split_fields174 : pos

logic p__split_fields175 : pos

logic found63 : bool

logic c38b14 : int

logic i32 : int

logic c41b63 : int

logic score63 : int

logic p__split_fields176 : pos

logic p__split_fields177 : pos

logic found64 : bool

logic c38b15 : int

logic i33 : int

logic c41b64 : int

logic score64 : int

logic p__split_fields178 : pos

logic p__split_fields179 : pos

logic found65 : bool

logic c38b16 : int

logic i34 : int

logic c41b65 : int

logic score65 : int

logic p__split_fields180 : pos

logic p__split_fields181 : pos

logic found66 : bool

logic c38b17 : int

logic i35 : int

logic c41b66 : int

logic score66 : int

logic p__split_fields182 : pos

logic p__split_fields183 : pos

logic found67 : bool

logic c38b18 : int

logic i36 : int

logic c41b67 : int

logic score67 : int

logic p__split_fields184 : pos

logic p__split_fields185 : pos

logic found68 : bool

logic c38b19 : int

logic i37 : int

logic c41b68 : int

logic score68 : int

logic p__split_fields186 : pos

logic p__split_fields187 : pos

logic found69 : bool

logic c38b20 : int

logic i38 : int

logic c41b69 : int

logic score69 : int

logic p__split_fields188 : pos

logic p__split_fields189 : pos

logic found70 : bool

logic c38b21 : int

logic i39 : int

logic c41b70 : int

logic score70 : int

logic p__split_fields190 : pos

logic p__split_fields191 : pos

logic found71 : bool

logic c38b22 : int

logic i40 : int

logic c41b71 : int

logic result237 : int

logic target_score2 : int

logic result238 : int

logic c38b23 : int

logic result239 : int

logic score71 : int

logic result240 : int

logic i41 : int

logic result241 : pos

logic result242 : pos

logic p__split_fields192 : pos

logic p__split_fields193 : pos

logic result243 : int

logic score72 : int

logic result244 : int

logic score73 : int

logic result245 : int

logic i42 : int

logic result246 : pos

logic result247 : pos

logic p__split_fields194 : pos

logic p__split_fields195 : pos

logic result248 : int

logic score74 : int

logic result249 : int

logic score75 : int

logic result250 : int

logic i43 : int

logic result251 : pos

logic result252 : pos

logic p__split_fields196 : pos

logic p__split_fields197 : pos

logic result253 : int

logic score76 : int

logic result254 : int

logic score77 : int

logic result255 : int

logic c41b72 : int

logic result256 : bool

logic found72 : bool

logic result257 : pos

logic result258 : pos

logic p__split_fields198 : pos

logic p__split_fields199 : pos

logic result259 : int

logic c41b73 : int

logic result260 : bool

logic found73 : bool

logic result261 : pos

logic result262 : pos

logic p__split_fields200 : pos

logic p__split_fields201 : pos

logic result263 : int

logic c41b74 : int

logic result264 : bool

logic found74 : bool

logic result265 : pos

logic result266 : pos

logic p__split_fields202 : pos

logic p__split_fields203 : pos

logic p__split_fields204 : pos

logic p__split_fields205 : pos

logic found75 : bool

logic c41b75 : int

logic p__split_fields206 : pos

logic p__split_fields207 : pos

logic found76 : bool

logic c41b76 : int

logic p__split_fields208 : pos

logic p__split_fields209 : pos

logic found77 : bool

logic c41b77 : int

logic p__split_fields210 : pos

logic p__split_fields211 : pos

logic found78 : bool

logic c41b78 : int

logic result267 : int

logic c38b24 : int

logic result268 : int

logic score78 : int

logic result269 : int

logic i44 : int

logic result270 : pos

logic result271 : pos

logic p__split_fields212 : pos

logic p__split_fields213 : pos

logic result272 : int

logic score79 : int

logic result273 : int

logic score80 : int

logic result274 : int

logic i45 : int

logic result275 : pos

logic result276 : pos

logic p__split_fields214 : pos

logic p__split_fields215 : pos

logic result277 : int

logic score81 : int

logic result278 : int

logic score82 : int

logic result279 : int

logic i46 : int

logic result280 : pos

logic result281 : pos

logic p__split_fields216 : pos

logic p__split_fields217 : pos

logic result282 : int

logic score83 : int

logic result283 : int

logic score84 : int

logic result284 : int

logic c41b79 : int

logic result285 : bool

logic found79 : bool

logic result286 : pos

logic result287 : pos

logic p__split_fields218 : pos

logic p__split_fields219 : pos

logic result288 : int

logic c41b80 : int

logic result289 : bool

logic found80 : bool

logic result290 : pos

logic result291 : pos

logic p__split_fields220 : pos

logic p__split_fields221 : pos

logic result292 : int

logic c41b81 : int

logic result293 : bool

logic found81 : bool

logic result294 : pos

logic result295 : pos

logic p__split_fields222 : pos

logic p__split_fields223 : pos

logic p__split_fields224 : pos

logic p__split_fields225 : pos

logic found82 : bool

logic c41b82 : int

logic p__split_fields226 : pos

logic p__split_fields227 : pos

logic found83 : bool

logic c41b83 : int

logic p__split_fields228 : pos

logic p__split_fields229 : pos

logic found84 : bool

logic c41b84 : int

logic p__split_fields230 : pos

logic p__split_fields231 : pos

logic found85 : bool

logic c41b85 : int

logic result296 : int

logic c38b25 : int

logic result297 : int

logic score85 : int

logic result298 : int

logic i47 : int

logic result299 : pos

logic result300 : pos

logic p__split_fields232 : pos

logic p__split_fields233 : pos

logic result301 : int

logic score86 : int

logic result302 : int

logic score87 : int

logic result303 : int

logic i48 : int

logic result304 : pos

logic result305 : pos

logic p__split_fields234 : pos

logic p__split_fields235 : pos

logic result306 : int

logic score88 : int

logic result307 : int

logic score89 : int

logic result308 : int

logic i49 : int

logic result309 : pos

logic result310 : pos

logic p__split_fields236 : pos

logic p__split_fields237 : pos

logic result311 : int

logic score90 : int

logic result312 : int

logic score91 : int

logic result313 : int

logic c41b86 : int

logic result314 : bool

logic found86 : bool

logic result315 : pos

logic result316 : pos

logic p__split_fields238 : pos

logic p__split_fields239 : pos

logic result317 : int

logic c41b87 : int

logic result318 : bool

logic found87 : bool

logic result319 : pos

logic result320 : pos

logic p__split_fields240 : pos

logic p__split_fields241 : pos

logic result321 : int

logic c41b88 : int

logic result322 : bool

logic found88 : bool

logic result323 : pos

logic result324 : pos

logic p__split_fields242 : pos

logic p__split_fields243 : pos

logic p__split_fields244 : pos

logic p__split_fields245 : pos

logic found89 : bool

logic c41b89 : int

logic p__split_fields246 : pos

logic p__split_fields247 : pos

logic found90 : bool

logic c41b90 : int

logic p__split_fields248 : pos

logic p__split_fields249 : pos

logic found91 : bool

logic c41b91 : int

logic p__split_fields250 : pos

logic p__split_fields251 : pos

logic found92 : bool

logic c41b92 : int

logic result325 : int

logic c38b26 : int

logic result326 : int

logic score92 : int

logic result327 : int

logic i50 : int

logic result328 : pos

logic result329 : pos

logic p__split_fields252 : pos

logic p__split_fields253 : pos

logic result330 : int

logic score93 : int

logic result331 : int

logic score94 : int

logic result332 : int

logic i51 : int

logic result333 : pos

logic result334 : pos

logic p__split_fields254 : pos

logic p__split_fields255 : pos

logic result335 : int

logic score95 : int

logic result336 : int

logic score96 : int

logic result337 : int

logic i52 : int

logic result338 : pos

logic result339 : pos

logic p__split_fields256 : pos

logic p__split_fields257 : pos

logic result340 : int

logic score97 : int

logic result341 : int

logic score98 : int

logic result342 : int

logic c41b93 : int

logic result343 : bool

logic found93 : bool

logic result344 : pos

logic result345 : pos

logic p__split_fields258 : pos

logic p__split_fields259 : pos

logic result346 : int

logic c41b94 : int

logic result347 : bool

logic found94 : bool

logic result348 : pos

logic result349 : pos

logic p__split_fields260 : pos

logic p__split_fields261 : pos

logic result350 : int

logic c41b95 : int

logic result351 : bool

logic found95 : bool

logic result352 : pos

logic result353 : pos

logic p__split_fields262 : pos

logic p__split_fields263 : pos

logic p__split_fields264 : pos

logic p__split_fields265 : pos

logic found96 : bool

logic c41b96 : int

logic p__split_fields266 : pos

logic p__split_fields267 : pos

logic found97 : bool

logic c41b97 : int

logic p__split_fields268 : pos

logic p__split_fields269 : pos

logic found98 : bool

logic c41b98 : int

logic p__split_fields270 : pos

logic p__split_fields271 : pos

logic found99 : bool

logic c41b99 : int

logic result354 : int

logic c38b27 : int

logic result355 : int

logic score99 : int

logic result356 : int

logic i53 : int

logic result357 : pos

logic result358 : pos

logic p__split_fields272 : pos

logic p__split_fields273 : pos

logic result359 : int

logic score100 : int

logic result360 : int

logic score101 : int

logic result361 : int

logic i54 : int

logic result362 : pos

logic result363 : pos

logic p__split_fields274 : pos

logic p__split_fields275 : pos

logic result364 : int

logic score102 : int

logic result365 : int

logic score103 : int

logic result366 : int

logic i55 : int

logic result367 : pos

logic result368 : pos

logic p__split_fields276 : pos

logic p__split_fields277 : pos

logic result369 : int

logic score104 : int

logic result370 : int

logic score105 : int

logic result371 : int

logic c41b100 : int

logic result372 : bool

logic found100 : bool

logic result373 : pos

logic result374 : pos

logic p__split_fields278 : pos

logic p__split_fields279 : pos

logic result375 : int

logic c41b101 : int

logic result376 : bool

logic found101 : bool

logic result377 : pos

logic result378 : pos

logic p__split_fields280 : pos

logic p__split_fields281 : pos

logic result379 : int

logic c41b102 : int

logic result380 : bool

logic found102 : bool

logic result381 : pos

logic result382 : pos

logic p__split_fields282 : pos

logic p__split_fields283 : pos

logic p__split_fields284 : pos

logic p__split_fields285 : pos

logic found103 : bool

logic c41b103 : int

logic p__split_fields286 : pos

logic p__split_fields287 : pos

logic found104 : bool

logic c41b104 : int

logic p__split_fields288 : pos

logic p__split_fields289 : pos

logic found105 : bool

logic c41b105 : int

logic p__split_fields290 : pos

logic p__split_fields291 : pos

logic found106 : bool

logic c41b106 : int

logic result383 : int

logic c38b28 : int

logic result384 : int

logic score106 : int

logic result385 : int

logic i56 : int

logic result386 : pos

logic result387 : pos

logic p__split_fields292 : pos

logic p__split_fields293 : pos

logic result388 : int

logic score107 : int

logic result389 : int

logic score108 : int

logic result390 : int

logic i57 : int

logic result391 : pos

logic result392 : pos

logic p__split_fields294 : pos

logic p__split_fields295 : pos

logic result393 : int

logic score109 : int

logic result394 : int

logic score110 : int

logic result395 : int

logic i58 : int

logic result396 : pos

logic result397 : pos

logic p__split_fields296 : pos

logic p__split_fields297 : pos

logic result398 : int

logic score111 : int

logic result399 : int

logic score112 : int

logic result400 : int

logic c41b107 : int

logic result401 : bool

logic found107 : bool

logic result402 : pos

logic result403 : pos

logic p__split_fields298 : pos

logic p__split_fields299 : pos

logic result404 : int

logic c41b108 : int

logic result405 : bool

logic found108 : bool

logic result406 : pos

logic result407 : pos

logic p__split_fields300 : pos

logic p__split_fields301 : pos

logic result408 : int

logic c41b109 : int

logic result409 : bool

logic found109 : bool

logic result410 : pos

logic result411 : pos

logic p__split_fields302 : pos

logic p__split_fields303 : pos

logic p__split_fields304 : pos

logic p__split_fields305 : pos

logic found110 : bool

logic c41b110 : int

logic p__split_fields306 : pos

logic p__split_fields307 : pos

logic found111 : bool

logic c41b111 : int

logic p__split_fields308 : pos

logic p__split_fields309 : pos

logic found112 : bool

logic c41b112 : int

logic p__split_fields310 : pos

logic p__split_fields311 : pos

logic found113 : bool

logic c41b113 : int

logic result412 : int

logic c38b29 : int

logic result413 : int

logic score113 : int

logic result414 : int

logic i59 : int

logic result415 : pos

logic result416 : pos

logic p__split_fields312 : pos

logic p__split_fields313 : pos

logic result417 : int

logic score114 : int

logic result418 : int

logic score115 : int

logic result419 : int

logic i60 : int

logic result420 : pos

logic result421 : pos

logic p__split_fields314 : pos

logic p__split_fields315 : pos

logic result422 : int

logic score116 : int

logic result423 : int

logic score117 : int

logic result424 : int

logic i61 : int

logic result425 : pos

logic result426 : pos

logic p__split_fields316 : pos

logic p__split_fields317 : pos

logic result427 : int

logic score118 : int

logic result428 : int

logic score119 : int

logic result429 : int

logic c41b114 : int

logic result430 : bool

logic found114 : bool

logic result431 : pos

logic result432 : pos

logic p__split_fields318 : pos

logic p__split_fields319 : pos

logic result433 : int

logic c41b115 : int

logic result434 : bool

logic found115 : bool

logic result435 : pos

logic result436 : pos

logic p__split_fields320 : pos

logic p__split_fields321 : pos

logic result437 : int

logic c41b116 : int

logic result438 : bool

logic found116 : bool

logic result439 : pos

logic result440 : pos

logic p__split_fields322 : pos

logic p__split_fields323 : pos

logic p__split_fields324 : pos

logic p__split_fields325 : pos

logic found117 : bool

logic c41b117 : int

logic p__split_fields326 : pos

logic p__split_fields327 : pos

logic found118 : bool

logic c41b118 : int

logic p__split_fields328 : pos

logic p__split_fields329 : pos

logic found119 : bool

logic c41b119 : int

logic p__split_fields330 : pos

logic p__split_fields331 : pos

logic found120 : bool

logic c41b120 : int

logic result441 : int

logic c38b30 : int

logic result442 : int

logic score120 : int

logic result443 : int

logic i62 : int

logic result444 : pos

logic result445 : pos

logic p__split_fields332 : pos

logic p__split_fields333 : pos

logic result446 : int

logic score121 : int

logic result447 : int

logic score122 : int

logic result448 : int

logic i63 : int

logic result449 : pos

logic result450 : pos

logic p__split_fields334 : pos

logic p__split_fields335 : pos

logic result451 : int

logic score123 : int

logic result452 : int

logic score124 : int

logic result453 : int

logic i64 : int

logic result454 : pos

logic result455 : pos

logic p__split_fields336 : pos

logic p__split_fields337 : pos

logic result456 : int

logic score125 : int

logic result457 : int

logic score126 : int

logic result458 : int

logic c41b121 : int

logic result459 : bool

logic found121 : bool

logic result460 : pos

logic result461 : pos

logic p__split_fields338 : pos

logic p__split_fields339 : pos

logic result462 : int

logic c41b122 : int

logic result463 : bool

logic found122 : bool

logic result464 : pos

logic result465 : pos

logic p__split_fields340 : pos

logic p__split_fields341 : pos

logic result466 : int

logic c41b123 : int

logic result467 : bool

logic found123 : bool

logic result468 : pos

logic result469 : pos

logic p__split_fields342 : pos

logic p__split_fields343 : pos

logic p__split_fields344 : pos

logic p__split_fields345 : pos

logic found124 : bool

logic c41b124 : int

logic p__split_fields346 : pos

logic p__split_fields347 : pos

logic found125 : bool

logic c41b125 : int

logic p__split_fields348 : pos

logic p__split_fields349 : pos

logic found126 : bool

logic c41b126 : int

logic p__split_fields350 : pos

logic p__split_fields351 : pos

logic found127 : bool

logic c41b127 : int

logic score127 : int

logic p__split_fields352 : pos

logic p__split_fields353 : pos

logic found128 : bool

logic c38b31 : int

logic i65 : int

logic c41b128 : int

logic score128 : int

logic p__split_fields354 : pos

logic p__split_fields355 : pos

logic found129 : bool

logic c38b32 : int

logic i66 : int

logic c41b129 : int

logic score129 : int

logic p__split_fields356 : pos

logic p__split_fields357 : pos

logic found130 : bool

logic c38b33 : int

logic i67 : int

logic c41b130 : int

logic score130 : int

logic p__split_fields358 : pos

logic p__split_fields359 : pos

logic found131 : bool

logic c38b34 : int

logic i68 : int

logic c41b131 : int

logic score131 : int

logic p__split_fields360 : pos

logic p__split_fields361 : pos

logic found132 : bool

logic c38b35 : int

logic i69 : int

logic c41b132 : int

logic score132 : int

logic p__split_fields362 : pos

logic p__split_fields363 : pos

logic found133 : bool

logic c38b36 : int

logic i70 : int

logic c41b133 : int

logic score133 : int

logic p__split_fields364 : pos

logic p__split_fields365 : pos

logic found134 : bool

logic c38b37 : int

logic i71 : int

logic c41b134 : int

logic score134 : int

logic p__split_fields366 : pos

logic p__split_fields367 : pos

logic found135 : bool

logic c38b38 : int

logic i72 : int

logic c41b135 : int

logic score135 : int

logic p__split_fields368 : pos

logic p__split_fields369 : pos

logic found136 : bool

logic c38b39 : int

logic i73 : int

logic c41b136 : int

logic score136 : int

logic p__split_fields370 : pos

logic p__split_fields371 : pos

logic found137 : bool

logic c38b40 : int

logic i74 : int

logic c41b137 : int

logic score137 : int

logic p__split_fields372 : pos

logic p__split_fields373 : pos

logic found138 : bool

logic c38b41 : int

logic i75 : int

logic c41b138 : int

logic score138 : int

logic p__split_fields374 : pos

logic p__split_fields375 : pos

logic found139 : bool

logic c38b42 : int

logic i76 : int

logic c41b139 : int

logic score139 : int

logic p__split_fields376 : pos

logic p__split_fields377 : pos

logic found140 : bool

logic c38b43 : int

logic i77 : int

logic c41b140 : int

logic score140 : int

logic p__split_fields378 : pos

logic p__split_fields379 : pos

logic found141 : bool

logic c38b44 : int

logic i78 : int

logic c41b141 : int

logic score141 : int

logic p__split_fields380 : pos

logic p__split_fields381 : pos

logic found142 : bool

logic target_score3 : int

logic c38b45 : int

logic i79 : int

logic c41b142 : int

logic score142 : int

logic p__split_fields382 : pos

logic p__split_fields383 : pos

logic found143 : bool

logic target_score4 : int

logic c38b46 : int

logic i80 : int

logic c41b143 : int

logic score143 : int

logic p__split_fields384 : pos

logic p__split_fields385 : pos

logic found144 : bool

logic target_score5 : int

logic c38b47 : int

logic i81 : int

logic c41b144 : int

logic score144 : int

logic p__split_fields386 : pos

logic p__split_fields387 : pos

logic found145 : bool

logic target_score6 : int

logic c38b48 : int

logic i82 : int

logic c41b145 : int

logic my_board2 : (int,(int,slot) farray) farray

logic my_board3 : (int,(int,slot) farray) farray

logic my_board4 : (int,(int,slot) farray) farray

logic result470 : int

logic i83 : int

logic result471 : int

logic j2 : int

logic my_board5 : (int,(int,slot) farray) farray

logic my_board6 : (int,(int,slot) farray) farray

logic my_board7 : (int,(int,slot) farray) farray

logic result472 : int

logic j3 : int

logic my_board8 : (int,(int,slot) farray) farray

logic my_board9 : (int,(int,slot) farray) farray

logic my_board10 : (int,(int,slot) farray) farray

logic result473 : int

logic j4 : int

logic my_board11 : (int,(int,slot) farray) farray

logic my_board12 : (int,(int,slot) farray) farray

logic my_board13 : (int,(int,slot) farray) farray

logic my_board14 : (int,(int,slot) farray) farray

logic j5 : int

logic my_board15 : (int,(int,slot) farray) farray

logic j6 : int

logic my_board16 : (int,(int,slot) farray) farray

logic j7 : int

logic my_board17 : (int,(int,slot) farray) farray

logic j8 : int

logic result474 : int

logic i84 : int

logic result475 : int

logic j9 : int

logic my_board18 : (int,(int,slot) farray) farray

logic my_board19 : (int,(int,slot) farray) farray

logic my_board20 : (int,(int,slot) farray) farray

logic result476 : int

logic j10 : int

logic my_board21 : (int,(int,slot) farray) farray

logic my_board22 : (int,(int,slot) farray) farray

logic my_board23 : (int,(int,slot) farray) farray

logic result477 : int

logic j11 : int

logic my_board24 : (int,(int,slot) farray) farray

logic my_board25 : (int,(int,slot) farray) farray

logic my_board26 : (int,(int,slot) farray) farray

logic my_board27 : (int,(int,slot) farray) farray

logic j12 : int

logic my_board28 : (int,(int,slot) farray) farray

logic j13 : int

logic my_board29 : (int,(int,slot) farray) farray

logic j14 : int

logic my_board30 : (int,(int,slot) farray) farray

logic j15 : int

logic result478 : int

logic i85 : int

logic result479 : int

logic j16 : int

logic my_board31 : (int,(int,slot) farray) farray

logic my_board32 : (int,(int,slot) farray) farray

logic my_board33 : (int,(int,slot) farray) farray

logic result480 : int

logic j17 : int

logic my_board34 : (int,(int,slot) farray) farray

logic my_board35 : (int,(int,slot) farray) farray

logic my_board36 : (int,(int,slot) farray) farray

logic result481 : int

logic j18 : int

logic my_board37 : (int,(int,slot) farray) farray

logic my_board38 : (int,(int,slot) farray) farray

logic my_board39 : (int,(int,slot) farray) farray

logic my_board40 : (int,(int,slot) farray) farray

logic j19 : int

logic my_board41 : (int,(int,slot) farray) farray

logic j20 : int

logic my_board42 : (int,(int,slot) farray) farray

logic j21 : int

logic my_board43 : (int,(int,slot) farray) farray

logic j22 : int

logic my_board44 : (int,(int,slot) farray) farray

logic i86 : int

logic j23 : int

logic my_board45 : (int,(int,slot) farray) farray

logic i87 : int

logic j24 : int

logic my_board46 : (int,(int,slot) farray) farray

logic i88 : int

logic j25 : int

logic my_board47 : (int,(int,slot) farray) farray

logic i89 : int

logic j26 : int

logic my_board48 : (int,(int,slot) farray) farray

logic i90 : int

logic j27 : int

logic my_board49 : (int,(int,slot) farray) farray

logic i91 : int

logic j28 : int

logic my_board50 : (int,(int,slot) farray) farray

logic i92 : int

logic j29 : int

logic my_board51 : (int,(int,slot) farray) farray

logic i93 : int

logic j30 : int

logic my_board52 : (int,(int,slot) farray) farray

logic score145 : int

logic target_scores2 : (int,integer) farray

logic p__split_fields388 : pos

logic p__split_fields389 : pos

logic found146 : bool

logic target_score7 : int

logic c38b49 : int

logic i94 : int

logic c41b146 : int

logic i95 : int

logic j31 : int

logic my_board53 : (int,(int,slot) farray) farray

logic score146 : int

logic target_scores3 : (int,integer) farray

logic p__split_fields390 : pos

logic p__split_fields391 : pos

logic found147 : bool

logic target_score8 : int

logic c38b50 : int

logic i96 : int

logic c41b147 : int

logic i97 : int

logic j32 : int

axiom H : ((not (is_full(my_board) = true)) and (won(my_board,
  all_solutions) = 0))

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range1(score))

axiom H2 : (result = target_scores)

axiom H3 :
  (target_scores1 = tictactoe__computer_play__target_scores__aggregate_def(2,
  20))

axiom H4 : (to_rep2(o) = 1)

axiom H5 : (to_rep2(o1) = 1)

axiom H6 : (o1 = o2)

axiom H7 : (o = o3)

axiom H8 : (tictactoe__computer_play__p__assume = o2)

axiom H9 : (tictactoe__computer_play__p__assume1 = o3)

axiom H10 : ((result1 = p__split_fields) and (result2 = p__split_fields1))

axiom H11 : ((p__split_fields2 = tictactoe__computer_play__p__assume) and
  (p__split_fields3 = tictactoe__computer_play__p__assume1))

axiom H12 : (result3 = found)

axiom H13 : (found1 = of_int(0))

axiom H14 : (result4 = target_score)

axiom H15 : (target_score1 = 1)

axiom H16 : (result5 = c38b)

axiom H17 : (c38b1 = 1)

axiom H18 : (result6 = score)

axiom H19 : (score1 = 0)

axiom H20 : (result7 = i)

axiom H21 : (i3 = 1)

axiom H22 : ((result8 = p__split_fields2) and (result9 = p__split_fields3))

axiom H23 : ({ rec__tictactoe__position__x = p__split_fields4;
  rec__tictactoe__position__y = p__split_fields5
  } = (((all_solutions[c38b1])[i3])).us_split_fields1)

axiom H24 :
  (not (to_rep1(((my_board[to_rep2(p__split_fields4)])[to_rep2(p__split_fields5)])) = 2))

axiom H25 :
  (to_rep1(((my_board[to_rep2(p__split_fields4)])[to_rep2(p__split_fields5)])) = 1)

 (* File "tictactoe.ads", line 40, characters 0-0 *)
goal WP_parameter_def : in_range1((score1 + 10))
