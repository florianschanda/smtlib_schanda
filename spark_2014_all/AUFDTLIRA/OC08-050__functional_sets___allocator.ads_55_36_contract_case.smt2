(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort resource 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (resource resource) Bool)
(declare-const dummy resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant ((temp___expr_310 Int) (temp___is_init_306 Bool) (temp___skip_constant_307 Bool) (temp___do_toplevel_308 Bool) (temp___do_typ_inv_309 Bool)) Bool (=> (or (= temp___is_init_306 true) (<= 0 3)) (in_range1 temp___expr_310)))
(declare-sort valid_resource 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (valid_resource valid_resource) Bool)
(declare-const dummy1 valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(declare-sort status 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (status status) Bool)
(declare-const dummy2 status)
(declare-datatypes () ((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content a))
(declare-fun to_rep (status) Int)
(declare-fun of_rep (Int) status)
(assert (forall ((x status)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x status)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int status))))))
(declare-fun slide ((Array Int status) Int Int) (Array Int status))
(assert (forall ((a (Array Int status))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int status))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int status)) (a__first Int) (a__last Int) (b (Array Int status)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int status)) (b (Array Int status))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq1 (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___projection ((a set__ref)) us_rep (set__content a))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun is_empty1 (Int us_rep) Bool)
(declare-fun is_empty__function_guard1 (Bool Int us_rep) Bool)
(declare-sort element_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption ((temp___expr_338 us_rep) (temp___skip_top_level_339 Bool)) Bool (=> (not (= temp___skip_top_level_339 true)) (= (is_empty temp___expr_338) true)))
(declare-fun mem (us_rep Int) Bool)
(declare-fun mem__function_guard (Bool us_rep Int) Bool)
(declare-fun mem1 (Int us_rep Int) Bool)
(declare-fun mem__function_guard1 (Bool Int us_rep Int) Bool)
(assert (forall ((s us_rep)) (! (= (= (is_empty s) true) (forall ((e Int)) (not (and (in_range4 e) (= (mem s e) true))))) :pattern ((is_empty s)))))
(assert true)
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(declare-fun is_add1 (Int us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard1 (Bool Int us_rep Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_330 Int) (temp___is_init_326 Bool) (temp___skip_constant_327 Bool) (temp___do_toplevel_328 Bool) (temp___do_typ_inv_329 Bool)) Bool (=> (or (= temp___is_init_326 true) (<= 0 3)) (in_range4 temp___expr_330)))
(assert (forall ((s us_rep) (result__ us_rep)) (forall ((e Int)) (! (=> (dynamic_invariant1 e true true true true) (= (= (is_add s e result__) true) (and (and (and (and (not (= e 0)) (= (mem result__ e) true)) (not (= (mem s e) true))) (forall ((f Int)) (=> (and (in_range4 f) (= (mem result__ f) true)) (or (= (mem s f) true) (= f e))))) (forall ((e1 Int)) (=> (and (in_range4 e1) (= (mem s e1) true)) (= (mem result__ e1) true)))))) :pattern ((is_add s e result__))))))
(assert true)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__allocator__m__t__available us_rep) (rec__allocator__m__t__allocated us_rep)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) us_rep (rec__allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields)) us_rep (rec__allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq3 (rec__allocator__m__t__available (us_split_fields1 a)) (rec__allocator__m__t__available (us_split_fields1 b))) true) (= (user_eq3 (rec__allocator__m__t__allocated (us_split_fields1 a)) (rec__allocator__m__t__allocated (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const allocator__m__t__available__first__bit Int)
(declare-const allocator__m__t__available__last__bit Int)
(declare-const allocator__m__t__available__position Int)
(assert (<= 0 allocator__m__t__available__first__bit))
(assert (< allocator__m__t__available__first__bit allocator__m__t__available__last__bit))
(assert (<= 0 allocator__m__t__available__position))
(declare-const allocator__m__t__allocated__first__bit Int)
(declare-const allocator__m__t__allocated__last__bit Int)
(declare-const allocator__m__t__allocated__position Int)
(assert (<= 0 allocator__m__t__allocated__first__bit))
(assert (< allocator__m__t__allocated__first__bit allocator__m__t__allocated__last__bit))
(assert (<= 0 allocator__m__t__allocated__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))
(declare-fun oeq2 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq5 a b) (oeq2 a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_346 us_rep1) (temp___skip_top_level_347 Bool)) Bool (and (= (is_empty (rec__allocator__m__t__available (us_split_fields1 temp___expr_346))) true) (= (is_empty (rec__allocator__m__t__allocated (us_split_fields1 temp___expr_346))) true)))
(assert true)
(assert (forall ((x us_rep1) (y us_rep1)) (! (= (= (oeq2 x y) true) (and (= (oeq (rec__allocator__m__t__available (us_split_fields1 x)) (rec__allocator__m__t__available (us_split_fields1 y))) true) (= (oeq (rec__allocator__m__t__allocated (us_split_fields1 x)) (rec__allocator__m__t__allocated (us_split_fields1 y))) true))) :pattern ((oeq2 x y)))))
(declare-fun model__ ((Array Int status)) us_rep1)
(declare-fun model____function_guard (us_rep1 (Array Int status)) Bool)
(declare-fun is_valid (us_rep1 (Array Int status)) Bool)
(declare-fun is_valid__function_guard (Bool us_rep1 (Array Int status)) Bool)
(assert (forall ((allocator__data (Array Int status))) (! (= (is_valid (model__ allocator__data) allocator__data) true) :pattern ((model__ allocator__data)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_370 Int) (temp___is_init_366 Bool) (temp___skip_constant_367 Bool) (temp___do_toplevel_368 Bool) (temp___do_typ_inv_369 Bool)) Bool (=> (or (= temp___is_init_366 true) (<= 0 1)) (in_range3 temp___expr_370)))
(define-fun dynamic_invariant3 ((temp___expr_317 Int) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool) (temp___do_typ_inv_316 Bool)) Bool (=> (or (= temp___is_init_313 true) (<= 1 3)) (in_range2 temp___expr_317)))
(assert true)
(assert (forall ((m us_rep1)) (forall ((allocator__data (Array Int status))) (! (= (= (is_valid m allocator__data) true) (and (and (forall ((e Int)) (=> (and (in_range4 e) (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) e) true)) (in_range2 e))) (forall ((e Int)) (=> (and (in_range4 e) (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) e) true)) (in_range2 e)))) (forall ((r Int)) (=> (and (<= 1 r) (<= r 3)) (ite (= (to_rep (select allocator__data r)) 0) (and (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) r) true) (not (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) r) true))) (and (not (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) r) true)) (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) r) true))))))) :pattern ((is_valid m allocator__data))))))
(assert (forall ((s us_rep)) (forall ((e Int)) (! (=> (dynamic_invariant1 e true true true true) (=> (= e 0) (not (= (mem s e) true)))) :pattern ((mem s e))))))
(assert true)
(assert (forall ((s1 us_rep) (s2 us_rep)) (! (= (= (oeq s1 s2) true) (and (forall ((e Int)) (=> (and (in_range4 e) (= (mem s1 e) true)) (= (mem s2 e) true))) (forall ((e Int)) (=> (and (in_range4 e) (= (mem s2 e) true)) (= (mem s1 e) true))))) :pattern ((oeq s1 s2)))))
(assert true)
(declare-const res Int)
(declare-const data (Array Int status))
(declare-const r Int)
(declare-const temp___412 Int)
(declare-const temp___413 Int)
(declare-const temp___409 Int)
(declare-const temp___410 Int)
(declare-const temp___407 (Array Int status))
(declare-const temp___411 (Array Int status))
(declare-const o status)
(declare-const o1 (Array Int status))
(declare-const o2 status)
(declare-const o3 (Array Int status))
(declare-const res1 Int)
(declare-const data1 (Array Int status))
(declare-const result Int)
(declare-const r1 Int)
(declare-const result1 (Array Int status))
(declare-const data2 (Array Int status))
(declare-const result2 Int)
(declare-const res2 Int)
(declare-const res3 Int)
(declare-const data3 (Array Int status))
(declare-const r2 Int)
(declare-const result3 Int)
(declare-const r3 Int)
(declare-const result4 (Array Int status))
(declare-const data4 (Array Int status))
(declare-const result5 Int)
(declare-const res4 Int)
(declare-const res5 Int)
(declare-const data5 (Array Int status))
(declare-const r4 Int)
(declare-const res6 Int)
(declare-const data6 (Array Int status))
(declare-const r5 Int)
(declare-const res7 Int)
(declare-const data7 (Array Int status))
(declare-const r6 Int)
(declare-const res8 Int)
(declare-const data8 (Array Int status))
(declare-const r7 Int)
(declare-const res9 Int)
(declare-const data9 (Array Int status))
(declare-const r8 Int)
(declare-const res10 Int)
(declare-const data10 (Array Int status))
(declare-const r9 Int)
(declare-const result6 int__ref)
(declare-const res11 Int)
(declare-const res12 int__ref)
(declare-const data11 map__ref)
(declare-const r10 int__ref)
(declare-const res13 Int)
(declare-const data12 (Array Int status))
(declare-const r11 Int)
(declare-const res14 int__ref)
(declare-const data13 map__ref)
(declare-const r12 int__ref)
(declare-const res15 Int)
(declare-const data14 (Array Int status))
(declare-const r13 Int)
(define-fun r14 () int__ref (mk_int__ref r8))
(define-fun data15 () map__ref (mk_map__ref data9))
(define-fun res16 () int__ref (mk_int__ref res9))
(define-fun result7 () int__ref (mk_int__ref result))
(define-fun r15 () int__ref (mk_int__ref r))
(assert (=> (<= 0 3) (in_range1 res)))
(assert (or (and (and (and (= r10 (mk_int__ref r4)) (and (= data11 (mk_map__ref data5)) (= res12 (mk_int__ref res5)))) (and (= r11 r5) (and (= data12 data6) (= res13 res6)))) (and (= temp___412 1) (and (= temp___413 3) (and (and (= result7 r15) (= r1 temp___412)) (and (and (<= temp___412 r1) (<= r1 temp___413)) (and (= temp___409 res) (and (= temp___410 r1) (and (= temp___407 data) (and (= temp___411 data) (or (and (and (and (= r1 r4) (and (= data2 data5) (= res2 res5))) (and (= r5 r1) (and (= data6 data2) (= res6 res2)))) (and (= (to_rep (select data r1)) 0) (and (and (and (= (to_rep o) 1) (= o1 (store data r1 o))) (and (= result1 data) (= data2 o1))) (and (= result2 res) (= res2 r1))))) (and (and (not (= (to_rep (select data r1)) 0)) (and (and (= data2 data) (= res2 res)) (and (= data2 data1) (= res2 res1)))) (and (and (and (= r3 r4) (and (= data4 data5) (= res4 res5))) (and (= r5 r3) (and (= data6 data4) (= res6 res4)))) (and (and (= (bool_eq data3 1 3 temp___411 1 3) true) (forall ((rr Int)) (=> (and (<= 1 rr) (<= rr r2)) (= (to_rep (select data3 rr)) 1)))) (and (and (and (and (forall ((temp___408 Int)) (=> (and (<= 1 temp___408) (<= temp___408 3)) (=> (< r2 temp___408) (= (select data3 temp___408) (select temp___407 temp___408))))) (=> (<= 0 3) (in_range1 res3))) (=> (<= 1 3) (in_range2 r2))) (and (<= 1 r2) (<= r2 3))) (and (not (= r2 temp___413)) (and (and (= r2 result3) (= r3 (+ r2 1))) (and (= (to_rep (select data3 r3)) 0) (and (and (and (= (to_rep o2) 1) (= o3 (store data3 r3 o2))) (and (= result4 data3) (= data4 o3))) (and (= result5 res3) (= res4 r3)))))))))))))))))))) (and (and (and (= result7 r15) (= r1 1)) (ite (and (<= 1 r1) (<= r1 3)) (and (and (and (= temp___409 res) (and (= temp___410 r1) (and (= temp___407 data) (and (= temp___411 data) (and (and (not (= (to_rep (select data r1)) 0)) (and (and (= data2 data) (= res2 res)) (and (= data2 data1) (= res2 res1)))) (and (and (= (bool_eq data3 1 3 temp___411 1 3) true) (forall ((rr Int)) (=> (and (<= 1 rr) (<= rr r2)) (= (to_rep (select data3 rr)) 1)))) (and (and (and (and (forall ((temp___408 Int)) (=> (and (<= 1 temp___408) (<= temp___408 3)) (=> (< r2 temp___408) (= (select data3 temp___408) (select temp___407 temp___408))))) (=> (<= 0 3) (in_range1 res3))) (=> (<= 1 3) (in_range2 r2))) (and (<= 1 r2) (<= r2 3))) (= r2 3)))))))) (and (and (= r2 r6) (and (= data3 data7) (= res3 res7))) (and (= r7 r2) (and (= data8 data3) (= res8 res3))))) (and (and (= r14 (mk_int__ref r6)) (and (= data15 (mk_map__ref data7)) (= res16 (mk_int__ref res7)))) (and (= r9 r7) (and (= data10 data8) (= res10 res8))))) (and (and (= r1 r8) (and (= data15 (mk_map__ref data)) (= res16 (mk_int__ref res)))) (and (= r9 r1) (and (= data10 data1) (= res10 res1)))))) (and (and (and (= r10 r14) (and (= data11 data15) (= res12 (mk_int__ref res11)))) (and (= r11 r9) (and (= data12 data10) (= res13 res11)))) (and (= result6 res16) (= res11 0))))))
(assert (= r12 r10))
(assert (= data13 data11))
(assert (= res14 res12))
(assert (= r13 r11))
(assert (= data14 data12))
(assert (= res15 res13))
(assert (= (is_empty (rec__allocator__m__t__available (us_split_fields1 (model__ data)))) true))
(assert (not (= (int__content res14) 0)))
(check-sat)
(exit)
