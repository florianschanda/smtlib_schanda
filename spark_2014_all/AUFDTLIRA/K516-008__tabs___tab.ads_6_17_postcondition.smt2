(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const b (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const threshold Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun prev (Int) Int)
(declare-fun prev__function_guard (Int Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 10)) (in_range2 temp___expr_159)))
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true true) (dynamic_invariant (prev x) true false true true)) :pattern ((prev x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true true) (= (prev x) (- x 1))) :pattern ((prev x)))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const a (Array Int integer))
(declare-const cur Int)
(declare-const i Int)
(declare-const temp___179 Int)
(declare-const temp___177 (Array Int integer))
(declare-const temp___176 Int)
(declare-const temp___175 Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 Int)
(declare-const o3 (Array Int integer))
(declare-const a1 (Array Int integer))
(declare-const result Int)
(declare-const cur1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const a2 (Array Int integer))
(declare-const cur2 Int)
(declare-const i2 Int)
(declare-const result2 Int)
(declare-const cur3 Int)
(declare-const result3 (Array Int integer))
(declare-const a3 (Array Int integer))
(declare-const a4 (Array Int integer))
(declare-const cur4 Int)
(declare-const i3 Int)
(declare-const a5 (Array Int integer))
(declare-const cur5 Int)
(declare-const i4 Int)
(declare-const a6 (Array Int integer))
(declare-const cur6 Int)
(declare-const i5 Int)
(declare-const a7 (Array Int integer))
(declare-const cur7 Int)
(declare-const i6 Int)
(declare-const a8 (Array Int integer))
(declare-const cur8 Int)
(declare-const i7 Int)
(declare-const a9 (Array Int integer))
(declare-const cur9 Int)
(declare-const i8 Int)
(define-fun a10 () map__ref (mk_map__ref a6))
(assert (in_range1 threshold))
(assert (= (mk_int__ref result) (mk_int__ref cur)))
(assert (= cur1 0))
(assert (in_range1 cur1))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___179 cur1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___177 a)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___176 cur1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___175 i1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (and (<= temp___179 cur2) (<= cur2 (prev i2)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (forall ((j Int)) (=> (and (<= 1 j) (<= j (prev i2))) (=> (< threshold (to_rep (select b j))) (exists ((k Int)) (and (and (<= 1 k) (<= k cur2)) (= (to_rep (select a2 k)) (to_rep (select b j))))))))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (and (and (=> (<= 1 10) (in_range2 i2)) (=> (<= (- 2147483648) 2147483647) (in_range1 cur2))) (and (<= 1 i2) (<= i2 10)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (and (= o (+ cur2 1)) (in_range1 (+ cur2 1))))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= cur2 result2))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= cur3 o))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= (to_rep o1) (to_rep (select b i2))))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (and (<= 1 cur3) (<= cur3 10)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= o2 cur3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= o3 (store a2 o2 o1)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= a2 result3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (< threshold (to_rep (select b i2))) (= a3 o3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (not (< threshold (to_rep (select b i2)))) (= cur3 cur2))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (=> (not (< threshold (to_rep (select b i2)))) (= a3 a2))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 10)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= cur3 cur4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= a3 a4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= cur5 cur3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= a5 a3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref cur6) (mk_int__ref cur4))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= a10 (mk_map__ref a4))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= cur7 cur5)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= a7 a5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= cur1 cur6)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= a10 (mk_map__ref a))))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= cur7 cur1)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= a7 a1)))
(assert (= i7 i5))
(assert (= cur8 cur6))
(assert (= (mk_map__ref a8) a10))
(assert (= i8 i6))
(assert (= cur9 cur7))
(assert (= a9 a7))
(declare-const j Int)
(assert (<= 1 j))
(assert (<= j 10))
(assert (< threshold (to_rep (select b j))))
(assert (not (exists ((k Int)) (and (and (<= 1 k) (<= k 10)) (= (to_rep (select a8 k)) (to_rep (select b j)))))))
(check-sat)
(exit)
