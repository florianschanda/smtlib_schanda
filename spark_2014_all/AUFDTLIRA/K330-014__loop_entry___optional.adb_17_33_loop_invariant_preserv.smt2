(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep2 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(declare-fun sum_of (Int) Int)
(declare-fun sum_of__function_guard (Int Int) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_164 Int)) (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last)) (= (to_rep2 (select a temp___idx_164)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_164))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_164 Int)) (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last)) (= (to_rep2 (select a temp___idx_164)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_164)))))))))))
(declare-sort map1 0)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 map1)))))
(declare-fun get (map1 Int Int) natural)
(declare-fun set (map1 Int Int natural) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a natural)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a natural)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide2 (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide2 a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide2 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_173 Int) (temp___idx_174 Int)) (=> (and (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (and (<= a__first_2 temp___idx_174) (<= temp___idx_174 a__last_2))) (= (to_rep2 (get a temp___idx_173 temp___idx_174)) (to_rep2 (get b (+ (- b__first a__first) temp___idx_173) (+ (- b__first_2 a__first_2) temp___idx_174))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_173 Int) (temp___idx_174 Int)) (=> (and (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (and (<= a__first_2 temp___idx_174) (<= temp___idx_174 a__last_2))) (= (to_rep2 (get a temp___idx_173 temp___idx_174)) (to_rep2 (get b (+ (- b__first a__first) temp___idx_173) (+ (- b__first_2 a__first_2) temp___idx_174)))))))))))
(declare-sort tTtaSP1 0)
(declare-fun tTtaSP1qtint (tTtaSP1) Int)
(assert (forall ((i tTtaSP1)) (and (<= 1 (tTtaSP1qtint i)) (<= (tTtaSP1qtint i) 5))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (tTtaSP1 tTtaSP1) Bool)
(declare-const dummy5 tTtaSP1)
(declare-datatypes () ((tTtaSP1__ref (mk_tTtaSP1__ref (tTtaSP1__content tTtaSP1)))))
(define-fun tTtaSP1__ref___projection ((a tTtaSP1__ref)) tTtaSP1 (tTtaSP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t6b 0)
(declare-fun t6bqtint (t6b) Int)
(assert (forall ((i t6b)) (and (<= 1 (t6bqtint i)) (<= (t6bqtint i) 5))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (t6b t6b) Bool)
(declare-const dummy6 t6b)
(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content t6b)))))
(define-fun t6b__ref___projection ((a t6b__ref)) t6b (t6b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tTtaSP11 0)
(declare-fun tTtaSP1qtint1 (tTtaSP11) Int)
(assert (forall ((i tTtaSP11)) (and (<= 1 (tTtaSP1qtint1 i)) (<= (tTtaSP1qtint1 i) 3))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (tTtaSP11 tTtaSP11) Bool)
(declare-const dummy7 tTtaSP11)
(declare-datatypes () ((tTtaSP1__ref1 (mk_tTtaSP1__ref1 (tTtaSP1__content1 tTtaSP11)))))
(define-fun tTtaSP1__ref___2__projection ((a tTtaSP1__ref1)) tTtaSP11 (tTtaSP1__content1 a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort t11b 0)
(declare-fun t11bqtint (t11b) Int)
(assert (forall ((i t11b)) (and (<= 1 (t11bqtint i)) (<= (t11bqtint i) 2))))
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (t11b t11b) Bool)
(declare-const dummy8 t11b)
(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___String_Literal_607 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_607 us_void_param) 1)) 79) (= (to_rep (select (temp___String_Literal_607 us_void_param) 2)) 112)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 3)) 116)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 4)) 105)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 5)) 111)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 6)) 110)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 7)) 97)) (= (to_rep (select (temp___String_Literal_607 us_void_param) 8)) 108)) :pattern ((temp___String_Literal_607 us_void_param)))))
(declare-fun optional__B_1__ta__aggregate_def (Int) (Array Int natural))
(declare-fun temp___String_Literal_624 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_624 us_void_param) 1)) 69) (= (to_rep (select (temp___String_Literal_624 us_void_param) 2)) 82)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 3)) 82)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 4)) 79)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 5)) 82)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 6)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 7)) 50)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 8)) 58)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 10)) 115)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 11)) 104)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 12)) 111)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 13)) 117)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 14)) 108)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 15)) 100)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 16)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 17)) 110)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 18)) 111)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 19)) 116)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 20)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 21)) 103)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 22)) 101)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 23)) 116)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 24)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 25)) 104)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 26)) 101)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 27)) 114)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 28)) 101)) :pattern ((temp___String_Literal_624 us_void_param)))))
(declare-fun optional__B_3__ta__aggregate_def (Int) map1)
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 0))
(assert (forall ((temp___615 Int)) (=> (dynamic_invariant temp___615 true true true true) (forall ((temp___616 Int)) (= (select (optional__B_1__ta__aggregate_def temp___615) temp___616) rliteral)))))
(assert (forall ((temp___626 Int)) (=> (dynamic_invariant temp___626 true true true true) (forall ((temp___627 Int) (temp___628 Int)) (= (get (optional__B_3__ta__aggregate_def temp___626) temp___627 temp___628) rliteral)))))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 1))
(declare-const ta (Array Int natural))
(declare-const index Int)
(declare-const result (Array Int natural))
(declare-const ta1 (Array Int natural))
(declare-const result1 Int)
(declare-const index1 Int)
(declare-const ta2 (Array Int natural))
(declare-const index2 Int)
(declare-const result2 (Array Int natural))
(declare-const ta3 (Array Int natural))
(declare-const result3 Int)
(declare-const index3 Int)
(assert (= (mk_map__ref1 result) (mk_map__ref1 ta)))
(assert (= ta1 (optional__B_1__ta__aggregate_def 0)))
(assert (= (mk_int__ref result1) (mk_int__ref index)))
(assert (= index1 1))
(assert (<= 1 index1))
(assert (<= index1 5))
(assert (= (to_rep2 (select ta1 index2)) 0))
(assert (and (and (forall ((temp___611 Int)) (=> (and (<= 1 temp___611) (<= temp___611 5)) (=> (or (< 5 temp___611) (or (< temp___611 1) (<= index2 temp___611))) (= (select ta2 temp___611) (select ta1 temp___611))))) (=> (<= 1 5) (in_range6 index2))) (and (<= 1 index2) (<= index2 5))))
(assert (= ta2 result2))
(assert (= ta3 (store ta2 index2 rliteral1)))
(assert (not (= index2 5)))
(assert (= result3 index2))
(assert (= index3 (+ index2 1)))
(assert (not (= (to_rep2 (select ta1 index3)) 0)))
(check-sat)
(exit)
