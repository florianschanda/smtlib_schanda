(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy1 (Array Int natural))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__declare_iterable__container__content (Array Int natural))))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int natural) (rec__declare_iterable__container__content a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__declare_iterable__container__content (us_split_fields1 a)) 1 100 (rec__declare_iterable__container__content (us_split_fields1 b)) 1 100) true) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const declare_iterable__container__content__first__bit Int)
(declare-const declare_iterable__container__content__last__bit Int)
(declare-const declare_iterable__container__content__position Int)
(assert (<= 0 declare_iterable__container__content__first__bit))
(assert (< declare_iterable__container__content__first__bit declare_iterable__container__content__last__bit))
(assert (<= 0 declare_iterable__container__content__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((container__ref (mk_container__ref (container__content us_rep)))))
(define-fun container__ref___projection ((a container__ref)) us_rep (container__content a))
(declare-fun from_nat_array ((Array Int natural)) us_rep)
(declare-fun from_nat_array__function_guard (us_rep (Array Int natural)) Bool)
(assert true)
(assert (forall ((a (Array Int natural))) (! (= (from_nat_array a) (mk___rep (mk___split_fields a))) :pattern ((from_nat_array a)))))
(declare-fun to_nat_array (us_rep) (Array Int natural))
(declare-fun to_nat_array__function_guard ((Array Int natural) us_rep) Bool)
(assert true)
(assert (forall ((x us_rep)) (! (= (to_nat_array x) (rec__declare_iterable__container__content (us_split_fields1 x))) :pattern ((to_nat_array x)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r4b (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r6b (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun for_loop_array__a__aggregate_def (Int) (Array Int natural))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 0))
(assert (forall ((temp___251 Int)) (=> (dynamic_invariant temp___251 true true true true) (forall ((temp___252 Int)) (= (select (for_loop_array__a__aggregate_def temp___251) temp___252) rliteral)))))
(declare-const a (Array Int natural))
(declare-const c3b Int)
(declare-const o (Array Int natural))
(declare-const for_loop_array__L_1__R4b__assume (Array Int natural))
(declare-const o1 (Array Int natural))
(declare-const for_loop_array__L_1__R6b__assume (Array Int natural))
(declare-const result (Array Int natural))
(declare-const a1 (Array Int natural))
(declare-const result1 Int)
(declare-const c3b1 Int)
(declare-const c3b2 Int)
(define-fun o2 () us_rep (mk___rep (mk___split_fields o1)))
(define-fun o3 () us_rep (mk___rep (mk___split_fields o)))
(assert (= result a))
(assert (= a1 (for_loop_array__a__aggregate_def 0)))
(assert (and (= o3 (from_nat_array a1)) (= a1 o)))
(assert (and (= for_loop_array__L_1__R4b__assume (to_nat_array o3)) (= for_loop_array__L_1__R4b__assume o)))
(assert (= for_loop_array__L_1__R4b__assume r4b))
(assert (= result1 c3b))
(assert (= c3b1 1))
(assert (<= 1 c3b1))
(assert (<= c3b1 100))
(assert (and (<= 1 c3b2) (<= c3b2 100)))
(assert (and (= o2 (from_nat_array a1)) (= a1 o1)))
(assert (and (= for_loop_array__L_1__R6b__assume (to_nat_array o2)) (= for_loop_array__L_1__R6b__assume o1)))
(assert (= for_loop_array__L_1__R6b__assume r6b))
(assert (not (= (to_rep (select r6b c3b2)) 0)))
(check-sat)
(exit)
