(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 3))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-sort map1 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) (Array Int integer))
(declare-fun set (map1 Int Int (Array Int integer)) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a (Array Int integer))) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a (Array Int integer))) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide1 (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide1 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq1 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2))) (= (bool_eq (get a temp___idx_155 temp___idx_156) 1 3 (get b (+ (- b__first a__first) temp___idx_155) (+ (- b__first_2 a__first_2) temp___idx_156)) 1 3) true)))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq1 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2))) (= (bool_eq (get a temp___idx_155 temp___idx_156) 1 3 (get b (+ (- b__first a__first) temp___idx_155) (+ (- b__first_2 a__first_2) temp___idx_156)) 1 3) true))))))))
(declare-const dummy3 map1)
(declare-const value__size1 Int)
(declare-fun object__size1 (map1) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 (map1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (map1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a map1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a map1)) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a map1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (map1 map1) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int map1))))))
(declare-fun slide2 ((Array Int map1) Int Int) (Array Int map1))
(assert (forall ((a (Array Int map1))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int map1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int map1)) (a__first Int) (a__last Int) (b (Array Int map1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq1 (select a temp___idx_157) 1 3 1 3 (select b (+ (- b__first a__first) temp___idx_157)) 1 3 1 3) true)))) true false))
(assert (forall ((a (Array Int map1)) (b (Array Int map1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq1 (select a temp___idx_157) 1 3 1 3 (select b (+ (- b__first a__first) temp___idx_157)) 1 3 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y (Array Int map1))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq4 (integer integer) Bool)
(declare-const dummy4 integer)
(declare-datatypes () ((t12b__ref (mk_t12b__ref (t12b__content integer)))))
(define-fun t12b__ref___projection ((a t12b__ref)) integer (t12b__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int map1)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int map1) (elts a))
(define-fun of_array ((a (Array Int map1)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int map1)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int map1)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int map1)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int map1))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int map1))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int map1))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t) (y1 us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y1) (to_rep (first (rt y1))) (to_rep (last (rt y1)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content us_t)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_t (t13b__content a))
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content integer)))))
(define-fun t14b__ref___projection ((a t14b__ref)) integer (t14b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int map1)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int map1) (elts1 a))
(define-fun of_array1 ((a (Array Int map1)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int map1)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int map1)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int map1)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int map1))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int map1))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int map1))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq4 ((x us_t1) (y1 us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y1) (to_rep (first2 (rt1 y1))) (to_rep (last2 (rt1 y1)))))
(declare-fun user_eq7 (us_t1 us_t1) Bool)
(declare-const dummy7 us_t1)
(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))
(declare-fun p_bad__x__aggregate_def (map1) (Array Int map1))
(declare-fun temp_____aggregate_def_253 ((Array Int integer)) map1)
(declare-fun temp_____aggregate_def_258 (Int) (Array Int integer))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 1 3)) (in_range1 temp___expr_204)))
(assert (forall ((temp___251 map1)) (forall ((temp___252 Int)) (= (select (p_bad__x__aggregate_def temp___251) temp___252) temp___251))))
(assert (forall ((temp___255 (Array Int integer))) (forall ((temp___256 Int) (temp___257 Int)) (= (get (temp_____aggregate_def_253 temp___255) temp___256 temp___257) temp___255))))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(assert (forall ((temp___260 Int)) (=> (dynamic_invariant temp___260 true true true true) (forall ((temp___261 Int)) (= (select (temp_____aggregate_def_258 temp___260) temp___261) rliteral)))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const x (Array Int map1))
(declare-const i3 Int)
(declare-const i21 Int)
(declare-const i22 Int)
(declare-const i1 Int)
(declare-const result (Array Int map1))
(declare-const x1 (Array Int map1))
(declare-const result1 Int)
(declare-const i31 Int)
(declare-const result2 Int)
(declare-const i211 Int)
(declare-const result3 Int)
(declare-const i221 Int)
(declare-const result4 Int)
(declare-const i11 Int)
(declare-const result5 (Array Int map1))
(declare-const x2 (Array Int map1))
(declare-const result6 Int)
(declare-const i12 Int)
(declare-const result7 (Array Int map1))
(declare-const x3 (Array Int map1))
(declare-const result8 Int)
(declare-const i13 Int)
(declare-const result9 (Array Int map1))
(declare-const x4 (Array Int map1))
(declare-const result10 Int)
(declare-const i222 Int)
(declare-const result11 Int)
(declare-const i14 Int)
(declare-const result12 (Array Int map1))
(declare-const x5 (Array Int map1))
(declare-const result13 int__ref)
(declare-const i15 Int)
(declare-const result14 map__ref2)
(declare-const x6 (Array Int map1))
(declare-const result15 int__ref)
(declare-const i16 Int)
(declare-const result16 map__ref2)
(declare-const x7 (Array Int map1))
(declare-const result17 int__ref)
(declare-const i223 Int)
(declare-const result18 int__ref)
(declare-const i17 Int)
(declare-const result19 map__ref2)
(declare-const x8 (Array Int map1))
(declare-const result20 int__ref)
(declare-const i18 Int)
(declare-const result21 map__ref2)
(declare-const x9 (Array Int map1))
(declare-const result22 int__ref)
(declare-const i19 Int)
(declare-const result23 map__ref2)
(declare-const x10 (Array Int map1))
(declare-const result24 int__ref)
(declare-const i212 Int)
(declare-const result25 int__ref)
(declare-const i224 Int)
(declare-const result26 int__ref)
(declare-const i110 Int)
(declare-const result27 map__ref2)
(declare-const x11 (Array Int map1))
(declare-const result28 int__ref)
(declare-const i111 Int)
(declare-const result29 map__ref2)
(declare-const x12 (Array Int map1))
(declare-const result30 int__ref)
(declare-const i112 Int)
(declare-const result31 map__ref2)
(declare-const x13 (Array Int map1))
(declare-const result32 int__ref)
(declare-const i225 Int)
(declare-const result33 int__ref)
(declare-const i113 Int)
(declare-const result34 map__ref2)
(declare-const x14 (Array Int map1))
(declare-const result35 int__ref)
(declare-const i114 Int)
(declare-const result36 map__ref2)
(declare-const x15 (Array Int map1))
(declare-const result37 int__ref)
(declare-const i115 Int)
(declare-const result38 map__ref2)
(declare-const x16 (Array Int map1))
(declare-const result39 int__ref)
(declare-const i226 Int)
(declare-const result40 int__ref)
(declare-const i116 Int)
(declare-const result41 map__ref2)
(declare-const x17 (Array Int map1))
(declare-const result42 int__ref)
(declare-const i117 Int)
(declare-const result43 map__ref2)
(declare-const x18 (Array Int map1))
(declare-const result44 int__ref)
(declare-const i118 Int)
(declare-const result45 map__ref2)
(declare-const x19 (Array Int map1))
(declare-const result46 int__ref)
(declare-const i213 Int)
(declare-const result47 int__ref)
(declare-const i227 Int)
(declare-const result48 int__ref)
(declare-const i119 Int)
(declare-const result49 map__ref2)
(declare-const x20 (Array Int map1))
(declare-const result50 int__ref)
(declare-const i120 Int)
(declare-const result51 map__ref2)
(declare-const x21 (Array Int map1))
(declare-const result52 int__ref)
(declare-const i121 Int)
(declare-const result53 map__ref2)
(declare-const x22 (Array Int map1))
(declare-const result54 int__ref)
(declare-const i228 Int)
(declare-const result55 int__ref)
(declare-const i122 Int)
(declare-const result56 map__ref2)
(declare-const x23 (Array Int map1))
(declare-const result57 int__ref)
(declare-const i123 Int)
(declare-const result58 map__ref2)
(declare-const x24 (Array Int map1))
(declare-const result59 int__ref)
(declare-const i124 Int)
(declare-const result60 map__ref2)
(declare-const x25 (Array Int map1))
(declare-const result61 int__ref)
(declare-const i229 Int)
(declare-const result62 int__ref)
(declare-const i125 Int)
(declare-const result63 map__ref2)
(declare-const x26 (Array Int map1))
(declare-const result64 int__ref)
(declare-const i126 Int)
(declare-const result65 map__ref2)
(declare-const x27 (Array Int map1))
(declare-const result66 int__ref)
(declare-const i127 Int)
(declare-const result67 map__ref2)
(declare-const x28 (Array Int map1))
(declare-const result68 int__ref)
(declare-const i32 Int)
(declare-const result69 int__ref)
(declare-const i214 Int)
(declare-const result70 int__ref)
(declare-const i2210 Int)
(declare-const result71 int__ref)
(declare-const i128 Int)
(declare-const result72 map__ref2)
(declare-const x29 (Array Int map1))
(declare-const result73 int__ref)
(declare-const i129 Int)
(declare-const result74 map__ref2)
(declare-const x30 (Array Int map1))
(declare-const result75 int__ref)
(declare-const i130 Int)
(declare-const result76 map__ref2)
(declare-const x31 (Array Int map1))
(declare-const result77 int__ref)
(declare-const i2211 Int)
(declare-const result78 int__ref)
(declare-const i131 Int)
(declare-const result79 map__ref2)
(declare-const x32 (Array Int map1))
(declare-const result80 int__ref)
(declare-const i132 Int)
(declare-const result81 map__ref2)
(declare-const x33 (Array Int map1))
(declare-const result82 int__ref)
(declare-const i133 Int)
(declare-const result83 map__ref2)
(declare-const x34 (Array Int map1))
(declare-const result84 int__ref)
(declare-const i2212 Int)
(declare-const result85 int__ref)
(declare-const i134 Int)
(declare-const result86 map__ref2)
(declare-const x35 (Array Int map1))
(declare-const result87 int__ref)
(declare-const i135 Int)
(declare-const result88 map__ref2)
(declare-const x36 (Array Int map1))
(declare-const result89 int__ref)
(declare-const i136 Int)
(declare-const result90 map__ref2)
(declare-const x37 (Array Int map1))
(declare-const result91 int__ref)
(declare-const i215 Int)
(declare-const result92 int__ref)
(declare-const i2213 Int)
(declare-const result93 int__ref)
(declare-const i137 Int)
(declare-const result94 map__ref2)
(declare-const x38 (Array Int map1))
(declare-const result95 int__ref)
(declare-const i138 Int)
(declare-const result96 map__ref2)
(declare-const x39 (Array Int map1))
(declare-const result97 int__ref)
(declare-const i139 Int)
(declare-const result98 map__ref2)
(declare-const x40 (Array Int map1))
(declare-const result99 int__ref)
(declare-const i2214 Int)
(declare-const result100 int__ref)
(declare-const i140 Int)
(declare-const result101 map__ref2)
(declare-const x41 (Array Int map1))
(declare-const result102 int__ref)
(declare-const i141 Int)
(declare-const result103 map__ref2)
(declare-const x42 (Array Int map1))
(declare-const result104 int__ref)
(declare-const i142 Int)
(declare-const result105 map__ref2)
(declare-const x43 (Array Int map1))
(declare-const result106 int__ref)
(declare-const i2215 Int)
(declare-const result107 int__ref)
(declare-const i143 Int)
(declare-const result108 map__ref2)
(declare-const x44 (Array Int map1))
(declare-const result109 int__ref)
(declare-const i144 Int)
(declare-const result110 map__ref2)
(declare-const x45 (Array Int map1))
(declare-const result111 int__ref)
(declare-const i145 Int)
(declare-const result112 map__ref2)
(declare-const x46 (Array Int map1))
(declare-const result113 int__ref)
(declare-const i216 Int)
(declare-const result114 int__ref)
(declare-const i2216 Int)
(declare-const result115 int__ref)
(declare-const i146 Int)
(declare-const result116 map__ref2)
(declare-const x47 (Array Int map1))
(declare-const result117 int__ref)
(declare-const i147 Int)
(declare-const result118 map__ref2)
(declare-const x48 (Array Int map1))
(declare-const result119 int__ref)
(declare-const i148 Int)
(declare-const result120 map__ref2)
(declare-const x49 (Array Int map1))
(declare-const result121 int__ref)
(declare-const i2217 Int)
(declare-const result122 int__ref)
(declare-const i149 Int)
(declare-const result123 map__ref2)
(declare-const x50 (Array Int map1))
(declare-const result124 int__ref)
(declare-const i150 Int)
(declare-const result125 map__ref2)
(declare-const x51 (Array Int map1))
(declare-const result126 int__ref)
(declare-const i151 Int)
(declare-const result127 map__ref2)
(declare-const x52 (Array Int map1))
(declare-const result128 int__ref)
(declare-const i2218 Int)
(declare-const result129 int__ref)
(declare-const i152 Int)
(declare-const result130 map__ref2)
(declare-const x53 (Array Int map1))
(declare-const result131 int__ref)
(declare-const i153 Int)
(declare-const result132 map__ref2)
(declare-const x54 (Array Int map1))
(declare-const result133 int__ref)
(declare-const i154 Int)
(declare-const result134 map__ref2)
(declare-const x55 (Array Int map1))
(assert (= result x))
(assert (= x1 (p_bad__x__aggregate_def (temp_____aggregate_def_253 (temp_____aggregate_def_258 0)))))
(assert (= x1 y))
(assert (= result1 i3))
(assert (= i31 1))
(assert (= result2 i21))
(assert (= i211 1))
(assert (= result3 i22))
(assert (= i221 1))
(assert (= result4 i1))
(assert (= i11 1))
(assert (= result5 x1))
(assert (= x2 (store x1 i31 (set (select x1 i31) i211 i221 (store (get (select x1 i31) i211 i221) i11 rliteral1)))))
(assert (= result6 i11))
(assert (= i12 2))
(assert (= result7 x2))
(assert (= x3 (store x2 i31 (set (select x2 i31) i211 i221 (store (get (select x2 i31) i211 i221) i12 rliteral1)))))
(assert (= result8 i12))
(assert (= i13 3))
(assert (= result9 x3))
(assert (= x4 (store x3 i31 (set (select x3 i31) i211 i221 (store (get (select x3 i31) i211 i221) i13 rliteral1)))))
(assert (= result10 i221))
(assert (= i222 2))
(assert (= result11 i13))
(assert (= i14 1))
(assert (= result12 x4))
(assert (= x5 (store x4 i31 (set (select x4 i31) i211 i222 (store (get (select x4 i31) i211 i222) i14 rliteral1)))))
(assert (= result13 (mk_int__ref i14)))
(assert (= i15 2))
(assert (= result14 (mk_map__ref2 x5)))
(assert (= x6 (store x5 i31 (set (select x5 i31) i211 i222 (store (get (select x5 i31) i211 i222) i15 rliteral1)))))
(assert (= result15 (mk_int__ref i15)))
(assert (= i16 3))
(assert (= result16 (mk_map__ref2 x6)))
(assert (= x7 (store x6 i31 (set (select x6 i31) i211 i222 (store (get (select x6 i31) i211 i222) i16 rliteral1)))))
(assert (= result17 (mk_int__ref i222)))
(assert (= i223 3))
(assert (= result18 (mk_int__ref i16)))
(assert (= i17 1))
(assert (= result19 (mk_map__ref2 x7)))
(assert (= x8 (store x7 i31 (set (select x7 i31) i211 i223 (store (get (select x7 i31) i211 i223) i17 rliteral1)))))
(assert (= result20 (mk_int__ref i17)))
(assert (= i18 2))
(assert (= result21 (mk_map__ref2 x8)))
(assert (= x9 (store x8 i31 (set (select x8 i31) i211 i223 (store (get (select x8 i31) i211 i223) i18 rliteral1)))))
(assert (= result22 (mk_int__ref i18)))
(assert (= i19 3))
(assert (= result23 (mk_map__ref2 x9)))
(assert (= x10 (store x9 i31 (set (select x9 i31) i211 i223 (store (get (select x9 i31) i211 i223) i19 rliteral1)))))
(assert (= result24 (mk_int__ref i211)))
(assert (= i212 2))
(assert (= result25 (mk_int__ref i223)))
(assert (= i224 1))
(assert (= result26 (mk_int__ref i19)))
(assert (= i110 1))
(assert (= result27 (mk_map__ref2 x10)))
(assert (= x11 (store x10 i31 (set (select x10 i31) i212 i224 (store (get (select x10 i31) i212 i224) i110 rliteral1)))))
(assert (= result28 (mk_int__ref i110)))
(assert (= i111 2))
(assert (= result29 (mk_map__ref2 x11)))
(assert (= x12 (store x11 i31 (set (select x11 i31) i212 i224 (store (get (select x11 i31) i212 i224) i111 rliteral1)))))
(assert (= result30 (mk_int__ref i111)))
(assert (= i112 3))
(assert (= result31 (mk_map__ref2 x12)))
(assert (= x13 (store x12 i31 (set (select x12 i31) i212 i224 (store (get (select x12 i31) i212 i224) i112 rliteral1)))))
(assert (= result32 (mk_int__ref i224)))
(assert (= i225 2))
(assert (= result33 (mk_int__ref i112)))
(assert (= i113 1))
(assert (= result34 (mk_map__ref2 x13)))
(assert (= x14 (store x13 i31 (set (select x13 i31) i212 i225 (store (get (select x13 i31) i212 i225) i113 rliteral1)))))
(assert (= result35 (mk_int__ref i113)))
(assert (= i114 2))
(assert (= result36 (mk_map__ref2 x14)))
(assert (= x15 (store x14 i31 (set (select x14 i31) i212 i225 (store (get (select x14 i31) i212 i225) i114 rliteral1)))))
(assert (= result37 (mk_int__ref i114)))
(assert (= i115 3))
(assert (= result38 (mk_map__ref2 x15)))
(assert (= x16 (store x15 i31 (set (select x15 i31) i212 i225 (store (get (select x15 i31) i212 i225) i115 rliteral1)))))
(assert (= result39 (mk_int__ref i225)))
(assert (= i226 3))
(assert (= result40 (mk_int__ref i115)))
(assert (= i116 1))
(assert (= result41 (mk_map__ref2 x16)))
(assert (= x17 (store x16 i31 (set (select x16 i31) i212 i226 (store (get (select x16 i31) i212 i226) i116 rliteral1)))))
(assert (= result42 (mk_int__ref i116)))
(assert (= i117 2))
(assert (= result43 (mk_map__ref2 x17)))
(assert (= x18 (store x17 i31 (set (select x17 i31) i212 i226 (store (get (select x17 i31) i212 i226) i117 rliteral1)))))
(assert (= result44 (mk_int__ref i117)))
(assert (= i118 3))
(assert (= result45 (mk_map__ref2 x18)))
(assert (= x19 (store x18 i31 (set (select x18 i31) i212 i226 (store (get (select x18 i31) i212 i226) i118 rliteral1)))))
(assert (= result46 (mk_int__ref i212)))
(assert (= i213 3))
(assert (= result47 (mk_int__ref i226)))
(assert (= i227 1))
(assert (= result48 (mk_int__ref i118)))
(assert (= i119 1))
(assert (= result49 (mk_map__ref2 x19)))
(assert (= x20 (store x19 i31 (set (select x19 i31) i213 i227 (store (get (select x19 i31) i213 i227) i119 rliteral1)))))
(assert (= result50 (mk_int__ref i119)))
(assert (= i120 2))
(assert (= result51 (mk_map__ref2 x20)))
(assert (= x21 (store x20 i31 (set (select x20 i31) i213 i227 (store (get (select x20 i31) i213 i227) i120 rliteral1)))))
(assert (= result52 (mk_int__ref i120)))
(assert (= i121 3))
(assert (= result53 (mk_map__ref2 x21)))
(assert (= x22 (store x21 i31 (set (select x21 i31) i213 i227 (store (get (select x21 i31) i213 i227) i121 rliteral1)))))
(assert (= result54 (mk_int__ref i227)))
(assert (= i228 2))
(assert (= result55 (mk_int__ref i121)))
(assert (= i122 1))
(assert (= result56 (mk_map__ref2 x22)))
(assert (= x23 (store x22 i31 (set (select x22 i31) i213 i228 (store (get (select x22 i31) i213 i228) i122 rliteral1)))))
(assert (= result57 (mk_int__ref i122)))
(assert (= i123 2))
(assert (= result58 (mk_map__ref2 x23)))
(assert (= x24 (store x23 i31 (set (select x23 i31) i213 i228 (store (get (select x23 i31) i213 i228) i123 rliteral1)))))
(assert (= result59 (mk_int__ref i123)))
(assert (= i124 3))
(assert (= result60 (mk_map__ref2 x24)))
(assert (= x25 (store x24 i31 (set (select x24 i31) i213 i228 (store (get (select x24 i31) i213 i228) i124 rliteral1)))))
(assert (= result61 (mk_int__ref i228)))
(assert (= i229 3))
(assert (= result62 (mk_int__ref i124)))
(assert (= i125 1))
(assert (= result63 (mk_map__ref2 x25)))
(assert (= x26 (store x25 i31 (set (select x25 i31) i213 i229 (store (get (select x25 i31) i213 i229) i125 rliteral1)))))
(assert (= result64 (mk_int__ref i125)))
(assert (= i126 2))
(assert (= result65 (mk_map__ref2 x26)))
(assert (= x27 (store x26 i31 (set (select x26 i31) i213 i229 (store (get (select x26 i31) i213 i229) i126 rliteral1)))))
(assert (= result66 (mk_int__ref i126)))
(assert (= i127 3))
(assert (= result67 (mk_map__ref2 x27)))
(assert (= x28 (store x27 i31 (set (select x27 i31) i213 i229 (store (get (select x27 i31) i213 i229) i127 rliteral1)))))
(assert (= (bool_eq2 x28 (to_rep (first (mk i31 3))) (to_rep (last (mk i31 3))) y (to_rep (first2 (mk1 i31 3))) (to_rep (last2 (mk1 i31 3)))) true))
(assert (= result68 (mk_int__ref i31)))
(assert (= i32 2))
(assert (= result69 (mk_int__ref i213)))
(assert (= i214 1))
(assert (= result70 (mk_int__ref i229)))
(assert (= i2210 1))
(assert (= result71 (mk_int__ref i127)))
(assert (= i128 1))
(assert (= result72 (mk_map__ref2 x28)))
(assert (= x29 (store x28 i32 (set (select x28 i32) i214 i2210 (store (get (select x28 i32) i214 i2210) i128 rliteral1)))))
(assert (= result73 (mk_int__ref i128)))
(assert (= i129 2))
(assert (= result74 (mk_map__ref2 x29)))
(assert (= x30 (store x29 i32 (set (select x29 i32) i214 i2210 (store (get (select x29 i32) i214 i2210) i129 rliteral1)))))
(assert (= result75 (mk_int__ref i129)))
(assert (= i130 3))
(assert (= result76 (mk_map__ref2 x30)))
(assert (= x31 (store x30 i32 (set (select x30 i32) i214 i2210 (store (get (select x30 i32) i214 i2210) i130 rliteral1)))))
(assert (= result77 (mk_int__ref i2210)))
(assert (= i2211 2))
(assert (= result78 (mk_int__ref i130)))
(assert (= i131 1))
(assert (= result79 (mk_map__ref2 x31)))
(assert (= x32 (store x31 i32 (set (select x31 i32) i214 i2211 (store (get (select x31 i32) i214 i2211) i131 rliteral1)))))
(assert (= result80 (mk_int__ref i131)))
(assert (= i132 2))
(assert (= result81 (mk_map__ref2 x32)))
(assert (= x33 (store x32 i32 (set (select x32 i32) i214 i2211 (store (get (select x32 i32) i214 i2211) i132 rliteral1)))))
(assert (= result82 (mk_int__ref i132)))
(assert (= i133 3))
(assert (= result83 (mk_map__ref2 x33)))
(assert (= x34 (store x33 i32 (set (select x33 i32) i214 i2211 (store (get (select x33 i32) i214 i2211) i133 rliteral1)))))
(assert (= result84 (mk_int__ref i2211)))
(assert (= i2212 3))
(assert (= result85 (mk_int__ref i133)))
(assert (= i134 1))
(assert (= result86 (mk_map__ref2 x34)))
(assert (= x35 (store x34 i32 (set (select x34 i32) i214 i2212 (store (get (select x34 i32) i214 i2212) i134 rliteral1)))))
(assert (= result87 (mk_int__ref i134)))
(assert (= i135 2))
(assert (= result88 (mk_map__ref2 x35)))
(assert (= x36 (store x35 i32 (set (select x35 i32) i214 i2212 (store (get (select x35 i32) i214 i2212) i135 rliteral1)))))
(assert (= result89 (mk_int__ref i135)))
(assert (= i136 3))
(assert (= result90 (mk_map__ref2 x36)))
(assert (= x37 (store x36 i32 (set (select x36 i32) i214 i2212 (store (get (select x36 i32) i214 i2212) i136 rliteral1)))))
(assert (= result91 (mk_int__ref i214)))
(assert (= i215 2))
(assert (= result92 (mk_int__ref i2212)))
(assert (= i2213 1))
(assert (= result93 (mk_int__ref i136)))
(assert (= i137 1))
(assert (= result94 (mk_map__ref2 x37)))
(assert (= x38 (store x37 i32 (set (select x37 i32) i215 i2213 (store (get (select x37 i32) i215 i2213) i137 rliteral1)))))
(assert (= result95 (mk_int__ref i137)))
(assert (= i138 2))
(assert (= result96 (mk_map__ref2 x38)))
(assert (= x39 (store x38 i32 (set (select x38 i32) i215 i2213 (store (get (select x38 i32) i215 i2213) i138 rliteral1)))))
(assert (= result97 (mk_int__ref i138)))
(assert (= i139 3))
(assert (= result98 (mk_map__ref2 x39)))
(assert (= x40 (store x39 i32 (set (select x39 i32) i215 i2213 (store (get (select x39 i32) i215 i2213) i139 rliteral1)))))
(assert (= result99 (mk_int__ref i2213)))
(assert (= i2214 2))
(assert (= result100 (mk_int__ref i139)))
(assert (= i140 1))
(assert (= result101 (mk_map__ref2 x40)))
(assert (= x41 (store x40 i32 (set (select x40 i32) i215 i2214 (store (get (select x40 i32) i215 i2214) i140 rliteral1)))))
(assert (= result102 (mk_int__ref i140)))
(assert (= i141 2))
(assert (= result103 (mk_map__ref2 x41)))
(assert (= x42 (store x41 i32 (set (select x41 i32) i215 i2214 (store (get (select x41 i32) i215 i2214) i141 rliteral1)))))
(assert (= result104 (mk_int__ref i141)))
(assert (= i142 3))
(assert (= result105 (mk_map__ref2 x42)))
(assert (= x43 (store x42 i32 (set (select x42 i32) i215 i2214 (store (get (select x42 i32) i215 i2214) i142 rliteral1)))))
(assert (= result106 (mk_int__ref i2214)))
(assert (= i2215 3))
(assert (= result107 (mk_int__ref i142)))
(assert (= i143 1))
(assert (= result108 (mk_map__ref2 x43)))
(assert (= x44 (store x43 i32 (set (select x43 i32) i215 i2215 (store (get (select x43 i32) i215 i2215) i143 rliteral1)))))
(assert (= result109 (mk_int__ref i143)))
(assert (= i144 2))
(assert (= result110 (mk_map__ref2 x44)))
(assert (= x45 (store x44 i32 (set (select x44 i32) i215 i2215 (store (get (select x44 i32) i215 i2215) i144 rliteral1)))))
(assert (= result111 (mk_int__ref i144)))
(assert (= i145 3))
(assert (= result112 (mk_map__ref2 x45)))
(assert (= x46 (store x45 i32 (set (select x45 i32) i215 i2215 (store (get (select x45 i32) i215 i2215) i145 rliteral1)))))
(assert (= result113 (mk_int__ref i215)))
(assert (= i216 3))
(assert (= result114 (mk_int__ref i2215)))
(assert (= i2216 1))
(assert (= result115 (mk_int__ref i145)))
(assert (= i146 1))
(assert (= result116 (mk_map__ref2 x46)))
(assert (= x47 (store x46 i32 (set (select x46 i32) i216 i2216 (store (get (select x46 i32) i216 i2216) i146 rliteral1)))))
(assert (= result117 (mk_int__ref i146)))
(assert (= i147 2))
(assert (= result118 (mk_map__ref2 x47)))
(assert (= x48 (store x47 i32 (set (select x47 i32) i216 i2216 (store (get (select x47 i32) i216 i2216) i147 rliteral1)))))
(assert (= result119 (mk_int__ref i147)))
(assert (= i148 3))
(assert (= result120 (mk_map__ref2 x48)))
(assert (= x49 (store x48 i32 (set (select x48 i32) i216 i2216 (store (get (select x48 i32) i216 i2216) i148 rliteral1)))))
(assert (= result121 (mk_int__ref i2216)))
(assert (= i2217 2))
(assert (= result122 (mk_int__ref i148)))
(assert (= i149 1))
(assert (= result123 (mk_map__ref2 x49)))
(assert (= x50 (store x49 i32 (set (select x49 i32) i216 i2217 (store (get (select x49 i32) i216 i2217) i149 rliteral1)))))
(assert (= result124 (mk_int__ref i149)))
(assert (= i150 2))
(assert (= result125 (mk_map__ref2 x50)))
(assert (= x51 (store x50 i32 (set (select x50 i32) i216 i2217 (store (get (select x50 i32) i216 i2217) i150 rliteral1)))))
(assert (= result126 (mk_int__ref i150)))
(assert (= i151 3))
(assert (= result127 (mk_map__ref2 x51)))
(assert (= x52 (store x51 i32 (set (select x51 i32) i216 i2217 (store (get (select x51 i32) i216 i2217) i151 rliteral1)))))
(assert (= result128 (mk_int__ref i2217)))
(assert (= i2218 3))
(assert (= result129 (mk_int__ref i151)))
(assert (= i152 1))
(assert (= result130 (mk_map__ref2 x52)))
(assert (= x53 (store x52 i32 (set (select x52 i32) i216 i2218 (store (get (select x52 i32) i216 i2218) i152 rliteral1)))))
(assert (= result131 (mk_int__ref i152)))
(assert (= i153 2))
(assert (= result132 (mk_map__ref2 x53)))
(assert (= x54 (store x53 i32 (set (select x53 i32) i216 i2218 (store (get (select x53 i32) i216 i2218) i153 rliteral1)))))
(assert (= result133 (mk_int__ref i153)))
(assert (= i154 3))
(assert (= result134 (mk_map__ref2 x54)))
(assert (= x55 (store x54 i32 (set (select x54 i32) i216 i2218 (store (get (select x54 i32) i216 i2218) i154 rliteral1)))))
(assert (not (= (bool_eq2 x55 (to_rep (first (mk i32 3))) (to_rep (last (mk i32 3))) y (to_rep (first2 (mk1 i32 3))) (to_rep (last2 (mk1 i32 3)))) true)))
(check-sat)
(exit)
