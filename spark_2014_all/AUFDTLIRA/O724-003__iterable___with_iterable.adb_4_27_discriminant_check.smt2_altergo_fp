(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq2(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq2(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq2(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy1 : (int,natural) farray

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

logic user_eq1 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields = { rec__with_iterable__container__content :
(int,natural) farray
}

function us_split_fields_Content__projection(a: us_split_fields) : (int,natural) farray =
  (a).rec__with_iterable__container__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((bool_eq2(((a).us_split_fields1).rec__with_iterable__container__content,
  1, 100, ((b).us_split_fields1).rec__with_iterable__container__content, 1,
  100) = true) -> (bool_eq3(a, b) = true)) and
  ((not (bool_eq2(((a).us_split_fields1).rec__with_iterable__container__content,
  1, 100, ((b).us_split_fields1).rec__with_iterable__container__content, 1,
  100) = true)) -> (bool_eq3(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1({ us_split_fields1 = {
  rec__with_iterable__container__content = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__with_iterable__container__content = a } })))

logic with_iterable__container__content__first__bit : int

logic with_iterable__container__content__last__bit : int

logic with_iterable__container__content__position : int

axiom with_iterable__container__content__first__bit_axiom :
  (0 <= with_iterable__container__content__first__bit)

axiom with_iterable__container__content__last__bit_axiom :
  (with_iterable__container__content__first__bit <  with_iterable__container__content__last__bit)

axiom with_iterable__container__content__position_axiom :
  (0 <= with_iterable__container__content__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : (int,natural) farray

type container__ref = { container__content : us_rep
}

function container__ref___projection(a: container__ref) : us_rep =
  (a).container__content

type us_split_discrs = { rec__with_iterable__cursor__c : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__with_iterable__cursor__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__with_iterable__cursor__i : natural
}

function us_split_fields_I__projection(a: us_split_fields2) : natural =
  (a).rec__with_iterable__cursor__i

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__with_iterable__cursor__c) = to_rep(((b).us_split_discrs1).rec__with_iterable__cursor__c)) and
  (to_rep(((a).us_split_fields3).rec__with_iterable__cursor__i) = to_rep(((b).us_split_fields3).rec__with_iterable__cursor__i))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__with_iterable__cursor__c) = to_rep(((b).us_split_discrs1).rec__with_iterable__cursor__c)) and
  (to_rep(((a).us_split_fields3).rec__with_iterable__cursor__i) = to_rep(((b).us_split_fields3).rec__with_iterable__cursor__i)))) ->
  (bool_eq4(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:natural. (0 <= object__size2({
  us_split_discrs1 = { rec__with_iterable__cursor__c = a };
  us_split_fields3 = { rec__with_iterable__cursor__i = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment2({
  us_split_discrs1 = { rec__with_iterable__cursor__c = a };
  us_split_fields3 = { rec__with_iterable__cursor__i = a1 } })))

logic with_iterable__cursor__c__first__bit : int

logic with_iterable__cursor__c__last__bit : int

logic with_iterable__cursor__c__position : int

axiom with_iterable__cursor__c__first__bit_axiom :
  (0 <= with_iterable__cursor__c__first__bit)

axiom with_iterable__cursor__c__last__bit_axiom :
  (with_iterable__cursor__c__first__bit <  with_iterable__cursor__c__last__bit)

axiom with_iterable__cursor__c__position_axiom :
  (0 <= with_iterable__cursor__c__position)

logic with_iterable__cursor__i__first__bit : int

logic with_iterable__cursor__i__last__bit : int

logic with_iterable__cursor__i__position : int

axiom with_iterable__cursor__i__first__bit_axiom :
  (0 <= with_iterable__cursor__i__first__bit)

axiom with_iterable__cursor__i__last__bit_axiom :
  (with_iterable__cursor__i__first__bit <  with_iterable__cursor__i__last__bit)

axiom with_iterable__cursor__i__position_axiom :
  (0 <= with_iterable__cursor__i__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : natural

logic dummy4 : natural

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

predicate in_range1(rec__with_iterable__cursor__c1: int, a: us_rep1) =
  (rec__with_iterable__cursor__c1 = to_rep(((a).us_split_discrs1).rec__with_iterable__cursor__c))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:natural. (0 <= object__size3({
  us_split_discrs1 = { rec__with_iterable__cursor__c = a };
  us_split_fields3 = { rec__with_iterable__cursor__i = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment3({
  us_split_discrs1 = { rec__with_iterable__cursor__c = a };
  us_split_fields3 = { rec__with_iterable__cursor__i = a1 } })))

logic with_iterable__cursor__c__first__bit1 : int

logic with_iterable__cursor__c__last__bit1 : int

logic with_iterable__cursor__c__position1 : int

axiom with_iterable__cursor__c__first__bit_axiom1 :
  (0 <= with_iterable__cursor__c__first__bit1)

axiom with_iterable__cursor__c__last__bit_axiom1 :
  (with_iterable__cursor__c__first__bit1 <  with_iterable__cursor__c__last__bit1)

axiom with_iterable__cursor__c__position_axiom1 :
  (0 <= with_iterable__cursor__c__position1)

logic with_iterable__cursor__i__first__bit1 : int

logic with_iterable__cursor__i__last__bit1 : int

logic with_iterable__cursor__i__position1 : int

axiom with_iterable__cursor__i__first__bit_axiom1 :
  (0 <= with_iterable__cursor__i__first__bit1)

axiom with_iterable__cursor__i__last__bit_axiom1 :
  (with_iterable__cursor__i__first__bit1 <  with_iterable__cursor__i__last__bit1)

axiom with_iterable__cursor__i__position_axiom1 :
  (0 <= with_iterable__cursor__i__position1)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : natural

logic dummy6 : natural

type cursor_2__ref = { cursor_2__content : us_rep1
}

function cursor_2__ref___projection(a: cursor_2__ref) : us_rep1 =
  (a).cursor_2__content

logic has_element : us_rep, us_rep1 -> bool

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

axiom has_element__post_axiom : true

axiom has_element__def_axiom :
  (forall a:(int,natural) farray.
  (forall cu:natural. forall cu1:natural [has_element({ us_split_fields1 = {
  rec__with_iterable__container__content = a } }, { us_split_discrs1 = {
  rec__with_iterable__cursor__c = cu }; us_split_fields3 = {
  rec__with_iterable__cursor__i = cu1 } })]. ((has_element({
  us_split_fields1 = { rec__with_iterable__container__content = a } }, {
  us_split_discrs1 = { rec__with_iterable__cursor__c = cu };
  us_split_fields3 = { rec__with_iterable__cursor__i = cu1 } }) = true) <->
  ((1 <= to_rep(cu1)) and (to_rep(cu1) <= 100)))))

logic contains_0 : us_rep -> bool

logic contains_0__function_guard : bool, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

axiom contains_0__post_axiom : true

axiom contains_0__def_axiom :
  (forall a:(int,natural) farray [contains_0({ us_split_fields1 = {
  rec__with_iterable__container__content = a } })]. ((contains_0({
  us_split_fields1 = { rec__with_iterable__container__content = a }
  }) = true) <->
  (exists cu:natural. exists cu1:natural. ((((101 = to_rep(cu)) and
  ((1 <= to_rep(cu1)) and (to_rep(cu1) <= to_rep(cu)))) and (has_element({
  us_split_fields1 = { rec__with_iterable__container__content = a } }, {
  us_split_discrs1 = { rec__with_iterable__cursor__c = cu };
  us_split_fields3 = { rec__with_iterable__cursor__i = cu1 } }) = true)) and
  (get({ us_split_fields1 = { rec__with_iterable__container__content = a } },
  to_rep(cu1)) = 0)))))

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range2(rec__with_iterable__cursor__c1: int, a: us_rep1) =
  (rec__with_iterable__cursor__c1 = to_rep(((a).us_split_discrs1).rec__with_iterable__cursor__c))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:natural. (0 <= object__size4({
  us_split_discrs1 = { rec__with_iterable__cursor__c = a };
  us_split_fields3 = { rec__with_iterable__cursor__i = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:natural. (0 <= object__alignment4({
  us_split_discrs1 = { rec__with_iterable__cursor__c = a };
  us_split_fields3 = { rec__with_iterable__cursor__i = a1 } })))

logic with_iterable__cursor__c__first__bit2 : int

logic with_iterable__cursor__c__last__bit2 : int

logic with_iterable__cursor__c__position2 : int

axiom with_iterable__cursor__c__first__bit_axiom2 :
  (0 <= with_iterable__cursor__c__first__bit2)

axiom with_iterable__cursor__c__last__bit_axiom2 :
  (with_iterable__cursor__c__first__bit2 <  with_iterable__cursor__c__last__bit2)

axiom with_iterable__cursor__c__position_axiom2 :
  (0 <= with_iterable__cursor__c__position2)

logic with_iterable__cursor__i__first__bit2 : int

logic with_iterable__cursor__i__last__bit2 : int

logic with_iterable__cursor__i__position2 : int

axiom with_iterable__cursor__i__first__bit_axiom2 :
  (0 <= with_iterable__cursor__i__first__bit2)

axiom with_iterable__cursor__i__last__bit_axiom2 :
  (with_iterable__cursor__i__first__bit2 <  with_iterable__cursor__i__last__bit2)

axiom with_iterable__cursor__i__position_axiom2 :
  (0 <= with_iterable__cursor__i__position2)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy7 : natural

logic dummy8 : natural

type t1b__ref = { t1b__content : us_rep1
}

function t1b__ref___projection(a: t1b__ref) : us_rep1 = (a).t1b__content

logic first__split_discrs : natural

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom get__post_axiom :
  (forall a:(int,natural) farray.
  (forall i:int [get({ us_split_fields1 = {
  rec__with_iterable__container__content = a } }, i)]. ((in_range(i) and
  ((1 <= i) and (i <= 100))) -> in_range(get({ us_split_fields1 = {
  rec__with_iterable__container__content = a } }, i)))))

axiom get__def_axiom :
  (forall a:(int,natural) farray.
  (forall i:int [get({ us_split_fields1 = {
  rec__with_iterable__container__content = a } }, i)]. (in_range(i) -> (get({
  us_split_fields1 = { rec__with_iterable__container__content = a } },
  i) = to_rep((a[i]))))))

logic a__split_fields : (int,natural) farray

logic first__split_fields : natural

logic o : natural

logic o1 : natural

logic o2 : natural

logic o3 : natural

logic temp___221 : natural

logic temp___2211 : natural

logic o4 : natural

logic o5 : natural

logic o6 : natural

logic o7 : natural

logic o8 : natural

logic o9 : natural

logic temp___222 : natural

logic temp___2221 : natural

logic with_iterable__set_to_0__first__assume : natural

logic with_iterable__set_to_0__first__assume1 : natural

logic o10 : natural

logic o11 : (int,natural) farray

logic o12 : (int,natural) farray

logic temp___225 : (int,natural) farray

logic result : natural

logic first__split_fields1 : natural

logic result1 : (int,natural) farray

logic a__split_fields1 : (int,natural) farray

logic a__split_fields2 : (int,natural) farray

logic first__split_fields2 : natural

logic a__split_fields3 : (int,natural) farray

logic first__split_fields3 : natural

axiom H : (to_rep(o1) = 1)

axiom H1 : (o1 = o2)

axiom H2 : (to_rep(o) = 101)

axiom H3 : (o = o3)

axiom H4 : (temp___221 = o3)

axiom H5 : (temp___2211 = o2)

axiom H6 : ((1 <= to_rep(temp___2211)) and
  (to_rep(temp___2211) <= to_rep(temp___221)))

axiom H7 : ((o4 = temp___221) and (o5 = temp___2211))

axiom H8 : ((o6 = o4) and (o7 = o5))

 (* File "with_iterable.ads", line 29, characters 0-0 *)
goal WP_parameter_def : (101 = to_rep(o6))
