(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort valid_resource 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (valid_resource valid_resource) Bool)
(declare-const dummy valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(declare-sort status 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (status status) Bool)
(declare-const dummy1 status)
(declare-datatypes () ((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content a))
(declare-fun to_rep (status) Int)
(declare-fun of_rep (Int) status)
(assert (forall ((x status)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x status)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int status))))))
(declare-fun slide ((Array Int status) Int Int) (Array Int status))
(assert (forall ((a (Array Int status))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int status))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int status) Int Int (Array Int status) Int Int) (Array Int status))
(assert (forall ((a (Array Int status)) (b (Array Int status))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (status Int) (Array Int status))
(assert (forall ((v status)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int status)) (a__first Int) (a__last Int) (b (Array Int status)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int status)) (b (Array Int status))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare ((Array Int status) Int Int (Array Int status) Int Int) Int)
(assert (forall ((a (Array Int status)) (b (Array Int status))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int status)) (b (Array Int status))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int status)) (b (Array Int status))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort element_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (element_type element_type) Bool)
(declare-const dummy2 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq1 (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___projection ((a set__ref)) us_rep (set__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun is_empty1 (Int us_rep) Bool)
(declare-fun is_empty__function_guard1 (Bool Int us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption ((temp___expr_309 us_rep) (temp___skip_top_level_310 Bool)) Bool (=> (not (= temp___skip_top_level_310 true)) (= (is_empty temp___expr_309) true)))
(declare-fun mem (us_rep Int) Bool)
(declare-fun mem__function_guard (Bool us_rep Int) Bool)
(declare-fun mem1 (Int us_rep Int) Bool)
(declare-fun mem__function_guard1 (Bool Int us_rep Int) Bool)
(define-fun dynamic_invariant ((temp___expr_302 Int) (temp___is_init_299 Bool) (temp___skip_constant_300 Bool) (temp___do_toplevel_301 Bool)) Bool (=> (or (= temp___is_init_299 true) (<= 0 3)) (in_range3 temp___expr_302)))
(assert (forall ((s us_rep)) (forall ((e Int)) (! (=> (dynamic_invariant e true true true) (=> (= e 0) (not (= (mem s e) true)))) :pattern ((mem s e))))))
(assert true)
(declare-fun is_add (us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)
(declare-fun is_add1 (Int us_rep Int us_rep) Bool)
(declare-fun is_add__function_guard1 (Bool Int us_rep Int us_rep) Bool)
(declare-fun add (us_rep Int) us_rep)
(declare-fun add__function_guard (us_rep us_rep Int) Bool)
(declare-fun add1 (Int us_rep Int) us_rep)
(declare-fun add__function_guard1 (us_rep Int us_rep Int) Bool)
(assert (forall ((s us_rep)) (forall ((e Int)) (! (=> (and (dynamic_invariant e true true true) (and (not (= e 0)) (not (= (mem s e) true)))) (= (is_add s e (add s e)) true)) :pattern ((add s e))))))
(assert true)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__allocator__m__t__available us_rep) (rec__allocator__m__t__allocated us_rep)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) us_rep (rec__allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields)) us_rep (rec__allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (user_eq3 (rec__allocator__m__t__available (us_split_fields1 a)) (rec__allocator__m__t__available (us_split_fields1 b))) true) (= (user_eq3 (rec__allocator__m__t__allocated (us_split_fields1 a)) (rec__allocator__m__t__allocated (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const allocator__m__t__available__first__bit Int)
(declare-const allocator__m__t__available__last__bit Int)
(declare-const allocator__m__t__available__position Int)
(assert (<= 0 allocator__m__t__available__first__bit))
(assert (< allocator__m__t__available__first__bit allocator__m__t__available__last__bit))
(assert (<= 0 allocator__m__t__available__position))
(declare-const allocator__m__t__allocated__first__bit Int)
(declare-const allocator__m__t__allocated__last__bit Int)
(declare-const allocator__m__t__allocated__position Int)
(assert (<= 0 allocator__m__t__allocated__first__bit))
(assert (< allocator__m__t__allocated__first__bit allocator__m__t__allocated__last__bit))
(assert (<= 0 allocator__m__t__allocated__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))
(declare-fun is_valid (us_rep1 (Array Int status)) Bool)
(declare-fun is_valid__function_guard (Bool us_rep1 (Array Int status)) Bool)
(declare-fun oeq2 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq4 a b) (oeq2 a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_316 us_rep1) (temp___skip_top_level_317 Bool)) Bool (and (= (is_empty (rec__allocator__m__t__available (us_split_fields1 temp___expr_316))) true) (= (is_empty (rec__allocator__m__t__allocated (us_split_fields1 temp___expr_316))) true)))
(assert true)
(assert (forall ((m us_rep1)) (forall ((allocator__data (Array Int status))) (! (= (= (is_valid m allocator__data) true) (and (and (forall ((e Int)) (=> (and (in_range3 e) (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) e) true)) (in_range1 e))) (forall ((e Int)) (=> (and (in_range3 e) (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) e) true)) (in_range1 e)))) (forall ((r Int)) (=> (and (<= 1 r) (<= r 3)) (ite (= (to_rep (select allocator__data r)) 0) (and (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) r) true) (not (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) r) true))) (and (not (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) r) true)) (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) r) true))))))) :pattern ((is_valid m allocator__data))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_339 Int) (temp___is_init_336 Bool) (temp___skip_constant_337 Bool) (temp___do_toplevel_338 Bool)) Bool (=> (or (= temp___is_init_336 true) (<= 0 1)) (in_range2 temp___expr_339)))
(define-fun dynamic_invariant2 ((temp___expr_290 Int) (temp___is_init_287 Bool) (temp___skip_constant_288 Bool) (temp___do_toplevel_289 Bool)) Bool (=> (or (= temp___is_init_287 true) (<= 1 3)) (in_range1 temp___expr_290)))
(assert true)
(assert (forall ((x us_rep1) (y us_rep1)) (! (= (= (oeq2 x y) true) (and (= (oeq (rec__allocator__m__t__available (us_split_fields1 x)) (rec__allocator__m__t__available (us_split_fields1 y))) true) (= (oeq (rec__allocator__m__t__allocated (us_split_fields1 x)) (rec__allocator__m__t__allocated (us_split_fields1 y))) true))) :pattern ((oeq2 x y)))))
(assert (forall ((s1 us_rep) (s2 us_rep)) (! (= (= (oeq s1 s2) true) (and (forall ((e Int)) (=> (and (in_range3 e) (= (mem s1 e) true)) (= (mem s2 e) true))) (forall ((e Int)) (=> (and (in_range3 e) (= (mem s2 e) true)) (= (mem s1 e) true))))) :pattern ((oeq s1 s2)))))
(assert true)
(assert (forall ((s us_rep)) (! (= (= (is_empty s) true) (forall ((e Int)) (not (and (in_range3 e) (= (mem s e) true))))) :pattern ((is_empty s)))))
(assert true)
(assert (forall ((s us_rep) (result__ us_rep)) (forall ((e Int)) (! (=> (dynamic_invariant e true true true) (= (= (is_add s e result__) true) (and (and (and (and (not (= e 0)) (= (mem result__ e) true)) (not (= (mem s e) true))) (forall ((f Int)) (=> (and (in_range3 f) (= (mem result__ f) true)) (or (= (mem s f) true) (= f e))))) (forall ((e1 Int)) (=> (and (in_range3 e1) (= (mem s e1) true)) (= (mem result__ e1) true)))))) :pattern ((is_add s e result__))))))
(assert true)
(declare-const data (Array Int status))
(declare-const avail us_rep)
(declare-const alloc us_rep)
(declare-const r Int)
(declare-const o us_rep)
(declare-const o1 us_rep)
(declare-const rr Int)
(declare-const o2 Int)
(declare-const o3 status)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Bool)
(declare-const e Int)
(declare-const o7 Bool)
(declare-const o8 Bool)
(declare-const e1 Int)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const avail1 us_rep)
(declare-const alloc1 us_rep)
(declare-const result Int)
(declare-const r1 Int)
(declare-const result1 us_rep)
(declare-const avail2 us_rep)
(declare-const result2 us_rep)
(declare-const alloc2 us_rep)
(declare-const avail3 us_rep)
(declare-const alloc3 us_rep)
(declare-const r2 Int)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Bool)
(assert (= (is_empty avail) true))
(assert (= (is_empty alloc) true))
(assert (= (mk_int__ref result) (mk_int__ref r)))
(assert (= r1 1))
(assert (<= 1 r1))
(assert (<= r1 3))
(assert (=> (= (to_rep (select data r1)) 0) (and (= o (add avail r1)) (= (is_add avail r1 o) true))))
(assert (=> (= (to_rep (select data r1)) 0) (= (mk_set__ref result1) (mk_set__ref avail))))
(assert (=> (= (to_rep (select data r1)) 0) (= avail2 o)))
(assert (=> (= (to_rep (select data r1)) 0) (= alloc2 alloc)))
(assert (=> (= (to_rep (select data r1)) 0) (= alloc2 alloc1)))
(assert (=> (not (= (to_rep (select data r1)) 0)) (and (= o1 (add alloc r1)) (= (is_add alloc r1 o1) true))))
(assert (=> (not (= (to_rep (select data r1)) 0)) (= (mk_set__ref result2) (mk_set__ref alloc))))
(assert (=> (not (= (to_rep (select data r1)) 0)) (= alloc2 o1)))
(assert (=> (not (= (to_rep (select data r1)) 0)) (= avail2 avail)))
(assert (=> (not (= (to_rep (select data r1)) 0)) (= avail2 avail1)))
(assert (and (and (forall ((e2 Int)) (=> (and (in_range3 e2) (= (mem avail3 e2) true)) (and (<= 1 e2) (<= e2 r2)))) (forall ((e2 Int)) (=> (and (in_range3 e2) (= (mem alloc3 e2) true)) (and (<= 1 e2) (<= e2 r2))))) (forall ((rr1 Int)) (=> (and (<= 1 rr1) (<= rr1 r2)) (ite (= (to_rep (select data rr1)) 0) (and (= (mem avail3 rr1) true) (not (= (mem alloc3 rr1) true))) (and (not (= (mem avail3 rr1) true)) (= (mem alloc3 rr1) true)))))))
(assert (and (=> (<= 1 3) (in_range1 r2)) (and (<= 1 r2) (<= r2 3))))
(assert (and (= o9 (mem avail3 e1)) (=> (= e1 0) (not (= o9 true)))))
(assert (= (= o10 true) (in_range3 e1)))
(assert (= result5 (ite (= o10 true) o9 false)))
(assert (= (= result4 true) (forall ((e2 Int)) (=> (and (in_range3 e2) (= (mem avail3 e2) true)) (and (<= 1 e2) (<= e2 r2))))))
(assert (=> (= result4 true) (and (= o7 (mem alloc3 e)) (=> (= e 0) (not (= o7 true))))))
(assert (=> (= result4 true) (= (= o8 true) (in_range3 e))))
(assert (=> (= result4 true) (= result6 (ite (= o8 true) o7 false))))
(assert (=> (= result4 true) (= (= result3 true) (forall ((e2 Int)) (=> (and (in_range3 e2) (= (mem alloc3 e2) true)) (and (<= 1 e2) (<= e2 r2)))))))
(assert (=> (not (= result4 true)) (= result3 false)))
(assert (= result3 true))
(assert (<= 1 rr))
(assert (<= rr r2))
(assert (and (<= 1 rr) (<= rr 3)))
(assert (= o2 rr))
(assert (= o3 (select data o2)))
(assert (= o4 (to_rep o3)))
(assert (= result7 (ite (= o4 0) true false)))
(assert (not (= result7 true)))
(assert (and (= o5 rr) (in_range3 rr)))
(assert (and (= o6 (mem alloc3 o5)) (=> (= o5 0) (not (= o6 true)))))
(assert (not (in_range3 rr)))
(check-sat)
(exit)
