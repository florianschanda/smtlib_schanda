(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type fart

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : fart, fart -> bool

logic dummy5 : fart

type fart__ref = { fart__content : fart
}

function fart__ref___projection(a: fart__ref) : fart = (a).fart__content

logic to_rep2 : fart -> int

logic of_rep2 : int -> fart

axiom inversion_axiom2 :
  (forall x:fart [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:fart [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type matchresultt

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : matchresultt, matchresultt -> bool

logic dummy6 : matchresultt

type matchresultt__ref = { matchresultt__content : matchresultt
}

function matchresultt__ref___projection(a: matchresultt__ref) : matchresultt =
  (a).matchresultt__content

type bytet

predicate in_range5(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : bytet, bytet -> bool

logic dummy7 : bytet

type bytet__ref = { bytet__content : bytet
}

function bytet__ref___projection(a: bytet__ref) : bytet = (a).bytet__content

logic to_rep3 : bytet -> int

logic of_rep3 : int -> bytet

axiom inversion_axiom3 :
  (forall x:bytet [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:bytet [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,bytet) farray
}

logic slide1 : (int,bytet) farray, int, int -> (int,bytet) farray

axiom slide_eq1 :
  (forall a:(int,bytet) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,bytet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> (int,bytet) farray

axiom concat_def1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : bytet, int -> (int,bytet) farray

axiom singleton_def1 :
  (forall v:bytet.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq9 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,bytet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bytet) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))))))))

logic compare1 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq9(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq9(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq9(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

logic dummy8 : (int,bytet) farray

logic value__size1 : int

logic object__size1 : (int,bytet) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,bytet) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,bytet) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,bytet) farray, (int,bytet) farray -> bool

type templatelengtht

predicate in_range6(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : templatelengtht, templatelengtht -> bool

logic dummy9 : templatelengtht

type templatelengtht__ref = { templatelengtht__content : templatelengtht
}

function templatelengtht__ref___projection(a: templatelengtht__ref) : templatelengtht =
  (a).templatelengtht__content

logic to_rep4 : templatelengtht -> int

logic of_rep4 : int -> templatelengtht

axiom inversion_axiom4 :
  (forall x:templatelengtht [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:templatelengtht [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy10 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__iandatypes__templatet__length :
templatelengtht; rec__iandatypes__templatet__requiredmaxfar : fart;
rec__iandatypes__templatet__id : (int,character) farray;
rec__iandatypes__templatet__pad : (int,bytet) farray
}

function us_split_fields_Length__projection(a: us_split_fields) : templatelengtht =
  (a).rec__iandatypes__templatet__length

function us_split_fields_RequiredMaxFAR__projection(a: us_split_fields) : fart =
  (a).rec__iandatypes__templatet__requiredmaxfar

function us_split_fields_ID__2__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__iandatypes__templatet__id

function us_split_fields_Pad__projection(a: us_split_fields) : (int,bytet) farray =
  (a).rec__iandatypes__templatet__pad

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((to_rep4(((a).us_split_fields1).rec__iandatypes__templatet__length) = to_rep4(((b).us_split_fields1).rec__iandatypes__templatet__length)) and
  (to_rep2(((a).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar) = to_rep2(((b).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq4(((a).us_split_fields1).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields1).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq9(((a).us_split_fields1).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields1).rec__iandatypes__templatet__pad, 1, 452) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_fields1).rec__iandatypes__templatet__length) = to_rep4(((b).us_split_fields1).rec__iandatypes__templatet__length)) and
  (to_rep2(((a).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar) = to_rep2(((b).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq4(((a).us_split_fields1).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields1).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq9(((a).us_split_fields1).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields1).rec__iandatypes__templatet__pad, 1,
  452) = true))) -> (bool_eq11(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__size3({ us_split_fields1 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__alignment3({ us_split_fields1 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

logic iandatypes__templatet__length__first__bit : int

logic iandatypes__templatet__length__last__bit : int

logic iandatypes__templatet__length__position : int

axiom iandatypes__templatet__length__first__bit_axiom :
  (0 <= iandatypes__templatet__length__first__bit)

axiom iandatypes__templatet__length__last__bit_axiom :
  (iandatypes__templatet__length__first__bit <  iandatypes__templatet__length__last__bit)

axiom iandatypes__templatet__length__position_axiom :
  (0 <= iandatypes__templatet__length__position)

logic iandatypes__templatet__requiredmaxfar__first__bit : int

logic iandatypes__templatet__requiredmaxfar__last__bit : int

logic iandatypes__templatet__requiredmaxfar__position : int

axiom iandatypes__templatet__requiredmaxfar__first__bit_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__first__bit)

axiom iandatypes__templatet__requiredmaxfar__last__bit_axiom :
  (iandatypes__templatet__requiredmaxfar__first__bit <  iandatypes__templatet__requiredmaxfar__last__bit)

axiom iandatypes__templatet__requiredmaxfar__position_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__position)

logic iandatypes__templatet__id__first__bit : int

logic iandatypes__templatet__id__last__bit : int

logic iandatypes__templatet__id__position : int

axiom iandatypes__templatet__id__first__bit_axiom :
  (0 <= iandatypes__templatet__id__first__bit)

axiom iandatypes__templatet__id__last__bit_axiom :
  (iandatypes__templatet__id__first__bit <  iandatypes__templatet__id__last__bit)

axiom iandatypes__templatet__id__position_axiom :
  (0 <= iandatypes__templatet__id__position)

logic iandatypes__templatet__pad__first__bit : int

logic iandatypes__templatet__pad__last__bit : int

logic iandatypes__templatet__pad__position : int

axiom iandatypes__templatet__pad__first__bit_axiom :
  (0 <= iandatypes__templatet__pad__first__bit)

axiom iandatypes__templatet__pad__last__bit_axiom :
  (iandatypes__templatet__pad__first__bit <  iandatypes__templatet__pad__last__bit)

axiom iandatypes__templatet__pad__position_axiom :
  (0 <= iandatypes__templatet__pad__position)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy11 : templatelengtht

logic dummy12 : fart

logic dummy13 : (int,character) farray

logic dummy14 : (int,bytet) farray

type templatet__ref = { templatet__content : us_rep
}

function templatet__ref___projection(a: templatet__ref) : us_rep =
  (a).templatet__content

type descriptioni

predicate in_range7(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : descriptioni, descriptioni -> bool

logic dummy15 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic thesystemmaxfar : us_private -> int

logic thesystemmaxfar__function_guard : int, us_private -> prop

axiom thesystemmaxfar__post_axiom :
  (forall configdata__state:us_private [thesystemmaxfar(configdata__state)].
  in_range3(thesystemmaxfar(configdata__state)))

logic valid_numberlogentries : us_private -> bool

logic valid_numberlogentries__function_guard : bool, us_private -> prop

type statscount

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : statscount, statscount -> bool

logic dummy16 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep5 : statscount -> int

logic of_rep5 : int -> statscount

axiom inversion_axiom5 :
  (forall x:statscount [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:statscount [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range8(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___14__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  ((((((to_rep5(((a).us_split_fields3).rec__stats__t__successentry) = to_rep5(((b).us_split_fields3).rec__stats__t__successentry)) and
  (to_rep5(((a).us_split_fields3).rec__stats__t__failentry) = to_rep5(((b).us_split_fields3).rec__stats__t__failentry))) and
  (to_rep5(((a).us_split_fields3).rec__stats__t__successbio) = to_rep5(((b).us_split_fields3).rec__stats__t__successbio))) and
  (to_rep5(((a).us_split_fields3).rec__stats__t__failbio) = to_rep5(((b).us_split_fields3).rec__stats__t__failbio))) ->
  (bool_eq14(a, b) = true)) and
  ((not ((((to_rep5(((a).us_split_fields3).rec__stats__t__successentry) = to_rep5(((b).us_split_fields3).rec__stats__t__successentry)) and
  (to_rep5(((a).us_split_fields3).rec__stats__t__failentry) = to_rep5(((b).us_split_fields3).rec__stats__t__failentry))) and
  (to_rep5(((a).us_split_fields3).rec__stats__t__successbio) = to_rep5(((b).us_split_fields3).rec__stats__t__successbio))) and
  (to_rep5(((a).us_split_fields3).rec__stats__t__failbio) = to_rep5(((b).us_split_fields3).rec__stats__t__failbio)))) ->
  (bool_eq14(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size4({ us_split_fields3 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment4({ us_split_fields3 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy17 : statscount

logic dummy18 : statscount

logic dummy19 : statscount

logic dummy20 : statscount

type t__ref = { t__content : us_rep1
}

function t__ref___4__projection(a: t__ref) : us_rep1 = (a).t__content

logic extractuser : us_private -> (int,character) farray

logic extractuser__function_guard : (int,character) farray,
  us_private -> prop

axiom extractuser__post_axiom : true

logic ispresent : us_private -> bool

logic ispresent__function_guard : bool, us_private -> prop

axiom ispresent__post_axiom : true

logic getiandatemplate : us_private -> us_rep

logic getiandatemplate__function_guard : us_rep, us_private -> prop

axiom getiandatemplate__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS : int

type statust

predicate in_range9(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq14 : statust, statust -> bool

logic dummy21 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___2__projection(a: statust__ref) : statust =
  (a).statust__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic achievedfardescription : int -> (int,character) farray

logic achievedfardescription__function_guard : (int,character) farray,
  int -> prop

axiom achievedfardescription__post_axiom : true

axiom valid_numberlogentries__post_axiom : true

 (* File "userentry.adb", line 318, characters 0-0 *)
goal WP_parameter_def :
  (forall status:int. forall thetemplate__split_fields:templatelengtht.
  forall thetemplate__split_fields1:fart.
  forall thetemplate__split_fields2:(int,character) farray.
  forall thetemplate__split_fields3:(int,bytet) farray.
  forall matchresult:int. forall achievedfar:int. forall maxfar:int.
  forall state:us_private. forall state1:us_private. forall o:bool.
  forall temp___1701:templatelengtht. forall temp___17011:fart.
  forall temp___17012:(int,character) farray.
  forall temp___17013:(int,bytet) farray. forall o1:int.
  forall o2:(int,character) farray. forall o3:(int,character) farray.
  forall o4:(int,character) farray. forall o5:t. forall result:bool.
  forall result1:templatelengtht. forall result2:fart.
  forall result3:(int,character) farray. forall result4:(int,bytet) farray.
  forall thetemplate__split_fields4:templatelengtht.
  forall thetemplate__split_fields5:fart.
  forall thetemplate__split_fields6:(int,character) farray.
  forall thetemplate__split_fields7:(int,bytet) farray. forall result5:int.
  forall maxfar1:int. forall result6:int. forall maxfar2:int.
  forall matchresult1:int. forall achievedfar1:int. forall state2:us_private.
  (((0 <= 7) -> in_range9(status)) -> (((0 <= 1) ->
  in_range4(matchresult)) -> (((0 <= 2147483647) ->
  in_range3(achievedfar)) -> (((0 <= 2147483647) -> in_range3(maxfar)) ->
  (((o = ispresent(state1)) and (((not (o = true)) and (result = true)) or
  ((o = true) and (result = false)))) -> ((not (result = true)) -> ((({
  us_split_fields1 = { rec__iandatypes__templatet__length = temp___1701;
  rec__iandatypes__templatet__requiredmaxfar = temp___17011;
  rec__iandatypes__templatet__id = temp___17012;
  rec__iandatypes__templatet__pad = temp___17013 }
  } = getiandatemplate(state1)) and
  (((result1 = thetemplate__split_fields) and
  ((result2 = thetemplate__split_fields1) and
  ((result3 = thetemplate__split_fields2) and
  (result4 = thetemplate__split_fields3)))) and
  ((temp___1701 = thetemplate__split_fields4) and
  ((temp___17011 = thetemplate__split_fields5) and
  ((temp___17012 = thetemplate__split_fields6) and
  (temp___17013 = thetemplate__split_fields7)))))) ->
  ((((o1 = thesystemmaxfar(state)) and in_range3(o1)) and
  ((result5 = maxfar) and (maxfar1 = o1))) ->
  ((((to_rep2(thetemplate__split_fields5) <  maxfar1) and
  ((result6 = maxfar1) and
  (maxfar2 = to_rep2(thetemplate__split_fields5)))) or
  ((not (to_rep2(thetemplate__split_fields5) <  maxfar1)) and
  (maxfar2 = maxfar1))) -> ((in_range4(matchresult1) and
  in_range3(achievedfar1)) -> ((not (matchresult1 = 0)) ->
  (((o3 = achievedfardescription(achievedfar1)) and ((o3 = o4) and (mk(1,
  150) = o5))) -> ((o2 = extractuser(state1)) ->
  (valid_numberlogentries(state2) = true)))))))))))))))
