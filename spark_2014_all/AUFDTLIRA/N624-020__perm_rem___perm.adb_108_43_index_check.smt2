(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort true_bool 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (true_bool true_bool) Bool)
(declare-const dummy1 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 1)) (in_range2 temp___expr_159)))
(declare-sort index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-fun to_rep1 (index) Int)
(declare-fun of_rep1 (Int) index)
(assert (forall ((x index)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x index)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort integer 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range4 f) (=> (in_range4 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range4 low) (and (in_range4 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(define-fun dynamic_invariant1 ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property 1 100 (first1 temp___expr_173) (last1 temp___expr_173))))
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range3 temp___expr_166)))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant1 a true true true true) (dynamic_invariant2 i true true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant1 result true false true true)))) :pattern ((remove a i))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__perm__witnesses__ia index) (rec__perm__witnesses__ib index)))))
(define-fun us_split_fields_Ia__projection ((a us_split_fields)) index (rec__perm__witnesses__ia a))
(define-fun us_split_fields_Ib__projection ((a us_split_fields)) index (rec__perm__witnesses__ib a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 a))) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 b)))) (= (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 a))) (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const perm__witnesses__ia__first__bit Int)
(declare-const perm__witnesses__ia__last__bit Int)
(declare-const perm__witnesses__ia__position Int)
(assert (<= 0 perm__witnesses__ia__first__bit))
(assert (< perm__witnesses__ia__first__bit perm__witnesses__ia__last__bit))
(assert (<= 0 perm__witnesses__ia__position))
(declare-const perm__witnesses__ib__first__bit Int)
(declare-const perm__witnesses__ib__last__bit Int)
(declare-const perm__witnesses__ib__position Int)
(assert (<= 0 perm__witnesses__ib__first__bit))
(assert (< perm__witnesses__ib__first__bit perm__witnesses__ib__last__bit))
(assert (<= 0 perm__witnesses__ib__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((witnesses__ref (mk_witnesses__ref (witnesses__content us_rep)))))
(define-fun witnesses__ref___projection ((a witnesses__ref)) us_rep (witnesses__content a))
(declare-fun get_witnesses (us_t us_t) us_rep)
(declare-fun get_witnesses__function_guard (us_rep us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant1 a true true true true) (dynamic_invariant1 b true true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (is_perm a b) true) (< 0 (length a)))))) (let ((result (get_witnesses a b))) (and (and (<= (first1 a) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result)))) (<= (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result))) (last1 a))) (and (and (<= (first1 b) (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result)))) (<= (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result))) (last1 b))) (and (= (to_rep (select (to_array a) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result))))) (to_rep (select (to_array b) (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result)))))) (= (is_perm (remove a (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 result)))) (remove b (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 result))))) true)))))) :pattern ((get_witnesses a b)))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun induction_hypothesis (us_t us_t) Int)
(declare-fun induction_hypothesis__function_guard (Int us_t us_t) Bool)
(declare-const w us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const ih Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_18)))
(assert (= w (get_witnesses a b)))
(assert (= ih (induction_hypothesis (remove a (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w)))) (remove b (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w)))))))
(declare-const perm__perm_symmetric__induction_hypothesis__result Int)
(declare-const perm__perm_symmetric__induction_hypothesis__B_4__w__assume index)
(declare-const perm__perm_symmetric__induction_hypothesis__B_4__w__assume1 index)
(declare-const o (Array Int natural))
(declare-const o1 t)
(declare-const o2 (Array Int natural))
(declare-const o3 t)
(declare-const perm__perm_symmetric__induction_hypothesis__B_4__ih__assume Int)
(declare-const perm__perm_symmetric__induction_hypothesis__result1 Int)
(declare-const perm__perm_symmetric__induction_hypothesis__result2 Int)
(define-fun o4 () us_t (mk___t o2 o3))
(define-fun o5 () us_t (mk___t o o1))
(define-fun perm__perm_symmetric__induction_hypothesis__B_4__w__assume2 () us_rep (mk___rep (mk___split_fields perm__perm_symmetric__induction_hypothesis__B_4__w__assume perm__perm_symmetric__induction_hypothesis__B_4__w__assume1)))
(assert (dynamic_invariant1 a true false true true))
(assert (dynamic_invariant1 b true false true true))
(assert (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (is_perm a b) true))))
(assert (not (= (length a) 0)))
(assert (= perm__perm_symmetric__induction_hypothesis__result2 perm__perm_symmetric__induction_hypothesis__result))
(assert (= perm__perm_symmetric__induction_hypothesis__result2 perm__perm_symmetric__induction_hypothesis__result1))
(assert (and (= perm__perm_symmetric__induction_hypothesis__B_4__w__assume2 (get_witnesses a b)) (and (and (<= (to_rep2 (first (rt a))) (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume)) (<= (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume) (to_rep2 (last (rt a))))) (and (and (<= (to_rep2 (first (rt b))) (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume1)) (<= (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume1) (to_rep2 (last (rt b))))) (and (= (to_rep (select (elts a) (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume))) (to_rep (select (elts b) (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume1)))) (= (is_perm (remove a (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume)) (remove b (to_rep1 perm__perm_symmetric__induction_hypothesis__B_4__w__assume1))) true))))))
(assert (= perm__perm_symmetric__induction_hypothesis__B_4__w__assume2 w))
(assert (and (= o4 (remove b (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))))) (and (dynamic_invariant1 o4 true false true true) (and (= (invariant__ o4) true) (and (= (to_rep2 (last o3)) (- (to_rep2 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))) 1))) (= (to_rep (select (elts b) k)) (to_rep (select o2 k))))) (and (forall ((k Int)) (=> (and (<= (+ (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))) 1) k) (<= k (to_rep2 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select o2 (- k 1)))))) (forall ((k Int)) (=> (and (<= (to_rep1 (rec__perm__witnesses__ib (us_split_fields1 w))) k) (<= k (- (to_rep2 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select o2 k))))))))))))
(assert (and (= o5 (remove a (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))))) (and (dynamic_invariant1 o5 true false true true) (and (= (invariant__ o5) true) (and (= (to_rep2 (last o1)) (- (to_rep2 (last (rt a))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))) 1))) (= (to_rep (select (elts a) k)) (to_rep (select o k))))) (and (forall ((k Int)) (=> (and (<= (+ (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))) 1) k) (<= k (to_rep2 (last (rt a))))) (= (to_rep (select (elts a) k)) (to_rep (select o (- k 1)))))) (forall ((k Int)) (=> (and (<= (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))) k) (<= k (- (to_rep2 (last (rt a))) 1))) (= (to_rep (select (elts a) (+ k 1))) (to_rep (select o k))))))))))))
(assert (and (= perm__perm_symmetric__induction_hypothesis__B_4__ih__assume (induction_hypothesis o5 o4)) (and (in_range2 perm__perm_symmetric__induction_hypothesis__B_4__ih__assume) (=> (= (distinct perm__perm_symmetric__induction_hypothesis__B_4__ih__assume 0) true) (= (is_perm o4 o5) true)))))
(assert (= perm__perm_symmetric__induction_hypothesis__B_4__ih__assume ih))
(assert (in_range2 ih))
(assert (= (distinct ih 0) true))
(assert (not (<= (to_rep2 (first (rt a))) (to_rep1 (rec__perm__witnesses__ia (us_split_fields1 w))))))
(check-sat)
(exit)
