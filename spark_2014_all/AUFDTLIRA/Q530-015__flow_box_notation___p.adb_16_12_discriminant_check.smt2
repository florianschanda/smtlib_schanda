(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort stack_capacity 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (stack_capacity stack_capacity) Bool)
(declare-const dummy stack_capacity)
(declare-datatypes () ((stack_capacity__ref (mk_stack_capacity__ref (stack_capacity__content stack_capacity)))))
(define-fun stack_capacity__ref___projection ((a stack_capacity__ref)) stack_capacity (stack_capacity__content a))
(define-fun dynamic_invariant ((temp___expr_168 Int) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool (=> (or (= temp___is_init_164 true) (<= 1 2147483646)) (in_range temp___expr_168)))
(declare-fun to_rep (stack_capacity) Int)
(declare-fun of_rep (Int) stack_capacity)
(assert (forall ((x stack_capacity)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x stack_capacity)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort stack_extent 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (stack_extent stack_extent) Bool)
(declare-const dummy1 stack_extent)
(declare-datatypes () ((stack_extent__ref (mk_stack_extent__ref (stack_extent__content stack_extent)))))
(define-fun stack_extent__ref___projection ((a stack_extent__ref)) stack_extent (stack_extent__content a))
(declare-fun to_rep1 (stack_extent) Int)
(declare-fun of_rep1 (Int) stack_extent)
(assert (forall ((x stack_extent)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x stack_extent)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort element 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (element element) Bool)
(declare-const dummy3 element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(declare-fun to_rep3 (element) Int)
(declare-fun of_rep3 (Int) element)
(assert (forall ((x element)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x element)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))
(assert (forall ((a (Array Int element))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int) (b (Array Int element)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep3 (select a temp___idx_154)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep3 (select a temp___idx_154)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (integer integer) Bool)
(declare-const dummy4 integer)
(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content integer)))))
(define-fun t4s__ref___projection ((a t4s__ref)) integer (t4s__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int element)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int element) (elts a))
(define-fun of_array ((a (Array Int element)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int element)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int element)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int element)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int element))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int element))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int element))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((t5s__ref (mk_t5s__ref (t5s__content us_t)))))
(define-fun t5s__ref___projection ((a t5s__ref)) us_t (t5s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__p__stack__capacity stack_capacity)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) stack_capacity (rec__p__stack__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p__stack__values us_t) (rec__p__stack__top stack_extent)))))
(define-fun us_split_fields_Values__projection ((a us_split_fields)) us_t (rec__p__stack__values a))
(define-fun us_split_fields_Top__projection ((a us_split_fields)) stack_extent (rec__p__stack__top a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__p__stack__capacity (us_split_discrs1 a))) (to_rep (rec__p__stack__capacity (us_split_discrs1 b)))) (and (= (bool_eq1 (rec__p__stack__values (us_split_fields1 a)) (rec__p__stack__values (us_split_fields1 b))) true) (= (to_rep1 (rec__p__stack__top (us_split_fields1 a))) (to_rep1 (rec__p__stack__top (us_split_fields1 b)))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const p__stack__capacity__first__bit Int)
(declare-const p__stack__capacity__last__bit Int)
(declare-const p__stack__capacity__position Int)
(assert (<= 0 p__stack__capacity__first__bit))
(assert (< p__stack__capacity__first__bit p__stack__capacity__last__bit))
(assert (<= 0 p__stack__capacity__position))
(declare-const p__stack__values__first__bit Int)
(declare-const p__stack__values__last__bit Int)
(declare-const p__stack__values__position Int)
(assert (<= 0 p__stack__values__first__bit))
(assert (< p__stack__values__first__bit p__stack__values__last__bit))
(assert (<= 0 p__stack__values__position))
(declare-const p__stack__top__first__bit Int)
(declare-const p__stack__top__last__bit Int)
(declare-const p__stack__top__position Int)
(assert (<= 0 p__stack__top__first__bit))
(assert (< p__stack__top__first__bit p__stack__top__last__bit))
(assert (<= 0 p__stack__top__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((stack__ref (mk_stack__ref (stack__content us_rep)))))
(define-fun stack__ref___projection ((a stack__ref)) us_rep (stack__content a))
(define-fun dynamic_invariant1 ((temp___expr_188 us_rep) (temp___is_init_184 Bool) (temp___skip_constant_185 Bool) (temp___do_toplevel_186 Bool) (temp___do_typ_inv_187 Bool)) Bool (let ((temp___189 (rec__p__stack__capacity (us_split_discrs1 temp___expr_188)))) (and (dynamic_property1 1 (to_rep temp___189) (first1 (rec__p__stack__values (us_split_fields1 temp___expr_188))) (last1 (rec__p__stack__values (us_split_fields1 temp___expr_188)))) (and (= (first1 (rec__p__stack__values (us_split_fields1 temp___expr_188))) 1) (= (last1 (rec__p__stack__values (us_split_fields1 temp___expr_188))) (to_rep temp___189))))))
(declare-fun empty (us_rep) Bool)
(declare-fun empty__function_guard (Bool us_rep) Bool)
(assert true)
(assert (forall ((this us_rep)) (! (= (= (empty this) true) (= (to_rep1 (rec__p__stack__top (us_split_fields1 this))) 0)) :pattern ((empty this)))))
(declare-const this__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r3b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const r6b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((tT7bP1__ref (mk_tT7bP1__ref (tT7bP1__content integer)))))
(define-fun tT7bP1__ref___projection ((a tT7bP1__ref)) integer (tT7bP1__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep2 (first2 (mk1 f l))) f) (= (to_rep2 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int element)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int element) (elts1 a))
(define-fun of_array1 ((a (Array Int element)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep2 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep2 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int element)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int element)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int element)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int element))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int element))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int element))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep2 (first2 (rt1 x))) (to_rep2 (last2 (rt1 x))) (elts1 y) (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content us_t1)))))
(define-fun t7b__ref___projection ((a t7b__ref)) us_t1 (t7b__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__p__stack__values1 us_t1) (rec__p__stack__top1 stack_extent)))))
(define-fun us_split_fields_Values__2__projection ((a us_split_fields2)) us_t1 (rec__p__stack__values1 a))
(define-fun us_split_fields_Top__2__projection ((a us_split_fields2)) stack_extent (rec__p__stack__top1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (let ((temp___156 (rec__p__stack__values1 (us_split_fields3 a)))) (of_array (to_array1 temp___156) (first3 temp___156) (last3 temp___156))) (rec__p__stack__top1 (us_split_fields3 a)))))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (let ((temp___155 (rec__p__stack__values (us_split_fields1 r)))) (of_array1 (to_array temp___155) (first1 temp___155) (last1 temp___155))) (rec__p__stack__top (us_split_fields1 r)))))
(define-fun bool_eq4 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__p__stack__capacity (us_split_discrs2 a))) (to_rep (rec__p__stack__capacity (us_split_discrs2 b)))) (and (= (bool_eq3 (rec__p__stack__values1 (us_split_fields3 a)) (rec__p__stack__values1 (us_split_fields3 b))) true) (= (to_rep1 (rec__p__stack__top1 (us_split_fields3 a))) (to_rep1 (rec__p__stack__top1 (us_split_fields3 b)))))) true false))
(define-fun in_range4 ((rec__p__stack__capacity1 Int) (a us_rep)) Bool (= rec__p__stack__capacity1 (to_rep (rec__p__stack__capacity (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const p__stack__capacity__first__bit1 Int)
(declare-const p__stack__capacity__last__bit1 Int)
(declare-const p__stack__capacity__position1 Int)
(assert (<= 0 p__stack__capacity__first__bit1))
(assert (< p__stack__capacity__first__bit1 p__stack__capacity__last__bit1))
(assert (<= 0 p__stack__capacity__position1))
(declare-const p__stack__values__first__bit1 Int)
(declare-const p__stack__values__last__bit1 Int)
(declare-const p__stack__values__position1 Int)
(assert (<= 0 p__stack__values__first__bit1))
(assert (< p__stack__values__first__bit1 p__stack__values__last__bit1))
(assert (<= 0 p__stack__values__position1))
(declare-const p__stack__top__first__bit1 Int)
(declare-const p__stack__top__last__bit1 Int)
(declare-const p__stack__top__position1 Int)
(assert (<= 0 p__stack__top__first__bit1))
(assert (< p__stack__top__first__bit1 p__stack__top__last__bit1))
(assert (<= 0 p__stack__top__position1))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content us_rep1)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_rep1 (t5b__content a))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_161 Int) (temp___is_init_157 Bool) (temp___skip_constant_158 Bool) (temp___do_toplevel_159 Bool) (temp___do_typ_inv_160 Bool)) Bool (=> (or (= temp___is_init_157 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_161)))
(define-fun dynamic_invariant4 ((temp___expr_175 Int) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (or (= temp___is_init_171 true) (<= 0 2147483646)) (in_range1 temp___expr_175)))
(declare-const this__split_fields (Array Int element))
(declare-const this__split_fields1 t)
(declare-const this__split_fields2 stack_extent)
(declare-const o stack_extent)
(declare-const o1 (Array Int element))
(declare-const o2 t1)
(declare-const o3 (Array Int element))
(declare-const o4 t1)
(declare-const o5 stack_extent)
(declare-const o6 stack_capacity)
(declare-const o7 (Array Int element))
(declare-const o8 t1)
(declare-const o9 stack_extent)
(declare-const temp___202 stack_capacity)
(declare-const temp___2021 (Array Int element))
(declare-const temp___2022 t)
(declare-const temp___2023 stack_extent)
(assert (dynamic_invariant1 (mk___rep this__split_discrs (mk___split_fields (mk___t this__split_fields this__split_fields1) this__split_fields2)) false false true true))
(assert (= (to_rep (rec__p__stack__capacity this__split_discrs)) r3b))
(assert (in_range r3b))
(assert (= (to_rep (rec__p__stack__capacity this__split_discrs)) r6b))
(assert (in_range r6b))
(assert (= (to_rep1 o) 0))
(assert (= o3 o1))
(assert (= o4 o2))
(assert (= o o5))
(assert (= (rec__p__stack__capacity this__split_discrs) o6))
(assert (= o7 o3))
(assert (= o8 o4))
(assert (= o9 o5))
(assert (= (mk___rep (mk___split_discrs temp___202) (mk___split_fields (mk___t temp___2021 temp___2022) temp___2023)) (to_base (mk___rep1 (mk___split_discrs o6) (mk___split_fields1 (mk___t1 o7 o8) o9)))))
(assert (not (= temp___202 (rec__p__stack__capacity this__split_discrs))))
(check-sat)
(exit)
