(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort ttD1 0)
(declare-fun ttD1qtint (ttD1) Int)
(assert (forall ((i ttD1)) (and (<= 1 (ttD1qtint i)) (<= (ttD1qtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (ttD1 ttD1) Bool)
(declare-const dummy ttD1)
(declare-datatypes () ((ttD1__ref (mk_ttD1__ref (ttD1__content ttD1)))))
(define-fun ttD1__ref___projection ((a ttD1__ref)) ttD1 (ttD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x_old (Array Int Bool))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t2b 0)
(declare-fun t2bqtint (t2b) Int)
(assert (forall ((i t2b)) (and (<= 1 (t2bqtint i)) (<= (t2bqtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t2b t2b) Bool)
(declare-const dummy1 t2b)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content t2b)))))
(define-fun t2b__ref___projection ((a t2b__ref)) t2b (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x (Array Int Bool))
(declare-const i Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const x1 (Array Int Bool))
(declare-const i2 Int)
(declare-const result1 (Array Int Bool))
(declare-const x2 (Array Int Bool))
(declare-const result2 Int)
(declare-const i3 Int)
(assert (= x x_old))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 10))
(assert (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i2 1))) (= (= (select x1 k) true) (not (= (select x_old k) true))))) (forall ((k Int)) (=> (and (<= i2 k) (<= k 10)) (= (= (select x1 k) true) (= (select x_old k) true))))))
(assert (and (and (forall ((temp___189 Int)) (=> (and (<= 1 temp___189) (<= temp___189 10)) (=> (or (< 10 temp___189) (or (< temp___189 1) (<= i2 temp___189))) (= (select x1 temp___189) (select x temp___189))))) (=> (<= 1 10) (in_range2 i2))) (and (<= 1 i2) (<= i2 10))))
(assert (= x1 result1))
(assert (= x2 (store x1 i2 (ite (not (= (select x1 i2) true)) true false))))
(assert (not (= i2 10)))
(assert (= result2 i2))
(assert (= i3 (+ i2 1)))
(declare-const k Int)
(assert (<= 1 k))
(assert (<= k (- i3 1)))
(assert (= (select x2 k) true))
(assert (not (not (= (select x_old k) true))))
(check-sat)
(exit)
