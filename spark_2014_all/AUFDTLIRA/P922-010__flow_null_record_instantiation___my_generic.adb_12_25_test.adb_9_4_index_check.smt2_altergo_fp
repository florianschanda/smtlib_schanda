(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type null_record_type

logic user_eq1 : null_record_type, null_record_type -> bool

logic value__size : int

logic object__size : null_record_type -> int

logic value__alignment : int

logic object__alignment : null_record_type -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:null_record_type. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:null_record_type. (0 <= object__alignment(a)))

logic dummy1 : null_record_type

type null_record_type__ref = { null_record_type__content : null_record_type
}

function null_record_type__ref___projection(a: null_record_type__ref) : null_record_type =
  (a).null_record_type__content

logic user_eq2 : null_record_type, null_record_type -> bool

logic value__size1 : int

logic object__size1 : null_record_type -> int

logic value__alignment1 : int

logic object__alignment1 : null_record_type -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:null_record_type. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:null_record_type. (0 <= object__alignment1(a)))

logic dummy2 : null_record_type

type t__ref = { t__content : null_record_type
}

function t__ref___projection(a: t__ref) : null_record_type = (a).t__content

type us_split_fields = { rec__test__crash__foo__valid : bool;
rec__test__crash__foo__field : null_record_type
}

function us_split_fields_Valid__projection(a: us_split_fields) : bool =
  (a).rec__test__crash__foo__valid

function us_split_fields_Field__projection(a: us_split_fields) : null_record_type =
  (a).rec__test__crash__foo__field

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((((a).us_split_fields1).rec__test__crash__foo__valid = ((b).us_split_fields1).rec__test__crash__foo__valid) ->
  (bool_eq2(a, b) = true)) and
  ((not (((a).us_split_fields1).rec__test__crash__foo__valid = ((b).us_split_fields1).rec__test__crash__foo__valid)) ->
  (bool_eq2(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:null_record_type. (0 <= object__size2({
  us_split_fields1 = { rec__test__crash__foo__valid = a;
  rec__test__crash__foo__field = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:null_record_type. (0 <= object__alignment2({
  us_split_fields1 = { rec__test__crash__foo__valid = a;
  rec__test__crash__foo__field = a1 } })))

logic test__crash__foo__valid__first__bit : int

logic test__crash__foo__valid__last__bit : int

logic test__crash__foo__valid__position : int

axiom test__crash__foo__valid__first__bit_axiom :
  (0 <= test__crash__foo__valid__first__bit)

axiom test__crash__foo__valid__last__bit_axiom :
  (test__crash__foo__valid__first__bit <  test__crash__foo__valid__last__bit)

axiom test__crash__foo__valid__position_axiom :
  (0 <= test__crash__foo__valid__position)

logic test__crash__foo__field__first__bit : int

logic test__crash__foo__field__last__bit : int

logic test__crash__foo__field__position : int

axiom test__crash__foo__field__first__bit_axiom :
  (0 <= test__crash__foo__field__first__bit)

axiom test__crash__foo__field__last__bit_axiom :
  (test__crash__foo__field__first__bit <  test__crash__foo__field__last__bit)

axiom test__crash__foo__field__position_axiom :
  (0 <= test__crash__foo__field__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : bool

logic dummy4 : null_record_type

type foo__ref = { foo__content : us_rep
}

function foo__ref___projection(a: foo__ref) : us_rep = (a).foo__content

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i1:int [(slide(a, old_first, new_first)[i1])]. ((slide(a,
  old_first, new_first)[i1]) = (a[(i1 - (new_first - old_first))]))))))

logic bool_eq3 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq3(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

type taD1

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq4 : taD1, taD1 -> bool

logic dummy5 : taD1

type taD1__ref = { taD1__content : taD1
}

function taD1__ref___projection(a: taD1__ref) : taD1 = (a).taD1__content

 (* File "my_generic.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:bool. forall x__split_fields1:null_record_type.
  forall cache:(int,us_rep) farray. forall o:int. forall o1:bool.
  forall o2:null_record_type. forall o3:bool. forall o4:null_record_type.
  forall o5:bool. forall o6:bool. forall o7:null_record_type.
  forall temp___194:bool. forall temp___1941:null_record_type.
  forall result:bool. forall result1:null_record_type.
  forall x__split_fields2:bool. forall x__split_fields3:null_record_type.
  (in_range(i) -> ((((((((((1 <= i) and (i <= 10)) and (o = i)) and ({
  us_split_fields1 = { rec__test__crash__foo__valid = o1;
  rec__test__crash__foo__field = o2 } } = (cache[o]))) and ((o1 = o3) and
  (o2 = o4))) and (o5 = o3)) and ((o5 = o6) and (x__split_fields1 = o7))) and
  ((temp___194 = o6) and (temp___1941 = o7))) and
  (((result = x__split_fields) and (result1 = x__split_fields1)) and
  ((x__split_fields2 = temp___194) and (x__split_fields3 = temp___1941)))) ->
  (1 <= i))))
