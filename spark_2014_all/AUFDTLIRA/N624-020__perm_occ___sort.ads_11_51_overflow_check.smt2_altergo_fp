(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,natural) farray

logic dummy5 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

logic occ : us_t, int -> int

logic occ__function_guard : int, us_t, int -> prop

axiom is_perm__post_axiom : true

axiom is_perm__def_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (forall e:int. (((0 <= e) and (e <= 2147483647)) -> (occ({ elts = a; rt =
  a1 }, e) = occ({ elts = b; rt = b1 }, e))))))

logic values__first : integer

logic values__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic index_of_minimum : us_t -> int

logic index_of_minimum__function_guard : int, us_t -> prop

axiom index_of_minimum__post_axiom :
  (forall values:(int,natural) farray. forall values1:t [index_of_minimum({
  elts = values; rt = values1 })]. ((0 <  length({ elts = values; rt =
  values1 })) -> ((((to_rep1(first(values1)) <= index_of_minimum({ elts =
  values; rt = values1 })) and (index_of_minimum({ elts = values; rt =
  values1 }) <= to_rep1(last(values1)))) and
  (forall i:int. (((to_rep1(first(values1)) <= i) and
  (i <= to_rep1(last(values1)))) -> (to_rep((values[index_of_minimum({ elts =
  values; rt = values1 })])) <= to_rep((values[i])))))) and
  in_range3(index_of_minimum({ elts = values; rt = values1 })))))

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type tTpreviousSP1__ref = { tTpreviousSP1__content : integer
}

function tTpreviousSP1__ref___projection(a: tTpreviousSP1__ref) : integer =
  (a).tTpreviousSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,natural) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy7 : (int,natural) farray

logic dummy8 : t1

type tpreviousS__ref = { tpreviousS__content : us_t1
}

function tpreviousS__ref___projection(a: tpreviousS__ref) : us_t1 =
  (a).tpreviousS__content

logic previous__first : integer

logic previous__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy9 : integer

type t31b__ref = { t31b__content : integer
}

function t31b__ref___projection(a: t31b__ref) : integer = (a).t31b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy10 : integer

type t32b__ref = { t32b__content : integer
}

function t32b__ref___projection(a: t32b__ref) : integer = (a).t32b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,natural) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,natural) farray = (a).elts2

function of_array2(a: (int,natural) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,natural) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,natural) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,natural) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__alignment2(a)))

function bool_eq12(x: us_t2, y: us_t2) : bool = bool_eq6((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq9 : us_t2, us_t2 -> bool

logic dummy11 : (int,natural) farray

logic dummy12 : t2

type t33b__ref = { t33b__content : us_t2
}

function t33b__ref___projection(a: t33b__ref) : us_t2 = (a).t33b__content

type nb_occ

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : nb_occ, nb_occ -> bool

logic dummy13 : nb_occ

type nb_occ__ref = { nb_occ__content : nb_occ
}

function nb_occ__ref___projection(a: nb_occ__ref) : nb_occ =
  (a).nb_occ__content

logic remove_last : us_t -> us_t

logic remove_last__function_guard : us_t, us_t -> prop

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy14 : integer

type t17s__ref = { t17s__content : integer
}

function t17s__ref___projection(a: t17s__ref) : integer = (a).t17s__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,natural) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,natural) farray = (a).elts3

function of_array3(a: (int,natural) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,natural) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,natural) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,natural) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__alignment3(a)))

function bool_eq15(x: us_t3, y: us_t3) : bool = bool_eq6((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq12 : us_t3, us_t3 -> bool

logic dummy15 : (int,natural) farray

logic dummy16 : t3

type t18s__ref = { t18s__content : us_t3
}

function t18s__ref___projection(a: t18s__ref) : us_t3 = (a).t18s__content

axiom remove_last__post_axiom :
  (forall a:(int,natural) farray. forall a1:t [remove_last({ elts = a; rt =
  a1 })]. ((0 <  length({ elts = a; rt = a1 })) -> dynamic_property(1, 100,
  to_rep1(first((remove_last({ elts = a; rt = a1 })).rt)),
  to_rep1(last((remove_last({ elts = a; rt = a1 })).rt)))))

axiom remove_last__def_axiom :
  (forall a:(int,natural) farray. forall a1:t [remove_last({ elts = a; rt =
  a1 })]. (remove_last({ elts = a; rt = a1 }) = { elts = a; rt =
  mk(to_rep1(first6(mk3(to_rep1(first(a1)), (to_rep1(last(a1)) - 1)))),
  to_rep1(last6(mk3(to_rep1(first(a1)), (to_rep1(last(a1)) - 1))))) }))

logic occ_def : us_t, int -> int

logic occ_def__function_guard : int, us_t, int -> prop

axiom occ_def__def_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall e:int [occ_def({ elts = a; rt = a1 }, e)]. (in_range2(e) ->
  (((length({ elts = a; rt = a1 }) = 0) -> (occ_def({ elts = a; rt = a1 },
  e) = 0)) and ((not (length({ elts = a; rt = a1 }) = 0)) ->
  (((to_rep((a[to_rep1(last(a1))])) = e) -> (occ_def({ elts = a; rt = a1 },
  e) = (occ_def(remove_last({ elts = a; rt = a1 }), e) + 1))) and
  ((not (to_rep((a[to_rep1(last(a1))])) = e)) -> (occ_def({ elts = a; rt = a1
  }, e) = occ_def(remove_last({ elts = a; rt = a1 }), e)))))))))

axiom occ__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall e:int [occ({ elts = a; rt = a1 }, e)]. (in_range2(e) -> ((occ({
  elts = a; rt = a1 }, e) <= length({ elts = a; rt = a1 })) and
  in_range5(occ({ elts = a; rt = a1 }, e))))))

axiom occ__def_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall e:int [occ({ elts = a; rt = a1 }, e)]. (in_range2(e) -> (occ({
  elts = a; rt = a1 }, e) = occ_def({ elts = a; rt = a1 }, e)))))

 (* File "sort.adb", line 59, characters 0-0 *)
goal WP_parameter_def :
  (forall values:(int,natural) farray. forall smallest:int.
  forall previous:(int,natural) farray. forall current:int. forall o:int.
  forall temp___280:int. forall temp___277:(int,natural) farray.
  forall temp___275:int. forall temp___273:(int,natural) farray.
  forall temp___274:int. forall temp___278:(int,natural) farray.
  forall o1:(int,natural) farray. forall temp___270:(int,natural) farray.
  forall temp___2701:t2. forall o2:(int,natural) farray. forall o3:t.
  forall o4:int. forall temp___271:(int,natural) farray.
  forall temp___2711:t1. forall o5:(int,natural) farray. forall o6:t1.
  forall o7:(int,natural) farray. forall o8:int. forall o9:int.
  forall values1:(int,natural) farray. forall smallest1:int.
  forall previous1:(int,natural) farray. forall current1:int.
  forall result:bool. forall result1:int. forall current2:int.
  forall result2:int. forall smallest2:int.
  forall result3:(int,natural) farray. forall previous2:(int,natural) farray.
  forall values2:(int,natural) farray. forall values3:(int,natural) farray.
  forall smallest3:int. forall previous3:(int,natural) farray.
  forall current3:int. forall values4:(int,natural) farray.
  forall smallest4:int. forall previous4:(int,natural) farray.
  forall current4:int. forall values5:(int,natural) farray.
  forall smallest5:int. forall previous5:(int,natural) farray.
  forall current5:int. forall values6:(int,natural) farray.
  forall smallest6:int. forall previous6:(int,natural) farray.
  forall current6:int. forall values7:(int,natural) farray.
  forall smallest7:int. forall previous7:(int,natural) farray.
  forall current7:int. forall values8:(int,natural) farray.
  forall smallest8:int. forall previous8:(int,natural) farray.
  forall current8:int. forall values9:(int,natural) farray.
  forall smallest9:int. forall previous9:(int,natural) farray.
  forall current9:int. forall values10:(int,natural) farray.
  forall smallest10:int. forall previous10:(int,natural) farray.
  forall current10:int. forall values11:(int,natural) farray.
  forall smallest11:int. forall previous11:(int,natural) farray.
  forall current11:int. forall result4:bool. forall result5:bool.
  (dynamic_property(1, 100, to_rep1(values__first), to_rep1(values__last)) ->
  (((((1 <= 2147483647) -> in_range3(smallest)) and
  ((dynamic_property2(to_rep1(values__first), to_rep1(values__last),
  to_rep1(previous__first), to_rep1(previous__last)) and
  ((to_rep1(previous__first) = to_rep1(values__first)) and
  (to_rep1(previous__last) = to_rep1(values__last)))) and ((((({
  int__content = current8 } = { int__content = current }) and (({
  map__content = previous8 } = { map__content = previous }) and (({
  int__content = smallest8 } = { int__content = smallest }) and ({
  map__content = values8 } = { map__content = values })))) and
  ((current9 = current1) and ((previous9 = previous1) and
  ((smallest9 = smallest1) and (values9 = values1))))) and
  (((((to_rep1(values__first) <= to_rep1(values__last)) and
  (o = ((to_rep1(values__last) - to_rep1(values__first)) + 1))) or
  ((not (to_rep1(values__first) <= to_rep1(values__last))) and (o = 0))) and
  (((o = 0) and (result = true)) or ((not (o = 0)) and
  (result = false)))) and (result = true))) or
  ((((((to_rep1(values__first) <= to_rep1(values__last)) and
  (o = ((to_rep1(values__last) - to_rep1(values__first)) + 1))) or
  ((not (to_rep1(values__first) <= to_rep1(values__last))) and (o = 0))) and
  (((o = 0) and (result = true)) or ((not (o = 0)) and
  (result = false)))) and (not (result = true))) and (((({ int__content =
  current8 } = { int__content = current6 }) and (({ map__content = previous8
  } = { map__content = previous6 }) and (({ int__content = smallest8 } = {
  int__content = smallest6 }) and ({ map__content = values8 } = {
  map__content = values6 })))) and ((current9 = current7) and
  ((previous9 = previous7) and ((smallest9 = smallest7) and
  (values9 = values7))))) and
  (((temp___280 = (to_rep1(values__last) - 1)) and
  in_range1((to_rep1(values__last) - 1))) and ((({ int__content = result1
  } = { int__content = current }) and
  (current2 = to_rep1(values__first))) and
  ((((to_rep1(values__first) <= current2) and (current2 <= temp___280)) and
  ((((temp___277 = previous) and ((temp___275 = smallest) and
  ((temp___273 = values) and ((temp___274 = current2) and
  ((temp___278 = values) and ((((((((current2 <= to_rep1(values__last)) ->
  (((to_rep1(values__first) <= current2) and
  (current2 <= to_rep1(values__last))) and
  ((to_rep1(values__first) <= to_rep1(values__last)) and
  (to_rep1(values__last) <= to_rep1(values__last))))) and (o1 = values)) and
  ((o1 = temp___270) and (mk2(current2,
  to_rep1(values__last)) = temp___2701))) and ((temp___270 = o2) and
  (mk(to_rep1(first4(temp___2701)), to_rep1(last4(temp___2701))) = o3))) and
  ((o4 = index_of_minimum({ elts = o2; rt = o3 })) and (in_range3(o4) and
  (((to_rep1(first(o3)) <= o4) and (o4 <= to_rep1(last(o3)))) and
  (forall i:int. (((to_rep1(first(o3)) <= i) and (i <= to_rep1(last(o3)))) ->
  (to_rep((o2[o4])) <= to_rep((o2[i]))))))))) and (({ int__content = result2
  } = { int__content = smallest }) and (smallest2 = o4))) and
  ((((not (smallest2 = current2)) and ((((((slide(values,
  to_rep1(values__first), to_rep1(values__first)) = temp___271) and
  (mk1(to_rep1(values__first), to_rep1(values__last)) = temp___2711)) and
  ((((to_rep1(first2(temp___2711)) <= to_rep1(last2(temp___2711))) and
  (((to_rep1(previous__first) <= to_rep1(previous__last)) and
  (((to_rep1(last2(temp___2711)) - to_rep1(first2(temp___2711))) + 1) = ((to_rep1(previous__last) - to_rep1(previous__first)) + 1))) or
  ((not (to_rep1(previous__first) <= to_rep1(previous__last))) and
  (((to_rep1(last2(temp___2711)) - to_rep1(first2(temp___2711))) + 1) = 0)))) or
  ((not (to_rep1(first2(temp___2711)) <= to_rep1(last2(temp___2711)))) and
  (((to_rep1(previous__first) <= to_rep1(previous__last)) and
  (0 = ((to_rep1(previous__last) - to_rep1(previous__first)) + 1))) or
  (not (to_rep1(previous__first) <= to_rep1(previous__last)))))) and ({
  elts1 = o5; rt1 = o6 } = { elts1 = temp___271; rt1 = temp___2711 }))) and
  (o7 = o5)) and (({ map__content = result3 } = { map__content = previous
  }) and (previous2 = o7))) and (((o8 = current2) and
  in_range3(current2)) and ((((is_perm({ elts = values; rt =
  mk(to_rep1(values__first), to_rep1(values__last)) }, { elts = values2; rt =
  mk(to_rep1(values__first), to_rep1(values__last)) }) = true) and
  (to_rep((values2[o8])) = to_rep((values[smallest2])))) and
  (to_rep((values2[smallest2])) = to_rep((values[o8])))) and
  (forall z:int. (((to_rep1(values__first) <= z) and
  (z <= to_rep1(values__last))) -> (((not (z = o8)) and
  (not (z = smallest2))) -> (to_rep((values2[z])) = to_rep((values[z])))))))))) or
  ((smallest2 = current2) and (((previous2 = previous) and
  (values2 = values)) and ((previous2 = previous1) and
  (values2 = values1))))) and
  (((forall i:int. (((to_rep1(values__first) <= i) and (i <= current3)) ->
    (forall j:int. ((((i + 1) <= j) and (j <= to_rep1(values__last))) ->
    (to_rep((values3[i])) <= to_rep((values3[j]))))))) and
  (is_perm({ elts = temp___278; rt = mk(to_rep1(values__first),
  to_rep1(values__last)) }, { elts = values3; rt = mk(to_rep1(values__first),
  to_rep1(values__last)) }) = true)) and
  (((((to_rep1(values__first) <= (to_rep1(values__last) - 1)) ->
  dynamic_property3(to_rep1(values__first), (to_rep1(values__last) - 1),
  current3)) and ((1 <= 2147483647) -> in_range3(smallest3))) and
  ((to_rep1(values__first) <= current3) and
  (current3 <= (to_rep1(values__last) - 1)))) and
  (current3 = temp___280)))))))))) and (((current3 = current4) and
  ((previous3 = previous4) and ((smallest3 = smallest4) and
  (values3 = values4)))) and ((current5 = current3) and
  ((previous5 = previous3) and ((smallest5 = smallest3) and
  (values5 = values3)))))) and ((({ int__content = current6 } = {
  int__content = current4 }) and (({ map__content = previous6 } = {
  map__content = previous4 }) and (({ int__content = smallest6 } = {
  int__content = smallest4 }) and ({ map__content = values6 } = {
  map__content = values4 })))) and ((current7 = current5) and
  ((previous7 = previous5) and ((smallest7 = smallest5) and
  (values7 = values5))))))) or
  ((not ((to_rep1(values__first) <= current2) and
  (current2 <= temp___280))) and (((current2 = current6) and (({
  map__content = previous6 } = { map__content = previous }) and (({
  int__content = smallest6 } = { int__content = smallest }) and ({
  map__content = values6 } = { map__content = values })))) and
  ((current7 = current2) and ((previous7 = previous1) and
  ((smallest7 = smallest1) and (values7 = values1)))))))))))))) and
  (((current10 = current8) and ((previous10 = previous8) and
  ((smallest10 = smallest8) and ({ map__content = values10 } = {
  map__content = values8 })))) and ((current11 = current9) and
  ((previous11 = previous9) and ((smallest11 = smallest9) and
  (values11 = values9)))))) -> (((result4 = is_perm({ elts = values; rt =
  mk(to_rep1(values__first), to_rep1(values__last)) }, { elts = values10;
  rt = mk(to_rep1(values__first), to_rep1(values__last)) })) and
  ((result4 = true) <->
  (forall e:int. (((0 <= e) and (e <= 2147483647)) -> (occ({ elts = values;
  rt = mk(to_rep1(values__first), to_rep1(values__last)) }, e) = occ({ elts =
  values10; rt = mk(to_rep1(values__first), to_rep1(values__last)) }, e)))))) ->
  ((result4 = true) ->
  (((((to_rep1(values__first) <= to_rep1(values__last)) and
  (o9 = ((to_rep1(values__last) - to_rep1(values__first)) + 1))) or
  ((not (to_rep1(values__first) <= to_rep1(values__last))) and (o9 = 0))) and
  (((0 <  o9) and (result5 = true)) or ((not (0 <  o9)) and
  (result5 = false)))) -> ((result5 = true) ->
  in_range1((to_rep1(values__last) - 1)))))))))
