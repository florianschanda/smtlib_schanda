(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type contents_type

predicate in_range2(x: int) = (((- 1000) <= x) and (x <= 1000))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : contents_type, contents_type -> bool

logic dummy1 : contents_type

type contents_type__ref = { contents_type__content : contents_type
}

function contents_type__ref___projection(a: contents_type__ref) : contents_type =
  (a).contents_type__content

logic to_rep : contents_type -> int

logic of_rep : int -> contents_type

axiom inversion_axiom :
  (forall x:contents_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:contents_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,contents_type) farray
}

logic slide : (int,contents_type) farray, int,
  int -> (int,contents_type) farray

axiom slide_eq :
  (forall a:(int,contents_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,contents_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,contents_type) farray, int, int,
  (int,contents_type) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,contents_type) farray. forall a__first:int.
  forall a__last:int. forall b:(int,contents_type) farray.
  forall b__first:int. forall b__last:int [bool_eq4(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,contents_type) farray. forall b:(int,contents_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic arr : (int,contents_type) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic u : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tbase_index_typeB

predicate in_range3(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tbase_index_typeB, tbase_index_typeB -> bool

logic dummy2 : tbase_index_typeB

type tbase_index_typeB__ref = { tbase_index_typeB__content :
tbase_index_typeB
}

function tbase_index_typeB__ref___projection(a: tbase_index_typeB__ref) : tbase_index_typeB =
  (a).tbase_index_typeB__content

logic to_rep1 : tbase_index_typeB -> int

logic of_rep1 : int -> tbase_index_typeB

axiom inversion_axiom1 :
  (forall x:tbase_index_typeB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:tbase_index_typeB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tbase_index_typeB, tbase_index_typeB -> bool

logic dummy3 : tbase_index_typeB

type t7b__ref = { t7b__content : tbase_index_typeB
}

function t7b__ref___projection(a: t7b__ref) : tbase_index_typeB =
  (a).t7b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "t3q5.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall k:int. forall i:int. forall x:int. forall k1:int.
  forall result:int. forall i1:int. forall result1:int. forall k2:int.
  forall k3:int. forall i2:int. (in_range1(l) -> (in_range1(u) ->
  ((((1 <= l) and (l <  u)) and (u <= 100)) -> (((1 <= 100) ->
  in_range1(k)) -> (((k1 = l) and
  (forall x1:int. (((l <= x1) and (x1 <= l)) ->
  (to_rep((arr[k1])) <= to_rep((arr[x1])))))) -> (((1 <= 100) ->
  in_range1(k1)) -> ((l <  u) -> ((({ int__content = result } = {
  int__content = i }) and (i1 = (l + 1))) -> ((((l + 1) <= i1) and
  (i1 <= u)) -> ((((to_rep((arr[i1])) <  to_rep((arr[k1]))) and
  ((k1 = result1) and (k2 = i1))) or
  ((not (to_rep((arr[i1])) <  to_rep((arr[k1])))) and (k2 = k1))) ->
  (((((((l + 1) <= i2) and (i2 <= u)) and (l <  u)) and
  (forall x1:int. (((l <= x1) and (x1 <= i2)) ->
  (to_rep((arr[k3])) <= to_rep((arr[x1])))))) and ((l <= k3) and
  (k3 <= u))) -> ((((((l + 1) <= u) -> dynamic_property((l + 1), u, i2)) and
  ((1 <= 100) -> in_range1(k3))) and (((l + 1) <= i2) and (i2 <= u))) ->
  (((l <= x) and (x <= i2)) -> (1 <= x)))))))))))))))
