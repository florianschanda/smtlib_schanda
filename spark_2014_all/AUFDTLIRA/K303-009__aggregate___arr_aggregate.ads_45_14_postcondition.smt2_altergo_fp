(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type ta3D1

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : ta3D1, ta3D1 -> bool

logic dummy1 : ta3D1

type ta3D1__ref = { ta3D1__content : ta3D1
}

function ta3D1__ref___projection(a: ta3D1__ref) : ta3D1 = (a).ta3D1__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,(int,integer) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,integer) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq4(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t59s

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : t59s, t59s -> bool

logic dummy3 : t59s

type t59s__ref = { t59s__content : t59s
}

function t59s__ref___projection(a: t59s__ref) : t59s = (a).t59s__content

type t65s

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : t65s, t65s -> bool

logic dummy4 : t65s

type t65s__ref = { t65s__content : t65s
}

function t65s__ref___projection(a: t65s__ref) : t65s = (a).t65s__content

type t71s

predicate in_range4(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t71s, t71s -> bool

logic dummy5 : t71s

type t71s__ref = { t71s__content : t71s
}

function t71s__ref___projection(a: t71s__ref) : t71s = (a).t71s__content

type t77s

predicate in_range5(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : t77s, t77s -> bool

logic dummy6 : t77s

type t77s__ref = { t77s__content : t77s
}

function t77s__ref___projection(a: t77s__ref) : t77s = (a).t77s__content

type t83s

predicate in_range6(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : t83s, t83s -> bool

logic dummy7 : t83s

type t83s__ref = { t83s__content : t83s
}

function t83s__ref___projection(a: t83s__ref) : t83s = (a).t83s__content

logic temp___249 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___254 : int, int -> (int,integer) farray

logic temp___259 : int, int -> (int,integer) farray

logic temp___265 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___270 : int, int -> (int,integer) farray

logic temp___275 : int, int -> (int,integer) farray

logic temp___281 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___286 : int, int -> (int,integer) farray

logic temp___291 : int, int -> (int,integer) farray

logic temp___297 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___302 : int, int -> (int,integer) farray

logic temp___307 : int, int -> (int,integer) farray

logic temp___313 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___318 : int, int -> (int,integer) farray

logic temp___323 : int, int -> (int,integer) farray

axiom def_axiom :
  (forall temp___256:int. forall temp___257:int. ((in_range(temp___256) and
  in_range(temp___257)) -> ((to_rep((temp___254(temp___256,
  temp___257)[1])) = temp___256) and (to_rep((temp___254(temp___256,
  temp___257)[2])) = temp___257))))

axiom def_axiom1 :
  (forall temp___251:(int,integer) farray.
  forall temp___252:(int,integer) farray. (((temp___249(temp___251,
  temp___252)[1]) = temp___251) and ((temp___249(temp___251,
  temp___252)[2]) = temp___252)))

axiom def_axiom2 :
  (forall temp___261:int. forall temp___262:int. ((in_range(temp___261) and
  in_range(temp___262)) -> ((to_rep((temp___259(temp___261,
  temp___262)[1])) = temp___261) and (to_rep((temp___259(temp___261,
  temp___262)[2])) = temp___262))))

axiom def_axiom3 :
  (forall temp___272:int. forall temp___273:int. ((in_range(temp___272) and
  in_range(temp___273)) -> ((to_rep((temp___270(temp___272,
  temp___273)[1])) = temp___272) and (to_rep((temp___270(temp___272,
  temp___273)[2])) = temp___273))))

axiom def_axiom4 :
  (forall temp___267:(int,integer) farray.
  forall temp___268:(int,integer) farray. (((temp___265(temp___267,
  temp___268)[1]) = temp___267) and ((temp___265(temp___267,
  temp___268)[2]) = temp___268)))

axiom def_axiom5 :
  (forall temp___277:int. forall temp___278:int. ((in_range(temp___277) and
  in_range(temp___278)) -> ((to_rep((temp___275(temp___277,
  temp___278)[1])) = temp___277) and (to_rep((temp___275(temp___277,
  temp___278)[2])) = temp___278))))

axiom def_axiom6 :
  (forall temp___288:int. forall temp___289:int. ((in_range(temp___288) and
  in_range(temp___289)) -> ((to_rep((temp___286(temp___288,
  temp___289)[1])) = temp___288) and (to_rep((temp___286(temp___288,
  temp___289)[2])) = temp___289))))

axiom def_axiom7 :
  (forall temp___283:(int,integer) farray.
  forall temp___284:(int,integer) farray. (((temp___281(temp___283,
  temp___284)[1]) = temp___283) and ((temp___281(temp___283,
  temp___284)[2]) = temp___284)))

axiom def_axiom8 :
  (forall temp___293:int. forall temp___294:int. ((in_range(temp___293) and
  in_range(temp___294)) -> ((to_rep((temp___291(temp___293,
  temp___294)[1])) = temp___293) and (to_rep((temp___291(temp___293,
  temp___294)[2])) = temp___294))))

axiom def_axiom9 :
  (forall temp___304:int. forall temp___305:int. ((in_range(temp___304) and
  in_range(temp___305)) -> ((to_rep((temp___302(temp___304,
  temp___305)[1])) = temp___304) and (to_rep((temp___302(temp___304,
  temp___305)[2])) = temp___305))))

axiom def_axiom10 :
  (forall temp___299:(int,integer) farray.
  forall temp___300:(int,integer) farray. (((temp___297(temp___299,
  temp___300)[1]) = temp___299) and ((temp___297(temp___299,
  temp___300)[2]) = temp___300)))

axiom def_axiom11 :
  (forall temp___309:int. forall temp___310:int. ((in_range(temp___309) and
  in_range(temp___310)) -> ((to_rep((temp___307(temp___309,
  temp___310)[1])) = temp___309) and (to_rep((temp___307(temp___309,
  temp___310)[2])) = temp___310))))

axiom def_axiom12 :
  (forall temp___320:int. forall temp___321:int. ((in_range(temp___320) and
  in_range(temp___321)) -> ((to_rep((temp___318(temp___320,
  temp___321)[1])) = temp___320) and (to_rep((temp___318(temp___320,
  temp___321)[2])) = temp___321))))

axiom def_axiom13 :
  (forall temp___315:(int,integer) farray.
  forall temp___316:(int,integer) farray. (((temp___313(temp___315,
  temp___316)[1]) = temp___315) and ((temp___313(temp___315,
  temp___316)[2]) = temp___316)))

axiom def_axiom14 :
  (forall temp___325:int. forall temp___326:int. ((in_range(temp___325) and
  in_range(temp___326)) -> ((to_rep((temp___323(temp___325,
  temp___326)[1])) = temp___325) and (to_rep((temp___323(temp___325,
  temp___326)[2])) = temp___326))))

 (* File "arr_aggregate.ads", line 41, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. forall a:(int,(int,integer) farray) farray.
  forall a1:(int,(int,integer) farray) farray.
  forall a2:(int,(int,integer) farray) farray. ((in_range(one) and
  (in_range(b) and ((one = 1) and ((((b = 1) and
  (forall j:int. (((1 <= j) and (j <= 2)) ->
  ((to_rep(((a[j])[one])) = one) and (to_rep(((a[j])[2])) = 2))))) or
  ((not (b = 1)) and (((b = 2) and
  (forall j:int. (((1 <= j) and (j <= 2)) ->
  (forall k:int. (((1 <= k) and (k <= 2)) -> (to_rep(((a[j])[k])) = one)))))) or
  ((not (b = 2)) and (((b = 3) and
  (forall j:int. (((1 <= j) and (j <= 2)) ->
  (forall k:int. (((1 <= k) and (k <= 2)) -> (to_rep(((a[j])[k])) = one)))))) or
  ((not (b = 3)) and (((b = 4) and
  (forall j:int. (((1 <= j) and (j <= 2)) -> ((to_rep(((a[j])[one])) = 2) and
  (to_rep(((a[j])[2])) = one))))) or ((not (b = 4)) and
  (forall j:int. (((1 <= j) and (j <= 2)) ->
  ((to_rep(((a[j])[one])) = one) and (to_rep(((a[j])[2])) = 2)))))))))))) and
  ((a = a1) and (a2 = a)))))) -> ((b = 1) -> (bool_eq4(a1, 1, 2,
  temp___249(temp___254(one, 2), temp___259(one, 2)), 1, 2) = true))))
