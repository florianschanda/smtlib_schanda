(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

type text__ref = { text__content : us_t
}

function text__ref___projection(a: text__ref) : us_t = (a).text__content

logic match_at : us_t, us_t, int -> bool

logic match_at__function_guard : bool, us_t, us_t, int -> prop

logic partial_match_at : us_t, us_t, int, int -> bool

logic partial_match_at__function_guard : bool, us_t, us_t, int, int -> prop

axiom match_at__post_axiom : true

axiom match_at__def_axiom :
  (forall needle:(int,character) farray. forall needle1:t.
  forall haystack:(int,character) farray. forall haystack1:t.
  (forall loc:int [match_at({ elts = needle; rt = needle1 }, { elts =
  haystack; rt = haystack1 }, loc)]. ((match_at({ elts = needle; rt = needle1
  }, { elts = haystack; rt = haystack1 }, loc) = true) <->
  (((loc - 1) <= (length({ elts = haystack; rt = haystack1 }) - length({
  elts = needle; rt = needle1 }))) and (partial_match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, loc, length({ elts =
  needle; rt = needle1 })) = true)))))

type map__ref1 = { map__content1 : (int,positive) farray
}

logic slide1 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq1 :
  (forall a:(int,positive) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : positive, int -> (int,positive) farray

axiom singleton_def1 :
  (forall v:positive.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic needle : (int,character) farray

logic needle1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic haystack : (int,character) farray

logic haystack1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t54b__ref = { t54b__content : integer
}

function t54b__ref___projection(a: t54b__ref) : integer = (a).t54b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first2(mk1(f, l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,character) farray

logic dummy7 : t1

type t55b__ref = { t55b__content : us_t1
}

function t55b__ref___projection(a: t55b__ref) : us_t1 = (a).t55b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t60b__ref = { t60b__content : integer
}

function t60b__ref___projection(a: t60b__ref) : integer = (a).t60b__content

logic attr__ATTRIBUTE_ADDRESS9 : int

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : natural, natural -> bool

logic dummy9 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

axiom partial_match_at__post_axiom : true

axiom partial_match_at__def_axiom :
  (forall needle2:(int,character) farray. forall needle3:t.
  forall haystack2:(int,character) farray. forall haystack3:t.
  (forall loc:int. forall len:int [partial_match_at({ elts = needle2; rt =
  needle3 }, { elts = haystack2; rt = haystack3 }, loc, len)].
  ((partial_match_at({ elts = needle2; rt = needle3 }, { elts = haystack2;
  rt = haystack3 }, loc, len) = true) <->
  (forall i:int. (((1 <= i) and (i <= len)) ->
  (to_rep1((needle2[i])) = to_rep1((haystack2[(loc + (i - 1))]))))))))

logic i : int

logic r52b : int

logic r53b : int

logic shift : int

logic r58b : int

logic r59b : int

logic k : int

logic string_search__qs__result : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic temp___309 : int

logic temp___308 : int

logic temp___307 : int

logic temp___306 : int

logic temp___305 : int

logic temp___304 : int

logic temp___311 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : (int,character) farray

logic temp___296 : (int,character) farray

logic temp___2961 : t1

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic temp___297 : int

logic o20 : int

logic o21 : character

logic o22 : int

logic o23 : positive

logic o24 : int

logic o25 : int

logic o26 : int

logic o27 : int

logic temp___300 : int

logic o28 : int

logic o29 : int

logic temp___298 : int

logic o30 : int

logic o31 : int

logic o32 : int

logic o33 : int

logic o34 : int

logic o35 : int

logic temp___299 : int

logic o36 : int

logic o37 : character

logic o38 : int

logic o39 : int

logic o40 : int

logic temp___2981 : int

logic o41 : int

logic o42 : int

logic o43 : int

logic o44 : int

logic o45 : int

logic o46 : int

logic temp___2991 : int

logic o47 : int

logic o48 : character

logic o49 : int

logic o50 : int

logic o51 : int

logic o52 : int

logic o53 : int

logic o54 : int

logic o55 : int

logic temp___310 : int

logic o56 : int

logic o57 : character

logic o58 : int

logic o59 : positive

logic o60 : int

logic o61 : int

logic o62 : int

logic o63 : int

logic o64 : int

logic temp___303 : int

logic o65 : int

logic o66 : character

logic o67 : int

logic o68 : positive

logic o69 : int

logic o70 : int

logic o71 : int

logic o72 : int

logic o73 : int

logic o74 : int

logic o75 : int

logic o76 : int

logic o77 : int

logic o78 : bool

logic o79 : int

logic o80 : int

logic o81 : int

logic o82 : (int,character) farray

logic temp___2962 : (int,character) farray

logic temp___2963 : t1

logic o83 : int

logic o84 : int

logic o85 : int

logic o86 : int

logic o87 : int

logic o88 : int

logic o89 : int

logic o90 : int

logic temp___2971 : int

logic o91 : int

logic o92 : character

logic o93 : int

logic o94 : positive

logic o95 : int

logic o96 : int

logic o97 : int

logic o98 : int

logic temp___3001 : int

logic o99 : int

logic o100 : int

logic temp___2982 : int

logic o101 : int

logic o102 : int

logic o103 : int

logic o104 : int

logic o105 : int

logic o106 : int

logic temp___2992 : int

logic o107 : int

logic o108 : character

logic o109 : int

logic o110 : int

logic o111 : int

logic temp___2983 : int

logic o112 : int

logic o113 : int

logic o114 : int

logic o115 : int

logic o116 : int

logic o117 : int

logic temp___2993 : int

logic o118 : int

logic o119 : character

logic o120 : int

logic o121 : int

logic k1 : int

logic o122 : int

logic o123 : int

logic o124 : int

logic o125 : int

logic o126 : int

logic o127 : int

logic o128 : int

logic o129 : bool

logic r52b1 : int

logic r53b1 : int

logic shift1 : int

logic r58b1 : int

logic r59b1 : int

logic k2 : int

logic string_search__qs__result1 : int

logic result : bool

logic bad_shift : (int,positive) farray

logic result1 : int

logic i1 : int

logic result2 : bool

logic temp___3111 : int

logic result3 : int

logic r52b2 : int

logic result4 : int

logic r53b2 : int

logic result5 : bool

logic result6 : int

logic string_search__qs__result2 : int

logic result7 : bool

logic result8 : int

logic shift2 : int

logic result9 : int

logic r58b2 : int

logic result10 : int

logic r59b2 : int

logic result11 : int

logic k3 : int

logic k4 : int

logic result12 : int

logic k5 : int

logic k6 : int

logic k7 : int

logic k8 : int

logic k9 : int

logic k10 : int

logic k11 : int

logic i2 : int

logic r52b3 : int

logic r53b3 : int

logic shift3 : int

logic r58b3 : int

logic r59b3 : int

logic k12 : int

logic string_search__qs__result3 : int

logic temp___3112 : int

logic result13 : int

logic temp___3113 : int

logic result14 : int

logic i3 : int

logic result15 : bool

logic result16 : int

logic r52b4 : int

logic result17 : int

logic r53b4 : int

logic result18 : bool

logic result19 : int

logic string_search__qs__result4 : int

logic string_search__qs__result5 : int

logic string_search__qs__result6 : int

logic result20 : bool

logic result21 : int

logic shift4 : int

logic result22 : int

logic r58b4 : int

logic result23 : int

logic r59b4 : int

logic result24 : int

logic k13 : int

logic k14 : int

logic result25 : int

logic k15 : int

logic k16 : int

logic k17 : int

logic k18 : int

logic k19 : int

logic k20 : int

logic k21 : int

logic k22 : int

logic k23 : int

logic r52b5 : int

logic r53b5 : int

logic string_search__qs__result7 : int

logic r52b6 : int

logic r53b6 : int

logic string_search__qs__result8 : int

logic i4 : int

logic r52b7 : int

logic r53b7 : int

logic shift5 : int

logic r58b5 : int

logic r59b5 : int

logic k24 : int

logic string_search__qs__result9 : int

logic temp___3114 : int

logic i5 : int

logic r52b8 : int

logic r53b8 : int

logic shift6 : int

logic r58b6 : int

logic r59b6 : int

logic k25 : int

logic string_search__qs__result10 : int

logic temp___3115 : int

logic i6 : int

logic r52b9 : int

logic r53b9 : int

logic shift7 : int

logic r58b7 : int

logic r59b7 : int

logic k26 : int

logic string_search__qs__result11 : int

logic temp___3116 : int

logic i7 : int

logic r52b10 : int

logic r53b10 : int

logic shift8 : int

logic r58b8 : int

logic r59b8 : int

logic k27 : int

logic string_search__qs__result12 : int

logic temp___3117 : int

logic i8 : int

logic r52b11 : int

logic r53b11 : int

logic shift9 : int

logic r58b9 : int

logic r59b9 : int

logic k28 : int

logic string_search__qs__result13 : int

logic temp___3118 : int

logic i9 : int

logic r52b12 : int

logic r53b12 : int

logic shift10 : int

logic r58b10 : int

logic r59b10 : int

logic k29 : int

logic string_search__qs__result14 : int

logic temp___3119 : int

logic i10 : int

logic r52b13 : int

logic r53b13 : int

logic shift11 : int

logic r58b11 : int

logic r59b11 : int

logic k30 : int

logic string_search__qs__result15 : int

logic i11 : int

logic r52b14 : int

logic r53b14 : int

logic shift12 : int

logic r58b12 : int

logic r59b12 : int

logic k31 : int

logic string_search__qs__result16 : int

logic i12 : int

logic r52b15 : int

logic r53b15 : int

logic shift13 : int

logic r58b13 : int

logic r59b13 : int

logic k32 : int

logic string_search__qs__result17 : int

logic i13 : int

logic r52b16 : int

logic r53b16 : int

logic shift14 : int

logic r58b14 : int

logic r59b14 : int

logic k33 : int

logic string_search__qs__result18 : int

logic result26 : int

logic string_search__qs__result19 : int

logic string_search__qs__result20 : int

logic string_search__qs__result21 : int

logic i14 : int

logic r52b17 : int

logic r53b17 : int

logic shift15 : int

logic r58b15 : int

logic r59b15 : int

logic k34 : int

logic string_search__qs__result22 : int

logic i15 : int

logic r52b18 : int

logic r53b18 : int

logic shift16 : int

logic r58b16 : int

logic r59b16 : int

logic k35 : int

logic string_search__qs__result23 : int

logic bad_shift1 : (int,positive) farray

logic i16 : int

logic r52b19 : int

logic r53b19 : int

logic shift17 : int

logic r58b17 : int

logic r59b17 : int

logic k36 : int

logic string_search__qs__result24 : int

logic bad_shift2 : (int,positive) farray

logic i17 : int

logic r52b20 : int

logic r53b20 : int

logic shift18 : int

logic r58b18 : int

logic r59b18 : int

logic k37 : int

logic string_search__qs__result25 : int

logic result27 : bool

axiom H : (dynamic_property(1, 2147483647, to_rep2(first(needle1)),
  to_rep2(last(needle1))) and (to_rep2(first(needle1)) = 1))

axiom H1 : (dynamic_property(1, 2147483647, to_rep2(first(haystack1)),
  to_rep2(last(haystack1))) and (to_rep2(first(haystack1)) = 1))

axiom H2 : ((length({ elts = needle; rt = needle1 }) <  2147483647) and
  ((length({ elts = haystack; rt = haystack1 }) <  2147483646) and
  ((1 <= length({ elts = needle; rt = needle1 })) and (length({ elts =
  needle; rt = needle1 }) <= length({ elts = haystack; rt = haystack1 })))))

axiom H3 : ((1 <= 2147483647) -> in_range2(i))

axiom H4 :
  ((forall c:int. (((0 <= c) and (c <= 255)) ->
   ((1 <= to_rep((bad_shift[c]))) and (to_rep((bad_shift[c])) <= (length({
   elts = needle; rt = needle1 }) + 1))))) and
  (forall c:int. (((0 <= c) and (c <= 255)) ->
  (((to_rep((bad_shift[c])) = (length({ elts = needle; rt = needle1
  }) + 1)) ->
  (forall k38:int. (((to_rep2(first(needle1)) <= k38) and
  (k38 <= to_rep2(last(needle1)))) -> (not (c = to_rep1((needle[k38]))))))) and
  ((not (to_rep((bad_shift[c])) = (length({ elts = needle; rt = needle1
  }) + 1))) -> ((to_rep1((needle[((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift[c]))) + 1)])) = c) and
  (forall k38:int. (((((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift[c]))) + 2) <= k38) and
  (k38 <= to_rep2(last(needle1)))) -> (not (to_rep1((needle[k38])) = c))))))))))

axiom H5 : (result1 = i)

axiom H6 : (i1 = 1)

axiom H7 : ((o2 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 })))

axiom H8 : ((o3 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 })))

axiom H9 : (o4 = (o3 - o2))

axiom H10 : ((o5 = o4) and in_range1(o4))

axiom H11 : (o6 = (o5 + 1))

axiom H12 : ((o7 = o6) and in_range1(o6))

axiom H13 : (((i1 <= o7) -> (result2 = true)) and ((not (i1 <= o7)) ->
  (result2 = false)))

axiom H14 : (result2 = true)

axiom H15 : (result3 = r52b)

axiom H16 : (r52b2 = i1)

axiom H17 : in_range2(r52b2)

axiom H18 : ((o8 = (to_rep2(last(needle1)) - 1)) and
  in_range1((to_rep2(last(needle1)) - 1)))

axiom H19 : (o9 = (i1 + o8))

axiom H20 : ((o10 = o9) and in_range1(o9))

axiom H21 : (result4 = r53b)

axiom H22 : (r53b2 = o10)

axiom H23 : in_range1(r53b2)

axiom H24 : ((r52b2 <= r53b2) -> (((to_rep2(first(haystack1)) <= r52b2) and
  (r52b2 <= to_rep2(last(haystack1)))) and
  ((to_rep2(first(haystack1)) <= r53b2) and
  (r53b2 <= to_rep2(last(haystack1))))))

axiom H25 : (o11 = haystack)

axiom H26 : (o11 = temp___296)

axiom H27 : (mk1(r52b2, r53b2) = temp___2961)

axiom H28 : (result5 = bool_eq5(needle, to_rep2(first(needle1)),
  to_rep2(last(needle1)), temp___296, to_rep2(first2(temp___2961)),
  to_rep2(last2(temp___2961))))

axiom H29 : (not (result5 = true))

axiom H30 : (string_search__qs__result2 = string_search__qs__result)

axiom H31 : (string_search__qs__result2 = string_search__qs__result1)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1(length({ elts = needle; rt = needle1 }))
