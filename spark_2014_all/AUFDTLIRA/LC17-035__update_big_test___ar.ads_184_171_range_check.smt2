(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_152 Int) (temp___is_init_149 Bool) (temp___skip_constant_150 Bool) (temp___do_toplevel_151 Bool)) Bool (=> (or (= temp___is_init_149 true) (<= 1 10)) (in_range temp___expr_152)))
(declare-sort et1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 99)) (in_range1 temp___expr_176)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (et1 Int) (Array Int et1))
(assert (forall ((v et1)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun temp___641 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___643 (Array Int et1))) (forall ((temp___644 Int) (temp___645 Int) (temp___646 Int) (temp___647 Int)) (let ((temp___642 (temp___641 temp___643 temp___644 temp___645 temp___646 temp___647))) (forall ((temp___648 Int)) (ite (= temp___648 temp___646) (= (select temp___642 temp___648) (of_rep temp___647)) (ite (= temp___648 temp___644) (= (select temp___642 temp___648) (of_rep temp___645)) (= (select temp___642 temp___648) (select temp___643 temp___648)))))))))
(declare-fun temp___650 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___652 (Array Int et1))) (forall ((temp___653 Int) (temp___654 Int) (temp___655 Int) (temp___656 Int)) (let ((temp___651 (temp___650 temp___652 temp___653 temp___654 temp___655 temp___656))) (forall ((temp___657 Int)) (ite (= temp___657 temp___655) (= (select temp___651 temp___657) (of_rep temp___656)) (ite (= temp___657 temp___653) (= (select temp___651 temp___657) (of_rep temp___654)) (= (select temp___651 temp___657) (select temp___652 temp___657)))))))))
(declare-fun temp___659 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___661 (Array Int et1))) (forall ((temp___662 Int) (temp___663 Int) (temp___664 Int) (temp___665 Int)) (let ((temp___660 (temp___659 temp___661 temp___662 temp___663 temp___664 temp___665))) (forall ((temp___666 Int)) (ite (= temp___666 temp___664) (= (select temp___660 temp___666) (of_rep temp___665)) (ite (= temp___666 temp___662) (= (select temp___660 temp___666) (of_rep temp___663)) (= (select temp___660 temp___666) (select temp___661 temp___666)))))))))
(declare-fun temp___668 ((Array Int et1) Int Int Int Int) (Array Int et1))
(assert (forall ((temp___670 (Array Int et1))) (forall ((temp___671 Int) (temp___672 Int) (temp___673 Int) (temp___674 Int)) (let ((temp___669 (temp___668 temp___670 temp___671 temp___672 temp___673 temp___674))) (forall ((temp___675 Int)) (ite (= temp___675 temp___673) (= (select temp___669 temp___675) (of_rep temp___674)) (ite (= temp___675 temp___671) (= (select temp___669 temp___675) (of_rep temp___672)) (= (select temp___669 temp___675) (select temp___670 temp___675)))))))))
(declare-fun temp___4365 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___4367 (Array Int et1))) (forall ((temp___4368 Int) (temp___4369 Int)) (let ((temp___4366 (temp___4365 temp___4367 temp___4368 temp___4369))) (forall ((temp___4370 Int)) (ite (= temp___4370 temp___4368) (= (select temp___4366 temp___4370) (of_rep temp___4369)) (= (select temp___4366 temp___4370) (select temp___4367 temp___4370))))))))
(declare-const a (Array Int et1))
(declare-const j Int)
(declare-const f Int)
(declare-const t (Array Int et1))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 et1)
(declare-const o5 (Array Int et1))
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const temp___4379 (Array Int et1))
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const temp___4377 (Array Int et1))
(declare-const result (Array Int et1))
(declare-const t1 (Array Int et1))
(declare-const result1 (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const result3 Int)
(declare-const j2 Int)
(declare-const result4 Int)
(declare-const f1 Int)
(declare-const result5 Int)
(declare-const f2 Int)
(declare-const result6 (Array Int et1))
(declare-const a2 (Array Int et1))
(declare-const a3 (Array Int et1))
(declare-const j3 Int)
(declare-const f3 Int)
(declare-const t2 (Array Int et1))
(declare-const a4 (Array Int et1))
(declare-const j4 Int)
(declare-const f4 Int)
(declare-const t3 (Array Int et1))
(declare-const result7 Bool)
(declare-const result8 Bool)
(assert (in_range i))
(assert (in_range1 e))
(assert (and (and (=> (<= 1 10) (in_range j)) (and (=> (<= 0 99) (in_range1 f)) (and (= (bool_eq a1 1 10 (temp___4365 t1 i e) 1 10) true) (and (ite (= i 10) (and (= (mk_int__ref result2) (mk_int__ref j)) (= j1 1)) (and (and (and (= o2 (+ i 1)) (in_range (+ i 1))) (and (= (mk_int__ref result3) (mk_int__ref j)) (= j2 o2))) (= j1 j2))) (and (ite (= e 0) (and (= (mk_int__ref result4) (mk_int__ref f)) (= f1 99)) (and (and (and (= o3 (- e 1)) (in_range1 (- e 1))) (and (= (mk_int__ref result5) (mk_int__ref f)) (= f2 o3))) (= f1 f2))) (and (and (= (to_rep o4) f1) (= o5 (store a1 j1 o4))) (and (= a1 result6) (= a2 o5)))))))) (and (and (= t1 t2) (and (= f1 f3) (and (= j1 j3) (= a2 a3)))) (and (= t3 t1) (and (= f4 f1) (and (= j4 j1) (= a4 a2)))))))
(assert (< i 10))
(assert (=> (< 0 e) (and (= o8 (- e 1)) (in_range1 (- e 1)))))
(assert (=> (< 0 e) (and (= o9 (+ i 1)) (in_range (+ i 1)))))
(assert (=> (< 0 e) (= temp___4377 (temp___641 a i e o9 o8))))
(assert (=> (< 0 e) (= result8 (bool_eq a3 1 10 temp___4377 1 10))))
(assert (=> (not (< 0 e)) (= result8 false)))
(assert (not (= result8 true)))
(assert (= e 0))
(assert (not (in_range (+ i 1))))
(check-sat)
(exit)
