(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and
  ((a[temp___idx_156]) = (b[((b__first - a__first) + temp___idx_156)]))) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  ((a[temp___idx_156]) = (b[((b__first - a__first) + temp___idx_156)])))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  ((a[temp___idx_156]) = (b[((b__first - a__first) + temp___idx_156)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,bool) farray; rt : t
}

function to_array(a: us_t) : (int,bool) farray = (a).elts

function of_array(a: (int,bool) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,bool) farray -> int

logic value__component__size : int

logic object__component__size : (int,bool) farray -> int

logic value__alignment : int

logic object__alignment : (int,bool) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,bool) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,bool) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,bool) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,bool) farray

logic dummy3 : t

type a1__ref = { a1__content : us_t
}

function a1__ref___projection(a: a1__ref) : us_t = (a).a1__content

type tTxSP1

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTxSP1, tTxSP1 -> bool

logic dummy4 : tTxSP1

type tTxSP1__ref = { tTxSP1__content : tTxSP1
}

function tTxSP1__ref___projection(a: tTxSP1__ref) : tTxSP1 =
  (a).tTxSP1__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type tTySP1

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tTySP1, tTySP1 -> bool

logic dummy5 : tTySP1

type tTySP1__ref = { tTySP1__content : tTySP1
}

function tTySP1__ref___projection(a: tTySP1__ref) : tTySP1 =
  (a).tTySP1__content

logic attr__ATTRIBUTE_ADDRESS2 : int

type tTxSP11

predicate in_range5(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTxSP11, tTxSP11 -> bool

logic dummy6 : tTxSP11

type tTxSP1__ref1 = { tTxSP1__content1 : tTxSP11
}

function tTxSP1__ref___2__projection(a: tTxSP1__ref1) : tTxSP11 =
  (a).tTxSP1__content1

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTySP11

predicate in_range6(x: int) = ((1 <= x) and (x <= 11))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tTySP11, tTySP11 -> bool

logic dummy7 : tTySP11

type tTySP1__ref1 = { tTySP1__content1 : tTySP11
}

function tTySP1__ref___2__projection(a: tTySP1__ref1) : tTySP11 =
  (a).tTySP1__content1

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTxSP12

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tTxSP12, tTxSP12 -> bool

logic dummy8 : tTxSP12

type tTxSP1__ref2 = { tTxSP1__content2 : tTxSP12
}

function tTxSP1__ref___3__projection(a: tTxSP1__ref2) : tTxSP12 =
  (a).tTxSP1__content2

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type tTxSP13

predicate in_range8(x: int) = ((1 <= x) and (x <= 11))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tTxSP13, tTxSP13 -> bool

logic dummy9 : tTxSP13

type tTxSP1__ref3 = { tTxSP1__content3 : tTxSP13
}

function tTxSP1__ref___4__projection(a: tTxSP1__ref3) : tTxSP13 =
  (a).tTxSP1__content3

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

type tTxSP14

predicate in_range9(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : tTxSP14, tTxSP14 -> bool

logic dummy10 : tTxSP14

type tTxSP1__ref4 = { tTxSP1__content4 : tTxSP14
}

function tTxSP1__ref___5__projection(a: tTxSP1__ref4) : tTxSP14 =
  (a).tTxSP1__content4

logic attr__ATTRIBUTE_ADDRESS9 : int

type tTxSP15

predicate in_range10(x: int) = ((1 <= x) and (x <= 11))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : tTxSP15, tTxSP15 -> bool

logic dummy11 : tTxSP15

type tTxSP1__ref5 = { tTxSP1__content5 : tTxSP15
}

function tTxSP1__ref___6__projection(a: tTxSP1__ref5) : tTxSP15 =
  (a).tTxSP1__content5

logic attr__ATTRIBUTE_ADDRESS10 : int

logic do_checks__do_length_check__B_19__y__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_19__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_20__y__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_20__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_21__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_22__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_23__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_24__x__aggregate_def : bool -> (int,bool) farray

axiom def_axiom :
  (forall temp___890:bool.
  (forall temp___891:int.
  ((do_checks__do_length_check__B_19__x__aggregate_def(temp___890)[temp___891]) = temp___890)))

axiom def_axiom1 :
  (forall temp___887:bool.
  (forall temp___888:int.
  ((do_checks__do_length_check__B_19__y__aggregate_def(temp___887)[temp___888]) = temp___887)))

axiom def_axiom2 :
  (forall temp___898:bool.
  (forall temp___899:int.
  ((do_checks__do_length_check__B_20__x__aggregate_def(temp___898)[temp___899]) = temp___898)))

axiom def_axiom3 :
  (forall temp___895:bool.
  (forall temp___896:int.
  ((do_checks__do_length_check__B_20__y__aggregate_def(temp___895)[temp___896]) = temp___895)))

axiom def_axiom4 :
  (forall temp___901:bool.
  (forall temp___902:int.
  ((do_checks__do_length_check__B_21__x__aggregate_def(temp___901)[temp___902]) = temp___901)))

axiom def_axiom5 :
  (forall temp___904:bool.
  (forall temp___905:int.
  ((do_checks__do_length_check__B_22__x__aggregate_def(temp___904)[temp___905]) = temp___904)))

axiom def_axiom6 :
  (forall temp___908:bool.
  (forall temp___909:int.
  ((do_checks__do_length_check__B_23__x__aggregate_def(temp___908)[temp___909]) = temp___908)))

axiom def_axiom7 :
  (forall temp___912:bool.
  (forall temp___913:int.
  ((do_checks__do_length_check__B_24__x__aggregate_def(temp___912)[temp___913]) = temp___912)))

 (* File "do_checks.adb", line 285, characters 0-0 *)
goal WP_parameter_def :
  (forall branch:int. forall x:(int,bool) farray.
  forall result:(int,bool) farray. forall x1:(int,bool) farray.
  (in_range2(branch) -> ((not (branch = 100)) -> ((not (branch = 101)) ->
  ((not (branch = 102)) -> ((branch = 103) -> (((result = x) and
  (x1 = do_checks__do_length_check__B_22__x__aggregate_def(of_int(0)))) ->
  (to_rep(first(mk(1, 11))) = 1))))))))
