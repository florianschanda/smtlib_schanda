(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type sum_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : sum_type, sum_type -> bool

logic dummy2 : sum_type

type sum_type__ref = { sum_type__content : sum_type
}

function sum_type__ref___projection(a: sum_type__ref) : sum_type =
  (a).sum_type__content

type index_type

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_type, index_type -> bool

logic dummy3 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bool, int -> (int,bool) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)])))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

type map__ref1 = { map__content1 : (int,positive) farray
}

logic slide1 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq1 :
  (forall a:(int,positive) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : positive, int -> (int,positive) farray

axiom singleton_def1 :
  (forall v:positive.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic partial_count_selected_locations : (int,bool) farray, int -> int

logic partial_count_selected_locations__function_guard : int,
  (int,bool) farray, int -> prop

axiom partial_count_selected_locations__def_axiom :
  (forall sel:(int,bool) farray.
  (forall from:int [partial_count_selected_locations(sel, from)].
  (in_range4(from) -> ((((sel[from]) = true) -> (((from <  100) ->
  (partial_count_selected_locations(sel,
  from) = (1 + partial_count_selected_locations(sel, (from + 1))))) and
  ((not (from <  100)) -> (partial_count_selected_locations(sel,
  from) = (1 + 0))))) and ((not ((sel[from]) = true)) -> (((from <  100) ->
  (partial_count_selected_locations(sel,
  from) = (0 + partial_count_selected_locations(sel, (from + 1))))) and
  ((not (from <  100)) -> (partial_count_selected_locations(sel,
  from) = (0 + 0)))))))))

logic count_selected_locations : (int,bool) farray -> int

logic count_selected_locations__function_guard : int,
  (int,bool) farray -> prop

axiom count_selected_locations__post_axiom :
  (forall sel:(int,bool) farray [count_selected_locations(sel)].
  in_range3(count_selected_locations(sel)))

axiom count_selected_locations__def_axiom :
  (forall sel:(int,bool) farray [count_selected_locations(sel)].
  (count_selected_locations(sel) = partial_count_selected_locations(sel, 1)))

logic sel : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic max : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic st_count : int

logic lowest_max : int

logic st : int

logic count_locations__check_selected_locations__result : bool

logic temp___175 : int

logic temp___174 : int

logic temp___173 : int

logic s : int

logic o : int

logic s1 : int

logic o1 : int

logic o2 : positive

logic o3 : int

logic o4 : bool

logic s2 : int

logic o5 : bool

logic o6 : int

logic result : int

logic st_count1 : int

logic result1 : int

logic lowest_max1 : int

logic result2 : int

logic st1 : int

logic st_count2 : int

logic lowest_max2 : int

logic st2 : int

logic result3 : bool

logic result4 : bool

logic result5 : int

logic st_count3 : int

logic result6 : int

logic lowest_max3 : int

logic result7 : int

logic st3 : int

logic st_count4 : int

logic lowest_max4 : int

logic st4 : int

logic st_count5 : int

logic lowest_max5 : int

logic st5 : int

logic st_count6 : int

logic lowest_max6 : int

logic st6 : int

logic st_count7 : int

logic lowest_max7 : int

logic st7 : int

logic result8 : bool

logic count_locations__check_selected_locations__result1 : bool

logic count_locations__check_selected_locations__result2 : bool

logic count_locations__check_selected_locations__result3 : bool

logic st_count8 : int

logic lowest_max8 : int

logic st8 : int

logic count_locations__check_selected_locations__result4 : bool

logic st_count9 : int

logic lowest_max9 : int

logic st9 : int

logic count_locations__check_selected_locations__result5 : bool

axiom H : (result = st_count)

axiom H1 : (st_count1 = 0)

axiom H2 : in_range3(st_count1)

axiom H3 : (result1 = lowest_max)

axiom H4 : (lowest_max1 = 2147483647)

axiom H5 : in_range1(lowest_max1)

axiom H6 : (result2 = st)

axiom H7 : (st1 = 1)

axiom H8 : (((1 <= st1) and (st1 <= 100)) -> (temp___175 = lowest_max1))

axiom H9 : (((1 <= st1) and (st1 <= 100)) -> (temp___174 = st_count1))

axiom H10 : (((1 <= st1) and (st1 <= 100)) -> (temp___173 = st1))

axiom H11 : (((1 <= st1) and (st1 <= 100)) ->
  (count_selected_locations(sel) = (st_count2 + partial_count_selected_locations(sel,
  st2))))

axiom H12 : (((1 <= st1) and (st1 <= 100)) ->
  (forall s3:int. (((1 <= s3) and (s3 <= (st2 - 1))) ->
  (((sel[s3]) = true) -> (lowest_max2 <= to_rep((max[s3])))))))

axiom H13 : (((1 <= st1) and (st1 <= 100)) ->
  (((forall s3:int. (((1 <= s3) and (s3 <= (st2 - 1))) ->
    (not ((sel[s3]) = true)))) and (lowest_max2 = 2147483647)) or
  (exists s3:int. (((1 <= s3) and (s3 <= (st2 - 1))) and
  (((sel[s3]) = true) and (to_rep((max[s3])) = lowest_max2))))))

axiom H14 : (((1 <= st1) and (st1 <= 100)) -> (st_count2 <  st2))

axiom H15 : (((1 <= st1) and (st1 <= 100)) -> (((((1 <= 100) ->
  in_range4(st2)) and ((0 <= 100) -> in_range3(st_count2))) and
  ((0 <= 2147483647) -> in_range1(lowest_max2))) and ((1 <= st2) and
  (st2 <= 100))))

axiom H16 : (((1 <= st1) and (st1 <= 100)) -> (((sel[st2]) = true) ->
  ((o6 = (st_count2 + 1)) and in_range3((st_count2 + 1)))))

axiom H17 : (((1 <= st1) and (st1 <= 100)) -> (((sel[st2]) = true) ->
  (st_count2 = result5)))

axiom H18 : (((1 <= st1) and (st1 <= 100)) -> (((sel[st2]) = true) ->
  (st_count3 = o6)))

axiom H19 : (((1 <= st1) and (st1 <= 100)) -> (((sel[st2]) = true) ->
  ((to_rep((max[st2])) <  lowest_max2) -> (lowest_max2 = result6))))

axiom H20 : (((1 <= st1) and (st1 <= 100)) -> (((sel[st2]) = true) ->
  ((to_rep((max[st2])) <  lowest_max2) ->
  (lowest_max3 = to_rep((max[st2]))))))

axiom H21 : (((1 <= st1) and (st1 <= 100)) -> (((sel[st2]) = true) ->
  ((not (to_rep((max[st2])) <  lowest_max2)) ->
  (lowest_max3 = lowest_max2))))

axiom H22 : (((1 <= st1) and (st1 <= 100)) -> ((not ((sel[st2]) = true)) ->
  (lowest_max3 = lowest_max2)))

axiom H23 : (((1 <= st1) and (st1 <= 100)) -> ((not ((sel[st2]) = true)) ->
  (st_count3 = st_count2)))

axiom H24 : (((1 <= st1) and (st1 <= 100)) -> (st2 = 100))

axiom H25 : (((1 <= st1) and (st1 <= 100)) -> (st2 = st4))

axiom H26 : (((1 <= st1) and (st1 <= 100)) -> (lowest_max3 = lowest_max4))

axiom H27 : (((1 <= st1) and (st1 <= 100)) -> (st_count3 = st_count4))

axiom H28 : (((1 <= st1) and (st1 <= 100)) -> (st5 = st2))

axiom H29 : (((1 <= st1) and (st1 <= 100)) -> (lowest_max5 = lowest_max3))

axiom H30 : (((1 <= st1) and (st1 <= 100)) -> (st_count5 = st_count3))

axiom H31 : (((1 <= st1) and (st1 <= 100)) -> (st6 = st4))

axiom H32 : (((1 <= st1) and (st1 <= 100)) -> (lowest_max6 = lowest_max4))

axiom H33 : (((1 <= st1) and (st1 <= 100)) -> (st_count6 = st_count4))

axiom H34 : (((1 <= st1) and (st1 <= 100)) -> (st7 = st5))

axiom H35 : (((1 <= st1) and (st1 <= 100)) -> (lowest_max7 = lowest_max5))

axiom H36 : (((1 <= st1) and (st1 <= 100)) -> (st_count7 = st_count5))

axiom H37 : ((not ((1 <= st1) and (st1 <= 100))) -> (st1 = st6))

axiom H38 : ((not ((1 <= st1) and (st1 <= 100))) ->
  (lowest_max1 = lowest_max6))

axiom H39 : ((not ((1 <= st1) and (st1 <= 100))) -> (st_count1 = st_count6))

axiom H40 : ((not ((1 <= st1) and (st1 <= 100))) -> (st7 = st1))

axiom H41 : ((not ((1 <= st1) and (st1 <= 100))) ->
  (lowest_max7 = lowest_max1))

axiom H42 : ((not ((1 <= st1) and (st1 <= 100))) -> (st_count7 = st_count1))

 (* File "count_locations.ads", line 22, characters 0-0 *)
goal WP_parameter_def : (st_count6 = count_selected_locations(sel))
