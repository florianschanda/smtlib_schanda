(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type path

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : path, path -> bool

logic dummy : path

type path__ref = { path__content : path
}

function path__ref___projection(a: path__ref) : path = (a).path__content

type light

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : light, light -> bool

logic dummy1 : light

type light__ref = { light__content : light
}

function light__ref___projection(a: light__ref) : light = (a).light__content

logic to_rep : light -> int

logic of_rep : int -> light

axiom inversion_axiom : (forall x:light [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:light [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,light) farray
}

logic slide : (int,light) farray, int, int -> (int,light) farray

axiom slide_eq :
  (forall a:(int,light) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,light) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,light) farray, int, int, (int,light) farray, int,
  int -> (int,light) farray

axiom concat_def :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : light, int -> (int,light) farray

axiom singleton_def :
  (forall v:light.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,light) farray, int, int, (int,light) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,light) farray. forall a__first:int. forall a__last:int.
  forall b:(int,light) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,light) farray, int, int, (int,light) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : path -> int

logic of_rep1 : int -> path

axiom inversion_axiom1 :
  (forall x:path [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:path [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__road_traffic__conflict__left : path;
rec__road_traffic__conflict__right : path
}

function us_split_fields_Left__projection(a: us_split_fields) : path =
  (a).rec__road_traffic__conflict__left

function us_split_fields_Right__projection(a: us_split_fields) : path =
  (a).rec__road_traffic__conflict__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__road_traffic__conflict__left) = to_rep1(((b).us_split_fields1).rec__road_traffic__conflict__left)) and
  (to_rep1(((a).us_split_fields1).rec__road_traffic__conflict__right) = to_rep1(((b).us_split_fields1).rec__road_traffic__conflict__right))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__road_traffic__conflict__left) = to_rep1(((b).us_split_fields1).rec__road_traffic__conflict__left)) and
  (to_rep1(((a).us_split_fields1).rec__road_traffic__conflict__right) = to_rep1(((b).us_split_fields1).rec__road_traffic__conflict__right)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:path. forall a1:path. (0 <= object__size({ us_split_fields1 = {
  rec__road_traffic__conflict__left = a; rec__road_traffic__conflict__right =
  a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:path. forall a1:path. (0 <= object__alignment({
  us_split_fields1 = { rec__road_traffic__conflict__left = a;
  rec__road_traffic__conflict__right = a1 } })))

logic road_traffic__conflict__left__first__bit : int

logic road_traffic__conflict__left__last__bit : int

logic road_traffic__conflict__left__position : int

axiom road_traffic__conflict__left__first__bit_axiom :
  (0 <= road_traffic__conflict__left__first__bit)

axiom road_traffic__conflict__left__last__bit_axiom :
  (road_traffic__conflict__left__first__bit <  road_traffic__conflict__left__last__bit)

axiom road_traffic__conflict__left__position_axiom :
  (0 <= road_traffic__conflict__left__position)

logic road_traffic__conflict__right__first__bit : int

logic road_traffic__conflict__right__last__bit : int

logic road_traffic__conflict__right__position : int

axiom road_traffic__conflict__right__first__bit_axiom :
  (0 <= road_traffic__conflict__right__first__bit)

axiom road_traffic__conflict__right__last__bit_axiom :
  (road_traffic__conflict__right__first__bit <  road_traffic__conflict__right__last__bit)

axiom road_traffic__conflict__right__position_axiom :
  (0 <= road_traffic__conflict__right__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : path

logic dummy3 : path

type conflict__ref = { conflict__content : us_rep
}

function conflict__ref___projection(a: conflict__ref) : us_rep =
  (a).conflict__content

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep, int -> (int,us_rep) farray

axiom singleton_def1 :
  (forall v:path. forall v1:path.
  (forall i:int [(singleton1({ us_split_fields1 = {
  rec__road_traffic__conflict__left = v; rec__road_traffic__conflict__right =
  v1 } }, i)[i])]. ((singleton1({ us_split_fields1 = {
  rec__road_traffic__conflict__left = v; rec__road_traffic__conflict__right =
  v1 } }, i)[i]) = { us_split_fields1 = { rec__road_traffic__conflict__left =
  v; rec__road_traffic__conflict__right = v1 } })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_137:int. ((((a__first <= temp___idx_137) and
  (temp___idx_137 <= a__last)) and (bool_eq5((a[temp___idx_137]),
  (b[((b__first - a__first) + temp___idx_137)])) = true)) or
  (not ((a__first <= temp___idx_137) and (temp___idx_137 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_137:int. (((a__first <= temp___idx_137) and
  (temp___idx_137 <= a__last)) -> (bool_eq5((a[temp___idx_137]),
  (b[((b__first - a__first) + temp___idx_137)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_137:int. (((a__first <= temp___idx_137) and
  (temp___idx_137 <= a__last)) -> (bool_eq5((a[temp___idx_137]),
  (b[((b__first - a__first) + temp___idx_137)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic safety_property : (int,light) farray, (int,us_rep) farray -> bool

logic safety_property__function_guard : bool, (int,light) farray,
  (int,us_rep) farray -> prop

type tTconflictsSP1

predicate in_range3(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTconflictsSP1, tTconflictsSP1 -> bool

logic dummy4 : tTconflictsSP1

type tTconflictsSP1__ref = { tTconflictsSP1__content : tTconflictsSP1
}

function tTconflictsSP1__ref___projection(a: tTconflictsSP1__ref) : tTconflictsSP1 =
  (a).tTconflictsSP1__content

axiom safety_property__post_axiom : true

axiom safety_property__def_axiom :
  (forall l:(int,light) farray.
  (forall road_traffic__conflicts:(int,us_rep) farray [safety_property(l,
  road_traffic__conflicts)]. ((safety_property(l,
  road_traffic__conflicts) = true) <->
  (forall temp___188:int. (((1 <= temp___188) and (temp___188 <= 8)) ->
  ((to_rep((l[to_rep1((((road_traffic__conflicts[temp___188])).us_split_fields1).rec__road_traffic__conflict__left)])) = 0) or
  (to_rep((l[to_rep1((((road_traffic__conflicts[temp___188])).us_split_fields1).rec__road_traffic__conflict__right)])) = 0)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic p : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___203 : (int,light) farray, int, int -> (int,light) farray

axiom def_axiom :
  (forall temp___205:(int,light) farray.
  (forall temp___206:int. forall temp___207:int.
  (forall temp___208:int. (((temp___208 = temp___206) ->
  ((temp___203(temp___205, temp___206,
  temp___207)[temp___208]) = of_rep(temp___207))) and
  ((not (temp___208 = temp___206)) -> ((temp___203(temp___205, temp___206,
  temp___207)[temp___208]) = (temp___205[temp___208])))))))

 (* File "road_traffic.ads", line 37, characters 0-0 *)
goal WP_parameter_def :
  (forall conflicts:(int,us_rep) farray. forall l:(int,light) farray.
  forall o:light. forall o1:(int,light) farray.
  forall result:(int,light) farray. forall l1:(int,light) farray.
  forall l2:(int,light) farray. forall l3:(int,light) farray.
  ((in_range1(p) and (((safety_property(l, conflicts) = true) and
  (to_rep((l[p])) = 2)) and ((((to_rep(o) = 1) and (o1 = (l[p <- o]))) and
  ((result = l) and (l1 = o1))) and ((l1 = l2) and (l3 = l1))))) ->
  (safety_property(l2, conflicts) = true)))
