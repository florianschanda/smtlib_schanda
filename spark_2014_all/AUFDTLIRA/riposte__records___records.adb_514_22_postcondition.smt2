(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort length_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (length_t length_t) Bool)
(declare-const dummy length_t)
(declare-datatypes () ((length_t__ref (mk_length_t__ref (length_t__content length_t)))))
(define-fun length_t__ref___projection ((a length_t__ref)) length_t (length_t__content a))
(declare-fun to_rep (length_t) Int)
(declare-fun of_rep (Int) length_t)
(assert (forall ((x length_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x length_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stack__t__len length_t) (rec__stack__t__elements (Array Int integer))))))
(define-fun us_split_fields_Len__projection ((a us_split_fields)) length_t (rec__stack__t__len a))
(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int integer) (rec__stack__t__elements a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__stack__t__len (us_split_fields1 a))) (to_rep (rec__stack__t__len (us_split_fields1 b)))) (= (bool_eq (rec__stack__t__elements (us_split_fields1 a)) 1 100 (rec__stack__t__elements (us_split_fields1 b)) 1 100) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stack__t__len__first__bit Int)
(declare-const stack__t__len__last__bit Int)
(declare-const stack__t__len__position Int)
(assert (<= 0 stack__t__len__first__bit))
(assert (< stack__t__len__first__bit stack__t__len__last__bit))
(assert (<= 0 stack__t__len__position))
(declare-const stack__t__elements__first__bit Int)
(declare-const stack__t__elements__last__bit Int)
(declare-const stack__t__elements__position Int)
(assert (<= 0 stack__t__elements__first__bit))
(assert (< stack__t__elements__first__bit stack__t__elements__last__bit))
(assert (<= 0 stack__t__elements__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__records_prooffuncs__part_private__unrelated Bool) (rec__records_prooffuncs__part_private__hidden us_rep)))))
(define-fun us_split_fields_Unrelated__projection ((a us_split_fields2)) Bool (rec__records_prooffuncs__part_private__unrelated a))
(define-fun us_split_fields_Hidden__projection ((a us_split_fields2)) us_rep (rec__records_prooffuncs__part_private__hidden a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (rec__records_prooffuncs__part_private__unrelated (us_split_fields3 a)) (rec__records_prooffuncs__part_private__unrelated (us_split_fields3 b))) (= (bool_eq1 (rec__records_prooffuncs__part_private__hidden (us_split_fields3 a)) (rec__records_prooffuncs__part_private__hidden (us_split_fields3 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const records_prooffuncs__part_private__unrelated__first__bit Int)
(declare-const records_prooffuncs__part_private__unrelated__last__bit Int)
(declare-const records_prooffuncs__part_private__unrelated__position Int)
(assert (<= 0 records_prooffuncs__part_private__unrelated__first__bit))
(assert (< records_prooffuncs__part_private__unrelated__first__bit records_prooffuncs__part_private__unrelated__last__bit))
(assert (<= 0 records_prooffuncs__part_private__unrelated__position))
(declare-const records_prooffuncs__part_private__hidden__first__bit Int)
(declare-const records_prooffuncs__part_private__hidden__last__bit Int)
(declare-const records_prooffuncs__part_private__hidden__position Int)
(assert (<= 0 records_prooffuncs__part_private__hidden__first__bit))
(assert (< records_prooffuncs__part_private__hidden__first__bit records_prooffuncs__part_private__hidden__last__bit))
(assert (<= 0 records_prooffuncs__part_private__hidden__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((part_private__ref (mk_part_private__ref (part_private__content us_rep1)))))
(define-fun part_private__ref___projection ((a part_private__ref)) us_rep1 (part_private__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r2 us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_140 Int) (temp___is_init_137 Bool) (temp___skip_constant_138 Bool) (temp___do_toplevel_139 Bool)) Bool (=> (or (= temp___is_init_137 true) (<= 0 100)) (in_range1 temp___expr_140)))
(declare-const r1__split_fields Bool)
(declare-const r1__split_fields1 length_t)
(declare-const r1__split_fields2 (Array Int integer))
(declare-const result Bool)
(declare-const result1 length_t)
(declare-const result2 (Array Int integer))
(declare-const r1__split_fields3 Bool)
(declare-const r1__split_fields4 length_t)
(declare-const r1__split_fields5 (Array Int integer))
(declare-const r1__split_fields6 Bool)
(declare-const r1__split_fields7 length_t)
(declare-const r1__split_fields8 (Array Int integer))
(declare-const r1__split_fields9 Bool)
(declare-const r1__split_fields10 length_t)
(declare-const r1__split_fields11 (Array Int integer))
(assert (= result r1__split_fields))
(assert (= result1 r1__split_fields1))
(assert (= result2 r1__split_fields2))
(assert (= (rec__records_prooffuncs__part_private__unrelated (us_split_fields3 r2)) r1__split_fields3))
(assert (= r1__split_fields1 r1__split_fields4))
(assert (= r1__split_fields2 r1__split_fields5))
(assert (= r1__split_fields6 r1__split_fields3))
(assert (= r1__split_fields7 r1__split_fields4))
(assert (= r1__split_fields8 r1__split_fields5))
(assert (= r1__split_fields9 r1__split_fields3))
(assert (= r1__split_fields10 r1__split_fields4))
(assert (= r1__split_fields11 r1__split_fields5))
(assert (= (bool_eq1 (mk___rep (mk___split_fields r1__split_fields7 r1__split_fields8)) (rec__records_prooffuncs__part_private__hidden (us_split_fields3 r2))) true))
(assert (not (= (bool_eq2 (mk___rep1 (mk___split_fields1 r1__split_fields6 (mk___rep (mk___split_fields r1__split_fields7 r1__split_fields8)))) r2) true)))
(check-sat)
(exit)
