(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun empty (Int) Bool)
(declare-fun empty__function_guard (Bool Int) Bool)
(declare-sort bingo_number 0)
(declare-fun bingo_numberqtint (bingo_number) Int)
(assert (forall ((i bingo_number)) (and (<= 0 (bingo_numberqtint i)) (<= (bingo_numberqtint i) 75))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 75)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (bingo_number bingo_number) Bool)
(declare-const dummy bingo_number)
(declare-datatypes () ((bingo_number__ref (mk_bingo_number__ref (bingo_number__content bingo_number)))))
(define-fun bingo_number__ref___projection ((a bingo_number__ref)) bingo_number (bingo_number__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 75)) (in_range1 temp___expr_159)))
(assert true)
(assert (forall ((bingo_basket__the_count Int)) (! (= (= (empty bingo_basket__the_count) true) (= bingo_basket__the_count 0)) :pattern ((empty bingo_basket__the_count)))))
(declare-fun random_number (us_private) Int)
(declare-fun random_number__function_guard (Int us_private) Bool)
(declare-sort callable_number 0)
(declare-fun callable_numberqtint (callable_number) Int)
(assert (forall ((i callable_number)) (and (<= 1 (callable_numberqtint i)) (<= (callable_numberqtint i) 75))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 75)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (callable_number callable_number) Bool)
(declare-const dummy1 callable_number)
(declare-datatypes () ((callable_number__ref (mk_callable_number__ref (callable_number__content callable_number)))))
(define-fun callable_number__ref___projection ((a callable_number__ref)) callable_number (callable_number__content a))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 75)) (in_range2 temp___expr_166)))
(define-fun to_rep ((x callable_number)) Int (callable_numberqtint x))
(declare-fun of_rep (Int) callable_number)
(assert (forall ((x callable_number)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x callable_number)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int callable_number))))))
(declare-fun slide ((Array Int callable_number) Int Int) (Array Int callable_number))
(assert (forall ((a (Array Int callable_number))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int callable_number))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int callable_number)) (a__first Int) (a__last Int) (b (Array Int callable_number)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int callable_number)) (b (Array Int callable_number))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const r6b Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const the_basket (Array Int callable_number))
(declare-const the_count Int)
(declare-const random_index Int)
(declare-const number Int)
(declare-const index Int)
(declare-const temp Int)
(declare-const bingo_gen us_private)
(declare-const temp___225 (Array Int callable_number))
(declare-const o callable_number)
(declare-const o1 (Array Int callable_number))
(declare-const temp___230 (Array Int callable_number))
(declare-const temp___229 Int)
(declare-const o2 Int)
(declare-const o3 callable_number)
(declare-const o4 (Array Int callable_number))
(declare-const o5 callable_number)
(declare-const o6 (Array Int callable_number))
(declare-const the_basket1 (Array Int callable_number))
(declare-const random_index1 Int)
(declare-const temp1 Int)
(declare-const result Int)
(declare-const number1 Int)
(declare-const the_basket2 (Array Int callable_number))
(declare-const number2 Int)
(declare-const result1 (Array Int callable_number))
(declare-const the_basket3 (Array Int callable_number))
(declare-const the_basket4 (Array Int callable_number))
(declare-const number3 Int)
(declare-const the_basket5 (Array Int callable_number))
(declare-const number4 Int)
(declare-const the_basket6 (Array Int callable_number))
(declare-const number5 Int)
(declare-const the_basket7 (Array Int callable_number))
(declare-const number6 Int)
(declare-const result2 Int)
(declare-const index1 Int)
(declare-const the_basket8 (Array Int callable_number))
(declare-const random_index2 Int)
(declare-const index2 Int)
(declare-const temp2 Int)
(declare-const result3 Int)
(declare-const random_index3 Int)
(declare-const result4 Int)
(declare-const temp3 Int)
(declare-const result5 (Array Int callable_number))
(declare-const the_basket9 (Array Int callable_number))
(declare-const result6 (Array Int callable_number))
(declare-const the_basket10 (Array Int callable_number))
(declare-const the_basket11 map__ref)
(declare-const random_index4 int__ref)
(declare-const index3 int__ref)
(declare-const temp4 int__ref)
(declare-const the_basket12 (Array Int callable_number))
(declare-const random_index5 Int)
(declare-const index4 Int)
(declare-const temp5 Int)
(declare-const the_basket13 map__ref)
(declare-const random_index6 int__ref)
(declare-const index5 int__ref)
(declare-const temp6 int__ref)
(declare-const the_basket14 (Array Int callable_number))
(declare-const random_index7 Int)
(declare-const index6 Int)
(declare-const temp7 Int)
(declare-const result7 int__ref)
(declare-const the_count1 Int)
(declare-const the_basket15 map__ref)
(declare-const the_count2 int__ref)
(declare-const random_index8 int__ref)
(declare-const number7 int__ref)
(declare-const index7 int__ref)
(declare-const temp8 int__ref)
(declare-const the_basket16 (Array Int callable_number))
(declare-const the_count3 Int)
(declare-const random_index9 Int)
(declare-const number8 Int)
(declare-const index8 Int)
(declare-const temp9 Int)
(define-fun number9 () int__ref (mk_int__ref number5))
(define-fun the_basket17 () map__ref (mk_map__ref the_basket6))
(assert (in_range1 the_count))
(assert (=> (<= 1 75) (in_range2 random_index)))
(assert (= result number))
(assert (= number1 1))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= temp___225 the_basket)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (and (forall ((temp___226 Int)) (=> (and (<= 1 temp___226) (<= temp___226 75)) (=> (or (< 75 temp___226) (or (< temp___226 1) (<= number2 temp___226))) (= (select the_basket2 temp___226) (select temp___225 temp___226))))) (and (<= 1 number2) (<= number2 75)))))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= (to_rep o) number2)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= o1 (store the_basket2 number2 o))))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= result1 the_basket2)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= the_basket3 o1)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= number2 75)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= number2 number3)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= the_basket3 the_basket4)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= number4 number2)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= the_basket5 the_basket3)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= number9 (mk_int__ref number3))))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= the_basket17 (mk_map__ref the_basket4))))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= number6 number4)))
(assert (=> (and (<= 1 number1) (<= number1 75)) (= the_basket7 the_basket5)))
(assert (=> (not (and (<= 1 number1) (<= number1 75))) (= number1 number5)))
(assert (=> (not (and (<= 1 number1) (<= number1 75))) (= the_basket17 (mk_map__ref the_basket))))
(assert (=> (not (and (<= 1 number1) (<= number1 75))) (= number6 number1)))
(assert (=> (not (and (<= 1 number1) (<= number1 75))) (= the_basket7 the_basket1)))
(assert (= result2 index))
(assert (= index1 1))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp___230 the_basket6)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp___229 random_index)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (and (=> (<= 1 75) (in_range2 random_index2)) (and (<= 1 index2) (<= index2 75)))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (and (= o2 (random_number bingo_gen)) (in_range2 o2))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= result3 random_index2)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index3 o2)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index3 r6b)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (in_range2 r6b)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (=> (<= 1 75) (in_range2 temp2))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= result4 temp2)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp3 (to_rep (select the_basket8 index2)))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= (to_rep o3) (to_rep (select the_basket8 r6b)))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= o4 (store the_basket8 index2 o3))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= result5 the_basket8)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket9 o4)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= (to_rep o5) temp3)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= o6 (store the_basket9 r6b o5))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= result6 the_basket9)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket10 o6)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= index2 75)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp4 (mk_int__ref temp3))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= index3 (mk_int__ref index2))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index4 (mk_int__ref random_index3))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket11 (mk_map__ref the_basket10))))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp5 temp3)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= index4 index2)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index5 random_index3)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket12 the_basket10)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp6 temp4)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= index5 index3)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index6 random_index4)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket13 the_basket11)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= temp7 temp5)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= index6 index4)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index7 random_index5)))
(assert (=> (and (<= 1 index1) (<= index1 75)) (= the_basket14 the_basket12)))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= temp6 (mk_int__ref temp))))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= index5 (mk_int__ref index1))))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= random_index6 (mk_int__ref random_index))))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= the_basket13 the_basket17)))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= temp7 temp1)))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= index6 index1)))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= random_index7 random_index1)))
(assert (=> (not (and (<= 1 index1) (<= index1 75))) (= the_basket14 the_basket7)))
(assert (= result7 (mk_int__ref the_count)))
(assert (= the_count1 75))
(assert (= temp8 temp6))
(assert (= index7 index5))
(assert (= number7 number9))
(assert (= random_index8 random_index6))
(assert (= the_count2 (mk_int__ref the_count1)))
(assert (= the_basket15 the_basket13))
(assert (= temp9 temp7))
(assert (= index8 index6))
(assert (= number8 number6))
(assert (= random_index9 random_index7))
(assert (= the_count3 the_count1))
(assert (= the_basket16 the_basket14))
(assert (not (not (= (empty (int__content the_count2)) true))))
(check-sat)
(exit)
