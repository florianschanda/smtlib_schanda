(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test_array_eq_bad__my_rec__f1 : integer;
rec__test_array_eq_bad__my_rec__f2 : integer
}

function us_split_fields_F1__projection(a: us_split_fields) : integer =
  (a).rec__test_array_eq_bad__my_rec__f1

function us_split_fields_F2__projection(a: us_split_fields) : integer =
  (a).rec__test_array_eq_bad__my_rec__f2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__test_array_eq_bad__my_rec__f1) = to_rep(((b).us_split_fields1).rec__test_array_eq_bad__my_rec__f1)) and
  (to_rep(((a).us_split_fields1).rec__test_array_eq_bad__my_rec__f2) = to_rep(((b).us_split_fields1).rec__test_array_eq_bad__my_rec__f2))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__test_array_eq_bad__my_rec__f1) = to_rep(((b).us_split_fields1).rec__test_array_eq_bad__my_rec__f1)) and
  (to_rep(((a).us_split_fields1).rec__test_array_eq_bad__my_rec__f2) = to_rep(((b).us_split_fields1).rec__test_array_eq_bad__my_rec__f2)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = a;
  rec__test_array_eq_bad__my_rec__f2 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = a;
  rec__test_array_eq_bad__my_rec__f2 = a1 } })))

logic test_array_eq_bad__my_rec__f1__first__bit : int

logic test_array_eq_bad__my_rec__f1__last__bit : int

logic test_array_eq_bad__my_rec__f1__position : int

axiom test_array_eq_bad__my_rec__f1__first__bit_axiom :
  (0 <= test_array_eq_bad__my_rec__f1__first__bit)

axiom test_array_eq_bad__my_rec__f1__last__bit_axiom :
  (test_array_eq_bad__my_rec__f1__first__bit <  test_array_eq_bad__my_rec__f1__last__bit)

axiom test_array_eq_bad__my_rec__f1__position_axiom :
  (0 <= test_array_eq_bad__my_rec__f1__position)

logic test_array_eq_bad__my_rec__f2__first__bit : int

logic test_array_eq_bad__my_rec__f2__last__bit : int

logic test_array_eq_bad__my_rec__f2__position : int

axiom test_array_eq_bad__my_rec__f2__first__bit_axiom :
  (0 <= test_array_eq_bad__my_rec__f2__first__bit)

axiom test_array_eq_bad__my_rec__f2__last__bit_axiom :
  (test_array_eq_bad__my_rec__f2__first__bit <  test_array_eq_bad__my_rec__f2__last__bit)

axiom test_array_eq_bad__my_rec__f2__position_axiom :
  (0 <= test_array_eq_bad__my_rec__f2__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

type tmy_arrayD1

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : tmy_arrayD1, tmy_arrayD1 -> bool

logic dummy3 : tmy_arrayD1

type tmy_arrayD1__ref = { tmy_arrayD1__content : tmy_arrayD1
}

function tmy_arrayD1__ref___projection(a: tmy_arrayD1__ref) : tmy_arrayD1 =
  (a).tmy_arrayD1__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:integer. forall v1:integer.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = v;
  rec__test_array_eq_bad__my_rec__f2 = v1 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = v;
  rec__test_array_eq_bad__my_rec__f2 = v1 } }, i)[i]) = { us_split_fields1 =
  { rec__test_array_eq_bad__my_rec__f1 = v;
  rec__test_array_eq_bad__my_rec__f2 = v1 } })))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (user_eq1((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (user_eq1((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (user_eq1((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic test_array_eq_bad__a__aggregate_def : us_rep,
  us_rep -> (int,us_rep) farray

axiom def_axiom :
  (forall temp___189:integer. forall temp___1891:integer.
  forall temp___190:integer. forall temp___1901:integer.
  (((test_array_eq_bad__a__aggregate_def({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = temp___189;
  rec__test_array_eq_bad__my_rec__f2 = temp___1891 } }, { us_split_fields1 =
  { rec__test_array_eq_bad__my_rec__f1 = temp___190;
  rec__test_array_eq_bad__my_rec__f2 = temp___1901 } })[1]) = {
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = temp___189;
  rec__test_array_eq_bad__my_rec__f2 = temp___1891 } }) and
  ((test_array_eq_bad__a__aggregate_def({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = temp___189;
  rec__test_array_eq_bad__my_rec__f2 = temp___1891 } }, { us_split_fields1 =
  { rec__test_array_eq_bad__my_rec__f1 = temp___190;
  rec__test_array_eq_bad__my_rec__f2 = temp___1901 } })[2]) = {
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = temp___190;
  rec__test_array_eq_bad__my_rec__f2 = temp___1901 } })))

logic test_array_eq_bad__b__aggregate_def : us_rep,
  us_rep -> (int,us_rep) farray

axiom def_axiom1 :
  (forall temp___193:integer. forall temp___1931:integer.
  forall temp___194:integer. forall temp___1941:integer.
  (((test_array_eq_bad__b__aggregate_def({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = temp___193;
  rec__test_array_eq_bad__my_rec__f2 = temp___1931 } }, { us_split_fields1 =
  { rec__test_array_eq_bad__my_rec__f1 = temp___194;
  rec__test_array_eq_bad__my_rec__f2 = temp___1941 } })[1]) = {
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = temp___193;
  rec__test_array_eq_bad__my_rec__f2 = temp___1931 } }) and
  ((test_array_eq_bad__b__aggregate_def({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = temp___193;
  rec__test_array_eq_bad__my_rec__f2 = temp___1931 } }, { us_split_fields1 =
  { rec__test_array_eq_bad__my_rec__f1 = temp___194;
  rec__test_array_eq_bad__my_rec__f2 = temp___1941 } })[2]) = {
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = temp___194;
  rec__test_array_eq_bad__my_rec__f2 = temp___1941 } })))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:integer. forall a1:integer. forall b:integer. forall b1:integer
  [user_eq1({ us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = a;
  rec__test_array_eq_bad__my_rec__f2 = a1 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = b;
  rec__test_array_eq_bad__my_rec__f2 = b1 } })]. (user_eq1({
  us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = a;
  rec__test_array_eq_bad__my_rec__f2 = a1 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = b;
  rec__test_array_eq_bad__my_rec__f2 = b1 } }) = oeq({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = a;
  rec__test_array_eq_bad__my_rec__f2 = a1 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = b;
  rec__test_array_eq_bad__my_rec__f2 = b1 } })))

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x:integer. forall x1:integer. forall y:integer. forall y1:integer
  [oeq({ us_split_fields1 = { rec__test_array_eq_bad__my_rec__f1 = x;
  rec__test_array_eq_bad__my_rec__f2 = x1 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = y;
  rec__test_array_eq_bad__my_rec__f2 = y1 } })]. ((oeq({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = x;
  rec__test_array_eq_bad__my_rec__f2 = x1 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = y;
  rec__test_array_eq_bad__my_rec__f2 = y1 } }) = true) <->
  (to_rep(x) = to_rep(y))))

logic a : (int,us_rep) farray

logic b : (int,us_rep) farray

logic o : integer

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic o4 : integer

logic o5 : integer

logic o6 : integer

logic o7 : integer

logic o8 : integer

logic o9 : integer

logic o10 : integer

logic o11 : integer

logic o12 : (int,us_rep) farray

logic o13 : integer

logic o14 : integer

logic o15 : integer

logic o16 : integer

logic o17 : integer

logic o18 : integer

logic o19 : integer

logic o20 : integer

logic o21 : integer

logic o22 : integer

logic o23 : integer

logic o24 : integer

logic o25 : (int,us_rep) farray

logic result : (int,us_rep) farray

logic a1 : (int,us_rep) farray

logic result1 : (int,us_rep) farray

logic b1 : (int,us_rep) farray

axiom H : (to_rep(o4) = 4)

axiom H1 : (to_rep(o5) = 3)

axiom H2 : (o5 = o6)

axiom H3 : (o4 = o7)

axiom H4 : (o8 = o6)

axiom H5 : (o9 = o7)

axiom H6 : (to_rep(o) = 2)

axiom H7 : (to_rep(o1) = 1)

axiom H8 : (o1 = o2)

axiom H9 : (o = o3)

axiom H10 : (o10 = o2)

axiom H11 : (o11 = o3)

axiom H12 : (o12 = test_array_eq_bad__a__aggregate_def({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = o10;
  rec__test_array_eq_bad__my_rec__f2 = o11 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = o8;
  rec__test_array_eq_bad__my_rec__f2 = o9 } }))

axiom H13 : (result = a)

axiom H14 : (a1 = o12)

axiom H15 : (to_rep(o17) = 3)

axiom H16 : (to_rep(o18) = 3)

axiom H17 : (o18 = o19)

axiom H18 : (o17 = o20)

axiom H19 : (o21 = o19)

axiom H20 : (o22 = o20)

axiom H21 : (to_rep(o13) = 1)

axiom H22 : (to_rep(o14) = 1)

axiom H23 : (o14 = o15)

axiom H24 : (o13 = o16)

axiom H25 : (o23 = o15)

axiom H26 : (o24 = o16)

axiom H27 : (o25 = test_array_eq_bad__b__aggregate_def({ us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = o23;
  rec__test_array_eq_bad__my_rec__f2 = o24 } }, { us_split_fields1 = {
  rec__test_array_eq_bad__my_rec__f1 = o21;
  rec__test_array_eq_bad__my_rec__f2 = o22 } }))

axiom H28 : (result1 = b)

axiom H29 : (b1 = o25)

 (* File "test_array_eq_bad.adb", line 7, characters 0-0 *)
goal WP_parameter_def : (not (bool_eq4(a1, 1, 2, b1, 1, 2) = true))
