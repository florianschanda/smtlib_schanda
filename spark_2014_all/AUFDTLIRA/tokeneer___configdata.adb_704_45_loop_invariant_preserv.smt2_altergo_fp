(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq8 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1(a)))

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

type accesspolicyt

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : accesspolicyt, accesspolicyt -> bool

logic dummy7 : accesspolicyt

type accesspolicyt__ref = { accesspolicyt__content : accesspolicyt
}

function accesspolicyt__ref___projection(a: accesspolicyt__ref) : accesspolicyt =
  (a).accesspolicyt__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type accesspolicytexti

predicate in_range6(x: int) = ((1 <= x) and (x <= 13))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : accesspolicytexti, accesspolicytexti -> bool

logic dummy8 : accesspolicytexti

type accesspolicytexti__ref = { accesspolicytexti__content :
accesspolicytexti
}

function accesspolicytexti__ref___projection(a: accesspolicytexti__ref) : accesspolicytexti =
  (a).accesspolicytexti__content

logic accesspolicytitle : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___String_Literal_158 : unit -> (int,character) farray

axiom temp___String_Literal_158__def_axiom :
  (((((((((((((to_rep((temp___String_Literal_158(void)[1])) = 65) and
  (to_rep((temp___String_Literal_158(void)[2])) = 67)) and
  (to_rep((temp___String_Literal_158(void)[3])) = 67)) and
  (to_rep((temp___String_Literal_158(void)[4])) = 69)) and
  (to_rep((temp___String_Literal_158(void)[5])) = 83)) and
  (to_rep((temp___String_Literal_158(void)[6])) = 83)) and
  (to_rep((temp___String_Literal_158(void)[7])) = 80)) and
  (to_rep((temp___String_Literal_158(void)[8])) = 79)) and
  (to_rep((temp___String_Literal_158(void)[9])) = 76)) and
  (to_rep((temp___String_Literal_158(void)[10])) = 73)) and
  (to_rep((temp___String_Literal_158(void)[11])) = 67)) and
  (to_rep((temp___String_Literal_158(void)[12])) = 89)) and
  (to_rep((temp___String_Literal_158(void)[13])) = 32))

type accesstexti

predicate in_range7(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : accesstexti, accesstexti -> bool

logic dummy9 : accesstexti

type accesstexti__ref = { accesstexti__content : accesstexti
}

function accesstexti__ref___projection(a: accesstexti__ref) : accesstexti =
  (a).accesstexti__content

logic to_rep2 : accesstexti -> int

logic of_rep2 : int -> accesstexti

axiom inversion_axiom2 :
  (forall x:accesstexti [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:accesstexti [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic dummy10 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__configdata__accessstringt__text :
(int,character) farray; rec__configdata__accessstringt__length : accesstexti
}

function us_split_fields_Text__2__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__configdata__accessstringt__text

function us_split_fields_Length__3__projection(a: us_split_fields) : accesstexti =
  (a).rec__configdata__accessstringt__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___9__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq12(a, b)].
  ((((bool_eq5(((a).us_split_fields1).rec__configdata__accessstringt__text,
  1, 12, ((b).us_split_fields1).rec__configdata__accessstringt__text, 1,
  12) = true) and
  (to_rep2(((a).us_split_fields1).rec__configdata__accessstringt__length) = to_rep2(((b).us_split_fields1).rec__configdata__accessstringt__length))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields1).rec__configdata__accessstringt__text,
  1, 12, ((b).us_split_fields1).rec__configdata__accessstringt__text, 1,
  12) = true) and
  (to_rep2(((a).us_split_fields1).rec__configdata__accessstringt__length) = to_rep2(((b).us_split_fields1).rec__configdata__accessstringt__length)))) ->
  (bool_eq12(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. forall a1:accesstexti.
  (0 <= object__size3({ us_split_fields1 = {
  rec__configdata__accessstringt__text = a;
  rec__configdata__accessstringt__length = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. forall a1:accesstexti.
  (0 <= object__alignment3({ us_split_fields1 = {
  rec__configdata__accessstringt__text = a;
  rec__configdata__accessstringt__length = a1 } })))

logic configdata__accessstringt__text__first__bit : int

logic configdata__accessstringt__text__last__bit : int

logic configdata__accessstringt__text__position : int

axiom configdata__accessstringt__text__first__bit_axiom :
  (0 <= configdata__accessstringt__text__first__bit)

axiom configdata__accessstringt__text__last__bit_axiom :
  (configdata__accessstringt__text__first__bit <  configdata__accessstringt__text__last__bit)

axiom configdata__accessstringt__text__position_axiom :
  (0 <= configdata__accessstringt__text__position)

logic configdata__accessstringt__length__first__bit : int

logic configdata__accessstringt__length__last__bit : int

logic configdata__accessstringt__length__position : int

axiom configdata__accessstringt__length__first__bit_axiom :
  (0 <= configdata__accessstringt__length__first__bit)

axiom configdata__accessstringt__length__last__bit_axiom :
  (configdata__accessstringt__length__first__bit <  configdata__accessstringt__length__last__bit)

axiom configdata__accessstringt__length__position_axiom :
  (0 <= configdata__accessstringt__length__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy11 : (int,character) farray

logic dummy12 : accesstexti

type accessstringt__ref = { accessstringt__content : us_rep1
}

function accessstringt__ref___projection(a: accessstringt__ref) : us_rep1 =
  (a).accessstringt__content

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def1 :
  (forall v:(int,character) farray. forall v1:accesstexti.
  (forall i:int [(singleton1({ us_split_fields1 = {
  rec__configdata__accessstringt__text = v;
  rec__configdata__accessstringt__length = v1 } }, i)[i])]. ((singleton1({
  us_split_fields1 = { rec__configdata__accessstringt__text = v;
  rec__configdata__accessstringt__length = v1 } }, i)[i]) = {
  us_split_fields1 = { rec__configdata__accessstringt__text = v;
  rec__configdata__accessstringt__length = v1 } })))

logic bool_eq13 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_178:int. ((((a__first <= temp___idx_178) and
  (temp___idx_178 <= a__last)) and (bool_eq12((a[temp___idx_178]),
  (b[((b__first - a__first) + temp___idx_178)])) = true)) or
  (not ((a__first <= temp___idx_178) and (temp___idx_178 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_178:int. (((a__first <= temp___idx_178) and
  (temp___idx_178 <= a__last)) -> (bool_eq12((a[temp___idx_178]),
  (b[((b__first - a__first) + temp___idx_178)])) = true))))) -> (bool_eq13(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_178:int. (((a__first <= temp___idx_178) and
  (temp___idx_178 <= a__last)) -> (bool_eq12((a[temp___idx_178]),
  (b[((b__first - a__first) + temp___idx_178)])) = true)))))))

logic accessstringlookup : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic configdata__accessstringlookup__aggregate_def : us_rep1,
  us_rep1 -> (int,us_rep1) farray

axiom def_axiom :
  (forall temp___180:(int,character) farray. forall temp___1801:accesstexti.
  forall temp___181:(int,character) farray. forall temp___1811:accesstexti.
  (((configdata__accessstringlookup__aggregate_def({ us_split_fields1 = {
  rec__configdata__accessstringt__text = temp___180;
  rec__configdata__accessstringt__length = temp___1801 } }, {
  us_split_fields1 = { rec__configdata__accessstringt__text = temp___181;
  rec__configdata__accessstringt__length = temp___1811 } })[1]) = {
  us_split_fields1 = { rec__configdata__accessstringt__text = temp___180;
  rec__configdata__accessstringt__length = temp___1801 } }) and
  ((configdata__accessstringlookup__aggregate_def({ us_split_fields1 = {
  rec__configdata__accessstringt__text = temp___180;
  rec__configdata__accessstringt__length = temp___1801 } }, {
  us_split_fields1 = { rec__configdata__accessstringt__text = temp___181;
  rec__configdata__accessstringt__length = temp___1811 } })[0]) = {
  us_split_fields1 = { rec__configdata__accessstringt__text = temp___181;
  rec__configdata__accessstringt__length = temp___1811 } })))

logic temp___String_Literal_183 : unit -> (int,character) farray

axiom temp___String_Literal_183__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_183(void)[1])) = 97) and
  (to_rep((temp___String_Literal_183(void)[2])) = 108)) and
  (to_rep((temp___String_Literal_183(void)[3])) = 108)) and
  (to_rep((temp___String_Literal_183(void)[4])) = 104)) and
  (to_rep((temp___String_Literal_183(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_183(void)[6])) = 117)) and
  (to_rep((temp___String_Literal_183(void)[7])) = 114)) and
  (to_rep((temp___String_Literal_183(void)[8])) = 115)) and
  (to_rep((temp___String_Literal_183(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_183(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_183(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_183(void)[12])) = 32))

logic temp___String_Literal_184 : unit -> (int,character) farray

axiom temp___String_Literal_184__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_184(void)[1])) = 119) and
  (to_rep((temp___String_Literal_184(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_184(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_184(void)[4])) = 107)) and
  (to_rep((temp___String_Literal_184(void)[5])) = 105)) and
  (to_rep((temp___String_Literal_184(void)[6])) = 110)) and
  (to_rep((temp___String_Literal_184(void)[7])) = 103)) and
  (to_rep((temp___String_Literal_184(void)[8])) = 104)) and
  (to_rep((temp___String_Literal_184(void)[9])) = 111)) and
  (to_rep((temp___String_Literal_184(void)[10])) = 117)) and
  (to_rep((temp___String_Literal_184(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_184(void)[12])) = 115))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy13 : integer

type t33b__ref = { t33b__content : integer
}

function t33b__ref___projection(a: t33b__ref) : integer = (a).t33b__content

logic attr__ATTRIBUTE_ADDRESS11 : int

axiom accesspolicytitle__def_axiom :
  (accesspolicytitle = temp___String_Literal_158(void))

axiom accessstringlookup__def_axiom :
  (accessstringlookup = configdata__accessstringlookup__aggregate_def({
  us_split_fields1 = { rec__configdata__accessstringt__text =
  temp___String_Literal_183(void); rec__configdata__accessstringt__length =
  of_rep2(8) } }, { us_split_fields1 = {
  rec__configdata__accessstringt__text = temp___String_Literal_184(void);
  rec__configdata__accessstringt__length = of_rep2(12) } }))

logic theaccesspolicy : int

logic thetitle : (int,character) farray

logic rawaccesspolicy : (int,character) farray

logic stop : int

logic matched : bool

logic ap : int

logic r32b : int

logic i : int

logic o : accesstexti

logic o1 : (int,character) farray

logic o2 : accesstexti

logic o3 : accesstexti

logic o4 : (int,character) farray

logic o5 : accesstexti

logic o6 : (int,character) farray

logic o7 : accesstexti

logic o8 : (int,character) farray

logic o9 : accesstexti

logic temp___1356 : (int,us_rep1) farray

logic o10 : integer

logic o11 : integer

logic o12 : integer

logic o13 : integer

logic temp___1347 : bool

logic temp___1348 : int

logic temp___1346 : int

logic o14 : int

logic o15 : character

logic o16 : int

logic o17 : character

logic o18 : int

logic o19 : int

logic o20 : bool

logic o21 : int

logic o22 : character

logic o23 : int

logic o24 : character

logic o25 : int

logic o26 : int

logic o27 : bool

logic r32b1 : int

logic i1 : int

logic result : bool

logic matched1 : bool

logic result1 : int

logic theaccesspolicy1 : int

logic stop1 : int

logic file__getstring__text : (int,character) farray

logic result2 : (int,character) farray

logic thetitle1 : (int,character) farray

logic stop2 : int

logic file__getline__item : (int,character) farray

logic result3 : (int,character) farray

logic rawaccesspolicy1 : (int,character) farray

logic result4 : int

logic ap1 : int

logic result5 : bool

logic matched2 : bool

logic result6 : int

logic r32b2 : int

logic result7 : int

logic i2 : int

logic matched3 : bool

logic i3 : int

logic result8 : bool

logic result9 : bool

logic matched4 : bool

logic result10 : int

logic i4 : int

logic matched5 : bool

logic matched6 : bool

logic matched7 : bool

logic i5 : int

logic matched8 : bool

logic i6 : int

logic matched9 : bool

logic i7 : int

logic matched10 : bool

logic i8 : int

logic matched11 : bool

logic i9 : int

logic matched12 : bool

logic i10 : int

logic matched13 : bool

logic r32b3 : int

logic i11 : int

logic matched14 : bool

logic r32b4 : int

logic i12 : int

logic theaccesspolicy2 : int

logic theaccesspolicy3 : int

logic result11 : int

logic ap2 : int

logic result12 : bool

logic matched15 : bool

logic result13 : int

logic r32b5 : int

logic result14 : int

logic i13 : int

logic matched16 : bool

logic i14 : int

logic result15 : bool

logic matched17 : bool

logic matched18 : bool

logic result16 : int

logic i15 : int

logic matched19 : bool

logic i16 : int

logic matched20 : bool

logic i17 : int

axiom H : (temp___String_Literal_158(void) = accesspolicytitle)

axiom H1 : (to_rep2(o3) = 12)

axiom H2 : (temp___String_Literal_184(void) = o4)

axiom H3 : (o3 = o5)

axiom H4 : (o6 = o4)

axiom H5 : (o7 = o5)

axiom H6 : (to_rep2(o) = 8)

axiom H7 : (temp___String_Literal_183(void) = o1)

axiom H8 : (o = o2)

axiom H9 : (o8 = o1)

axiom H10 : (o9 = o2)

axiom H11 : (temp___1356 = configdata__accessstringlookup__aggregate_def({
  us_split_fields1 = { rec__configdata__accessstringt__text = o8;
  rec__configdata__accessstringt__length = o9 } }, { us_split_fields1 = {
  rec__configdata__accessstringt__text = o6;
  rec__configdata__accessstringt__length = o7 } }))

axiom H12 : (temp___1356 = accessstringlookup)

axiom H13 : ((0 <= 1) -> in_range5(theaccesspolicy))

axiom H14 : ((0 <= 2147483647) -> in_range4(stop))

axiom H15 : (result = matched)

axiom H16 : (matched1 = of_int(0))

axiom H17 : (result1 = theaccesspolicy)

axiom H18 : (theaccesspolicy1 = 0)

axiom H19 : (to_rep1(o11) = 13)

axiom H20 : (to_rep1(o10) = 1)

axiom H21 : in_range4(stop1)

axiom H22 : (result2 = thetitle)

axiom H23 : (thetitle1 = slide(file__getstring__text, to_rep1(first(mk(1,
  13))), 1))

axiom H24 : (stop1 = 13)

axiom H25 : (bool_eq5(thetitle1, 1, 13, accesspolicytitle, 1, 13) = true)

axiom H26 : (to_rep1(o13) = 12)

axiom H27 : (to_rep1(o12) = 1)

axiom H28 : in_range4(stop2)

axiom H29 : (result3 = rawaccesspolicy)

axiom H30 : (rawaccesspolicy1 = slide(file__getline__item,
  to_rep1(first(mk(1, 12))), 1))

axiom H31 : (result4 = ap)

axiom H32 : (ap1 = 0)

axiom H33 :
  (stop2 = to_rep2((((accessstringlookup[ap1])).us_split_fields1).rec__configdata__accessstringt__length))

axiom H34 : (matched1 = result5)

axiom H35 : (matched2 = of_int(1))

axiom H36 : (result6 = r32b)

axiom H37 : (r32b2 = stop2)

axiom H38 : in_range4(r32b2)

axiom H39 : (result7 = i)

axiom H40 : (i2 = 1)

axiom H41 : (1 <= i2)

axiom H42 : (i2 <= r32b2)

axiom H43 : (i3 <= stop2)

axiom H44 : (((1 <= r32b2) -> dynamic_property1(1, r32b2, i3)) and
  ((1 <= i3) and (i3 <= r32b2)))

axiom H45 : ((1 <= i3) and (i3 <= 12))

axiom H46 : (o16 = i3)

axiom H47 : (o17 = (rawaccesspolicy1[o16]))

axiom H48 : (o18 = to_rep(o17))

axiom H49 : ((1 <= i3) and (i3 <= 12))

axiom H50 : (o14 = i3)

axiom H51 :
  (o15 = ((((accessstringlookup[ap1])).us_split_fields1).rec__configdata__accessstringt__text[o14]))

axiom H52 : (o19 = to_rep(o15))

axiom H53 : (((o19 = o18) -> (o20 = true)) and ((not (o19 = o18)) ->
  (o20 = false)))

axiom H54 : (((not (o20 = true)) -> (result8 = true)) and ((o20 = true) ->
  (result8 = false)))

axiom H55 : (not (result8 = true))

axiom H56 : (matched4 = matched3)

axiom H57 : (not (i3 = r32b2))

axiom H58 : (result10 = i3)

axiom H59 : (i4 = (i3 + 1))

 (* File "configdata.adb", line 646, characters 0-0 *)
goal WP_parameter_def : true
