(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort path 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (path path) Bool)
(declare-const dummy path)
(declare-datatypes () ((path__ref (mk_path__ref (path__content path)))))
(define-fun path__ref___projection ((a path__ref)) path (path__content a))
(define-fun dynamic_invariant ((temp___expr_164 Int) (temp___is_init_160 Bool) (temp___skip_constant_161 Bool) (temp___do_toplevel_162 Bool) (temp___do_typ_inv_163 Bool)) Bool (=> (or (= temp___is_init_160 true) (<= 0 3)) (in_range1 temp___expr_164)))
(declare-fun to_rep (path) Int)
(declare-fun of_rep (Int) path)
(assert (forall ((x path)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x path)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort light 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (light light) Bool)
(declare-const dummy1 light)
(declare-datatypes () ((light__ref (mk_light__ref (light__content light)))))
(define-fun light__ref___projection ((a light__ref)) light (light__content a))
(declare-fun to_rep1 (light) Int)
(declare-fun of_rep1 (Int) light)
(assert (forall ((x light)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x light)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int light))))))
(declare-fun slide ((Array Int light) Int Int) (Array Int light))
(assert (forall ((a (Array Int light))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int light))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int light)) (a__first Int) (a__last Int) (b (Array Int light)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int light)) (b (Array Int light))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__road_traffic__conflict__left path) (rec__road_traffic__conflict__right path)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) path (rec__road_traffic__conflict__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields)) path (rec__road_traffic__conflict__right a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__road_traffic__conflict__left (us_split_fields1 a))) (to_rep (rec__road_traffic__conflict__left (us_split_fields1 b)))) (= (to_rep (rec__road_traffic__conflict__right (us_split_fields1 a))) (to_rep (rec__road_traffic__conflict__right (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const road_traffic__conflict__left__first__bit Int)
(declare-const road_traffic__conflict__left__last__bit Int)
(declare-const road_traffic__conflict__left__position Int)
(assert (<= 0 road_traffic__conflict__left__first__bit))
(assert (< road_traffic__conflict__left__first__bit road_traffic__conflict__left__last__bit))
(assert (<= 0 road_traffic__conflict__left__position))
(declare-const road_traffic__conflict__right__first__bit Int)
(declare-const road_traffic__conflict__right__last__bit Int)
(declare-const road_traffic__conflict__right__position Int)
(assert (<= 0 road_traffic__conflict__right__first__bit))
(assert (< road_traffic__conflict__right__first__bit road_traffic__conflict__right__last__bit))
(assert (<= 0 road_traffic__conflict__right__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((conflict__ref (mk_conflict__ref (conflict__content us_rep)))))
(define-fun conflict__ref___projection ((a conflict__ref)) us_rep (conflict__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (bool_eq1 (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (bool_eq1 (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159))) true))))))))
(declare-sort tTconflictsSP1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tTconflictsSP1 tTconflictsSP1) Bool)
(declare-const dummy3 tTconflictsSP1)
(declare-datatypes () ((tTconflictsSP1__ref (mk_tTconflictsSP1__ref (tTconflictsSP1__content tTconflictsSP1)))))
(define-fun tTconflictsSP1__ref___projection ((a tTconflictsSP1__ref)) tTconflictsSP1 (tTconflictsSP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun safety_property ((Array Int light) (Array Int us_rep)) Bool)
(declare-fun safety_property__function_guard (Bool (Array Int light) (Array Int us_rep)) Bool)
(assert true)
(assert (forall ((l (Array Int light))) (forall ((road_traffic__conflicts (Array Int us_rep))) (! (= (= (safety_property l road_traffic__conflicts) true) (forall ((temp___216 Int)) (=> (and (<= 1 temp___216) (<= temp___216 8)) (let ((c (select road_traffic__conflicts temp___216))) (or (= (to_rep1 (select l (to_rep (rec__road_traffic__conflict__left (us_split_fields1 c))))) 0) (= (to_rep1 (select l (to_rep (rec__road_traffic__conflict__right (us_split_fields1 c))))) 0)))))) :pattern ((safety_property l road_traffic__conflicts))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const p Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_171 Int) (temp___is_init_167 Bool) (temp___skip_constant_168 Bool) (temp___do_toplevel_169 Bool) (temp___do_typ_inv_170 Bool)) Bool (=> (or (= temp___is_init_167 true) (<= 0 2)) (in_range2 temp___expr_171)))
(declare-const conflicts (Array Int us_rep))
(declare-const l (Array Int light))
(declare-const o light)
(declare-const o1 (Array Int light))
(declare-const result (Array Int light))
(declare-const l1 (Array Int light))
(declare-const l2 (Array Int light))
(declare-const l3 (Array Int light))
(assert (in_range1 p))
(assert (and (and (= (safety_property l conflicts) true) (= (to_rep1 (select l p)) 0)) (forall ((temp___251 Int)) (=> (and (<= 1 temp___251) (<= temp___251 8)) (let ((c (select conflicts temp___251))) (and (and (not (= (to_rep (rec__road_traffic__conflict__left (us_split_fields1 c))) (to_rep (rec__road_traffic__conflict__right (us_split_fields1 c))))) (=> (= (to_rep (rec__road_traffic__conflict__left (us_split_fields1 c))) p) (= (to_rep1 (select l (to_rep (rec__road_traffic__conflict__right (us_split_fields1 c))))) 0))) (=> (= (to_rep (rec__road_traffic__conflict__right (us_split_fields1 c))) p) (= (to_rep1 (select l (to_rep (rec__road_traffic__conflict__left (us_split_fields1 c))))) 0))))))))
(assert (= (to_rep1 o) 2))
(assert (= o1 (store l p o)))
(assert (= result l))
(assert (= l1 o1))
(assert (= l1 l2))
(assert (= l3 l1))
(assert (not (= (safety_property l2 conflicts) true)))
(check-sat)
(exit)
