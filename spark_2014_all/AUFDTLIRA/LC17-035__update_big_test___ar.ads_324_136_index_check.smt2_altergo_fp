(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range1(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : et1, et1 -> bool

logic dummy2 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy3 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq4((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___925 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___933 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___940 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___948 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___956 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___963 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___971 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___979 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___986 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___994 : (int,(int,et1) farray) farray, int, (int,et1) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___1002 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1009 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___927:(int,(int,et1) farray) farray.
  (forall temp___928:int. forall temp___930:int.
  (forall temp___929:(int,et1) farray. forall temp___931:(int,et1) farray.
  ((in_range1(temp___928) and in_range1(temp___930)) ->
  (forall temp___932:int. (((temp___932 = temp___930) ->
  ((temp___925(temp___927, temp___928, temp___929, temp___930,
  temp___931)[temp___932]) = temp___931)) and
  ((not (temp___932 = temp___930)) -> (((temp___932 = temp___928) ->
  ((temp___925(temp___927, temp___928, temp___929, temp___930,
  temp___931)[temp___932]) = temp___929)) and
  ((not (temp___932 = temp___928)) -> ((temp___925(temp___927, temp___928,
  temp___929, temp___930,
  temp___931)[temp___932]) = (temp___927[temp___932])))))))))))

axiom def_axiom1 :
  (forall temp___935:(int,et1) farray.
  (forall temp___936:int. forall temp___937:int. ((in_range(temp___936) and
  in_range2(temp___937)) ->
  (forall temp___938:int. (((temp___938 = temp___936) ->
  (to_rep((temp___933(temp___935, temp___936,
  temp___937)[temp___938])) = temp___937)) and
  ((not (temp___938 = temp___936)) -> ((temp___933(temp___935, temp___936,
  temp___937)[temp___938]) = (temp___935[temp___938]))))))))

axiom def_axiom2 :
  (forall temp___942:(int,et1) farray.
  (forall temp___943:int. forall temp___944:int. ((in_range(temp___943) and
  in_range2(temp___944)) ->
  (forall temp___945:int. (((temp___945 = temp___943) ->
  (to_rep((temp___940(temp___942, temp___943,
  temp___944)[temp___945])) = temp___944)) and
  ((not (temp___945 = temp___943)) -> ((temp___940(temp___942, temp___943,
  temp___944)[temp___945]) = (temp___942[temp___945]))))))))

axiom def_axiom3 :
  (forall temp___950:(int,(int,et1) farray) farray.
  (forall temp___951:int. forall temp___953:int.
  (forall temp___952:(int,et1) farray. forall temp___954:(int,et1) farray.
  ((in_range1(temp___951) and in_range1(temp___953)) ->
  (forall temp___955:int. (((temp___955 = temp___953) ->
  ((temp___948(temp___950, temp___951, temp___952, temp___953,
  temp___954)[temp___955]) = temp___954)) and
  ((not (temp___955 = temp___953)) -> (((temp___955 = temp___951) ->
  ((temp___948(temp___950, temp___951, temp___952, temp___953,
  temp___954)[temp___955]) = temp___952)) and
  ((not (temp___955 = temp___951)) -> ((temp___948(temp___950, temp___951,
  temp___952, temp___953,
  temp___954)[temp___955]) = (temp___950[temp___955])))))))))))

axiom def_axiom4 :
  (forall temp___958:(int,et1) farray.
  (forall temp___959:int. forall temp___960:int. ((in_range(temp___959) and
  in_range2(temp___960)) ->
  (forall temp___961:int. (((temp___961 = temp___959) ->
  (to_rep((temp___956(temp___958, temp___959,
  temp___960)[temp___961])) = temp___960)) and
  ((not (temp___961 = temp___959)) -> ((temp___956(temp___958, temp___959,
  temp___960)[temp___961]) = (temp___958[temp___961]))))))))

axiom def_axiom5 :
  (forall temp___965:(int,et1) farray.
  (forall temp___966:int. forall temp___967:int. ((in_range(temp___966) and
  in_range2(temp___967)) ->
  (forall temp___968:int. (((temp___968 = temp___966) ->
  (to_rep((temp___963(temp___965, temp___966,
  temp___967)[temp___968])) = temp___967)) and
  ((not (temp___968 = temp___966)) -> ((temp___963(temp___965, temp___966,
  temp___967)[temp___968]) = (temp___965[temp___968]))))))))

axiom def_axiom6 :
  (forall temp___973:(int,(int,et1) farray) farray.
  (forall temp___974:int. forall temp___976:int.
  (forall temp___975:(int,et1) farray. forall temp___977:(int,et1) farray.
  ((in_range1(temp___974) and in_range1(temp___976)) ->
  (forall temp___978:int. (((temp___978 = temp___976) ->
  ((temp___971(temp___973, temp___974, temp___975, temp___976,
  temp___977)[temp___978]) = temp___977)) and
  ((not (temp___978 = temp___976)) -> (((temp___978 = temp___974) ->
  ((temp___971(temp___973, temp___974, temp___975, temp___976,
  temp___977)[temp___978]) = temp___975)) and
  ((not (temp___978 = temp___974)) -> ((temp___971(temp___973, temp___974,
  temp___975, temp___976,
  temp___977)[temp___978]) = (temp___973[temp___978])))))))))))

axiom def_axiom7 :
  (forall temp___981:(int,et1) farray.
  (forall temp___982:int. forall temp___983:int. ((in_range(temp___982) and
  in_range2(temp___983)) ->
  (forall temp___984:int. (((temp___984 = temp___982) ->
  (to_rep((temp___979(temp___981, temp___982,
  temp___983)[temp___984])) = temp___983)) and
  ((not (temp___984 = temp___982)) -> ((temp___979(temp___981, temp___982,
  temp___983)[temp___984]) = (temp___981[temp___984]))))))))

axiom def_axiom8 :
  (forall temp___988:(int,et1) farray.
  (forall temp___989:int. forall temp___990:int. ((in_range(temp___989) and
  in_range2(temp___990)) ->
  (forall temp___991:int. (((temp___991 = temp___989) ->
  (to_rep((temp___986(temp___988, temp___989,
  temp___990)[temp___991])) = temp___990)) and
  ((not (temp___991 = temp___989)) -> ((temp___986(temp___988, temp___989,
  temp___990)[temp___991]) = (temp___988[temp___991]))))))))

axiom def_axiom9 :
  (forall temp___996:(int,(int,et1) farray) farray.
  (forall temp___997:int. forall temp___999:int.
  (forall temp___998:(int,et1) farray. forall temp___1000:(int,et1) farray.
  ((in_range1(temp___997) and in_range1(temp___999)) ->
  (forall temp___1001:int. (((temp___1001 = temp___999) ->
  ((temp___994(temp___996, temp___997, temp___998, temp___999,
  temp___1000)[temp___1001]) = temp___1000)) and
  ((not (temp___1001 = temp___999)) -> (((temp___1001 = temp___997) ->
  ((temp___994(temp___996, temp___997, temp___998, temp___999,
  temp___1000)[temp___1001]) = temp___998)) and
  ((not (temp___1001 = temp___997)) -> ((temp___994(temp___996, temp___997,
  temp___998, temp___999,
  temp___1000)[temp___1001]) = (temp___996[temp___1001])))))))))))

axiom def_axiom10 :
  (forall temp___1004:(int,et1) farray.
  (forall temp___1005:int. forall temp___1006:int.
  ((in_range(temp___1005) and in_range2(temp___1006)) ->
  (forall temp___1007:int. (((temp___1007 = temp___1005) ->
  (to_rep((temp___1002(temp___1004, temp___1005,
  temp___1006)[temp___1007])) = temp___1006)) and
  ((not (temp___1007 = temp___1005)) -> ((temp___1002(temp___1004,
  temp___1005, temp___1006)[temp___1007]) = (temp___1004[temp___1007]))))))))

axiom def_axiom11 :
  (forall temp___1011:(int,et1) farray.
  (forall temp___1012:int. forall temp___1013:int.
  ((in_range(temp___1012) and in_range2(temp___1013)) ->
  (forall temp___1014:int. (((temp___1014 = temp___1012) ->
  (to_rep((temp___1009(temp___1011, temp___1012,
  temp___1013)[temp___1014])) = temp___1013)) and
  ((not (temp___1014 = temp___1012)) -> ((temp___1009(temp___1011,
  temp___1012, temp___1013)[temp___1014]) = (temp___1011[temp___1014]))))))))

 (* File "ar.ads", line 319, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,(int,et1) farray) farray. forall j_next:int. forall f:int.
  forall o:et1. forall o1:(int,et1) farray.
  forall o2:(int,(int,et1) farray) farray. forall o3:int. forall o4:int.
  forall o5:et1. forall o6:(int,et1) farray.
  forall o7:(int,(int,et1) farray) farray. forall o8:int.
  forall result:(int,(int,et1) farray) farray.
  forall a1:(int,(int,et1) farray) farray. forall result1:int.
  forall j_next1:int. forall result2:int. forall j_next2:int.
  forall result3:int. forall f1:int. forall result4:int. forall f2:int.
  forall result5:(int,(int,et1) farray) farray.
  forall a2:(int,(int,et1) farray) farray.
  forall a3:(int,(int,et1) farray) farray. forall j_next3:int. forall f3:int.
  forall a4:(int,(int,et1) farray) farray. forall j_next4:int. forall f4:int.
  (in_range(i) -> (in_range1(j) -> (in_range2(e) -> (((((5 <= 50) ->
  in_range1(j_next)) and (((0 <= 99) -> in_range2(f)) and
  (((((to_rep(o) = e) and (o1 = ((a[j])[i <- o]))) and
  (o2 = (a[j <- o1]))) and (({ map__content1 = result } = { map__content1 = a
  }) and (a1 = o2))) and ((((j = 50) and (({ int__content = result1 } = {
  int__content = j_next }) and (j_next1 = 5))) or ((not (j = 50)) and
  ((((o3 = (j + 1)) and in_range1((j + 1))) and (({ int__content = result2
  } = { int__content = j_next }) and (j_next2 = o3))) and
  (j_next1 = j_next2)))) and ((((e = 0) and (({ int__content = result3 } = {
  int__content = f }) and (f1 = 99))) or ((not (e = 0)) and
  ((((o4 = (e - 1)) and in_range2((e - 1))) and (({ int__content = result4
  } = { int__content = f }) and (f2 = o4))) and (f1 = f2)))) and
  ((((to_rep(o5) = f1) and (o6 = ((a1[j_next1])[i <- o5]))) and
  (o7 = (a1[j_next1 <- o6]))) and ((a1 = result5) and (a2 = o7)))))))) and
  (((f1 = f3) and ((j_next1 = j_next3) and (a2 = a3))) and ((f4 = f1) and
  ((j_next4 = j_next1) and (a4 = a2))))) -> ((j <  50) -> ((0 <  e) ->
  (((o8 = (e - 1)) and in_range2((e - 1))) -> (5 <= (j + 1))))))))))
