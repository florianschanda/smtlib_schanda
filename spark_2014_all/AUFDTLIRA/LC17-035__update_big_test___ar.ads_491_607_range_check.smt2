(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range1 temp___expr_176)))
(declare-sort it2 0)
(declare-fun it2qtint (it2) Int)
(assert (forall ((i it2)) (and (<= 5 (it2qtint i)) (<= (it2qtint i) 50))))
(define-fun in_range2 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range2 temp___expr_183)))
(declare-sort it3 0)
(declare-fun it3qtint (it3) Int)
(assert (forall ((i it3)) (and (<= 1 (it3qtint i)) (<= (it3qtint i) 16))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (it3 it3) Bool)
(declare-const dummy2 it3)
(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))
(define-fun dynamic_invariant2 ((temp___expr_190 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= 1 16)) (in_range3 temp___expr_190)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (et1 et1) Bool)
(declare-const dummy3 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant3 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range4 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy4 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const dummy5 (Array Int (Array Int et1)))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int (Array Int et1)) (Array Int (Array Int et1))) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int (Array Int et1))))))))
(declare-fun slide2 ((Array Int (Array Int (Array Int et1))) Int Int) (Array Int (Array Int (Array Int et1))))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int (Array Int et1))))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int (Array Int (Array Int et1)))) (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int et1)))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 5 50 (select b (+ (- b__first a__first) temp___idx_156)) 5 50) true)))) true false))
(assert (forall ((a (Array Int (Array Int (Array Int et1)))) (b (Array Int (Array Int (Array Int et1))))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 5 50 (select b (+ (- b__first a__first) temp___idx_156)) 5 50) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun temp_____aggregate_def_1874 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp_____aggregate_def_1882 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1889 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1897 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1904 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1913 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp_____aggregate_def_1921 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1928 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1936 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1943 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1952 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp_____aggregate_def_1960 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1967 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1975 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_1982 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_1991 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1)) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp_____aggregate_def_1999 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_2006 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_2014 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_2021 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_5530 ((Array Int (Array Int (Array Int et1))) Int (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))
(declare-fun temp_____aggregate_def_5536 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_5542 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___5532 (Array Int (Array Int (Array Int et1))))) (forall ((temp___5533 Int)) (forall ((temp___5534 (Array Int (Array Int et1)))) (let ((temp___5531 (temp_____aggregate_def_5530 temp___5532 temp___5533 temp___5534))) (=> (dynamic_invariant2 temp___5533 true true true true) (forall ((temp___5535 Int)) (ite (= temp___5535 temp___5533) (= (select temp___5531 temp___5535) temp___5534) (= (select temp___5531 temp___5535) (select temp___5532 temp___5535))))))))))
(assert (forall ((temp___5538 (Array Int (Array Int et1)))) (forall ((temp___5539 Int)) (forall ((temp___5540 (Array Int et1))) (let ((temp___5537 (temp_____aggregate_def_5536 temp___5538 temp___5539 temp___5540))) (=> (dynamic_invariant1 temp___5539 true true true true) (forall ((temp___5541 Int)) (ite (= temp___5541 temp___5539) (= (select temp___5537 temp___5541) temp___5540) (= (select temp___5537 temp___5541) (select temp___5538 temp___5541))))))))))
(assert (forall ((temp___5544 (Array Int et1))) (forall ((temp___5545 Int) (temp___5546 Int)) (let ((temp___5543 (temp_____aggregate_def_5542 temp___5544 temp___5545 temp___5546))) (=> (and (dynamic_invariant temp___5545 true true true true) (dynamic_invariant3 temp___5546 true true true true)) (forall ((temp___5547 Int)) (ite (= temp___5547 temp___5545) (= (to_rep (select temp___5543 temp___5547)) temp___5546) (= (select temp___5543 temp___5547) (select temp___5544 temp___5547)))))))))
(assert (forall ((temp___1876 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1877 Int) (temp___1879 Int)) (forall ((temp___1878 (Array Int (Array Int et1))) (temp___1880 (Array Int (Array Int et1)))) (let ((temp___1875 (temp_____aggregate_def_1874 temp___1876 temp___1877 temp___1878 temp___1879 temp___1880))) (=> (and (dynamic_invariant2 temp___1877 true true true true) (dynamic_invariant2 temp___1879 true true true true)) (forall ((temp___1881 Int)) (ite (= temp___1881 temp___1879) (= (select temp___1875 temp___1881) temp___1880) (ite (= temp___1881 temp___1877) (= (select temp___1875 temp___1881) temp___1878) (= (select temp___1875 temp___1881) (select temp___1876 temp___1881)))))))))))
(assert (forall ((temp___1884 (Array Int (Array Int et1)))) (forall ((temp___1885 Int)) (forall ((temp___1886 (Array Int et1))) (let ((temp___1883 (temp_____aggregate_def_1882 temp___1884 temp___1885 temp___1886))) (=> (dynamic_invariant1 temp___1885 true true true true) (forall ((temp___1887 Int)) (ite (= temp___1887 temp___1885) (= (select temp___1883 temp___1887) temp___1886) (= (select temp___1883 temp___1887) (select temp___1884 temp___1887))))))))))
(assert (forall ((temp___1891 (Array Int et1))) (forall ((temp___1892 Int) (temp___1893 Int)) (let ((temp___1890 (temp_____aggregate_def_1889 temp___1891 temp___1892 temp___1893))) (=> (and (dynamic_invariant temp___1892 true true true true) (dynamic_invariant3 temp___1893 true true true true)) (forall ((temp___1894 Int)) (ite (= temp___1894 temp___1892) (= (to_rep (select temp___1890 temp___1894)) temp___1893) (= (select temp___1890 temp___1894) (select temp___1891 temp___1894)))))))))
(assert (forall ((temp___1899 (Array Int (Array Int et1)))) (forall ((temp___1900 Int)) (forall ((temp___1901 (Array Int et1))) (let ((temp___1898 (temp_____aggregate_def_1897 temp___1899 temp___1900 temp___1901))) (=> (dynamic_invariant1 temp___1900 true true true true) (forall ((temp___1902 Int)) (ite (= temp___1902 temp___1900) (= (select temp___1898 temp___1902) temp___1901) (= (select temp___1898 temp___1902) (select temp___1899 temp___1902))))))))))
(assert (forall ((temp___1906 (Array Int et1))) (forall ((temp___1907 Int) (temp___1908 Int)) (let ((temp___1905 (temp_____aggregate_def_1904 temp___1906 temp___1907 temp___1908))) (=> (and (dynamic_invariant temp___1907 true true true true) (dynamic_invariant3 temp___1908 true true true true)) (forall ((temp___1909 Int)) (ite (= temp___1909 temp___1907) (= (to_rep (select temp___1905 temp___1909)) temp___1908) (= (select temp___1905 temp___1909) (select temp___1906 temp___1909)))))))))
(assert (forall ((temp___1915 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1916 Int) (temp___1918 Int)) (forall ((temp___1917 (Array Int (Array Int et1))) (temp___1919 (Array Int (Array Int et1)))) (let ((temp___1914 (temp_____aggregate_def_1913 temp___1915 temp___1916 temp___1917 temp___1918 temp___1919))) (=> (and (dynamic_invariant2 temp___1916 true true true true) (dynamic_invariant2 temp___1918 true true true true)) (forall ((temp___1920 Int)) (ite (= temp___1920 temp___1918) (= (select temp___1914 temp___1920) temp___1919) (ite (= temp___1920 temp___1916) (= (select temp___1914 temp___1920) temp___1917) (= (select temp___1914 temp___1920) (select temp___1915 temp___1920)))))))))))
(assert (forall ((temp___1923 (Array Int (Array Int et1)))) (forall ((temp___1924 Int)) (forall ((temp___1925 (Array Int et1))) (let ((temp___1922 (temp_____aggregate_def_1921 temp___1923 temp___1924 temp___1925))) (=> (dynamic_invariant1 temp___1924 true true true true) (forall ((temp___1926 Int)) (ite (= temp___1926 temp___1924) (= (select temp___1922 temp___1926) temp___1925) (= (select temp___1922 temp___1926) (select temp___1923 temp___1926))))))))))
(assert (forall ((temp___1930 (Array Int et1))) (forall ((temp___1931 Int) (temp___1932 Int)) (let ((temp___1929 (temp_____aggregate_def_1928 temp___1930 temp___1931 temp___1932))) (=> (and (dynamic_invariant temp___1931 true true true true) (dynamic_invariant3 temp___1932 true true true true)) (forall ((temp___1933 Int)) (ite (= temp___1933 temp___1931) (= (to_rep (select temp___1929 temp___1933)) temp___1932) (= (select temp___1929 temp___1933) (select temp___1930 temp___1933)))))))))
(assert (forall ((temp___1938 (Array Int (Array Int et1)))) (forall ((temp___1939 Int)) (forall ((temp___1940 (Array Int et1))) (let ((temp___1937 (temp_____aggregate_def_1936 temp___1938 temp___1939 temp___1940))) (=> (dynamic_invariant1 temp___1939 true true true true) (forall ((temp___1941 Int)) (ite (= temp___1941 temp___1939) (= (select temp___1937 temp___1941) temp___1940) (= (select temp___1937 temp___1941) (select temp___1938 temp___1941))))))))))
(declare-const rliteral et1)
(assert (= (et1qtint rliteral) 99))
(assert (forall ((temp___1945 (Array Int et1))) (forall ((temp___1946 Int) (temp___1947 Int)) (let ((temp___1944 (temp_____aggregate_def_1943 temp___1945 temp___1946 temp___1947))) (=> (and (dynamic_invariant temp___1946 true true true true) (dynamic_invariant3 temp___1947 true true true true)) (forall ((temp___1948 Int)) (ite (= temp___1948 temp___1946) (= (select temp___1944 temp___1948) rliteral) (= (select temp___1944 temp___1948) (select temp___1945 temp___1948)))))))))
(assert (forall ((temp___1954 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1955 Int) (temp___1957 Int)) (forall ((temp___1956 (Array Int (Array Int et1))) (temp___1958 (Array Int (Array Int et1)))) (let ((temp___1953 (temp_____aggregate_def_1952 temp___1954 temp___1955 temp___1956 temp___1957 temp___1958))) (=> (and (dynamic_invariant2 temp___1955 true true true true) (dynamic_invariant2 temp___1957 true true true true)) (forall ((temp___1959 Int)) (ite (= temp___1959 temp___1957) (= (select temp___1953 temp___1959) temp___1958) (ite (= temp___1959 temp___1955) (= (select temp___1953 temp___1959) temp___1956) (= (select temp___1953 temp___1959) (select temp___1954 temp___1959)))))))))))
(assert (forall ((temp___1962 (Array Int (Array Int et1)))) (forall ((temp___1963 Int)) (forall ((temp___1964 (Array Int et1))) (let ((temp___1961 (temp_____aggregate_def_1960 temp___1962 temp___1963 temp___1964))) (=> (dynamic_invariant1 temp___1963 true true true true) (forall ((temp___1965 Int)) (ite (= temp___1965 temp___1963) (= (select temp___1961 temp___1965) temp___1964) (= (select temp___1961 temp___1965) (select temp___1962 temp___1965))))))))))
(assert (forall ((temp___1969 (Array Int et1))) (forall ((temp___1970 Int) (temp___1971 Int)) (let ((temp___1968 (temp_____aggregate_def_1967 temp___1969 temp___1970 temp___1971))) (=> (and (dynamic_invariant temp___1970 true true true true) (dynamic_invariant3 temp___1971 true true true true)) (forall ((temp___1972 Int)) (ite (= temp___1972 temp___1970) (= (to_rep (select temp___1968 temp___1972)) temp___1971) (= (select temp___1968 temp___1972) (select temp___1969 temp___1972)))))))))
(assert (forall ((temp___1977 (Array Int (Array Int et1)))) (forall ((temp___1978 Int)) (forall ((temp___1979 (Array Int et1))) (let ((temp___1976 (temp_____aggregate_def_1975 temp___1977 temp___1978 temp___1979))) (=> (dynamic_invariant1 temp___1978 true true true true) (forall ((temp___1980 Int)) (ite (= temp___1980 temp___1978) (= (select temp___1976 temp___1980) temp___1979) (= (select temp___1976 temp___1980) (select temp___1977 temp___1980))))))))))
(assert (forall ((temp___1984 (Array Int et1))) (forall ((temp___1985 Int) (temp___1986 Int)) (let ((temp___1983 (temp_____aggregate_def_1982 temp___1984 temp___1985 temp___1986))) (=> (and (dynamic_invariant temp___1985 true true true true) (dynamic_invariant3 temp___1986 true true true true)) (forall ((temp___1987 Int)) (ite (= temp___1987 temp___1985) (= (to_rep (select temp___1983 temp___1987)) temp___1986) (= (select temp___1983 temp___1987) (select temp___1984 temp___1987)))))))))
(assert (forall ((temp___1993 (Array Int (Array Int (Array Int et1))))) (forall ((temp___1994 Int) (temp___1996 Int)) (forall ((temp___1995 (Array Int (Array Int et1))) (temp___1997 (Array Int (Array Int et1)))) (let ((temp___1992 (temp_____aggregate_def_1991 temp___1993 temp___1994 temp___1995 temp___1996 temp___1997))) (=> (and (dynamic_invariant2 temp___1994 true true true true) (dynamic_invariant2 temp___1996 true true true true)) (forall ((temp___1998 Int)) (ite (= temp___1998 temp___1996) (= (select temp___1992 temp___1998) temp___1997) (ite (= temp___1998 temp___1994) (= (select temp___1992 temp___1998) temp___1995) (= (select temp___1992 temp___1998) (select temp___1993 temp___1998)))))))))))
(assert (forall ((temp___2001 (Array Int (Array Int et1)))) (forall ((temp___2002 Int)) (forall ((temp___2003 (Array Int et1))) (let ((temp___2000 (temp_____aggregate_def_1999 temp___2001 temp___2002 temp___2003))) (=> (dynamic_invariant1 temp___2002 true true true true) (forall ((temp___2004 Int)) (ite (= temp___2004 temp___2002) (= (select temp___2000 temp___2004) temp___2003) (= (select temp___2000 temp___2004) (select temp___2001 temp___2004))))))))))
(assert (forall ((temp___2008 (Array Int et1))) (forall ((temp___2009 Int) (temp___2010 Int)) (let ((temp___2007 (temp_____aggregate_def_2006 temp___2008 temp___2009 temp___2010))) (=> (and (dynamic_invariant temp___2009 true true true true) (dynamic_invariant3 temp___2010 true true true true)) (forall ((temp___2011 Int)) (ite (= temp___2011 temp___2009) (= (to_rep (select temp___2007 temp___2011)) temp___2010) (= (select temp___2007 temp___2011) (select temp___2008 temp___2011)))))))))
(assert (forall ((temp___2016 (Array Int (Array Int et1)))) (forall ((temp___2017 Int)) (forall ((temp___2018 (Array Int et1))) (let ((temp___2015 (temp_____aggregate_def_2014 temp___2016 temp___2017 temp___2018))) (=> (dynamic_invariant1 temp___2017 true true true true) (forall ((temp___2019 Int)) (ite (= temp___2019 temp___2017) (= (select temp___2015 temp___2019) temp___2018) (= (select temp___2015 temp___2019) (select temp___2016 temp___2019))))))))))
(assert (forall ((temp___2023 (Array Int et1))) (forall ((temp___2024 Int) (temp___2025 Int)) (let ((temp___2022 (temp_____aggregate_def_2021 temp___2023 temp___2024 temp___2025))) (=> (and (dynamic_invariant temp___2024 true true true true) (dynamic_invariant3 temp___2025 true true true true)) (forall ((temp___2026 Int)) (ite (= temp___2026 temp___2024) (= (select temp___2022 temp___2026) rliteral) (= (select temp___2022 temp___2026) (select temp___2023 temp___2026)))))))))
(declare-const a (Array Int (Array Int (Array Int et1))))
(declare-const k_next Int)
(declare-const f Int)
(declare-const o Int)
(declare-const o1 et1)
(declare-const o2 (Array Int et1))
(declare-const o3 (Array Int (Array Int et1)))
(declare-const o4 (Array Int (Array Int (Array Int et1))))
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const temp___5580 (Array Int (Array Int et1)))
(declare-const o7 (Array Int et1))
(declare-const o8 (Array Int et1))
(declare-const o9 (Array Int (Array Int et1)))
(declare-const o10 (Array Int (Array Int et1)))
(declare-const o11 Int)
(declare-const temp___5581 (Array Int (Array Int (Array Int et1))))
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const temp___5570 (Array Int (Array Int et1)))
(declare-const o14 Int)
(declare-const o15 (Array Int et1))
(declare-const o16 (Array Int et1))
(declare-const o17 (Array Int (Array Int et1)))
(declare-const o18 (Array Int (Array Int et1)))
(declare-const o19 Int)
(declare-const temp___5571 (Array Int (Array Int (Array Int et1))))
(declare-const t (Array Int (Array Int (Array Int et1))))
(declare-const a1 (Array Int (Array Int (Array Int et1))))
(declare-const k_next1 Int)
(declare-const result Int)
(declare-const f1 Int)
(declare-const result1 Int)
(declare-const f2 Int)
(declare-const result2 (Array Int (Array Int (Array Int et1))))
(declare-const a2 (Array Int (Array Int (Array Int et1))))
(declare-const a3 (Array Int (Array Int (Array Int et1))))
(declare-const k_next2 Int)
(declare-const f3 Int)
(declare-const t1 (Array Int (Array Int (Array Int et1))))
(declare-const a4 (Array Int (Array Int (Array Int et1))))
(declare-const k_next3 Int)
(declare-const f4 Int)
(declare-const t2 (Array Int (Array Int (Array Int et1))))
(declare-const result3 Bool)
(declare-const result4 Bool)
(define-fun f5 () int__ref (mk_int__ref f))
(assert (in_range1 i))
(assert (in_range2 j))
(assert (in_range3 k))
(assert (in_range4 e))
(assert (=> (<= 1 16) (in_range3 k_next)))
(assert (=> (<= 0 99) (in_range4 f)))
(assert (and (and (= (bool_eq2 a1 1 16 (temp_____aggregate_def_5530 t k (temp_____aggregate_def_5536 (select t k) j (temp_____aggregate_def_5542 (select (select t k) j) i e))) 1 16) true) (or (and (= k 16) (= k_next1 1)) (and (< k 16) (= k_next1 (+ k 1))))) (in_range3 k_next1)))
(assert (=> (<= 1 16) (in_range3 k_next1)))
(assert (=> (= e 0) (= (mk_int__ref result) f5)))
(assert (=> (= e 0) (= f1 99)))
(assert (=> (not (= e 0)) (and (= o (- e 1)) (in_range4 (- e 1)))))
(assert (=> (not (= e 0)) (= (mk_int__ref result1) f5)))
(assert (=> (not (= e 0)) (= f2 o)))
(assert (=> (not (= e 0)) (= f1 f2)))
(assert (= (to_rep o1) f1))
(assert (= o2 (store (select (select a1 k_next1) j) i o1)))
(assert (= o3 (store (select a1 k_next1) j o2)))
(assert (= o4 (store a1 k_next1 o3)))
(assert (= a1 result2))
(assert (= a2 o4))
(assert (= t t1))
(assert (= f1 f3))
(assert (= k_next1 k_next2))
(assert (= a2 a3))
(assert (= t2 t))
(assert (= f4 f1))
(assert (= k_next3 k_next1))
(assert (= a4 a2))
(assert (=> (< k 16) (=> (< 0 e) (and (= o14 (- e 1)) (in_range4 (- e 1))))))
(assert (=> (< k 16) (=> (< 0 e) (and (<= 1 (+ k 1)) (<= (+ k 1) 16)))))
(assert (=> (< k 16) (=> (< 0 e) (= o13 (+ k 1)))))
(assert (=> (< k 16) (=> (< 0 e) (= temp___5570 (select a o13)))))
(assert (=> (< k 16) (=> (< 0 e) (= o15 (select temp___5570 j)))))
(assert (=> (< k 16) (=> (< 0 e) (= o16 (temp_____aggregate_def_1904 o15 i o14)))))
(assert (=> (< k 16) (=> (< 0 e) (and (<= 1 (+ k 1)) (<= (+ k 1) 16)))))
(assert (=> (< k 16) (=> (< 0 e) (= o12 (+ k 1)))))
(assert (=> (< k 16) (=> (< 0 e) (= o17 (select a o12)))))
(assert (=> (< k 16) (=> (< 0 e) (= o18 (temp_____aggregate_def_1897 o17 j o16)))))
(assert (=> (< k 16) (=> (< 0 e) (and (= o19 (+ k 1)) (in_range3 (+ k 1))))))
(assert (=> (< k 16) (=> (< 0 e) (= temp___5571 (temp_____aggregate_def_1874 a k (temp_____aggregate_def_1882 (select a k) j (temp_____aggregate_def_1889 (select (select a k) j) i e)) o19 o18)))))
(assert (=> (< k 16) (=> (< 0 e) (= result4 (bool_eq2 a3 1 16 temp___5571 1 16)))))
(assert (=> (< k 16) (=> (not (< 0 e)) (= result4 false))))
(assert (=> (< k 16) (=> (= result4 true) (= result3 true))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (and (<= 1 (+ k 1)) (<= (+ k 1) 16))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= o6 (+ k 1))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= temp___5580 (select a o6))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= o7 (select temp___5580 j))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= o8 (temp_____aggregate_def_1943 o7 i 99))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (and (<= 1 (+ k 1)) (<= (+ k 1) 16))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= o5 (+ k 1))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= o9 (select a o5))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= o10 (temp_____aggregate_def_1936 o9 j o8))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (and (= o11 (+ k 1)) (in_range3 (+ k 1)))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= temp___5581 (temp_____aggregate_def_1913 a k (temp_____aggregate_def_1921 (select a k) j (temp_____aggregate_def_1928 (select (select a k) j) i e)) o11 o10))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (= e 0) (= result3 (bool_eq2 a3 1 16 temp___5581 1 16))))))
(assert (=> (< k 16) (=> (not (= result4 true)) (=> (not (= e 0)) (= result3 false)))))
(assert (=> (not (< k 16)) (= result3 false)))
(assert (not (= result3 true)))
(assert (= k 16))
(assert (< 0 e))
(assert (not (in_range4 (- e 1))))
(check-sat)
(exit)
