(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type card

predicate in_range2(x: int) = ((1 <= x) and (x <= 52))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : card, card -> bool

logic dummy1 : card

type card__ref = { card__content : card
}

function card__ref___projection(a: card__ref) : card = (a).card__content

logic to_rep : card -> int

logic of_rep : int -> card

axiom inversion_axiom : (forall x:card [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:card [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,card) farray
}

logic slide : (int,card) farray, int, int -> (int,card) farray

axiom slide_eq :
  (forall a:(int,card) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,card) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,card) farray, int, int, (int,card) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,card) farray. forall a__first:int. forall a__last:int.
  forall b:(int,card) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type cardindex

predicate in_range3(x: int) = (((- 1) <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : cardindex, cardindex -> bool

logic dummy2 : cardindex

type cardindex__ref = { cardindex__content : cardindex
}

function cardindex__ref___projection(a: cardindex__ref) : cardindex =
  (a).cardindex__content

logic to_rep1 : cardindex -> int

logic of_rep1 : int -> cardindex

axiom inversion_axiom1 :
  (forall x:cardindex [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:cardindex [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type tcardarrayD1

predicate in_range4(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tcardarrayD1, tcardarrayD1 -> bool

logic dummy3 : tcardarrayD1

type tcardarrayD1__ref = { tcardarrayD1__content : tcardarrayD1
}

function tcardarrayD1__ref___projection(a: tcardarrayD1__ref) : tcardarrayD1 =
  (a).tcardarrayD1__content

type tindexarrayD1

predicate in_range5(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tindexarrayD1, tindexarrayD1 -> bool

logic dummy4 : tindexarrayD1

type tindexarrayD1__ref = { tindexarrayD1__content : tindexarrayD1
}

function tindexarrayD1__ref___projection(a: tindexarrayD1__ref) : tindexarrayD1 =
  (a).tindexarrayD1__content

type map__ref1 = { map__content1 : (int,cardindex) farray
}

logic slide1 : (int,cardindex) farray, int, int -> (int,cardindex) farray

axiom slide_eq1 :
  (forall a:(int,cardindex) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,cardindex) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,cardindex) farray. forall a__first:int. forall a__last:int.
  forall b:(int,cardindex) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))))))))

type tindexmatrixD1

predicate in_range6(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : tindexmatrixD1, tindexmatrixD1 -> bool

logic dummy5 : tindexmatrixD1

type tindexmatrixD1__ref = { tindexmatrixD1__content : tindexmatrixD1
}

function tindexmatrixD1__ref___projection(a: tindexmatrixD1__ref) : tindexmatrixD1 =
  (a).tindexmatrixD1__content

logic dummy6 : (int,cardindex) farray

logic value__size : int

logic object__size : (int,cardindex) farray -> int

logic value__component__size : int

logic object__component__size : (int,cardindex) farray -> int

logic value__alignment : int

logic object__alignment : (int,cardindex) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,cardindex) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,cardindex) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,cardindex) farray. (0 <= object__alignment(a)))

logic user_eq6 : (int,cardindex) farray, (int,cardindex) farray -> bool

type map__ref2 = { map__content2 : (int,(int,cardindex) farray) farray
}

logic slide2 : (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq10 : (int,(int,cardindex) farray) farray, int, int,
  (int,(int,cardindex) farray) farray, int, int -> bool

axiom bool_eq_def9 :
  (forall a:(int,(int,cardindex) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,cardindex) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq10(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and (bool_eq8((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true)) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq8((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq8((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true)))))))

logic dummy7 : (int,card) farray

logic value__size1 : int

logic object__size1 : (int,card) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,card) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,card) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,card) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,card) farray, (int,card) farray -> bool

logic dummy8 : (int,(int,cardindex) farray) farray

logic value__size2 : int

logic object__size2 : (int,(int,cardindex) farray) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,(int,cardindex) farray) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,(int,cardindex) farray) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,(int,cardindex) farray) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__alignment2(a)))

logic user_eq8 : (int,(int,cardindex) farray) farray,
  (int,(int,cardindex) farray) farray -> bool

type us_split_fields = { rec__patience__state__numelts : cardindex;
rec__patience__state__values : (int,card) farray;
rec__patience__state__numstacks : cardindex; rec__patience__state__stacksizes
: (int,cardindex) farray; rec__patience__state__stacks :
(int,(int,cardindex) farray) farray; rec__patience__state__posstack :
(int,cardindex) farray; rec__patience__state__posheight :
(int,cardindex) farray; rec__patience__state__preds : (int,cardindex) farray
}

function us_split_fields_NumElts__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numelts

function us_split_fields_Values__projection(a: us_split_fields) : (int,card) farray =
  (a).rec__patience__state__values

function us_split_fields_NumStacks__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numstacks

function us_split_fields_StackSizes__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__stacksizes

function us_split_fields_Stacks__projection(a: us_split_fields) : (int,(int,cardindex) farray) farray =
  (a).rec__patience__state__stacks

function us_split_fields_PosStack__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posstack

function us_split_fields_PosHeight__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posheight

function us_split_fields_Preds__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__preds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((((((to_rep1(((a).us_split_fields1).rec__patience__state__numelts) = to_rep1(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep1(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep1(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq10(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((((((to_rep1(((a).us_split_fields1).rec__patience__state__numelts) = to_rep1(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep1(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep1(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq10(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true))) ->
  (bool_eq11(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__size3({ us_split_fields1 =
  { rec__patience__state__numelts = a; rec__patience__state__values = a1;
  rec__patience__state__numstacks = a2; rec__patience__state__stacksizes =
  a3; rec__patience__state__stacks = a4; rec__patience__state__posstack = a5;
  rec__patience__state__posheight = a6; rec__patience__state__preds = a7 }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__alignment3({
  us_split_fields1 = { rec__patience__state__numelts = a;
  rec__patience__state__values = a1; rec__patience__state__numstacks = a2;
  rec__patience__state__stacksizes = a3; rec__patience__state__stacks = a4;
  rec__patience__state__posstack = a5; rec__patience__state__posheight = a6;
  rec__patience__state__preds = a7 } })))

logic patience__state__numelts__first__bit : int

logic patience__state__numelts__last__bit : int

logic patience__state__numelts__position : int

axiom patience__state__numelts__first__bit_axiom :
  (0 <= patience__state__numelts__first__bit)

axiom patience__state__numelts__last__bit_axiom :
  (patience__state__numelts__first__bit <  patience__state__numelts__last__bit)

axiom patience__state__numelts__position_axiom :
  (0 <= patience__state__numelts__position)

logic patience__state__values__first__bit : int

logic patience__state__values__last__bit : int

logic patience__state__values__position : int

axiom patience__state__values__first__bit_axiom :
  (0 <= patience__state__values__first__bit)

axiom patience__state__values__last__bit_axiom :
  (patience__state__values__first__bit <  patience__state__values__last__bit)

axiom patience__state__values__position_axiom :
  (0 <= patience__state__values__position)

logic patience__state__numstacks__first__bit : int

logic patience__state__numstacks__last__bit : int

logic patience__state__numstacks__position : int

axiom patience__state__numstacks__first__bit_axiom :
  (0 <= patience__state__numstacks__first__bit)

axiom patience__state__numstacks__last__bit_axiom :
  (patience__state__numstacks__first__bit <  patience__state__numstacks__last__bit)

axiom patience__state__numstacks__position_axiom :
  (0 <= patience__state__numstacks__position)

logic patience__state__stacksizes__first__bit : int

logic patience__state__stacksizes__last__bit : int

logic patience__state__stacksizes__position : int

axiom patience__state__stacksizes__first__bit_axiom :
  (0 <= patience__state__stacksizes__first__bit)

axiom patience__state__stacksizes__last__bit_axiom :
  (patience__state__stacksizes__first__bit <  patience__state__stacksizes__last__bit)

axiom patience__state__stacksizes__position_axiom :
  (0 <= patience__state__stacksizes__position)

logic patience__state__stacks__first__bit : int

logic patience__state__stacks__last__bit : int

logic patience__state__stacks__position : int

axiom patience__state__stacks__first__bit_axiom :
  (0 <= patience__state__stacks__first__bit)

axiom patience__state__stacks__last__bit_axiom :
  (patience__state__stacks__first__bit <  patience__state__stacks__last__bit)

axiom patience__state__stacks__position_axiom :
  (0 <= patience__state__stacks__position)

logic patience__state__posstack__first__bit : int

logic patience__state__posstack__last__bit : int

logic patience__state__posstack__position : int

axiom patience__state__posstack__first__bit_axiom :
  (0 <= patience__state__posstack__first__bit)

axiom patience__state__posstack__last__bit_axiom :
  (patience__state__posstack__first__bit <  patience__state__posstack__last__bit)

axiom patience__state__posstack__position_axiom :
  (0 <= patience__state__posstack__position)

logic patience__state__posheight__first__bit : int

logic patience__state__posheight__last__bit : int

logic patience__state__posheight__position : int

axiom patience__state__posheight__first__bit_axiom :
  (0 <= patience__state__posheight__first__bit)

axiom patience__state__posheight__last__bit_axiom :
  (patience__state__posheight__first__bit <  patience__state__posheight__last__bit)

axiom patience__state__posheight__position_axiom :
  (0 <= patience__state__posheight__position)

logic patience__state__preds__first__bit : int

logic patience__state__preds__last__bit : int

logic patience__state__preds__position : int

axiom patience__state__preds__first__bit_axiom :
  (0 <= patience__state__preds__first__bit)

axiom patience__state__preds__last__bit_axiom :
  (patience__state__preds__first__bit <  patience__state__preds__last__bit)

axiom patience__state__preds__position_axiom :
  (0 <= patience__state__preds__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy9 : cardindex

logic dummy10 : (int,card) farray

logic dummy11 : cardindex

logic dummy12 : (int,cardindex) farray

logic dummy13 : (int,(int,cardindex) farray) farray

logic dummy14 : (int,cardindex) farray

logic dummy15 : (int,cardindex) farray

logic dummy16 : (int,cardindex) farray

type state__ref = { state__content : us_rep
}

function state__ref___projection(a: state__ref) : us_rep = (a).state__content

logic inv : us_rep -> bool

logic inv__function_guard : bool, us_rep -> prop

axiom inv__post_axiom : true

axiom inv__def_axiom :
  (forall s:cardindex. forall s1:(int,card) farray. forall s2:cardindex.
  forall s3:(int,cardindex) farray.
  forall s4:(int,(int,cardindex) farray) farray.
  forall s5:(int,cardindex) farray. forall s6:(int,cardindex) farray.
  forall s7:(int,cardindex) farray [inv({ us_split_fields1 = {
  rec__patience__state__numelts = s; rec__patience__state__values = s1;
  rec__patience__state__numstacks = s2; rec__patience__state__stacksizes =
  s3; rec__patience__state__stacks = s4; rec__patience__state__posstack = s5;
  rec__patience__state__posheight = s6; rec__patience__state__preds = s7 }
  })]. (((inv({ us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true) ->
  ((((((((((0 <= to_rep1(s2)) and (to_rep1(s2) <= to_rep1(s))) and
  (to_rep1(s) <= 100)) and ((to_rep1(s) = 0) or (0 <  to_rep1(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (((1 <= to_rep1((s3[i]))) and (to_rep1((s3[i])) <= to_rep1(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 1))) ->
  ((0 <= to_rep1(((s4[i])[j]))) and (to_rep1(((s4[i])[j])) <  to_rep1(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  ((((0 <= to_rep1((s5[i]))) and (to_rep1((s5[i])) <= (to_rep1(s2) - 1))) and
  ((0 <= to_rep1((s6[i]))) and
  (to_rep1((s6[i])) <= (to_rep1((s3[to_rep1((s5[i]))])) - 1)))) and
  (to_rep1(((s4[to_rep1((s5[i]))])[to_rep1((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep1(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep1((s3[ist])) - 1))) ->
  ((ist = to_rep1((s5[to_rep1(((s4[ist])[ip]))]))) and
  (ip = to_rep1((s6[to_rep1(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep1(((s4[i])[j])) <  to_rep1(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep((s1[to_rep1(((s4[i])[k]))])) <= to_rep((s1[to_rep1(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  (((((- 1) <= to_rep1((s7[i]))) and
  (to_rep1((s7[i])) <= (to_rep1(s) - 1))) and (to_rep1((s7[i])) <  i)) and
  (((to_rep1((s7[i])) <  0) -> (to_rep1((s5[i])) = 0)) and
  ((not (to_rep1((s7[i])) <  0)) ->
  (((to_rep((s1[to_rep1((s7[i]))])) <  to_rep((s1[i]))) and
  (0 <  to_rep1((s5[i])))) and
  (to_rep1((s5[to_rep1((s7[i]))])) = (to_rep1((s5[i])) - 1)))))))))) and
  (((((((((((0 <= to_rep1(s2)) and (to_rep1(s2) <= to_rep1(s))) and
  (to_rep1(s) <= 100)) and ((to_rep1(s) = 0) or (0 <  to_rep1(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (((1 <= to_rep1((s3[i]))) and (to_rep1((s3[i])) <= to_rep1(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 1))) ->
  ((0 <= to_rep1(((s4[i])[j]))) and (to_rep1(((s4[i])[j])) <  to_rep1(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  ((((0 <= to_rep1((s5[i]))) and (to_rep1((s5[i])) <= (to_rep1(s2) - 1))) and
  ((0 <= to_rep1((s6[i]))) and
  (to_rep1((s6[i])) <= (to_rep1((s3[to_rep1((s5[i]))])) - 1)))) and
  (to_rep1(((s4[to_rep1((s5[i]))])[to_rep1((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep1(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep1((s3[ist])) - 1))) ->
  ((ist = to_rep1((s5[to_rep1(((s4[ist])[ip]))]))) and
  (ip = to_rep1((s6[to_rep1(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep1(((s4[i])[j])) <  to_rep1(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep((s1[to_rep1(((s4[i])[k]))])) <= to_rep((s1[to_rep1(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  (((((- 1) <= to_rep1((s7[i]))) and
  (to_rep1((s7[i])) <= (to_rep1(s) - 1))) and (to_rep1((s7[i])) <  i)) and
  (((to_rep1((s7[i])) <  0) and (to_rep1((s5[i])) = 0)) or
  ((not (to_rep1((s7[i])) <  0)) and
  (((to_rep((s1[to_rep1((s7[i]))])) <  to_rep((s1[i]))) and
  (0 <  to_rep1((s5[i])))) and
  (to_rep1((s5[to_rep1((s7[i]))])) = (to_rep1((s5[i])) - 1))))))))) -> (inv({
  us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true))))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "patience.ads", line 53, characters 0-0 *)
goal WP_parameter_def :
  (forall s__split_fields:cardindex.
  forall s__split_fields1:(int,card) farray.
  forall s__split_fields2:cardindex.
  forall s__split_fields3:(int,cardindex) farray.
  forall s__split_fields4:(int,(int,cardindex) farray) farray.
  forall s__split_fields5:(int,cardindex) farray.
  forall s__split_fields6:(int,cardindex) farray.
  forall s__split_fields7:(int,cardindex) farray. forall idx:int.
  forall pred:int. forall i:int. forall stackisize:int. forall topstacki:int.
  forall temp___598:int. forall temp___597:int. forall temp___596:int.
  forall temp___595:int. forall o:int. forall o1:cardindex. forall o2:int.
  forall o3:int. forall temp___565:(int,cardindex) farray. forall o4:int.
  forall o5:cardindex. forall o6:int. forall o7:int. forall o8:card.
  forall o9:int. forall o10:int. forall o11:card. forall o12:int.
  forall o13:(int,card) farray. forall o14:cardindex.
  forall o15:(int,card) farray. forall o16:cardindex.
  forall o17:(int,cardindex) farray.
  forall o18:(int,(int,cardindex) farray) farray.
  forall o19:(int,cardindex) farray. forall o20:(int,cardindex) farray.
  forall o21:(int,cardindex) farray. forall temp___614:cardindex.
  forall temp___6141:(int,card) farray. forall temp___6142:cardindex.
  forall temp___6143:(int,cardindex) farray.
  forall temp___6144:(int,(int,cardindex) farray) farray.
  forall temp___6145:(int,cardindex) farray.
  forall temp___6146:(int,cardindex) farray.
  forall temp___6147:(int,cardindex) farray. forall o22:int. forall o23:int.
  forall o24:cardindex. forall o25:cardindex. forall o26:(int,card) farray.
  forall o27:cardindex. forall o28:(int,cardindex) farray.
  forall o29:(int,(int,cardindex) farray) farray.
  forall o30:(int,cardindex) farray. forall o31:(int,cardindex) farray.
  forall o32:(int,cardindex) farray. forall temp___616:cardindex.
  forall temp___6161:(int,card) farray. forall temp___6162:cardindex.
  forall temp___6163:(int,cardindex) farray.
  forall temp___6164:(int,(int,cardindex) farray) farray.
  forall temp___6165:(int,cardindex) farray.
  forall temp___6166:(int,cardindex) farray.
  forall temp___6167:(int,cardindex) farray. forall o33:int.
  forall o34:cardindex. forall o35:int. forall o36:(int,cardindex) farray.
  forall o37:cardindex. forall o38:(int,card) farray. forall o39:cardindex.
  forall o40:(int,cardindex) farray.
  forall o41:(int,(int,cardindex) farray) farray.
  forall o42:(int,cardindex) farray. forall o43:(int,cardindex) farray.
  forall o44:(int,cardindex) farray. forall temp___619:cardindex.
  forall temp___6191:(int,card) farray. forall temp___6192:cardindex.
  forall temp___6193:(int,cardindex) farray.
  forall temp___6194:(int,(int,cardindex) farray) farray.
  forall temp___6195:(int,cardindex) farray.
  forall temp___6196:(int,cardindex) farray.
  forall temp___6197:(int,cardindex) farray. forall o45:int.
  forall o46:cardindex. forall o47:cardindex. forall o48:(int,card) farray.
  forall o49:cardindex. forall o50:(int,cardindex) farray.
  forall o51:(int,(int,cardindex) farray) farray.
  forall o52:(int,cardindex) farray. forall o53:(int,cardindex) farray.
  forall o54:(int,cardindex) farray. forall temp___636:cardindex.
  forall temp___6361:(int,card) farray. forall temp___6362:cardindex.
  forall temp___6363:(int,cardindex) farray.
  forall temp___6364:(int,(int,cardindex) farray) farray.
  forall temp___6365:(int,cardindex) farray.
  forall temp___6366:(int,cardindex) farray.
  forall temp___6367:(int,cardindex) farray. forall o55:cardindex.
  forall o56:int. forall o57:(int,cardindex) farray. forall o58:cardindex.
  forall o59:(int,card) farray. forall o60:cardindex.
  forall o61:(int,cardindex) farray.
  forall o62:(int,(int,cardindex) farray) farray.
  forall o63:(int,cardindex) farray. forall o64:(int,cardindex) farray.
  forall o65:(int,cardindex) farray. forall temp___639:cardindex.
  forall temp___6391:(int,card) farray. forall temp___6392:cardindex.
  forall temp___6393:(int,cardindex) farray.
  forall temp___6394:(int,(int,cardindex) farray) farray.
  forall temp___6395:(int,cardindex) farray.
  forall temp___6396:(int,cardindex) farray.
  forall temp___6397:(int,cardindex) farray. forall o66:int.
  forall o67:cardindex. forall o68:(int,cardindex) farray. forall o69:int.
  forall o70:(int,(int,cardindex) farray) farray. forall o71:cardindex.
  forall o72:(int,card) farray. forall o73:cardindex.
  forall o74:(int,cardindex) farray.
  forall o75:(int,(int,cardindex) farray) farray.
  forall o76:(int,cardindex) farray. forall o77:(int,cardindex) farray.
  forall o78:(int,cardindex) farray. forall temp___644:cardindex.
  forall temp___6441:(int,card) farray. forall temp___6442:cardindex.
  forall temp___6443:(int,cardindex) farray.
  forall temp___6444:(int,(int,cardindex) farray) farray.
  forall temp___6445:(int,cardindex) farray.
  forall temp___6446:(int,cardindex) farray.
  forall temp___6447:(int,cardindex) farray. forall o79:int.
  forall o80:cardindex. forall o81:int. forall o82:(int,cardindex) farray.
  forall o83:cardindex. forall o84:(int,card) farray. forall o85:cardindex.
  forall o86:(int,cardindex) farray.
  forall o87:(int,(int,cardindex) farray) farray.
  forall o88:(int,cardindex) farray. forall o89:(int,cardindex) farray.
  forall o90:(int,cardindex) farray. forall temp___647:cardindex.
  forall temp___6471:(int,card) farray. forall temp___6472:cardindex.
  forall temp___6473:(int,cardindex) farray.
  forall temp___6474:(int,(int,cardindex) farray) farray.
  forall temp___6475:(int,cardindex) farray.
  forall temp___6476:(int,cardindex) farray.
  forall temp___6477:(int,cardindex) farray. forall o91:cardindex.
  forall o92:int. forall o93:(int,cardindex) farray. forall o94:cardindex.
  forall o95:(int,card) farray. forall o96:cardindex.
  forall o97:(int,cardindex) farray.
  forall o98:(int,(int,cardindex) farray) farray.
  forall o99:(int,cardindex) farray. forall o100:(int,cardindex) farray.
  forall o101:(int,cardindex) farray. forall temp___650:cardindex.
  forall temp___6501:(int,card) farray. forall temp___6502:cardindex.
  forall temp___6503:(int,cardindex) farray.
  forall temp___6504:(int,(int,cardindex) farray) farray.
  forall temp___6505:(int,cardindex) farray.
  forall temp___6506:(int,cardindex) farray.
  forall temp___6507:(int,cardindex) farray. forall o102:int.
  forall o103:cardindex. forall o104:int. forall o105:int.
  forall o106:cardindex. forall o107:int. forall o108:(int,cardindex) farray.
  forall o109:cardindex. forall o110:(int,card) farray.
  forall o111:cardindex. forall o112:(int,cardindex) farray.
  forall o113:(int,(int,cardindex) farray) farray.
  forall o114:(int,cardindex) farray. forall o115:(int,cardindex) farray.
  forall o116:(int,cardindex) farray. forall temp___623:cardindex.
  forall temp___6231:(int,card) farray. forall temp___6232:cardindex.
  forall temp___6233:(int,cardindex) farray.
  forall temp___6234:(int,(int,cardindex) farray) farray.
  forall temp___6235:(int,cardindex) farray.
  forall temp___6236:(int,cardindex) farray.
  forall temp___6237:(int,cardindex) farray. forall o117:int.
  forall o118:cardindex. forall o119:int. forall o120:(int,cardindex) farray.
  forall o121:int. forall o122:(int,(int,cardindex) farray) farray.
  forall o123:cardindex. forall o124:(int,card) farray.
  forall o125:cardindex. forall o126:(int,cardindex) farray.
  forall o127:(int,(int,cardindex) farray) farray.
  forall o128:(int,cardindex) farray. forall o129:(int,cardindex) farray.
  forall o130:(int,cardindex) farray. forall temp___628:cardindex.
  forall temp___6281:(int,card) farray. forall temp___6282:cardindex.
  forall temp___6283:(int,cardindex) farray.
  forall temp___6284:(int,(int,cardindex) farray) farray.
  forall temp___6285:(int,cardindex) farray.
  forall temp___6286:(int,cardindex) farray.
  forall temp___6287:(int,cardindex) farray. forall o131:int.
  forall o132:cardindex. forall o133:int. forall o134:(int,cardindex) farray.
  forall o135:cardindex. forall o136:(int,card) farray.
  forall o137:cardindex. forall o138:(int,cardindex) farray.
  forall o139:(int,(int,cardindex) farray) farray.
  forall o140:(int,cardindex) farray. forall o141:(int,cardindex) farray.
  forall o142:(int,cardindex) farray. forall temp___631:cardindex.
  forall temp___6311:(int,card) farray. forall temp___6312:cardindex.
  forall temp___6313:(int,cardindex) farray.
  forall temp___6314:(int,(int,cardindex) farray) farray.
  forall temp___6315:(int,cardindex) farray.
  forall temp___6316:(int,cardindex) farray.
  forall temp___6317:(int,cardindex) farray. forall o143:cardindex.
  forall o144:int. forall o145:(int,cardindex) farray. forall o146:cardindex.
  forall o147:(int,card) farray. forall o148:cardindex.
  forall o149:(int,cardindex) farray.
  forall o150:(int,(int,cardindex) farray) farray.
  forall o151:(int,cardindex) farray. forall o152:(int,cardindex) farray.
  forall o153:(int,cardindex) farray. forall temp___634:cardindex.
  forall temp___6341:(int,card) farray. forall temp___6342:cardindex.
  forall temp___6343:(int,cardindex) farray.
  forall temp___6344:(int,(int,cardindex) farray) farray.
  forall temp___6345:(int,cardindex) farray.
  forall temp___6346:(int,cardindex) farray.
  forall temp___6347:(int,cardindex) farray. forall i1:int. forall o154:int.
  forall o155:cardindex. forall temp___681:int. forall o156:int.
  forall o157:cardindex. forall o158:int. forall o159:int.
  forall o160:cardindex. forall o161:int. forall o162:bool. forall o163:bool.
  forall stackisize1:int. forall topstacki1:int. forall result:int__ref.
  forall pred1:int. forall result1:int__ref. forall i2:int. forall pred2:int.
  forall i3:int. forall stackisize2:int. forall topstacki2:int.
  forall result2:int__ref. forall stackisize3:int. forall result3:int__ref.
  forall topstacki3:int. forall result4:bool. forall result5:int__ref.
  forall pred3:int. forall result6:int__ref. forall i4:int.
  forall pred4:int__ref. forall i5:int__ref. forall pred5:int. forall i6:int.
  forall pred6:int__ref. forall i7:int__ref. forall stackisize4:int__ref.
  forall topstacki4:int__ref. forall pred7:int. forall i8:int.
  forall stackisize5:int. forall topstacki5:int. forall pred8:int__ref.
  forall i9:int__ref. forall stackisize6:int__ref.
  forall topstacki6:int__ref. forall pred9:int. forall i10:int.
  forall stackisize7:int. forall topstacki7:int. forall result7:int__ref.
  forall idx1:int. forall result8:us_split_fields__ref.
  forall s__split_fields8:us_split_fields.
  forall result9:us_split_fields__ref.
  forall s__split_fields9:us_split_fields.
  forall result10:us_split_fields__ref.
  forall s__split_fields10:us_split_fields. forall result11:int__ref.
  forall i11:int. forall result12:us_split_fields__ref.
  forall s__split_fields11:us_split_fields.
  forall result13:us_split_fields__ref.
  forall s__split_fields12:us_split_fields.
  forall result14:us_split_fields__ref.
  forall s__split_fields13:us_split_fields.
  forall result15:us_split_fields__ref.
  forall s__split_fields14:us_split_fields.
  forall result16:us_split_fields__ref.
  forall s__split_fields15:us_split_fields. forall result17:int__ref.
  forall stackisize8:int. forall result18:us_split_fields__ref.
  forall s__split_fields16:us_split_fields.
  forall result19:us_split_fields__ref.
  forall s__split_fields17:us_split_fields.
  forall result20:us_split_fields__ref.
  forall s__split_fields18:us_split_fields.
  forall result21:us_split_fields__ref.
  forall s__split_fields19:us_split_fields.
  forall s__split_fields20:us_split_fields__ref. forall i12:int__ref.
  forall stackisize9:int__ref. forall s__split_fields21:us_split_fields.
  forall i13:int. forall stackisize10:int. forall result22:bool.
  (in_range2(c) -> (((inv({ us_split_fields1 = {
  rec__patience__state__numelts = s__split_fields;
  rec__patience__state__values = s__split_fields1;
  rec__patience__state__numstacks = s__split_fields2;
  rec__patience__state__stacksizes = s__split_fields3;
  rec__patience__state__stacks = s__split_fields4;
  rec__patience__state__posstack = s__split_fields5;
  rec__patience__state__posheight = s__split_fields6;
  rec__patience__state__preds = s__split_fields7 } }) = true) and
  (to_rep1(s__split_fields) <  100)) -> ((((- 2147483648) <= 2147483647) ->
  in_range1(idx)) -> ((((- 2147483648) <= 2147483647) -> in_range1(pred)) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(i)) -> ((((- 1) <= 100) ->
  in_range3(stackisize)) -> ((((- 1) <= 100) -> in_range3(topstacki)) ->
  (((result = { int__content = pred }) and (pred1 = (- 1))) -> (((result1 = {
  int__content = i }) and (i2 = 0)) ->
  ((((i2 <  to_rep1(s__split_fields2)) and ((((temp___598 = topstacki) and
  ((temp___597 = stackisize) and ((temp___596 = i2) and
  ((temp___595 = pred1) and ((((0 <= i3) and
  (i3 <= to_rep1(s__split_fields2))) and (((i3 = 0) and (pred2 = (- 1))) or
  ((not (i3 = 0)) and (((((0 <= pred2) and
  (pred2 <= (to_rep1(s__split_fields) - 1))) and
  (pred2 = to_rep1(((s__split_fields4[(i3 - 1)])[(to_rep1((s__split_fields3[(i3 - 1)])) - 1)])))) and
  (to_rep((s__split_fields1[pred2])) <  c)) and
  (to_rep1((s__split_fields5[pred2])) = (i3 - 1)))))) and
  ((((((((- 2147483648) <= 2147483647) -> in_range1(pred2)) and
  (((- 2147483648) <= 2147483647) -> in_range1(i3))) and (((- 1) <= 100) ->
  in_range3(stackisize2))) and (((- 1) <= 100) -> in_range3(topstacki2))) and
  (i3 <  to_rep1(s__split_fields2))) and (((((((0 <= i3) and (i3 <= 99)) and
  (o = i3)) and (o1 = (s__split_fields3[o]))) and (o2 = to_rep1(o1))) and
  ((result2 = { int__content = stackisize2 }) and (stackisize3 = o2))) and
  ((((((((0 <= i3) and (i3 <= 99)) and (o3 = i3)) and
  (temp___565 = (s__split_fields4[o3]))) and ((((0 <= (stackisize3 - 1)) and
  ((stackisize3 - 1) <= 99)) and (o4 = (stackisize3 - 1))) and
  (o5 = (temp___565[o4])))) and (o6 = to_rep1(o5))) and ((result3 = {
  int__content = topstacki2 }) and (topstacki3 = o6))) and (((((i5 = {
  int__content = i3 }) and (pred4 = { int__content = pred2 })) and
  ((i6 = i3) and (pred5 = pred2))) and (((((((0 <= topstacki3) and
  (topstacki3 <= 99)) and (o7 = topstacki3)) and
  (o8 = (s__split_fields1[o7]))) and (o9 = to_rep(o8))) and (((c <= o9) and
  (result4 = true)) or ((not (c <= o9)) and (result4 = false)))) and
  (result4 = true))) or ((((((((0 <= topstacki3) and (topstacki3 <= 99)) and
  (o7 = topstacki3)) and (o8 = (s__split_fields1[o7]))) and
  (o9 = to_rep(o8))) and (((c <= o9) and (result4 = true)) or
  ((not (c <= o9)) and (result4 = false)))) and (not (result4 = true))) and
  ((((i5 = { int__content = i4 }) and (pred4 = { int__content = pred3 })) and
  ((i6 = i4) and (pred5 = pred3))) and (((0 <= topstacki3) and
  (topstacki3 <  to_rep1(s__split_fields))) and
  ((((((((0 <= to_rep1((s__split_fields5[topstacki3]))) and
  (to_rep1((s__split_fields5[topstacki3])) <  to_rep1(s__split_fields2))) and
  (0 <= to_rep1((s__split_fields6[topstacki3])))) and
  (to_rep1((s__split_fields6[topstacki3])) <  to_rep1((s__split_fields3[to_rep1((s__split_fields5[topstacki3]))])))) and
  (to_rep1(((s__split_fields4[to_rep1((s__split_fields5[topstacki3]))])[to_rep1((s__split_fields6[topstacki3]))])) = topstacki3)) and
  (to_rep1((s__split_fields5[topstacki3])) = i3)) and
  (to_rep1((s__split_fields6[topstacki3])) = (stackisize3 - 1))) and
  (((result5 = { int__content = pred2 }) and (pred3 = topstacki3)) and
  ((((o10 = (i3 + 1)) and in_range1((i3 + 1))) and ((result6 = {
  int__content = i3 }) and (i4 = o10))) and
  (not (i4 <  to_rep1(s__split_fields2)))))))))))))))))) and
  (((topstacki4 = { int__content = topstacki3 }) and ((stackisize4 = {
  int__content = stackisize3 }) and ((i7 = i5) and (pred6 = pred4)))) and
  ((topstacki5 = topstacki3) and ((stackisize5 = stackisize3) and
  ((i8 = i6) and (pred7 = pred5)))))) and (((topstacki6 = topstacki4) and
  ((stackisize6 = stackisize4) and ((i9 = i7) and (pred8 = pred6)))) and
  ((topstacki7 = topstacki5) and ((stackisize7 = stackisize5) and
  ((i10 = i8) and (pred9 = pred7))))))) or
  ((not (i2 <  to_rep1(s__split_fields2))) and (((topstacki6 = {
  int__content = topstacki }) and ((stackisize6 = { int__content = stackisize
  }) and ((i9 = { int__content = i2 }) and (pred8 = { int__content = pred1
  })))) and ((topstacki7 = topstacki1) and ((stackisize7 = stackisize1) and
  ((i10 = i2) and (pred9 = pred1))))))) -> (((result7 = { int__content = idx
  }) and (idx1 = to_rep1(s__split_fields))) -> ((((((to_rep(o11) = c) and
  ((((0 <= idx1) and (idx1 <= 99)) and (o12 = idx1)) and
  (o13 = (s__split_fields1[o12 <- o11])))) and ((s__split_fields = o14) and
  ((o13 = o15) and ((s__split_fields2 = o16) and
  ((s__split_fields3 = o17) and ((s__split_fields4 = o18) and
  ((s__split_fields5 = o19) and ((s__split_fields6 = o20) and
  (s__split_fields7 = o21))))))))) and ((temp___614 = o14) and
  ((temp___6141 = o15) and ((temp___6142 = o16) and ((temp___6143 = o17) and
  ((temp___6144 = o18) and ((temp___6145 = o19) and ((temp___6146 = o20) and
  (temp___6147 = o21))))))))) and ((result8 = { us_split_fields__content = {
  rec__patience__state__numelts = s__split_fields;
  rec__patience__state__values = s__split_fields1;
  rec__patience__state__numstacks = s__split_fields2;
  rec__patience__state__stacksizes = s__split_fields3;
  rec__patience__state__stacks = s__split_fields4;
  rec__patience__state__posstack = s__split_fields5;
  rec__patience__state__posheight = s__split_fields6;
  rec__patience__state__preds = s__split_fields7 } }) and
  (s__split_fields8 = { rec__patience__state__numelts = temp___614;
  rec__patience__state__values = temp___6141;
  rec__patience__state__numstacks = temp___6142;
  rec__patience__state__stacksizes = temp___6143;
  rec__patience__state__stacks = temp___6144;
  rec__patience__state__posstack = temp___6145;
  rec__patience__state__posheight = temp___6146;
  rec__patience__state__preds = temp___6147 }))) ->
  ((((((((o22 = (idx1 + 1)) and in_range1((idx1 + 1))) and ((o23 = o22) and
  in_range3(o22))) and (to_rep1(o24) = o23)) and ((o24 = o25) and
  (((s__split_fields8).rec__patience__state__values = o26) and
  (((s__split_fields8).rec__patience__state__numstacks = o27) and
  (((s__split_fields8).rec__patience__state__stacksizes = o28) and
  (((s__split_fields8).rec__patience__state__stacks = o29) and
  (((s__split_fields8).rec__patience__state__posstack = o30) and
  (((s__split_fields8).rec__patience__state__posheight = o31) and
  ((s__split_fields8).rec__patience__state__preds = o32))))))))) and
  ((temp___616 = o25) and ((temp___6161 = o26) and ((temp___6162 = o27) and
  ((temp___6163 = o28) and ((temp___6164 = o29) and ((temp___6165 = o30) and
  ((temp___6166 = o31) and (temp___6167 = o32))))))))) and ((result9 = {
  us_split_fields__content = s__split_fields8 }) and (s__split_fields9 = {
  rec__patience__state__numelts = temp___616; rec__patience__state__values =
  temp___6161; rec__patience__state__numstacks = temp___6162;
  rec__patience__state__stacksizes = temp___6163;
  rec__patience__state__stacks = temp___6164;
  rec__patience__state__posstack = temp___6165;
  rec__patience__state__posheight = temp___6166;
  rec__patience__state__preds = temp___6167 }))) ->
  ((((((((o33 = (pred8).int__content) and
  in_range3((pred8).int__content)) and (to_rep1(o34) = o33)) and
  ((((0 <= idx1) and (idx1 <= 99)) and (o35 = idx1)) and
  (o36 = ((s__split_fields9).rec__patience__state__preds[o35 <- o34])))) and
  (((s__split_fields9).rec__patience__state__numelts = o37) and
  (((s__split_fields9).rec__patience__state__values = o38) and
  (((s__split_fields9).rec__patience__state__numstacks = o39) and
  (((s__split_fields9).rec__patience__state__stacksizes = o40) and
  (((s__split_fields9).rec__patience__state__stacks = o41) and
  (((s__split_fields9).rec__patience__state__posstack = o42) and
  (((s__split_fields9).rec__patience__state__posheight = o43) and
  (o36 = o44))))))))) and ((temp___619 = o37) and ((temp___6191 = o38) and
  ((temp___6192 = o39) and ((temp___6193 = o40) and ((temp___6194 = o41) and
  ((temp___6195 = o42) and ((temp___6196 = o43) and
  (temp___6197 = o44))))))))) and ((result10 = { us_split_fields__content =
  s__split_fields9 }) and (s__split_fields10 = {
  rec__patience__state__numelts = temp___619; rec__patience__state__values =
  temp___6191; rec__patience__state__numstacks = temp___6192;
  rec__patience__state__stacksizes = temp___6193;
  rec__patience__state__stacks = temp___6194;
  rec__patience__state__posstack = temp___6195;
  rec__patience__state__posheight = temp___6196;
  rec__patience__state__preds = temp___6197 }))) ->
  (((((i9).int__content = to_rep1((s__split_fields10).rec__patience__state__numstacks)) and
  ((((result11 = i9) and
  (i11 = to_rep1((s__split_fields10).rec__patience__state__numstacks))) and
  (((((((o45 = (to_rep1((s__split_fields10).rec__patience__state__numstacks) + 1)) and
  in_range3((to_rep1((s__split_fields10).rec__patience__state__numstacks) + 1))) and
  (to_rep1(o46) = o45)) and
  (((s__split_fields10).rec__patience__state__numelts = o47) and
  (((s__split_fields10).rec__patience__state__values = o48) and
  ((o46 = o49) and
  (((s__split_fields10).rec__patience__state__stacksizes = o50) and
  (((s__split_fields10).rec__patience__state__stacks = o51) and
  (((s__split_fields10).rec__patience__state__posstack = o52) and
  (((s__split_fields10).rec__patience__state__posheight = o53) and
  ((s__split_fields10).rec__patience__state__preds = o54))))))))) and
  ((temp___636 = o47) and ((temp___6361 = o48) and ((temp___6362 = o49) and
  ((temp___6363 = o50) and ((temp___6364 = o51) and ((temp___6365 = o52) and
  ((temp___6366 = o53) and (temp___6367 = o54))))))))) and ((result12 = {
  us_split_fields__content = s__split_fields10 }) and (s__split_fields11 = {
  rec__patience__state__numelts = temp___636; rec__patience__state__values =
  temp___6361; rec__patience__state__numstacks = temp___6362;
  rec__patience__state__stacksizes = temp___6363;
  rec__patience__state__stacks = temp___6364;
  rec__patience__state__posstack = temp___6365;
  rec__patience__state__posheight = temp___6366;
  rec__patience__state__preds = temp___6367 }))) and
  ((((((to_rep1(o55) = 1) and ((((0 <= i11) and (i11 <= 99)) and
  (o56 = i11)) and
  (o57 = ((s__split_fields11).rec__patience__state__stacksizes[o56 <- o55])))) and
  (((s__split_fields11).rec__patience__state__numelts = o58) and
  (((s__split_fields11).rec__patience__state__values = o59) and
  (((s__split_fields11).rec__patience__state__numstacks = o60) and
  ((o57 = o61) and
  (((s__split_fields11).rec__patience__state__stacks = o62) and
  (((s__split_fields11).rec__patience__state__posstack = o63) and
  (((s__split_fields11).rec__patience__state__posheight = o64) and
  ((s__split_fields11).rec__patience__state__preds = o65))))))))) and
  ((temp___639 = o58) and ((temp___6391 = o59) and ((temp___6392 = o60) and
  ((temp___6393 = o61) and ((temp___6394 = o62) and ((temp___6395 = o63) and
  ((temp___6396 = o64) and (temp___6397 = o65))))))))) and ((result13 = {
  us_split_fields__content = s__split_fields11 }) and (s__split_fields12 = {
  rec__patience__state__numelts = temp___639; rec__patience__state__values =
  temp___6391; rec__patience__state__numstacks = temp___6392;
  rec__patience__state__stacksizes = temp___6393;
  rec__patience__state__stacks = temp___6394;
  rec__patience__state__posstack = temp___6395;
  rec__patience__state__posheight = temp___6396;
  rec__patience__state__preds = temp___6397 }))) and (((((((((o66 = idx1) and
  in_range3(idx1)) and (to_rep1(o67) = o66)) and
  (o68 = (((s__split_fields12).rec__patience__state__stacks[i11])[0 <- o67]))) and
  ((((0 <= i11) and (i11 <= 99)) and (o69 = i11)) and
  (o70 = ((s__split_fields12).rec__patience__state__stacks[o69 <- o68])))) and
  (((s__split_fields12).rec__patience__state__numelts = o71) and
  (((s__split_fields12).rec__patience__state__values = o72) and
  (((s__split_fields12).rec__patience__state__numstacks = o73) and
  (((s__split_fields12).rec__patience__state__stacksizes = o74) and
  ((o70 = o75) and
  (((s__split_fields12).rec__patience__state__posstack = o76) and
  (((s__split_fields12).rec__patience__state__posheight = o77) and
  ((s__split_fields12).rec__patience__state__preds = o78))))))))) and
  ((temp___644 = o71) and ((temp___6441 = o72) and ((temp___6442 = o73) and
  ((temp___6443 = o74) and ((temp___6444 = o75) and ((temp___6445 = o76) and
  ((temp___6446 = o77) and (temp___6447 = o78))))))))) and ((result14 = {
  us_split_fields__content = s__split_fields12 }) and (s__split_fields13 = {
  rec__patience__state__numelts = temp___644; rec__patience__state__values =
  temp___6441; rec__patience__state__numstacks = temp___6442;
  rec__patience__state__stacksizes = temp___6443;
  rec__patience__state__stacks = temp___6444;
  rec__patience__state__posstack = temp___6445;
  rec__patience__state__posheight = temp___6446;
  rec__patience__state__preds = temp___6447 }))) and ((((((((o79 = i11) and
  in_range3(i11)) and (to_rep1(o80) = o79)) and ((((0 <= idx1) and
  (idx1 <= 99)) and (o81 = idx1)) and
  (o82 = ((s__split_fields13).rec__patience__state__posstack[o81 <- o80])))) and
  (((s__split_fields13).rec__patience__state__numelts = o83) and
  (((s__split_fields13).rec__patience__state__values = o84) and
  (((s__split_fields13).rec__patience__state__numstacks = o85) and
  (((s__split_fields13).rec__patience__state__stacksizes = o86) and
  (((s__split_fields13).rec__patience__state__stacks = o87) and
  ((o82 = o88) and
  (((s__split_fields13).rec__patience__state__posheight = o89) and
  ((s__split_fields13).rec__patience__state__preds = o90))))))))) and
  ((temp___647 = o83) and ((temp___6471 = o84) and ((temp___6472 = o85) and
  ((temp___6473 = o86) and ((temp___6474 = o87) and ((temp___6475 = o88) and
  ((temp___6476 = o89) and (temp___6477 = o90))))))))) and ((result15 = {
  us_split_fields__content = s__split_fields13 }) and (s__split_fields14 = {
  rec__patience__state__numelts = temp___647; rec__patience__state__values =
  temp___6471; rec__patience__state__numstacks = temp___6472;
  rec__patience__state__stacksizes = temp___6473;
  rec__patience__state__stacks = temp___6474;
  rec__patience__state__posstack = temp___6475;
  rec__patience__state__posheight = temp___6476;
  rec__patience__state__preds = temp___6477 }))) and
  (((((to_rep1(o91) = 0) and ((((0 <= idx1) and (idx1 <= 99)) and
  (o92 = idx1)) and
  (o93 = ((s__split_fields14).rec__patience__state__posheight[o92 <- o91])))) and
  (((s__split_fields14).rec__patience__state__numelts = o94) and
  (((s__split_fields14).rec__patience__state__values = o95) and
  (((s__split_fields14).rec__patience__state__numstacks = o96) and
  (((s__split_fields14).rec__patience__state__stacksizes = o97) and
  (((s__split_fields14).rec__patience__state__stacks = o98) and
  (((s__split_fields14).rec__patience__state__posstack = o99) and
  ((o93 = o100) and
  ((s__split_fields14).rec__patience__state__preds = o101))))))))) and
  ((temp___650 = o94) and ((temp___6501 = o95) and ((temp___6502 = o96) and
  ((temp___6503 = o97) and ((temp___6504 = o98) and ((temp___6505 = o99) and
  ((temp___6506 = o100) and (temp___6507 = o101))))))))) and ((result16 = {
  us_split_fields__content = s__split_fields14 }) and (s__split_fields15 = {
  rec__patience__state__numelts = temp___650; rec__patience__state__values =
  temp___6501; rec__patience__state__numstacks = temp___6502;
  rec__patience__state__stacksizes = temp___6503;
  rec__patience__state__stacks = temp___6504;
  rec__patience__state__posstack = temp___6505;
  rec__patience__state__posheight = temp___6506;
  rec__patience__state__preds = temp___6507 })))))))) and
  (((stackisize9 = stackisize6) and ((i12 = { int__content = i11 }) and
  (s__split_fields20 = { us_split_fields__content = s__split_fields15
  }))) and ((stackisize10 = stackisize7) and ((i13 = i11) and
  (s__split_fields21 = s__split_fields15)))))) or
  ((not ((i9).int__content = to_rep1((s__split_fields10).rec__patience__state__numstacks))) and
  ((((((((0 <= (i9).int__content) and ((i9).int__content <= 99)) and
  (o102 = (i9).int__content)) and
  (o103 = ((s__split_fields10).rec__patience__state__stacksizes[o102]))) and
  (o104 = to_rep1(o103))) and ((result17 = stackisize6) and
  (stackisize8 = o104))) and ((((((((o105 = (stackisize8 + 1)) and
  in_range3((stackisize8 + 1))) and (to_rep1(o106) = o105)) and
  ((((0 <= (i9).int__content) and ((i9).int__content <= 99)) and
  (o107 = (i9).int__content)) and
  (o108 = ((s__split_fields10).rec__patience__state__stacksizes[o107 <- o106])))) and
  (((s__split_fields10).rec__patience__state__numelts = o109) and
  (((s__split_fields10).rec__patience__state__values = o110) and
  (((s__split_fields10).rec__patience__state__numstacks = o111) and
  ((o108 = o112) and
  (((s__split_fields10).rec__patience__state__stacks = o113) and
  (((s__split_fields10).rec__patience__state__posstack = o114) and
  (((s__split_fields10).rec__patience__state__posheight = o115) and
  ((s__split_fields10).rec__patience__state__preds = o116))))))))) and
  ((temp___623 = o109) and ((temp___6231 = o110) and
  ((temp___6232 = o111) and ((temp___6233 = o112) and
  ((temp___6234 = o113) and ((temp___6235 = o114) and
  ((temp___6236 = o115) and (temp___6237 = o116))))))))) and ((result18 = {
  us_split_fields__content = s__split_fields10 }) and (s__split_fields16 = {
  rec__patience__state__numelts = temp___623; rec__patience__state__values =
  temp___6231; rec__patience__state__numstacks = temp___6232;
  rec__patience__state__stacksizes = temp___6233;
  rec__patience__state__stacks = temp___6234;
  rec__patience__state__posstack = temp___6235;
  rec__patience__state__posheight = temp___6236;
  rec__patience__state__preds = temp___6237 }))) and
  (((((((((o117 = idx1) and in_range3(idx1)) and (to_rep1(o118) = o117)) and
  ((((0 <= stackisize8) and (stackisize8 <= 99)) and
  (o119 = stackisize8)) and
  (o120 = (((s__split_fields16).rec__patience__state__stacks[(i9).int__content])[o119 <- o118])))) and
  ((((0 <= (i9).int__content) and ((i9).int__content <= 99)) and
  (o121 = (i9).int__content)) and
  (o122 = ((s__split_fields16).rec__patience__state__stacks[o121 <- o120])))) and
  (((s__split_fields16).rec__patience__state__numelts = o123) and
  (((s__split_fields16).rec__patience__state__values = o124) and
  (((s__split_fields16).rec__patience__state__numstacks = o125) and
  (((s__split_fields16).rec__patience__state__stacksizes = o126) and
  ((o122 = o127) and
  (((s__split_fields16).rec__patience__state__posstack = o128) and
  (((s__split_fields16).rec__patience__state__posheight = o129) and
  ((s__split_fields16).rec__patience__state__preds = o130))))))))) and
  ((temp___628 = o123) and ((temp___6281 = o124) and
  ((temp___6282 = o125) and ((temp___6283 = o126) and
  ((temp___6284 = o127) and ((temp___6285 = o128) and
  ((temp___6286 = o129) and (temp___6287 = o130))))))))) and ((result19 = {
  us_split_fields__content = s__split_fields16 }) and (s__split_fields17 = {
  rec__patience__state__numelts = temp___628; rec__patience__state__values =
  temp___6281; rec__patience__state__numstacks = temp___6282;
  rec__patience__state__stacksizes = temp___6283;
  rec__patience__state__stacks = temp___6284;
  rec__patience__state__posstack = temp___6285;
  rec__patience__state__posheight = temp___6286;
  rec__patience__state__preds = temp___6287 }))) and
  ((((((((o131 = (i9).int__content) and in_range3((i9).int__content)) and
  (to_rep1(o132) = o131)) and ((((0 <= idx1) and (idx1 <= 99)) and
  (o133 = idx1)) and
  (o134 = ((s__split_fields17).rec__patience__state__posstack[o133 <- o132])))) and
  (((s__split_fields17).rec__patience__state__numelts = o135) and
  (((s__split_fields17).rec__patience__state__values = o136) and
  (((s__split_fields17).rec__patience__state__numstacks = o137) and
  (((s__split_fields17).rec__patience__state__stacksizes = o138) and
  (((s__split_fields17).rec__patience__state__stacks = o139) and
  ((o134 = o140) and
  (((s__split_fields17).rec__patience__state__posheight = o141) and
  ((s__split_fields17).rec__patience__state__preds = o142))))))))) and
  ((temp___631 = o135) and ((temp___6311 = o136) and
  ((temp___6312 = o137) and ((temp___6313 = o138) and
  ((temp___6314 = o139) and ((temp___6315 = o140) and
  ((temp___6316 = o141) and (temp___6317 = o142))))))))) and ((result20 = {
  us_split_fields__content = s__split_fields17 }) and (s__split_fields18 = {
  rec__patience__state__numelts = temp___631; rec__patience__state__values =
  temp___6311; rec__patience__state__numstacks = temp___6312;
  rec__patience__state__stacksizes = temp___6313;
  rec__patience__state__stacks = temp___6314;
  rec__patience__state__posstack = temp___6315;
  rec__patience__state__posheight = temp___6316;
  rec__patience__state__preds = temp___6317 }))) and
  (((((to_rep1(o143) = stackisize8) and ((((0 <= idx1) and (idx1 <= 99)) and
  (o144 = idx1)) and
  (o145 = ((s__split_fields18).rec__patience__state__posheight[o144 <- o143])))) and
  (((s__split_fields18).rec__patience__state__numelts = o146) and
  (((s__split_fields18).rec__patience__state__values = o147) and
  (((s__split_fields18).rec__patience__state__numstacks = o148) and
  (((s__split_fields18).rec__patience__state__stacksizes = o149) and
  (((s__split_fields18).rec__patience__state__stacks = o150) and
  (((s__split_fields18).rec__patience__state__posstack = o151) and
  ((o145 = o152) and
  ((s__split_fields18).rec__patience__state__preds = o153))))))))) and
  ((temp___634 = o146) and ((temp___6341 = o147) and
  ((temp___6342 = o148) and ((temp___6343 = o149) and
  ((temp___6344 = o150) and ((temp___6345 = o151) and
  ((temp___6346 = o152) and (temp___6347 = o153))))))))) and ((result21 = {
  us_split_fields__content = s__split_fields18 }) and (s__split_fields19 = {
  rec__patience__state__numelts = temp___634; rec__patience__state__values =
  temp___6341; rec__patience__state__numstacks = temp___6342;
  rec__patience__state__stacksizes = temp___6343;
  rec__patience__state__stacks = temp___6344;
  rec__patience__state__posstack = temp___6345;
  rec__patience__state__posheight = temp___6346;
  rec__patience__state__preds = temp___6347 }))))))) and (((stackisize9 = {
  int__content = stackisize8 }) and ((i12 = i9) and (s__split_fields20 = {
  us_split_fields__content = s__split_fields19 }))) and
  ((stackisize10 = stackisize8) and ((i13 = i10) and
  (s__split_fields21 = s__split_fields19))))))) ->
  (((((0 <= to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks)) and
  (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks) <= to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numelts))) and
  (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numelts) <= 100)) and
  ((to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numelts) = 0) or
  (0 <  to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks)))) ->
  ((forall i14:int. (((0 <= i14) and
   (i14 <= (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks) - 1))) ->
   (1 <= to_rep1((((s__split_fields20).us_split_fields__content).rec__patience__state__stacksizes[i14]))))) ->
  ((forall i14:int. (((0 <= i14) and
   (i14 <= (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks) - 1))) ->
   ((to_rep1((((s__split_fields20).us_split_fields__content).rec__patience__state__stacksizes[i14])) <= to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numelts)) and
   (forall j:int. (((0 <= j) and
   (j <= (to_rep1((((s__split_fields20).us_split_fields__content).rec__patience__state__stacksizes[i14])) - 1))) ->
   ((0 <= to_rep1(((((s__split_fields20).us_split_fields__content).rec__patience__state__stacks[i14])[j]))) and
   (to_rep1(((((s__split_fields20).us_split_fields__content).rec__patience__state__stacks[i14])[j])) <  to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numelts)))))))) ->
  (((0 <= i1) and
  (i1 <= (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numelts) - 1))) ->
  ((((((((0 <= i1) and (i1 <= 99)) and (o159 = i1)) and
  (o160 = (((s__split_fields20).us_split_fields__content).rec__patience__state__posstack[o159]))) and
  (o161 = to_rep1(o160))) and
  (((o161 <= (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks) - 1)) and
  (o162 = true)) or
  ((not (o161 <= (to_rep1(((s__split_fields20).us_split_fields__content).rec__patience__state__numstacks) - 1))) and
  (o162 = false)))) and (((((((0 <= i1) and (i1 <= 99)) and (o156 = i1)) and
  (o157 = (((s__split_fields20).us_split_fields__content).rec__patience__state__posstack[o156]))) and
  (o158 = to_rep1(o157))) and (((0 <= o158) and (o163 = true)) or
  ((not (0 <= o158)) and (o163 = false)))) and (result22 = match_bool(o163,
  o162, false)))) -> ((result22 = true) -> ((((((0 <= i1) and (i1 <= 99)) and
  (o154 = i1)) and
  (o155 = (((s__split_fields20).us_split_fields__content).rec__patience__state__posstack[o154]))) and
  (temp___681 = to_rep1(o155))) -> (0 <= temp___681))))))))))))))))))))))))
