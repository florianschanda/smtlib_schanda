(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 10)) (in_range temp___expr_166)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 99)) (in_range1 temp___expr_173)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp_____aggregate_def_203 ((Array Int et1) Int Int Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_229 ((Array Int et1) Int Int Int Int Int Int) (Array Int et1))
(assert (forall ((temp___231 (Array Int et1))) (forall ((temp___232 Int) (temp___233 Int) (temp___234 Int) (temp___235 Int) (temp___236 Int) (temp___237 Int)) (let ((temp___230 (temp_____aggregate_def_229 temp___231 temp___232 temp___233 temp___234 temp___235 temp___236 temp___237))) (=> (and (and (and (and (and (dynamic_invariant temp___232 true true true true) (dynamic_invariant temp___233 true true true true)) (dynamic_invariant temp___234 true true true true)) (dynamic_invariant1 temp___235 true true true true)) (dynamic_invariant temp___236 true true true true)) (dynamic_invariant1 temp___237 true true true true)) (forall ((temp___238 Int)) (ite (= temp___238 temp___236) (= (to_rep (select temp___230 temp___238)) temp___237) (ite (or (= temp___238 temp___232) (and (<= temp___233 temp___238) (<= temp___238 temp___234))) (= (to_rep (select temp___230 temp___238)) temp___235) (= (select temp___230 temp___238) (select temp___231 temp___238))))))))))
(assert (forall ((temp___205 (Array Int et1))) (forall ((temp___206 Int) (temp___207 Int) (temp___208 Int) (temp___209 Int) (temp___210 Int) (temp___211 Int)) (let ((temp___204 (temp_____aggregate_def_203 temp___205 temp___206 temp___207 temp___208 temp___209 temp___210 temp___211))) (=> (and (and (and (and (and (dynamic_invariant temp___206 true true true true) (dynamic_invariant temp___207 true true true true)) (dynamic_invariant temp___208 true true true true)) (dynamic_invariant1 temp___209 true true true true)) (dynamic_invariant temp___210 true true true true)) (dynamic_invariant1 temp___211 true true true true)) (forall ((temp___212 Int)) (ite (= temp___212 temp___210) (= (to_rep (select temp___204 temp___212)) temp___211) (ite (or (= temp___212 temp___206) (and (<= temp___207 temp___212) (<= temp___212 temp___208))) (= (to_rep (select temp___204 temp___212)) temp___209) (= (select temp___204 temp___212) (select temp___205 temp___212))))))))))
(declare-const a (Array Int et1))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 (Array Int et1))
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const result (Array Int et1))
(declare-const a1 (Array Int et1))
(declare-const a2 (Array Int et1))
(declare-const a3 (Array Int et1))
(assert (in_range i))
(assert (in_range j))
(assert (in_range1 e))
(assert (and (= o (+ e 1)) (in_range1 (+ e 1))))
(assert (and (= o1 (+ j 1)) (in_range (+ j 1))))
(assert (and (= o2 (- e 1)) (in_range1 (- e 1))))
(assert (and (= o3 (+ j 2)) (in_range (+ j 2))))
(assert (and (= o4 (- i 1)) (in_range (- i 1))))
(assert (= o5 (temp_____aggregate_def_229 a o4 i o3 o2 o1 o)))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 o5))
(assert (= a1 a2))
(assert (= a3 a1))
(assert (and (= o6 (+ e 1)) (in_range1 (+ e 1))))
(assert (and (= o7 (+ j 1)) (in_range (+ j 1))))
(assert (and (= o8 (- e 1)) (in_range1 (- e 1))))
(assert (not (in_range (+ j 2))))
(check-sat)
(exit)
