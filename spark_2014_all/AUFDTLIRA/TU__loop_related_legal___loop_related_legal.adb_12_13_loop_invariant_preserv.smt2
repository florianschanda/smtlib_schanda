(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tarray_tD1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tarray_tD1 tarray_tD1) Bool)
(declare-const dummy2 tarray_tD1)
(declare-datatypes () ((tarray_tD1__ref (mk_tarray_tD1__ref (tarray_tD1__content tarray_tD1)))))
(define-fun tarray_tD1__ref___projection ((a tarray_tD1__ref)) tarray_tD1 (tarray_tD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t8b 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (t8b t8b) Bool)
(declare-const dummy3 t8b)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content t8b)))))
(define-fun t8b__ref___projection ((a t8b__ref)) t8b (t8b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const arr (Array Int natural))
(declare-const n Int)
(declare-const o Int)
(declare-const o1 natural)
(declare-const o2 (Array Int natural))
(declare-const o3 Int)
(declare-const o4 natural)
(declare-const o5 (Array Int natural))
(declare-const arr1 (Array Int natural))
(declare-const result Int)
(declare-const n1 Int)
(declare-const result1 (Array Int natural))
(declare-const arr2 (Array Int natural))
(declare-const arr3 (Array Int natural))
(declare-const n2 Int)
(declare-const result2 Int)
(declare-const n3 Int)
(declare-const result3 (Array Int natural))
(declare-const arr4 (Array Int natural))
(assert (= result n))
(assert (= n1 1))
(assert (<= 1 n1))
(assert (<= n1 10))
(assert (=> (< (to_rep (select arr n1)) 2147483647) (and (= o (+ (to_rep (select arr n1)) 1)) (in_range1 (+ (to_rep (select arr n1)) 1)))))
(assert (=> (< (to_rep (select arr n1)) 2147483647) (= (to_rep o1) o)))
(assert (=> (< (to_rep (select arr n1)) 2147483647) (= o2 (store arr n1 o1))))
(assert (=> (< (to_rep (select arr n1)) 2147483647) (= result1 arr)))
(assert (=> (< (to_rep (select arr n1)) 2147483647) (= arr2 o2)))
(assert (=> (not (< (to_rep (select arr n1)) 2147483647)) (= arr2 arr)))
(assert (=> (not (< (to_rep (select arr n1)) 2147483647)) (= arr2 arr1)))
(assert (forall ((i Int)) (=> (and (<= 1 i) (<= i 10)) (<= (to_rep (select arr i)) (to_rep (select arr3 i))))))
(assert (and (and (=> (<= 1 10) (in_range4 n2)) (forall ((temp___167 Int)) (=> (and (<= 1 temp___167) (<= temp___167 10)) (=> (< n2 temp___167) (= (select arr3 temp___167) (select arr temp___167)))))) (and (<= 1 n2) (<= n2 10))))
(assert (not (= n2 10)))
(assert (= n2 result2))
(assert (= n3 (+ n2 1)))
(assert (=> (< (to_rep (select arr3 n3)) 2147483647) (and (= o3 (+ (to_rep (select arr3 n3)) 1)) (in_range1 (+ (to_rep (select arr3 n3)) 1)))))
(assert (=> (< (to_rep (select arr3 n3)) 2147483647) (= (to_rep o4) o3)))
(assert (=> (< (to_rep (select arr3 n3)) 2147483647) (= o5 (store arr3 n3 o4))))
(assert (=> (< (to_rep (select arr3 n3)) 2147483647) (= result3 arr3)))
(assert (=> (< (to_rep (select arr3 n3)) 2147483647) (= arr4 o5)))
(assert (=> (not (< (to_rep (select arr3 n3)) 2147483647)) (= arr4 arr3)))
(declare-const i Int)
(assert (<= 1 i))
(assert (<= i 10))
(assert (not (<= (to_rep (select arr i)) (to_rep (select arr4 i)))))
(check-sat)
(exit)
