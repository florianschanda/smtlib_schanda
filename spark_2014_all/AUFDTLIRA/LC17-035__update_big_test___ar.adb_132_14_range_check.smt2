(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range1 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun temp_____aggregate_def_700 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_709 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_718 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_727 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_4424 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___4426 (Array Int et1))) (forall ((temp___4427 Int) (temp___4428 Int)) (let ((temp___4425 (temp_____aggregate_def_4424 temp___4426 temp___4427 temp___4428))) (=> (and (dynamic_invariant temp___4427 true true true true) (dynamic_invariant1 temp___4428 true true true true)) (forall ((temp___4429 Int)) (ite (= temp___4429 temp___4427) (= (to_rep (select temp___4425 temp___4429)) temp___4428) (= (select temp___4425 temp___4429) (select temp___4426 temp___4429)))))))))
(assert (forall ((temp___702 (Array Int et1))) (forall ((temp___703 Int) (temp___704 Int) (temp___705 Int) (temp___706 Int)) (let ((temp___701 (temp_____aggregate_def_700 temp___702 temp___703 temp___704 temp___705 temp___706))) (=> (and (and (and (dynamic_invariant temp___703 true true true true) (dynamic_invariant1 temp___704 true true true true)) (dynamic_invariant temp___705 true true true true)) (dynamic_invariant1 temp___706 true true true true)) (forall ((temp___707 Int)) (ite (= temp___707 temp___705) (= (to_rep (select temp___701 temp___707)) temp___706) (ite (= temp___707 temp___703) (= (to_rep (select temp___701 temp___707)) temp___704) (= (select temp___701 temp___707) (select temp___702 temp___707))))))))))
(declare-const rliteral et1)
(assert (= (et1qtint rliteral) 99))
(assert (forall ((temp___711 (Array Int et1))) (forall ((temp___712 Int) (temp___713 Int) (temp___714 Int) (temp___715 Int)) (let ((temp___710 (temp_____aggregate_def_709 temp___711 temp___712 temp___713 temp___714 temp___715))) (=> (and (and (and (dynamic_invariant temp___712 true true true true) (dynamic_invariant1 temp___713 true true true true)) (dynamic_invariant temp___714 true true true true)) (dynamic_invariant1 temp___715 true true true true)) (forall ((temp___716 Int)) (ite (= temp___716 temp___714) (= (select temp___710 temp___716) rliteral) (ite (= temp___716 temp___712) (= (to_rep (select temp___710 temp___716)) temp___713) (= (select temp___710 temp___716) (select temp___711 temp___716))))))))))
(assert (forall ((temp___720 (Array Int et1))) (forall ((temp___721 Int) (temp___722 Int) (temp___723 Int) (temp___724 Int)) (let ((temp___719 (temp_____aggregate_def_718 temp___720 temp___721 temp___722 temp___723 temp___724))) (=> (and (and (and (dynamic_invariant temp___721 true true true true) (dynamic_invariant1 temp___722 true true true true)) (dynamic_invariant temp___723 true true true true)) (dynamic_invariant1 temp___724 true true true true)) (forall ((temp___725 Int)) (ite (= temp___725 temp___723) (= (to_rep (select temp___719 temp___725)) temp___724) (ite (= temp___725 temp___721) (= (to_rep (select temp___719 temp___725)) temp___722) (= (select temp___719 temp___725) (select temp___720 temp___725))))))))))
(assert (forall ((temp___729 (Array Int et1))) (forall ((temp___730 Int) (temp___731 Int) (temp___732 Int) (temp___733 Int)) (let ((temp___728 (temp_____aggregate_def_727 temp___729 temp___730 temp___731 temp___732 temp___733))) (=> (and (and (and (dynamic_invariant temp___730 true true true true) (dynamic_invariant1 temp___731 true true true true)) (dynamic_invariant temp___732 true true true true)) (dynamic_invariant1 temp___733 true true true true)) (forall ((temp___734 Int)) (ite (= temp___734 temp___732) (= (select temp___728 temp___734) rliteral) (ite (= temp___734 temp___730) (= (to_rep (select temp___728 temp___734)) temp___731) (= (select temp___728 temp___734) (select temp___729 temp___734))))))))))
(declare-const j Int)
(declare-const f Int)
(declare-const o Int)
(declare-const t (Array Int et1))
(declare-const a (Array Int et1))
(declare-const result Int)
(declare-const j1 Int)
(declare-const result1 Int)
(declare-const j2 Int)
(define-fun j3 () int__ref (mk_int__ref j))
(assert (in_range i))
(assert (in_range1 e))
(assert (=> (<= 1 10) (in_range j)))
(assert (=> (<= 0 99) (in_range1 f)))
(assert (= (bool_eq a 1 10 (temp_____aggregate_def_4424 t i e) 1 10) true))
(assert (=> (= i 10) (= (mk_int__ref result) j3)))
(assert (=> (= i 10) (= j1 1)))
(assert (=> (not (= i 10)) (and (= o (+ i 1)) (in_range (+ i 1)))))
(assert (=> (not (= i 10)) (= (mk_int__ref result1) j3)))
(assert (=> (not (= i 10)) (= j2 o)))
(assert (=> (not (= i 10)) (= j1 j2)))
(assert (not (= e 0)))
(assert (not (in_range1 (- e 1))))
(check-sat)
(exit)
