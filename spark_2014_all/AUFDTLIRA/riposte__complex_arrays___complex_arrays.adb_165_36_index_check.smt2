(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 1001))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1001)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_167 Int) (temp___is_init_163 Bool) (temp___skip_constant_164 Bool) (temp___do_toplevel_165 Bool) (temp___do_typ_inv_166 Bool)) Bool (=> (or (= temp___is_init_163 true) (<= 0 1001)) (in_range1 temp___expr_167)))
(declare-sort value 0)
(declare-fun valueqtint (value) Int)
(assert (forall ((i value)) (and (<= (- 23) (valueqtint i)) (<= (valueqtint i) 69))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 23) x) (<= x 69)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (value value) Bool)
(declare-const dummy1 value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun to_rep ((x value)) Int (valueqtint x))
(declare-fun of_rep (Int) value)
(assert (forall ((x value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x value)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tcounterB 0)
(declare-fun tcounterBqtint (tcounterB) Int)
(assert (forall ((i1 tcounterB)) (and (<= (- 32768) (tcounterBqtint i1)) (<= (tcounterBqtint i1) 32767))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tcounterB tcounterB) Bool)
(declare-const dummy2 tcounterB)
(declare-datatypes () ((tcounterB__ref (mk_tcounterB__ref (tcounterB__content tcounterB)))))
(define-fun tcounterB__ref___projection ((a tcounterB__ref)) tcounterB (tcounterB__content a))
(define-fun to_rep1 ((x tcounterB)) Int (tcounterBqtint x))
(declare-fun of_rep1 (Int) tcounterB)
(assert (forall ((x tcounterB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tcounterB)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tcounterB tcounterB) Bool)
(declare-const dummy3 tcounterB)
(declare-datatypes () ((t24b__ref (mk_t24b__ref (t24b__content tcounterB)))))
(define-fun t24b__ref___projection ((a t24b__ref)) tcounterB (t24b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (tcounterB tcounterB) Bool)
(declare-const dummy4 tcounterB)
(declare-datatypes () ((t29b__ref (mk_t29b__ref (t29b__content tcounterB)))))
(define-fun t29b__ref___projection ((a t29b__ref)) tcounterB (t29b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp_____aggregate_def_266 (Int) (Array Int value))
(define-fun dynamic_invariant1 ((temp___expr_174 Int) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool) (temp___do_typ_inv_173 Bool)) Bool (=> (or (= temp___is_init_170 true) (<= (- 23) 69)) (in_range2 temp___expr_174)))
(declare-const rliteral value)
(assert (= (valueqtint rliteral) 0))
(assert (forall ((temp___268 Int)) (=> (dynamic_invariant1 temp___268 true true true true) (forall ((temp___269 Int)) (= (select (temp_____aggregate_def_266 temp___268) temp___269) rliteral)))))
(declare-const rliteral1 value)
(assert (= (valueqtint rliteral1) (- 23)))
(declare-const rliteral2 value)
(assert (= (valueqtint rliteral2) 69))
(declare-const tmp (Array Int value))
(declare-const j Int)
(declare-const j1 Int)
(declare-const temp___275 Int)
(declare-const temp___274 Int)
(declare-const temp___272 (Array Int value))
(declare-const k Int)
(declare-const result (Array Int value))
(declare-const tmp1 (Array Int value))
(declare-const result1 Int)
(declare-const j2 Int)
(declare-const result2 (Array Int value))
(declare-const tmp2 (Array Int value))
(declare-const tmp3 (Array Int value))
(declare-const j3 Int)
(declare-const tmp4 (Array Int value))
(declare-const j4 Int)
(declare-const tmp5 (Array Int value))
(declare-const j5 Int)
(declare-const tmp6 (Array Int value))
(declare-const j6 Int)
(declare-const tmp7 (Array Int value))
(declare-const j7 Int)
(declare-const result3 Int)
(declare-const j8 Int)
(declare-const result4 (Array Int value))
(declare-const tmp8 (Array Int value))
(declare-const tmp9 (Array Int value))
(declare-const j9 Int)
(define-fun tmp10 () map__ref (mk_map__ref tmp6))
(assert (in_range1 i))
(assert (= (mk_map__ref result) (mk_map__ref tmp)))
(assert (= tmp1 (temp_____aggregate_def_266 0)))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j2 0))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= temp___275 i)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= temp___274 j2)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= temp___272 tmp1)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp1 result2)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp2 (store tmp1 j2 rliteral1))))
(assert (=> (and (<= 0 j2) (<= j2 i)) (and (forall ((k1 Int)) (=> (and (<= 0 k1) (<= k1 j3)) (=> (<= k1 j3) (= (to_rep (select tmp3 k1)) (- 23))))) (= i temp___275))))
(assert (=> (and (<= 0 j2) (<= j2 i)) (and (and (forall ((temp___273 Int)) (=> (and (<= 0 temp___273) (<= temp___273 1001)) (=> (or (< i temp___273) (or (< temp___273 0) (< j3 temp___273))) (= (select tmp3 temp___273) (select temp___272 temp___273))))) (=> (<= 0 i) (dynamic_property 0 i j3))) (and (<= 0 j3) (<= j3 i)))))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= j3 i)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= j3 j4)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp3 tmp4)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= j5 j3)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp5 tmp3)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= (mk_int__ref j6) (mk_int__ref j4))))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp10 (mk_map__ref tmp4))))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= j7 j5)))
(assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp7 tmp5)))
(assert (=> (not (and (<= 0 j2) (<= j2 i))) (= j2 j6)))
(assert (=> (not (and (<= 0 j2) (<= j2 i))) (= tmp1 tmp6)))
(assert (=> (not (and (<= 0 j2) (<= j2 i))) (= j7 j2)))
(assert (=> (not (and (<= 0 j2) (<= j2 i))) (= tmp7 tmp1)))
(assert (= (mk_int__ref result3) (mk_int__ref j1)))
(assert (= j8 i))
(assert (<= i j8))
(assert (<= j8 1001))
(assert (= (mk_map__ref result4) tmp10))
(assert (= tmp8 (store tmp6 j8 rliteral2)))
(assert (forall ((k1 Int)) (=> (and (<= 0 k1) (<= k1 j9)) (and (=> (< k1 i) (= (to_rep (select tmp9 k1)) (- 23))) (=> (<= i k1) (= (to_rep (select tmp9 k1)) 69))))))
(assert (and (and (=> (<= i 1001) (dynamic_property1 i 1001 j9)) (forall ((temp___280 Int)) (=> (and (<= 0 temp___280) (<= temp___280 1001)) (=> (or (< 1001 temp___280) (or (< temp___280 i) (< j9 temp___280))) (= (select tmp9 temp___280) (select tmp6 temp___280)))))) (and (<= i j9) (<= j9 1001))))
(assert (<= 0 k))
(assert (<= k j9))
(assert (<= i k))
(assert (not (<= k 1001)))
(check-sat)
(exit)
