(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort group1_id 0)
(declare-fun group1_idqtint (group1_id) Int)
(assert (forall ((i group1_id)) (and (<= 1 (group1_idqtint i)) (<= (group1_idqtint i) 64))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (group1_id group1_id) Bool)
(declare-const dummy group1_id)
(declare-datatypes () ((group1_id__ref (mk_group1_id__ref (group1_id__content group1_id)))))
(define-fun group1_id__ref___projection ((a group1_id__ref)) group1_id (group1_id__content a))
(define-fun to_rep ((x group1_id)) Int (group1_idqtint x))
(declare-fun of_rep (Int) group1_id)
(assert (forall ((x group1_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x group1_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int group1_id))))))
(declare-fun slide ((Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int group1_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int group1_id)) (a__first Int) (a__last Int) (b (Array Int group1_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun is_permutation_1 ((Array Int group1_id)) Bool)
(declare-fun is_permutation_1__function_guard (Bool (Array Int group1_id)) Bool)
(assert (forall ((r1 (Array Int group1_id))) (! (= (= (is_permutation_1 r1) true) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (exists ((rank Int)) (and (and (<= 1 rank) (<= rank 64)) (= (to_rep (select r1 rank)) g1)))))) :pattern ((is_permutation_1 r1)))))
(declare-fun is_preferred_1 (Int Int (Array Int group1_id)) Bool)
(declare-fun is_preferred_1__function_guard (Bool Int Int (Array Int group1_id)) Bool)
(declare-sort ranking 0)
(declare-fun rankingqtint (ranking) Int)
(assert (forall ((i ranking)) (and (<= 1 (rankingqtint i)) (<= (rankingqtint i) 64))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ranking ranking) Bool)
(declare-const dummy1 ranking)
(declare-datatypes () ((ranking__ref (mk_ranking__ref (ranking__content ranking)))))
(define-fun ranking__ref___projection ((a ranking__ref)) ranking (ranking__content a))
(define-fun to_rep1 ((x ranking)) Int (rankingqtint x))
(declare-fun of_rep1 (Int) ranking)
(assert (forall ((x ranking)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x ranking)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int ranking))))))
(declare-fun slide1 ((Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int ranking))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int ranking)) (a__first Int) (a__last Int) (b (Array Int ranking)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (to_rep1 (select a temp___idx_158)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_158))))))) true false))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (to_rep1 (select a temp___idx_158)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_158)))))))))))
(declare-fun invert_1 ((Array Int group1_id)) (Array Int ranking))
(declare-fun invert_1__function_guard ((Array Int ranking) (Array Int group1_id)) Bool)
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 64)) (in_range1 temp___expr_166)))
(assert (forall ((g1_a Int) (g1_b Int)) (forall ((r1 (Array Int group1_id))) (! (=> (and (and (dynamic_invariant g1_a true true true true) (dynamic_invariant g1_b true true true true)) (= (is_permutation_1 r1) true)) (= (= (is_preferred_1 g1_a g1_b r1) true) (<= (to_rep1 (let ((temp___291 (invert_1 r1))) (select temp___291 g1_a))) (to_rep1 (let ((temp___292 (invert_1 r1))) (select temp___292 g1_b)))))) :pattern ((is_preferred_1 g1_a g1_b r1))))))
(declare-sort count 0)
(declare-fun countqtint (count) Int)
(assert (forall ((i count)) (and (<= 0 (countqtint i)) (<= (countqtint i) 64))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (count count) Bool)
(declare-const dummy2 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___projection ((a count__ref)) count (count__content a))
(define-fun to_rep2 ((x count)) Int (countqtint x))
(declare-fun of_rep2 (Int) count)
(assert (forall ((x count)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x count)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-const dummy3 (Array Int group1_id))
(declare-const value__size Int)
(declare-fun object__size ((Array Int group1_id)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int group1_id)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int group1_id)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stable_marriage__matching__group1_set__elements (Array Int group1_id)) (rec__stable_marriage__matching__group1_set__cardinality count)))))
(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int group1_id) (rec__stable_marriage__matching__group1_set__elements a))
(define-fun us_split_fields_Cardinality__projection ((a us_split_fields)) count (rec__stable_marriage__matching__group1_set__cardinality a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 a)) 1 64 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 b)) 1 64) true) (= (to_rep2 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 a))) (to_rep2 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stable_marriage__matching__group1_set__elements__first__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__last__bit Int)
(declare-const stable_marriage__matching__group1_set__elements__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__elements__first__bit))
(assert (< stable_marriage__matching__group1_set__elements__first__bit stable_marriage__matching__group1_set__elements__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__elements__position))
(declare-const stable_marriage__matching__group1_set__cardinality__first__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__last__bit Int)
(declare-const stable_marriage__matching__group1_set__cardinality__position Int)
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__first__bit))
(assert (< stable_marriage__matching__group1_set__cardinality__first__bit stable_marriage__matching__group1_set__cardinality__last__bit))
(assert (<= 0 stable_marriage__matching__group1_set__cardinality__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((group1_set__ref (mk_group1_set__ref (group1_set__content us_rep)))))
(define-fun group1_set__ref___projection ((a group1_set__ref)) us_rep (group1_set__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun all_unmatched_g1_set_elements_distinct (us_split_fields) Bool)
(declare-fun all_unmatched_g1_set_elements_distinct__function_guard (Bool us_split_fields) Bool)
(assert true)
(assert (forall ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields)) (! (= (= (all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields) true) (forall ((idx_1 Int)) (=> (and (<= 1 idx_1) (<= idx_1 (to_rep2 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (forall ((idx_2 Int)) (=> (and (<= 1 idx_2) (<= idx_2 (to_rep2 (rec__stable_marriage__matching__group1_set__cardinality (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields)))))) (=> (not (= idx_1 idx_2)) (not (= (to_rep (let ((temp___403 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___403 idx_1))) (to_rep (let ((temp___404 (rec__stable_marriage__matching__group1_set__elements (us_split_fields1 (mk___rep stable_marriage__matching__unmatched_g1_set__fields))))) (select temp___404 idx_2))))))))))) :pattern ((all_unmatched_g1_set_elements_distinct stable_marriage__matching__unmatched_g1_set__fields)))))
(declare-sort group2_id 0)
(declare-fun group2_idqtint (group2_id) Int)
(assert (forall ((i group2_id)) (and (<= 1 (group2_idqtint i)) (<= (group2_idqtint i) 64))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (group2_id group2_id) Bool)
(declare-const dummy5 group2_id)
(declare-datatypes () ((group2_id__ref (mk_group2_id__ref (group2_id__content group2_id)))))
(define-fun group2_id__ref___projection ((a group2_id__ref)) group2_id (group2_id__content a))
(define-fun to_rep3 ((x group2_id)) Int (group2_idqtint x))
(declare-fun of_rep3 (Int) group2_id)
(assert (forall ((x group2_id)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x group2_id)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int group2_id))))))
(declare-fun slide2 ((Array Int group2_id) Int Int) (Array Int group2_id))
(assert (forall ((a (Array Int group2_id))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int group2_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int group2_id)) (a__first Int) (a__last Int) (b (Array Int group2_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep3 (select a temp___idx_155)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int group2_id)) (b (Array Int group2_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep3 (select a temp___idx_155)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const dummy6 (Array Int group2_id))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int group2_id)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int group2_id)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int group2_id)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int group2_id))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 ((Array Int group2_id) (Array Int group2_id)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int group2_id)))))))
(declare-fun slide3 ((Array Int (Array Int group2_id)) Int Int) (Array Int (Array Int group2_id)))
(assert (forall ((a (Array Int (Array Int group2_id)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int group2_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int (Array Int group2_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group2_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq3 (select a temp___idx_156) 1 64 (select b (+ (- b__first a__first) temp___idx_156)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group2_id))) (b (Array Int (Array Int group2_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq3 (select a temp___idx_156) 1 64 (select b (+ (- b__first a__first) temp___idx_156)) 1 64) true))))))))
(declare-const dummy7 (Array Int group1_id))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int group1_id)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int group1_id)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int group1_id)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq7 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int group1_id)))))))
(declare-fun slide4 ((Array Int (Array Int group1_id)) Int Int) (Array Int (Array Int group1_id)))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array Int (Array Int group1_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group1_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq (select a temp___idx_157) 1 64 (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group1_id))) (b (Array Int (Array Int group1_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq (select a temp___idx_157) 1 64 (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true))))))))
(declare-const ranking_1 (Array Int (Array Int group2_id)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ranking_2 (Array Int (Array Int group1_id)))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-datatypes () ((map__ref5 (mk_map__ref5 (map__content5 (Array Int Bool))))))
(declare-fun slide5 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide5 a first first) a) :pattern ((slide5 a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide5 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159))))))))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 64))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (index index) Bool)
(declare-const dummy8 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref6 (mk_map__ref6 (map__content6 (Array Int count))))))
(declare-fun slide6 ((Array Int count) Int Int) (Array Int count))
(assert (forall ((a (Array Int count))) (forall ((first Int)) (! (= (slide6 a first first) a) :pattern ((slide6 a first first))))))
(assert (forall ((a (Array Int count))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide6 a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int count)) (a__first Int) (a__last Int) (b (Array Int count)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (to_rep2 (select a temp___idx_161)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_161))))))) true false))
(assert (forall ((a (Array Int count)) (b (Array Int count))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (to_rep2 (select a temp___idx_161)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_161)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant1 ((temp___expr_343 Int) (temp___is_init_339 Bool) (temp___skip_constant_340 Bool) (temp___do_toplevel_341 Bool) (temp___do_typ_inv_342 Bool)) Bool (=> (or (= temp___is_init_339 true) (<= 0 64)) (in_range3 temp___expr_343)))
(define-fun dynamic_invariant2 ((temp___expr_350 Int) (temp___is_init_346 Bool) (temp___skip_constant_347 Bool) (temp___do_toplevel_348 Bool) (temp___do_typ_inv_349 Bool)) Bool (=> (or (= temp___is_init_346 true) (<= 1 64)) (in_range5 temp___expr_350)))
(define-fun dynamic_invariant3 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 1 64)) (in_range4 temp___expr_173)))
(define-fun dynamic_invariant4 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 64)) (in_range2 temp___expr_180)))
(assert (forall ((r1 (Array Int group1_id))) (! (=> (= (is_permutation_1 r1) true) (let ((result (invert_1 r1))) (and (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank 64)) (= (to_rep1 (select result (to_rep (select r1 rank)))) rank))) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (= (to_rep (select r1 (to_rep1 (select result g1)))) g1)))))) :pattern ((invert_1 r1)))))
(declare-const unmatched_g1_set__split_fields count)
(declare-const g1_id Int)
(declare-const idx Int)
(declare-const result Bool)
(assert (= (= result true) (forall ((g2 Int)) (=> (and (<= 1 g2) (<= g2 64)) (= (is_permutation_1 (select ranking_2 g2)) true)))))
(assert (= result true))
(assert (<= 1 g1_id))
(assert (<= g1_id 64))
(assert (<= 1 idx))
(assert (<= idx (to_rep2 unmatched_g1_set__split_fields)))
(assert (not (<= idx 64)))
(check-sat)
(exit)
