(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

predicate in_range1(x: int) = ((0 <= x) and (x <= 1001))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type value

predicate in_range2(x: int) = (((- 23) <= x) and (x <= 69))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : value, value -> bool

logic dummy1 : value

type value__ref = { value__content : value
}

function value__ref___projection(a: value__ref) : value = (a).value__content

logic to_rep : value -> int

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,value) farray, int, int, (int,value) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,value) farray. forall a__first:int. forall a__last:int.
  forall b:(int,value) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type tcounterB

predicate in_range3(x: int) = (((- 32768) <= x) and (x <= 32767))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tcounterB, tcounterB -> bool

logic dummy2 : tcounterB

type tcounterB__ref = { tcounterB__content : tcounterB
}

function tcounterB__ref___projection(a: tcounterB__ref) : tcounterB =
  (a).tcounterB__content

logic to_rep1 : tcounterB -> int

logic of_rep1 : int -> tcounterB

axiom inversion_axiom1 :
  (forall x:tcounterB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:tcounterB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tcounterB, tcounterB -> bool

logic dummy3 : tcounterB

type t24b__ref = { t24b__content : tcounterB
}

function t24b__ref___projection(a: t24b__ref) : tcounterB = (a).t24b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tcounterB, tcounterB -> bool

logic dummy4 : tcounterB

type t29b__ref = { t29b__content : tcounterB
}

function t29b__ref___projection(a: t29b__ref) : tcounterB = (a).t29b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___266 : int -> (int,value) farray

axiom def_axiom :
  (forall temp___268:int. (in_range2(temp___268) ->
  (forall temp___269:int.
  (to_rep((temp___266(temp___268)[temp___269])) = temp___268))))

 (* File "complex_arrays.adb", line 9, characters 0-0 *)
goal WP_parameter_def :
  (forall tmp:(int,value) farray. forall j:int. forall j1:int.
  forall temp___273:int. forall temp___272:int.
  forall temp___270:(int,value) farray. forall o:value.
  forall o1:(int,value) farray. forall o2:value.
  forall o3:(int,value) farray. forall result:(int,value) farray.
  forall tmp1:(int,value) farray. forall result1:int. forall j2:int.
  forall result2:(int,value) farray. forall tmp2:(int,value) farray.
  forall tmp3:(int,value) farray. forall j3:int.
  forall tmp4:(int,value) farray. forall j4:int.
  forall tmp5:(int,value) farray. forall j5:int.
  forall tmp6:(int,value) farray. forall j6:int.
  forall tmp7:(int,value) farray. forall j7:int. forall result3:int.
  forall j8:int. forall result4:(int,value) farray.
  forall tmp8:(int,value) farray. forall tmp9:(int,value) farray.
  forall j9:int. (in_range1(i) -> ((({ map__content = result } = {
  map__content = tmp }) and (tmp1 = temp___266(0))) -> (((({ int__content =
  result1 } = { int__content = j }) and (j2 = 0)) and ((((0 <= j2) and
  (j2 <= i)) and ((((temp___273 = i) and ((temp___272 = j2) and
  ((temp___270 = tmp1) and ((((to_rep(o) = (- 23)) and
  (o1 = (tmp1[j2 <- o]))) and ((tmp1 = result2) and (tmp2 = o1))) and
  (((forall k:int. (((0 <= k) and (k <= j3)) -> ((k <= j3) ->
    (to_rep((tmp3[k])) = (- 23))))) and
  (i = temp___273)) and
  ((((forall temp___271:int. (((0 <= temp___271) and (temp___271 <= 1001)) ->
     ((j3 <  temp___271) ->
     ((tmp3[temp___271]) = (temp___270[temp___271]))))) and
  ((0 <= i) -> dynamic_property(0, i, j3))) and ((0 <= j3) and
  (j3 <= i))) and (j3 = i))))))) and (((j3 = j4) and (tmp3 = tmp4)) and
  ((j5 = j3) and (tmp5 = tmp3)))) and ((({ int__content = j6 } = {
  int__content = j4 }) and ({ map__content = tmp6 } = { map__content = tmp4
  })) and ((j7 = j5) and (tmp7 = tmp5))))) or ((not ((0 <= j2) and
  (j2 <= i))) and (((j2 = j6) and (tmp1 = tmp6)) and ((j7 = j2) and
  (tmp7 = tmp1)))))) -> ((({ int__content = result3 } = { int__content = j1
  }) and (j8 = i)) -> (((i <= j8) and (j8 <= 1001)) ->
  ((((to_rep(o2) = 69) and (o3 = (tmp6[j8 <- o2]))) and (({ map__content =
  result4 } = { map__content = tmp6 }) and (tmp8 = o3))) ->
  ((forall k:int. (((0 <= k) and (k <= j9)) -> (((k <  i) ->
   (to_rep((tmp9[k])) = (- 23))) and ((i <= k) ->
   (to_rep((tmp9[k])) = 69))))) ->
  (((((i <= 1001) -> dynamic_property1(i, 1001, j9)) and
  (forall temp___278:int. (((0 <= temp___278) and (temp___278 <= 1001)) ->
  ((j9 <  temp___278) -> ((tmp9[temp___278]) = (tmp6[temp___278])))))) and
  ((i <= j9) and (j9 <= 1001))) -> ((0 <= j9) -> (0 <= 0)))))))))))
