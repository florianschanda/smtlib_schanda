(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type nat_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : nat_type, nat_type -> bool

logic dummy6 : nat_type

type nat_type__ref = { nat_type__content : nat_type
}

function nat_type__ref___projection(a: nat_type__ref) : nat_type =
  (a).nat_type__content

logic to_rep2 : nat_type -> int

logic of_rep2 : int -> nat_type

axiom inversion_axiom2 :
  (forall x:nat_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:nat_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t1s

predicate in_range5(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : t1s, t1s -> bool

logic dummy7 : t1s

type t1s__ref = { t1s__content : t1s
}

function t1s__ref___projection(a: t1s__ref) : t1s = (a).t1s__content

logic dummy8 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__pump__pump_record__name :
(int,character) farray; rec__pump__pump_record__resevoir : nat_type;
rec__pump__pump_record__price : nat_type; rec__pump__pump_record__remaining :
nat_type
}

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__pump__pump_record__name

function us_split_fields_Resevoir__projection(a: us_split_fields) : nat_type =
  (a).rec__pump__pump_record__resevoir

function us_split_fields_Price__projection(a: us_split_fields) : nat_type =
  (a).rec__pump__pump_record__price

function us_split_fields_Remaining__projection(a: us_split_fields) : nat_type =
  (a).rec__pump__pump_record__remaining

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((((bool_eq4(((a).us_split_fields1).rec__pump__pump_record__name, 1, 10,
  ((b).us_split_fields1).rec__pump__pump_record__name, 1, 10) = true) and
  (to_rep2(((a).us_split_fields1).rec__pump__pump_record__resevoir) = to_rep2(((b).us_split_fields1).rec__pump__pump_record__resevoir))) and
  (to_rep2(((a).us_split_fields1).rec__pump__pump_record__price) = to_rep2(((b).us_split_fields1).rec__pump__pump_record__price))) and
  (to_rep2(((a).us_split_fields1).rec__pump__pump_record__remaining) = to_rep2(((b).us_split_fields1).rec__pump__pump_record__remaining))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((((bool_eq4(((a).us_split_fields1).rec__pump__pump_record__name, 1,
  10, ((b).us_split_fields1).rec__pump__pump_record__name, 1, 10) = true) and
  (to_rep2(((a).us_split_fields1).rec__pump__pump_record__resevoir) = to_rep2(((b).us_split_fields1).rec__pump__pump_record__resevoir))) and
  (to_rep2(((a).us_split_fields1).rec__pump__pump_record__price) = to_rep2(((b).us_split_fields1).rec__pump__pump_record__price))) and
  (to_rep2(((a).us_split_fields1).rec__pump__pump_record__remaining) = to_rep2(((b).us_split_fields1).rec__pump__pump_record__remaining)))) ->
  (bool_eq9(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. forall a1:nat_type. forall a2:nat_type.
  forall a3:nat_type. (0 <= object__size2({ us_split_fields1 = {
  rec__pump__pump_record__name = a; rec__pump__pump_record__resevoir = a1;
  rec__pump__pump_record__price = a2; rec__pump__pump_record__remaining = a3
  } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. forall a1:nat_type. forall a2:nat_type.
  forall a3:nat_type. (0 <= object__alignment2({ us_split_fields1 = {
  rec__pump__pump_record__name = a; rec__pump__pump_record__resevoir = a1;
  rec__pump__pump_record__price = a2; rec__pump__pump_record__remaining = a3
  } })))

logic pump__pump_record__name__first__bit : int

logic pump__pump_record__name__last__bit : int

logic pump__pump_record__name__position : int

axiom pump__pump_record__name__first__bit_axiom :
  (0 <= pump__pump_record__name__first__bit)

axiom pump__pump_record__name__last__bit_axiom :
  (pump__pump_record__name__first__bit <  pump__pump_record__name__last__bit)

axiom pump__pump_record__name__position_axiom :
  (0 <= pump__pump_record__name__position)

logic pump__pump_record__resevoir__first__bit : int

logic pump__pump_record__resevoir__last__bit : int

logic pump__pump_record__resevoir__position : int

axiom pump__pump_record__resevoir__first__bit_axiom :
  (0 <= pump__pump_record__resevoir__first__bit)

axiom pump__pump_record__resevoir__last__bit_axiom :
  (pump__pump_record__resevoir__first__bit <  pump__pump_record__resevoir__last__bit)

axiom pump__pump_record__resevoir__position_axiom :
  (0 <= pump__pump_record__resevoir__position)

logic pump__pump_record__price__first__bit : int

logic pump__pump_record__price__last__bit : int

logic pump__pump_record__price__position : int

axiom pump__pump_record__price__first__bit_axiom :
  (0 <= pump__pump_record__price__first__bit)

axiom pump__pump_record__price__last__bit_axiom :
  (pump__pump_record__price__first__bit <  pump__pump_record__price__last__bit)

axiom pump__pump_record__price__position_axiom :
  (0 <= pump__pump_record__price__position)

logic pump__pump_record__remaining__first__bit : int

logic pump__pump_record__remaining__last__bit : int

logic pump__pump_record__remaining__position : int

axiom pump__pump_record__remaining__first__bit_axiom :
  (0 <= pump__pump_record__remaining__first__bit)

axiom pump__pump_record__remaining__last__bit_axiom :
  (pump__pump_record__remaining__first__bit <  pump__pump_record__remaining__last__bit)

axiom pump__pump_record__remaining__position_axiom :
  (0 <= pump__pump_record__remaining__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : (int,character) farray

logic dummy10 : nat_type

logic dummy11 : nat_type

logic dummy12 : nat_type

type pump_record__ref = { pump_record__content : us_rep
}

function pump_record__ref___projection(a: pump_record__ref) : us_rep =
  (a).pump_record__content

logic attr__ATTRIBUTE_ADDRESS : int

logic get_outstanding : int -> int

logic get_outstanding__function_guard : int, int -> prop

axiom get_outstanding__post_axiom :
  (forall pumpunit__outstanding:int [get_outstanding(pumpunit__outstanding)].
  (in_range3(pumpunit__outstanding) ->
  in_range3(get_outstanding(pumpunit__outstanding))))

axiom get_outstanding__def_axiom :
  (forall pumpunit__outstanding:int [get_outstanding(pumpunit__outstanding)].
  (in_range3(pumpunit__outstanding) ->
  (get_outstanding(pumpunit__outstanding) = pumpunit__outstanding)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic get_cur_price : us_split_fields -> int

logic get_cur_price__function_guard : int, us_split_fields -> prop

axiom get_cur_price__post_axiom :
  (forall pumpunit__cur_pump__fields:(int,character) farray.
  forall pumpunit__cur_pump__fields1:nat_type.
  forall pumpunit__cur_pump__fields2:nat_type.
  forall pumpunit__cur_pump__fields3:nat_type [get_cur_price({
  rec__pump__pump_record__name = pumpunit__cur_pump__fields;
  rec__pump__pump_record__resevoir = pumpunit__cur_pump__fields1;
  rec__pump__pump_record__price = pumpunit__cur_pump__fields2;
  rec__pump__pump_record__remaining = pumpunit__cur_pump__fields3 })].
  in_range4(get_cur_price({ rec__pump__pump_record__name =
  pumpunit__cur_pump__fields; rec__pump__pump_record__resevoir =
  pumpunit__cur_pump__fields1; rec__pump__pump_record__price =
  pumpunit__cur_pump__fields2; rec__pump__pump_record__remaining =
  pumpunit__cur_pump__fields3 })))

axiom get_cur_price__def_axiom :
  (forall pumpunit__cur_pump__fields:(int,character) farray.
  forall pumpunit__cur_pump__fields1:nat_type.
  forall pumpunit__cur_pump__fields2:nat_type.
  forall pumpunit__cur_pump__fields3:nat_type [get_cur_price({
  rec__pump__pump_record__name = pumpunit__cur_pump__fields;
  rec__pump__pump_record__resevoir = pumpunit__cur_pump__fields1;
  rec__pump__pump_record__price = pumpunit__cur_pump__fields2;
  rec__pump__pump_record__remaining = pumpunit__cur_pump__fields3 })].
  (get_cur_price({ rec__pump__pump_record__name = pumpunit__cur_pump__fields;
  rec__pump__pump_record__resevoir = pumpunit__cur_pump__fields1;
  rec__pump__pump_record__price = pumpunit__cur_pump__fields2;
  rec__pump__pump_record__remaining = pumpunit__cur_pump__fields3
  }) = to_rep2(pumpunit__cur_pump__fields2)))

logic get_cur_resevoir : us_split_fields -> int

logic get_cur_resevoir__function_guard : int, us_split_fields -> prop

axiom get_cur_resevoir__post_axiom :
  (forall pumpunit__cur_pump__fields:(int,character) farray.
  forall pumpunit__cur_pump__fields1:nat_type.
  forall pumpunit__cur_pump__fields2:nat_type.
  forall pumpunit__cur_pump__fields3:nat_type [get_cur_resevoir({
  rec__pump__pump_record__name = pumpunit__cur_pump__fields;
  rec__pump__pump_record__resevoir = pumpunit__cur_pump__fields1;
  rec__pump__pump_record__price = pumpunit__cur_pump__fields2;
  rec__pump__pump_record__remaining = pumpunit__cur_pump__fields3 })].
  in_range4(get_cur_resevoir({ rec__pump__pump_record__name =
  pumpunit__cur_pump__fields; rec__pump__pump_record__resevoir =
  pumpunit__cur_pump__fields1; rec__pump__pump_record__price =
  pumpunit__cur_pump__fields2; rec__pump__pump_record__remaining =
  pumpunit__cur_pump__fields3 })))

axiom get_cur_resevoir__def_axiom :
  (forall pumpunit__cur_pump__fields:(int,character) farray.
  forall pumpunit__cur_pump__fields1:nat_type.
  forall pumpunit__cur_pump__fields2:nat_type.
  forall pumpunit__cur_pump__fields3:nat_type [get_cur_resevoir({
  rec__pump__pump_record__name = pumpunit__cur_pump__fields;
  rec__pump__pump_record__resevoir = pumpunit__cur_pump__fields1;
  rec__pump__pump_record__price = pumpunit__cur_pump__fields2;
  rec__pump__pump_record__remaining = pumpunit__cur_pump__fields3 })].
  (get_cur_resevoir({ rec__pump__pump_record__name =
  pumpunit__cur_pump__fields; rec__pump__pump_record__resevoir =
  pumpunit__cur_pump__fields1; rec__pump__pump_record__price =
  pumpunit__cur_pump__fields2; rec__pump__pump_record__remaining =
  pumpunit__cur_pump__fields3 }) = to_rep2(pumpunit__cur_pump__fields1)))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic is_ready : int -> bool

logic is_ready__function_guard : bool, int -> prop

type internal_state

predicate in_range6(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : internal_state, internal_state -> bool

logic dummy13 : internal_state

type internal_state__ref = { internal_state__content : internal_state
}

function internal_state__ref___projection(a: internal_state__ref) : internal_state =
  (a).internal_state__content

axiom is_ready__post_axiom : true

axiom is_ready__def_axiom :
  (forall pumpunit__cur_state:int [is_ready(pumpunit__cur_state)].
  ((is_ready(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 1)))

logic is_pumping : int -> bool

logic is_pumping__function_guard : bool, int -> prop

axiom is_pumping__post_axiom : true

axiom is_pumping__def_axiom :
  (forall pumpunit__cur_state:int [is_pumping(pumpunit__cur_state)].
  ((is_pumping(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 0)))

 (* File "pumpunit.adb", line 71, characters 0-0 *)
goal WP_parameter_def :
  (forall cur_state:int.
  forall cur_pump__split_fields:(int,character) farray.
  forall cur_pump__split_fields1:nat_type.
  forall cur_pump__split_fields2:nat_type.
  forall cur_pump__split_fields3:nat_type. forall outstanding:int.
  forall o:int. forall o1:int. forall o2:nat_type.
  forall o3:(int,character) farray. forall o4:nat_type. forall o5:nat_type.
  forall o6:nat_type. forall temp___643:(int,character) farray.
  forall temp___6431:nat_type. forall temp___6432:nat_type.
  forall temp___6433:nat_type. forall cur_state1:int.
  forall cur_pump__split_fields4:(int,character) farray.
  forall cur_pump__split_fields5:nat_type.
  forall cur_pump__split_fields6:nat_type.
  forall cur_pump__split_fields7:nat_type. forall outstanding1:int.
  forall result:bool. forall result1:int. forall cur_state2:int.
  forall result2:int. forall outstanding2:int.
  forall result3:(int,character) farray. forall result4:nat_type.
  forall result5:nat_type. forall result6:nat_type.
  forall cur_pump__split_fields8:(int,character) farray.
  forall cur_pump__split_fields9:nat_type.
  forall cur_pump__split_fields10:nat_type.
  forall cur_pump__split_fields11:nat_type. forall cur_state3:int.
  forall cur_pump__split_fields12:(int,character) farray.
  forall cur_pump__split_fields13:nat_type.
  forall cur_pump__split_fields14:nat_type.
  forall cur_pump__split_fields15:nat_type. forall outstanding3:int.
  forall cur_state4:int.
  forall cur_pump__split_fields16:(int,character) farray.
  forall cur_pump__split_fields17:nat_type.
  forall cur_pump__split_fields18:nat_type.
  forall cur_pump__split_fields19:nat_type. forall outstanding4:int.
  ((in_range6(cur_state) and (in_range3(outstanding) and
  (((is_ready(cur_state) = true) and
  ((get_outstanding(outstanding) <  (2147483647 - get_cur_price({
  rec__pump__pump_record__name = cur_pump__split_fields;
  rec__pump__pump_record__resevoir = cur_pump__split_fields1;
  rec__pump__pump_record__price = cur_pump__split_fields2;
  rec__pump__pump_record__remaining = cur_pump__split_fields3 }))) and
  (0 <  get_cur_resevoir({ rec__pump__pump_record__name =
  cur_pump__split_fields; rec__pump__pump_record__resevoir =
  cur_pump__split_fields1; rec__pump__pump_record__price =
  cur_pump__split_fields2; rec__pump__pump_record__remaining =
  cur_pump__split_fields3 })))) and ((((result = is_ready(cur_state)) and
  ((result = true) <-> (cur_state = 1))) and (((result = true) and ((({
  int__content = result1 } = { int__content = cur_state }) and
  (cur_state2 = 0)) and
  ((((o = (outstanding + to_rep2(cur_pump__split_fields2))) and
  in_range((outstanding + to_rep2(cur_pump__split_fields2)))) and (({
  int__content = result2 } = { int__content = outstanding }) and
  (outstanding2 = o))) and
  ((((((o1 = (to_rep2(cur_pump__split_fields1) - 1)) and
  in_range4((to_rep2(cur_pump__split_fields1) - 1))) and
  (to_rep2(o2) = o1)) and ((cur_pump__split_fields = o3) and ((o2 = o4) and
  ((cur_pump__split_fields2 = o5) and (cur_pump__split_fields3 = o6))))) and
  ((temp___643 = o3) and ((temp___6431 = o4) and ((temp___6432 = o5) and
  (temp___6433 = o6))))) and (({ us_split_fields__content = {
  rec__pump__pump_record__name = result3; rec__pump__pump_record__resevoir =
  result4; rec__pump__pump_record__price = result5;
  rec__pump__pump_record__remaining = result6 } } = {
  us_split_fields__content = { rec__pump__pump_record__name =
  cur_pump__split_fields; rec__pump__pump_record__resevoir =
  cur_pump__split_fields1; rec__pump__pump_record__price =
  cur_pump__split_fields2; rec__pump__pump_record__remaining =
  cur_pump__split_fields3 } }) and
  ((temp___643 = cur_pump__split_fields8) and
  ((temp___6431 = cur_pump__split_fields9) and
  ((temp___6432 = cur_pump__split_fields10) and
  (temp___6433 = cur_pump__split_fields11))))))))) or
  ((not (result = true)) and (((outstanding2 = outstanding) and
  (((cur_pump__split_fields = cur_pump__split_fields8) and
  ((cur_pump__split_fields1 = cur_pump__split_fields9) and
  ((cur_pump__split_fields2 = cur_pump__split_fields10) and
  (cur_pump__split_fields3 = cur_pump__split_fields11)))) and
  (cur_state2 = cur_state))) and ((outstanding2 = outstanding1) and (({
  rec__pump__pump_record__name = cur_pump__split_fields8;
  rec__pump__pump_record__resevoir = cur_pump__split_fields9;
  rec__pump__pump_record__price = cur_pump__split_fields10;
  rec__pump__pump_record__remaining = cur_pump__split_fields11 } = {
  rec__pump__pump_record__name = cur_pump__split_fields4;
  rec__pump__pump_record__resevoir = cur_pump__split_fields5;
  rec__pump__pump_record__price = cur_pump__split_fields6;
  rec__pump__pump_record__remaining = cur_pump__split_fields7 }) and
  (cur_state2 = cur_state1))))))) and (((outstanding2 = outstanding3) and
  (((cur_pump__split_fields12 = cur_pump__split_fields8) and
  ((cur_pump__split_fields13 = cur_pump__split_fields9) and
  ((cur_pump__split_fields14 = cur_pump__split_fields10) and
  (cur_pump__split_fields15 = cur_pump__split_fields11)))) and
  (cur_state2 = cur_state3))) and ((outstanding4 = outstanding2) and (({
  rec__pump__pump_record__name = cur_pump__split_fields16;
  rec__pump__pump_record__resevoir = cur_pump__split_fields17;
  rec__pump__pump_record__price = cur_pump__split_fields18;
  rec__pump__pump_record__remaining = cur_pump__split_fields19 } = {
  rec__pump__pump_record__name = cur_pump__split_fields8;
  rec__pump__pump_record__resevoir = cur_pump__split_fields9;
  rec__pump__pump_record__price = cur_pump__split_fields10;
  rec__pump__pump_record__remaining = cur_pump__split_fields11 }) and
  (cur_state4 = cur_state2)))))))) -> (is_pumping(cur_state3) = true)))
