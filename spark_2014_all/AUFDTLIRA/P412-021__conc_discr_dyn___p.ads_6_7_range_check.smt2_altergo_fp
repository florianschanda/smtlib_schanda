(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t3s__ref = { t3s__content : integer
}

function t3s__ref___projection(a: t3s__ref) : integer = (a).t3s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,natural) farray

logic dummy5 : t

type t4s__ref = { t4s__content : us_t
}

function t4s__ref___projection(a: t4s__ref) : us_t = (a).t4s__content

type us_split_discrs = { rec__p__my_rec__c : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__p__my_rec__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_rec__content : us_t
}

function us_split_fields_Content__projection(a: us_split_fields) : us_t =
  (a).rec__p__my_rec__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__p__my_rec__c) = to_rep(((b).us_split_discrs1).rec__p__my_rec__c)) and
  (bool_eq7(((a).us_split_fields1).rec__p__my_rec__content,
  ((b).us_split_fields1).rec__p__my_rec__content) = true)) -> (bool_eq8(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__p__my_rec__c) = to_rep(((b).us_split_discrs1).rec__p__my_rec__c)) and
  (bool_eq7(((a).us_split_fields1).rec__p__my_rec__content,
  ((b).us_split_fields1).rec__p__my_rec__content) = true))) -> (bool_eq8(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t.
  (0 <= object__size1({ us_split_discrs1 = { rec__p__my_rec__c = a };
  us_split_fields1 = { rec__p__my_rec__content = { elts = a1; rt = a2 } }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__p__my_rec__c = a };
  us_split_fields1 = { rec__p__my_rec__content = { elts = a1; rt = a2 } }
  })))

logic p__my_rec__c__first__bit : int

logic p__my_rec__c__last__bit : int

logic p__my_rec__c__position : int

axiom p__my_rec__c__first__bit_axiom : (0 <= p__my_rec__c__first__bit)

axiom p__my_rec__c__last__bit_axiom :
  (p__my_rec__c__first__bit <  p__my_rec__c__last__bit)

axiom p__my_rec__c__position_axiom : (0 <= p__my_rec__c__position)

logic p__my_rec__content__first__bit : int

logic p__my_rec__content__last__bit : int

logic p__my_rec__content__position : int

axiom p__my_rec__content__first__bit_axiom :
  (0 <= p__my_rec__content__first__bit)

axiom p__my_rec__content__last__bit_axiom :
  (p__my_rec__content__first__bit <  p__my_rec__content__last__bit)

axiom p__my_rec__content__position_axiom :
  (0 <= p__my_rec__content__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : natural

logic dummy7 : (int,natural) farray

logic dummy8 : t

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy9 : integer

type tT6sP1__ref = { tT6sP1__content : integer
}

function tT6sP1__ref___projection(a: tT6sP1__ref) : integer =
  (a).tT6sP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,natural) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy10 : (int,natural) farray

logic dummy11 : t1

type t6s__ref = { t6s__content : us_t1
}

function t6s__ref___projection(a: t6s__ref) : us_t1 = (a).t6s__content

type us_split_fields2 = { rec__p__my_rec__content1 : us_t1
}

function us_split_fields_Content__2__projection(a: us_split_fields2) : us_t1 =
  (a).rec__p__my_rec__content1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__p__my_rec__content =
  of_array(to_array1(((a).us_split_fields3).rec__p__my_rec__content1),
  first3(((a).us_split_fields3).rec__p__my_rec__content1),
  last3(((a).us_split_fields3).rec__p__my_rec__content1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__p__my_rec__content1 =
  of_array1(to_array(((r).us_split_fields1).rec__p__my_rec__content),
  first1(((r).us_split_fields1).rec__p__my_rec__content),
  last1(((r).us_split_fields1).rec__p__my_rec__content)) } }

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((to_rep(((a).us_split_discrs2).rec__p__my_rec__c) = to_rep(((b).us_split_discrs2).rec__p__my_rec__c)) and
  (bool_eq10(((a).us_split_fields3).rec__p__my_rec__content1,
  ((b).us_split_fields3).rec__p__my_rec__content1) = true)) -> (bool_eq11(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_discrs2).rec__p__my_rec__c) = to_rep(((b).us_split_discrs2).rec__p__my_rec__c)) and
  (bool_eq10(((a).us_split_fields3).rec__p__my_rec__content1,
  ((b).us_split_fields3).rec__p__my_rec__content1) = true))) -> (bool_eq11(a,
  b) = false))))

predicate in_range4(rec__p__my_rec__c1: int, a: us_rep) =
  (rec__p__my_rec__c1 = to_rep(((a).us_split_discrs1).rec__p__my_rec__c))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t1.
  (0 <= object__size3({ us_split_discrs2 = { rec__p__my_rec__c = a };
  us_split_fields3 = { rec__p__my_rec__content1 = { elts1 = a1; rt1 = a2 } }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t1.
  (0 <= object__alignment3({ us_split_discrs2 = { rec__p__my_rec__c = a };
  us_split_fields3 = { rec__p__my_rec__content1 = { elts1 = a1; rt1 = a2 } }
  })))

logic p__my_rec__c__first__bit1 : int

logic p__my_rec__c__last__bit1 : int

logic p__my_rec__c__position1 : int

axiom p__my_rec__c__first__bit_axiom1 : (0 <= p__my_rec__c__first__bit1)

axiom p__my_rec__c__last__bit_axiom1 :
  (p__my_rec__c__first__bit1 <  p__my_rec__c__last__bit1)

axiom p__my_rec__c__position_axiom1 : (0 <= p__my_rec__c__position1)

logic p__my_rec__content__first__bit1 : int

logic p__my_rec__content__last__bit1 : int

logic p__my_rec__content__position1 : int

axiom p__my_rec__content__first__bit_axiom1 :
  (0 <= p__my_rec__content__first__bit1)

axiom p__my_rec__content__last__bit_axiom1 :
  (p__my_rec__content__first__bit1 <  p__my_rec__content__last__bit1)

axiom p__my_rec__content__position_axiom1 :
  (0 <= p__my_rec__content__position1)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy12 : natural

logic dummy13 : (int,natural) farray

logic dummy14 : t1

type t5s__ref = { t5s__content : us_rep1
}

function t5s__ref___projection(a: t5s__ref) : us_rep1 = (a).t5s__content

type us_split_discrs3 = { rec__p__pp__b : bool; rec__p__pp__c : natural
}

function us_split_discrs___2__projection(a: us_split_discrs3) : bool =
  (a).rec__p__pp__b

function us_split_discrs___3__projection(a: us_split_discrs3) : natural =
  (a).rec__p__pp__c

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs3
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs3 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__p__pp__dummy : bool; rec__p__pp__r : us_rep1
}

function us_split_fields_Dummy__projection(a: us_split_fields4) : bool =
  (a).rec__p__pp__dummy

function us_split_fields_R__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__p__pp__r

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs3; us_split_fields5 :
us_split_fields4
}

function us_rep___7__projection(a: us_rep2) : us_split_discrs3 =
  (a).us_split_discrs4

function us_rep___8__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:bool. forall a1:natural. forall a2:bool. forall a3:natural.
  forall a4:(int,natural) farray. forall a5:t1. (0 <= object__size4({
  us_split_discrs4 = { rec__p__pp__b = a; rec__p__pp__c = a1 };
  us_split_fields5 = { rec__p__pp__dummy = a2; rec__p__pp__r = {
  us_split_discrs2 = { rec__p__my_rec__c = a3 }; us_split_fields3 = {
  rec__p__my_rec__content1 = { elts1 = a4; rt1 = a5 } } } } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:bool. forall a1:natural. forall a2:bool. forall a3:natural.
  forall a4:(int,natural) farray. forall a5:t1. (0 <= object__alignment4({
  us_split_discrs4 = { rec__p__pp__b = a; rec__p__pp__c = a1 };
  us_split_fields5 = { rec__p__pp__dummy = a2; rec__p__pp__r = {
  us_split_discrs2 = { rec__p__my_rec__c = a3 }; us_split_fields3 = {
  rec__p__my_rec__content1 = { elts1 = a4; rt1 = a5 } } } } })))

logic p__pp__b__first__bit : int

logic p__pp__b__last__bit : int

logic p__pp__b__position : int

axiom p__pp__b__first__bit_axiom : (0 <= p__pp__b__first__bit)

axiom p__pp__b__last__bit_axiom :
  (p__pp__b__first__bit <  p__pp__b__last__bit)

axiom p__pp__b__position_axiom : (0 <= p__pp__b__position)

logic p__pp__c__first__bit : int

logic p__pp__c__last__bit : int

logic p__pp__c__position : int

axiom p__pp__c__first__bit_axiom : (0 <= p__pp__c__first__bit)

axiom p__pp__c__last__bit_axiom :
  (p__pp__c__first__bit <  p__pp__c__last__bit)

axiom p__pp__c__position_axiom : (0 <= p__pp__c__position)

logic p__pp__dummy__first__bit : int

logic p__pp__dummy__last__bit : int

logic p__pp__dummy__position : int

axiom p__pp__dummy__first__bit_axiom : (0 <= p__pp__dummy__first__bit)

axiom p__pp__dummy__last__bit_axiom :
  (p__pp__dummy__first__bit <  p__pp__dummy__last__bit)

axiom p__pp__dummy__position_axiom : (0 <= p__pp__dummy__position)

logic p__pp__r__first__bit : int

logic p__pp__r__last__bit : int

logic p__pp__r__position : int

axiom p__pp__r__first__bit_axiom : (0 <= p__pp__r__first__bit)

axiom p__pp__r__last__bit_axiom :
  (p__pp__r__first__bit <  p__pp__r__last__bit)

axiom p__pp__r__position_axiom : (0 <= p__pp__r__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

type pp__ref = { pp__content : us_rep2
}

function pp__ref___projection(a: pp__ref) : us_rep2 = (a).pp__content

logic prot : us_rep2 -> bool

logic prot__function_guard : bool, us_rep2 -> prop

axiom prot__post_axiom : true

axiom prot__def_axiom :
  (forall self__:bool. forall self__1:natural. forall self__2:bool.
  forall self__3:natural. forall self__4:(int,natural) farray.
  forall self__5:t1 [prot({ us_split_discrs4 = { rec__p__pp__b = self__;
  rec__p__pp__c = self__1 }; us_split_fields5 = { rec__p__pp__dummy =
  self__2; rec__p__pp__r = { us_split_discrs2 = { rec__p__my_rec__c = self__3
  }; us_split_fields3 = { rec__p__my_rec__content1 = { elts1 = self__4; rt1 =
  self__5 } } } } })]. ((prot({ us_split_discrs4 = { rec__p__pp__b = self__;
  rec__p__pp__c = self__1 }; us_split_fields5 = { rec__p__pp__dummy =
  self__2; rec__p__pp__r = { us_split_discrs2 = { rec__p__my_rec__c = self__3
  }; us_split_fields3 = { rec__p__my_rec__content1 = { elts1 = self__4; rt1 =
  self__5 } } } } }) = true) <-> ((self__ = true) and (self__2 = true))))

type us_split_fields6 = { rec__p__pp__dummy1 : bool; rec__p__pp__r1 : us_rep1
}

function us_split_fields_Dummy__2__projection(a: us_split_fields6) : bool =
  (a).rec__p__pp__dummy1

function us_split_fields_R__2__projection(a: us_split_fields6) : us_rep1 =
  (a).rec__p__pp__r1

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs5 : us_split_discrs3; us_split_fields7 :
us_split_fields6
}

function us_rep___9__projection(a: us_rep3) : us_split_discrs3 =
  (a).us_split_discrs5

function us_rep___10__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base1(a: us_rep3) : us_rep2 = { us_split_discrs4 =
  (a).us_split_discrs5; us_split_fields5 = { rec__p__pp__dummy =
  ((a).us_split_fields7).rec__p__pp__dummy1; rec__p__pp__r =
  ((a).us_split_fields7).rec__p__pp__r1 } }

function of_base1(r: us_rep2) : us_rep3 = { us_split_discrs5 =
  (r).us_split_discrs4; us_split_fields7 = { rec__p__pp__dummy1 =
  ((r).us_split_fields5).rec__p__pp__dummy; rec__p__pp__r1 =
  ((r).us_split_fields5).rec__p__pp__r } }

predicate in_range5(rec__p__pp__b1: bool, rec__p__pp__c1: int, a: us_rep2) =
  ((rec__p__pp__b1 = ((a).us_split_discrs4).rec__p__pp__b) and
  (rec__p__pp__c1 = to_rep(((a).us_split_discrs4).rec__p__pp__c)))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool. forall a3:natural.
  forall a4:(int,natural) farray. forall a5:t1. (0 <= object__size5({
  us_split_discrs5 = { rec__p__pp__b = a; rec__p__pp__c = a1 };
  us_split_fields7 = { rec__p__pp__dummy1 = a2; rec__p__pp__r1 = {
  us_split_discrs2 = { rec__p__my_rec__c = a3 }; us_split_fields3 = {
  rec__p__my_rec__content1 = { elts1 = a4; rt1 = a5 } } } } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool. forall a3:natural.
  forall a4:(int,natural) farray. forall a5:t1. (0 <= object__alignment5({
  us_split_discrs5 = { rec__p__pp__b = a; rec__p__pp__c = a1 };
  us_split_fields7 = { rec__p__pp__dummy1 = a2; rec__p__pp__r1 = {
  us_split_discrs2 = { rec__p__my_rec__c = a3 }; us_split_fields3 = {
  rec__p__my_rec__content1 = { elts1 = a4; rt1 = a5 } } } } })))

logic p__pp__b__first__bit1 : int

logic p__pp__b__last__bit1 : int

logic p__pp__b__position1 : int

axiom p__pp__b__first__bit_axiom1 : (0 <= p__pp__b__first__bit1)

axiom p__pp__b__last__bit_axiom1 :
  (p__pp__b__first__bit1 <  p__pp__b__last__bit1)

axiom p__pp__b__position_axiom1 : (0 <= p__pp__b__position1)

logic p__pp__c__first__bit1 : int

logic p__pp__c__last__bit1 : int

logic p__pp__c__position1 : int

axiom p__pp__c__first__bit_axiom1 : (0 <= p__pp__c__first__bit1)

axiom p__pp__c__last__bit_axiom1 :
  (p__pp__c__first__bit1 <  p__pp__c__last__bit1)

axiom p__pp__c__position_axiom1 : (0 <= p__pp__c__position1)

logic p__pp__dummy__first__bit1 : int

logic p__pp__dummy__last__bit1 : int

logic p__pp__dummy__position1 : int

axiom p__pp__dummy__first__bit_axiom1 : (0 <= p__pp__dummy__first__bit1)

axiom p__pp__dummy__last__bit_axiom1 :
  (p__pp__dummy__first__bit1 <  p__pp__dummy__last__bit1)

axiom p__pp__dummy__position_axiom1 : (0 <= p__pp__dummy__position1)

logic p__pp__r__first__bit1 : int

logic p__pp__r__last__bit1 : int

logic p__pp__r__position1 : int

axiom p__pp__r__first__bit_axiom1 : (0 <= p__pp__r__first__bit1)

axiom p__pp__r__last__bit_axiom1 :
  (p__pp__r__first__bit1 <  p__pp__r__last__bit1)

axiom p__pp__r__position_axiom1 : (0 <= p__pp__r__position1)

logic user_eq10 : us_rep3, us_rep3 -> bool

type txS__ref = { txS__content : us_rep3
}

function txS__ref___projection(a: txS__ref) : us_rep3 = (a).txS__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy15 : integer

type tT8sP1__ref = { tT8sP1__content : integer
}

function tT8sP1__ref___projection(a: tT8sP1__ref) : integer =
  (a).tT8sP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,natural) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,natural) farray = (a).elts2

function of_array2(a: (int,natural) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,natural) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,natural) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,natural) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__alignment6(a)))

function bool_eq13(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq12 : us_t2, us_t2 -> bool

logic dummy16 : (int,natural) farray

logic dummy17 : t2

type t8s__ref = { t8s__content : us_t2
}

function t8s__ref___projection(a: t8s__ref) : us_t2 = (a).t8s__content

type us_split_fields8 = { rec__p__my_rec__content2 : us_t2
}

function us_split_fields_Content__3__projection(a: us_split_fields8) : us_t2 =
  (a).rec__p__my_rec__content2

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs6 : us_split_discrs; us_split_fields9 :
us_split_fields8
}

function us_rep___5__projection(a: us_rep4) : us_split_discrs =
  (a).us_split_discrs6

function us_rep___6__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function to_base2(a: us_rep4) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs6; us_split_fields1 = { rec__p__my_rec__content =
  of_array(to_array2(((a).us_split_fields9).rec__p__my_rec__content2),
  first5(((a).us_split_fields9).rec__p__my_rec__content2),
  last5(((a).us_split_fields9).rec__p__my_rec__content2)) } }

function of_base2(r: us_rep) : us_rep4 = { us_split_discrs6 =
  (r).us_split_discrs1; us_split_fields9 = { rec__p__my_rec__content2 =
  of_array2(to_array(((r).us_split_fields1).rec__p__my_rec__content),
  first1(((r).us_split_fields1).rec__p__my_rec__content),
  last1(((r).us_split_fields1).rec__p__my_rec__content)) } }

logic bool_eq14 : us_rep4, us_rep4 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq14(a, b)].
  ((((to_rep(((a).us_split_discrs6).rec__p__my_rec__c) = to_rep(((b).us_split_discrs6).rec__p__my_rec__c)) and
  (bool_eq13(((a).us_split_fields9).rec__p__my_rec__content2,
  ((b).us_split_fields9).rec__p__my_rec__content2) = true)) -> (bool_eq14(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_discrs6).rec__p__my_rec__c) = to_rep(((b).us_split_discrs6).rec__p__my_rec__c)) and
  (bool_eq13(((a).us_split_fields9).rec__p__my_rec__content2,
  ((b).us_split_fields9).rec__p__my_rec__content2) = true))) -> (bool_eq14(a,
  b) = false))))

predicate in_range6(rec__p__my_rec__c1: int, a: us_rep) =
  (rec__p__my_rec__c1 = to_rep(((a).us_split_discrs1).rec__p__my_rec__c))

logic value__size7 : int

logic object__size7 : us_rep4 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep4 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t2.
  (0 <= object__size7({ us_split_discrs6 = { rec__p__my_rec__c = a };
  us_split_fields9 = { rec__p__my_rec__content2 = { elts2 = a1; rt2 = a2 } }
  })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:natural. forall a1:(int,natural) farray. forall a2:t2.
  (0 <= object__alignment7({ us_split_discrs6 = { rec__p__my_rec__c = a };
  us_split_fields9 = { rec__p__my_rec__content2 = { elts2 = a1; rt2 = a2 } }
  })))

logic p__my_rec__c__first__bit2 : int

logic p__my_rec__c__last__bit2 : int

logic p__my_rec__c__position2 : int

axiom p__my_rec__c__first__bit_axiom2 : (0 <= p__my_rec__c__first__bit2)

axiom p__my_rec__c__last__bit_axiom2 :
  (p__my_rec__c__first__bit2 <  p__my_rec__c__last__bit2)

axiom p__my_rec__c__position_axiom2 : (0 <= p__my_rec__c__position2)

logic p__my_rec__content__first__bit2 : int

logic p__my_rec__content__last__bit2 : int

logic p__my_rec__content__position2 : int

axiom p__my_rec__content__first__bit_axiom2 :
  (0 <= p__my_rec__content__first__bit2)

axiom p__my_rec__content__last__bit_axiom2 :
  (p__my_rec__content__first__bit2 <  p__my_rec__content__last__bit2)

axiom p__my_rec__content__position_axiom2 :
  (0 <= p__my_rec__content__position2)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy18 : natural

logic dummy19 : (int,natural) farray

logic dummy20 : t2

type t7s__ref = { t7s__content : us_rep4
}

function t7s__ref___projection(a: t7s__ref) : us_rep4 = (a).t7s__content

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy21 : integer

type t9s__ref = { t9s__content : integer
}

function t9s__ref___projection(a: t9s__ref) : integer = (a).t9s__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,natural) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,natural) farray = (a).elts3

function of_array3(a: (int,natural) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size8 : int

logic object__size8 : (int,natural) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,natural) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,natural) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,natural) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,natural) farray. (0 <= object__alignment8(a)))

function bool_eq16(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq15 : us_t3, us_t3 -> bool

logic dummy22 : (int,natural) farray

logic dummy23 : t3

type t10s__ref = { t10s__content : us_t3
}

function t10s__ref___projection(a: t10s__ref) : us_t3 = (a).t10s__content

logic temp___243 : int, int, int -> us_t3

logic x__split_discrs : bool

logic x__split_discrs1 : natural

logic attr__ATTRIBUTE_ADDRESS : int

logic c : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t4 = { elts4 : (int,natural) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,natural) farray = (a).elts4

function of_array4(a: (int,natural) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size9 : int

logic object__size9 : (int,natural) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,natural) farray -> int

logic value__alignment9 : int

logic object__alignment9 : (int,natural) farray -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,natural) farray. (0 <= object__size9(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,natural) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,natural) farray. (0 <= object__alignment9(a)))

function bool_eq17(x: us_t4, y: us_t4) : bool = bool_eq5((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq16 : us_t4, us_t4 -> bool

logic dummy24 : (int,natural) farray

logic dummy25 : t4

type nat_array__ref = { nat_array__content : us_t4
}

function nat_array__ref___projection(a: nat_array__ref) : us_t4 =
  (a).nat_array__content

axiom def_axiom :
  (forall temp___245:int. forall temp___246:int. forall temp___247:int.
  (in_range1(temp___245) -> ((dynamic_property8(1, 2147483647, temp___246,
  temp___247) -> ((to_rep1(first6((temp___243(temp___245, temp___246,
  temp___247)).rt3)) = temp___246) and (to_rep1(last6((temp___243(temp___245,
  temp___246, temp___247)).rt3)) = temp___247))) and
  (forall temp___248:int. (to_rep(((temp___243(temp___245, temp___246,
  temp___247)).elts3[temp___248])) = temp___245)))))

 (* File "p.ads", line 14, characters 0-0 *)
goal WP_parameter_def :
  (forall temp___c_259:int. (in_range1(temp___c_259) ->
  ((1 <= temp___c_259) -> (1 <= 1))))
