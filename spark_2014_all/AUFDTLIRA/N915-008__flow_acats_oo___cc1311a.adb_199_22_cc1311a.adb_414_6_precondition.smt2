(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort really_short 0)
(declare-fun really_shortqtint (really_short) Int)
(assert (forall ((i really_short)) (and (<= (- 9) (really_shortqtint i)) (<= (really_shortqtint i) 0))))
(define-fun in_range4 ((x Int)) Bool (and (<= (- 9) x) (<= x 0)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (really_short really_short) Bool)
(declare-const dummy4 really_short)
(declare-datatypes () ((really_short__ref (mk_really_short__ref (really_short__content really_short)))))
(define-fun really_short__ref___projection ((a really_short__ref)) really_short (really_short__content a))
(declare-sort first_half 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (first_half first_half) Bool)
(declare-const dummy5 first_half)
(declare-datatypes () ((first_half__ref (mk_first_half__ref (first_half__content first_half)))))
(define-fun first_half__ref___projection ((a first_half__ref)) first_half (first_half__content a))
(declare-sort month_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 11)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (month_type month_type) Bool)
(declare-const dummy6 month_type)
(declare-datatypes () ((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type (month_type__content a))
(declare-fun to_rep2 (month_type) Int)
(declare-fun of_rep2 (Int) month_type)
(assert (forall ((x month_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x month_type)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort day_type 0)
(declare-fun day_typeqtint (day_type) Int)
(assert (forall ((i day_type)) (and (<= 1 (day_typeqtint i)) (<= (day_typeqtint i) 31))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (day_type day_type) Bool)
(declare-const dummy7 day_type)
(declare-datatypes () ((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content a))
(define-fun to_rep3 ((x day_type)) Int (day_typeqtint x))
(declare-fun of_rep3 (Int) day_type)
(assert (forall ((x day_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x day_type)) (! (in_range7 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort year_type 0)
(declare-fun year_typeqtint (year_type) Int)
(assert (forall ((i year_type)) (and (<= 1904 (year_typeqtint i)) (<= (year_typeqtint i) 2050))))
(define-fun in_range8 ((x Int)) Bool (and (<= 1904 x) (<= x 2050)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (year_type year_type) Bool)
(declare-const dummy8 year_type)
(declare-datatypes () ((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type (year_type__content a))
(define-fun to_rep4 ((x year_type)) Int (year_typeqtint x))
(declare-fun of_rep4 (Int) year_type)
(assert (forall ((x year_type)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x year_type)) (! (in_range8 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__cc1311a__date__month month_type) (rec__cc1311a__date__day day_type) (rec__cc1311a__date__year year_type)))))
(define-fun us_split_fields_MONTH__projection ((a us_split_fields)) month_type (rec__cc1311a__date__month a))
(define-fun us_split_fields_DAY__projection ((a us_split_fields)) day_type (rec__cc1311a__date__day a))
(define-fun us_split_fields_YEAR__projection ((a us_split_fields)) year_type (rec__cc1311a__date__year a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep2 (rec__cc1311a__date__month (us_split_fields1 a))) (to_rep2 (rec__cc1311a__date__month (us_split_fields1 b)))) (= (to_rep3 (rec__cc1311a__date__day (us_split_fields1 a))) (to_rep3 (rec__cc1311a__date__day (us_split_fields1 b))))) (= (to_rep4 (rec__cc1311a__date__year (us_split_fields1 a))) (to_rep4 (rec__cc1311a__date__year (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const cc1311a__date__month__first__bit Int)
(declare-const cc1311a__date__month__last__bit Int)
(declare-const cc1311a__date__month__position Int)
(assert (<= 0 cc1311a__date__month__first__bit))
(assert (< cc1311a__date__month__first__bit cc1311a__date__month__last__bit))
(assert (<= 0 cc1311a__date__month__position))
(declare-const cc1311a__date__day__first__bit Int)
(declare-const cc1311a__date__day__last__bit Int)
(declare-const cc1311a__date__day__position Int)
(assert (<= 0 cc1311a__date__day__first__bit))
(assert (< cc1311a__date__day__first__bit cc1311a__date__day__last__bit))
(assert (<= 0 cc1311a__date__day__position))
(declare-const cc1311a__date__year__first__bit Int)
(declare-const cc1311a__date__year__last__bit Int)
(declare-const cc1311a__date__year__position Int)
(assert (<= 0 cc1311a__date__year__first__bit))
(assert (< cc1311a__date__year__first__bit cc1311a__date__year__last__bit))
(assert (<= 0 cc1311a__date__year__position))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((date__ref (mk_date__ref (date__content us_rep)))))
(define-fun date__ref___projection ((a date__ref)) us_rep (date__content a))
(declare-const today us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort first_five 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 65 x) (<= x 69)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (first_five first_five) Bool)
(declare-const dummy10 first_five)
(declare-datatypes () ((first_five__ref (mk_first_five__ref (first_five__content first_five)))))
(define-fun first_five__ref___projection ((a first_five__ref)) first_five (first_five__content a))
(declare-sort map1 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int Int Int) us_rep)
(declare-fun set (map1 Int Int Int us_rep) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((k Int)) (forall ((a us_rep)) (! (= (get (set m i j k a) i j k) a) :pattern ((set m i j k a)))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((k Int) (k2 Int)) (forall ((a us_rep)) (! (=> (not (and (= i i2) (and (= j j2) (= k k2)))) (= (get (set m i j k a) i2 j2 k2) (get m i2 j2 k2))) :pattern ((get (set m i j k a) i2 j2 k2)) :pattern ((set m i j k a) (get m i2 j2 k2)))))))))
(declare-fun slide1 (map1 Int Int Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((old_first Int) (new_first Int)) (forall ((old_first_2 Int) (new_first_2 Int)) (forall ((old_first_3 Int) (new_first_3 Int)) (forall ((i Int)) (forall ((j Int)) (forall ((k Int)) (! (= (get (slide1 a old_first new_first old_first_2 new_first_2 old_first_3 new_first_3) i j k) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)) (- k (- new_first_3 old_first_3)))) :pattern ((get (slide1 a old_first new_first old_first_2 new_first_2 old_first_3 new_first_3) i j k)))))))))))
(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int) (b__first_3 Int) (b__last_3 Int)) Bool (ite (and (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (ite (<= a__first_3 a__last_3) (and (<= b__first_3 b__last_3) (= (- a__last_3 a__first_3) (- b__last_3 b__first_3))) (< b__last_3 b__first_3))) (forall ((temp___idx_154 Int) (temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (and (<= a__first_2 temp___idx_155) (<= temp___idx_155 a__last_2))) (and (<= a__first_3 temp___idx_156) (<= temp___idx_156 a__last_3))) (= (bool_eq2 (get a temp___idx_154 temp___idx_155 temp___idx_156) (get b (+ (- b__first a__first) temp___idx_154) (+ (- b__first_2 a__first_2) temp___idx_155) (+ (- b__first_3 a__first_3) temp___idx_156))) true)))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int) (b__first_3 Int) (b__last_3 Int)) (=> (= (bool_eq3 b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3 a a__first a__last a__first_2 a__last_2 a__first_3 a__last_3) true) (and (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (ite (<= a__first_3 a__last_3) (and (<= b__first_3 b__last_3) (= (- a__last_3 a__first_3) (- b__last_3 b__first_3))) (< b__last_3 b__first_3))) (forall ((temp___idx_154 Int) (temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (and (<= a__first_2 temp___idx_155) (<= temp___idx_155 a__last_2))) (and (<= a__first_3 temp___idx_156) (<= temp___idx_156 a__last_3))) (= (bool_eq2 (get a temp___idx_154 temp___idx_155 temp___idx_156) (get b (+ (- b__first a__first) temp___idx_154) (+ (- b__first_2 a__first_2) temp___idx_155) (+ (- b__first_3 a__first_3) temp___idx_156))) true))))))))
(declare-datatypes () ((component_type__ref (mk_component_type__ref (component_type__content us_rep)))))
(define-fun component_type__ref___4__projection ((a component_type__ref)) us_rep (component_type__content a))
(declare-const default_value us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c414b map1)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp_____aggregate_def_693 (us_rep) map1)
(declare-fun temp_____aggregate_def_699 (us_rep) map1)
(declare-fun temp___String_Literal_706 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_706 us_void_param) 1)) 80) (= (to_rep (select (temp___String_Literal_706 us_void_param) 2)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 3)) 79)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 4)) 66)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 5)) 76)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 6)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 7)) 77)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 8)) 83)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 10)) 87)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 11)) 73)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 12)) 84)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 13)) 72)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 14)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 15)) 84)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 16)) 72)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 17)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 18)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 19)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 20)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 21)) 68)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 22)) 73)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 23)) 77)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 24)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 25)) 78)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 26)) 83)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 27)) 73)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 28)) 79)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 29)) 78)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 30)) 65)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 31)) 76)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 32)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 33)) 65)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 34)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 35)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 36)) 65)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 37)) 89)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 38)) 44)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 39)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 40)) 80)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 41)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 42)) 79)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 43)) 67)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 44)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 45)) 68)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 46)) 85)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 47)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 48)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 49)) 44)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 50)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 51)) 65)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 52)) 78)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 53)) 68)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 54)) 32)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 55)) 80)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 56)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 57)) 79)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 58)) 67)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 59)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 60)) 68)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 61)) 85)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 62)) 82)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 63)) 69)) (= (to_rep (select (temp___String_Literal_706 us_void_param) 64)) 46)) :pattern ((temp___String_Literal_706 us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant2 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant4 ((temp___expr_244 Int) (temp___is_init_240 Bool) (temp___skip_constant_241 Bool) (temp___do_toplevel_242 Bool) (temp___do_typ_inv_243 Bool)) Bool (=> (or (= temp___is_init_240 true) (<= (- 9) 0)) (in_range4 temp___expr_244)))
(define-fun dynamic_invariant5 ((temp___expr_251 Int) (temp___is_init_247 Bool) (temp___skip_constant_248 Bool) (temp___do_toplevel_249 Bool) (temp___do_typ_inv_250 Bool)) Bool (=> (or (= temp___is_init_247 true) (<= 0 11)) (in_range6 temp___expr_251)))
(define-fun dynamic_invariant6 ((temp___expr_258 Int) (temp___is_init_254 Bool) (temp___skip_constant_255 Bool) (temp___do_toplevel_256 Bool) (temp___do_typ_inv_257 Bool)) Bool (=> (or (= temp___is_init_254 true) (<= 0 5)) (in_range5 temp___expr_258)))
(define-fun dynamic_invariant7 ((temp___expr_265 Int) (temp___is_init_261 Bool) (temp___skip_constant_262 Bool) (temp___do_toplevel_263 Bool) (temp___do_typ_inv_264 Bool)) Bool (=> (or (= temp___is_init_261 true) (<= 1 31)) (in_range7 temp___expr_265)))
(define-fun dynamic_invariant8 ((temp___expr_272 Int) (temp___is_init_268 Bool) (temp___skip_constant_269 Bool) (temp___do_toplevel_270 Bool) (temp___do_typ_inv_271 Bool)) Bool (=> (or (= temp___is_init_268 true) (<= 1904 2050)) (in_range8 temp___expr_272)))
(declare-const rliteral day_type)
(assert (= (day_typeqtint rliteral) 8))
(declare-const rliteral1 year_type)
(assert (= (year_typeqtint rliteral1) 1990))
(assert (= today (mk___rep (mk___split_fields (of_rep2 7) rliteral rliteral1))))
(define-fun dynamic_invariant9 ((temp___expr_289 Int) (temp___is_init_285 Bool) (temp___skip_constant_286 Bool) (temp___do_toplevel_287 Bool) (temp___do_typ_inv_288 Bool)) Bool (=> (or (= temp___is_init_285 true) (<= 65 69)) (in_range9 temp___expr_289)))
(assert (= default_value today))
(assert (forall ((temp___701 us_rep)) (forall ((temp___702 Int) (temp___703 Int) (temp___704 Int)) (= (get (temp_____aggregate_def_699 temp___701) temp___702 temp___703 temp___704) temp___701))))
(assert (forall ((temp___695 us_rep)) (forall ((temp___696 Int) (temp___697 Int) (temp___698 Int)) (= (get (temp_____aggregate_def_693 temp___695) temp___696 temp___697 temp___698) temp___695))))
(declare-const results map1)
(declare-const result map1)
(declare-const results1 map1)
(assert (= today default_value))
(assert (= (temp_____aggregate_def_693 default_value) c414b))
(assert (= result results))
(assert (= results1 c414b))
(assert (not (= (bool_eq3 results1 (- 9) 0 0 5 65 69 (temp_____aggregate_def_699 default_value) (- 9) 0 0 5 65 69) true)))
(check-sat)
(exit)
