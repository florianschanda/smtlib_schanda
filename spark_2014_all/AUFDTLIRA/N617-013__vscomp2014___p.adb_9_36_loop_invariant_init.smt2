(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-fun to_rep (index) Int)
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int index))))))
(declare-fun slide ((Array Int index) Int Int) (Array Int index))
(assert (forall ((a (Array Int index))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int index))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int index) Int Int (Array Int index) Int Int) (Array Int index))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (index Int) (Array Int index))
(assert (forall ((v index)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int index)) (a__first Int) (a__last Int) (b (Array Int index)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int index) Int Int (Array Int index) Int Int) Int)
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int index)) (b (Array Int index))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const saved (Array Int index))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 10)) (in_range1 temp___expr_136)))
(declare-const f (Array Int index))
(declare-const j Int)
(declare-const i Int)
(declare-const temp___152 Int)
(declare-const temp___150 (Array Int index))
(declare-const temp___153 (Array Int index))
(declare-const o index)
(declare-const o1 (Array Int index))
(declare-const o2 index)
(declare-const o3 (Array Int index))
(declare-const temp___1521 Int)
(declare-const temp___1501 (Array Int index))
(declare-const temp___1531 (Array Int index))
(declare-const o4 index)
(declare-const o5 (Array Int index))
(declare-const o6 index)
(declare-const o7 (Array Int index))
(declare-const temp___1522 Int)
(declare-const temp___1502 (Array Int index))
(declare-const temp___1532 (Array Int index))
(declare-const o8 index)
(declare-const o9 (Array Int index))
(declare-const o10 index)
(declare-const o11 (Array Int index))
(declare-const temp___1523 Int)
(declare-const temp___1503 (Array Int index))
(declare-const temp___1533 (Array Int index))
(declare-const o12 index)
(declare-const o13 (Array Int index))
(declare-const o14 index)
(declare-const o15 (Array Int index))
(declare-const temp___1524 Int)
(declare-const temp___1504 (Array Int index))
(declare-const temp___1534 (Array Int index))
(declare-const o16 index)
(declare-const o17 (Array Int index))
(declare-const o18 index)
(declare-const o19 (Array Int index))
(declare-const temp___1525 Int)
(declare-const temp___1505 (Array Int index))
(declare-const temp___1535 (Array Int index))
(declare-const o20 index)
(declare-const o21 (Array Int index))
(declare-const o22 index)
(declare-const o23 (Array Int index))
(declare-const temp___1526 Int)
(declare-const temp___1506 (Array Int index))
(declare-const temp___1536 (Array Int index))
(declare-const o24 index)
(declare-const o25 (Array Int index))
(declare-const o26 index)
(declare-const o27 (Array Int index))
(declare-const temp___1527 Int)
(declare-const temp___1507 (Array Int index))
(declare-const temp___1537 (Array Int index))
(declare-const o28 index)
(declare-const o29 (Array Int index))
(declare-const o30 index)
(declare-const o31 (Array Int index))
(declare-const temp___1528 Int)
(declare-const temp___1508 (Array Int index))
(declare-const temp___1538 (Array Int index))
(declare-const o32 index)
(declare-const o33 (Array Int index))
(declare-const o34 index)
(declare-const o35 (Array Int index))
(declare-const o36 index)
(declare-const o37 (Array Int index))
(declare-const o38 index)
(declare-const o39 (Array Int index))
(declare-const f1 (Array Int index))
(declare-const result Int)
(declare-const j1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 (Array Int index))
(declare-const f2 (Array Int index))
(declare-const f3 (Array Int index))
(declare-const i2 Int)
(declare-const result3 Int)
(declare-const i3 Int)
(declare-const result4 (Array Int index))
(declare-const f4 (Array Int index))
(declare-const f5 (Array Int index))
(declare-const i4 Int)
(declare-const f6 (Array Int index))
(declare-const i5 Int)
(declare-const f7 (Array Int index))
(declare-const i6 Int)
(declare-const f8 (Array Int index))
(declare-const i7 Int)
(declare-const f9 (Array Int index))
(declare-const i8 Int)
(declare-const f10 (Array Int index))
(declare-const i9 Int)
(declare-const result5 Int)
(declare-const j2 Int)
(declare-const result6 Int)
(declare-const i10 Int)
(declare-const result7 (Array Int index))
(declare-const f11 (Array Int index))
(declare-const f12 (Array Int index))
(declare-const i11 Int)
(declare-const result8 Int)
(declare-const i12 Int)
(declare-const result9 (Array Int index))
(declare-const f13 (Array Int index))
(declare-const f14 (Array Int index))
(declare-const i13 Int)
(declare-const f15 (Array Int index))
(declare-const i14 Int)
(declare-const f16 map__ref)
(declare-const i15 int__ref)
(declare-const f17 (Array Int index))
(declare-const i16 Int)
(declare-const f18 map__ref)
(declare-const i17 int__ref)
(declare-const f19 (Array Int index))
(declare-const i18 Int)
(declare-const f20 map__ref)
(declare-const i19 int__ref)
(declare-const f21 (Array Int index))
(declare-const i20 Int)
(declare-const result10 int__ref)
(declare-const j3 Int)
(declare-const result11 int__ref)
(declare-const i21 Int)
(declare-const result12 map__ref)
(declare-const f22 (Array Int index))
(declare-const f23 (Array Int index))
(declare-const i22 Int)
(declare-const result13 int__ref)
(declare-const i23 Int)
(declare-const result14 map__ref)
(declare-const f24 (Array Int index))
(declare-const f25 map__ref)
(declare-const i24 int__ref)
(declare-const f26 (Array Int index))
(declare-const i25 Int)
(declare-const f27 map__ref)
(declare-const i26 int__ref)
(declare-const f28 (Array Int index))
(declare-const i27 Int)
(declare-const f29 map__ref)
(declare-const i28 int__ref)
(declare-const f30 (Array Int index))
(declare-const i29 Int)
(declare-const f31 map__ref)
(declare-const i30 int__ref)
(declare-const f32 (Array Int index))
(declare-const i31 Int)
(declare-const result15 int__ref)
(declare-const j4 Int)
(declare-const result16 int__ref)
(declare-const i32 Int)
(declare-const result17 map__ref)
(declare-const f33 (Array Int index))
(declare-const f34 (Array Int index))
(declare-const i33 Int)
(declare-const result18 int__ref)
(declare-const i34 Int)
(declare-const result19 map__ref)
(declare-const f35 (Array Int index))
(declare-const f36 map__ref)
(declare-const i35 int__ref)
(declare-const f37 (Array Int index))
(declare-const i36 Int)
(declare-const f38 map__ref)
(declare-const i37 int__ref)
(declare-const f39 (Array Int index))
(declare-const i38 Int)
(declare-const f40 map__ref)
(declare-const i39 int__ref)
(declare-const f41 (Array Int index))
(declare-const i40 Int)
(declare-const f42 map__ref)
(declare-const i41 int__ref)
(declare-const f43 (Array Int index))
(declare-const i42 Int)
(declare-const result20 int__ref)
(declare-const j5 Int)
(declare-const result21 int__ref)
(declare-const i43 Int)
(declare-const result22 map__ref)
(declare-const f44 (Array Int index))
(declare-const f45 (Array Int index))
(declare-const i44 Int)
(declare-const result23 int__ref)
(declare-const i45 Int)
(declare-const result24 map__ref)
(declare-const f46 (Array Int index))
(declare-const f47 map__ref)
(declare-const i46 int__ref)
(declare-const f48 (Array Int index))
(declare-const i47 Int)
(declare-const f49 map__ref)
(declare-const i48 int__ref)
(declare-const f50 (Array Int index))
(declare-const i49 Int)
(declare-const f51 map__ref)
(declare-const i50 int__ref)
(declare-const f52 (Array Int index))
(declare-const i51 Int)
(declare-const f53 map__ref)
(declare-const i52 int__ref)
(declare-const f54 (Array Int index))
(declare-const i53 Int)
(declare-const result25 int__ref)
(declare-const j6 Int)
(declare-const result26 int__ref)
(declare-const i54 Int)
(declare-const result27 map__ref)
(declare-const f55 (Array Int index))
(declare-const f56 (Array Int index))
(declare-const i55 Int)
(declare-const result28 int__ref)
(declare-const i56 Int)
(declare-const result29 map__ref)
(declare-const f57 (Array Int index))
(declare-const f58 map__ref)
(declare-const i57 int__ref)
(declare-const f59 (Array Int index))
(declare-const i58 Int)
(declare-const f60 map__ref)
(declare-const i59 int__ref)
(declare-const f61 (Array Int index))
(declare-const i60 Int)
(declare-const f62 map__ref)
(declare-const i61 int__ref)
(declare-const f63 (Array Int index))
(declare-const i62 Int)
(declare-const f64 map__ref)
(declare-const i63 int__ref)
(declare-const f65 (Array Int index))
(declare-const i64 Int)
(declare-const result30 int__ref)
(declare-const j7 Int)
(declare-const result31 int__ref)
(declare-const i65 Int)
(declare-const result32 map__ref)
(declare-const f66 (Array Int index))
(declare-const f67 (Array Int index))
(declare-const i66 Int)
(declare-const result33 int__ref)
(declare-const i67 Int)
(declare-const result34 map__ref)
(declare-const f68 (Array Int index))
(declare-const f69 map__ref)
(declare-const i68 int__ref)
(declare-const f70 (Array Int index))
(declare-const i69 Int)
(declare-const f71 map__ref)
(declare-const i70 int__ref)
(declare-const f72 (Array Int index))
(declare-const i71 Int)
(declare-const f73 map__ref)
(declare-const i72 int__ref)
(declare-const f74 (Array Int index))
(declare-const i73 Int)
(declare-const f75 map__ref)
(declare-const i74 int__ref)
(declare-const f76 (Array Int index))
(declare-const i75 Int)
(declare-const result35 int__ref)
(declare-const j8 Int)
(declare-const result36 int__ref)
(declare-const i76 Int)
(declare-const result37 map__ref)
(declare-const f77 (Array Int index))
(declare-const f78 (Array Int index))
(declare-const i77 Int)
(declare-const result38 int__ref)
(declare-const i78 Int)
(declare-const result39 map__ref)
(declare-const f79 (Array Int index))
(declare-const f80 map__ref)
(declare-const i79 int__ref)
(declare-const f81 (Array Int index))
(declare-const i80 Int)
(declare-const f82 map__ref)
(declare-const i81 int__ref)
(declare-const f83 (Array Int index))
(declare-const i82 Int)
(declare-const f84 map__ref)
(declare-const i83 int__ref)
(declare-const f85 (Array Int index))
(declare-const i84 Int)
(declare-const f86 map__ref)
(declare-const i85 int__ref)
(declare-const f87 (Array Int index))
(declare-const i86 Int)
(declare-const result40 int__ref)
(declare-const j9 Int)
(declare-const result41 int__ref)
(declare-const i87 Int)
(declare-const result42 map__ref)
(declare-const f88 (Array Int index))
(declare-const f89 (Array Int index))
(declare-const i88 Int)
(declare-const result43 int__ref)
(declare-const i89 Int)
(declare-const result44 map__ref)
(declare-const f90 (Array Int index))
(declare-const f91 map__ref)
(declare-const i90 int__ref)
(declare-const f92 (Array Int index))
(declare-const i91 Int)
(declare-const f93 map__ref)
(declare-const i92 int__ref)
(declare-const f94 (Array Int index))
(declare-const i93 Int)
(declare-const f95 map__ref)
(declare-const i94 int__ref)
(declare-const f96 (Array Int index))
(declare-const i95 Int)
(declare-const f97 map__ref)
(declare-const i96 int__ref)
(declare-const f98 (Array Int index))
(declare-const i97 Int)
(declare-const result45 int__ref)
(declare-const j10 Int)
(declare-const result46 int__ref)
(declare-const i98 Int)
(declare-const result47 map__ref)
(declare-const f99 (Array Int index))
(declare-const f100 (Array Int index))
(declare-const i99 Int)
(declare-const result48 int__ref)
(declare-const i100 Int)
(declare-const result49 map__ref)
(declare-const f101 (Array Int index))
(declare-const f102 map__ref)
(declare-const i101 int__ref)
(declare-const f103 (Array Int index))
(declare-const i102 Int)
(assert (= f saved))
(assert (= result j))
(assert (= j1 1))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 10))
(assert (= (to_rep o) j1))
(assert (= o1 (store f i1 o)))
(assert (= (mk_map__ref result2) (mk_map__ref f)))
(assert (= f2 o1))
(assert (not (= (bool_eq f 1 10 saved 1 10) true)))
(check-sat)
(exit)
