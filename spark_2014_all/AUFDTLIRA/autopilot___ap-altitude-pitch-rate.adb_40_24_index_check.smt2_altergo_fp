(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type pitchangle

predicate in_range(x: int) = (((- 10) <= x) and (x <= 20))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : pitchangle, pitchangle -> bool

logic dummy : pitchangle

type pitchangle__ref = { pitchangle__content : pitchangle
}

function pitchangle__ref___projection(a: pitchangle__ref) : pitchangle =
  (a).pitchangle__content

logic to_rep : pitchangle -> int

logic of_rep : int -> pitchangle

axiom inversion_axiom :
  (forall x:pitchangle [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:pitchangle [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type history_range

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : history_range, history_range -> bool

logic dummy1 : history_range

type history_range__ref = { history_range__content : history_range
}

function history_range__ref___projection(a: history_range__ref) : history_range =
  (a).history_range__content

type map__ref = { map__content : (int,pitchangle) farray
}

logic slide : (int,pitchangle) farray, int, int -> (int,pitchangle) farray

axiom slide_eq :
  (forall a:(int,pitchangle) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,pitchangle) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,pitchangle) farray, int, int, (int,pitchangle) farray,
  int, int -> (int,pitchangle) farray

axiom concat_def :
  (forall a:(int,pitchangle) farray. forall b:(int,pitchangle) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : pitchangle, int -> (int,pitchangle) farray

axiom singleton_def :
  (forall v:pitchangle.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,pitchangle) farray, int, int, (int,pitchangle) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,pitchangle) farray. forall a__first:int. forall a__last:int.
  forall b:(int,pitchangle) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,pitchangle) farray. forall b:(int,pitchangle) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,pitchangle) farray, int, int, (int,pitchangle) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,pitchangle) farray. forall b:(int,pitchangle) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,pitchangle) farray. forall b:(int,pitchangle) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,pitchangle) farray. forall b:(int,pitchangle) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic h : (int,pitchangle) farray

logic i : int

logic o : int

logic o1 : pitchangle

logic o2 : int

logic o3 : pitchangle

logic o4 : (int,pitchangle) farray

logic o5 : pitchangle

logic o6 : (int,pitchangle) farray

logic o7 : int

logic o8 : pitchangle

logic o9 : int

logic o10 : pitchangle

logic o11 : (int,pitchangle) farray

logic o12 : pitchangle

logic o13 : (int,pitchangle) farray

logic o14 : int

logic o15 : pitchangle

logic o16 : int

logic o17 : pitchangle

logic o18 : (int,pitchangle) farray

logic o19 : pitchangle

logic o20 : (int,pitchangle) farray

logic o21 : int

logic o22 : pitchangle

logic o23 : int

logic o24 : pitchangle

logic o25 : (int,pitchangle) farray

logic o26 : pitchangle

logic o27 : (int,pitchangle) farray

logic o28 : int

logic o29 : pitchangle

logic o30 : int

logic o31 : pitchangle

logic o32 : (int,pitchangle) farray

logic o33 : pitchangle

logic o34 : (int,pitchangle) farray

logic o35 : int

logic o36 : pitchangle

logic o37 : int

logic o38 : pitchangle

logic o39 : (int,pitchangle) farray

logic o40 : pitchangle

logic o41 : (int,pitchangle) farray

logic o42 : int

logic o43 : pitchangle

logic o44 : int

logic o45 : pitchangle

logic o46 : (int,pitchangle) farray

logic o47 : pitchangle

logic o48 : (int,pitchangle) farray

logic o49 : int

logic o50 : pitchangle

logic o51 : int

logic o52 : pitchangle

logic o53 : (int,pitchangle) farray

logic o54 : pitchangle

logic o55 : (int,pitchangle) farray

logic o56 : int

logic o57 : pitchangle

logic o58 : int

logic o59 : pitchangle

logic o60 : (int,pitchangle) farray

logic o61 : pitchangle

logic o62 : (int,pitchangle) farray

logic result : int

logic i1 : int

logic result1 : (int,pitchangle) farray

logic h1 : (int,pitchangle) farray

logic result2 : (int,pitchangle) farray

logic h2 : (int,pitchangle) farray

logic result3 : int

logic i2 : int

logic result4 : (int,pitchangle) farray

logic h3 : (int,pitchangle) farray

logic result5 : (int,pitchangle) farray

logic h4 : (int,pitchangle) farray

logic result6 : int

logic i3 : int

logic result7 : (int,pitchangle) farray

logic h5 : (int,pitchangle) farray

logic result8 : (int,pitchangle) farray

logic h6 : (int,pitchangle) farray

logic result9 : int

logic i4 : int

logic result10 : (int,pitchangle) farray

logic h7 : (int,pitchangle) farray

logic result11 : (int,pitchangle) farray

logic h8 : (int,pitchangle) farray

logic result12 : int

logic i5 : int

logic result13 : (int,pitchangle) farray

logic h9 : (int,pitchangle) farray

logic result14 : (int,pitchangle) farray

logic h10 : (int,pitchangle) farray

logic result15 : int

logic i6 : int

logic result16 : (int,pitchangle) farray

logic h11 : (int,pitchangle) farray

logic result17 : (int,pitchangle) farray

logic h12 : (int,pitchangle) farray

logic result18 : int

logic i7 : int

logic result19 : (int,pitchangle) farray

logic h13 : (int,pitchangle) farray

logic result20 : (int,pitchangle) farray

logic h14 : (int,pitchangle) farray

logic result21 : int

logic i8 : int

logic result22 : (int,pitchangle) farray

logic h15 : (int,pitchangle) farray

logic result23 : (int,pitchangle) farray

logic h16 : (int,pitchangle) farray

logic result24 : int

logic i9 : int

logic result25 : (int,pitchangle) farray

logic h17 : (int,pitchangle) farray

logic result26 : (int,pitchangle) farray

logic h18 : (int,pitchangle) farray

logic result27 : int

logic i10 : int

axiom H : in_range(v)

axiom H1 : (result = i)

axiom H2 : (i1 = 1)

axiom H3 : (i1 <  10)

 (* File "ap-altitude-pitch-rate.adb", line 47, characters 0-0 *)
goal WP_parameter_def : (1 <= (i1 + 1))
