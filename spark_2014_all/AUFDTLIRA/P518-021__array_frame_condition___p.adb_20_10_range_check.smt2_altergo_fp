(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, int -> (int,integer) farray

logic set : map, int, int, (int,integer) farray -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:(int,integer) farray [set(m, i, j, a)]. (get(set(m, i, j, a), i,
  j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:(int,integer) farray [get(set(m, i, j, a), i2, j2)| set(m, i, j,
  a), get(m, i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j,
  a), i2, j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, int, int -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq4 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def3 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq4(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  (((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) and
  (bool_eq3(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true)) or
  (not (((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))))))) ->
  (bool_eq4(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (bool_eq3(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true))))) ->
  (bool_eq4(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = false))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq4(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (bool_eq3(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true)))))))

logic dummy3 : map

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

logic user_eq3 : map, map -> bool

type map__ref2 = { map__content2 : (int,map) farray
}

logic slide2 : (int,map) farray, int, int -> (int,map) farray

axiom slide_eq1 :
  (forall a:(int,map) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,map) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,map) farray, int, int, (int,map) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,map) farray. forall a__first:int. forall a__last:int.
  forall b:(int,map) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. ((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and (bool_eq4((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true)) or
  (not ((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq4((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq4((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (int,map) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y1:int [bool_eq6(x, y1)]. (((x = y1) -> (bool_eq6(x,
  y1) = true)) and ((not (x = y1)) -> (bool_eq6(x, y1) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t12b__ref = { t12b__content : integer
}

function t12b__ref___projection(a: t12b__ref) : integer = (a).t12b__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,map) farray; rt : t
}

function to_array(a: us_t) : (int,map) farray = (a).elts

function of_array(a: (int,map) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,map) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,map) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,map) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,map) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,map) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,map) farray. (0 <= object__alignment2(a)))

function bool_eq7(x: us_t, y1: us_t) : bool = bool_eq5((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y1).elts,
  to_rep(first((y1).rt)), to_rep(last((y1).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,map) farray

logic dummy6 : t

type t13b__ref = { t13b__content : us_t
}

function t13b__ref___projection(a: t13b__ref) : us_t = (a).t13b__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y1:int [bool_eq8(x, y1)]. (((x = y1) -> (bool_eq8(x,
  y1) = true)) and ((not (x = y1)) -> (bool_eq8(x, y1) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t14b__ref = { t14b__content : integer
}

function t14b__ref___projection(a: t14b__ref) : integer = (a).t14b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,map) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,map) farray = (a).elts1

function of_array1(a: (int,map) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,map) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,map) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,map) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,map) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,map) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,map) farray. (0 <= object__alignment3(a)))

function bool_eq9(x: us_t1, y1: us_t1) : bool = bool_eq5((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y1).elts1,
  to_rep(first2((y1).rt1)), to_rep(last2((y1).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,map) farray

logic dummy9 : t1

type t15b__ref = { t15b__content : us_t1
}

function t15b__ref___projection(a: t15b__ref) : us_t1 = (a).t15b__content

logic p__x__aggregate_def : map -> (int,map) farray

logic temp___253 : (int,integer) farray -> map

logic temp___258 : int -> (int,integer) farray

axiom def_axiom :
  (forall temp___251:map.
  (forall temp___252:int.
  ((p__x__aggregate_def(temp___251)[temp___252]) = temp___251)))

axiom def_axiom1 :
  (forall temp___255:(int,integer) farray.
  (forall temp___256:int. forall temp___257:int. (get(temp___253(temp___255),
  temp___256, temp___257) = temp___255)))

axiom def_axiom2 :
  (forall temp___260:int. (in_range(temp___260) ->
  (forall temp___261:int.
  (to_rep((temp___258(temp___260)[temp___261])) = temp___260))))

 (* File "p.adb", line 8, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,map) farray. forall i3:int. forall i21:int. forall i22:int.
  forall i1:int. forall o:integer. forall o1:(int,integer) farray.
  forall o2:map. forall o3:(int,map) farray. forall o4:integer.
  forall o5:(int,integer) farray. forall o6:map. forall o7:(int,map) farray.
  forall o8:integer. forall o9:(int,integer) farray. forall o10:map.
  forall o11:(int,map) farray. forall o12:integer.
  forall o13:(int,integer) farray. forall o14:map.
  forall o15:(int,map) farray. forall o16:integer.
  forall o17:(int,integer) farray. forall o18:map.
  forall o19:(int,map) farray. forall o20:integer.
  forall o21:(int,integer) farray. forall o22:map.
  forall o23:(int,map) farray. forall o24:integer.
  forall o25:(int,integer) farray. forall o26:map.
  forall o27:(int,map) farray. forall o28:integer.
  forall o29:(int,integer) farray. forall o30:map.
  forall o31:(int,map) farray. forall o32:integer.
  forall o33:(int,integer) farray. forall o34:map.
  forall o35:(int,map) farray. forall o36:integer.
  forall o37:(int,integer) farray. forall o38:map.
  forall o39:(int,map) farray. forall o40:integer.
  forall o41:(int,integer) farray. forall o42:map.
  forall o43:(int,map) farray. forall o44:integer.
  forall o45:(int,integer) farray. forall o46:map.
  forall o47:(int,map) farray. forall o48:integer.
  forall o49:(int,integer) farray. forall o50:map.
  forall o51:(int,map) farray. forall o52:integer.
  forall o53:(int,integer) farray. forall o54:map.
  forall o55:(int,map) farray. forall o56:integer.
  forall o57:(int,integer) farray. forall o58:map.
  forall o59:(int,map) farray. forall o60:integer.
  forall o61:(int,integer) farray. forall o62:map.
  forall o63:(int,map) farray. forall o64:integer.
  forall o65:(int,integer) farray. forall o66:map.
  forall o67:(int,map) farray. forall o68:integer.
  forall o69:(int,integer) farray. forall o70:map.
  forall o71:(int,map) farray. forall o72:integer.
  forall o73:(int,integer) farray. forall o74:map.
  forall o75:(int,map) farray. forall o76:integer.
  forall o77:(int,integer) farray. forall o78:map.
  forall o79:(int,map) farray. forall o80:integer.
  forall o81:(int,integer) farray. forall o82:map.
  forall o83:(int,map) farray. forall o84:integer.
  forall o85:(int,integer) farray. forall o86:map.
  forall o87:(int,map) farray. forall o88:integer.
  forall o89:(int,integer) farray. forall o90:map.
  forall o91:(int,map) farray. forall o92:integer.
  forall o93:(int,integer) farray. forall o94:map.
  forall o95:(int,map) farray. forall o96:integer.
  forall o97:(int,integer) farray. forall o98:map.
  forall o99:(int,map) farray. forall o100:integer.
  forall o101:(int,integer) farray. forall o102:map.
  forall o103:(int,map) farray. forall o104:integer.
  forall o105:(int,integer) farray. forall o106:map.
  forall o107:(int,map) farray. forall o108:(int,map) farray.
  forall temp___291:(int,map) farray. forall temp___2911:t1.
  forall result:(int,map) farray. forall x1:(int,map) farray.
  forall result1:int. forall i31:int. forall result2:int. forall i211:int.
  forall result3:int. forall i221:int. forall result4:int. forall i11:int.
  forall result5:(int,map) farray. forall x2:(int,map) farray.
  forall result6:int. forall i12:int. forall result7:(int,map) farray.
  forall x3:(int,map) farray. forall result8:int. forall i13:int.
  forall result9:(int,map) farray. forall x4:(int,map) farray.
  forall result10:int. forall i222:int. forall result11:int. forall i14:int.
  forall result12:(int,map) farray. forall x5:(int,map) farray.
  forall result13:int. forall i15:int. forall result14:(int,map) farray.
  forall x6:(int,map) farray. forall result15:int. forall i16:int.
  forall result16:(int,map) farray. forall x7:(int,map) farray.
  forall result17:int. forall i223:int. forall result18:int. forall i17:int.
  forall result19:(int,map) farray. forall x8:(int,map) farray.
  forall result20:int. forall i18:int. forall result21:(int,map) farray.
  forall x9:(int,map) farray. forall result22:int. forall i19:int.
  forall result23:(int,map) farray. forall x10:(int,map) farray.
  forall result24:int. forall i212:int. forall result25:int. forall i224:int.
  forall result26:int. forall i110:int. forall result27:(int,map) farray.
  forall x11:(int,map) farray. forall result28:int. forall i111:int.
  forall result29:(int,map) farray. forall x12:(int,map) farray.
  forall result30:int. forall i112:int. forall result31:(int,map) farray.
  forall x13:(int,map) farray. forall result32:int. forall i225:int.
  forall result33:int. forall i113:int. forall result34:map__ref2.
  forall x14:(int,map) farray. forall result35:int__ref. forall i114:int.
  forall result36:map__ref2. forall x15:(int,map) farray.
  forall result37:int__ref. forall i115:int. forall result38:map__ref2.
  forall x16:(int,map) farray. forall result39:int__ref. forall i226:int.
  forall result40:int__ref. forall i116:int. forall result41:map__ref2.
  forall x17:(int,map) farray. forall result42:int__ref. forall i117:int.
  forall result43:map__ref2. forall x18:(int,map) farray.
  forall result44:int__ref. forall i118:int. forall result45:map__ref2.
  forall x19:(int,map) farray. forall result46:int__ref. forall i213:int.
  forall result47:int__ref. forall i227:int. forall result48:int__ref.
  forall i119:int. forall result49:map__ref2. forall x20:(int,map) farray.
  forall result50:int__ref. forall i120:int. forall result51:map__ref2.
  forall x21:(int,map) farray. forall result52:int__ref. forall i121:int.
  forall result53:map__ref2. forall x22:(int,map) farray.
  forall result54:int__ref. forall i228:int. forall result55:int__ref.
  forall i122:int. forall result56:map__ref2. forall x23:(int,map) farray.
  forall result57:int__ref. forall i123:int. forall result58:map__ref2.
  forall x24:(int,map) farray. forall result59:int__ref. forall i124:int.
  forall result60:map__ref2. forall x25:(int,map) farray.
  forall result61:int__ref. forall i229:int. forall result62:int__ref.
  forall i125:int. forall result63:map__ref2. forall x26:(int,map) farray.
  forall result64:int__ref. forall i126:int. forall result65:map__ref2.
  forall x27:(int,map) farray. forall result66:int__ref. forall i127:int.
  forall result67:map__ref2. forall x28:(int,map) farray. (((result = x) and
  (x1 = p__x__aggregate_def(temp___253(temp___258(0))))) -> ((x1 = y) ->
  (((result1 = i3) and (i31 = 1)) -> ((((result2 = i21) and (i211 = 1)) and
  ((((result3 = i22) and (i221 = 1)) and ((((result4 = i1) and (i11 = 1)) and
  ((((((to_rep(o) = 1) and (o1 = (get((x1[i31]), i211, i221)[i11 <- o]))) and
  (o2 = set((x1[i31]), i211, i221, o1))) and (o3 = (x1[i31 <- o2]))) and
  ((result5 = x1) and (x2 = o3))) and (((result6 = i11) and (i12 = 2)) and
  ((((((to_rep(o4) = 1) and (o5 = (get((x2[i31]), i211,
  i221)[i12 <- o4]))) and (o6 = set((x2[i31]), i211, i221, o5))) and
  (o7 = (x2[i31 <- o6]))) and ((result7 = x2) and (x3 = o7))) and
  (((result8 = i12) and (i13 = 3)) and (((((to_rep(o8) = 1) and
  (o9 = (get((x3[i31]), i211, i221)[i13 <- o8]))) and (o10 = set((x3[i31]),
  i211, i221, o9))) and (o11 = (x3[i31 <- o10]))) and ((result9 = x3) and
  (x4 = o11)))))))) and (((result10 = i221) and (i222 = 2)) and
  ((((result11 = i13) and (i14 = 1)) and ((((((to_rep(o12) = 1) and
  (o13 = (get((x4[i31]), i211, i222)[i14 <- o12]))) and (o14 = set((x4[i31]),
  i211, i222, o13))) and (o15 = (x4[i31 <- o14]))) and ((result12 = x4) and
  (x5 = o15))) and (((result13 = i14) and (i15 = 2)) and
  ((((((to_rep(o16) = 1) and (o17 = (get((x5[i31]), i211,
  i222)[i15 <- o16]))) and (o18 = set((x5[i31]), i211, i222, o17))) and
  (o19 = (x5[i31 <- o18]))) and ((result14 = x5) and (x6 = o19))) and
  (((result15 = i15) and (i16 = 3)) and (((((to_rep(o20) = 1) and
  (o21 = (get((x6[i31]), i211, i222)[i16 <- o20]))) and (o22 = set((x6[i31]),
  i211, i222, o21))) and (o23 = (x6[i31 <- o22]))) and ((result16 = x6) and
  (x7 = o23)))))))) and (((result17 = i222) and (i223 = 3)) and
  (((result18 = i16) and (i17 = 1)) and ((((((to_rep(o24) = 1) and
  (o25 = (get((x7[i31]), i211, i223)[i17 <- o24]))) and (o26 = set((x7[i31]),
  i211, i223, o25))) and (o27 = (x7[i31 <- o26]))) and ((result19 = x7) and
  (x8 = o27))) and (((result20 = i17) and (i18 = 2)) and
  ((((((to_rep(o28) = 1) and (o29 = (get((x8[i31]), i211,
  i223)[i18 <- o28]))) and (o30 = set((x8[i31]), i211, i223, o29))) and
  (o31 = (x8[i31 <- o30]))) and ((result21 = x8) and (x9 = o31))) and
  (((result22 = i18) and (i19 = 3)) and (((((to_rep(o32) = 1) and
  (o33 = (get((x9[i31]), i211, i223)[i19 <- o32]))) and (o34 = set((x9[i31]),
  i211, i223, o33))) and (o35 = (x9[i31 <- o34]))) and ((result23 = x9) and
  (x10 = o35))))))))))))) and (((result24 = i211) and (i212 = 2)) and
  ((((result25 = i223) and (i224 = 1)) and ((((result26 = i19) and
  (i110 = 1)) and ((((((to_rep(o36) = 1) and (o37 = (get((x10[i31]), i212,
  i224)[i110 <- o36]))) and (o38 = set((x10[i31]), i212, i224, o37))) and
  (o39 = (x10[i31 <- o38]))) and ((result27 = x10) and (x11 = o39))) and
  (((result28 = i110) and (i111 = 2)) and ((((((to_rep(o40) = 1) and
  (o41 = (get((x11[i31]), i212, i224)[i111 <- o40]))) and
  (o42 = set((x11[i31]), i212, i224, o41))) and
  (o43 = (x11[i31 <- o42]))) and ((result29 = x11) and (x12 = o43))) and
  (((result30 = i111) and (i112 = 3)) and (((((to_rep(o44) = 1) and
  (o45 = (get((x12[i31]), i212, i224)[i112 <- o44]))) and
  (o46 = set((x12[i31]), i212, i224, o45))) and
  (o47 = (x12[i31 <- o46]))) and ((result31 = x12) and (x13 = o47)))))))) and
  (((result32 = i224) and (i225 = 2)) and ((((result33 = i112) and
  (i113 = 1)) and ((((((to_rep(o48) = 1) and (o49 = (get((x13[i31]), i212,
  i225)[i113 <- o48]))) and (o50 = set((x13[i31]), i212, i225, o49))) and
  (o51 = (x13[i31 <- o50]))) and ((result34 = { map__content2 = x13 }) and
  (x14 = o51))) and (((result35 = { int__content = i113 }) and
  (i114 = 2)) and ((((((to_rep(o52) = 1) and (o53 = (get((x14[i31]), i212,
  i225)[i114 <- o52]))) and (o54 = set((x14[i31]), i212, i225, o53))) and
  (o55 = (x14[i31 <- o54]))) and ((result36 = { map__content2 = x14 }) and
  (x15 = o55))) and (((result37 = { int__content = i114 }) and
  (i115 = 3)) and (((((to_rep(o56) = 1) and (o57 = (get((x15[i31]), i212,
  i225)[i115 <- o56]))) and (o58 = set((x15[i31]), i212, i225, o57))) and
  (o59 = (x15[i31 <- o58]))) and ((result38 = { map__content2 = x15 }) and
  (x16 = o59)))))))) and (((result39 = { int__content = i225 }) and
  (i226 = 3)) and (((result40 = { int__content = i115 }) and (i116 = 1)) and
  ((((((to_rep(o60) = 1) and (o61 = (get((x16[i31]), i212,
  i226)[i116 <- o60]))) and (o62 = set((x16[i31]), i212, i226, o61))) and
  (o63 = (x16[i31 <- o62]))) and ((result41 = { map__content2 = x16 }) and
  (x17 = o63))) and (((result42 = { int__content = i116 }) and
  (i117 = 2)) and ((((((to_rep(o64) = 1) and (o65 = (get((x17[i31]), i212,
  i226)[i117 <- o64]))) and (o66 = set((x17[i31]), i212, i226, o65))) and
  (o67 = (x17[i31 <- o66]))) and ((result43 = { map__content2 = x17 }) and
  (x18 = o67))) and (((result44 = { int__content = i117 }) and
  (i118 = 3)) and (((((to_rep(o68) = 1) and (o69 = (get((x18[i31]), i212,
  i226)[i118 <- o68]))) and (o70 = set((x18[i31]), i212, i226, o69))) and
  (o71 = (x18[i31 <- o70]))) and ((result45 = { map__content2 = x18 }) and
  (x19 = o71))))))))))))) and (((result46 = { int__content = i212 }) and
  (i213 = 3)) and (((result47 = { int__content = i226 }) and (i227 = 1)) and
  ((((result48 = { int__content = i118 }) and (i119 = 1)) and
  ((((((to_rep(o72) = 1) and (o73 = (get((x19[i31]), i213,
  i227)[i119 <- o72]))) and (o74 = set((x19[i31]), i213, i227, o73))) and
  (o75 = (x19[i31 <- o74]))) and ((result49 = { map__content2 = x19 }) and
  (x20 = o75))) and (((result50 = { int__content = i119 }) and
  (i120 = 2)) and ((((((to_rep(o76) = 1) and (o77 = (get((x20[i31]), i213,
  i227)[i120 <- o76]))) and (o78 = set((x20[i31]), i213, i227, o77))) and
  (o79 = (x20[i31 <- o78]))) and ((result51 = { map__content2 = x20 }) and
  (x21 = o79))) and (((result52 = { int__content = i120 }) and
  (i121 = 3)) and (((((to_rep(o80) = 1) and (o81 = (get((x21[i31]), i213,
  i227)[i121 <- o80]))) and (o82 = set((x21[i31]), i213, i227, o81))) and
  (o83 = (x21[i31 <- o82]))) and ((result53 = { map__content2 = x21 }) and
  (x22 = o83)))))))) and (((result54 = { int__content = i227 }) and
  (i228 = 2)) and ((((result55 = { int__content = i121 }) and (i122 = 1)) and
  ((((((to_rep(o84) = 1) and (o85 = (get((x22[i31]), i213,
  i228)[i122 <- o84]))) and (o86 = set((x22[i31]), i213, i228, o85))) and
  (o87 = (x22[i31 <- o86]))) and ((result56 = { map__content2 = x22 }) and
  (x23 = o87))) and (((result57 = { int__content = i122 }) and
  (i123 = 2)) and ((((((to_rep(o88) = 1) and (o89 = (get((x23[i31]), i213,
  i228)[i123 <- o88]))) and (o90 = set((x23[i31]), i213, i228, o89))) and
  (o91 = (x23[i31 <- o90]))) and ((result58 = { map__content2 = x23 }) and
  (x24 = o91))) and (((result59 = { int__content = i123 }) and
  (i124 = 3)) and (((((to_rep(o92) = 1) and (o93 = (get((x24[i31]), i213,
  i228)[i124 <- o92]))) and (o94 = set((x24[i31]), i213, i228, o93))) and
  (o95 = (x24[i31 <- o94]))) and ((result60 = { map__content2 = x24 }) and
  (x25 = o95)))))))) and (((result61 = { int__content = i228 }) and
  (i229 = 3)) and (((result62 = { int__content = i124 }) and (i125 = 1)) and
  ((((((to_rep(o96) = 1) and (o97 = (get((x25[i31]), i213,
  i229)[i125 <- o96]))) and (o98 = set((x25[i31]), i213, i229, o97))) and
  (o99 = (x25[i31 <- o98]))) and ((result63 = { map__content2 = x25 }) and
  (x26 = o99))) and (((result64 = { int__content = i125 }) and
  (i126 = 2)) and ((((((to_rep(o100) = 1) and (o101 = (get((x26[i31]), i213,
  i229)[i126 <- o100]))) and (o102 = set((x26[i31]), i213, i229, o101))) and
  (o103 = (x26[i31 <- o102]))) and ((result65 = { map__content2 = x26 }) and
  (x27 = o103))) and (((result66 = { int__content = i126 }) and
  (i127 = 3)) and (((((to_rep(o104) = 1) and (o105 = (get((x27[i31]), i213,
  i229)[i127 <- o104]))) and (o106 = set((x27[i31]), i213, i229, o105))) and
  (o107 = (x27[i31 <- o106]))) and ((result67 = { map__content2 = x27 }) and
  (x28 = o107)))))))))))))))))) -> ((((((i31 + 1) <= 3) ->
  (((1 <= (i31 + 1)) and ((i31 + 1) <= 3)) and ((1 <= 3) and (3 <= 3)))) and
  (o108 = y)) and ((temp___291 = o108) and (temp___2911 = mk1((i31 + 1),
  3)))) -> (((i31 + 1) <= 3) -> (1 <= (i31 + 1)))))))))
