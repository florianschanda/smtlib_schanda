(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type idx

predicate in_range1(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : idx, idx -> bool

logic dummy : idx

type idx__ref = { idx__content : idx
}

function idx__ref___projection(a: idx__ref) : idx = (a).idx__content

type valid_idx

predicate in_range2(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : valid_idx, valid_idx -> bool

logic dummy1 : valid_idx

type valid_idx__ref = { valid_idx__content : valid_idx
}

function valid_idx__ref___projection(a: valid_idx__ref) : valid_idx =
  (a).valid_idx__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bool, int -> (int,bool) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)])))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic a : (int,bool) farray

logic v : int

logic x : int

logic loopframe__get__result : int

logic temp___156 : int

logic result : int

logic v1 : int

logic result1 : int

logic x1 : int

logic result2 : int

logic v2 : int

logic result3 : int

logic x2 : int

logic result4 : int

logic v3 : int

logic result5 : int

logic x3 : int

logic result6 : int

logic v4 : int

logic result7 : int

logic x4 : int

logic result8 : int

logic v5 : int

logic result9 : int

logic x5 : int

logic result10 : int

logic v6 : int

logic v7 : int

logic x6 : int

logic v8 : int

logic x7 : int

logic v9 : int

logic x8 : int

logic v10 : int

logic x9 : int

logic v11 : int

logic x10 : int

logic v12 : int

logic x11 : int

logic v13 : int

logic x12 : int

logic v14 : int

logic x13 : int

logic v15 : int

logic x14 : int

logic v16 : int

logic x15 : int

logic result11 : int

logic loopframe__get__result1 : int

logic loopframe__get__result2 : int

logic loopframe__get__result3 : int

logic v17 : int

logic x16 : int

logic loopframe__get__result4 : int

logic v18 : int

logic x17 : int

logic loopframe__get__result5 : int

axiom H : (result = v)

axiom H1 : (v1 = 0)

axiom H2 : in_range1(v1)

axiom H3 : (((((result1 = x) and (x1 = 1)) and (((not ((a[x1]) = true)) and
  (v2 = v1)) and (((x1 = result3) and (x2 = 2)) and
  (((not ((a[x2]) = true)) and (v3 = v2)) and (((x2 = result5) and
  (x3 = 3)) and (((not ((a[x3]) = true)) and (v4 = v3)) and
  (((x3 = result7) and (x4 = 4)) and (((not ((a[x4]) = true)) and
  (v5 = v4)) and (((x4 = result9) and (x5 = 5)) and
  ((not ((a[x5]) = true)) and (v6 = v5))))))))))) and (((x14 = x5) and
  (v15 = v6)) and ((x15 = x5) and (v16 = v6)))) or (((temp___156 = v1) and
  (((result1 = x) and (x1 = 1)) and (((((x12 = x1) and (v13 = v2)) and
  ((x13 = x1) and (v14 = v2))) and (((a[x1]) = true) and ((v1 = result2) and
  (v2 = x1)))) or (((not ((a[x1]) = true)) and (v2 = v1)) and
  ((((x12 = x10) and (v13 = v11)) and ((x13 = x11) and (v14 = v12))) and
  (((x1 = result3) and (x2 = 2)) and (((((x2 = x10) and (v3 = v11)) and
  ((x11 = x2) and (v12 = v3))) and (((a[x2]) = true) and ((v2 = result4) and
  (v3 = x2)))) or (((not ((a[x2]) = true)) and (v3 = v2)) and
  ((((x10 = x8) and (v11 = v9)) and ((x11 = x9) and (v12 = v10))) and
  (((x2 = result5) and (x3 = 3)) and (((((x3 = x8) and (v4 = v9)) and
  ((x9 = x3) and (v10 = v4))) and (((a[x3]) = true) and ((v3 = result6) and
  (v4 = x3)))) or (((not ((a[x3]) = true)) and (v4 = v3)) and
  ((((x8 = x6) and (v9 = v7)) and ((x9 = x7) and (v10 = v8))) and
  (((x3 = result7) and (x4 = 4)) and (((((x4 = x6) and (v5 = v7)) and
  ((x7 = x4) and (v8 = v5))) and (((a[x4]) = true) and ((v4 = result8) and
  (v5 = x4)))) or (((not ((a[x4]) = true)) and (v5 = v4)) and
  ((((x5 = x6) and (v6 = v7)) and ((x7 = x5) and (v8 = v6))) and
  (((x4 = result9) and (x5 = 5)) and (((a[x5]) = true) and
  ((v5 = result10) and (v6 = x5))))))))))))))))))))) and (((x14 = x12) and
  (v15 = v13)) and ((x15 = x13) and (v16 = v14)))))

axiom H4 : (loopframe__get__result2 = loopframe__get__result1)

axiom H5 : (loopframe__get__result3 = loopframe__get__result1)

axiom H6 : (result11 = loopframe__get__result)

axiom H7 : (loopframe__get__result1 = v15)

axiom H8 : (loopframe__get__result4 = loopframe__get__result2)

axiom H9 : (x16 = x14)

axiom H10 : (v17 = v15)

axiom H11 : (loopframe__get__result5 = loopframe__get__result3)

axiom H12 : (x17 = x15)

axiom H13 : (v18 = v16)

axiom H14 : (not (loopframe__get__result4 = 0))

 (* File "loopframe.ads", line 5, characters 0-0 *)
goal WP_parameter_def : (1 <= loopframe__get__result4)
