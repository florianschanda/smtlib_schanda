(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 100)) (in_range2 temp___expr_142)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range3 f) (=> (in_range3 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range3 low) (and (in_range3 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(define-fun dynamic_invariant1 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property 1 100 (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant1 a true true true) (dynamic_invariant i true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep (select (to_array a) k)) (to_rep (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep (select (to_array a) (+ k 1))) (to_rep (select (to_array result) k))))))))) (dynamic_invariant1 result true false true)))) :pattern ((remove a i))))))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep (select (to_array a) ia)) (to_rep (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ia Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (integer integer) Bool)
(declare-const dummy4 integer)
(declare-datatypes () ((t18b__ref (mk_t18b__ref (t18b__content integer)))))
(define-fun t18b__ref___projection ((a1 t18b__ref)) integer (t18b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_15)))
(declare-const ib Int)
(declare-const perm__get_witness__result Int)
(declare-const ib1 Int)
(declare-const o (Array Int natural))
(declare-const o1 t)
(declare-const o2 Int)
(declare-const o3 (Array Int natural))
(declare-const o4 t)
(declare-const o5 Int)
(declare-const o6 natural)
(declare-const o7 Int)
(declare-const o8 natural)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const temp___584 Int)
(declare-const temp___585 Int)
(declare-const temp___583 Int)
(declare-const o11 (Array Int natural))
(declare-const o12 t)
(declare-const o13 Int)
(declare-const o14 (Array Int natural))
(declare-const o15 t)
(declare-const o16 Int)
(declare-const o17 natural)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const kb Int)
(declare-const o20 (Array Int natural))
(declare-const o21 t)
(declare-const o22 Int)
(declare-const o23 (Array Int natural))
(declare-const o24 t)
(declare-const o25 Int)
(declare-const o26 natural)
(declare-const o27 Int)
(declare-const o28 natural)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 (Array Int natural))
(declare-const o32 t)
(declare-const o33 Int)
(declare-const o34 (Array Int natural))
(declare-const o35 t)
(declare-const o36 Int)
(declare-const o37 natural)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 (Array Int natural))
(declare-const o41 t)
(declare-const o42 (Array Int natural))
(declare-const o43 t)
(declare-const o44 Int)
(declare-const o45 natural)
(declare-const o46 Int)
(declare-const o47 natural)
(declare-const o48 Int)
(declare-const o49 Int)
(declare-const perm__get_witness__result1 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Int)
(declare-const ib2 Int)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Int)
(declare-const perm__get_witness__result2 Int)
(declare-const ib3 Int)
(declare-const perm__get_witness__result3 Int)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const ib4 Int)
(declare-const result9 Bool)
(declare-const result10 Bool)
(declare-const result11 Int)
(declare-const perm__get_witness__result4 Int)
(declare-const ib5 Int)
(declare-const perm__get_witness__result5 Int)
(declare-const ib6 Int)
(declare-const perm__get_witness__result6 Int)
(declare-const ib7 Int)
(declare-const perm__get_witness__result7 Int)
(declare-const ib8 Int)
(declare-const perm__get_witness__result8 Int)
(declare-const ib9 Int)
(declare-const perm__get_witness__result9 int__ref)
(declare-const ib10 Int)
(declare-const perm__get_witness__result10 Int)
(declare-const ib11 int__ref)
(declare-const perm__get_witness__result11 int__ref)
(declare-const ib12 Int)
(declare-const perm__get_witness__result12 Int)
(declare-const ib13 int__ref)
(declare-const perm__get_witness__result13 int__ref)
(declare-const ib14 Int)
(declare-const perm__get_witness__result14 Int)
(declare-const ib15 int__ref)
(declare-const perm__get_witness__result15 int__ref)
(declare-const ib16 Int)
(declare-const perm__get_witness__result16 Int)
(declare-const result12 Bool)
(assert (dynamic_invariant1 a true false true))
(assert (dynamic_invariant1 b true false true))
(assert (in_range2 ia))
(assert (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (and (<= (to_rep1 (first (rt a))) ia) (<= ia (to_rep1 (last (rt a))))) (exists ((ib17 Int)) (and (and (<= (to_rep1 (first (rt b))) ib17) (<= ib17 (to_rep1 (last (rt b))))) (and (= (to_rep (select (elts a) ia)) (to_rep (select (elts b) ib17))) (= (is_perm (remove a ia) (remove b ib17)) true))))))))
(assert (= (mk_int__ref result3) (mk_int__ref ib)))
(assert (= ib2 (to_rep1 (first (rt b)))))
(assert (<= (to_rep1 (first (rt b))) ib2))
(assert (<= ib2 (to_rep1 (last (rt b)))))
(assert (and (<= (to_rep1 (first (rt a))) ia) (<= ia (to_rep1 (last (rt a))))))
(assert (= o16 ia))
(assert (= o17 (select (elts a) o16)))
(assert (= o18 (to_rep o17)))
(assert (= result5 (ite (= o18 (to_rep (select (elts b) ib2))) true false)))
(assert (=> (= result5 true) (and (= o13 ib2) (in_range2 ib2))))
(assert (=> (= result5 true) (and (= (mk___t o14 o15) (remove b o13)) (and (dynamic_invariant1 (mk___t o14 o15) true false true) (and (= (invariant__ (mk___t o14 o15)) true) (and (= (to_rep1 (last o15)) (- (to_rep1 (last (rt b))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- o13 1))) (= (to_rep (select (elts b) k)) (to_rep (select o14 k))))) (and (forall ((k Int)) (=> (and (<= (+ o13 1) k) (<= k (to_rep1 (last (rt b))))) (= (to_rep (select (elts b) k)) (to_rep (select o14 (- k 1)))))) (forall ((k Int)) (=> (and (<= o13 k) (<= k (- (to_rep1 (last (rt b))) 1))) (= (to_rep (select (elts b) (+ k 1))) (to_rep (select o14 k)))))))))))))
(assert (=> (= result5 true) (and (= (mk___t o11 o12) (remove a ia)) (and (dynamic_invariant1 (mk___t o11 o12) true false true) (and (= (invariant__ (mk___t o11 o12)) true) (and (= (to_rep1 (last o12)) (- (to_rep1 (last (rt a))) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- ia 1))) (= (to_rep (select (elts a) k)) (to_rep (select o11 k))))) (and (forall ((k Int)) (=> (and (<= (+ ia 1) k) (<= k (to_rep1 (last (rt a))))) (= (to_rep (select (elts a) k)) (to_rep (select o11 (- k 1)))))) (forall ((k Int)) (=> (and (<= ia k) (<= k (- (to_rep1 (last (rt a))) 1))) (= (to_rep (select (elts a) (+ k 1))) (to_rep (select o11 k)))))))))))))
(assert (=> (= result5 true) (and (= result4 (is_perm (mk___t o11 o12) (mk___t o14 o15))) (= (= result4 true) (or (and (= (length (mk___t o11 o12)) 0) (= (length (mk___t o14 o15)) 0)) (exists ((ia1 Int)) (and (and (<= (to_rep1 (first o12)) ia1) (<= ia1 (to_rep1 (last o12)))) (exists ((ib17 Int)) (and (and (<= (to_rep1 (first o15)) ib17) (<= ib17 (to_rep1 (last o15)))) (and (= (to_rep (select o11 ia1)) (to_rep (select o14 ib17))) (= (is_perm (remove (mk___t o11 o12) ia1) (remove (mk___t o14 o15) ib17)) true)))))))))))
(assert (=> (not (= result5 true)) (= result4 false)))
(assert (not (= result4 true)))
(assert (= perm__get_witness__result2 perm__get_witness__result))
(assert (= perm__get_witness__result2 perm__get_witness__result1))
(assert (forall ((kb1 Int)) (=> (and (<= 1 kb1) (<= kb1 ib3)) (not (and (= (to_rep (select (elts a) ia)) (to_rep (select (elts b) kb1))) (= (is_perm (remove a ia) (remove b kb1)) true))))))
(assert (and (=> (<= (to_rep1 (first (rt b))) (to_rep1 (last (rt b)))) (dynamic_property1 (to_rep1 (first (rt b))) (to_rep1 (last (rt b))) ib3)) (and (<= (to_rep1 (first (rt b))) ib3) (<= ib3 (to_rep1 (last (rt b)))))))
(assert (<= 1 kb))
(assert (<= kb ib3))
(assert (and (<= (to_rep1 (first (rt b))) kb) (<= kb (to_rep1 (last (rt b))))))
(assert (= o27 kb))
(assert (= o28 (select (elts b) o27)))
(assert (= o29 (to_rep o28)))
(assert (not (<= (to_rep1 (first (rt a))) ia)))
(check-sat)
(exit)
