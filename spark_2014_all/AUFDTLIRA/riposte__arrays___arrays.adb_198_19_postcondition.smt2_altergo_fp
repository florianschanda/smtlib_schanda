(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)]))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)])))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)]))))))))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "arrays.adb", line 14, characters 0-0 *)
goal WP_parameter_def :
  (forall r:(int,bool) farray. forall x:int.
  forall arrays__single_char_set_broken__result:(int,bool) farray.
  forall temp___354:int. forall temp___352:(int,bool) farray.
  forall r1:(int,bool) farray. forall result:int. forall x1:int.
  forall result1:(int,bool) farray. forall r2:(int,bool) farray.
  forall r3:(int,bool) farray. forall x2:int. forall r4:(int,bool) farray.
  forall x3:int. forall r5:(int,bool) farray. forall x4:int.
  forall r6:(int,bool) farray. forall x5:int. forall r7:(int,bool) farray.
  forall x6:int. forall result2:(int,bool) farray.
  forall arrays__single_char_set_broken__result1:(int,bool) farray.
  forall arrays__single_char_set_broken__result2:(int,bool) farray.
  forall arrays__single_char_set_broken__result3:(int,bool) farray.
  forall r8:(int,bool) farray. forall x7:int.
  forall arrays__single_char_set_broken__result4:(int,bool) farray.
  forall r9:(int,bool) farray. forall x8:int.
  forall arrays__single_char_set_broken__result5:(int,bool) farray.
  (forall result3:(int,bool) farray. ((in_range1(c) and (((((({
  int__content = result } = { int__content = x }) and (x1 = 0)) and
  ((((0 <= x1) and (x1 <= 255)) and ((((temp___354 = x1) and
  ((temp___352 = r) and ((({ map__content = result1 } = { map__content = r
  }) and (((x1 = c) and (r2 = (r[x1 <- true]))) or ((not (x1 = c)) and
  (r2 = (r[x1 <- false]))))) and
  ((forall i:int. (((0 <= i) and (i <= x2)) -> (((r3[i]) = true) <->
   (i = c)))) and
  ((((forall temp___353:int. (((0 <= temp___353) and (temp___353 <= 255)) ->
     ((x2 <  temp___353) -> ((r3[temp___353]) = (temp___352[temp___353]))))) and
  ((0 <= 255) -> in_range1(x2))) and ((0 <= x2) and (x2 <= 255))) and
  (x2 = 255)))))) and (((x2 = x3) and (r3 = r4)) and ((x4 = x2) and
  (r5 = r3)))) and (((x5 = x3) and ({ map__content = r6 } = { map__content =
  r4 })) and ((x6 = x4) and (r7 = r5))))) or ((not ((0 <= x1) and
  (x1 <= 255))) and (((x1 = x5) and ({ map__content = r6 } = { map__content =
  r })) and ((x6 = x1) and (r7 = r1)))))) and
  (((arrays__single_char_set_broken__result1 = arrays__single_char_set_broken__result2) and
  (arrays__single_char_set_broken__result3 = arrays__single_char_set_broken__result1)) and
  ((result2 = arrays__single_char_set_broken__result) and
  (arrays__single_char_set_broken__result1 = r6)))) and
  (((arrays__single_char_set_broken__result4 = arrays__single_char_set_broken__result2) and
  ((x7 = x5) and (r8 = r6))) and
  ((arrays__single_char_set_broken__result5 = arrays__single_char_set_broken__result3) and
  ((x8 = x6) and (r9 = r7))))) and
  (result3 = arrays__single_char_set_broken__result4))) ->
  (forall i:int. (((0 <= i) and (i <= 255)) ->
  (((arrays__single_char_set_broken__result4[i]) = true) -> (c <  i)))))))
