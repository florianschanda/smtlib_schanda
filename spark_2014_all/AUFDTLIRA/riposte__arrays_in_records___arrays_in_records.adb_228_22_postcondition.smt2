(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 1001))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1001)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 1001)) (in_range temp___expr_166)))
(define-fun to_rep ((x index)) Int (indexqtint x))
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort value 0)
(declare-fun valueqtint (value) Int)
(assert (forall ((i value)) (and (<= (- 23) (valueqtint i)) (<= (valueqtint i) 69))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 23) x) (<= x 69)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (value value) Bool)
(declare-const dummy1 value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 23) 69)) (in_range1 temp___expr_173)))
(define-fun to_rep1 ((x value)) Int (valueqtint x))
(declare-fun of_rep1 (Int) value)
(assert (forall ((x value)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x value)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy2 (Array Int value))
(declare-const value__size Int)
(declare-fun object__size ((Array Int value)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int value)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int value)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int value))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int value) (Array Int value)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__arrays_in_records__record_with_arrays__counter index) (rec__arrays_in_records__record_with_arrays__first_array (Array Int value)) (rec__arrays_in_records__record_with_arrays__second_array (Array Int value))))))
(define-fun us_split_fields_Counter__projection ((a us_split_fields)) index (rec__arrays_in_records__record_with_arrays__counter a))
(define-fun us_split_fields_First_Array__projection ((a us_split_fields)) (Array Int value) (rec__arrays_in_records__record_with_arrays__first_array a))
(define-fun us_split_fields_Second_Array__projection ((a us_split_fields)) (Array Int value) (rec__arrays_in_records__record_with_arrays__second_array a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__arrays_in_records__record_with_arrays__counter (us_split_fields1 a))) (to_rep (rec__arrays_in_records__record_with_arrays__counter (us_split_fields1 b)))) (= (bool_eq (rec__arrays_in_records__record_with_arrays__first_array (us_split_fields1 a)) 0 1001 (rec__arrays_in_records__record_with_arrays__first_array (us_split_fields1 b)) 0 1001) true)) (= (bool_eq (rec__arrays_in_records__record_with_arrays__second_array (us_split_fields1 a)) 0 1001 (rec__arrays_in_records__record_with_arrays__second_array (us_split_fields1 b)) 0 1001) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const arrays_in_records__record_with_arrays__counter__first__bit Int)
(declare-const arrays_in_records__record_with_arrays__counter__last__bit Int)
(declare-const arrays_in_records__record_with_arrays__counter__position Int)
(assert (<= 0 arrays_in_records__record_with_arrays__counter__first__bit))
(assert (< arrays_in_records__record_with_arrays__counter__first__bit arrays_in_records__record_with_arrays__counter__last__bit))
(assert (<= 0 arrays_in_records__record_with_arrays__counter__position))
(declare-const arrays_in_records__record_with_arrays__first_array__first__bit Int)
(declare-const arrays_in_records__record_with_arrays__first_array__last__bit Int)
(declare-const arrays_in_records__record_with_arrays__first_array__position Int)
(assert (<= 0 arrays_in_records__record_with_arrays__first_array__first__bit))
(assert (< arrays_in_records__record_with_arrays__first_array__first__bit arrays_in_records__record_with_arrays__first_array__last__bit))
(assert (<= 0 arrays_in_records__record_with_arrays__first_array__position))
(declare-const arrays_in_records__record_with_arrays__second_array__first__bit Int)
(declare-const arrays_in_records__record_with_arrays__second_array__last__bit Int)
(declare-const arrays_in_records__record_with_arrays__second_array__position Int)
(assert (<= 0 arrays_in_records__record_with_arrays__second_array__first__bit))
(assert (< arrays_in_records__record_with_arrays__second_array__first__bit arrays_in_records__record_with_arrays__second_array__last__bit))
(assert (<= 0 arrays_in_records__record_with_arrays__second_array__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((record_with_arrays__ref (mk_record_with_arrays__ref (record_with_arrays__content us_rep)))))
(define-fun record_with_arrays__ref___projection ((a record_with_arrays__ref)) us_rep (record_with_arrays__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const a__split_fields index)
(declare-const a__split_fields1 (Array Int value))
(declare-const a__split_fields2 (Array Int value))
(declare-const tmp Int)
(declare-const o index)
(declare-const o1 index)
(declare-const o2 (Array Int value))
(declare-const o3 (Array Int value))
(declare-const temp___378 index)
(declare-const temp___3781 (Array Int value))
(declare-const temp___3782 (Array Int value))
(declare-const o4 value)
(declare-const o5 (Array Int value))
(declare-const o6 index)
(declare-const o7 (Array Int value))
(declare-const o8 (Array Int value))
(declare-const temp___382 index)
(declare-const temp___3821 (Array Int value))
(declare-const temp___3822 (Array Int value))
(declare-const o9 value)
(declare-const o10 (Array Int value))
(declare-const o11 index)
(declare-const o12 (Array Int value))
(declare-const o13 (Array Int value))
(declare-const temp___385 index)
(declare-const temp___3851 (Array Int value))
(declare-const temp___3852 (Array Int value))
(declare-const o14 value)
(declare-const o15 (Array Int value))
(declare-const o16 index)
(declare-const o17 (Array Int value))
(declare-const o18 (Array Int value))
(declare-const temp___388 index)
(declare-const temp___3881 (Array Int value))
(declare-const temp___3882 (Array Int value))
(declare-const result Int)
(declare-const tmp1 Int)
(declare-const result1 index)
(declare-const result2 (Array Int value))
(declare-const result3 (Array Int value))
(declare-const a__split_fields3 index)
(declare-const a__split_fields4 (Array Int value))
(declare-const a__split_fields5 (Array Int value))
(declare-const result4 index)
(declare-const result5 (Array Int value))
(declare-const result6 (Array Int value))
(declare-const a__split_fields6 us_split_fields)
(declare-const result7 us_split_fields__ref)
(declare-const a__split_fields7 us_split_fields)
(declare-const result8 us_split_fields__ref)
(declare-const a__split_fields8 us_split_fields)
(declare-const a__split_fields9 us_split_fields__ref)
(declare-const tmp2 int__ref)
(declare-const a__split_fields10 us_split_fields)
(declare-const tmp3 Int)
(assert (in_range i))
(assert (in_range j))
(assert (not (= i j)))
(assert (=> (<= (- 23) 69) (in_range1 tmp)))
(assert (= result tmp))
(assert (= tmp1 (to_rep1 (select a__split_fields1 i))))
(assert (= (to_rep o) i))
(assert (= o o1))
(assert (= a__split_fields1 o2))
(assert (= a__split_fields2 o3))
(assert (= temp___378 o1))
(assert (= temp___3781 o2))
(assert (= temp___3782 o3))
(assert (= result1 a__split_fields))
(assert (= result2 a__split_fields1))
(assert (= result3 a__split_fields2))
(assert (= temp___378 a__split_fields3))
(assert (= temp___3781 a__split_fields4))
(assert (= temp___3782 a__split_fields5))
(assert (= (to_rep1 o4) (to_rep1 (select a__split_fields4 j))))
(assert (= o5 (store a__split_fields4 i o4)))
(assert (= a__split_fields3 o6))
(assert (= o5 o7))
(assert (= a__split_fields5 o8))
(assert (= temp___382 o6))
(assert (= temp___3821 o7))
(assert (= temp___3822 o8))
(assert (= result4 a__split_fields3))
(assert (= result5 a__split_fields4))
(assert (= result6 a__split_fields5))
(assert (= a__split_fields6 (mk___split_fields temp___382 temp___3821 temp___3822)))
(assert (= (to_rep1 o9) tmp1))
(assert (= o10 (store (rec__arrays_in_records__record_with_arrays__second_array a__split_fields6) j o9)))
(assert (= (rec__arrays_in_records__record_with_arrays__counter a__split_fields6) o11))
(assert (= (rec__arrays_in_records__record_with_arrays__first_array a__split_fields6) o12))
(assert (= o10 o13))
(assert (= temp___385 o11))
(assert (= temp___3851 o12))
(assert (= temp___3852 o13))
(assert (= result7 (mk___split_fields__ref a__split_fields6)))
(assert (= a__split_fields7 (mk___split_fields temp___385 temp___3851 temp___3852)))
(assert (= (to_rep1 o14) tmp1))
(assert (= o15 (store (rec__arrays_in_records__record_with_arrays__first_array a__split_fields7) j o14)))
(assert (= (rec__arrays_in_records__record_with_arrays__counter a__split_fields7) o16))
(assert (= o15 o17))
(assert (= (rec__arrays_in_records__record_with_arrays__second_array a__split_fields7) o18))
(assert (= temp___388 o16))
(assert (= temp___3881 o17))
(assert (= temp___3882 o18))
(assert (= result8 (mk___split_fields__ref a__split_fields7)))
(assert (= a__split_fields8 (mk___split_fields temp___388 temp___3881 temp___3882)))
(assert (= tmp2 (mk_int__ref tmp1)))
(assert (= a__split_fields9 (mk___split_fields__ref a__split_fields8)))
(assert (= tmp3 tmp1))
(assert (= a__split_fields10 a__split_fields8))
(assert (not (not (= (bool_eq1 (mk___rep (us_split_fields__content a__split_fields9)) (mk___rep (mk___split_fields a__split_fields a__split_fields1 a__split_fields2))) true))))
(check-sat)
(exit)
