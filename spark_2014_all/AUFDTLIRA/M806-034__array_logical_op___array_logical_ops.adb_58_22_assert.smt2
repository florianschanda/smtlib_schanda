(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort my_boolean 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (my_boolean my_boolean) Bool)
(declare-const dummy my_boolean)
(declare-datatypes () ((my_boolean__ref (mk_my_boolean__ref (my_boolean__content my_boolean)))))
(define-fun my_boolean__ref___projection ((a my_boolean__ref)) my_boolean (my_boolean__content a))
(declare-fun to_rep (my_boolean) Int)
(declare-fun of_rep (Int) my_boolean)
(assert (forall ((x my_boolean)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x my_boolean)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int my_boolean))))))
(declare-fun slide ((Array Int my_boolean) Int Int) (Array Int my_boolean))
(assert (forall ((a (Array Int my_boolean))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int my_boolean))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int my_boolean)) (a__first Int) (a__last Int) (b (Array Int my_boolean)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int my_boolean)) (b (Array Int my_boolean))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun to_bool ((x my_boolean)) Bool (distinct (to_rep x) 0))
(define-fun of_bool ((x Bool)) my_boolean (of_rep (ite x 1 0)))
(declare-fun xorb ((Array Int my_boolean) Int Int (Array Int my_boolean) Int Int) (Array Int my_boolean))
(declare-fun andb ((Array Int my_boolean) Int Int (Array Int my_boolean) Int Int) (Array Int my_boolean))
(declare-fun orb ((Array Int my_boolean) Int Int (Array Int my_boolean) Int Int) (Array Int my_boolean))
(declare-fun notb ((Array Int my_boolean) Int Int) (Array Int my_boolean))
(assert (forall ((a (Array Int my_boolean)) (b (Array Int my_boolean))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (of_bool (or (to_bool (select a i)) (to_bool (select b (+ (- i a_first) b_first))))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int my_boolean)) (b (Array Int my_boolean))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (of_bool (and (to_bool (select a i)) (to_bool (select b (+ (- i a_first) b_first))))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int my_boolean)) (b (Array Int my_boolean))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (of_bool (xor (to_bool (select a i)) (to_bool (select b (+ (- i a_first) b_first))))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int my_boolean))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (of_bool (not (to_bool (select a i)))))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int my_boolean)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int my_boolean) (elts a))
(define-fun of_array ((a (Array Int my_boolean)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int my_boolean)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int my_boolean)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int my_boolean)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int my_boolean))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int my_boolean))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int my_boolean))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((bool_array__ref (mk_bool_array__ref (bool_array__content us_t)))))
(define-fun bool_array__ref___projection ((a bool_array__ref)) us_t (bool_array__content a))
(define-fun dynamic_invariant ((temp___expr_221 us_t) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool (=> (not (= temp___skip_constant_218 true)) (dynamic_property (- 2147483648) 2147483647 (first1 temp___expr_221) (last1 temp___expr_221))))
(declare-sort t33b 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 40)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (t33b t33b) Bool)
(declare-const dummy3 t33b)
(declare-datatypes () ((t33b__ref (mk_t33b__ref (t33b__content t33b)))))
(define-fun t33b__ref___projection ((a t33b__ref)) t33b (t33b__content a))
(declare-const y us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun array_logical_ops__test_ok5__y__aggregate_def (Int Int Int) (Array Int my_boolean))
(declare-const r5 us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(assert (= y (of_array (array_logical_ops__test_ok5__y__aggregate_def 0 1 0) 1 40)))
(define-fun dynamic_invariant2 ((temp___expr_214 Int) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool (=> (or (= temp___is_init_210 true) (<= 0 1)) (in_range1 temp___expr_214)))
(assert (forall ((temp___196 Int) (temp___197 Int) (temp___198 Int)) (let ((temp___195 (array_logical_ops__test_ok5__y__aggregate_def temp___196 temp___197 temp___198))) (=> (and (and (dynamic_invariant2 temp___196 true true true true) (dynamic_invariant2 temp___197 true true true true)) (dynamic_invariant2 temp___198 true true true true)) (forall ((temp___199 Int)) (ite (and (<= 31 temp___199) (<= temp___199 40)) (= (to_rep (select temp___195 temp___199)) temp___198) (ite (and (<= 11 temp___199) (<= temp___199 30)) (= (to_rep (select temp___195 temp___199)) temp___197) (=> (and (<= 1 temp___199) (<= temp___199 10)) (= (to_rep (select temp___195 temp___199)) temp___196)))))))))
(assert (= r5 (of_array (notb (to_array y) (first1 y) (last1 y)) (first1 y) (last1 y))))
(assert (= (mk___t (array_logical_ops__test_ok5__y__aggregate_def 0 1 0) (mk 1 40)) y))
(assert (dynamic_invariant y true false true true))
(assert (= (mk___t (notb (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))) (mk (to_rep1 (first (rt y))) (to_rep1 (last (rt y))))) r5))
(assert (dynamic_invariant r5 true false true true))
(assert (= (to_rep1 (first (rt r5))) 1))
(assert (forall ((i Int)) (=> (and (<= 1 i) (<= i 10)) (= (distinct (to_rep (select (elts r5) i)) 0) true))))
(assert (forall ((i Int)) (=> (and (<= 31 i) (<= i 40)) (= (distinct (to_rep (select (elts r5) i)) 0) true))))
(declare-const i Int)
(assert (<= (to_rep1 (first (rt r5))) i))
(assert (<= i (to_rep1 (last (rt r5)))))
(assert (not (and (<= 11 i) (<= i 30))))
(assert (not (= (distinct (to_rep (select (elts r5) i)) 0) true)))
(check-sat)
(exit)
