(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun type_invariant ((temp___155 Int)) Bool (not (= temp___155 0)))
(declare-sort t 0)
(declare-fun tqtint (t) Int)
(assert (forall ((i t)) (and (<= (- 2147483648) (tqtint i)) (<= (tqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (t t) Bool)
(declare-const dummy t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(define-fun to_rep ((x t)) Int (tqtint x))
(declare-fun of_rep (Int) t)
(assert (forall ((x t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x t)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tarr_tD1 0)
(declare-fun tarr_tD1qtint (tarr_tD1) Int)
(assert (forall ((i tarr_tD1)) (and (<= 1 (tarr_tD1qtint i)) (<= (tarr_tD1qtint i) 2))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tarr_tD1 tarr_tD1) Bool)
(declare-const dummy1 tarr_tD1)
(declare-datatypes () ((tarr_tD1__ref (mk_tarr_tD1__ref (tarr_tD1__content tarr_tD1)))))
(define-fun tarr_tD1__ref___projection ((a tarr_tD1__ref)) tarr_tD1 (tarr_tD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int t))))))
(declare-fun slide ((Array Int t) Int Int) (Array Int t))
(assert (forall ((a (Array Int t))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int t))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int t)) (a__first Int) (a__last Int) (b (Array Int t)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int t)) (b (Array Int t))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun default_initial_assumption ((temp___expr_170 (Array Int t)) (temp___skip_top_level_171 Bool)) Bool (forall ((temp___172 Int)) (=> (and (<= 1 temp___172) (<= temp___172 2)) (= (to_rep (select temp___expr_170 temp___172)) 42))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun temp_____aggregate_def_204 (Int Int) (Array Int t))
(define-fun dynamic_invariant ((temp___expr_161 Int) (temp___is_init_157 Bool) (temp___skip_constant_158 Bool) (temp___do_toplevel_159 Bool) (temp___do_typ_inv_160 Bool)) Bool (=> (or (= temp___is_init_157 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_161)))
(assert (forall ((temp___206 Int) (temp___207 Int)) (let ((temp___205 (temp_____aggregate_def_204 temp___206 temp___207))) (=> (and (dynamic_invariant temp___206 true true true true) (dynamic_invariant temp___207 true true true true)) (and (= (to_rep (select temp___205 1)) temp___206) (= (to_rep (select temp___205 2)) temp___207))))))
(declare-const x (Array Int t))
(declare-const result (Array Int t))
(declare-const x1 (Array Int t))
(declare-const x2 (Array Int t))
(declare-const x3 (Array Int t))
(assert (forall ((temp___210 Int)) (=> (and (<= 1 temp___210) (<= temp___210 2)) (type_invariant (to_rep (select x temp___210))))))
(assert (= result x))
(assert (= x1 (temp_____aggregate_def_204 (to_rep (select x 2)) (to_rep (select x 1)))))
(assert (= x1 x2))
(assert (= x3 x1))
(declare-const temp___209 Int)
(assert (<= 1 temp___209))
(assert (<= temp___209 2))
(assert (not (type_invariant (to_rep (select x2 temp___209)))))
(check-sat)
(exit)
