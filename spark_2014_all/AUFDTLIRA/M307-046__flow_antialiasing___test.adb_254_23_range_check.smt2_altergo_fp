(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t94b

predicate in_range3(x: int) = ((3 <= x) and (x <= 12))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : t94b, t94b -> bool

logic dummy5 : t94b

type t94b__ref = { t94b__content : t94b
}

function t94b__ref___projection(a: t94b__ref) : t94b = (a).t94b__content

type t96b

predicate in_range4(x: int) = ((3 <= x) and (x <= 12))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t96b, t96b -> bool

logic dummy6 : t96b

type t96b__ref = { t96b__content : t96b
}

function t96b__ref___projection(a: t96b__ref) : t96b = (a).t96b__content

type t98b

predicate in_range5(x: int) = ((3 <= x) and (x <= 12))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : t98b, t98b -> bool

logic dummy7 : t98b

type t98b__ref = { t98b__content : t98b
}

function t98b__ref___projection(a: t98b__ref) : t98b = (a).t98b__content

type t100b

predicate in_range6(x: int) = ((3 <= x) and (x <= 12))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : t100b, t100b -> bool

logic dummy8 : t100b

type t100b__ref = { t100b__content : t100b
}

function t100b__ref___projection(a: t100b__ref) : t100b = (a).t100b__content

type t104b

predicate in_range7(x: int) = ((8 <= x) and (x <= 10))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : t104b, t104b -> bool

logic dummy9 : t104b

type t104b__ref = { t104b__content : t104b
}

function t104b__ref___projection(a: t104b__ref) : t104b = (a).t104b__content

type t102b

predicate in_range8(x: int) = ((3 <= x) and (x <= 12))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : t102b, t102b -> bool

logic dummy10 : t102b

type t102b__ref = { t102b__content : t102b
}

function t102b__ref___projection(a: t102b__ref) : t102b = (a).t102b__content

logic a : (int,character) farray

logic tmp : int

logic temp___459 : (int,character) farray

logic test__op_string_char__x__compl : (int,character) farray

logic o : int

logic o1 : character

logic o2 : int

logic test__op_string_char__y : int

logic o3 : integer

logic o4 : integer

logic o5 : (int,character) farray

logic o6 : character

logic o7 : int

logic o8 : (int,character) farray

logic temp___467 : (int,character) farray

logic test__op_string_char__x__compl1 : (int,character) farray

logic o9 : int

logic o10 : character

logic o11 : int

logic test__op_string_char__y1 : int

logic o12 : integer

logic o13 : integer

logic o14 : (int,character) farray

logic o15 : character

logic o16 : int

logic o17 : (int,character) farray

logic temp___475 : (int,character) farray

logic test__op_string_char__x__compl2 : (int,character) farray

logic o18 : int

logic o19 : character

logic o20 : int

logic test__op_string_char__y2 : int

logic o21 : integer

logic o22 : integer

logic o23 : (int,character) farray

logic o24 : character

logic o25 : int

logic o26 : (int,character) farray

logic temp___483 : (int,character) farray

logic test__op_string_char__x__compl3 : (int,character) farray

logic o27 : integer

logic o28 : integer

logic o29 : (int,character) farray

logic temp___491 : (int,character) farray

logic temp___492 : (int,character) farray

logic test__op_string_char__x__compl4 : (int,character) farray

logic o30 : int

logic o31 : character

logic o32 : int

logic test__op_string_char__y3 : int

logic o33 : integer

logic o34 : integer

logic temp___501 : (int,character) farray

logic o35 : (int,character) farray

logic o36 : character

logic result : int

logic tmp1 : int

logic test__op_string_char__y4 : int

logic test__op_string_char__x : (int,character) farray

logic result1 : (int,character) farray

logic a1 : (int,character) farray

logic result2 : (int,character) farray

logic a2 : (int,character) farray

logic test__op_string_char__y5 : int

logic test__op_string_char__x1 : (int,character) farray

logic result3 : (int,character) farray

logic a3 : (int,character) farray

logic result4 : (int,character) farray

logic a4 : (int,character) farray

logic test__op_string_char__y6 : int

logic test__op_string_char__x2 : (int,character) farray

logic result5 : (int,character) farray

logic a5 : (int,character) farray

logic result6 : (int,character) farray

logic a6 : (int,character) farray

logic tmp2 : int

logic test__op_string_char__x3 : (int,character) farray

logic result7 : (int,character) farray

logic a7 : (int,character) farray

logic test__op_string_char__y7 : int

logic test__op_string_char__x4 : (int,character) farray

logic result8 : (int,character) farray

logic a8 : (int,character) farray

axiom H : dynamic_property(1, 2147483647, to_rep1(a__first),
  to_rep1(a__last))

axiom H1 : (result = tmp)

axiom H2 : (tmp1 = 120)

axiom H3 : in_range2(tmp1)

axiom H4 : ((3 <= 12) -> (((to_rep1(a__first) <= 3) and
  (3 <= to_rep1(a__last))) and ((to_rep1(a__first) <= 12) and
  (12 <= to_rep1(a__last)))))

axiom H5 : (temp___459 = a)

axiom H6 : (test__op_string_char__x__compl = temp___459)

axiom H7 : ((to_rep1(a__first) <= 2) and (2 <= to_rep1(a__last)))

axiom H8 : (o = 2)

axiom H9 : (o1 = (a[o]))

axiom H10 : (o2 = to_rep(o1))

axiom H11 : (o2 = test__op_string_char__y)

axiom H12 : (to_rep1(o4) = 12)

axiom H13 : (to_rep1(o3) = 3)

axiom H14 : in_range2(test__op_string_char__y4)

axiom H15 :
  (forall temp___462:int. ((((3 <= temp___462) and (temp___462 <= 12)) ->
  ((o5[temp___462]) = (slide(test__op_string_char__x, to_rep1(first(mk(3,
  12))), 3)[temp___462]))) and ((not ((3 <= temp___462) and
  (temp___462 <= 12))) -> ((o5[temp___462]) = (a[temp___462])))))

axiom H16 : (result1 = a)

axiom H17 : (a1 = o5)

axiom H18 : (to_rep(o6) = test__op_string_char__y4)

axiom H19 : ((to_rep1(a__first) <= 2) and (2 <= to_rep1(a__last)))

axiom H20 : (o7 = 2)

axiom H21 : (o8 = (a1[o7 <- o6]))

axiom H22 : (result2 = a1)

axiom H23 : (a2 = o8)

axiom H24 : ((3 <= 12) -> (((to_rep1(a__first) <= 3) and
  (3 <= to_rep1(a__last))) and ((to_rep1(a__first) <= 12) and
  (12 <= to_rep1(a__last)))))

axiom H25 : (temp___467 = a2)

axiom H26 : (test__op_string_char__x__compl1 = temp___467)

axiom H27 : ((to_rep1(a__first) <= 5) and (5 <= to_rep1(a__last)))

axiom H28 : (o9 = 5)

axiom H29 : (o10 = (a2[o9]))

axiom H30 : (o11 = to_rep(o10))

axiom H31 : (o11 = test__op_string_char__y1)

axiom H32 : (to_rep1(o13) = 12)

axiom H33 : (to_rep1(o12) = 3)

axiom H34 : in_range2(test__op_string_char__y5)

axiom H35 :
  (forall temp___470:int. ((((3 <= temp___470) and (temp___470 <= 12)) ->
  ((o14[temp___470]) = (slide(test__op_string_char__x1, to_rep1(first(mk(3,
  12))), 3)[temp___470]))) and ((not ((3 <= temp___470) and
  (temp___470 <= 12))) -> ((o14[temp___470]) = (a2[temp___470])))))

axiom H36 : (a2 = result3)

axiom H37 : (a3 = o14)

axiom H38 : (to_rep(o15) = test__op_string_char__y5)

axiom H39 : ((to_rep1(a__first) <= 5) and (5 <= to_rep1(a__last)))

axiom H40 : (o16 = 5)

axiom H41 : (o17 = (a3[o16 <- o15]))

axiom H42 : (result4 = a3)

axiom H43 : (a4 = o17)

axiom H44 : ((3 <= 12) -> (((to_rep1(a__first) <= 3) and
  (3 <= to_rep1(a__last))) and ((to_rep1(a__first) <= 12) and
  (12 <= to_rep1(a__last)))))

axiom H45 : (temp___475 = a4)

axiom H46 : (test__op_string_char__x__compl2 = temp___475)

axiom H47 : ((to_rep1(a__first) <= 20) and (20 <= to_rep1(a__last)))

axiom H48 : (o18 = 20)

axiom H49 : (o19 = (a4[o18]))

axiom H50 : (o20 = to_rep(o19))

axiom H51 : (o20 = test__op_string_char__y2)

axiom H52 : (to_rep1(o22) = 12)

axiom H53 : (to_rep1(o21) = 3)

axiom H54 : in_range2(test__op_string_char__y6)

axiom H55 :
  (forall temp___478:int. ((((3 <= temp___478) and (temp___478 <= 12)) ->
  ((o23[temp___478]) = (slide(test__op_string_char__x2, to_rep1(first(mk(3,
  12))), 3)[temp___478]))) and ((not ((3 <= temp___478) and
  (temp___478 <= 12))) -> ((o23[temp___478]) = (a4[temp___478])))))

axiom H56 : (a4 = result5)

axiom H57 : (a5 = o23)

axiom H58 : (to_rep(o24) = test__op_string_char__y6)

axiom H59 : ((to_rep1(a__first) <= 20) and (20 <= to_rep1(a__last)))

axiom H60 : (o25 = 20)

axiom H61 : (o26 = (a5[o25 <- o24]))

axiom H62 : (result6 = a5)

axiom H63 : (a6 = o26)

axiom H64 : (3 <= 12)

 (* File "test.adb", line 241, characters 0-0 *)
goal WP_parameter_def : (to_rep1(a__first) <= 3)
