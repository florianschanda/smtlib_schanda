(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : extended_index_type, extended_index_type -> bool

logic dummy1 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type position_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : position_type, position_type -> bool

logic dummy2 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type direction

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : direction, direction -> bool

logic dummy3 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq6 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : count_type, count_type -> bool

logic dummy5 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq4(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range5(length(container))))

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((user_eq4(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((user_eq4(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep

logic dummy7 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq9 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq8((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq8((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq9(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq8((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic oeq : (int,us_rep1) farray, (int,us_rep1) farray -> bool

logic oeq__function_guard1 : bool, (int,us_rep1) farray,
  (int,us_rep1) farray -> prop

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall m1:(int,us_rep1) farray. forall m2:(int,us_rep1) farray [oeq(m1,
  m2)]. (((oeq(m1, m2) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((((bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((m1[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((m2[i])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
  (not (bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = false))) and
  (((((m1[i])).us_split_fields1).rec__tree_model__path_type__k = true) <->
  ((((m2[i])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and
   (n <= (0 + length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((m1[i])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((m2[i])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (((((m1[i])).us_split_fields1).rec__tree_model__path_type__k = true) <->
   ((((m2[i])).us_split_fields1).rec__tree_model__path_type__k = true))))) ->
  (oeq(m1, m2) = true))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : extended_index_type

logic dummy9 : extended_index_type

logic dummy10 : extended_index_type

logic dummy11 : position_type

type cell__ref = { cell__content : us_rep2
}

function cell__ref___projection(a: cell__ref) : us_rep2 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq11 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy12 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep2) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep2) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep3, us_rep3 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq12(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__size4({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy13 : extended_index_type

logic dummy14 : (int,us_rep2) farray

type forest__ref = { forest__content : us_rep3
}

function forest__ref___projection(a: forest__ref) : us_rep3 =
  (a).forest__content

logic size : us_rep3 -> int

logic size__function_guard : int, us_rep3 -> prop

logic tree_structure : us_rep3 -> bool

logic tree_structure__function_guard : bool, us_rep3 -> prop

logic model__ : us_rep3, int -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep3, int -> prop

logic valid_root : us_rep3, int -> bool

logic valid_root__function_guard : bool, us_rep3, int -> prop

logic parent : us_rep3, int -> int

logic parent__function_guard : int, us_rep3, int -> prop

logic position : us_rep3, int -> int

logic position__function_guard : int, us_rep3, int -> prop

axiom model____post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int [model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. (((in_range1(root) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) -> (is_add((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) -> (length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic root : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r299b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type tcount_typeB

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : tcount_typeB, tcount_typeB -> bool

logic dummy15 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

logic to_rep2 : tcount_typeB -> int

logic of_rep2 : int -> tcount_typeB

axiom inversion_axiom2 :
  (forall x:tcount_typeB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tcount_typeB [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : tcount_typeB, tcount_typeB -> bool

logic dummy16 : tcount_typeB

type t300b__ref = { t300b__content : tcount_typeB
}

function t300b__ref___projection(a: t300b__ref) : tcount_typeB =
  (a).t300b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom size__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range2(size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom size__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. (size({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = to_rep(f)))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((in_range1(i) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) -> ((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) <  i) -> (not (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true))))))

axiom valid_root__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) <-> ((i <= to_rep(f)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 2)))))

axiom parent__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. ((in_range1(i) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true)) -> ((((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) and in_range2(parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i))))))

axiom parent__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. (in_range1(i) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  i) = to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)))))

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((in_range1(i) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)) and (not (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range4(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom position__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (in_range1(i) -> (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position)))))

axiom tree_structure__post_axiom : true

axiom tree_structure__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray
  [tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) <->
  (((((((((forall i:int. ((((to_rep(f) + 1) <= i) and (i <= 100)) ->
          (bool_eq10((f1[i]), { us_split_fields3 = {
          rec__binary_trees__cell__left = of_rep(0);
          rec__binary_trees__cell__right = of_rep(0);
          rec__binary_trees__cell__parent = of_rep(0);
          rec__binary_trees__cell__position = of_rep1(2) } }) = true))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) <= to_rep(f)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left) <= to_rep(f)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right)) and
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right) <= to_rep(f)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 2) ->
  (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left) = 0)) ->
  ((to_rep1((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left)])).us_split_fields3).rec__binary_trees__cell__position) = 0) and
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__left)])).us_split_fields3).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right) = 0)) ->
  ((to_rep1((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right)])).us_split_fields3).rec__binary_trees__cell__position) = 1) and
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__right)])).us_split_fields3).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 0)) ->
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields3).rec__binary_trees__cell__left) = i))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((f1[i])).us_split_fields3).rec__binary_trees__cell__position) = 1)) ->
  (to_rep((((f1[to_rep((((f1[i])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields3).rec__binary_trees__cell__right) = i)))))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type extended_index

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy17 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type element_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : element_type, element_type -> bool

logic dummy18 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position1:int [get(container, position1)].
  ((in_range7(position1) and ((1 <= position1) and
  (position1 <= (0 + length(container))))) -> in_range8(get(container,
  position1)))))

logic f__split_fields : extended_index_type

logic f__split_fields1 : (int,us_rep2) farray

logic v : int

logic f_old__split_fields : extended_index_type

logic f_old__split_fields1 : (int,us_rep2) farray

logic n : int

logic ki : int

logic r : int

logic j : int

logic j1 : int

logic temp___1838 : (int,us_rep1) farray

logic o : int

logic o1 : us_rep

logic o2 : bool

logic o3 : us_rep

logic o4 : bool

logic temp___1842 : (int,us_rep1) farray

logic o5 : us_rep

logic o6 : bool

logic o7 : us_rep

logic o8 : bool

logic o9 : bool

logic temp___1757 : int

logic i : int

logic temp___1760 : (int,us_rep1) farray

logic o10 : us_rep

logic o11 : bool

logic o12 : us_rep

logic o13 : bool

logic o14 : us_rep

logic o15 : int

logic temp___1759 : (int,us_rep1) farray

logic o16 : us_rep

logic o17 : bool

logic o18 : us_rep

logic o19 : bool

logic i1 : int

logic temp___1770 : (int,us_rep1) farray

logic o20 : us_rep

logic o21 : bool

logic o22 : us_rep

logic o23 : bool

logic o24 : us_rep

logic o25 : int

logic temp___1769 : (int,us_rep1) farray

logic o26 : us_rep

logic o27 : bool

logic o28 : us_rep

logic o29 : bool

logic temp___1768 : (int,us_rep1) farray

logic o30 : us_rep

logic o31 : bool

logic o32 : us_rep

logic o33 : bool

logic o34 : us_rep

logic i2 : int

logic temp___1781 : (int,us_rep1) farray

logic o35 : us_rep

logic o36 : bool

logic o37 : us_rep

logic o38 : bool

logic o39 : us_rep

logic o40 : int

logic temp___1780 : (int,us_rep1) farray

logic o41 : us_rep

logic o42 : bool

logic o43 : us_rep

logic o44 : bool

logic o45 : bool

logic temp___1742 : int

logic temp___1732 : (int,us_rep1) farray

logic o46 : us_rep

logic o47 : bool

logic o48 : us_rep

logic o49 : bool

logic o50 : us_rep

logic o51 : int

logic temp___1731 : (int,us_rep1) farray

logic o52 : us_rep

logic o53 : bool

logic o54 : us_rep

logic o55 : bool

logic temp___1733 : (int,us_rep1) farray

logic o56 : int

logic o57 : us_rep

logic o58 : bool

logic o59 : us_rep

logic o60 : bool

logic o61 : us_rep

logic temp___1736 : (int,us_rep1) farray

logic o62 : int

logic o63 : us_rep

logic o64 : bool

logic o65 : us_rep

logic o66 : bool

logic o67 : us_rep

logic temp___1739 : (int,us_rep1) farray

logic o68 : us_rep

logic o69 : bool

logic o70 : us_rep

logic o71 : bool

logic o72 : us_rep

logic temp___1740 : (int,us_rep1) farray

logic o73 : us_rep

logic o74 : bool

logic o75 : us_rep

logic o76 : bool

logic o77 : us_rep

logic o78 : int

logic i3 : int

logic temp___1746 : (int,us_rep1) farray

logic o79 : int

logic o80 : us_rep

logic o81 : bool

logic o82 : us_rep

logic o83 : bool

logic o84 : us_rep

logic o85 : int

logic temp___1745 : (int,us_rep1) farray

logic o86 : int

logic o87 : us_rep

logic o88 : bool

logic o89 : us_rep

logic o90 : bool

logic temp___1743 : (int,us_rep1) farray

logic temp___1744 : (int,us_rep1) farray

logic o91 : int

logic o92 : us_rep

logic o93 : bool

logic o94 : us_rep

logic o95 : bool

logic o96 : us_rep

logic temp___17321 : (int,us_rep1) farray

logic o97 : us_rep

logic o98 : bool

logic o99 : us_rep

logic o100 : bool

logic o101 : us_rep

logic o102 : int

logic temp___17311 : (int,us_rep1) farray

logic o103 : us_rep

logic o104 : bool

logic o105 : us_rep

logic o106 : bool

logic temp___17331 : (int,us_rep1) farray

logic o107 : int

logic o108 : us_rep

logic o109 : bool

logic o110 : us_rep

logic o111 : bool

logic o112 : us_rep

logic temp___17361 : (int,us_rep1) farray

logic o113 : int

logic o114 : us_rep

logic o115 : bool

logic o116 : us_rep

logic o117 : bool

logic o118 : us_rep

logic temp___17391 : (int,us_rep1) farray

logic o119 : us_rep

logic o120 : bool

logic o121 : us_rep

logic o122 : bool

logic o123 : us_rep

logic temp___17401 : (int,us_rep1) farray

logic o124 : us_rep

logic o125 : bool

logic o126 : us_rep

logic o127 : bool

logic o128 : us_rep

logic o129 : int

logic temp___1791 : int

logic p : int

logic o130 : int

logic o131 : extended_index_type

logic o132 : extended_index_type

logic o133 : extended_index_type

logic o134 : position_type

logic o135 : extended_index_type

logic o136 : extended_index_type

logic o137 : extended_index_type

logic o138 : position_type

logic o139 : position_type

logic o140 : int

logic o141 : bool

logic o142 : bool

logic o143 : int

logic o144 : int

logic o145 : int

logic o146 : int

logic o147 : (int,us_rep1) farray

logic r1 : int

logic o148 : int

logic o149 : extended_index_type

logic o150 : extended_index_type

logic o151 : extended_index_type

logic o152 : position_type

logic o153 : extended_index_type

logic o154 : extended_index_type

logic o155 : extended_index_type

logic o156 : position_type

logic o157 : position_type

logic o158 : int

logic o159 : bool

logic o160 : bool

logic o161 : int

logic o162 : int

logic o163 : int

logic o164 : int

logic o165 : (int,us_rep1) farray

logic i4 : int

logic temp___1801 : (int,us_rep1) farray

logic o166 : us_rep

logic o167 : bool

logic o168 : us_rep

logic o169 : bool

logic temp___1800 : (int,us_rep1) farray

logic o170 : us_rep

logic o171 : bool

logic o172 : us_rep

logic o173 : bool

logic o174 : us_rep

logic i5 : int

logic temp___1806 : (int,us_rep1) farray

logic o175 : us_rep

logic o176 : bool

logic o177 : us_rep

logic o178 : bool

logic o179 : bool

logic temp___1809 : (int,us_rep1) farray

logic o180 : us_rep

logic o181 : bool

logic o182 : us_rep

logic o183 : bool

logic i6 : int

logic temp___1811 : (int,us_rep1) farray

logic o184 : us_rep

logic o185 : bool

logic o186 : us_rep

logic o187 : bool

logic ki1 : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : int

logic n1 : int

logic n2 : int

logic ki2 : int

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic result10 : bool

logic result11 : bool

logic result12 : int

logic ki3 : int

logic result13 : bool

logic result14 : bool

logic ki4 : int

logic result15 : bool

logic result16 : bool

logic result17 : int

logic ki5 : int

logic result18 : bool

logic result19 : bool

logic ki6 : int

logic ki7 : int

logic ki8 : int

logic ki9 : int

logic ki10 : int

logic ki11 : int

logic result20 : int

logic n3 : int

logic n4 : int

logic ki12 : int

logic n5 : int

logic ki13 : int

logic n6 : int

logic ki14 : int

logic n7 : int

logic ki15 : int

logic n8 : int

logic ki16 : int

logic n9 : int

logic ki17 : int

logic result21 : int

logic r2 : int

logic r3 : int

logic result22 : bool

logic result23 : int

logic r4 : int

logic r5 : int

logic r6 : int

logic r7 : int

logic r8 : int

logic r9 : int

logic r10 : int

logic r11 : int

logic r12 : int

logic n10 : int

logic ki18 : int

logic r13 : int

logic n11 : int

logic ki19 : int

logic r14 : int

logic result24 : bool

logic result25 : bool

logic result26 : bool

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic result30 : bool

logic result31 : bool

axiom H : in_range1(root)

axiom H1 : in_range1(v)

axiom H2 : ((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  (tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 }
  }) = true))

axiom H3 :
  ((to_rep1((((f_old__split_fields1[root])).us_split_fields3).rec__binary_trees__cell__position) = 2) and
  (((1 <= root) and (root <= to_rep(f_old__split_fields))) and
  ((not (v = 0)) and
  ((to_rep(f_old__split_fields) <= to_rep(f__split_fields)) and
  ((not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[v])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  ((not (to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__parent) = 0)) and
  (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  },
  root)[to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__parent)])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__left) = 0) and
  ((to_rep((((f__split_fields1[v])).us_split_fields3).rec__binary_trees__cell__right) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = v)) ->
   (to_rep((((f__split_fields1[i7])).us_split_fields3).rec__binary_trees__cell__parent) = to_rep((((f_old__split_fields1[i7])).us_split_fields3).rec__binary_trees__cell__parent))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = v)) ->
   (to_rep1((((f__split_fields1[i7])).us_split_fields3).rec__binary_trees__cell__position) = to_rep1((((f_old__split_fields1[i7])).us_split_fields3).rec__binary_trees__cell__position))))) and
  ((forall j2:int. (((1 <= j2) and (j2 <= 100)) -> ((not ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[j2])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   (to_rep((((f__split_fields1[j2])).us_split_fields3).rec__binary_trees__cell__left) = to_rep((((f_old__split_fields1[j2])).us_split_fields3).rec__binary_trees__cell__left))))) and
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) -> ((not ((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[j2])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (to_rep((((f__split_fields1[j2])).us_split_fields3).rec__binary_trees__cell__right) = to_rep((((f_old__split_fields1[j2])).us_split_fields3).rec__binary_trees__cell__right)))))))))))))))))

axiom H4 : (result5 = n)

axiom H5 : (n1 = 1)

axiom H6 : (((1 <= n1) and (n1 <= 100)) -> (temp___1757 = n1))

axiom H7 : (((1 <= n1) and (n1 <= 100)) ->
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a) <  n2)) ->
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true)))))

axiom H8 : (((1 <= n1) and (n1 <= 100)) ->
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a) <  n2)) ->
  (((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n12:int. (((1 <= n12) and (n12 <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a, n12))))) and
  (not (bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))))

axiom H9 : (((1 <= n1) and (n1 <= 100)) ->
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> (((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a) <  n2)) and
  (not (i7 = v))) -> ((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true)))))

axiom H10 : (((1 <= n1) and (n1 <= 100)) -> (((1 <= 100) ->
  in_range1(n2)) and ((1 <= n2) and (n2 <= 100))))

axiom H11 : (((1 <= n1) and (n1 <= 100)) -> (result12 = ki2))

axiom H12 : (((1 <= n1) and (n1 <= 100)) -> (ki3 = 1))

axiom H13 : (((1 <= n1) and (n1 <= 100)) -> (((1 <= ki3) and (ki3 <= 100)) ->
  (((temp___1742 = ki3) and ((((((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  ((temp___1731 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1731[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1731[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1731[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1731[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1731[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1731[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i7),
   (((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1731[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1731[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1731[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1731[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o52; rec__tree_model__path_type__k = o53 }
  } = (temp___1731[ki3]))) and ((o54 = o52) and (o55 = o53))) and
  (result14 = o55)) and (((result14 = true) -> (((((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  ((temp___1732 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1732[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1732[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1732[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1732[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1732[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1732[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i7),
   (((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1732[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1732[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1732[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1732[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o46; rec__tree_model__path_type__k = o47 }
  } = (temp___1732[ki3]))) and ((o48 = o46) and (o49 = o47))) and
  (o50 = o48)) and ((o51 = length(o50)) and (in_range5(o51) and
  ((0 + o51) <= 2147483647)))) and (((o51 = n2) -> (result13 = true)) and
  ((not (o51 = n2)) -> (result13 = false))))) and ((not (result14 = true)) ->
  (result13 = false)))) and ((result13 = true) ->
  (((o78 = to_rep1((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__position)) and
  in_range4(to_rep1((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__position))) and
  ((((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }) = true) and ((temp___1740 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1740[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1740[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1740[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1740[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1740[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1740[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i7),
   (((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1740[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1740[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1740[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1740[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o73; rec__tree_model__path_type__k = o74 }
  } = (temp___1740[ki3]))) and ((o75 = o73) and (o76 = o74))) and
  (o77 = o75)) and ((((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true) and
  ((temp___1739 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1739[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1739[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1739[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((temp___1739[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((temp___1739[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1739[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i7),
   (((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1739[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1739[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1739[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1739[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o68; rec__tree_model__path_type__k = o69 }
  } = (temp___1739[ki3]))) and ((o70 = o68) and (o71 = o69))) and
  (o72 = o70)) and ((((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  ((temp___1736 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1736[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1736[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1736[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1736[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, i7) = 0)) and ((((temp___1736[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1736[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, i7),
   (((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1736[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1736[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1736[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1736[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))) and
  ((((1 <= to_rep((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__parent) <= 100)) and
  (o62 = to_rep((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__parent))) and
  ({ us_split_fields1 = { rec__tree_model__path_type__a = o63;
  rec__tree_model__path_type__k = o64 } } = (temp___1736[o62])))) and
  ((o65 = o63) and (o66 = o64))) and (o67 = o65)) and ((((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true) and
  ((temp___1733 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1733[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1733[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1733[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((temp___1733[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((temp___1733[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1733[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i7),
   (((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1733[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1733[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1733[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1733[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))) and
  ((((1 <= to_rep((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__parent)) and
  (to_rep((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__parent) <= 100)) and
  (o56 = to_rep((((f__split_fields1[ki3])).us_split_fields3).rec__binary_trees__cell__parent))) and
  ({ us_split_fields1 = { rec__tree_model__path_type__a = o57;
  rec__tree_model__path_type__k = o58 } } = (temp___1733[o56])))) and
  ((o59 = o57) and (o60 = o58))) and (o61 = o59)) and
  (((bool_eq1(length(o72), length(o77)) = true) ->
  (forall n12:int. (((1 <= n12) and (n12 <= (0 + length(o72)))) -> (get(o72,
  n12) = get(o77, n12))))) and (not (bool_eq1(length(o72),
  length(o77)) = false)))))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= ki4)) -> ((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a) <= n2)) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n12:int. (((1 <= n12) and (n12 <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a,
   n12) = get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a, n12))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  ((((1 <= 100) -> in_range1(ki4)) and ((1 <= ki4) and (ki4 <= 100))) and
  (ki4 = 100))))) and ((ki8 = ki4) and (ki9 = ki4)))))

axiom H14 : (((1 <= n1) and (n1 <= 100)) -> (((1 <= ki3) and (ki3 <= 100)) ->
  (ki10 = ki8)))

axiom H15 : (((1 <= n1) and (n1 <= 100)) -> (((1 <= ki3) and (ki3 <= 100)) ->
  (ki11 = ki9)))

axiom H16 : (((1 <= n1) and (n1 <= 100)) -> ((not ((1 <= ki3) and
  (ki3 <= 100))) -> (ki10 = ki3)))

axiom H17 : (((1 <= n1) and (n1 <= 100)) -> ((not ((1 <= ki3) and
  (ki3 <= 100))) -> (ki11 = ki3)))

axiom H18 : (((1 <= n1) and (n1 <= 100)) -> (n2 = 100))

axiom H19 : (((1 <= n1) and (n1 <= 100)) -> (ki14 = ki10))

axiom H20 : (((1 <= n1) and (n1 <= 100)) -> (n6 = n2))

axiom H21 : (((1 <= n1) and (n1 <= 100)) -> (ki15 = ki11))

axiom H22 : (((1 <= n1) and (n1 <= 100)) -> (n7 = n2))

axiom H23 : (((1 <= n1) and (n1 <= 100)) -> (ki16 = ki14))

axiom H24 : (((1 <= n1) and (n1 <= 100)) -> (n8 = n6))

axiom H25 : (((1 <= n1) and (n1 <= 100)) -> (ki17 = ki15))

axiom H26 : (((1 <= n1) and (n1 <= 100)) -> (n9 = n7))

axiom H27 : ((not ((1 <= n1) and (n1 <= 100))) -> (ki16 = ki))

axiom H28 : ((not ((1 <= n1) and (n1 <= 100))) -> (n8 = n1))

axiom H29 : ((not ((1 <= n1) and (n1 <= 100))) -> (ki17 = ki1))

axiom H30 : ((not ((1 <= n1) and (n1 <= 100))) -> (n9 = n1))

axiom H31 : (to_rep(f_old__split_fields) = r299b)

axiom H32 : in_range2(r299b)

axiom H33 : (result21 = r)

axiom H34 : (r2 = 1)

axiom H35 : (((1 <= r2) and (r2 <= r299b)) -> (((temp___1791 = r2) and
  ((((not (r2 = root)) and
  ((to_rep1((((f_old__split_fields1[r2])).us_split_fields3).rec__binary_trees__cell__position) = 2) and
  (not (r2 = v)))) -> (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not ((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) or
  (not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, r2)[i7])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((to_rep1((((f__split_fields1[r2])).us_split_fields3).rec__binary_trees__cell__position) = 2) and
  (oeq(model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, r2), model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  r2)) = true)))) and
  ((forall p1:int. (((1 <= p1) and (p1 <= r3)) -> ((((not (p1 = root)) and
   (to_rep1((((f_old__split_fields1[p1])).us_split_fields3).rec__binary_trees__cell__position) = 2)) and
   (not (p1 = v))) -> (oeq(model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } }, p1), model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, p1)) = true)))) and
  ((((1 <= r299b) -> dynamic_property(1, r299b, r3)) and ((1 <= r3) and
  (r3 <= r299b))) and (r3 = r299b))))) and ((r9 = r3) and (r10 = r3))))

axiom H36 : (((1 <= r2) and (r2 <= r299b)) -> (r11 = r9))

axiom H37 : (((1 <= r2) and (r2 <= r299b)) -> (r12 = r10))

axiom H38 : ((not ((1 <= r2) and (r2 <= r299b))) -> (r11 = r2))

axiom H39 : ((not ((1 <= r2) and (r2 <= r299b))) -> (r12 = r2))

axiom H40 : (r13 = r11)

axiom H41 : (ki18 = ki16)

axiom H42 : (n10 = n8)

axiom H43 : (r14 = r12)

axiom H44 : (ki19 = ki17)

axiom H45 : (n11 = n9)

axiom H46 : ((result24 = true) <->
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true)))))

axiom H47 : (result24 = true)

axiom H48 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true)

axiom H49 : ((temp___1809 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1809[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1809[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1809[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((temp___1809[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((temp___1809[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root))) -> (is_add((((temp___1809[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i7),
   (((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = root)))) ->
   (length((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((temp___1809[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1809[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1809[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((temp___1809[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))

axiom H50 : ({ us_split_fields1 = { rec__tree_model__path_type__a = o180;
  rec__tree_model__path_type__k = o181 } } = (temp___1809[v]))

axiom H51 : ((o182 = o180) and (o183 = o181))

axiom H52 : (result26 = o183)

axiom H53 : (result26 = true)

axiom H54 : ((result27 = true) <->
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (i7 = v))) -> ((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true)))))

axiom H55 : (result27 = true)

axiom H56 : (((result29 = true) ->
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n12:int. (((1 <= n12) and (n12 <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  }, root)[i7])).us_split_fields1).rec__tree_model__path_type__a, n12))))) and
  (not (bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
  },
  root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = false))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old__split_fields; rec__binary_trees__forest__c = f_old__split_fields1 }
   },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n12:int. (((1 <= n12) and (n12 <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a,
   n12) = get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old__split_fields;
   rec__binary_trees__forest__c = f_old__split_fields1 } },
   root)[i7])).us_split_fields1).rec__tree_model__path_type__a, n12)))))))) ->
  (result29 = true)))

axiom H57 : (result29 = true)

axiom H58 : (1 <= r1)

axiom H59 : (r1 <= to_rep(f_old__split_fields))

axiom H60 : ((1 <= r1) and (r1 <= 100))

axiom H61 : (o148 = r1)

axiom H62 : ({ us_split_fields3 = { rec__binary_trees__cell__left = o149;
  rec__binary_trees__cell__right = o150; rec__binary_trees__cell__parent =
  o151; rec__binary_trees__cell__position = o152 }
  } = (f_old__split_fields1[o148]))

axiom H63 : ((o153 = o149) and ((o154 = o150) and ((o155 = o151) and
  (o156 = o152))))

axiom H64 : (o157 = o156)

axiom H65 : (o158 = to_rep1(o157))

axiom H66 : (((o158 = 2) -> (o159 = true)) and ((not (o158 = 2)) ->
  (o159 = false)))

axiom H67 : (((not (r1 = root)) -> (o160 = o159)) and ((r1 = root) ->
  (o160 = false)))

axiom H68 : (((not (r1 = v)) -> (result31 = match_bool(o160, true,
  false))) and ((r1 = v) -> (result31 = match_bool(o160, false, false))))

axiom H69 : (result31 = true)

axiom H70 : ((o163 = r1) and in_range1(r1))

axiom H71 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }) = true)

axiom H72 : ((o164 = r1) and in_range1(r1))

axiom H73 : ((o165 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f__split_fields;
  rec__binary_trees__forest__c = f__split_fields1 } }, o164)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((o165[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((o165[o164])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((o165[o164])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) -> ((not (i7 = o164)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((o165[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((o165[i7])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f__split_fields; rec__binary_trees__forest__c = f__split_fields1 } },
   i7) = 0)) and ((((o165[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((o165[i7])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
   (((((((o165[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = o164))) -> (is_add((((o165[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } },
   i7)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f__split_fields;
   rec__binary_trees__forest__c = f__split_fields1 } }, i7),
   (((o165[i7])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((o165[i7])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i7 = o164)))) ->
   (length((((o165[i7])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i7:int. (((1 <= i7) and (i7 <= 100)) ->
  (((((o165[i7])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
  ((((((o165[j2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((o165[i7])).us_split_fields1).rec__tree_model__path_type__a),
  length((((o165[j2])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n12:int. (((1 <= n12) and
  (n12 <= (0 + length((((o165[i7])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((o165[i7])).us_split_fields1).rec__tree_model__path_type__a,
  n12) = get((((o165[j2])).us_split_fields1).rec__tree_model__path_type__a,
  n12)))))) -> (j2 = i7)))))))))))))

axiom H74 : ((o161 = r1) and in_range1(r1))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields;
  rec__binary_trees__forest__c = f_old__split_fields1 } }) = true)
