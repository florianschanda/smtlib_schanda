(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : positive -> int

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__with_default__ok_nested_defaults__empty_rec1__d
: positive
}

function us_split_discrs___11__projection(a: us_split_discrs) : positive =
  (a).rec__with_default__ok_nested_defaults__empty_rec1__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___11__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs; attr__constrained : bool
}

function us_rep___31__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___32__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep1(((a).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d) = to_rep1(((b).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep1(((a).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d) = to_rep1(((b).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:positive. forall a1:bool. (0 <= object__size({ us_split_discrs1 =
  { rec__with_default__ok_nested_defaults__empty_rec1__d = a };
  attr__constrained = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:positive. forall a1:bool. (0 <= object__alignment({
  us_split_discrs1 = { rec__with_default__ok_nested_defaults__empty_rec1__d =
  a }; attr__constrained = a1 })))

logic with_default__ok_nested_defaults__empty_rec1__d__first__bit : int

logic with_default__ok_nested_defaults__empty_rec1__d__last__bit : int

logic with_default__ok_nested_defaults__empty_rec1__d__position : int

axiom with_default__ok_nested_defaults__empty_rec1__d__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec1__d__first__bit)

axiom with_default__ok_nested_defaults__empty_rec1__d__last__bit_axiom :
  (with_default__ok_nested_defaults__empty_rec1__d__first__bit <  with_default__ok_nested_defaults__empty_rec1__d__last__bit)

axiom with_default__ok_nested_defaults__empty_rec1__d__position_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec1__d__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : positive

logic dummy3 : bool

type empty_rec1__ref = { empty_rec1__content : us_rep
}

function empty_rec1__ref___projection(a: empty_rec1__ref) : us_rep =
  (a).empty_rec1__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:positive. forall v1:bool.
  (forall i:int [(singleton({ us_split_discrs1 = {
  rec__with_default__ok_nested_defaults__empty_rec1__d = v };
  attr__constrained = v1 }, i)[i])]. ((singleton({ us_split_discrs1 = {
  rec__with_default__ok_nested_defaults__empty_rec1__d = v };
  attr__constrained = v1 }, i)[i]) = { us_split_discrs1 = {
  rec__with_default__ok_nested_defaults__empty_rec1__d = v };
  attr__constrained = v1 })))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_140:int. ((((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) and (bool_eq3((a[temp___idx_140]),
  (b[((b__first - a__first) + temp___idx_140)])) = true)) or
  (not ((a__first <= temp___idx_140) and (temp___idx_140 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_140:int. (((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) -> (bool_eq3((a[temp___idx_140]),
  (b[((b__first - a__first) + temp___idx_140)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_140:int. (((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) -> (bool_eq3((a[temp___idx_140]),
  (b[((b__first - a__first) + temp___idx_140)])) = true)))))))

logic dummy4 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq3 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields = { rec__with_default__ok_nested_defaults__non_init1__e
: (int,us_rep) farray; rec__with_default__ok_nested_defaults__non_init1__f :
natural
}

function us_split_fields_E__3__projection(a: us_split_fields) : (int,us_rep) farray =
  (a).rec__with_default__ok_nested_defaults__non_init1__e

function us_split_fields_F__3__projection(a: us_split_fields) : natural =
  (a).rec__with_default__ok_nested_defaults__non_init1__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___33__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  ((((bool_eq4(((a).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e,
  1, 0,
  ((b).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e,
  1, 0) = true) and
  (to_rep(((a).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__f) = to_rep(((b).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__f))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((bool_eq4(((a).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e,
  1, 0,
  ((b).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e,
  1, 0) = true) and
  (to_rep(((a).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__f) = to_rep(((b).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__f)))) ->
  (bool_eq5(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,us_rep) farray. forall a1:natural. (0 <= object__size2({
  us_split_fields1 = { rec__with_default__ok_nested_defaults__non_init1__e =
  a; rec__with_default__ok_nested_defaults__non_init1__f = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,us_rep) farray. forall a1:natural.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__with_default__ok_nested_defaults__non_init1__e = a;
  rec__with_default__ok_nested_defaults__non_init1__f = a1 } })))

logic with_default__ok_nested_defaults__non_init1__e__first__bit : int

logic with_default__ok_nested_defaults__non_init1__e__last__bit : int

logic with_default__ok_nested_defaults__non_init1__e__position : int

axiom with_default__ok_nested_defaults__non_init1__e__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__e__first__bit)

axiom with_default__ok_nested_defaults__non_init1__e__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init1__e__first__bit <  with_default__ok_nested_defaults__non_init1__e__last__bit)

axiom with_default__ok_nested_defaults__non_init1__e__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__e__position)

logic with_default__ok_nested_defaults__non_init1__f__first__bit : int

logic with_default__ok_nested_defaults__non_init1__f__last__bit : int

logic with_default__ok_nested_defaults__non_init1__f__position : int

axiom with_default__ok_nested_defaults__non_init1__f__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__f__first__bit)

axiom with_default__ok_nested_defaults__non_init1__f__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init1__f__first__bit <  with_default__ok_nested_defaults__non_init1__f__last__bit)

axiom with_default__ok_nested_defaults__non_init1__f__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__f__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : (int,us_rep) farray

logic dummy6 : natural

type non_init1__ref = { non_init1__content : us_rep1
}

function non_init1__ref___projection(a: non_init1__ref) : us_rep1 =
  (a).non_init1__content

type t37b

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq5 : t37b, t37b -> bool

logic dummy7 : t37b

type t37b__ref = { t37b__content : t37b
}

function t37b__ref___projection(a: t37b__ref) : t37b = (a).t37b__content

type us_split_discrs2 = {
rec__with_default__ok_nested_defaults__empty_rec2__d : positive
}

function us_split_discrs___12__projection(a: us_split_discrs2) : positive =
  (a).rec__with_default__ok_nested_defaults__empty_rec2__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___12__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_rep2 = { us_split_discrs3 : us_split_discrs2; attr__constrained1 :
bool
}

function us_rep___34__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___35__projection(a: us_rep2) : bool = (a).attr__constrained1

logic bool_eq7 : us_rep2, us_rep2 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq7(a, b)].
  (((to_rep1(((a).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d) = to_rep1(((b).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d)) ->
  (bool_eq7(a, b) = true)) and
  ((not (to_rep1(((a).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d) = to_rep1(((b).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d))) ->
  (bool_eq7(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:positive. forall a1:bool. (0 <= object__size3({
  us_split_discrs3 = { rec__with_default__ok_nested_defaults__empty_rec2__d =
  a }; attr__constrained1 = a1 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:positive. forall a1:bool. (0 <= object__alignment3({
  us_split_discrs3 = { rec__with_default__ok_nested_defaults__empty_rec2__d =
  a }; attr__constrained1 = a1 })))

logic with_default__ok_nested_defaults__empty_rec2__d__first__bit : int

logic with_default__ok_nested_defaults__empty_rec2__d__last__bit : int

logic with_default__ok_nested_defaults__empty_rec2__d__position : int

axiom with_default__ok_nested_defaults__empty_rec2__d__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec2__d__first__bit)

axiom with_default__ok_nested_defaults__empty_rec2__d__last__bit_axiom :
  (with_default__ok_nested_defaults__empty_rec2__d__first__bit <  with_default__ok_nested_defaults__empty_rec2__d__last__bit)

axiom with_default__ok_nested_defaults__empty_rec2__d__position_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec2__d__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy8 : positive

logic dummy9 : bool

type empty_rec2__ref = { empty_rec2__content : us_rep2
}

function empty_rec2__ref___projection(a: empty_rec2__ref) : us_rep2 =
  (a).empty_rec2__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:positive. forall v1:bool.
  (forall i:int [(singleton1({ us_split_discrs3 = {
  rec__with_default__ok_nested_defaults__empty_rec2__d = v };
  attr__constrained1 = v1 }, i)[i])]. ((singleton1({ us_split_discrs3 = {
  rec__with_default__ok_nested_defaults__empty_rec2__d = v };
  attr__constrained1 = v1 }, i)[i]) = { us_split_discrs3 = {
  rec__with_default__ok_nested_defaults__empty_rec2__d = v };
  attr__constrained1 = v1 })))

logic bool_eq8 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_141:int. ((((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) and (bool_eq7((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)) or
  (not ((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq7((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true))))) -> (bool_eq8(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq7((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)))))))

logic dummy10 : (int,us_rep2) farray

logic value__size4 : int

logic object__size4 : (int,us_rep2) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,us_rep2) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,us_rep2) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,us_rep2) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment4(a)))

logic user_eq7 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields2 = { rec__with_default__ok_nested_defaults__non_init2__e
: (int,us_rep2) farray; rec__with_default__ok_nested_defaults__non_init2__f :
natural
}

function us_split_fields_E__4__projection(a: us_split_fields2) : (int,us_rep2) farray =
  (a).rec__with_default__ok_nested_defaults__non_init2__e

function us_split_fields_F__4__projection(a: us_split_fields2) : natural =
  (a).rec__with_default__ok_nested_defaults__non_init2__f

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___36__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep3, us_rep3 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq9(a, b)].
  ((((bool_eq8(((a).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e,
  1, 100,
  ((b).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e,
  1, 100) = true) and
  (to_rep(((a).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__f) = to_rep(((b).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__f))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((bool_eq8(((a).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e,
  1, 100,
  ((b).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e,
  1, 100) = true) and
  (to_rep(((a).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__f) = to_rep(((b).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__f)))) ->
  (bool_eq9(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,us_rep2) farray. forall a1:natural. (0 <= object__size5({
  us_split_fields3 = { rec__with_default__ok_nested_defaults__non_init2__e =
  a; rec__with_default__ok_nested_defaults__non_init2__f = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,us_rep2) farray. forall a1:natural.
  (0 <= object__alignment5({ us_split_fields3 = {
  rec__with_default__ok_nested_defaults__non_init2__e = a;
  rec__with_default__ok_nested_defaults__non_init2__f = a1 } })))

logic with_default__ok_nested_defaults__non_init2__e__first__bit : int

logic with_default__ok_nested_defaults__non_init2__e__last__bit : int

logic with_default__ok_nested_defaults__non_init2__e__position : int

axiom with_default__ok_nested_defaults__non_init2__e__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__e__first__bit)

axiom with_default__ok_nested_defaults__non_init2__e__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init2__e__first__bit <  with_default__ok_nested_defaults__non_init2__e__last__bit)

axiom with_default__ok_nested_defaults__non_init2__e__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__e__position)

logic with_default__ok_nested_defaults__non_init2__f__first__bit : int

logic with_default__ok_nested_defaults__non_init2__f__last__bit : int

logic with_default__ok_nested_defaults__non_init2__f__position : int

axiom with_default__ok_nested_defaults__non_init2__f__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__f__first__bit)

axiom with_default__ok_nested_defaults__non_init2__f__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init2__f__first__bit <  with_default__ok_nested_defaults__non_init2__f__last__bit)

axiom with_default__ok_nested_defaults__non_init2__f__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__f__position)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy11 : (int,us_rep2) farray

logic dummy12 : natural

type non_init2__ref = { non_init2__content : us_rep3
}

function non_init2__ref___projection(a: non_init2__ref) : us_rep3 =
  (a).non_init2__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic o : int

logic temp___669 : int

logic result : bool

axiom H : in_range(c)

axiom H1 : ((1 <= 0) -> (o = ((0 - 1) + 1)))

axiom H2 : ((not (1 <= 0)) -> (o = 0))

axiom H3 : (((0 <  o) -> (result = true)) and ((not (0 <  o)) ->
  (result = false)))

axiom H4 : (result = true)

 (* File "with_default.adb", line 218, characters 0-0 *)
goal WP_parameter_def : in_range1(c)
