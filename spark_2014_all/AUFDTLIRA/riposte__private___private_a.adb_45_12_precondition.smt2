(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-sort length_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (length_t length_t) Bool)
(declare-const dummy1 length_t)
(declare-datatypes () ((length_t__ref (mk_length_t__ref (length_t__content length_t)))))
(define-fun length_t__ref___projection ((a length_t__ref)) length_t (length_t__content a))
(declare-fun to_rep (length_t) Int)
(declare-fun of_rep (Int) length_t)
(assert (forall ((x length_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x length_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stack__t__len length_t) (rec__stack__t__elements (Array Int integer))))))
(define-fun us_split_fields_Len__projection ((a us_split_fields)) length_t (rec__stack__t__len a))
(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int integer) (rec__stack__t__elements a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__stack__t__len (us_split_fields1 a))) (to_rep (rec__stack__t__len (us_split_fields1 b)))) (= (bool_eq (rec__stack__t__elements (us_split_fields1 a)) 1 100 (rec__stack__t__elements (us_split_fields1 b)) 1 100) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stack__t__len__first__bit Int)
(declare-const stack__t__len__last__bit Int)
(declare-const stack__t__len__position Int)
(assert (<= 0 stack__t__len__first__bit))
(assert (< stack__t__len__first__bit stack__t__len__last__bit))
(assert (<= 0 stack__t__len__position))
(declare-const stack__t__elements__first__bit Int)
(declare-const stack__t__elements__last__bit Int)
(declare-const stack__t__elements__position Int)
(assert (<= 0 stack__t__elements__first__bit))
(assert (< stack__t__elements__first__bit stack__t__elements__last__bit))
(assert (<= 0 stack__t__elements__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___2__projection ((a t__ref)) us_rep (t__content a))
(declare-fun get_length (us_rep) Int)
(declare-fun get_length__function_guard (Int us_rep) Bool)
(declare-fun create_stack (tuple0) us_rep)
(declare-fun create_stack__function_guard (us_rep tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (= (get_length (create_stack us_void_param)) 0) :pattern ((create_stack us_void_param)))))
(declare-fun top (us_rep) Int)
(declare-fun top__function_guard (Int us_rep) Bool)
(assert (forall ((the_stack us_rep)) (! (=> (< 0 (get_length the_stack)) (dynamic_invariant (top the_stack) true false true)) :pattern ((top the_stack)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_155 Int) (temp___is_init_152 Bool) (temp___skip_constant_153 Bool) (temp___do_toplevel_154 Bool)) Bool (=> (or (= temp___is_init_152 true) (<= 0 100)) (in_range1 temp___expr_155)))
(assert (forall ((the_stack us_rep)) (! (dynamic_invariant1 (get_length the_stack) true false true) :pattern ((get_length the_stack)))))
(declare-const n Int)
(declare-const s__split_fields length_t)
(declare-const s__split_fields1 (Array Int integer))
(declare-const temp___229 length_t)
(declare-const temp___2291 (Array Int integer))
(declare-const o Int)
(declare-const result length_t)
(declare-const result1 (Array Int integer))
(declare-const s__split_fields2 length_t)
(declare-const s__split_fields3 (Array Int integer))
(declare-const s__split_fields4 length_t)
(declare-const s__split_fields5 (Array Int integer))
(declare-const result2 Int)
(declare-const n1 Int)
(declare-const n2 Int)
(declare-const s__split_fields6 length_t)
(declare-const s__split_fields7 (Array Int integer))
(declare-const n3 Int)
(declare-const s__split_fields8 length_t)
(declare-const s__split_fields9 (Array Int integer))
(assert (in_range n))
(assert (and (= (mk___rep (mk___split_fields temp___229 temp___2291)) (create_stack Tuple0)) (= (get_length (mk___rep (mk___split_fields temp___229 temp___2291))) 0)))
(assert (= (mk___split_fields__ref (mk___split_fields result result1)) (mk___split_fields__ref (mk___split_fields s__split_fields s__split_fields1))))
(assert (= temp___229 s__split_fields2))
(assert (= temp___2291 s__split_fields3))
(assert (not (< (get_length (mk___rep (mk___split_fields s__split_fields2 s__split_fields3))) 100)))
(check-sat)
(exit)
