(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type tcount_typeB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tcount_typeB, tcount_typeB -> bool

logic dummy1 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : extended_index_type, extended_index_type -> bool

logic dummy3 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep1 : extended_index_type -> int

logic of_rep1 : int -> extended_index_type

axiom inversion_axiom1 :
  (forall x:extended_index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:extended_index_type [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type direction

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : direction, direction -> bool

logic dummy4 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq7 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : count_type, count_type -> bool

logic dummy6 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq5(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq5(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq5(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range6(length(container))))

type element_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)]. ((in_range8(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range7(get(container, position)))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((user_eq5(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((user_eq5(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy9 : us_rep

logic dummy10 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq12 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq11((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq11((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq12(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq11((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type position_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : position_type, position_type -> bool

logic dummy11 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep2 : position_type -> int

logic of_rep2 : int -> position_type

axiom inversion_axiom2 :
  (forall x:position_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:position_type [to_rep2(x)]. in_range9(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range9(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq14 : us_rep2, us_rep2 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq14(a, b)].
  ((((((to_rep1(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep2(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep2(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq14(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep2(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep2(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq14(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy12 : extended_index_type

logic dummy13 : extended_index_type

logic dummy14 : extended_index_type

logic dummy15 : position_type

type cell__ref = { cell__content : us_rep2
}

function cell__ref___projection(a: cell__ref) : us_rep2 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq15 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def13 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq14((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq14((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq15(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq14((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy16 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq12 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep2) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep2) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq16 : us_rep3, us_rep3 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq16(a, b)].
  ((((to_rep1(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep1(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq15(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq16(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep1(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq15(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq16(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__size4({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq13 : us_rep3, us_rep3 -> bool

logic dummy17 : extended_index_type

logic dummy18 : (int,us_rep2) farray

type forest__ref = { forest__content : us_rep3
}

function forest__ref___projection(a: forest__ref) : us_rep3 =
  (a).forest__content

logic size : us_rep3 -> int

logic size__function_guard : int, us_rep3 -> prop

logic tree_structure : us_rep3 -> bool

logic tree_structure__function_guard : bool, us_rep3 -> prop

axiom size__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range4(size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

logic valid_root : us_rep3, int -> bool

logic valid_root__function_guard : bool, us_rep3, int -> prop

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i)) -> ((size({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i) -> (not (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true))))))

logic peek : us_rep3, int, int -> int

logic peek__function_guard : int, us_rep3, int, int -> prop

logic parent : us_rep3, int -> int

logic parent__function_guard : int, us_rep3, int -> prop

logic position : us_rep3, int -> int

logic position__function_guard : int, us_rep3, int -> prop

axiom peek__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int. forall d:int [peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i)) and in_range5(d)) -> (((((not (peek({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = 0)) -> ((position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = d) and (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = i))) and ((peek({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i, d) = 0) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i) -> (not (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = d))))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i) and (position({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, j) = d)) -> (peek({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = j))))) and in_range4(peek({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d))))))

logic model__ : us_rep3, int -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep3, int -> prop

axiom model____post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int [model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(root)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) -> (is_add((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) -> (length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : natural, int -> (int,natural) farray

axiom singleton_def2 :
  (forall v:natural.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq17 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def15 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq17(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq17(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq17(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq17(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy19 : (int,natural) farray

logic value__size5 : int

logic object__size5 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,natural) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,natural) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,natural) farray. (0 <= object__alignment5(a)))

logic user_eq14 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields6 = { rec__search_trees__search_tree__root :
extended_index_type; rec__search_trees__search_tree__struct : us_rep3;
rec__search_trees__search_tree__values : (int,natural) farray
}

function us_split_fields_Root__projection(a: us_split_fields6) : extended_index_type =
  (a).rec__search_trees__search_tree__root

function us_split_fields_Struct__projection(a: us_split_fields6) : us_rep3 =
  (a).rec__search_trees__search_tree__struct

function us_split_fields_Values__projection(a: us_split_fields6) : (int,natural) farray =
  (a).rec__search_trees__search_tree__values

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq18 : us_rep4, us_rep4 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq18(a, b)].
  (((((to_rep1(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep1(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq16(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq17(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true)) -> (bool_eq18(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep1(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq16(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq17(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true))) -> (bool_eq18(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep2) farray. forall a3:(int,natural) farray.
  (0 <= object__size6({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep2) farray. forall a3:(int,natural) farray.
  (0 <= object__alignment6({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

logic search_trees__search_tree__root__first__bit : int

logic search_trees__search_tree__root__last__bit : int

logic search_trees__search_tree__root__position : int

axiom search_trees__search_tree__root__first__bit_axiom :
  (0 <= search_trees__search_tree__root__first__bit)

axiom search_trees__search_tree__root__last__bit_axiom :
  (search_trees__search_tree__root__first__bit <  search_trees__search_tree__root__last__bit)

axiom search_trees__search_tree__root__position_axiom :
  (0 <= search_trees__search_tree__root__position)

logic search_trees__search_tree__struct__first__bit : int

logic search_trees__search_tree__struct__last__bit : int

logic search_trees__search_tree__struct__position : int

axiom search_trees__search_tree__struct__first__bit_axiom :
  (0 <= search_trees__search_tree__struct__first__bit)

axiom search_trees__search_tree__struct__last__bit_axiom :
  (search_trees__search_tree__struct__first__bit <  search_trees__search_tree__struct__last__bit)

axiom search_trees__search_tree__struct__position_axiom :
  (0 <= search_trees__search_tree__struct__position)

logic search_trees__search_tree__values__first__bit : int

logic search_trees__search_tree__values__last__bit : int

logic search_trees__search_tree__values__position : int

axiom search_trees__search_tree__values__first__bit_axiom :
  (0 <= search_trees__search_tree__values__first__bit)

axiom search_trees__search_tree__values__last__bit_axiom :
  (search_trees__search_tree__values__first__bit <  search_trees__search_tree__values__last__bit)

axiom search_trees__search_tree__values__position_axiom :
  (0 <= search_trees__search_tree__values__position)

logic user_eq15 : us_rep4, us_rep4 -> bool

logic dummy20 : extended_index_type

logic dummy21 : extended_index_type

logic dummy22 : (int,us_rep2) farray

logic dummy23 : (int,natural) farray

type search_tree__ref = { search_tree__content : us_rep4
}

function search_tree__ref___projection(a: search_tree__ref) : us_rep4 =
  (a).search_tree__content

logic size1 : us_rep4 -> int

logic size__function_guard1 : int, us_rep4 -> prop

logic ordered_leafs : us_rep3, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep3, int,
  (int,natural) farray -> prop

logic temp___387 : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___389:int.
  (forall temp___390:int.
  ((temp___387(temp___389)[temp___390]) = of_rep(temp___389))))

logic v : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom ordered_leafs__post_axiom : true

axiom ordered_leafs__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int.
  (forall values:(int,natural) farray [ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values)]. (((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values[j])) <  to_rep((values[i])))) and ((not (get((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values[i])) <  to_rep((values[j]))))))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   (((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) and
   (to_rep((values[j])) <  to_rep((values[i])))) or ((not (get((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) and
   (to_rep((values[i])) <  to_rep((values[j])))))))))) ->
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root, values) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic t : extended_index_type

logic t1 : extended_index_type

logic t2 : (int,us_rep2) farray

logic t3 : (int,natural) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic d : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

axiom size__post_axiom1 :
  (forall t4:extended_index_type. forall t5:extended_index_type.
  forall t6:(int,us_rep2) farray. forall t7:(int,natural) farray [size1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } })]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = true) and (((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = 0) and (to_rep1(t4) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = 0)) and
  (((not (to_rep1(t4) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } },
  to_rep1(t4)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } },
  to_rep1(t4), t7) = true))))) -> in_range4(size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } }))))

axiom size__def_axiom :
  (forall t4:extended_index_type. forall t5:extended_index_type.
  forall t6:(int,us_rep2) farray. forall t7:(int,natural) farray [size1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }) = true) -> (size1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t4;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t5; rec__binary_trees__forest__c = t6 } };
  rec__search_trees__search_tree__values = t7 } }) = size({
  us_split_fields5 = { rec__binary_trees__forest__s = t5;
  rec__binary_trees__forest__c = t6 } }))))

axiom parent__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) and in_range3(i)) ->
  ((((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) and in_range4(parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i))))))

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i)) and (not (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range5(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom tree_structure__post_axiom : true

logic i : int

logic t_old__split_fields : extended_index_type

logic t_old__split_fields1 : extended_index_type

logic t_old__split_fields2 : (int,us_rep2) farray

logic t_old__split_fields3 : (int,natural) farray

logic ki : int

logic j : int

logic o : int

logic temp___2057 : (int,us_rep1) farray

logic o1 : int

logic temp___2061 : (int,us_rep1) farray

logic o2 : us_rep

logic o3 : bool

logic o4 : us_rep

logic o5 : bool

logic o6 : us_rep

logic o7 : int

logic temp___2062 : (int,us_rep1) farray

logic o8 : int

logic o9 : us_rep

logic o10 : bool

logic o11 : us_rep

logic o12 : bool

logic o13 : us_rep

logic j1 : int

logic o14 : int

logic temp___2065 : (int,us_rep1) farray

logic o15 : us_rep

logic o16 : bool

logic o17 : us_rep

logic o18 : bool

logic o19 : int

logic temp___2063 : (int,us_rep1) farray

logic o20 : int

logic temp___2064 : (int,us_rep1) farray

logic o21 : us_rep

logic o22 : bool

logic o23 : us_rep

logic o24 : bool

logic o25 : us_rep

logic j2 : int

logic o26 : int

logic temp___2070 : (int,us_rep1) farray

logic o27 : us_rep

logic o28 : bool

logic o29 : us_rep

logic o30 : bool

logic o31 : int

logic temp___2069 : (int,us_rep1) farray

logic j3 : int

logic o32 : int

logic temp___2074 : (int,us_rep1) farray

logic o33 : us_rep

logic o34 : bool

logic o35 : us_rep

logic o36 : bool

logic o37 : int

logic temp___2073 : (int,us_rep1) farray

logic o38 : int

logic o39 : int

logic o40 : int

logic o41 : int

logic o42 : int

logic i1 : int

logic o43 : int

logic temp___2083 : (int,us_rep1) farray

logic o44 : us_rep

logic o45 : bool

logic o46 : us_rep

logic o47 : bool

logic o48 : int

logic temp___2081 : (int,us_rep1) farray

logic o49 : us_rep

logic o50 : bool

logic o51 : us_rep

logic o52 : bool

logic o53 : us_rep

logic o54 : int

logic temp___2082 : (int,us_rep1) farray

logic o55 : us_rep

logic o56 : bool

logic o57 : us_rep

logic o58 : bool

logic o59 : us_rep

logic o60 : int

logic temp___2079 : (int,us_rep1) farray

logic o61 : us_rep

logic o62 : bool

logic o63 : us_rep

logic o64 : bool

logic o65 : us_rep

logic o66 : int

logic temp___2080 : (int,us_rep1) farray

logic o67 : us_rep

logic o68 : bool

logic o69 : us_rep

logic o70 : bool

logic o71 : us_rep

logic o72 : int

logic o73 : int

logic o74 : int

logic o75 : int

logic o76 : int

logic o77 : int

logic temp___2092 : (int,us_rep1) farray

logic o78 : us_rep

logic o79 : bool

logic o80 : us_rep

logic o81 : bool

logic o82 : int

logic temp___1969 : int

logic o83 : int

logic j4 : int

logic o84 : int

logic temp___1948 : (int,us_rep1) farray

logic o85 : us_rep

logic o86 : bool

logic o87 : us_rep

logic o88 : bool

logic o89 : us_rep

logic o90 : int

logic temp___1949 : (int,us_rep1) farray

logic o91 : us_rep

logic o92 : bool

logic o93 : us_rep

logic o94 : bool

logic o95 : us_rep

logic o96 : int

logic temp___1947 : (int,us_rep1) farray

logic o97 : us_rep

logic o98 : bool

logic o99 : us_rep

logic o100 : bool

logic o101 : int

logic temp___1945 : (int,us_rep1) farray

logic o102 : us_rep

logic o103 : bool

logic o104 : us_rep

logic o105 : bool

logic o106 : us_rep

logic o107 : int

logic temp___1946 : (int,us_rep1) farray

logic o108 : us_rep

logic o109 : bool

logic o110 : us_rep

logic o111 : bool

logic o112 : us_rep

logic o113 : int

logic o114 : int

logic o115 : int

logic o116 : int

logic j5 : int

logic o117 : int

logic temp___1962 : (int,us_rep1) farray

logic o118 : us_rep

logic o119 : bool

logic o120 : us_rep

logic o121 : bool

logic o122 : int

logic temp___1960 : (int,us_rep1) farray

logic o123 : int

logic temp___1961 : (int,us_rep1) farray

logic o124 : us_rep

logic o125 : bool

logic o126 : us_rep

logic o127 : bool

logic o128 : us_rep

logic j6 : int

logic o129 : int

logic temp___1883 : (int,us_rep1) farray

logic o130 : us_rep

logic o131 : bool

logic o132 : us_rep

logic o133 : bool

logic o134 : us_rep

logic o135 : int

logic temp___1884 : (int,us_rep1) farray

logic o136 : us_rep

logic o137 : bool

logic o138 : us_rep

logic o139 : bool

logic o140 : us_rep

logic o141 : int

logic temp___1882 : (int,us_rep1) farray

logic o142 : us_rep

logic o143 : bool

logic o144 : us_rep

logic o145 : bool

logic o146 : int

logic temp___1881 : (int,us_rep1) farray

logic o147 : us_rep

logic o148 : bool

logic o149 : us_rep

logic o150 : bool

logic o151 : bool

logic o152 : int

logic temp___1879 : (int,us_rep1) farray

logic o153 : us_rep

logic o154 : bool

logic o155 : us_rep

logic o156 : bool

logic o157 : us_rep

logic o158 : int

logic temp___1880 : (int,us_rep1) farray

logic o159 : us_rep

logic o160 : bool

logic o161 : us_rep

logic o162 : bool

logic o163 : us_rep

logic o164 : int

logic o165 : int

logic o166 : int

logic o167 : int

logic o168 : int

logic temp___1909 : (int,us_rep1) farray

logic o169 : us_rep

logic o170 : bool

logic o171 : us_rep

logic o172 : bool

logic o173 : int

logic temp___1907 : (int,us_rep1) farray

logic o174 : us_rep

logic o175 : bool

logic o176 : us_rep

logic o177 : bool

logic o178 : us_rep

logic o179 : int

logic temp___1908 : (int,us_rep1) farray

logic o180 : int

logic o181 : us_rep

logic o182 : bool

logic o183 : us_rep

logic o184 : bool

logic o185 : us_rep

logic o186 : int

logic temp___1905 : (int,us_rep1) farray

logic o187 : int

logic temp___1906 : (int,us_rep1) farray

logic o188 : us_rep

logic o189 : bool

logic o190 : us_rep

logic o191 : bool

logic o192 : us_rep

logic j7 : int

logic o193 : int

logic temp___1923 : (int,us_rep1) farray

logic o194 : us_rep

logic o195 : bool

logic o196 : us_rep

logic o197 : bool

logic o198 : us_rep

logic o199 : int

logic temp___1924 : (int,us_rep1) farray

logic o200 : us_rep

logic o201 : bool

logic o202 : us_rep

logic o203 : bool

logic o204 : us_rep

logic o205 : int

logic temp___1922 : (int,us_rep1) farray

logic o206 : us_rep

logic o207 : bool

logic o208 : us_rep

logic o209 : bool

logic o210 : int

logic temp___1921 : (int,us_rep1) farray

logic o211 : us_rep

logic o212 : bool

logic o213 : us_rep

logic o214 : bool

logic o215 : bool

logic o216 : int

logic temp___1919 : (int,us_rep1) farray

logic o217 : us_rep

logic o218 : bool

logic o219 : us_rep

logic o220 : bool

logic o221 : us_rep

logic o222 : int

logic temp___1920 : (int,us_rep1) farray

logic o223 : us_rep

logic o224 : bool

logic o225 : us_rep

logic o226 : bool

logic o227 : us_rep

logic o228 : int

logic o229 : int

logic o230 : int

logic o231 : int

logic i2 : int

logic j8 : int

logic o232 : int

logic temp___1978 : (int,us_rep1) farray

logic o233 : int

logic o234 : us_rep

logic o235 : bool

logic o236 : us_rep

logic o237 : bool

logic o238 : us_rep

logic o239 : int

logic temp___1979 : (int,us_rep1) farray

logic o240 : us_rep

logic o241 : bool

logic o242 : us_rep

logic o243 : bool

logic o244 : us_rep

logic o245 : int

logic temp___1977 : (int,us_rep1) farray

logic o246 : us_rep

logic o247 : bool

logic o248 : us_rep

logic o249 : bool

logic o250 : int

logic temp___1976 : (int,us_rep1) farray

logic o251 : int

logic o252 : us_rep

logic o253 : bool

logic o254 : us_rep

logic o255 : bool

logic o256 : int

logic temp___1974 : (int,us_rep1) farray

logic o257 : us_rep

logic o258 : bool

logic o259 : us_rep

logic o260 : bool

logic o261 : us_rep

logic o262 : int

logic temp___1975 : (int,us_rep1) farray

logic o263 : int

logic o264 : us_rep

logic o265 : bool

logic o266 : us_rep

logic o267 : bool

logic o268 : us_rep

logic o269 : int

logic o270 : int

logic o271 : int

logic o272 : int

logic o273 : int

logic j9 : int

logic o274 : int

logic temp___19481 : (int,us_rep1) farray

logic o275 : us_rep

logic o276 : bool

logic o277 : us_rep

logic o278 : bool

logic o279 : us_rep

logic o280 : int

logic temp___19491 : (int,us_rep1) farray

logic o281 : us_rep

logic o282 : bool

logic o283 : us_rep

logic o284 : bool

logic o285 : us_rep

logic o286 : int

logic temp___19471 : (int,us_rep1) farray

logic o287 : us_rep

logic o288 : bool

logic o289 : us_rep

logic o290 : bool

logic o291 : int

logic temp___19451 : (int,us_rep1) farray

logic o292 : us_rep

logic o293 : bool

logic o294 : us_rep

logic o295 : bool

logic o296 : us_rep

logic o297 : int

logic temp___19461 : (int,us_rep1) farray

logic o298 : us_rep

logic o299 : bool

logic o300 : us_rep

logic o301 : bool

logic o302 : us_rep

logic o303 : int

logic o304 : int

logic o305 : int

logic o306 : int

logic j10 : int

logic o307 : int

logic temp___19621 : (int,us_rep1) farray

logic o308 : us_rep

logic o309 : bool

logic o310 : us_rep

logic o311 : bool

logic o312 : int

logic temp___19601 : (int,us_rep1) farray

logic o313 : int

logic temp___19611 : (int,us_rep1) farray

logic o314 : us_rep

logic o315 : bool

logic o316 : us_rep

logic o317 : bool

logic o318 : us_rep

logic j11 : int

logic o319 : int

logic temp___18831 : (int,us_rep1) farray

logic o320 : us_rep

logic o321 : bool

logic o322 : us_rep

logic o323 : bool

logic o324 : us_rep

logic o325 : int

logic temp___18841 : (int,us_rep1) farray

logic o326 : us_rep

logic o327 : bool

logic o328 : us_rep

logic o329 : bool

logic o330 : us_rep

logic o331 : int

logic temp___18821 : (int,us_rep1) farray

logic o332 : us_rep

logic o333 : bool

logic o334 : us_rep

logic o335 : bool

logic o336 : int

logic temp___18811 : (int,us_rep1) farray

logic o337 : us_rep

logic o338 : bool

logic o339 : us_rep

logic o340 : bool

logic o341 : bool

logic o342 : int

logic temp___18791 : (int,us_rep1) farray

logic o343 : us_rep

logic o344 : bool

logic o345 : us_rep

logic o346 : bool

logic o347 : us_rep

logic o348 : int

logic temp___18801 : (int,us_rep1) farray

logic o349 : us_rep

logic o350 : bool

logic o351 : us_rep

logic o352 : bool

logic o353 : us_rep

logic o354 : int

logic o355 : int

logic o356 : int

logic o357 : int

logic o358 : int

logic temp___19091 : (int,us_rep1) farray

logic o359 : us_rep

logic o360 : bool

logic o361 : us_rep

logic o362 : bool

logic o363 : int

logic temp___19071 : (int,us_rep1) farray

logic o364 : us_rep

logic o365 : bool

logic o366 : us_rep

logic o367 : bool

logic o368 : us_rep

logic o369 : int

logic temp___19081 : (int,us_rep1) farray

logic o370 : int

logic o371 : us_rep

logic o372 : bool

logic o373 : us_rep

logic o374 : bool

logic o375 : us_rep

logic o376 : int

logic temp___19051 : (int,us_rep1) farray

logic o377 : int

logic temp___19061 : (int,us_rep1) farray

logic o378 : us_rep

logic o379 : bool

logic o380 : us_rep

logic o381 : bool

logic o382 : us_rep

logic j12 : int

logic o383 : int

logic temp___19231 : (int,us_rep1) farray

logic o384 : us_rep

logic o385 : bool

logic o386 : us_rep

logic o387 : bool

logic o388 : us_rep

logic o389 : int

logic temp___19241 : (int,us_rep1) farray

logic o390 : us_rep

logic o391 : bool

logic o392 : us_rep

logic o393 : bool

logic o394 : us_rep

logic o395 : int

logic temp___19221 : (int,us_rep1) farray

logic o396 : us_rep

logic o397 : bool

logic o398 : us_rep

logic o399 : bool

logic o400 : int

logic temp___19211 : (int,us_rep1) farray

logic o401 : us_rep

logic o402 : bool

logic o403 : us_rep

logic o404 : bool

logic o405 : bool

logic o406 : int

logic temp___19191 : (int,us_rep1) farray

logic o407 : us_rep

logic o408 : bool

logic o409 : us_rep

logic o410 : bool

logic o411 : us_rep

logic o412 : int

logic temp___19201 : (int,us_rep1) farray

logic o413 : us_rep

logic o414 : bool

logic o415 : us_rep

logic o416 : bool

logic o417 : us_rep

logic o418 : int

logic o419 : int

logic o420 : int

logic o421 : int

logic i3 : int

logic j13 : int

logic o422 : int

logic temp___2021 : (int,us_rep1) farray

logic o423 : us_rep

logic o424 : bool

logic o425 : us_rep

logic o426 : bool

logic o427 : int

logic temp___2019 : (int,us_rep1) farray

logic o428 : us_rep

logic o429 : bool

logic o430 : us_rep

logic o431 : bool

logic o432 : us_rep

logic o433 : int

logic temp___2020 : (int,us_rep1) farray

logic o434 : us_rep

logic o435 : bool

logic o436 : us_rep

logic o437 : bool

logic o438 : us_rep

logic o439 : int

logic temp___2018 : (int,us_rep1) farray

logic o440 : us_rep

logic o441 : bool

logic o442 : us_rep

logic o443 : bool

logic o444 : int

logic temp___2016 : (int,us_rep1) farray

logic o445 : us_rep

logic o446 : bool

logic o447 : us_rep

logic o448 : bool

logic o449 : us_rep

logic o450 : int

logic temp___2017 : (int,us_rep1) farray

logic o451 : us_rep

logic o452 : bool

logic o453 : us_rep

logic o454 : bool

logic o455 : us_rep

logic o456 : int

logic o457 : int

logic o458 : int

logic o459 : int

logic o460 : int

logic us : bool

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic result10 : bool

logic result11 : bool

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic result15 : bool

logic result16 : bool

logic result17 : bool

logic result18 : int

logic ki1 : int

logic result19 : bool

logic result20 : bool

logic result21 : bool

logic result22 : bool

logic result23 : bool

logic result24 : bool

logic result25 : bool

logic result26 : bool

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic ki2 : int

logic result30 : bool

logic result31 : bool

logic result32 : bool

logic result33 : bool

logic result34 : int

logic ki3 : int

logic result35 : bool

logic result36 : bool

logic result37 : bool

logic result38 : bool

logic result39 : bool

logic result40 : bool

logic result41 : bool

logic result42 : bool

logic result43 : bool

logic result44 : bool

logic result45 : bool

logic ki4 : int

logic ki5 : int

logic ki6 : int

logic ki7 : int

logic ki8 : int

logic ki9 : int

logic result46 : bool

logic result47 : bool

logic result48 : bool

logic ki10 : int

logic ki11 : int

axiom H : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } }) = true)

axiom H1 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)

axiom H2 : in_range3(l)

axiom H3 : in_range5(d)

axiom H4 : in_range1(v)

axiom H5 : in_range4(i)

axiom H6 : (((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2 }
  }) = 0) -> (to_rep1(t_old__split_fields) = 0)) and ((not (size({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } }) = 0)) ->
  (((not (to_rep1(t_old__split_fields) = 0)) and (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } },
  to_rep1(t_old__split_fields)) = true)) and (ordered_leafs({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } },
  to_rep1(t_old__split_fields), t_old__split_fields3) = true))))

axiom H7 : ((0 <  size({ us_split_fields5 = { rec__binary_trees__forest__s =
  t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2 }
  })) and ((not (to_rep((t_old__split_fields3[l])) = v)) and (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } },
  to_rep1(t_old__split_fields))[l])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((((v <  to_rep((t_old__split_fields3[l]))) -> (d = 0)) and
  ((not (v <  to_rep((t_old__split_fields3[l])))) -> (d = 1))) and ((peek({
  us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } }, l, d) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t_old__split_fields))[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t_old__split_fields))[i4])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t_old__split_fields))[l])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t_old__split_fields))[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t_old__split_fields))[i4])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t_old__split_fields))[l])).us_split_fields1).rec__tree_model__path_type__a,
   n))))) -> (((get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t_old__split_fields))[l])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t_old__split_fields))[i4])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (v <  to_rep((t_old__split_fields3[i4])))) and ((not (get((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t_old__split_fields))[l])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t_old__split_fields))[i4])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((t_old__split_fields3[i4])) <  v))))))) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = (size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } }) + 1)) and
  ((to_rep1(t) = to_rep1(t_old__split_fields)) and ((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep1(t)) = true) and
  ((not (i = 0)) and ((peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  l, d) = i) and
  ((forall j14:int. (((1 <= j14) and (j14 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__k = true) or
   (j14 = i))))) and
  ((forall j14:int. (((1 <= j14) and (j14 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall j14:int. (((1 <= j14) and (j14 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } }, to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a,
   n))))) and (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t_old__split_fields1; rec__binary_trees__forest__c = t_old__split_fields2
   } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  ((is_add((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t))[l])).us_split_fields1).rec__tree_model__path_type__a, d,
  (((model__({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } },
  to_rep1(t))[i])).us_split_fields1).rec__tree_model__path_type__a) = true) and
  ((forall j14:int. (((1 <= j14) and (j14 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t_old__split_fields1;
   rec__binary_trees__forest__c = t_old__split_fields2 } },
   to_rep1(t))[j14])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (to_rep((t3[j14])) = to_rep((t_old__split_fields3[j14])))))) and
  (to_rep((t3[i])) = v)))))))))))))))))

axiom H8 : (result18 = ki)

axiom H9 : (ki1 = 1)

axiom H10 : (1 <= ki1)

axiom H11 : (ki1 <= 100)

axiom H12 : (not (ki1 = i))

axiom H13 : (1 <= j6)

axiom H14 : (j6 <= 100)

axiom H15 : ((o146 = to_rep1(t)) and in_range3(to_rep1(t)))

axiom H16 : ((temp___1881 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  o146)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1881[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1881[o146])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1881[o146])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> ((not (i4 = o146)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1881[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t1; rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1881[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
   (((((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o146))) -> (is_add((((temp___1881[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4),
   (((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o146)))) ->
   (length((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
  (((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j14:int. (((1 <= j14) and (j14 <= 100)) ->
  ((((((temp___1881[j14])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1881[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1881[i4])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1881[j14])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j14 = i4)))))))))))))

axiom H17 : ({ us_split_fields1 = { rec__tree_model__path_type__a = o147;
  rec__tree_model__path_type__k = o148 } } = (temp___1881[ki1]))

axiom H18 : ((o149 = o147) and (o150 = o148))

axiom H19 : (result24 = o150)

axiom H20 : ((result24 = true) -> ((o141 = to_rep1(t)) and
  in_range3(to_rep1(t))))

axiom H21 : ((result24 = true) -> ((temp___1882 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, o141)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1882[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1882[o141])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1882[o141])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> ((not (i4 = o141)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1882[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t1; rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1882[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
   (((((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o141))) -> (is_add((((temp___1882[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4),
   (((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o141)))) ->
   (length((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
  (((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j14:int. (((1 <= j14) and (j14 <= 100)) ->
  ((((((temp___1882[j14])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1882[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1882[i4])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1882[j14])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j14 = i4))))))))))))))

axiom H22 : ((result24 = true) -> ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o142; rec__tree_model__path_type__k = o143
  } } = (temp___1882[j6])))

axiom H23 : ((result24 = true) -> ((o144 = o142) and (o145 = o143)))

axiom H24 : ((result24 = true) -> (o151 = o145))

axiom H25 : ((not (result24 = true)) -> (o151 = false))

axiom H26 : ((((o151 = true) and (not (j6 = i))) -> (result23 = true)) and
  ((not ((o151 = true) and (not (j6 = i)))) -> (result23 = false)))

axiom H27 : ((result23 = true) -> ((o135 = to_rep1(t)) and
  in_range3(to_rep1(t))))

axiom H28 : ((result23 = true) -> ((temp___1884 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, o135)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1884[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1884[o135])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1884[o135])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> ((not (i4 = o135)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1884[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t1; rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1884[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
   (((((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o135))) -> (is_add((((temp___1884[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4),
   (((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o135)))) ->
   (length((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
  (((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j14:int. (((1 <= j14) and (j14 <= 100)) ->
  ((((((temp___1884[j14])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1884[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1884[i4])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1884[j14])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j14 = i4))))))))))))))

axiom H29 : ((result23 = true) -> ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o136; rec__tree_model__path_type__k = o137
  } } = (temp___1884[j6])))

axiom H30 : ((result23 = true) -> ((o138 = o136) and (o139 = o137)))

axiom H31 : ((result23 = true) -> (o140 = o138))

axiom H32 : ((result23 = true) -> ((o129 = to_rep1(t)) and
  in_range3(to_rep1(t))))

axiom H33 : ((result23 = true) -> ((temp___1883 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, o129)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1883[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1883[o129])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1883[o129])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> ((not (i4 = o129)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1883[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t1; rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1883[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
   (((((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o129))) -> (is_add((((temp___1883[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4),
   (((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o129)))) ->
   (length((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
  (((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j14:int. (((1 <= j14) and (j14 <= 100)) ->
  ((((((temp___1883[j14])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1883[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1883[i4])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1883[j14])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j14 = i4))))))))))))))

axiom H34 : ((result23 = true) -> ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o130; rec__tree_model__path_type__k = o131
  } } = (temp___1883[ki1])))

axiom H35 : ((result23 = true) -> ((o132 = o130) and (o133 = o131)))

axiom H36 : ((result23 = true) -> (o134 = o132))

axiom H37 : ((result23 = true) ->
  ((((forall n:int. (((1 <= n) and (n <= (0 + length(o134)))) -> (get(o134,
     n) = get(o140, n)))) -> (result22 = match_bool(bool_lt(length(o134),
  length(o140)), true, false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(o134)))) ->
        (get(o134, n) = get(o140, n))))) ->
  (result22 = match_bool(bool_lt(length(o134), length(o140)), false,
  false)))) and ((result22 = true) <-> ((length(o134) <  length(o140)) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(o134)))) -> (get(o134,
  n) = get(o140, n))))))))

axiom H38 : ((not (result23 = true)) -> (result22 = false))

axiom H39 : (result22 = true)

axiom H40 : ((o158 = to_rep1(t)) and in_range3(to_rep1(t)))

axiom H41 : ((temp___1880 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  o158)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1880[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1880[o158])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1880[o158])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> ((not (i4 = o158)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1880[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t1; rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1880[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
   (((((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o158))) -> (is_add((((temp___1880[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4),
   (((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o158)))) ->
   (length((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
  (((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j14:int. (((1 <= j14) and (j14 <= 100)) ->
  ((((((temp___1880[j14])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1880[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1880[i4])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1880[j14])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j14 = i4)))))))))))))

axiom H42 : ({ us_split_fields1 = { rec__tree_model__path_type__a = o159;
  rec__tree_model__path_type__k = o160 } } = (temp___1880[ki1]))

axiom H43 : ((o161 = o159) and (o162 = o160))

axiom H44 : (o163 = o161)

axiom H45 : ((o164 = length(o163)) and (in_range6(o164) and
  ((0 + o164) <= 2147483647)))

axiom H46 : (o165 = (o164 + 1))

axiom H47 : ((o166 = o165) and in_range2(o165))

axiom H48 : ((o152 = to_rep1(t)) and in_range3(to_rep1(t)))

axiom H49 : ((temp___1879 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  o152)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1879[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1879[o152])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1879[o152])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) -> ((not (i4 = o152)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1879[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t1; rec__binary_trees__forest__c = t2 } }, i4) = 0)) and
   ((((temp___1879[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
   (((((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o152))) -> (is_add((((temp___1879[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
   i4)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } }, i4),
   (((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i4 = o152)))) ->
   (length((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i4:int. (((1 <= i4) and (i4 <= 100)) ->
  (((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j14:int. (((1 <= j14) and (j14 <= 100)) ->
  ((((((temp___1879[j14])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1879[j14])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1879[i4])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1879[j14])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j14 = i4)))))))))))))

axiom H50 : ({ us_split_fields1 = { rec__tree_model__path_type__a = o153;
  rec__tree_model__path_type__k = o154 } } = (temp___1879[j6]))

axiom H51 : ((o155 = o153) and (o156 = o154))

axiom H52 : (o157 = o155)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (1 <= o166)
