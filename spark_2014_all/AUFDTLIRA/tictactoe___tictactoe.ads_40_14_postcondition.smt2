(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant1 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun get_line__4 (tuple0) us_t)
(declare-fun get_line__4__function_guard (us_t tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant1 (get_line__4 us_void_param) true false true true) :pattern ((get_line__4 us_void_param)))))
(declare-sort slot 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (slot slot) Bool)
(declare-const dummy4 slot)
(declare-datatypes () ((slot__ref (mk_slot__ref (slot__content slot)))))
(define-fun slot__ref___projection ((a slot__ref)) slot (slot__content a))
(declare-fun to_rep2 (slot) Int)
(declare-fun of_rep2 (Int) slot)
(assert (forall ((x slot)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x slot)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int slot))))))
(declare-fun slide1 ((Array Int slot) Int Int) (Array Int slot))
(assert (forall ((a (Array Int slot))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int slot))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int slot)) (a__first Int) (a__last Int) (b (Array Int slot)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep2 (select a temp___idx_173)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int slot)) (b (Array Int slot))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep2 (select a temp___idx_173)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-const dummy5 (Array Int slot))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int slot)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int slot)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int slot)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int slot))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int slot))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int slot))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 ((Array Int slot) (Array Int slot)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int slot)))))))
(declare-fun slide2 ((Array Int (Array Int slot)) Int Int) (Array Int (Array Int slot)))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((first2 Int)) (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2))))))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int slot))) (a__first Int) (a__last Int) (b (Array Int (Array Int slot))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq2 (select a temp___idx_174) 1 3 (select b (+ (- b__first a__first) temp___idx_174)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq2 (select a temp___idx_174) 1 3 (select b (+ (- b__first a__first) temp___idx_174)) 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)
(declare-fun num_free_slots__function_guard (Int (Array Int (Array Int slot))) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (natural natural) Bool)
(declare-const dummy6 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range5 temp___expr_39)))
(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)
(declare-fun count_free_slots__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (dynamic_invariant2 (num_free_slots tictactoe__my_board) true false true true) :pattern ((num_free_slots tictactoe__my_board)))))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3 tictactoe__my_board)) :pattern ((num_free_slots tictactoe__my_board)))))
(declare-fun is_full ((Array Int (Array Int slot))) Bool)
(declare-fun is_full__function_guard (Bool (Array Int (Array Int slot))) Bool)
(assert true)
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (= (is_full tictactoe__my_board) true) (= (num_free_slots tictactoe__my_board) 0)) :pattern ((is_full tictactoe__my_board)))))
(declare-sort pos 0)
(declare-fun posqtint (pos) Int)
(assert (forall ((i pos)) (and (<= 1 (posqtint i)) (<= (posqtint i) 3))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (pos pos) Bool)
(declare-const dummy7 pos)
(declare-datatypes () ((pos__ref (mk_pos__ref (pos__content pos)))))
(define-fun pos__ref___projection ((a pos__ref)) pos (pos__content a))
(define-fun to_rep3 ((x pos)) Int (posqtint x))
(declare-fun of_rep3 (Int) pos)
(assert (forall ((x pos)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x pos)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tictactoe__position__x pos) (rec__tictactoe__position__y pos)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) pos (rec__tictactoe__position__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) pos (rec__tictactoe__position__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq4 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep3 (rec__tictactoe__position__x (us_split_fields1 a))) (to_rep3 (rec__tictactoe__position__x (us_split_fields1 b)))) (= (to_rep3 (rec__tictactoe__position__y (us_split_fields1 a))) (to_rep3 (rec__tictactoe__position__y (us_split_fields1 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const tictactoe__position__x__first__bit Int)
(declare-const tictactoe__position__x__last__bit Int)
(declare-const tictactoe__position__x__position Int)
(assert (<= 0 tictactoe__position__x__first__bit))
(assert (< tictactoe__position__x__first__bit tictactoe__position__x__last__bit))
(assert (<= 0 tictactoe__position__x__position))
(declare-const tictactoe__position__y__first__bit Int)
(declare-const tictactoe__position__y__last__bit Int)
(declare-const tictactoe__position__y__position Int)
(assert (<= 0 tictactoe__position__y__first__bit))
(assert (< tictactoe__position__y__first__bit tictactoe__position__y__last__bit))
(assert (<= 0 tictactoe__position__y__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((position__ref (mk_position__ref (position__content us_rep)))))
(define-fun position__ref___projection ((a position__ref)) us_rep (position__content a))
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep))))))
(declare-fun slide3 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first2 Int)) (! (= (slide3 a first2 first2) a) :pattern ((slide3 a first2 first2))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (bool_eq4 (select a temp___idx_175) (select b (+ (- b__first a__first) temp___idx_175))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (bool_eq4 (select a temp___idx_175) (select b (+ (- b__first a__first) temp___idx_175))) true))))))))
(declare-const dummy9 (Array Int us_rep))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int us_rep)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq9 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int us_rep)))))))
(declare-fun slide4 ((Array Int (Array Int us_rep)) Int Int) (Array Int (Array Int us_rep)))
(assert (forall ((a (Array Int (Array Int us_rep)))) (forall ((first2 Int)) (! (= (slide4 a first2 first2) a) :pattern ((slide4 a first2 first2))))))
(assert (forall ((a (Array Int (Array Int us_rep)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int (Array Int us_rep))) (a__first Int) (a__last Int) (b (Array Int (Array Int us_rep))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_176 Int)) (=> (and (<= a__first temp___idx_176) (<= temp___idx_176 a__last)) (= (bool_eq5 (select a temp___idx_176) 1 3 (select b (+ (- b__first a__first) temp___idx_176)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int us_rep))) (b (Array Int (Array Int us_rep)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_176 Int)) (=> (and (<= a__first temp___idx_176) (<= temp___idx_176 a__last)) (= (bool_eq5 (select a temp___idx_176) 1 3 (select b (+ (- b__first a__first) temp___idx_176)) 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun won ((Array Int (Array Int slot)) (Array Int (Array Int us_rep))) Int)
(declare-fun won__function_guard (Int (Array Int (Array Int slot)) (Array Int (Array Int us_rep))) Bool)
(define-fun dynamic_invariant3 ((temp___expr_577 Int) (temp___is_init_573 Bool) (temp___skip_constant_574 Bool) (temp___do_toplevel_575 Bool) (temp___do_typ_inv_576 Bool)) Bool (=> (or (= temp___is_init_573 true) (<= 0 2)) (in_range4 temp___expr_577)))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (forall ((tictactoe__all_solutions (Array Int (Array Int us_rep)))) (! (dynamic_invariant3 (won tictactoe__my_board tictactoe__all_solutions) true false true true) :pattern ((won tictactoe__my_board tictactoe__all_solutions))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const s__first integer)
(declare-const s__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant6 ((temp___expr_584 Int) (temp___is_init_580 Bool) (temp___skip_constant_581 Bool) (temp___do_toplevel_582 Bool) (temp___do_typ_inv_583 Bool)) Bool (=> (or (= temp___is_init_580 true) (<= 1 3)) (in_range6 temp___expr_584)))
(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)
(declare-fun one_free_slot__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (dynamic_invariant4 (one_free_slot x y tictactoe__my_board) true false true true)) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep2 (let ((temp___615 (select tictactoe__my_board x))) (select temp___615 y))) 0) 1 0))) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (dynamic_invariant4 (count_free_slots x y tictactoe__my_board) true false true true)) :pattern ((count_free_slots x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y true true true true)) (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot 1 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 1 3 tictactoe__my_board) 0)) (ite (<= 2 x) (+ (+ (one_free_slot 2 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 2 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 2 3 tictactoe__my_board) 0)) 0)) (ite (<= 3 x) (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 3 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0)))) :pattern ((count_free_slots x y tictactoe__my_board))))))
(declare-const rliteral pos)
(assert (= (posqtint rliteral) 1))
(declare-const rliteral1 pos)
(assert (= (posqtint rliteral1) 2))
(declare-const rliteral2 pos)
(assert (= (posqtint rliteral2) 3))
(declare-const my_board (Array Int (Array Int slot)))
(declare-const p__split_fields pos)
(declare-const p__split_fields1 pos)
(declare-const all_solutions (Array Int (Array Int us_rep)))
(declare-const temp___851 pos)
(declare-const temp___8511 pos)
(declare-const tictactoe__player_play__B_2__s__assume (Array Int character))
(declare-const tictactoe__player_play__B_2__s__assume1 t)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 character)
(declare-const o3 Int)
(declare-const p__split_fields2 pos)
(declare-const p__split_fields3 pos)
(declare-const s (Array Int character))
(declare-const found Bool)
(declare-const c Int)
(declare-const result (Array Int character))
(declare-const s1 (Array Int character))
(declare-const result1 Bool)
(declare-const found1 Bool)
(declare-const result2 Bool)
(declare-const result3 Int)
(declare-const c1 Int)
(declare-const result4 pos)
(declare-const result5 pos)
(declare-const p__split_fields4 pos)
(declare-const p__split_fields5 pos)
(declare-const result6 pos)
(declare-const result7 pos)
(declare-const p__split_fields6 pos)
(declare-const p__split_fields7 pos)
(declare-const result8 us_split_fields__ref)
(declare-const p__split_fields8 us_split_fields)
(declare-const result9 us_split_fields__ref)
(declare-const p__split_fields9 us_split_fields)
(declare-const result10 us_split_fields__ref)
(declare-const p__split_fields10 us_split_fields)
(declare-const result11 us_split_fields__ref)
(declare-const p__split_fields11 us_split_fields)
(declare-const result12 us_split_fields__ref)
(declare-const p__split_fields12 us_split_fields)
(declare-const result13 us_split_fields__ref)
(declare-const p__split_fields13 us_split_fields)
(declare-const result14 us_split_fields__ref)
(declare-const p__split_fields14 us_split_fields)
(declare-const result15 us_split_fields__ref)
(declare-const p__split_fields15 us_split_fields)
(declare-const result16 bool__ref)
(declare-const found2 Bool)
(declare-const p__split_fields16 us_split_fields__ref)
(declare-const found3 bool__ref)
(declare-const c2 int__ref)
(declare-const p__split_fields17 us_split_fields)
(declare-const found4 Bool)
(declare-const c3 Int)
(declare-const p__split_fields18 us_split_fields__ref)
(declare-const s2 map__ref)
(declare-const found5 bool__ref)
(declare-const c4 int__ref)
(declare-const p__split_fields19 us_split_fields)
(declare-const s3 (Array Int character))
(declare-const found6 Bool)
(declare-const c5 Int)
(declare-const p__split_fields20 us_split_fields__ref)
(declare-const s4 map__ref)
(declare-const found7 bool__ref)
(declare-const c6 int__ref)
(declare-const p__split_fields21 us_split_fields)
(declare-const s5 (Array Int character))
(declare-const found8 Bool)
(declare-const c7 Int)
(declare-const my_board1 (Array Int (Array Int slot)))
(declare-const my_board2 map__ref2)
(declare-const p__split_fields22 us_split_fields__ref)
(declare-const s6 map__ref)
(declare-const found9 bool__ref)
(declare-const c8 int__ref)
(declare-const my_board3 (Array Int (Array Int slot)))
(declare-const p__split_fields23 us_split_fields)
(declare-const s7 (Array Int character))
(declare-const found10 Bool)
(declare-const c9 Int)
(define-fun p__split_fields24 () us_split_fields (mk___split_fields p__split_fields6 p__split_fields7))
(define-fun p__split_fields25 () us_split_fields (mk___split_fields p__split_fields4 p__split_fields5))
(define-fun tictactoe__player_play__B_2__s__assume2 () us_t (mk___t tictactoe__player_play__B_2__s__assume tictactoe__player_play__B_2__s__assume1))
(assert (and (not (= (is_full my_board) true)) (= (won my_board all_solutions) 0)))
(assert (and (= p__split_fields temp___851) (= p__split_fields1 temp___8511)))
(assert (and (= tictactoe__player_play__B_2__s__assume2 (get_line__4 Tuple0)) (dynamic_invariant1 tictactoe__player_play__B_2__s__assume2 true false true true)))
(assert (= s result))
(assert (= s1 tictactoe__player_play__B_2__s__assume))
(assert (= (to_rep1 s__first) (to_rep1 (first tictactoe__player_play__B_2__s__assume1))))
(assert (= (to_rep1 s__last) (to_rep1 (last tictactoe__player_play__B_2__s__assume1))))
(assert (dynamic_property 1 2147483647 (to_rep1 s__first) (to_rep1 s__last)))
(assert (= found result1))
(assert (= found1 (distinct 1 0)))
(assert (= c2 (mk_int__ref c1)))
(assert (= found3 (mk_bool__ref found2)))
(assert (= p__split_fields16 (mk___split_fields__ref p__split_fields24)))
(assert (= c3 c1))
(assert (= found4 found2))
(assert (= p__split_fields17 p__split_fields24))
(assert (=> (<= (to_rep1 s__first) (to_rep1 s__last)) (= o (+ (- (to_rep1 s__last) (to_rep1 s__first)) 1))))
(assert (=> (not (<= (to_rep1 s__first) (to_rep1 s__last))) (= o 0)))
(assert (= result2 (ite (<= 1 o) true false)))
(assert (= result2 true))
(assert (and (<= (to_rep1 s__first) (to_rep1 s__first)) (<= (to_rep1 s__first) (to_rep1 s__last))))
(assert (= o1 (to_rep1 s__first)))
(assert (= o2 (select s1 o1)))
(assert (= o3 (to_rep o2)))
(assert (= c result3))
(assert (= c1 o3))
(assert (in_range3 c1))
(assert (= result4 p__split_fields2))
(assert (= result5 p__split_fields3))
(assert (= rliteral p__split_fields4))
(assert (= rliteral p__split_fields5))
(assert (=> (= c1 49) (= result6 p__split_fields4)))
(assert (=> (= c1 49) (= result7 p__split_fields5)))
(assert (=> (= c1 49) (= rliteral p__split_fields6)))
(assert (=> (= c1 49) (= rliteral p__split_fields7)))
(assert (=> (= c1 49) (= found2 found1)))
(assert (=> (not (= c1 49)) (=> (= c1 50) (= result8 (mk___split_fields__ref p__split_fields25)))))
(assert (=> (not (= c1 49)) (=> (= c1 50) (= p__split_fields8 (mk___split_fields rliteral1 rliteral)))))
(assert (=> (not (= c1 49)) (=> (= c1 50) (= found2 found1))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= result9 (mk___split_fields__ref p__split_fields25))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= p__split_fields9 (mk___split_fields rliteral2 rliteral))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (= c1 51) (= found2 found1)))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (= c1 52) (= result10 (mk___split_fields__ref p__split_fields25)))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (= c1 52) (= p__split_fields10 (mk___split_fields rliteral rliteral1)))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (= c1 52) (= found2 found1))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (= c1 53) (= result11 (mk___split_fields__ref p__split_fields25))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (= c1 53) (= p__split_fields11 (mk___split_fields rliteral1 rliteral1))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (= c1 53) (= found2 found1)))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (= c1 54) (= result12 (mk___split_fields__ref p__split_fields25)))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (= c1 54) (= p__split_fields12 (mk___split_fields rliteral2 rliteral1)))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (= c1 54) (= found2 found1))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (= c1 55) (= result13 (mk___split_fields__ref p__split_fields25))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (= c1 55) (= p__split_fields13 (mk___split_fields rliteral rliteral2))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (= c1 55) (= found2 found1)))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (= c1 56) (= result14 (mk___split_fields__ref p__split_fields25)))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (= c1 56) (= p__split_fields14 (mk___split_fields rliteral1 rliteral2)))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (= c1 56) (= found2 found1))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (= c1 57) (= result15 (mk___split_fields__ref p__split_fields25))))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (= c1 57) (= p__split_fields15 (mk___split_fields rliteral2 rliteral2))))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (= c1 57) (= found2 found1)))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (not (= c1 57)) (= result16 (mk_bool__ref found1))))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (not (= c1 57)) (= found2 (distinct 0 0))))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (=> (not (= c1 57)) (= p__split_fields15 p__split_fields25)))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (=> (not (= c1 56)) (= p__split_fields14 p__split_fields15))))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (=> (not (= c1 55)) (= p__split_fields13 p__split_fields14)))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (=> (not (= c1 54)) (= p__split_fields12 p__split_fields13))))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (=> (not (= c1 53)) (= p__split_fields11 p__split_fields12)))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (=> (not (= c1 52)) (= p__split_fields10 p__split_fields11))))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (=> (not (= c1 51)) (= p__split_fields9 p__split_fields10)))))
(assert (=> (not (= c1 49)) (=> (not (= c1 50)) (= p__split_fields8 p__split_fields9))))
(assert (=> (not (= c1 49)) (= p__split_fields24 p__split_fields8)))
(assert (= found2 true))
(assert (= (to_rep2 (select (select my_board (to_rep3 p__split_fields6)) (to_rep3 p__split_fields7))) 0))
(assert (= c4 c2))
(assert (= found5 found3))
(assert (= s2 (mk_map__ref s1)))
(assert (= p__split_fields18 p__split_fields16))
(assert (= c5 c3))
(assert (= found6 found4))
(assert (= s3 s1))
(assert (= p__split_fields19 p__split_fields17))
(assert (= c6 c4))
(assert (= found7 found5))
(assert (= s4 s2))
(assert (= p__split_fields20 p__split_fields18))
(assert (= c7 c5))
(assert (= found8 found6))
(assert (= s5 s3))
(assert (= p__split_fields21 p__split_fields19))
(assert (= (num_free_slots my_board1) (- (num_free_slots my_board) 1)))
(assert (= c8 c6))
(assert (= found9 found7))
(assert (= s6 s4))
(assert (= p__split_fields22 p__split_fields20))
(assert (= my_board2 (mk_map__ref2 my_board1)))
(assert (= c9 c7))
(assert (= found10 found8))
(assert (= s7 s5))
(assert (= p__split_fields23 p__split_fields21))
(assert (= my_board3 my_board1))
(assert (not (= (num_free_slots (map__content2 my_board2)) (- (num_free_slots my_board) 1))))
(check-sat)
(exit)
