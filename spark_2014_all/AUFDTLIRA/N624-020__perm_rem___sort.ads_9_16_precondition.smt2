(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(declare-sort true_bool 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (true_bool true_bool) Bool)
(declare-const dummy1 true_bool)
(declare-datatypes () ((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool (true_bool__content a))
(define-fun dynamic_invariant1 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 1)) (in_range2 temp___expr_136)))
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (natural natural) Bool)
(declare-const dummy3 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (index index) Bool)
(declare-const dummy4 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-fun to_rep1 (natural) Int)
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range3 f) (=> (in_range3 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range3 low) (and (in_range3 high) (=> (<= low high) (and (in_range5 low) (in_range5 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content a))
(declare-fun is_perm (us_t us_t) Bool)
(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)
(declare-fun invariant__ (us_t) Bool)
(declare-fun invariant____function_guard (Bool us_t) Bool)
(declare-fun remove (us_t Int) us_t)
(declare-fun remove__function_guard (us_t us_t Int) Bool)
(assert (forall ((a us_t) (b us_t)) (! (= (= (is_perm a b) true) (or (and (= (length a) 0) (= (length b) 0)) (exists ((ia Int)) (and (and (<= (first1 a) ia) (<= ia (last1 a))) (exists ((ib Int)) (and (and (<= (first1 b) ib) (<= ib (last1 b))) (and (= (to_rep1 (select (to_array a) ia)) (to_rep1 (select (to_array b) ib))) (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern ((is_perm a b)))))
(define-fun dynamic_invariant2 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property 1 100 (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun perm_reflexive (us_t us_t) Int)
(declare-fun perm_reflexive__function_guard (Int us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t)) (! (=> (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (= (bool_eq (to_array a) (first1 a) (last1 a) (to_array b) (first1 b) (last1 b)) true)))) (let ((result (perm_reflexive a b))) (and (=> (= (of_int result) true) (= (is_perm a b) true)) (dynamic_invariant1 result true false true)))) :pattern ((perm_reflexive a b)))))
(declare-fun perm_transitive (us_t us_t us_t) Int)
(declare-fun perm_transitive__function_guard (Int us_t us_t us_t) Bool)
(assert (forall ((a us_t) (b us_t) (c us_t)) (! (=> (and (and (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true true true)) (dynamic_invariant2 c true true true)) (and (= (invariant__ a) true) (and (= (invariant__ b) true) (and (= (invariant__ c) true) (and (= (is_perm a b) true) (= (is_perm b c) true)))))) (let ((result (perm_transitive a b c))) (and (=> (= (of_int result) true) (= (is_perm a c) true)) (dynamic_invariant1 result true false true)))) :pattern ((perm_transitive a b c)))))
(declare-sort tarray_typeP1 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tarray_typeP1 tarray_typeP1) Bool)
(declare-const dummy6 tarray_typeP1)
(declare-datatypes () ((tarray_typeP1__ref (mk_tarray_typeP1__ref (tarray_typeP1__content tarray_typeP1)))))
(define-fun tarray_typeP1__ref___projection ((a tarray_typeP1__ref)) tarray_typeP1 (tarray_typeP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant3 ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 100)) (in_range5 temp___expr_142)))
(declare-fun index_of_minimum ((Array Int natural) Int Int) Int)
(declare-fun index_of_minimum__function_guard (Int (Array Int natural) Int Int) Bool)
(assert (forall ((values (Array Int natural))) (forall ((first2 Int) (last2 Int)) (! (=> (and (and (dynamic_invariant3 first2 true true true) (dynamic_invariant3 last2 true true true)) (and (<= first2 last2) (and (and (<= 1 first2) (<= first2 100)) (and (<= 1 last2) (<= last2 100))))) (let ((result (index_of_minimum values first2 last2))) (and (and (<= first2 result) (<= result last2)) (dynamic_invariant result true false true)))) :pattern ((index_of_minimum values first2 last2))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const init (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort t11b 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (t11b t11b) Bool)
(declare-const dummy7 t11b)
(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range4 temp___expr_33)))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_15)))
(assert true)
(assert (forall ((a us_t)) (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern ((invariant__ a)))))
(assert (forall ((a us_t)) (forall ((i Int)) (! (=> (and (and (dynamic_invariant2 a true true true) (dynamic_invariant3 i true true true)) (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a))))) (let ((result (remove a i))) (and (and (= (invariant__ result) true) (and (= (last1 result) (- (last1 a) 1)) (and (forall ((k Int)) (=> (and (<= 1 k) (<= k (- i 1))) (= (to_rep1 (select (to_array a) k)) (to_rep1 (select (to_array result) k))))) (and (forall ((k Int)) (=> (and (<= (+ i 1) k) (<= k (last1 a))) (= (to_rep1 (select (to_array a) k)) (to_rep1 (select (to_array result) (- k 1)))))) (forall ((k Int)) (=> (and (<= i k) (<= k (- (last1 a) 1))) (= (to_rep1 (select (to_array a) (+ k 1))) (to_rep1 (select (to_array result) k))))))))) (dynamic_invariant2 result true false true)))) :pattern ((remove a i))))))
(declare-const values (Array Int natural))
(declare-const smallest Int)
(declare-const prec (Array Int natural))
(declare-const hr Int)
(declare-const current Int)
(declare-const o Int)
(declare-const temp___206 (Array Int natural))
(declare-const temp___205 Int)
(declare-const temp___204 Int)
(declare-const temp___203 (Array Int natural))
(declare-const temp___202 Int)
(declare-const temp___201 (Array Int natural))
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const us Bool)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const us1 Bool)
(declare-const values1 (Array Int natural))
(declare-const smallest1 Int)
(declare-const result (Array Int natural))
(declare-const prec1 (Array Int natural))
(declare-const result1 Int)
(declare-const hr1 Int)
(declare-const result2 Int)
(declare-const current1 Int)
(declare-const result3 Int)
(declare-const smallest2 Int)
(declare-const result4 (Array Int natural))
(declare-const prec2 (Array Int natural))
(declare-const values2 (Array Int natural))
(declare-const result5 Int)
(declare-const hr2 Int)
(declare-const values3 (Array Int natural))
(declare-const smallest3 Int)
(declare-const prec3 (Array Int natural))
(declare-const hr3 Int)
(declare-const current2 Int)
(declare-const result6 Int)
(declare-const current3 Int)
(declare-const result7 Int)
(declare-const smallest4 Int)
(declare-const result8 (Array Int natural))
(declare-const prec4 (Array Int natural))
(declare-const values4 (Array Int natural))
(declare-const result9 Int)
(declare-const hr4 Int)
(declare-const values5 (Array Int natural))
(declare-const smallest5 Int)
(declare-const prec5 (Array Int natural))
(declare-const hr5 Int)
(declare-const current4 Int)
(declare-const values6 (Array Int natural))
(declare-const smallest6 Int)
(declare-const prec6 (Array Int natural))
(declare-const hr6 Int)
(declare-const current5 Int)
(declare-const values7 (Array Int natural))
(declare-const smallest7 int__ref)
(declare-const prec7 map__ref)
(declare-const hr7 int__ref)
(declare-const current6 int__ref)
(declare-const values8 (Array Int natural))
(declare-const smallest8 Int)
(declare-const prec8 (Array Int natural))
(declare-const hr8 Int)
(declare-const current7 Int)
(declare-const values9 map__ref)
(declare-const smallest9 int__ref)
(declare-const prec9 map__ref)
(declare-const hr9 int__ref)
(declare-const current8 int__ref)
(declare-const values10 (Array Int natural))
(declare-const smallest10 Int)
(declare-const prec10 (Array Int natural))
(declare-const hr10 Int)
(declare-const current9 Int)
(declare-const values11 map__ref)
(declare-const smallest11 int__ref)
(declare-const prec11 map__ref)
(declare-const hr11 int__ref)
(declare-const current10 int__ref)
(declare-const values12 (Array Int natural))
(declare-const smallest12 Int)
(declare-const prec12 (Array Int natural))
(declare-const hr12 Int)
(declare-const current11 Int)
(assert (=> (<= 1 2147483647) (in_range1 smallest)))
(assert (= values init))
(assert (= (mk_map__ref result) (mk_map__ref prec)))
(assert (= prec1 values))
(assert (=> (<= 1 1) (in_range2 hr)))
(assert (and (= o (perm_reflexive (mk___t values (mk 1 100)) (mk___t values (mk 1 100)))) (and (in_range2 o) (=> (= (of_int o) true) (= (is_perm (mk___t values (mk 1 100)) (mk___t values (mk 1 100))) true)))))
(assert (= (mk_int__ref result1) (mk_int__ref hr)))
(assert (= hr1 o))
(assert (= (mk_int__ref result2) (mk_int__ref current)))
(assert (= current1 1))
(assert (=> (and (<= 1 current1) (<= current1 99)) (and (and (= temp___206 values) (and (= temp___205 current1) (and (= temp___204 smallest) (and (= temp___203 values) (and (= temp___202 hr1) (and (= temp___201 prec1) (and (and (and (= o1 (index_of_minimum values current1 100)) (and (in_range1 o1) (and (<= current1 o1) (<= o1 100)))) (and (= (mk_int__ref result3) (mk_int__ref smallest)) (= smallest2 o1))) (and (ite (not (= smallest2 current1)) (and (and (= prec1 result4) (= prec2 values)) (and (= (is_perm (mk___t values (mk 1 100)) (mk___t values2 (mk 1 100))) true) (and (and (= o2 (perm_transitive (mk___t init (mk 1 100)) (mk___t prec2 (mk 1 100)) (mk___t values2 (mk 1 100)))) (and (in_range2 o2) (=> (= (of_int o2) true) (= (is_perm (mk___t init (mk 1 100)) (mk___t values2 (mk 1 100))) true)))) (and (= hr1 result5) (= hr2 o2))))) (and (and (= hr2 hr1) (and (= prec2 prec1) (= values2 values))) (and (= hr2 hr1) (and (= prec2 prec1) (= values2 values1))))) (and (= (is_perm (mk___t temp___206 (mk 1 100)) (mk___t values3 (mk 1 100))) true) (and (and (and (and (=> (<= 1 1) (in_range2 hr3)) (=> (<= 1 2147483647) (in_range1 smallest3))) (=> (<= 1 99) (in_range7 current2))) (and (<= 1 current2) (<= current2 99))) (= current2 99))))))))))) (and (and (= current6 (mk_int__ref current2)) (and (= hr7 (mk_int__ref hr3)) (and (= prec7 (mk_map__ref prec3)) (and (= smallest7 (mk_int__ref smallest3)) (= values3 values7))))) (and (= current7 current2) (and (= hr8 hr3) (and (= prec8 prec3) (and (= smallest8 smallest3) (= values8 values3)))))))))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= current8 current6)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= hr9 hr7)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= prec9 prec7)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= smallest9 smallest7)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= values9 (mk_map__ref values7))))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= current9 current7)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= hr10 hr8)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= prec10 prec8)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= smallest10 smallest8)))
(assert (=> (and (<= 1 current1) (<= current1 99)) (= values10 values8)))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= current8 (mk_int__ref current1))))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= hr9 (mk_int__ref hr1))))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= prec9 (mk_map__ref prec1))))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= smallest9 (mk_int__ref smallest))))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= values9 (mk_map__ref values))))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= current9 current1)))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= hr10 hr1)))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= prec10 prec1)))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= smallest10 smallest1)))
(assert (=> (not (and (<= 1 current1) (<= current1 99))) (= values10 values1)))
(assert (= current10 current8))
(assert (= hr11 hr9))
(assert (= prec11 prec9))
(assert (= smallest11 smallest9))
(assert (= values11 values9))
(assert (= current11 current9))
(assert (= hr12 hr10))
(assert (= prec12 prec10))
(assert (= smallest12 smallest10))
(assert (= values12 values10))
(assert (not (= (invariant__ (mk___t values (mk 1 100))) true)))
(check-sat)
(exit)
