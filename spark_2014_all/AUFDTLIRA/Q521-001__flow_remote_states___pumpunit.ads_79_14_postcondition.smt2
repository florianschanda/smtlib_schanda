(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort nat_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (nat_type nat_type) Bool)
(declare-const dummy1 nat_type)
(declare-datatypes () ((nat_type__ref (mk_nat_type__ref (nat_type__content nat_type)))))
(define-fun nat_type__ref___projection ((a nat_type__ref)) nat_type (nat_type__content a))
(declare-fun to_rep (nat_type) Int)
(declare-fun of_rep (Int) nat_type)
(assert (forall ((x nat_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x nat_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep1 (character) Int)
(declare-fun of_rep1 (Int) character)
(assert (forall ((x character)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep1 (select a temp___idx_91)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep1 (select a temp___idx_91)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-const dummy3 (Array Int character))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pump__pump_record__name (Array Int character)) (rec__pump__pump_record__resevoir nat_type) (rec__pump__pump_record__price nat_type) (rec__pump__pump_record__remaining nat_type)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) (rec__pump__pump_record__name a))
(define-fun us_split_fields_Resevoir__projection ((a us_split_fields)) nat_type (rec__pump__pump_record__resevoir a))
(define-fun us_split_fields_Price__projection ((a us_split_fields)) nat_type (rec__pump__pump_record__price a))
(define-fun us_split_fields_Remaining__projection ((a us_split_fields)) nat_type (rec__pump__pump_record__remaining a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (bool_eq (rec__pump__pump_record__name (us_split_fields1 a)) 1 10 (rec__pump__pump_record__name (us_split_fields1 b)) 1 10) true) (= (to_rep (rec__pump__pump_record__resevoir (us_split_fields1 a))) (to_rep (rec__pump__pump_record__resevoir (us_split_fields1 b))))) (= (to_rep (rec__pump__pump_record__price (us_split_fields1 a))) (to_rep (rec__pump__pump_record__price (us_split_fields1 b))))) (= (to_rep (rec__pump__pump_record__remaining (us_split_fields1 a))) (to_rep (rec__pump__pump_record__remaining (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const pump__pump_record__name__first__bit Int)
(declare-const pump__pump_record__name__last__bit Int)
(declare-const pump__pump_record__name__position Int)
(assert (<= 0 pump__pump_record__name__first__bit))
(assert (< pump__pump_record__name__first__bit pump__pump_record__name__last__bit))
(assert (<= 0 pump__pump_record__name__position))
(declare-const pump__pump_record__resevoir__first__bit Int)
(declare-const pump__pump_record__resevoir__last__bit Int)
(declare-const pump__pump_record__resevoir__position Int)
(assert (<= 0 pump__pump_record__resevoir__first__bit))
(assert (< pump__pump_record__resevoir__first__bit pump__pump_record__resevoir__last__bit))
(assert (<= 0 pump__pump_record__resevoir__position))
(declare-const pump__pump_record__price__first__bit Int)
(declare-const pump__pump_record__price__last__bit Int)
(declare-const pump__pump_record__price__position Int)
(assert (<= 0 pump__pump_record__price__first__bit))
(assert (< pump__pump_record__price__first__bit pump__pump_record__price__last__bit))
(assert (<= 0 pump__pump_record__price__position))
(declare-const pump__pump_record__remaining__first__bit Int)
(declare-const pump__pump_record__remaining__last__bit Int)
(declare-const pump__pump_record__remaining__position Int)
(assert (<= 0 pump__pump_record__remaining__first__bit))
(assert (< pump__pump_record__remaining__first__bit pump__pump_record__remaining__last__bit))
(assert (<= 0 pump__pump_record__remaining__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((pump_record__ref (mk_pump_record__ref (pump_record__content us_rep)))))
(define-fun pump_record__ref___projection ((a pump_record__ref)) us_rep (pump_record__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun is_waiting (Int) Bool)
(declare-fun is_waiting__function_guard (Bool Int) Bool)
(declare-sort internal_state 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (internal_state internal_state) Bool)
(declare-const dummy5 internal_state)
(declare-datatypes () ((internal_state__ref (mk_internal_state__ref (internal_state__content internal_state)))))
(define-fun internal_state__ref___projection ((a internal_state__ref)) internal_state (internal_state__content a))
(define-fun dynamic_invariant1 ((temp___expr_631 Int) (temp___is_init_627 Bool) (temp___skip_constant_628 Bool) (temp___do_toplevel_629 Bool) (temp___do_typ_inv_630 Bool)) Bool (=> (or (= temp___is_init_627 true) (<= 0 3)) (in_range4 temp___expr_631)))
(assert true)
(assert (forall ((pumpunit__cur_state Int)) (! (= (= (is_waiting pumpunit__cur_state) true) (= pumpunit__cur_state 2)) :pattern ((is_waiting pumpunit__cur_state)))))
(declare-fun is_ready (Int) Bool)
(declare-fun is_ready__function_guard (Bool Int) Bool)
(assert true)
(assert (forall ((pumpunit__cur_state Int)) (! (= (= (is_ready pumpunit__cur_state) true) (= pumpunit__cur_state 1)) :pattern ((is_ready pumpunit__cur_state)))))
(declare-fun is_base (Int) Bool)
(declare-fun is_base__function_guard (Bool Int) Bool)
(assert true)
(assert (forall ((pumpunit__cur_state Int)) (! (= (= (is_base pumpunit__cur_state) true) (= pumpunit__cur_state 3)) :pattern ((is_base pumpunit__cur_state)))))
(declare-const pump_index Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_581 Int) (temp___is_init_577 Bool) (temp___skip_constant_578 Bool) (temp___do_toplevel_579 Bool) (temp___do_typ_inv_580 Bool)) Bool (=> (or (= temp___is_init_577 true) (<= 0 1000)) (in_range2 temp___expr_581)))
(declare-const cur_state Int)
(declare-const cur_pump__split_fields (Array Int character))
(declare-const cur_pump__split_fields1 nat_type)
(declare-const cur_pump__split_fields2 nat_type)
(declare-const cur_pump__split_fields3 nat_type)
(declare-const pump_one__split_fields (Array Int character))
(declare-const pump_one__split_fields1 nat_type)
(declare-const pump_one__split_fields2 nat_type)
(declare-const pump_one__split_fields3 nat_type)
(declare-const pump_two__split_fields (Array Int character))
(declare-const pump_two__split_fields1 nat_type)
(declare-const pump_two__split_fields2 nat_type)
(declare-const pump_two__split_fields3 nat_type)
(declare-const cur_state1 Int)
(declare-const result (Array Int character))
(declare-const result1 nat_type)
(declare-const result2 nat_type)
(declare-const result3 nat_type)
(declare-const cur_pump__split_fields4 (Array Int character))
(declare-const cur_pump__split_fields5 nat_type)
(declare-const cur_pump__split_fields6 nat_type)
(declare-const cur_pump__split_fields7 nat_type)
(declare-const result4 (Array Int character))
(declare-const result5 nat_type)
(declare-const result6 nat_type)
(declare-const result7 nat_type)
(declare-const cur_pump__split_fields8 (Array Int character))
(declare-const cur_pump__split_fields9 nat_type)
(declare-const cur_pump__split_fields10 nat_type)
(declare-const cur_pump__split_fields11 nat_type)
(declare-const result8 Int)
(declare-const cur_state2 Int)
(declare-const cur_state3 Int)
(declare-const cur_pump__split_fields12 (Array Int character))
(declare-const cur_pump__split_fields13 nat_type)
(declare-const cur_pump__split_fields14 nat_type)
(declare-const cur_pump__split_fields15 nat_type)
(declare-const cur_state4 Int)
(declare-const cur_pump__split_fields16 (Array Int character))
(declare-const cur_pump__split_fields17 nat_type)
(declare-const cur_pump__split_fields18 nat_type)
(declare-const cur_pump__split_fields19 nat_type)
(assert (in_range4 cur_state))
(assert (in_range1 pump_index))
(assert (and (or (= (is_base cur_state) true) (= (is_waiting cur_state) true)) (and (<= 1 pump_index) (<= pump_index 2))))
(assert (=> (< pump_index 2) (= result cur_pump__split_fields)))
(assert (=> (< pump_index 2) (= result1 cur_pump__split_fields1)))
(assert (=> (< pump_index 2) (= result2 cur_pump__split_fields2)))
(assert (=> (< pump_index 2) (= result3 cur_pump__split_fields3)))
(assert (=> (< pump_index 2) (= pump_one__split_fields cur_pump__split_fields4)))
(assert (=> (< pump_index 2) (= pump_one__split_fields1 cur_pump__split_fields5)))
(assert (=> (< pump_index 2) (= pump_one__split_fields2 cur_pump__split_fields6)))
(assert (=> (< pump_index 2) (= pump_one__split_fields3 cur_pump__split_fields7)))
(assert (=> (not (< pump_index 2)) (= result4 cur_pump__split_fields)))
(assert (=> (not (< pump_index 2)) (= result5 cur_pump__split_fields1)))
(assert (=> (not (< pump_index 2)) (= result6 cur_pump__split_fields2)))
(assert (=> (not (< pump_index 2)) (= result7 cur_pump__split_fields3)))
(assert (=> (not (< pump_index 2)) (= pump_two__split_fields cur_pump__split_fields8)))
(assert (=> (not (< pump_index 2)) (= pump_two__split_fields1 cur_pump__split_fields9)))
(assert (=> (not (< pump_index 2)) (= pump_two__split_fields2 cur_pump__split_fields10)))
(assert (=> (not (< pump_index 2)) (= pump_two__split_fields3 cur_pump__split_fields11)))
(assert (=> (not (< pump_index 2)) (= (mk___split_fields cur_pump__split_fields4 cur_pump__split_fields5 cur_pump__split_fields6 cur_pump__split_fields7) (mk___split_fields cur_pump__split_fields8 cur_pump__split_fields9 cur_pump__split_fields10 cur_pump__split_fields11))))
(assert (=> (or (= cur_state 2) (= cur_state 3)) (= result8 cur_state)))
(assert (=> (or (= cur_state 2) (= cur_state 3)) (= cur_state2 1)))
(assert (=> (not (or (= cur_state 2) (= cur_state 3))) (= cur_state2 cur_state)))
(assert (=> (not (or (= cur_state 2) (= cur_state 3))) (= cur_state2 cur_state1)))
(assert (= cur_pump__split_fields12 cur_pump__split_fields4))
(assert (= cur_pump__split_fields13 cur_pump__split_fields5))
(assert (= cur_pump__split_fields14 cur_pump__split_fields6))
(assert (= cur_pump__split_fields15 cur_pump__split_fields7))
(assert (= cur_state2 cur_state3))
(assert (= cur_pump__split_fields16 cur_pump__split_fields4))
(assert (= cur_pump__split_fields17 cur_pump__split_fields5))
(assert (= cur_pump__split_fields18 cur_pump__split_fields6))
(assert (= cur_pump__split_fields19 cur_pump__split_fields7))
(assert (= cur_state4 cur_state2))
(assert (not (= (is_ready cur_state3) true)))
(check-sat)
(exit)
