(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort y_coord 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (y_coord y_coord) Bool)
(declare-const dummy2 y_coord)
(declare-datatypes () ((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content a))
(define-fun dynamic_invariant2 ((temp___expr_538 Int) (temp___is_init_535 Bool) (temp___skip_constant_536 Bool) (temp___do_toplevel_537 Bool)) Bool (=> (or (= temp___is_init_535 true) (<= 1 50)) (in_range3 temp___expr_538)))
(declare-sort cell 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (cell cell) Bool)
(declare-const dummy3 cell)
(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content cell)))))
(define-fun cell__ref___projection ((a cell__ref)) cell (cell__content a))
(declare-fun to_rep (cell) Int)
(declare-fun of_rep (Int) cell)
(assert (forall ((x cell)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x cell)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int cell))))))
(declare-fun slide ((Array Int cell) Int Int) (Array Int cell))
(assert (forall ((a (Array Int cell))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int cell))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int cell) Int Int (Array Int cell) Int Int) (Array Int cell))
(assert (forall ((a (Array Int cell)) (b (Array Int cell))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (cell Int) (Array Int cell))
(assert (forall ((v cell)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int cell)) (a__first Int) (a__last Int) (b (Array Int cell)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int cell)) (b (Array Int cell))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int cell) Int Int (Array Int cell) Int Int) Int)
(assert (forall ((a (Array Int cell)) (b (Array Int cell))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int cell)) (b (Array Int cell))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int cell)) (b (Array Int cell))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy4 (Array Int cell))
(declare-const value__size Int)
(declare-fun object__size ((Array Int cell)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int cell)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int cell)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int cell))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int cell))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int cell))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int cell) (Array Int cell)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int cell)))))))
(declare-fun slide1 ((Array Int (Array Int cell)) Int Int) (Array Int (Array Int cell)))
(assert (forall ((a (Array Int (Array Int cell)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int cell)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int (Array Int cell)) Int Int (Array Int (Array Int cell)) Int Int) (Array Int (Array Int cell)))
(assert (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 ((Array Int cell) Int) (Array Int (Array Int cell)))
(assert (forall ((v (Array Int cell))) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int (Array Int cell))) (a__first Int) (a__last Int) (b (Array Int (Array Int cell))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq (select a temp___idx_133) 1 10 (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (bool_eq (select a temp___idx_133) 1 10 (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun is_complete_line ((Array Int cell)) Bool)
(declare-fun is_complete_line__function_guard (Bool (Array Int cell)) Bool)
(assert true)
(assert (forall ((l (Array Int cell))) (! (= (= (is_complete_line l) true) (forall ((x Int)) (=> (and (<= 1 x) (<= x 10)) (not (= (to_rep (select l x)) 0))))) :pattern ((is_complete_line l)))))
(declare-fun is_empty_line ((Array Int cell)) Bool)
(declare-fun is_empty_line__function_guard (Bool (Array Int cell)) Bool)
(assert true)
(assert (forall ((l (Array Int cell))) (! (= (= (is_empty_line l) true) (forall ((x Int)) (=> (and (<= 1 x) (<= x 10)) (= (to_rep (select l x)) 0)))) :pattern ((is_empty_line l)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const empty_line (Array Int cell))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun tetris_integrity__delete_complete_lines__empty_line__aggregate_def (Int) (Array Int cell))
(assert (forall ((temp___509 Int)) (forall ((temp___510 Int)) (= (select (tetris_integrity__delete_complete_lines__empty_line__aggregate_def temp___509) temp___510) (of_rep temp___509)))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const r3b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content integer)))))
(define-fun t4b__ref___projection ((a t4b__ref)) integer (t4b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(assert (= empty_line (tetris_integrity__delete_complete_lines__empty_line__aggregate_def 0)))
(define-fun dynamic_invariant3 ((temp___expr_514 Int) (temp___is_init_511 Bool) (temp___skip_constant_512 Bool) (temp___do_toplevel_513 Bool)) Bool (=> (or (= temp___is_init_511 true) (<= 0 7)) (in_range4 temp___expr_514)))
(declare-const cur_board (Array Int (Array Int cell)))
(declare-const num_deleted Int)
(declare-const to_line Int)
(declare-const has_complete_lines Bool)
(declare-const del_line Int)
(declare-const from_line Int)
(declare-const temp___768 (Array Int (Array Int cell)))
(declare-const temp___767 Int)
(declare-const temp___766 Bool)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Bool)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const cur_board1 (Array Int (Array Int cell)))
(declare-const result Int)
(declare-const to_line1 Int)
(declare-const result1 Bool)
(declare-const has_complete_lines1 Bool)
(declare-const result2 Int)
(declare-const del_line1 Int)
(declare-const cur_board2 (Array Int (Array Int cell)))
(declare-const to_line2 Int)
(declare-const has_complete_lines2 Bool)
(declare-const del_line2 Int)
(declare-const result3 Bool)
(declare-const result4 (Array Int (Array Int cell)))
(declare-const cur_board3 (Array Int (Array Int cell)))
(declare-const result5 Bool)
(declare-const has_complete_lines3 Bool)
(declare-const result6 Int)
(declare-const to_line3 Int)
(declare-const cur_board4 (Array Int (Array Int cell)))
(declare-const to_line4 Int)
(declare-const has_complete_lines4 Bool)
(declare-const del_line3 Int)
(declare-const cur_board5 (Array Int (Array Int cell)))
(declare-const to_line5 Int)
(declare-const has_complete_lines5 Bool)
(declare-const del_line4 Int)
(declare-const cur_board6 (Array Int (Array Int cell)))
(declare-const to_line6 int__ref)
(declare-const has_complete_lines6 bool__ref)
(declare-const del_line5 int__ref)
(declare-const cur_board7 (Array Int (Array Int cell)))
(declare-const to_line7 Int)
(declare-const has_complete_lines7 Bool)
(declare-const del_line6 Int)
(declare-const result7 int__ref)
(declare-const num_deleted1 Int)
(declare-const result8 int__ref)
(declare-const from_line1 Int)
(declare-const cur_board8 (Array Int (Array Int cell)))
(declare-const num_deleted2 Int)
(declare-const to_line8 Int)
(declare-const from_line2 Int)
(declare-const result9 Bool)
(declare-const result10 map__ref1)
(declare-const cur_board9 (Array Int (Array Int cell)))
(declare-const result11 map__ref1)
(declare-const cur_board10 (Array Int (Array Int cell)))
(declare-const result12 int__ref)
(declare-const to_line9 Int)
(declare-const result13 int__ref)
(declare-const num_deleted3 Int)
(declare-const cur_board11 map__ref1)
(declare-const num_deleted4 int__ref)
(declare-const to_line10 int__ref)
(declare-const cur_board12 (Array Int (Array Int cell)))
(declare-const num_deleted5 Int)
(declare-const to_line11 Int)
(declare-const result14 int__ref)
(declare-const from_line3 Int)
(declare-const cur_board13 map__ref1)
(declare-const num_deleted6 int__ref)
(declare-const to_line12 int__ref)
(declare-const from_line4 int__ref)
(declare-const cur_board14 (Array Int (Array Int cell)))
(declare-const num_deleted7 Int)
(declare-const to_line13 Int)
(declare-const from_line5 Int)
(assert (=> (<= 0 2147483647) (in_range2 num_deleted)))
(assert (= (tetris_integrity__delete_complete_lines__empty_line__aggregate_def 0) empty_line))
(assert (= result to_line))
(assert (= to_line1 50))
(assert (in_range3 to_line1))
(assert (= result1 has_complete_lines))
(assert (= has_complete_lines1 (of_int 0)))
(assert (= result2 del_line))
(assert (= del_line1 1))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= temp___768 cur_board)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= temp___767 to_line1)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= temp___766 has_complete_lines1)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (and (and (=> (<= 1 50) (in_range3 to_line2)) (forall ((temp___769 Int)) (=> (and (<= 1 temp___769) (<= temp___769 50)) (=> (<= del_line2 temp___769) (= (select cur_board2 temp___769) (select temp___768 temp___769)))))) (and (<= 1 del_line2) (<= del_line2 50)))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (and (= result3 (is_complete_line (select cur_board2 del_line2))) (= (= result3 true) (forall ((x Int)) (=> (and (<= 1 x) (<= x 10)) (not (= (to_rep (select (select cur_board2 del_line2) x)) 0))))))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (= result3 true) (= result4 cur_board2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (= result3 true) (= cur_board3 (store cur_board2 del_line2 empty_line)))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (= result3 true) (= result5 has_complete_lines2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (= result3 true) (= has_complete_lines3 (of_int 1)))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (= result3 true) (= result6 to_line2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (= result3 true) (= to_line3 del_line2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (not (= result3 true)) (= has_complete_lines3 has_complete_lines2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (not (= result3 true)) (= to_line3 to_line2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (=> (not (= result3 true)) (= cur_board3 cur_board2))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= del_line2 50)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= del_line2 del_line3)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= has_complete_lines3 has_complete_lines4)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= to_line3 to_line4)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= cur_board3 cur_board4)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= del_line4 del_line2)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= has_complete_lines5 has_complete_lines3)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= to_line5 to_line3)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= cur_board5 cur_board3)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= del_line5 (mk_int__ref del_line3))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= has_complete_lines6 (mk_bool__ref has_complete_lines4))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= to_line6 (mk_int__ref to_line4))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= (mk_map__ref1 cur_board6) (mk_map__ref1 cur_board4))))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= del_line6 del_line4)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= has_complete_lines7 has_complete_lines5)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= to_line7 to_line5)))
(assert (=> (and (<= 1 del_line1) (<= del_line1 50)) (= cur_board7 cur_board5)))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= del_line5 (mk_int__ref del_line1))))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= has_complete_lines6 (mk_bool__ref has_complete_lines1))))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= to_line6 (mk_int__ref to_line1))))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= (mk_map__ref1 cur_board6) (mk_map__ref1 cur_board))))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= del_line6 del_line1)))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= has_complete_lines7 has_complete_lines1)))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= to_line7 to_line1)))
(assert (=> (not (and (<= 1 del_line1) (<= del_line1 50))) (= cur_board7 cur_board1)))
(assert (= result7 (mk_int__ref num_deleted)))
(assert (= num_deleted1 0))
(assert (= (bool__content has_complete_lines6) true))
(assert (= (- (int__content to_line6) 1) r3b))
(assert (in_range1 r3b))
(assert (= result8 (mk_int__ref from_line)))
(assert (= from_line1 r3b))
(assert (<= 1 from_line1))
(assert (<= from_line1 r3b))
(assert (< from_line2 to_line8))
(assert (= (+ num_deleted2 to_line8) (+ num_deleted1 (int__content to_line6))))
(assert (and (and (and (=> (<= 1 r3b) (dynamic_property 1 r3b from_line2)) (=> (<= 1 50) (in_range3 to_line8))) (=> (<= 0 2147483647) (in_range2 num_deleted2))) (and (<= 1 from_line2) (<= from_line2 r3b))))
(assert (and (= o (+ num_deleted1 (int__content to_line6))) (in_range1 (+ num_deleted1 (int__content to_line6)))))
(assert (not (in_range1 (+ num_deleted2 to_line8))))
(check-sat)
(exit)
