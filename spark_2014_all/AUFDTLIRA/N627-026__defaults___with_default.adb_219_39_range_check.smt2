(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t29b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (t29b t29b) Bool)
(declare-const dummy2 t29b)
(declare-datatypes () ((t29b__ref (mk_t29b__ref (t29b__content t29b)))))
(define-fun t29b__ref___projection ((a t29b__ref)) t29b (t29b__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (positive) Int)
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__with_default__bad_nested_defaults2__empty_rec__d positive)))))
(define-fun us_split_discrs___10__projection ((a us_split_discrs)) positive (rec__with_default__bad_nested_defaults2__empty_rec__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___10__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (attr__constrained Bool)))))
(define-fun us_rep___28__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___29__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep1 (rec__with_default__bad_nested_defaults2__empty_rec__d (us_split_discrs1 a))) (to_rep1 (rec__with_default__bad_nested_defaults2__empty_rec__d (us_split_discrs1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const with_default__bad_nested_defaults2__empty_rec__d__first__bit Int)
(declare-const with_default__bad_nested_defaults2__empty_rec__d__last__bit Int)
(declare-const with_default__bad_nested_defaults2__empty_rec__d__position Int)
(assert (<= 0 with_default__bad_nested_defaults2__empty_rec__d__first__bit))
(assert (< with_default__bad_nested_defaults2__empty_rec__d__first__bit with_default__bad_nested_defaults2__empty_rec__d__last__bit))
(assert (<= 0 with_default__bad_nested_defaults2__empty_rec__d__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((empty_rec__ref (mk_empty_rec__ref (empty_rec__content us_rep)))))
(define-fun empty_rec__ref___2__projection ((a empty_rec__ref)) us_rep (empty_rec__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (bool_eq (select a temp___idx_161) (select b (+ (- b__first a__first) temp___idx_161))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_161 Int)) (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last)) (= (bool_eq (select a temp___idx_161) (select b (+ (- b__first a__first) temp___idx_161))) true))))))))
(declare-const dummy4 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__with_default__bad_nested_defaults2__non_init__e (Array Int us_rep)) (rec__with_default__bad_nested_defaults2__non_init__f natural)))))
(define-fun us_split_fields_E__2__projection ((a us_split_fields)) (Array Int us_rep) (rec__with_default__bad_nested_defaults2__non_init__e a))
(define-fun us_split_fields_F__2__projection ((a us_split_fields)) natural (rec__with_default__bad_nested_defaults2__non_init__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___12__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___30__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq1 (rec__with_default__bad_nested_defaults2__non_init__e (us_split_fields1 a)) 1 100 (rec__with_default__bad_nested_defaults2__non_init__e (us_split_fields1 b)) 1 100) true) (= (to_rep (rec__with_default__bad_nested_defaults2__non_init__f (us_split_fields1 a))) (to_rep (rec__with_default__bad_nested_defaults2__non_init__f (us_split_fields1 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const with_default__bad_nested_defaults2__non_init__e__first__bit Int)
(declare-const with_default__bad_nested_defaults2__non_init__e__last__bit Int)
(declare-const with_default__bad_nested_defaults2__non_init__e__position Int)
(assert (<= 0 with_default__bad_nested_defaults2__non_init__e__first__bit))
(assert (< with_default__bad_nested_defaults2__non_init__e__first__bit with_default__bad_nested_defaults2__non_init__e__last__bit))
(assert (<= 0 with_default__bad_nested_defaults2__non_init__e__position))
(declare-const with_default__bad_nested_defaults2__non_init__f__first__bit Int)
(declare-const with_default__bad_nested_defaults2__non_init__f__last__bit Int)
(declare-const with_default__bad_nested_defaults2__non_init__f__position Int)
(assert (<= 0 with_default__bad_nested_defaults2__non_init__f__first__bit))
(assert (< with_default__bad_nested_defaults2__non_init__f__first__bit with_default__bad_nested_defaults2__non_init__f__last__bit))
(assert (<= 0 with_default__bad_nested_defaults2__non_init__f__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((non_init__ref (mk_non_init__ref (non_init__content us_rep1)))))
(define-fun non_init__ref___2__projection ((a non_init__ref)) us_rep1 (non_init__content a))
(define-fun dynamic_invariant1 ((temp___expr_619 us_rep1) (temp___is_init_615 Bool) (temp___skip_constant_616 Bool) (temp___do_toplevel_617 Bool) (temp___do_typ_inv_618 Bool)) Bool (forall ((temp___620 Int)) (=> (and (<= 1 temp___620) (<= temp___620 100)) (= (attr__constrained (select (rec__with_default__bad_nested_defaults2__non_init__e (us_split_fields1 temp___expr_619)) temp___620)) false))))
(define-fun default_initial_assumption ((temp___expr_622 us_rep1) (temp___skip_top_level_623 Bool)) Bool (forall ((temp___625 Int)) (=> (and (<= 1 temp___625) (<= temp___625 100)) (and (= (attr__constrained (select (rec__with_default__bad_nested_defaults2__non_init__e (us_split_fields1 temp___expr_622)) temp___625)) false) (= (to_rep1 (rec__with_default__bad_nested_defaults2__empty_rec__d (us_split_discrs1 (select (rec__with_default__bad_nested_defaults2__non_init__e (us_split_fields1 temp___expr_622)) temp___625)))) c)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun default_initial_assumption1 ((temp___expr_605 us_rep) (temp___skip_top_level_606 Bool)) Bool (and (= (attr__constrained temp___expr_605) false) (= (to_rep1 (rec__with_default__bad_nested_defaults2__empty_rec__d (us_split_discrs1 temp___expr_605))) c)))
(declare-const o Int)
(declare-const result Bool)
(assert (in_range c))
(assert (=> (<= 1 100) (= o (+ (- 100 1) 1))))
(assert (=> (not (<= 1 100)) (= o 0)))
(assert (= result (ite (< 0 o) true false)))
(assert (= result true))
(assert (not (in_range1 c)))
(check-sat)
(exit)
