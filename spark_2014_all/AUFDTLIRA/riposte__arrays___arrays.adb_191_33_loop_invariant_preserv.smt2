(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort character 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (character character) Bool)
(declare-const dummy character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range1 temp___expr_63)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (Bool Int) (Array Int Bool))
(assert (forall ((v Bool)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))
(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r (Array Int Bool))
(declare-const x Int)
(declare-const result Int)
(declare-const x1 Int)
(declare-const result1 (Array Int Bool))
(declare-const r1 (Array Int Bool))
(declare-const r2 (Array Int Bool))
(declare-const x2 Int)
(declare-const result2 Int)
(declare-const x3 Int)
(declare-const result3 (Array Int Bool))
(declare-const r3 (Array Int Bool))
(assert (in_range1 c))
(assert (= (mk_int__ref result) (mk_int__ref x)))
(assert (= x1 0))
(assert (<= 0 x1))
(assert (<= x1 255))
(assert (= (mk_map__ref result1) (mk_map__ref r)))
(assert (= r1 (store r x1 (ite (= x1 c) true false))))
(assert (forall ((i Int)) (=> (and (<= 0 i) (<= i x2)) (= (= (select r2 i) true) (= i c)))))
(assert (and (and (forall ((temp___310 Int)) (=> (and (<= 0 temp___310) (<= temp___310 255)) (=> (< x2 temp___310) (= (select r2 temp___310) (select r temp___310))))) (=> (<= 0 255) (in_range1 x2))) (and (<= 0 x2) (<= x2 255))))
(assert (not (= x2 255)))
(assert (= result2 x2))
(assert (= x3 (+ x2 1)))
(assert (= result3 r2))
(assert (= r3 (store r2 x3 (ite (= x3 c) true false))))
(declare-const i Int)
(assert (<= 0 i))
(assert (<= i x3))
(assert (= (select r3 i) true))
(assert (not (= i c)))
(check-sat)
(exit)
