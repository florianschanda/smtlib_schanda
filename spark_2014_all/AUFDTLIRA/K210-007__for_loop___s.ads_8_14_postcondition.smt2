(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort array_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (array_range array_range) Bool)
(declare-const dummy1 array_range)
(declare-datatypes () ((array_range__ref (mk_array_range__ref (array_range__content array_range)))))
(define-fun array_range__ref___projection ((a array_range__ref)) array_range (array_range__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const table (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const value Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t1b 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t1b t1b) Bool)
(declare-const dummy2 t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 10)) (in_range2 temp___expr_159)))
(declare-const index Int)
(declare-const s__contains__result Bool)
(declare-const temp___183 Int)
(declare-const temp___184 Int)
(declare-const temp___182 Int)
(declare-const s__contains__result1 Bool)
(declare-const result Int)
(declare-const index1 Int)
(declare-const index2 Int)
(declare-const s__contains__result2 Bool)
(declare-const result1 Bool)
(declare-const s__contains__result3 Bool)
(declare-const index3 Int)
(declare-const s__contains__result4 Bool)
(declare-const index4 Int)
(declare-const s__contains__result5 Bool)
(declare-const index5 Int)
(declare-const s__contains__result6 Bool)
(declare-const index6 Int)
(declare-const s__contains__result7 Bool)
(declare-const result2 Bool)
(declare-const s__contains__result8 Bool)
(declare-const s__contains__result9 Bool)
(declare-const s__contains__result10 Bool)
(declare-const index7 Int)
(declare-const s__contains__result11 Bool)
(declare-const index8 Int)
(declare-const s__contains__result12 Bool)
(declare-const index9 Int)
(declare-const s__contains__result13 Bool)
(declare-const index10 Int)
(declare-const s__contains__result14 Bool)
(define-fun s__contains__result15 () bool__ref (mk_bool__ref s__contains__result11))
(define-fun s__contains__result16 () bool__ref (mk_bool__ref s__contains__result6))
(define-fun index11 () int__ref (mk_int__ref index5))
(define-fun result3 () int__ref (mk_int__ref result))
(define-fun index12 () int__ref (mk_int__ref index))
(declare-const result4 Bool)
(assert (in_range1 value))
(assert (or (and (and (and (= s__contains__result3 s__contains__result11) (= index2 index7)) (and (= s__contains__result12 s__contains__result3) (= index8 index2))) (and (= temp___183 1) (and (= temp___184 10) (and (and (= result3 index12) (= index1 temp___183)) (and (and (<= temp___183 index1) (<= index1 temp___184)) (and (= temp___182 index1) (and (forall ((j Int)) (=> (and (<= 1 j) (<= j (- index2 1))) (not (= (to_rep (select table j)) value)))) (and (and (=> (<= 1 10) (in_range3 index2)) (and (<= 1 index2) (<= index2 10))) (and (= (to_rep (select table index2)) value) (and (= result1 s__contains__result2) (= s__contains__result3 (distinct 1 0)))))))))))) (and (and (and (= result3 index12) (= index1 1)) (ite (and (<= 1 index1) (<= index1 10)) (and (and (and (= temp___182 index1) (and (forall ((j Int)) (=> (and (<= 1 j) (<= j (- index2 1))) (not (= (to_rep (select table j)) value)))) (and (and (=> (<= 1 10) (in_range3 index2)) (and (<= 1 index2) (<= index2 10))) (and (and (not (= (to_rep (select table index2)) value)) (= s__contains__result3 s__contains__result2)) (= index2 10))))) (and (and (= s__contains__result3 s__contains__result4) (= index2 index3)) (and (= s__contains__result5 s__contains__result3) (= index4 index2)))) (and (and (= s__contains__result16 (mk_bool__ref s__contains__result4)) (= index11 (mk_int__ref index3))) (and (= s__contains__result7 s__contains__result5) (= index6 index4)))) (and (and (= s__contains__result16 (mk_bool__ref s__contains__result)) (= index1 index5)) (and (= s__contains__result7 s__contains__result1) (= index6 index1))))) (and (and (and (= s__contains__result15 (mk_bool__ref s__contains__result9)) (= (mk_int__ref index7) index11)) (and (= s__contains__result12 s__contains__result10) (= index8 index6))) (and (and (= s__contains__result8 s__contains__result9) (= s__contains__result10 s__contains__result8)) (and (= result2 s__contains__result6) (= s__contains__result8 (distinct 0 0))))))))
(assert (= (mk_bool__ref s__contains__result13) s__contains__result15))
(assert (= index9 index7))
(assert (= s__contains__result14 s__contains__result12))
(assert (= index10 index8))
(assert (= result4 s__contains__result13))
(assert (= s__contains__result13 true))
(assert (not (exists ((j Int)) (and (and (<= 1 j) (<= j 10)) (= (to_rep (select table j)) value)))))
(check-sat)
(exit)
