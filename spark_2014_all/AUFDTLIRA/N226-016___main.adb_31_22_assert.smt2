(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort id_type 0)
(declare-fun id_typeqtint (id_type) Int)
(assert (forall ((i id_type)) (and (<= 0 (id_typeqtint i)) (<= (id_typeqtint i) 1))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (id_type id_type) Bool)
(declare-const dummy id_type)
(declare-datatypes () ((id_type__ref (mk_id_type__ref (id_type__content id_type)))))
(define-fun id_type__ref___projection ((a id_type__ref)) id_type (id_type__content a))
(define-fun dynamic_invariant ((temp___expr_240 Int) (temp___is_init_236 Bool) (temp___skip_constant_237 Bool) (temp___do_toplevel_238 Bool) (temp___do_typ_inv_239 Bool)) Bool (=> (or (= temp___is_init_236 true) (<= 0 1)) (in_range1 temp___expr_240)))
(define-fun to_rep ((x id_type)) Int (id_typeqtint x))
(declare-fun of_rep (Int) id_type)
(assert (forall ((x id_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x id_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int id_type))))))
(declare-fun slide ((Array Int id_type) Int Int) (Array Int id_type))
(assert (forall ((a (Array Int id_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int id_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int id_type)) (a__first Int) (a__last Int) (b (Array Int id_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int id_type)) (b (Array Int id_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const map1 (Array Int id_type))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun main__map__aggregate_def (Int Int) (Array Int id_type))
(declare-const id Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert (= map1 (main__map__aggregate_def 1 0)))
(declare-const rliteral id_type)
(assert (= (id_typeqtint rliteral) 1))
(declare-const rliteral1 id_type)
(assert (= (id_typeqtint rliteral1) 0))
(assert (forall ((temp___157 Int) (temp___158 Int)) (let ((temp___156 (main__map__aggregate_def temp___157 temp___158))) (=> (and (dynamic_invariant temp___157 true true true true) (dynamic_invariant temp___158 true true true true)) (and (= (select temp___156 0) rliteral) (= (select temp___156 1) rliteral1))))))
(assert (= (main__map__aggregate_def 1 0) map1))
(assert (in_range1 id))
(declare-const id1 Int)
(assert (<= 0 id1))
(assert (<= id1 1))
(assert (not (not (= (to_rep (select map1 id1)) id1))))
(check-sat)
(exit)
