(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range temp___expr_176)))
(declare-sort it2 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range1 temp___expr_183)))
(declare-sort et1 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (et1 et1) Bool)
(declare-const dummy2 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant2 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range2 temp___expr_204)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun temp___925 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___933 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___940 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___948 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___956 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___963 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___971 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___979 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___986 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___994 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp___1002 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp___1009 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___927 (Array Int (Array Int et1)))) (forall ((temp___928 Int) (temp___930 Int)) (forall ((temp___929 (Array Int et1)) (temp___931 (Array Int et1))) (let ((temp___926 (temp___925 temp___927 temp___928 temp___929 temp___930 temp___931))) (=> (and (dynamic_invariant1 temp___928 true true true true) (dynamic_invariant1 temp___930 true true true true)) (forall ((temp___932 Int)) (ite (= temp___932 temp___930) (= (select temp___926 temp___932) temp___931) (ite (= temp___932 temp___928) (= (select temp___926 temp___932) temp___929) (= (select temp___926 temp___932) (select temp___927 temp___932)))))))))))
(assert (forall ((temp___935 (Array Int et1))) (forall ((temp___936 Int) (temp___937 Int)) (let ((temp___934 (temp___933 temp___935 temp___936 temp___937))) (=> (and (dynamic_invariant temp___936 true true true true) (dynamic_invariant2 temp___937 true true true true)) (forall ((temp___938 Int)) (ite (= temp___938 temp___936) (= (to_rep (select temp___934 temp___938)) temp___937) (= (select temp___934 temp___938) (select temp___935 temp___938)))))))))
(assert (forall ((temp___942 (Array Int et1))) (forall ((temp___943 Int) (temp___944 Int)) (let ((temp___941 (temp___940 temp___942 temp___943 temp___944))) (=> (and (dynamic_invariant temp___943 true true true true) (dynamic_invariant2 temp___944 true true true true)) (forall ((temp___945 Int)) (ite (= temp___945 temp___943) (= (to_rep (select temp___941 temp___945)) temp___944) (= (select temp___941 temp___945) (select temp___942 temp___945)))))))))
(assert (forall ((temp___950 (Array Int (Array Int et1)))) (forall ((temp___951 Int) (temp___953 Int)) (forall ((temp___952 (Array Int et1)) (temp___954 (Array Int et1))) (let ((temp___949 (temp___948 temp___950 temp___951 temp___952 temp___953 temp___954))) (=> (and (dynamic_invariant1 temp___951 true true true true) (dynamic_invariant1 temp___953 true true true true)) (forall ((temp___955 Int)) (ite (= temp___955 temp___953) (= (select temp___949 temp___955) temp___954) (ite (= temp___955 temp___951) (= (select temp___949 temp___955) temp___952) (= (select temp___949 temp___955) (select temp___950 temp___955)))))))))))
(assert (forall ((temp___958 (Array Int et1))) (forall ((temp___959 Int) (temp___960 Int)) (let ((temp___957 (temp___956 temp___958 temp___959 temp___960))) (=> (and (dynamic_invariant temp___959 true true true true) (dynamic_invariant2 temp___960 true true true true)) (forall ((temp___961 Int)) (ite (= temp___961 temp___959) (= (to_rep (select temp___957 temp___961)) temp___960) (= (select temp___957 temp___961) (select temp___958 temp___961)))))))))
(assert (forall ((temp___965 (Array Int et1))) (forall ((temp___966 Int) (temp___967 Int)) (let ((temp___964 (temp___963 temp___965 temp___966 temp___967))) (=> (and (dynamic_invariant temp___966 true true true true) (dynamic_invariant2 temp___967 true true true true)) (forall ((temp___968 Int)) (ite (= temp___968 temp___966) (= (to_rep (select temp___964 temp___968)) temp___967) (= (select temp___964 temp___968) (select temp___965 temp___968)))))))))
(assert (forall ((temp___973 (Array Int (Array Int et1)))) (forall ((temp___974 Int) (temp___976 Int)) (forall ((temp___975 (Array Int et1)) (temp___977 (Array Int et1))) (let ((temp___972 (temp___971 temp___973 temp___974 temp___975 temp___976 temp___977))) (=> (and (dynamic_invariant1 temp___974 true true true true) (dynamic_invariant1 temp___976 true true true true)) (forall ((temp___978 Int)) (ite (= temp___978 temp___976) (= (select temp___972 temp___978) temp___977) (ite (= temp___978 temp___974) (= (select temp___972 temp___978) temp___975) (= (select temp___972 temp___978) (select temp___973 temp___978)))))))))))
(assert (forall ((temp___981 (Array Int et1))) (forall ((temp___982 Int) (temp___983 Int)) (let ((temp___980 (temp___979 temp___981 temp___982 temp___983))) (=> (and (dynamic_invariant temp___982 true true true true) (dynamic_invariant2 temp___983 true true true true)) (forall ((temp___984 Int)) (ite (= temp___984 temp___982) (= (to_rep (select temp___980 temp___984)) temp___983) (= (select temp___980 temp___984) (select temp___981 temp___984)))))))))
(assert (forall ((temp___988 (Array Int et1))) (forall ((temp___989 Int) (temp___990 Int)) (let ((temp___987 (temp___986 temp___988 temp___989 temp___990))) (=> (and (dynamic_invariant temp___989 true true true true) (dynamic_invariant2 temp___990 true true true true)) (forall ((temp___991 Int)) (ite (= temp___991 temp___989) (= (to_rep (select temp___987 temp___991)) temp___990) (= (select temp___987 temp___991) (select temp___988 temp___991)))))))))
(assert (forall ((temp___996 (Array Int (Array Int et1)))) (forall ((temp___997 Int) (temp___999 Int)) (forall ((temp___998 (Array Int et1)) (temp___1000 (Array Int et1))) (let ((temp___995 (temp___994 temp___996 temp___997 temp___998 temp___999 temp___1000))) (=> (and (dynamic_invariant1 temp___997 true true true true) (dynamic_invariant1 temp___999 true true true true)) (forall ((temp___1001 Int)) (ite (= temp___1001 temp___999) (= (select temp___995 temp___1001) temp___1000) (ite (= temp___1001 temp___997) (= (select temp___995 temp___1001) temp___998) (= (select temp___995 temp___1001) (select temp___996 temp___1001)))))))))))
(assert (forall ((temp___1004 (Array Int et1))) (forall ((temp___1005 Int) (temp___1006 Int)) (let ((temp___1003 (temp___1002 temp___1004 temp___1005 temp___1006))) (=> (and (dynamic_invariant temp___1005 true true true true) (dynamic_invariant2 temp___1006 true true true true)) (forall ((temp___1007 Int)) (ite (= temp___1007 temp___1005) (= (to_rep (select temp___1003 temp___1007)) temp___1006) (= (select temp___1003 temp___1007) (select temp___1004 temp___1007)))))))))
(assert (forall ((temp___1011 (Array Int et1))) (forall ((temp___1012 Int) (temp___1013 Int)) (let ((temp___1010 (temp___1009 temp___1011 temp___1012 temp___1013))) (=> (and (dynamic_invariant temp___1012 true true true true) (dynamic_invariant2 temp___1013 true true true true)) (forall ((temp___1014 Int)) (ite (= temp___1014 temp___1012) (= (to_rep (select temp___1010 temp___1014)) temp___1013) (= (select temp___1010 temp___1014) (select temp___1011 temp___1014)))))))))
(declare-const a (Array Int (Array Int et1)))
(declare-const j_next Int)
(declare-const f Int)
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 (Array Int (Array Int et1)))
(declare-const result (Array Int (Array Int et1)))
(declare-const a1 (Array Int (Array Int et1)))
(assert (in_range i))
(assert (in_range1 j))
(assert (in_range2 e))
(assert (=> (<= 5 50) (in_range1 j_next)))
(assert (=> (<= 0 99) (in_range2 f)))
(assert (= (to_rep o) e))
(assert (= o1 (store (select a j) i o)))
(assert (= o2 (store a j o1)))
(assert (= (mk_map__ref1 result) (mk_map__ref1 a)))
(assert (= a1 o2))
(assert (not (= j 50)))
(assert (not (in_range1 (+ j 1))))
(check-sat)
(exit)
