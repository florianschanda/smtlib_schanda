(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort it1 0)
(declare-fun it1qtint (it1) Int)
(assert (forall ((i it1)) (and (<= 1 (it1qtint i)) (<= (it1qtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 1 10)) (in_range1 temp___expr_176)))
(declare-sort it2 0)
(declare-fun it2qtint (it2) Int)
(assert (forall ((i it2)) (and (<= 5 (it2qtint i)) (<= (it2qtint i) 50))))
(define-fun in_range2 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_183 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 5 50)) (in_range2 temp___expr_183)))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (et1 et1) Bool)
(declare-const dummy2 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant2 ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range3 temp___expr_204)))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((a (Array Int et1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int et1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int) (b (Array Int et1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int et1)) (b (Array Int et1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int et1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int et1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int et1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int et1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int et1)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int) (a__last Int) (b (Array Int (Array Int et1))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true)))) true false))
(assert (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 10 (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const i2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const j1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const j2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const f Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun temp_____aggregate_def_851 ((Array Int (Array Int et1)) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_857 ((Array Int et1) Int Int Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_867 ((Array Int (Array Int et1)) Int (Array Int et1) Int (Array Int et1)) (Array Int (Array Int et1)))
(declare-fun temp_____aggregate_def_875 ((Array Int et1) Int Int) (Array Int et1))
(declare-fun temp_____aggregate_def_882 ((Array Int et1) Int Int) (Array Int et1))
(assert (forall ((temp___869 (Array Int (Array Int et1)))) (forall ((temp___870 Int) (temp___872 Int)) (forall ((temp___871 (Array Int et1)) (temp___873 (Array Int et1))) (let ((temp___868 (temp_____aggregate_def_867 temp___869 temp___870 temp___871 temp___872 temp___873))) (=> (and (dynamic_invariant1 temp___870 true true true true) (dynamic_invariant1 temp___872 true true true true)) (forall ((temp___874 Int)) (ite (= temp___874 temp___872) (= (select temp___868 temp___874) temp___873) (ite (= temp___874 temp___870) (= (select temp___868 temp___874) temp___871) (= (select temp___868 temp___874) (select temp___869 temp___874)))))))))))
(assert (forall ((temp___877 (Array Int et1))) (forall ((temp___878 Int) (temp___879 Int)) (let ((temp___876 (temp_____aggregate_def_875 temp___877 temp___878 temp___879))) (=> (and (dynamic_invariant temp___878 true true true true) (dynamic_invariant2 temp___879 true true true true)) (forall ((temp___880 Int)) (ite (= temp___880 temp___878) (= (to_rep (select temp___876 temp___880)) temp___879) (= (select temp___876 temp___880) (select temp___877 temp___880)))))))))
(assert (forall ((temp___884 (Array Int et1))) (forall ((temp___885 Int) (temp___886 Int)) (let ((temp___883 (temp_____aggregate_def_882 temp___884 temp___885 temp___886))) (=> (and (dynamic_invariant temp___885 true true true true) (dynamic_invariant2 temp___886 true true true true)) (forall ((temp___887 Int)) (ite (= temp___887 temp___885) (= (to_rep (select temp___883 temp___887)) temp___886) (= (select temp___883 temp___887) (select temp___884 temp___887)))))))))
(assert (forall ((temp___853 (Array Int (Array Int et1)))) (forall ((temp___854 Int)) (forall ((temp___855 (Array Int et1))) (let ((temp___852 (temp_____aggregate_def_851 temp___853 temp___854 temp___855))) (=> (dynamic_invariant1 temp___854 true true true true) (forall ((temp___856 Int)) (ite (= temp___856 temp___854) (= (select temp___852 temp___856) temp___855) (= (select temp___852 temp___856) (select temp___853 temp___856))))))))))
(assert (forall ((temp___859 (Array Int et1))) (forall ((temp___860 Int) (temp___861 Int) (temp___862 Int) (temp___863 Int)) (let ((temp___858 (temp_____aggregate_def_857 temp___859 temp___860 temp___861 temp___862 temp___863))) (=> (and (and (and (dynamic_invariant temp___860 true true true true) (dynamic_invariant2 temp___861 true true true true)) (dynamic_invariant temp___862 true true true true)) (dynamic_invariant2 temp___863 true true true true)) (forall ((temp___864 Int)) (ite (= temp___864 temp___862) (= (to_rep (select temp___858 temp___864)) temp___863) (ite (= temp___864 temp___860) (= (to_rep (select temp___858 temp___864)) temp___861) (= (select temp___858 temp___864) (select temp___859 temp___864))))))))))
(declare-const a (Array Int (Array Int et1)))
(declare-const o et1)
(declare-const o1 (Array Int et1))
(declare-const o2 (Array Int (Array Int et1)))
(declare-const o3 et1)
(declare-const o4 (Array Int et1))
(declare-const o5 (Array Int (Array Int et1)))
(declare-const result (Array Int (Array Int et1)))
(declare-const a1 (Array Int (Array Int et1)))
(declare-const result1 (Array Int (Array Int et1)))
(declare-const a2 (Array Int (Array Int et1)))
(declare-const a3 (Array Int (Array Int et1)))
(declare-const a4 (Array Int (Array Int et1)))
(assert (in_range1 i1))
(assert (in_range1 i2))
(assert (in_range2 j1))
(assert (in_range2 j2))
(assert (in_range3 e))
(assert (in_range3 f))
(assert (or (not (= i1 i2)) (not (= j1 j2))))
(assert (= (to_rep o) e))
(assert (= o1 (store (select a j1) i1 o)))
(assert (= o2 (store a j1 o1)))
(assert (= result a))
(assert (= a1 o2))
(assert (= (to_rep o3) f))
(assert (= o4 (store (select a1 j2) i2 o3)))
(assert (= o5 (store a1 j2 o4)))
(assert (= result1 a1))
(assert (= a2 o5))
(assert (= a2 a3))
(assert (= a4 a2))
(assert (= j1 j2))
(assert (not (= (bool_eq1 a3 5 50 (temp_____aggregate_def_851 a j1 (temp_____aggregate_def_857 (select a j1) i1 e i2 f)) 5 50) true)))
(check-sat)
(exit)
