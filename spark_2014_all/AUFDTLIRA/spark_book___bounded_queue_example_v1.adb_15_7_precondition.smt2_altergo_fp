(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic concat_singleton_left : character, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_singleton_left_def :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a) and
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))]))))))))

logic concat_singleton_right : (int,character) farray, int, int,
  character -> (int,character) farray

axiom concat_singleton_right_def :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. (((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b) and
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i]))))))))

logic concat_singletons : character, int, character -> (int,character) farray

axiom concat_singletons_def :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  (((concat_singletons(a, a_first, b)[a_first]) = a) and
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic to_rep3 : positive -> int

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range2(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range2(x) ->
  (to_rep3(of_rep3(x)) = x)))

type element_type

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic to_rep4 : element_type -> int

logic of_rep4 : int -> element_type

axiom inversion_axiom4 :
  (forall x:element_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:element_type [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref1 = { map__content1 : (int,element_type) farray
}

logic slide1 : (int,element_type) farray, int,
  int -> (int,element_type) farray

axiom slide_eq1 :
  (forall a:(int,element_type) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,element_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,element_type) farray, int, int,
  (int,element_type) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,element_type) farray. forall a__first:int.
  forall a__last:int. forall b:(int,element_type) farray.
  forall b__first:int. forall b__last:int [bool_eq9(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)])))))))))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t3s__ref = { t3s__content : integer
}

function t3s__ref___projection(a: t3s__ref) : integer = (a).t3s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,element_type) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,element_type) farray = (a).elts1

function of_array1(a: (int,element_type) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,element_type) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,element_type) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,element_type) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,element_type) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,element_type) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,element_type) farray. (0 <= object__alignment1(a)))

function bool_eq11(x: us_t1, y: us_t1) : bool = bool_eq9((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,element_type) farray

logic dummy9 : t1

type t4s__ref = { t4s__content : us_t1
}

function t4s__ref___projection(a: t4s__ref) : us_t1 = (a).t4s__content

type us_split_discrs = { rec__bounded_queue_v1__queue_type__max_size :
positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__bounded_queue_v1__queue_type__max_size

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__bounded_queue_v1__queue_type__count : natural;
rec__bounded_queue_v1__queue_type__front : positive;
rec__bounded_queue_v1__queue_type__rear : positive;
rec__bounded_queue_v1__queue_type__items : us_t1
}

function us_split_fields_Count__projection(a: us_split_fields) : natural =
  (a).rec__bounded_queue_v1__queue_type__count

function us_split_fields_Front__projection(a: us_split_fields) : positive =
  (a).rec__bounded_queue_v1__queue_type__front

function us_split_fields_Rear__projection(a: us_split_fields) : positive =
  (a).rec__bounded_queue_v1__queue_type__rear

function us_split_fields_Items__projection(a: us_split_fields) : us_t1 =
  (a).rec__bounded_queue_v1__queue_type__items

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  ((((to_rep3(((a).us_split_discrs1).rec__bounded_queue_v1__queue_type__max_size) = to_rep3(((b).us_split_discrs1).rec__bounded_queue_v1__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__count) = to_rep2(((b).us_split_fields1).rec__bounded_queue_v1__queue_type__count)) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__front) = to_rep3(((b).us_split_fields1).rec__bounded_queue_v1__queue_type__front))) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__rear) = to_rep3(((b).us_split_fields1).rec__bounded_queue_v1__queue_type__rear))) and
  (bool_eq11(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__items,
  ((b).us_split_fields1).rec__bounded_queue_v1__queue_type__items) = true))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs1).rec__bounded_queue_v1__queue_type__max_size) = to_rep3(((b).us_split_discrs1).rec__bounded_queue_v1__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__count) = to_rep2(((b).us_split_fields1).rec__bounded_queue_v1__queue_type__count)) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__front) = to_rep3(((b).us_split_fields1).rec__bounded_queue_v1__queue_type__front))) and
  (to_rep3(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__rear) = to_rep3(((b).us_split_fields1).rec__bounded_queue_v1__queue_type__rear))) and
  (bool_eq11(((a).us_split_fields1).rec__bounded_queue_v1__queue_type__items,
  ((b).us_split_fields1).rec__bounded_queue_v1__queue_type__items) = true)))) ->
  (bool_eq12(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray. forall a5:t1.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = a }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = a1;
  rec__bounded_queue_v1__queue_type__front = a2;
  rec__bounded_queue_v1__queue_type__rear = a3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = a4; rt1 = a5 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray. forall a5:t1.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = a }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = a1;
  rec__bounded_queue_v1__queue_type__front = a2;
  rec__bounded_queue_v1__queue_type__rear = a3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = a4; rt1 = a5 } } })))

logic bounded_queue_v1__queue_type__max_size__first__bit : int

logic bounded_queue_v1__queue_type__max_size__last__bit : int

logic bounded_queue_v1__queue_type__max_size__position : int

axiom bounded_queue_v1__queue_type__max_size__first__bit_axiom :
  (0 <= bounded_queue_v1__queue_type__max_size__first__bit)

axiom bounded_queue_v1__queue_type__max_size__last__bit_axiom :
  (bounded_queue_v1__queue_type__max_size__first__bit <  bounded_queue_v1__queue_type__max_size__last__bit)

axiom bounded_queue_v1__queue_type__max_size__position_axiom :
  (0 <= bounded_queue_v1__queue_type__max_size__position)

logic bounded_queue_v1__queue_type__count__first__bit : int

logic bounded_queue_v1__queue_type__count__last__bit : int

logic bounded_queue_v1__queue_type__count__position : int

axiom bounded_queue_v1__queue_type__count__first__bit_axiom :
  (0 <= bounded_queue_v1__queue_type__count__first__bit)

axiom bounded_queue_v1__queue_type__count__last__bit_axiom :
  (bounded_queue_v1__queue_type__count__first__bit <  bounded_queue_v1__queue_type__count__last__bit)

axiom bounded_queue_v1__queue_type__count__position_axiom :
  (0 <= bounded_queue_v1__queue_type__count__position)

logic bounded_queue_v1__queue_type__front__first__bit : int

logic bounded_queue_v1__queue_type__front__last__bit : int

logic bounded_queue_v1__queue_type__front__position : int

axiom bounded_queue_v1__queue_type__front__first__bit_axiom :
  (0 <= bounded_queue_v1__queue_type__front__first__bit)

axiom bounded_queue_v1__queue_type__front__last__bit_axiom :
  (bounded_queue_v1__queue_type__front__first__bit <  bounded_queue_v1__queue_type__front__last__bit)

axiom bounded_queue_v1__queue_type__front__position_axiom :
  (0 <= bounded_queue_v1__queue_type__front__position)

logic bounded_queue_v1__queue_type__rear__first__bit : int

logic bounded_queue_v1__queue_type__rear__last__bit : int

logic bounded_queue_v1__queue_type__rear__position : int

axiom bounded_queue_v1__queue_type__rear__first__bit_axiom :
  (0 <= bounded_queue_v1__queue_type__rear__first__bit)

axiom bounded_queue_v1__queue_type__rear__last__bit_axiom :
  (bounded_queue_v1__queue_type__rear__first__bit <  bounded_queue_v1__queue_type__rear__last__bit)

axiom bounded_queue_v1__queue_type__rear__position_axiom :
  (0 <= bounded_queue_v1__queue_type__rear__position)

logic bounded_queue_v1__queue_type__items__first__bit : int

logic bounded_queue_v1__queue_type__items__last__bit : int

logic bounded_queue_v1__queue_type__items__position : int

axiom bounded_queue_v1__queue_type__items__first__bit_axiom :
  (0 <= bounded_queue_v1__queue_type__items__first__bit)

axiom bounded_queue_v1__queue_type__items__last__bit_axiom :
  (bounded_queue_v1__queue_type__items__first__bit <  bounded_queue_v1__queue_type__items__last__bit)

axiom bounded_queue_v1__queue_type__items__position_axiom :
  (0 <= bounded_queue_v1__queue_type__items__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy10 : positive

logic dummy11 : natural

logic dummy12 : positive

logic dummy13 : positive

logic dummy14 : (int,element_type) farray

logic dummy15 : t1

type queue_type__ref = { queue_type__content : us_rep
}

function queue_type__ref___projection(a: queue_type__ref) : us_rep =
  (a).queue_type__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

axiom size__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t1 [size({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = queue }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } })]. ((dynamic_property2(1, to_rep3(queue), to_rep1(first2(queue5)),
  to_rep1(last2(queue5))) and ((to_rep1(first2(queue5)) = 1) and
  (to_rep1(last2(queue5)) = to_rep3(queue)))) -> in_range4(size({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size = queue };
  us_split_fields1 = { rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } }))))

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

logic full : us_rep -> bool

logic full__function_guard : bool, us_rep -> prop

logic last_element : us_rep -> int

logic last_element__function_guard : int, us_rep -> prop

logic first_element : us_rep -> int

logic first_element__function_guard : int, us_rep -> prop

type tT1bP1

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : tT1bP1, tT1bP1 -> bool

logic dummy16 : tT1bP1

type tT1bP1__ref = { tT1bP1__content : tT1bP1
}

function tT1bP1__ref___projection(a: tT1bP1__ref) : tT1bP1 =
  (a).tT1bP1__content

logic dummy17 : (int,element_type) farray

logic value__size3 : int

logic object__size3 : (int,element_type) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,element_type) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,element_type) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,element_type) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,element_type) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,element_type) farray. (0 <= object__alignment3(a)))

logic user_eq10 : (int,element_type) farray,
  (int,element_type) farray -> bool

type us_split_fields2 = { rec__bounded_queue_v1__queue_type__count1 :
natural; rec__bounded_queue_v1__queue_type__front1 : positive;
rec__bounded_queue_v1__queue_type__rear1 : positive;
rec__bounded_queue_v1__queue_type__items1 : (int,element_type) farray
}

function us_split_fields_Count__2__projection(a: us_split_fields2) : natural =
  (a).rec__bounded_queue_v1__queue_type__count1

function us_split_fields_Front__2__projection(a: us_split_fields2) : positive =
  (a).rec__bounded_queue_v1__queue_type__front1

function us_split_fields_Rear__2__projection(a: us_split_fields2) : positive =
  (a).rec__bounded_queue_v1__queue_type__rear1

function us_split_fields_Items__2__projection(a: us_split_fields2) : (int,element_type) farray =
  (a).rec__bounded_queue_v1__queue_type__items1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___5__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___6__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count =
  ((a).us_split_fields3).rec__bounded_queue_v1__queue_type__count1;
  rec__bounded_queue_v1__queue_type__front =
  ((a).us_split_fields3).rec__bounded_queue_v1__queue_type__front1;
  rec__bounded_queue_v1__queue_type__rear =
  ((a).us_split_fields3).rec__bounded_queue_v1__queue_type__rear1;
  rec__bounded_queue_v1__queue_type__items =
  of_array1(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__items1,
  1, 100) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__bounded_queue_v1__queue_type__count1 =
  ((r).us_split_fields1).rec__bounded_queue_v1__queue_type__count;
  rec__bounded_queue_v1__queue_type__front1 =
  ((r).us_split_fields1).rec__bounded_queue_v1__queue_type__front;
  rec__bounded_queue_v1__queue_type__rear1 =
  ((r).us_split_fields1).rec__bounded_queue_v1__queue_type__rear;
  rec__bounded_queue_v1__queue_type__items1 =
  to_array1(((r).us_split_fields1).rec__bounded_queue_v1__queue_type__items)
  } }

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  ((((to_rep3(((a).us_split_discrs2).rec__bounded_queue_v1__queue_type__max_size) = to_rep3(((b).us_split_discrs2).rec__bounded_queue_v1__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__count1) = to_rep2(((b).us_split_fields3).rec__bounded_queue_v1__queue_type__count1)) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__front1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_v1__queue_type__front1))) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__rear1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_v1__queue_type__rear1))) and
  (bool_eq9(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__items1,
  1, 100, ((b).us_split_fields3).rec__bounded_queue_v1__queue_type__items1,
  1, 100) = true))) -> (bool_eq14(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs2).rec__bounded_queue_v1__queue_type__max_size) = to_rep3(((b).us_split_discrs2).rec__bounded_queue_v1__queue_type__max_size)) and
  ((((to_rep2(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__count1) = to_rep2(((b).us_split_fields3).rec__bounded_queue_v1__queue_type__count1)) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__front1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_v1__queue_type__front1))) and
  (to_rep3(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__rear1) = to_rep3(((b).us_split_fields3).rec__bounded_queue_v1__queue_type__rear1))) and
  (bool_eq9(((a).us_split_fields3).rec__bounded_queue_v1__queue_type__items1,
  1, 100, ((b).us_split_fields3).rec__bounded_queue_v1__queue_type__items1,
  1, 100) = true)))) -> (bool_eq14(a, b) = false))))

predicate in_range7(rec__bounded_queue_v1__queue_type__max_size1: int,
  a: us_rep) =
  (rec__bounded_queue_v1__queue_type__max_size1 = to_rep3(((a).us_split_discrs1).rec__bounded_queue_v1__queue_type__max_size))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray.
  (0 <= object__size4({ us_split_discrs2 = {
  rec__bounded_queue_v1__queue_type__max_size = a }; us_split_fields3 = {
  rec__bounded_queue_v1__queue_type__count1 = a1;
  rec__bounded_queue_v1__queue_type__front1 = a2;
  rec__bounded_queue_v1__queue_type__rear1 = a3;
  rec__bounded_queue_v1__queue_type__items1 = a4 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:positive. forall a1:natural. forall a2:positive.
  forall a3:positive. forall a4:(int,element_type) farray.
  (0 <= object__alignment4({ us_split_discrs2 = {
  rec__bounded_queue_v1__queue_type__max_size = a }; us_split_fields3 = {
  rec__bounded_queue_v1__queue_type__count1 = a1;
  rec__bounded_queue_v1__queue_type__front1 = a2;
  rec__bounded_queue_v1__queue_type__rear1 = a3;
  rec__bounded_queue_v1__queue_type__items1 = a4 } })))

logic bounded_queue_v1__queue_type__max_size__first__bit1 : int

logic bounded_queue_v1__queue_type__max_size__last__bit1 : int

logic bounded_queue_v1__queue_type__max_size__position1 : int

axiom bounded_queue_v1__queue_type__max_size__first__bit_axiom1 :
  (0 <= bounded_queue_v1__queue_type__max_size__first__bit1)

axiom bounded_queue_v1__queue_type__max_size__last__bit_axiom1 :
  (bounded_queue_v1__queue_type__max_size__first__bit1 <  bounded_queue_v1__queue_type__max_size__last__bit1)

axiom bounded_queue_v1__queue_type__max_size__position_axiom1 :
  (0 <= bounded_queue_v1__queue_type__max_size__position1)

logic bounded_queue_v1__queue_type__count__first__bit1 : int

logic bounded_queue_v1__queue_type__count__last__bit1 : int

logic bounded_queue_v1__queue_type__count__position1 : int

axiom bounded_queue_v1__queue_type__count__first__bit_axiom1 :
  (0 <= bounded_queue_v1__queue_type__count__first__bit1)

axiom bounded_queue_v1__queue_type__count__last__bit_axiom1 :
  (bounded_queue_v1__queue_type__count__first__bit1 <  bounded_queue_v1__queue_type__count__last__bit1)

axiom bounded_queue_v1__queue_type__count__position_axiom1 :
  (0 <= bounded_queue_v1__queue_type__count__position1)

logic bounded_queue_v1__queue_type__front__first__bit1 : int

logic bounded_queue_v1__queue_type__front__last__bit1 : int

logic bounded_queue_v1__queue_type__front__position1 : int

axiom bounded_queue_v1__queue_type__front__first__bit_axiom1 :
  (0 <= bounded_queue_v1__queue_type__front__first__bit1)

axiom bounded_queue_v1__queue_type__front__last__bit_axiom1 :
  (bounded_queue_v1__queue_type__front__first__bit1 <  bounded_queue_v1__queue_type__front__last__bit1)

axiom bounded_queue_v1__queue_type__front__position_axiom1 :
  (0 <= bounded_queue_v1__queue_type__front__position1)

logic bounded_queue_v1__queue_type__rear__first__bit1 : int

logic bounded_queue_v1__queue_type__rear__last__bit1 : int

logic bounded_queue_v1__queue_type__rear__position1 : int

axiom bounded_queue_v1__queue_type__rear__first__bit_axiom1 :
  (0 <= bounded_queue_v1__queue_type__rear__first__bit1)

axiom bounded_queue_v1__queue_type__rear__last__bit_axiom1 :
  (bounded_queue_v1__queue_type__rear__first__bit1 <  bounded_queue_v1__queue_type__rear__last__bit1)

axiom bounded_queue_v1__queue_type__rear__position_axiom1 :
  (0 <= bounded_queue_v1__queue_type__rear__position1)

logic bounded_queue_v1__queue_type__items__first__bit1 : int

logic bounded_queue_v1__queue_type__items__last__bit1 : int

logic bounded_queue_v1__queue_type__items__position1 : int

axiom bounded_queue_v1__queue_type__items__first__bit_axiom1 :
  (0 <= bounded_queue_v1__queue_type__items__first__bit1)

axiom bounded_queue_v1__queue_type__items__last__bit_axiom1 :
  (bounded_queue_v1__queue_type__items__first__bit1 <  bounded_queue_v1__queue_type__items__last__bit1)

axiom bounded_queue_v1__queue_type__items__position_axiom1 :
  (0 <= bounded_queue_v1__queue_type__items__position1)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy18 : positive

logic dummy19 : natural

logic dummy20 : positive

logic dummy21 : positive

logic dummy22 : (int,element_type) farray

type tmy_queueS__ref = { tmy_queueS__content : us_rep1
}

function tmy_queueS__ref___projection(a: tmy_queueS__ref) : us_rep1 =
  (a).tmy_queueS__content

logic my_queue__split_discrs : positive

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___String_Literal_659 : unit -> (int,character) farray

axiom temp___String_Literal_659__def_axiom :
  (((((((((((((((((((((((((to_rep((temp___String_Literal_659(void)[1])) = 83) and
  (to_rep((temp___String_Literal_659(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_659(void)[3])) = 122)) and
  (to_rep((temp___String_Literal_659(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_659(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_659(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_659(void)[7])) = 102)) and
  (to_rep((temp___String_Literal_659(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_659(void)[9])) = 99)) and
  (to_rep((temp___String_Literal_659(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_659(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_659(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_659(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_659(void)[14])) = 101)) and
  (to_rep((temp___String_Literal_659(void)[15])) = 100)) and
  (to_rep((temp___String_Literal_659(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_659(void)[17])) = 113)) and
  (to_rep((temp___String_Literal_659(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_659(void)[19])) = 101)) and
  (to_rep((temp___String_Literal_659(void)[20])) = 117)) and
  (to_rep((temp___String_Literal_659(void)[21])) = 101)) and
  (to_rep((temp___String_Literal_659(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_659(void)[23])) = 105)) and
  (to_rep((temp___String_Literal_659(void)[24])) = 115)) and
  (to_rep((temp___String_Literal_659(void)[25])) = 32))

axiom full__post_axiom : true

axiom empty__post_axiom : true

axiom first_element__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t1 [first_element({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = queue }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } })]. (((dynamic_property2(1, to_rep3(queue), to_rep1(first2(queue5)),
  to_rep1(last2(queue5))) and ((to_rep1(first2(queue5)) = 1) and
  (to_rep1(last2(queue5)) = to_rep3(queue)))) and (not (empty({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size = queue };
  us_split_fields1 = { rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } }) = true))) -> in_range5(first_element({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = queue }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } }))))

axiom last_element__post_axiom :
  (forall queue:positive. forall queue1:natural. forall queue2:positive.
  forall queue3:positive. forall queue4:(int,element_type) farray.
  forall queue5:t1 [last_element({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = queue }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } })]. (((dynamic_property2(1, to_rep3(queue), to_rep1(first2(queue5)),
  to_rep1(last2(queue5))) and ((to_rep1(first2(queue5)) = 1) and
  (to_rep1(last2(queue5)) = to_rep3(queue)))) and (not (empty({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size = queue };
  us_split_fields1 = { rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } }) = true))) -> in_range5(last_element({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = queue }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = queue1;
  rec__bounded_queue_v1__queue_type__front = queue2;
  rec__bounded_queue_v1__queue_type__rear = queue3;
  rec__bounded_queue_v1__queue_type__items = { elts1 = queue4; rt1 = queue5 }
  } }))))

 (* File "bounded_queue_example_v1.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall my_queue__split_fields:natural.
  forall my_queue__split_fields1:positive.
  forall my_queue__split_fields2:positive.
  forall my_queue__split_fields3:(int,element_type) farray. forall value:int.
  forall count:int. forall count1:int. forall us:int.
  forall temp___650:positive. forall temp___6501:natural.
  forall temp___6502:positive. forall temp___6503:positive.
  forall temp___6504:(int,element_type) farray.
  forall bounded_queue_v1__clear__queue__fields:natural.
  forall bounded_queue_v1__clear__queue__fields1:positive.
  forall bounded_queue_v1__clear__queue__fields2:positive.
  forall bounded_queue_v1__clear__queue__fields3:(int,element_type) farray.
  forall bounded_queue_v1__clear__queue__fields4:t1. forall result:natural.
  forall result1:positive. forall result2:positive.
  forall result3:(int,element_type) farray.
  forall my_queue__split_fields4:natural.
  forall my_queue__split_fields5:positive.
  forall my_queue__split_fields6:positive.
  forall my_queue__split_fields7:(int,element_type) farray.
  forall result4:int. forall count2:int.
  forall my_queue__split_fields8:natural.
  forall my_queue__split_fields9:positive.
  forall my_queue__split_fields10:positive.
  forall my_queue__split_fields11:(int,element_type) farray.
  forall count3:int. forall bounded_queue_v1__enqueue__queue__fields:natural.
  forall bounded_queue_v1__enqueue__queue__fields1:positive.
  forall bounded_queue_v1__enqueue__queue__fields2:positive.
  forall bounded_queue_v1__enqueue__queue__fields3:(int,element_type) farray.
  forall bounded_queue_v1__enqueue__queue__fields4:t1.
  forall result5:natural. forall result6:positive. forall result7:positive.
  forall result8:(int,element_type) farray.
  forall my_queue__split_fields12:natural.
  forall my_queue__split_fields13:positive.
  forall my_queue__split_fields14:positive.
  forall my_queue__split_fields15:(int,element_type) farray.
  forall my_queue__split_fields16:natural.
  forall my_queue__split_fields17:positive.
  forall my_queue__split_fields18:positive.
  forall my_queue__split_fields19:(int,element_type) farray.
  forall count4:int. forall my_queue__split_fields20:natural.
  forall my_queue__split_fields21:positive.
  forall my_queue__split_fields22:positive.
  forall my_queue__split_fields23:(int,element_type) farray.
  forall count5:int. forall my_queue__split_fields24:natural.
  forall my_queue__split_fields25:positive.
  forall my_queue__split_fields26:positive.
  forall my_queue__split_fields27:(int,element_type) farray.
  forall count6:int. forall my_queue__split_fields28:natural.
  forall my_queue__split_fields29:positive.
  forall my_queue__split_fields30:positive.
  forall my_queue__split_fields31:(int,element_type) farray.
  forall count7:int. forall result9:int. forall count8:int. (((us = 100) and
  in_range2(100)) -> ((to_rep3(my_queue__split_discrs) = 100) ->
  ((100 = to_rep3(my_queue__split_discrs)) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(value)) -> (((((empty({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count =
  bounded_queue_v1__clear__queue__fields;
  rec__bounded_queue_v1__queue_type__front =
  bounded_queue_v1__clear__queue__fields1;
  rec__bounded_queue_v1__queue_type__rear =
  bounded_queue_v1__clear__queue__fields2;
  rec__bounded_queue_v1__queue_type__items = { elts1 =
  bounded_queue_v1__clear__queue__fields3; rt1 =
  bounded_queue_v1__clear__queue__fields4 } } }) = true) and (size({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count =
  bounded_queue_v1__clear__queue__fields;
  rec__bounded_queue_v1__queue_type__front =
  bounded_queue_v1__clear__queue__fields1;
  rec__bounded_queue_v1__queue_type__rear =
  bounded_queue_v1__clear__queue__fields2;
  rec__bounded_queue_v1__queue_type__items = { elts1 =
  bounded_queue_v1__clear__queue__fields3; rt1 =
  bounded_queue_v1__clear__queue__fields4 } } }) = 0)) and
  (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_v1__clear__queue__fields4)),
  to_rep1(last2(bounded_queue_v1__clear__queue__fields4))) and
  ((to_rep1(first2(bounded_queue_v1__clear__queue__fields4)) = 1) and
  (to_rep1(last2(bounded_queue_v1__clear__queue__fields4)) = to_rep3(my_queue__split_discrs))))) and
  (((result = my_queue__split_fields) and
  ((result1 = my_queue__split_fields1) and
  ((result2 = my_queue__split_fields2) and
  (result3 = my_queue__split_fields3)))) and
  ((bounded_queue_v1__clear__queue__fields = my_queue__split_fields4) and
  ((bounded_queue_v1__clear__queue__fields1 = my_queue__split_fields5) and
  ((bounded_queue_v1__clear__queue__fields2 = my_queue__split_fields6) and
  (bounded_queue_v1__clear__queue__fields3 = my_queue__split_fields7)))))) ->
  (((({ int__content = result4 } = { int__content = count }) and
  (count2 = 17)) and ((((17 <= count2) and (count2 <= 52)) and
  (((((temp___650 = my_queue__split_discrs) and
  ((temp___6501 = my_queue__split_fields4) and
  ((temp___6502 = my_queue__split_fields5) and
  ((temp___6503 = my_queue__split_fields6) and
  (temp___6504 = my_queue__split_fields7))))) and (((17 <= count3) and
  (count3 <= 52)) and (((((not (empty({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = my_queue__split_discrs };
  us_split_fields1 = { rec__bounded_queue_v1__queue_type__count =
  bounded_queue_v1__enqueue__queue__fields;
  rec__bounded_queue_v1__queue_type__front =
  bounded_queue_v1__enqueue__queue__fields1;
  rec__bounded_queue_v1__queue_type__rear =
  bounded_queue_v1__enqueue__queue__fields2;
  rec__bounded_queue_v1__queue_type__items = { elts1 =
  bounded_queue_v1__enqueue__queue__fields3; rt1 =
  bounded_queue_v1__enqueue__queue__fields4 } } }) = true)) and ((size({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count =
  bounded_queue_v1__enqueue__queue__fields;
  rec__bounded_queue_v1__queue_type__front =
  bounded_queue_v1__enqueue__queue__fields1;
  rec__bounded_queue_v1__queue_type__rear =
  bounded_queue_v1__enqueue__queue__fields2;
  rec__bounded_queue_v1__queue_type__items = { elts1 =
  bounded_queue_v1__enqueue__queue__fields3; rt1 =
  bounded_queue_v1__enqueue__queue__fields4 } } }) = (size({
  us_split_discrs1 = { rec__bounded_queue_v1__queue_type__max_size =
  my_queue__split_discrs }; us_split_fields1 = {
  rec__bounded_queue_v1__queue_type__count = my_queue__split_fields8;
  rec__bounded_queue_v1__queue_type__front = my_queue__split_fields9;
  rec__bounded_queue_v1__queue_type__rear = my_queue__split_fields10;
  rec__bounded_queue_v1__queue_type__items = { elts1 =
  my_queue__split_fields11; rt1 = mk1(1, 100) } } }) + 1)) and
  (last_element({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = my_queue__split_discrs };
  us_split_fields1 = { rec__bounded_queue_v1__queue_type__count =
  bounded_queue_v1__enqueue__queue__fields;
  rec__bounded_queue_v1__queue_type__front =
  bounded_queue_v1__enqueue__queue__fields1;
  rec__bounded_queue_v1__queue_type__rear =
  bounded_queue_v1__enqueue__queue__fields2;
  rec__bounded_queue_v1__queue_type__items = { elts1 =
  bounded_queue_v1__enqueue__queue__fields3; rt1 =
  bounded_queue_v1__enqueue__queue__fields4 } } }) = count3))) and
  (dynamic_property2(1, to_rep3(my_queue__split_discrs),
  to_rep1(first2(bounded_queue_v1__enqueue__queue__fields4)),
  to_rep1(last2(bounded_queue_v1__enqueue__queue__fields4))) and
  ((to_rep1(first2(bounded_queue_v1__enqueue__queue__fields4)) = 1) and
  (to_rep1(last2(bounded_queue_v1__enqueue__queue__fields4)) = to_rep3(my_queue__split_discrs))))) and
  (((result5 = my_queue__split_fields8) and
  ((result6 = my_queue__split_fields9) and
  ((result7 = my_queue__split_fields10) and
  (result8 = my_queue__split_fields11)))) and
  ((bounded_queue_v1__enqueue__queue__fields = my_queue__split_fields12) and
  ((bounded_queue_v1__enqueue__queue__fields1 = my_queue__split_fields13) and
  ((bounded_queue_v1__enqueue__queue__fields2 = my_queue__split_fields14) and
  (bounded_queue_v1__enqueue__queue__fields3 = my_queue__split_fields15)))))) and
  (count3 = 52)))) and (((count3 = count4) and
  ((my_queue__split_fields16 = my_queue__split_fields12) and
  ((my_queue__split_fields17 = my_queue__split_fields13) and
  ((my_queue__split_fields18 = my_queue__split_fields14) and
  (my_queue__split_fields19 = my_queue__split_fields15))))) and
  ((count5 = count3) and ({ rec__bounded_queue_v1__queue_type__count1 =
  my_queue__split_fields20; rec__bounded_queue_v1__queue_type__front1 =
  my_queue__split_fields21; rec__bounded_queue_v1__queue_type__rear1 =
  my_queue__split_fields22; rec__bounded_queue_v1__queue_type__items1 =
  my_queue__split_fields23 } = { rec__bounded_queue_v1__queue_type__count1 =
  my_queue__split_fields12; rec__bounded_queue_v1__queue_type__front1 =
  my_queue__split_fields13; rec__bounded_queue_v1__queue_type__rear1 =
  my_queue__split_fields14; rec__bounded_queue_v1__queue_type__items1 =
  my_queue__split_fields15 })))) and ((({ int__content = count6 } = {
  int__content = count4 }) and ({ us_split_fields__content1 = {
  rec__bounded_queue_v1__queue_type__count1 = my_queue__split_fields24;
  rec__bounded_queue_v1__queue_type__front1 = my_queue__split_fields25;
  rec__bounded_queue_v1__queue_type__rear1 = my_queue__split_fields26;
  rec__bounded_queue_v1__queue_type__items1 = my_queue__split_fields27 }
  } = { us_split_fields__content1 = {
  rec__bounded_queue_v1__queue_type__count1 = my_queue__split_fields16;
  rec__bounded_queue_v1__queue_type__front1 = my_queue__split_fields17;
  rec__bounded_queue_v1__queue_type__rear1 = my_queue__split_fields18;
  rec__bounded_queue_v1__queue_type__items1 = my_queue__split_fields19 }
  })) and ((count7 = count5) and ({
  rec__bounded_queue_v1__queue_type__count1 = my_queue__split_fields28;
  rec__bounded_queue_v1__queue_type__front1 = my_queue__split_fields29;
  rec__bounded_queue_v1__queue_type__rear1 = my_queue__split_fields30;
  rec__bounded_queue_v1__queue_type__items1 = my_queue__split_fields31 } = {
  rec__bounded_queue_v1__queue_type__count1 = my_queue__split_fields20;
  rec__bounded_queue_v1__queue_type__front1 = my_queue__split_fields21;
  rec__bounded_queue_v1__queue_type__rear1 = my_queue__split_fields22;
  rec__bounded_queue_v1__queue_type__items1 = my_queue__split_fields23
  }))))) or ((not ((17 <= count2) and (count2 <= 52))) and
  (((count2 = count6) and
  ((my_queue__split_fields24 = my_queue__split_fields4) and
  ((my_queue__split_fields25 = my_queue__split_fields5) and
  ((my_queue__split_fields26 = my_queue__split_fields6) and
  (my_queue__split_fields27 = my_queue__split_fields7))))) and
  ((count7 = count2) and ({ rec__bounded_queue_v1__queue_type__count1 =
  my_queue__split_fields28; rec__bounded_queue_v1__queue_type__front1 =
  my_queue__split_fields29; rec__bounded_queue_v1__queue_type__rear1 =
  my_queue__split_fields30; rec__bounded_queue_v1__queue_type__items1 =
  my_queue__split_fields31 } = { rec__bounded_queue_v1__queue_type__count1 =
  my_queue__split_fields4; rec__bounded_queue_v1__queue_type__front1 =
  my_queue__split_fields5; rec__bounded_queue_v1__queue_type__rear1 =
  my_queue__split_fields6; rec__bounded_queue_v1__queue_type__items1 =
  my_queue__split_fields7 })))))) -> (((result9 = count1) and
  (count8 = 1)) -> (not (empty({ us_split_discrs1 = {
  rec__bounded_queue_v1__queue_type__max_size = my_queue__split_discrs };
  us_split_fields1 = { rec__bounded_queue_v1__queue_type__count =
  my_queue__split_fields24; rec__bounded_queue_v1__queue_type__front =
  my_queue__split_fields25; rec__bounded_queue_v1__queue_type__rear =
  my_queue__split_fields26; rec__bounded_queue_v1__queue_type__items = {
  elts1 = my_queue__split_fields27; rt1 = mk1(1, 100) } } }) = true))))))))))
