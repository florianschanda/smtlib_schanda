(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort privileget 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (privileget privileget) Bool)
(declare-const dummy privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep (privileget) Int)
(declare-fun of_rep (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort adminprivileget 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (adminprivileget adminprivileget) Bool)
(declare-const dummy1 adminprivileget)
(declare-datatypes () ((adminprivileget__ref (mk_adminprivileget__ref (adminprivileget__content adminprivileget)))))
(define-fun adminprivileget__ref___projection ((a adminprivileget__ref)) adminprivileget (adminprivileget__content a))
(declare-sort datalengtht 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 78)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (datalengtht datalengtht) Bool)
(declare-const dummy2 datalengtht)
(declare-datatypes () ((datalengtht__ref (mk_datalengtht__ref (datalengtht__content datalengtht)))))
(define-fun datalengtht__ref___projection ((a datalengtht__ref)) datalengtht (datalengtht__content a))
(declare-fun to_rep1 (datalengtht) Int)
(declare-fun of_rep1 (Int) datalengtht)
(assert (forall ((x datalengtht)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x datalengtht)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort character 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (character character) Bool)
(declare-const dummy3 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep2 (character) Int)
(declare-fun of_rep2 (Int) character)
(assert (forall ((x character)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x character)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep2 (select a temp___idx_78)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep2 (select a temp___idx_78)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy4 (Array Int character))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__keyboard__datat__length datalengtht) (rec__keyboard__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) datalengtht (rec__keyboard__datat__length a))
(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character) (rec__keyboard__datat__text a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 a))) (to_rep1 (rec__keyboard__datat__length (us_split_fields1 b)))) (= (bool_eq (rec__keyboard__datat__text (us_split_fields1 a)) 1 78 (rec__keyboard__datat__text (us_split_fields1 b)) 1 78) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const keyboard__datat__length__first__bit Int)
(declare-const keyboard__datat__length__last__bit Int)
(declare-const keyboard__datat__length__position Int)
(assert (<= 0 keyboard__datat__length__first__bit))
(assert (< keyboard__datat__length__first__bit keyboard__datat__length__last__bit))
(assert (<= 0 keyboard__datat__length__position))
(declare-const keyboard__datat__text__first__bit Int)
(declare-const keyboard__datat__text__last__bit Int)
(declare-const keyboard__datat__text__position Int)
(assert (<= 0 keyboard__datat__text__first__bit))
(assert (< keyboard__datat__text__first__bit keyboard__datat__text__last__bit))
(assert (<= 0 keyboard__datat__text__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((datat__ref (mk_datat__ref (datat__content us_rep)))))
(define-fun datat__ref___projection ((a datat__ref)) us_rep (datat__content a))
(declare-sort opandnullt 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (opandnullt opandnullt) Bool)
(declare-const dummy6 opandnullt)
(declare-datatypes () ((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt (opandnullt__content a))
(define-fun dynamic_invariant ((temp___expr_421 Int) (temp___is_init_418 Bool) (temp___skip_constant_419 Bool) (temp___do_toplevel_420 Bool)) Bool (=> (or (= temp___is_init_418 true) (<= 0 4)) (in_range5 temp___expr_421)))
(declare-sort opt 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (opt opt) Bool)
(declare-const dummy7 opt)
(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))
(declare-fun to_rep3 (opandnullt) Int)
(declare-fun of_rep3 (Int) opandnullt)
(assert (forall ((x opandnullt)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x opandnullt)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__admin__t__rolepresent privileget) (rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields2)) privileget (rec__admin__t__rolepresent a))
(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields2)) opandnullt (rec__admin__t__currentop a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__admin__t__rolepresent (us_split_fields3 a))) (to_rep (rec__admin__t__rolepresent (us_split_fields3 b)))) (= (to_rep3 (rec__admin__t__currentop (us_split_fields3 a))) (to_rep3 (rec__admin__t__currentop (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const admin__t__rolepresent__first__bit Int)
(declare-const admin__t__rolepresent__last__bit Int)
(declare-const admin__t__rolepresent__position Int)
(assert (<= 0 admin__t__rolepresent__first__bit))
(assert (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))
(assert (<= 0 admin__t__rolepresent__position))
(declare-const admin__t__currentop__first__bit Int)
(declare-const admin__t__currentop__last__bit Int)
(declare-const admin__t__currentop__position Int)
(assert (<= 0 admin__t__currentop__first__bit))
(assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))
(assert (<= 0 admin__t__currentop__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))
(declare-fun str_comp (us_rep Int) Bool)
(declare-fun str_comp__function_guard (Bool us_rep Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_427 Int) (temp___is_init_424 Bool) (temp___skip_constant_425 Bool) (temp___do_toplevel_426 Bool)) Bool (=> (or (= temp___is_init_424 true) (<= 1 4)) (in_range6 temp___expr_427)))
(declare-sort datalengtht1 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (datalengtht1 datalengtht1) Bool)
(declare-const dummy9 datalengtht1)
(declare-datatypes () ((datalengtht__ref1 (mk_datalengtht__ref1 (datalengtht__content1 datalengtht1)))))
(define-fun datalengtht__ref___2__projection ((a datalengtht__ref1)) datalengtht1 (datalengtht__content1 a))
(declare-fun to_rep4 (datalengtht1) Int)
(declare-fun of_rep4 (Int) datalengtht1)
(assert (forall ((x datalengtht1)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x datalengtht1)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort datai 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq10 (datai datai) Bool)
(declare-const dummy10 datai)
(declare-datatypes () ((datai__ref (mk_datai__ref (datai__content datai)))))
(define-fun datai__ref___2__projection ((a datai__ref)) datai (datai__content a))
(declare-fun to_rep5 (datai) Int)
(declare-fun of_rep5 (Int) datai)
(assert (forall ((x datai)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x datai)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-const dummy11 (Array Int character))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int character)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq11 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__admin__datat__length datalengtht1) (rec__admin__datat__minmatchlength datai) (rec__admin__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__2__projection ((a us_split_fields4)) datalengtht1 (rec__admin__datat__length a))
(define-fun us_split_fields_MinMatchLength__projection ((a us_split_fields4)) datai (rec__admin__datat__minmatchlength a))
(define-fun us_split_fields_Text__2__projection ((a us_split_fields4)) (Array Int character) (rec__admin__datat__text a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (to_rep4 (rec__admin__datat__length (us_split_fields5 a))) (to_rep4 (rec__admin__datat__length (us_split_fields5 b)))) (= (to_rep5 (rec__admin__datat__minmatchlength (us_split_fields5 a))) (to_rep5 (rec__admin__datat__minmatchlength (us_split_fields5 b))))) (= (bool_eq (rec__admin__datat__text (us_split_fields5 a)) 1 18 (rec__admin__datat__text (us_split_fields5 b)) 1 18) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const admin__datat__length__first__bit Int)
(declare-const admin__datat__length__last__bit Int)
(declare-const admin__datat__length__position Int)
(assert (<= 0 admin__datat__length__first__bit))
(assert (< admin__datat__length__first__bit admin__datat__length__last__bit))
(assert (<= 0 admin__datat__length__position))
(declare-const admin__datat__minmatchlength__first__bit Int)
(declare-const admin__datat__minmatchlength__last__bit Int)
(declare-const admin__datat__minmatchlength__position Int)
(assert (<= 0 admin__datat__minmatchlength__first__bit))
(assert (< admin__datat__minmatchlength__first__bit admin__datat__minmatchlength__last__bit))
(assert (<= 0 admin__datat__minmatchlength__position))
(declare-const admin__datat__text__first__bit Int)
(declare-const admin__datat__text__last__bit Int)
(declare-const admin__datat__text__position Int)
(assert (<= 0 admin__datat__text__first__bit))
(assert (< admin__datat__text__first__bit admin__datat__text__last__bit))
(assert (<= 0 admin__datat__text__position))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((datat__ref1 (mk_datat__ref1 (datat__content1 us_rep2)))))
(define-fun datat__ref___2__projection ((a datat__ref1)) us_rep2 (datat__content1 a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))
(assert (forall ((v us_rep2)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq3 (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq3 (select a temp___idx_156) (select b (+ (- b__first a__first) temp___idx_156))) true))))))))
(declare-const optokeyed (Array Int us_rep2))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert true)
(assert (forall ((keyedop us_rep)) (forall ((op Int)) (! (= (= (str_comp keyedop op) true) (and (and (<= (to_rep5 (rec__admin__datat__minmatchlength (us_split_fields5 (select optokeyed op)))) (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))) (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop))) (to_rep4 (rec__admin__datat__length (us_split_fields5 (select optokeyed op)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop))))) (= (to_rep2 (let ((temp___442 (rec__admin__datat__text (us_split_fields5 (select optokeyed op))))) (select temp___442 i))) (to_rep2 (let ((temp___443 (rec__keyboard__datat__text (us_split_fields1 keyedop)))) (select temp___443 i)))))))) :pattern ((str_comp keyedop op))))))
(declare-fun ispresent (us_rep1) Bool)
(declare-fun ispresent__function_guard (Bool us_rep1) Bool)
(assert true)
(assert (forall ((theadmin us_rep1)) (! (= (= (ispresent theadmin) true) (in_range2 (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin))))) :pattern ((ispresent theadmin)))))
(declare-fun allowedop (us_rep1 Int) Bool)
(declare-fun allowedop__function_guard (Bool us_rep1 Int) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int Bool))))))
(declare-fun slide2 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(declare-fun concat3 ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat3 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton3 (Bool Int) (Array Int Bool))
(assert (forall ((v Bool)) (forall ((i Int)) (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i))))))
(define-fun bool_eq5 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (select a temp___idx_133) (select b (+ (- b__first a__first) temp___idx_133))))))))))
(declare-fun compare1 ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq5 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq5 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-const dummy13 (Array Int Bool))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array Int Bool)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int Bool)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array Int Bool)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__alignment5 a))))
(declare-fun user_eq13 ((Array Int Bool) (Array Int Bool)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int Bool)))))))
(declare-fun slide3 ((Array Int (Array Int Bool)) Int Int) (Array Int (Array Int Bool)))
(assert (forall ((a (Array Int (Array Int Bool)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int Bool)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(declare-fun concat4 ((Array Int (Array Int Bool)) Int Int (Array Int (Array Int Bool)) Int Int) (Array Int (Array Int Bool)))
(assert (forall ((a (Array Int (Array Int Bool))) (b (Array Int (Array Int Bool)))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat4 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton4 ((Array Int Bool) Int) (Array Int (Array Int Bool)))
(assert (forall ((v (Array Int Bool))) (forall ((i Int)) (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i))))))
(define-fun bool_eq6 ((a (Array Int (Array Int Bool))) (a__first Int) (a__last Int) (b (Array Int (Array Int Bool))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq5 (select a temp___idx_134) 1 4 (select b (+ (- b__first a__first) temp___idx_134)) 1 4) true)))) true false))
(assert (forall ((a (Array Int (Array Int Bool))) (b (Array Int (Array Int Bool)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (bool_eq5 (select a temp___idx_134) 1 4 (select b (+ (- b__first a__first) temp___idx_134)) 1 4) true))))))))
(declare-const isavailable (Array Int (Array Int Bool)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert (forall ((theadmin us_rep1)) (forall ((op Int)) (! (= (= (allowedop theadmin op) true) (= (let ((temp___445 (select isavailable (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin)))))) (select temp___445 op)) true)) :pattern ((allowedop theadmin op))))))
(declare-const theadmin us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const keyedop us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun admin__isavailable__aggregate_def ((Array Int Bool) (Array Int Bool) (Array Int Bool)) (Array Int (Array Int Bool)))
(assert (forall ((temp___136 (Array Int Bool)) (temp___137 (Array Int Bool)) (temp___138 (Array Int Bool))) (let ((temp___135 (admin__isavailable__aggregate_def temp___136 temp___137 temp___138))) (and (and (= (select temp___135 1) temp___136) (= (select temp___135 2) temp___137)) (= (select temp___135 3) temp___138)))))
(declare-fun temp___140 (Bool Bool) (Array Int Bool))
(assert (forall ((temp___142 Bool) (temp___143 Bool)) (let ((temp___141 (temp___140 temp___142 temp___143))) (forall ((temp___144 Int)) (ite (= temp___144 3) (= (select temp___141 temp___144) temp___142) (= (select temp___141 temp___144) temp___143))))))
(declare-fun temp___145 (Bool Bool) (Array Int Bool))
(assert (forall ((temp___147 Bool) (temp___148 Bool)) (let ((temp___146 (temp___145 temp___147 temp___148))) (forall ((temp___149 Int)) (ite (= temp___149 1) (= (select temp___146 temp___149) temp___147) (= (select temp___146 temp___149) temp___148))))))
(declare-fun temp___150 (Bool Bool Bool) (Array Int Bool))
(assert (forall ((temp___152 Bool) (temp___153 Bool) (temp___154 Bool)) (let ((temp___151 (temp___150 temp___152 temp___153 temp___154))) (forall ((temp___155 Int)) (ite (= temp___155 4) (= (select temp___151 temp___155) temp___153) (ite (= temp___155 2) (= (select temp___151 temp___155) temp___152) (= (select temp___151 temp___155) temp___154)))))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range4 temp___expr_63)))
(define-fun dynamic_invariant3 ((temp___expr_472 Int) (temp___is_init_469 Bool) (temp___skip_constant_470 Bool) (temp___do_toplevel_471 Bool)) Bool (=> (or (= temp___is_init_469 true) (<= 0 18)) (in_range7 temp___expr_472)))
(define-fun dynamic_invariant4 ((temp___expr_478 Int) (temp___is_init_475 Bool) (temp___skip_constant_476 Bool) (temp___do_toplevel_477 Bool)) Bool (=> (or (= temp___is_init_475 true) (<= 1 18)) (in_range8 temp___expr_478)))
(declare-fun admin__optokeyed__aggregate_def (us_rep2 us_rep2 us_rep2 us_rep2) (Array Int us_rep2))
(assert (forall ((temp___158 us_rep2) (temp___159 us_rep2) (temp___160 us_rep2) (temp___161 us_rep2)) (let ((temp___157 (admin__optokeyed__aggregate_def temp___158 temp___159 temp___160 temp___161))) (and (and (and (= (select temp___157 1) temp___158) (= (select temp___157 2) temp___159)) (= (select temp___157 3) temp___160)) (= (select temp___157 4) temp___161)))))
(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 1)) 65) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 2)) 82)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 3)) 67)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 4)) 72)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 5)) 73)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 6)) 86)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 7)) 69)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 8)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 9)) 76)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 10)) 79)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 11)) 71)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 12)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 13)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 14)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 15)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 16)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 17)) 32)) (= (to_rep2 (select (temp___String_Literal_163 us_void_param) 18)) 32)) :pattern ((temp___String_Literal_163 us_void_param)))))
(declare-fun temp___String_Literal_164 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 1)) 85) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 2)) 80)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 3)) 68)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 4)) 65)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 5)) 84)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 6)) 69)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 7)) 32)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 8)) 67)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 9)) 79)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 10)) 78)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 11)) 70)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 12)) 73)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 13)) 71)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 14)) 32)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 15)) 68)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 16)) 65)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 17)) 84)) (= (to_rep2 (select (temp___String_Literal_164 us_void_param) 18)) 65)) :pattern ((temp___String_Literal_164 us_void_param)))))
(declare-fun temp___String_Literal_165 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 1)) 79) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 2)) 86)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 3)) 69)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 4)) 82)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 5)) 82)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 6)) 73)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 7)) 68)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 8)) 69)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 9)) 32)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 10)) 76)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 11)) 79)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 12)) 67)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 13)) 75)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 14)) 32)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 15)) 32)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 16)) 32)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 17)) 32)) (= (to_rep2 (select (temp___String_Literal_165 us_void_param) 18)) 32)) :pattern ((temp___String_Literal_165 us_void_param)))))
(declare-fun temp___String_Literal_166 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 1)) 83) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 2)) 72)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 3)) 85)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 4)) 84)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 5)) 68)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 6)) 79)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 7)) 87)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 8)) 78)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 9)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 10)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 11)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 12)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 13)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 14)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 15)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 16)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 17)) 32)) (= (to_rep2 (select (temp___String_Literal_166 us_void_param) 18)) 32)) :pattern ((temp___String_Literal_166 us_void_param)))))
(assert (= optokeyed (admin__optokeyed__aggregate_def (mk___rep2 (mk___split_fields2 (of_rep4 11) (of_rep5 7) (temp___String_Literal_163 Tuple0))) (mk___rep2 (mk___split_fields2 (of_rep4 18) (of_rep5 6) (temp___String_Literal_164 Tuple0))) (mk___rep2 (mk___split_fields2 (of_rep4 13) (of_rep5 8) (temp___String_Literal_165 Tuple0))) (mk___rep2 (mk___split_fields2 (of_rep4 8) (of_rep5 8) (temp___String_Literal_166 Tuple0))))))
(assert (= isavailable (admin__isavailable__aggregate_def (temp___140 (of_int 1) (of_int 0)) (temp___145 (of_int 1) (of_int 0)) (temp___150 (of_int 1) (of_int 1) (of_int 0)))))
(define-fun dynamic_invariant5 ((temp___expr_359 Int) (temp___is_init_356 Bool) (temp___skip_constant_357 Bool) (temp___do_toplevel_358 Bool)) Bool (=> (or (= temp___is_init_356 true) (<= 0 3)) (in_range1 temp___expr_359)))
(define-fun dynamic_invariant6 ((temp___expr_365 Int) (temp___is_init_362 Bool) (temp___skip_constant_363 Bool) (temp___do_toplevel_364 Bool)) Bool (=> (or (= temp___is_init_362 true) (<= 1 3)) (in_range2 temp___expr_365)))
(define-fun dynamic_invariant7 ((temp___expr_388 Int) (temp___is_init_385 Bool) (temp___skip_constant_386 Bool) (temp___do_toplevel_387 Bool)) Bool (=> (or (= temp___is_init_385 true) (<= 0 78)) (in_range3 temp___expr_388)))
(declare-const theop Int)
(declare-const op Int)
(declare-const admin__opisavailable__result Int)
(declare-const temp___531 Int)
(declare-const temp___530 Int)
(declare-const o Int)
(declare-const temp___529 (Array Int Bool))
(declare-const op1 Int)
(declare-const o1 Bool)
(declare-const op2 Int)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const result Int)
(declare-const theop1 Int)
(declare-const result1 Int)
(declare-const op3 Int)
(declare-const theop2 Int)
(declare-const op4 Int)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Int)
(declare-const theop3 Int)
(declare-const result5 Int)
(declare-const op5 Int)
(declare-const theop4 Int)
(declare-const theop5 Int)
(declare-const theop6 Int)
(declare-const op6 Int)
(declare-const theop7 Int)
(declare-const op7 Int)
(declare-const theop8 Int)
(declare-const op8 Int)
(declare-const theop9 Int)
(declare-const op9 Int)
(declare-const theop10 Int)
(declare-const op10 Int)
(declare-const theop11 Int)
(declare-const op11 Int)
(declare-const result6 Int)
(declare-const admin__opisavailable__result1 Int)
(declare-const admin__opisavailable__result2 Int)
(declare-const admin__opisavailable__result3 Int)
(declare-const theop12 Int)
(declare-const op12 Int)
(declare-const admin__opisavailable__result4 Int)
(declare-const theop13 Int)
(declare-const op13 Int)
(declare-const admin__opisavailable__result5 Int)
(assert (= (admin__isavailable__aggregate_def (temp___140 (of_int 1) (of_int 0)) (temp___145 (of_int 1) (of_int 0)) (temp___150 (of_int 1) (of_int 1) (of_int 0))) isavailable))
(assert (= (ispresent theadmin) true))
(assert (= (mk_int__ref result) (mk_int__ref theop)))
(assert (= theop1 0))
(assert (in_range5 theop1))
(assert (= (mk_int__ref result1) (mk_int__ref op)))
(assert (= op3 1))
(assert (=> (and (<= 1 op3) (<= op3 4)) (and (and (= temp___531 op3) (and (= temp___530 theop1) (and (= theop2 0) (and (and (and (=> (<= 0 4) (in_range5 theop2)) (=> (<= 1 4) (in_range6 op4))) (and (<= 1 op4) (<= op4 4))) (or (and (and (= theop3 theop4) (= theop5 theop3)) (and (and (= result2 (str_comp keyedop op4)) (= (= result2 true) (and (and (<= (to_rep5 (rec__admin__datat__minmatchlength (us_split_fields5 (select optokeyed op4)))) (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))) (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop))) (to_rep4 (rec__admin__datat__length (us_split_fields5 (select optokeyed op4)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop))))) (= (to_rep2 (select (rec__admin__datat__text (us_split_fields5 (select optokeyed op4))) i)) (to_rep2 (select (rec__keyboard__datat__text (us_split_fields1 keyedop)) i)))))))) (and (= result2 true) (and (and (and (and (and (<= 1 (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin)))) (<= (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin))) 3)) (= o (to_rep (rec__admin__t__rolepresent (us_split_fields3 theadmin))))) (= temp___529 (select isavailable o))) (= result3 (select temp___529 op4))) (ite (= result3 true) (and (= theop2 result4) (= theop3 op4)) (= theop3 theop2)))))) (and (and (and (= result2 (str_comp keyedop op4)) (= (= result2 true) (and (and (<= (to_rep5 (rec__admin__datat__minmatchlength (us_split_fields5 (select optokeyed op4)))) (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))) (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop))) (to_rep4 (rec__admin__datat__length (us_split_fields5 (select optokeyed op4)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop))))) (= (to_rep2 (select (rec__admin__datat__text (us_split_fields5 (select optokeyed op4))) i)) (to_rep2 (select (rec__keyboard__datat__text (us_split_fields1 keyedop)) i)))))))) (and (not (= result2 true)) (= theop3 theop2))) (and (and (= theop3 theop4) (= theop5 theop3)) (= op4 4)))))))) (and (and (= op4 op8) (= (mk_int__ref theop8) (mk_int__ref theop4))) (and (= op9 op4) (= theop9 theop5))))))
(assert (=> (and (<= 1 op3) (<= op3 4)) (= (mk_int__ref op10) (mk_int__ref op8))))
(assert (=> (and (<= 1 op3) (<= op3 4)) (= (mk_int__ref theop10) (mk_int__ref theop8))))
(assert (=> (and (<= 1 op3) (<= op3 4)) (= op11 op9)))
(assert (=> (and (<= 1 op3) (<= op3 4)) (= theop11 theop9)))
(assert (=> (not (and (<= 1 op3) (<= op3 4))) (= op3 op10)))
(assert (=> (not (and (<= 1 op3) (<= op3 4))) (= theop1 theop10)))
(assert (=> (not (and (<= 1 op3) (<= op3 4))) (= op11 op3)))
(assert (=> (not (and (<= 1 op3) (<= op3 4))) (= theop11 theop1)))
(assert (= admin__opisavailable__result1 admin__opisavailable__result2))
(assert (= admin__opisavailable__result3 admin__opisavailable__result1))
(assert (= (mk_int__ref result6) (mk_int__ref admin__opisavailable__result)))
(assert (= admin__opisavailable__result1 theop10))
(assert (= (mk_int__ref admin__opisavailable__result4) (mk_int__ref admin__opisavailable__result2)))
(assert (= (mk_int__ref op12) (mk_int__ref op10)))
(assert (= (mk_int__ref theop12) (mk_int__ref theop10)))
(assert (= admin__opisavailable__result5 admin__opisavailable__result3))
(assert (= op13 op11))
(assert (= theop13 theop11))
(assert (<= 1 op2))
(assert (<= op2 4))
(assert (not (= (ispresent theadmin) true)))
(check-sat)
(exit)
