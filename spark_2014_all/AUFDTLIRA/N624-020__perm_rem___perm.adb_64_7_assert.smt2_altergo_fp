(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : index -> int

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,natural) farray

logic dummy4 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep2(first(a1)) = 1) and (0 <= to_rep2(last(a1))))))

logic remove : us_t, int -> us_t

logic remove__function_guard : us_t, us_t, int -> prop

axiom remove__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i:int [remove({ elts = a; rt = a1 }, i)]. ((in_range2(i) and
  ((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep2(first(a1)) <= i) and (i <= to_rep2(last(a1)))))) ->
  (((invariant__(remove({ elts = a; rt = a1 }, i)) = true) and
  ((to_rep2(last((remove({ elts = a; rt = a1 },
  i)).rt)) = (to_rep2(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i - 1))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 }, i)).elts[k]))))) and
  ((forall k:int. ((((i + 1) <= k) and (k <= to_rep2(last(a1)))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 },
   i)).elts[(k - 1)]))))) and
  (forall k:int. (((i <= k) and (k <= (to_rep2(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep(((remove({ elts = a; rt = a1 },
  i)).elts[k]))))))))) and dynamic_property(1, 100, to_rep2(first((remove({
  elts = a; rt = a1 }, i)).rt)), to_rep2(last((remove({ elts = a; rt = a1 },
  i)).rt)))))))

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

axiom is_perm__def_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (((length({ elts = a; rt = a1 }) = 0) and (length({ elts = b; rt = b1
  }) = 0)) or
  (exists ia:int. (((to_rep2(first(a1)) <= ia) and
  (ia <= to_rep2(last(a1)))) and
  (exists ib:int. (((to_rep2(first(b1)) <= ib) and
  (ib <= to_rep2(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))))

logic get_witness : us_t, us_t, int -> int

logic get_witness__function_guard : int, us_t, us_t, int -> prop

axiom get_witness__post_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t.
  (forall ia:int [get_witness({ elts = a; rt = a1 }, { elts = b; rt = b1 },
  ia)]. ((in_range2(ia) and ((invariant__({ elts = a; rt = a1 }) = true) and
  ((invariant__({ elts = b; rt = b1 }) = true) and
  (((to_rep2(first(a1)) <= ia) and (ia <= to_rep2(last(a1)))) and
  (exists ib:int. (((to_rep2(first(b1)) <= ib) and
  (ib <= to_rep2(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))) -> ((((to_rep2(first(b1)) <= get_witness({ elts = a;
  rt = a1 }, { elts = b; rt = b1 }, ia)) and (get_witness({ elts = a; rt = a1
  }, { elts = b; rt = b1 }, ia) <= to_rep2(last(b1)))) and
  ((to_rep((a[ia])) = to_rep((b[get_witness({ elts = a; rt = a1 }, { elts =
  b; rt = b1 }, ia)]))) and (is_perm(remove({ elts = a; rt = a1 }, ia),
  remove({ elts = b; rt = b1 }, get_witness({ elts = a; rt = a1 }, { elts =
  b; rt = b1 }, ia))) = true))) and in_range2(get_witness({ elts = a; rt = a1
  }, { elts = b; rt = b1 }, ia))))))

type us_split_fields = { rec__perm__witnesses__ia : index;
rec__perm__witnesses__ib : index
}

function us_split_fields_Ia__projection(a: us_split_fields) : index =
  (a).rec__perm__witnesses__ia

function us_split_fields_Ib__projection(a: us_split_fields) : index =
  (a).rec__perm__witnesses__ib

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__perm__witnesses__ia) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ia)) and
  (to_rep1(((a).us_split_fields1).rec__perm__witnesses__ib) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ib))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__perm__witnesses__ia) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ia)) and
  (to_rep1(((a).us_split_fields1).rec__perm__witnesses__ib) = to_rep1(((b).us_split_fields1).rec__perm__witnesses__ib)))) ->
  (bool_eq7(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:index. forall a1:index. (0 <= object__size1({ us_split_fields1 =
  { rec__perm__witnesses__ia = a; rec__perm__witnesses__ib = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:index. forall a1:index. (0 <= object__alignment1({
  us_split_fields1 = { rec__perm__witnesses__ia = a;
  rec__perm__witnesses__ib = a1 } })))

logic perm__witnesses__ia__first__bit : int

logic perm__witnesses__ia__last__bit : int

logic perm__witnesses__ia__position : int

axiom perm__witnesses__ia__first__bit_axiom :
  (0 <= perm__witnesses__ia__first__bit)

axiom perm__witnesses__ia__last__bit_axiom :
  (perm__witnesses__ia__first__bit <  perm__witnesses__ia__last__bit)

axiom perm__witnesses__ia__position_axiom :
  (0 <= perm__witnesses__ia__position)

logic perm__witnesses__ib__first__bit : int

logic perm__witnesses__ib__last__bit : int

logic perm__witnesses__ib__position : int

axiom perm__witnesses__ib__first__bit_axiom :
  (0 <= perm__witnesses__ib__first__bit)

axiom perm__witnesses__ib__last__bit_axiom :
  (perm__witnesses__ib__first__bit <  perm__witnesses__ib__last__bit)

axiom perm__witnesses__ib__position_axiom :
  (0 <= perm__witnesses__ib__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : index

logic dummy6 : index

type witnesses__ref = { witnesses__content : us_rep
}

function witnesses__ref___projection(a: witnesses__ref) : us_rep =
  (a).witnesses__content

logic a : (int,natural) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,natural) farray

logic b1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy7 : integer

type t35b__ref = { t35b__content : integer
}

function t35b__ref___projection(a2: t35b__ref) : integer = (a2).t35b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "perm.adb", line 37, characters 0-0 *)
goal WP_parameter_def :
  (forall ia:int. forall perm__get_witnesses__result:index.
  forall perm__get_witnesses__result1:index. forall temp___650:int.
  forall perm__get_witnesses__result2:index.
  forall perm__get_witnesses__result3:index. forall result:int.
  forall ia1:int. forall result1:bool.
  forall perm__get_witnesses__result4:index.
  forall perm__get_witnesses__result5:index. forall ia2:int.
  forall perm__get_witnesses__result6:index.
  forall perm__get_witnesses__result7:index. forall ia3:int__ref.
  forall perm__get_witnesses__result8:witnesses__ref. forall ia4:int.
  forall perm__get_witnesses__result9:us_rep. forall ia5:int__ref.
  forall perm__get_witnesses__result10:witnesses__ref. forall ia6:int.
  forall perm__get_witnesses__result11:us_rep. (dynamic_property(1, 100,
  to_rep2(first(a1)), to_rep2(last(a1))) -> (dynamic_property(1, 100,
  to_rep2(first(b1)), to_rep2(last(b1))) -> (((invariant__({ elts = a; rt =
  a1 }) = true) and ((invariant__({ elts = b; rt = b1 }) = true) and
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) and
  (0 <  length({ elts = a; rt = a1 }))))) -> (not ((({ int__content = result
  } = { int__content = ia }) and (ia1 = to_rep2(first(a1)))) and
  ((((to_rep2(first(a1)) <= ia1) and (ia1 <= to_rep2(last(a1)))) and
  ((((temp___650 = ia1) and ((((result1 = true) <->
  (exists ib:int. (((to_rep2(first(b1)) <= ib) and
  (ib <= to_rep2(last(b1)))) and ((to_rep((a[ia1])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia1), remove({ elts = b; rt = b1 },
  ib)) = true))))) and ((not (result1 = true)) and
  (((perm__get_witnesses__result = perm__get_witnesses__result4) and
  (perm__get_witnesses__result1 = perm__get_witnesses__result5)) and ({
  us_split_fields1 = { rec__perm__witnesses__ia =
  perm__get_witnesses__result4; rec__perm__witnesses__ib =
  perm__get_witnesses__result5 } } = { us_split_fields1 = {
  rec__perm__witnesses__ia = perm__get_witnesses__result2;
  rec__perm__witnesses__ib = perm__get_witnesses__result3 } })))) and
  ((forall ka:int. (((1 <= ka) and (ka <= ia2)) ->
   (forall kb:int. (((to_rep2(first(b1)) <= kb) and
   (kb <= to_rep2(last(b1)))) ->
   (not ((to_rep((a[ka])) = to_rep((b[kb]))) and (is_perm(remove({ elts = a;
   rt = a1 }, ka), remove({ elts = b; rt = b1 }, kb)) = true))))))) and
  ((((to_rep2(first(a1)) <= to_rep2(last(a1))) ->
  dynamic_property1(to_rep2(first(a1)), to_rep2(last(a1)), ia2)) and
  ((to_rep2(first(a1)) <= ia2) and (ia2 <= to_rep2(last(a1))))) and
  (ia2 = to_rep2(last(a1))))))) and (((perm__get_witnesses__result8 = {
  witnesses__content = { us_split_fields1 = { rec__perm__witnesses__ia =
  perm__get_witnesses__result6; rec__perm__witnesses__ib =
  perm__get_witnesses__result7 } } }) and (ia3 = { int__content = ia2 })) and
  ((perm__get_witnesses__result9 = { us_split_fields1 = {
  rec__perm__witnesses__ia = perm__get_witnesses__result6;
  rec__perm__witnesses__ib = perm__get_witnesses__result7 } }) and
  (ia4 = ia2)))) and
  (((perm__get_witnesses__result10 = perm__get_witnesses__result8) and
  (ia5 = ia3)) and
  ((perm__get_witnesses__result11 = perm__get_witnesses__result9) and
  (ia6 = ia4))))) or ((not ((to_rep2(first(a1)) <= ia1) and
  (ia1 <= to_rep2(last(a1))))) and (((perm__get_witnesses__result10 = {
  witnesses__content = { us_split_fields1 = { rec__perm__witnesses__ia =
  perm__get_witnesses__result; rec__perm__witnesses__ib =
  perm__get_witnesses__result1 } } }) and (ia5 = { int__content = ia1 })) and
  ((perm__get_witnesses__result11 = { us_split_fields1 = {
  rec__perm__witnesses__ia = perm__get_witnesses__result2;
  rec__perm__witnesses__ib = perm__get_witnesses__result3 } }) and
  (ia6 = ia1)))))))))))
