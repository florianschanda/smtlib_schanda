(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type category

predicate in_range2(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : category, category -> bool

logic dummy1 : category

type category__ref = { category__content : category
}

function category__ref___projection(a: category__ref) : category =
  (a).category__content

logic to_rep1 : category -> int

logic of_rep1 : int -> category

axiom inversion_axiom1 :
  (forall x:category [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:category [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__counter_example__item__cat : category;
rec__counter_example__item__idx : natural
}

function us_split_fields_Cat__projection(a: us_split_fields) : category =
  (a).rec__counter_example__item__cat

function us_split_fields_Idx__projection(a: us_split_fields) : natural =
  (a).rec__counter_example__item__idx

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__counter_example__item__cat) = to_rep1(((b).us_split_fields1).rec__counter_example__item__cat)) and
  (to_rep(((a).us_split_fields1).rec__counter_example__item__idx) = to_rep(((b).us_split_fields1).rec__counter_example__item__idx))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__counter_example__item__cat) = to_rep1(((b).us_split_fields1).rec__counter_example__item__cat)) and
  (to_rep(((a).us_split_fields1).rec__counter_example__item__idx) = to_rep(((b).us_split_fields1).rec__counter_example__item__idx)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:category. forall a1:natural. (0 <= object__size({
  us_split_fields1 = { rec__counter_example__item__cat = a;
  rec__counter_example__item__idx = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:category. forall a1:natural. (0 <= object__alignment({
  us_split_fields1 = { rec__counter_example__item__cat = a;
  rec__counter_example__item__idx = a1 } })))

logic counter_example__item__cat__first__bit : int

logic counter_example__item__cat__last__bit : int

logic counter_example__item__cat__position : int

axiom counter_example__item__cat__first__bit_axiom :
  (0 <= counter_example__item__cat__first__bit)

axiom counter_example__item__cat__last__bit_axiom :
  (counter_example__item__cat__first__bit <  counter_example__item__cat__last__bit)

axiom counter_example__item__cat__position_axiom :
  (0 <= counter_example__item__cat__position)

logic counter_example__item__idx__first__bit : int

logic counter_example__item__idx__last__bit : int

logic counter_example__item__idx__position : int

axiom counter_example__item__idx__first__bit_axiom :
  (0 <= counter_example__item__idx__first__bit)

axiom counter_example__item__idx__last__bit_axiom :
  (counter_example__item__idx__first__bit <  counter_example__item__idx__last__bit)

axiom counter_example__item__idx__position_axiom :
  (0 <= counter_example__item__idx__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : category

logic dummy3 : natural

type item__ref = { item__content : us_rep
}

function item__ref___projection(a: item__ref) : us_rep = (a).item__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,natural) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy5 : (int,natural) farray

logic dummy6 : t

type num_item_t__ref = { num_item_t__content : us_t
}

function num_item_t__ref___projection(a: num_item_t__ref) : us_t =
  (a).num_item_t__content

logic num_item_per_category : (int,natural) farray

logic num_item_per_category1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic cat1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic cat2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic pick_last : int -> int

logic pick_last__function_guard : int, int -> prop

axiom pick_last__post_axiom :
  (forall cat:int [pick_last(cat)]. (in_range2(cat) ->
  in_range1(pick_last(cat))))

axiom pick_last__def_axiom :
  (forall cat:int [pick_last(cat)]. (in_range2(cat) ->
  (pick_last(cat) = to_rep((num_item_per_category[cat])))))

logic idx1 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic idx2 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom idx1__def_axiom : (idx1 = pick_last(cat1))

axiom idx2__def_axiom : (idx2 = pick_last(cat2))

type t3s

predicate in_range4(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t3s, t3s -> bool

logic dummy7 : t3s

type t3s__ref = { t3s__content : t3s
}

function t3s__ref___projection(a: t3s__ref) : t3s = (a).t3s__content

logic counter_example__num_item_per_category__aggregate_def : int, int, int,
  int, int, int, int, int -> (int,natural) farray

axiom num_item_per_category__def_axiom :
  ((num_item_per_category = counter_example__num_item_per_category__aggregate_def(3,
  8, 10000, 42, 98, 76, 0, 1)) and (num_item_per_category1 = mk(1, 8)))

axiom def_axiom :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  ((((((((in_range1(temp___156) and in_range1(temp___157)) and
  in_range1(temp___158)) and in_range1(temp___159)) and
  in_range1(temp___160)) and in_range1(temp___161)) and
  in_range1(temp___162)) and in_range1(temp___163)) ->
  ((((((((to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[1])) = temp___156) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[2])) = temp___157)) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[3])) = temp___158)) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[4])) = temp___159)) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[5])) = temp___160)) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[6])) = temp___161)) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[7])) = temp___162)) and
  (to_rep((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[8])) = temp___163))))

 (* File "counter_example.ads", line 9, characters 0-0 *)
goal WP_parameter_def :
  (forall pick1:bool.
  forall counter_example__get_best_item__idx1__assume:int.
  forall counter_example__get_best_item__idx2__assume:int. forall o:natural.
  forall o1:category. forall o2:category. forall o3:natural.
  forall temp___193:category. forall temp___1931:natural. forall result:bool.
  forall pick11:bool. (in_range2(cat1) -> (in_range2(cat2) ->
  ((((counter_example__get_best_item__idx1__assume = pick_last(cat1)) and
  (in_range1(counter_example__get_best_item__idx1__assume) and
  (counter_example__get_best_item__idx1__assume = to_rep((num_item_per_category[cat1]))))) and
  (counter_example__get_best_item__idx1__assume = idx1)) ->
  (in_range1(idx1) ->
  ((((counter_example__get_best_item__idx2__assume = pick_last(cat2)) and
  (in_range1(counter_example__get_best_item__idx2__assume) and
  (counter_example__get_best_item__idx2__assume = to_rep((num_item_per_category[cat2]))))) and
  (counter_example__get_best_item__idx2__assume = idx2)) ->
  (in_range1(idx2) -> (((result = pick1) and (pick11 = of_int(0))) ->
  ((pick11 = true) -> ((((to_rep(o) = idx1) and ((to_rep1(o1) = cat1) and
  ((o1 = o2) and (o = o3)))) and ((temp___193 = o2) and
  (temp___1931 = o3))) ->
  (to_rep(temp___1931) <= to_rep((num_item_per_category[to_rep1(temp___193)])))))))))))))
