(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic max : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_full : int -> bool

logic is_full__function_guard : bool, int -> prop

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type top_range__ref = { top_range__content : integer
}

function top_range__ref___projection(a: top_range__ref) : integer =
  (a).top_range__content

axiom last__def_axiom : (last = max)

axiom is_full__post_axiom : true

axiom is_full__def_axiom :
  (forall use_stack__stacks__top:int [is_full(use_stack__stacks__top)].
  ((is_full(use_stack__stacks__top) = true) <->
  (use_stack__stacks__top = max)))

logic is_empty : int -> bool

logic is_empty__function_guard : bool, int -> prop

axiom is_empty__post_axiom : true

axiom is_empty__def_axiom :
  (forall use_stack__stacks__top:int [is_empty(use_stack__stacks__top)].
  ((is_empty(use_stack__stacks__top) = true) <->
  (use_stack__stacks__top = 0)))

type map__ref = { map__content : (int,positive) farray
}

logic slide : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq :
  (forall a:(int,positive) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : positive, int -> (int,positive) farray

axiom singleton_def :
  (forall v:positive.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic content__first : integer

logic content__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

logic all_eq : int, (int,positive) farray -> bool

logic all_eq__function_guard : bool, int, (int,positive) farray -> prop

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type tmy_arrayD1__ref = { tmy_arrayD1__content : integer
}

function tmy_arrayD1__ref___projection(a: tmy_arrayD1__ref) : integer =
  (a).tmy_arrayD1__content

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last1(mk(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t = { elts : (int,positive) farray; rt : t
}

function to_array(a: us_t) : (int,positive) farray = (a).elts

function of_array(a: (int,positive) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last1((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last2(a)) ->
  (length(a) = ((last2(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last2(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,positive) farray -> int

logic value__component__size : int

logic object__component__size : (int,positive) farray -> int

logic value__alignment : int

logic object__alignment : (int,positive) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,positive) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,positive) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,positive) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last1((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last1((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,positive) farray

logic dummy5 : t

type my_array__ref = { my_array__content : us_t
}

function my_array__ref___projection(a: my_array__ref) : us_t =
  (a).my_array__content

axiom all_eq__post_axiom : true

axiom all_eq__def_axiom :
  (forall e:int.
  (forall use_stack__stacks__content:(int,positive) farray [all_eq(e,
  use_stack__stacks__content)]. ((all_eq(e,
  use_stack__stacks__content) = true) <->
  (forall i:int. (((1 <= i) and (i <= to_rep1(content__last))) ->
  (to_rep((use_stack__stacks__content[i])) = e))))))

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t18b__ref = { t18b__content : integer
}

function t18b__ref___projection(a: t18b__ref) : integer = (a).t18b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic top : int

logic content : (int,positive) farray

logic i : int

logic us : int

logic o : int

logic temp___224 : int

logic temp___222 : (int,positive) farray

logic o1 : positive

logic o2 : (int,positive) farray

logic j : int

logic o3 : positive

logic o4 : (int,positive) farray

logic content1 : (int,positive) farray

logic result : int

logic top1 : int

logic result1 : int

logic i1 : int

logic result2 : (int,positive) farray

logic content2 : (int,positive) farray

logic content3 : (int,positive) farray

logic i2 : int

logic result3 : int

logic i3 : int

logic result4 : (int,positive) farray

logic content4 : (int,positive) farray

logic content5 : (int,positive) farray

logic i4 : int

logic content6 : (int,positive) farray

logic i5 : int

logic content7 : (int,positive) farray

logic i6 : int

logic content8 : (int,positive) farray

logic i7 : int

logic content9 : (int,positive) farray

logic i8 : int

logic content10 : (int,positive) farray

logic i9 : int

logic top2 : int

logic content11 : (int,positive) farray

logic i10 : int

logic top3 : int

logic content12 : (int,positive) farray

logic i11 : int

axiom H : in_range1(max)

axiom H1 : in_range1(e)

axiom H2 : dynamic_property(0, last, top)

axiom H3 : (dynamic_property2(1, max, to_rep1(content__first),
  to_rep1(content__last)) and ((to_rep1(content__first) = 1) and
  (to_rep1(content__last) = max)))

axiom H4 : (is_empty(top) = true)

axiom H5 : ((us = max) and dynamic_property(0, last, max))

axiom H6 : (o = max)

axiom H7 : (result = top)

axiom H8 : (top1 = o)

axiom H9 : (result1 = i)

axiom H10 : (i1 = 1)

axiom H11 : (((1 <= i1) and (i1 <= to_rep1(content__last))) ->
  (((temp___224 = i1) and ((temp___222 = content) and ((((to_rep(o1) = e) and
  (o2 = (content[i1 <- o1]))) and ((result2 = content) and
  (content2 = o2))) and
  ((forall j1:int. (((1 <= j1) and (j1 <= i2)) ->
   (to_rep((content3[j1])) = e))) and
  ((((forall temp___223:int. (((to_rep1(content__first) <= temp___223) and
     (temp___223 <= to_rep1(content__last))) -> ((i2 <  temp___223) ->
     ((content3[temp___223]) = (temp___222[temp___223]))))) and
  ((1 <= to_rep1(content__last)) -> dynamic_property3(1,
  to_rep1(content__last), i2))) and ((1 <= i2) and
  (i2 <= to_rep1(content__last)))) and (i2 = to_rep1(content__last))))))) and
  (((i2 = i6) and (content3 = content7)) and ((i7 = i2) and
  (content8 = content3)))))

axiom H12 : (((1 <= i1) and (i1 <= to_rep1(content__last))) -> (i8 = i6))

axiom H13 : (((1 <= i1) and (i1 <= to_rep1(content__last))) ->
  (content9 = content7))

axiom H14 : (((1 <= i1) and (i1 <= to_rep1(content__last))) -> (i9 = i7))

axiom H15 : (((1 <= i1) and (i1 <= to_rep1(content__last))) ->
  (content10 = content8))

axiom H16 : ((not ((1 <= i1) and (i1 <= to_rep1(content__last)))) ->
  (i1 = i8))

axiom H17 : ((not ((1 <= i1) and (i1 <= to_rep1(content__last)))) ->
  (content9 = content))

axiom H18 : ((not ((1 <= i1) and (i1 <= to_rep1(content__last)))) ->
  (i9 = i1))

axiom H19 : ((not ((1 <= i1) and (i1 <= to_rep1(content__last)))) ->
  (content10 = content1))

axiom H20 : (i10 = i8)

axiom H21 : (content11 = content9)

axiom H22 : (top1 = top2)

axiom H23 : (i11 = i9)

axiom H24 : (content12 = content10)

axiom H25 : (top3 = top1)

 (* File "use_stack.adb", line 15, characters 0-0 *)
goal WP_parameter_def : (is_full(top2) = true)
