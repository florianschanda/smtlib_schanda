(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep1 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort integer_subtype 0)
(declare-fun integer_subtypeqtint (integer_subtype) Int)
(assert (forall ((i integer_subtype)) (and (<= (- 2147483648) (integer_subtypeqtint i)) (<= (integer_subtypeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer_subtype integer_subtype) Bool)
(declare-const dummy2 integer_subtype)
(declare-datatypes () ((integer_subtype__ref (mk_integer_subtype__ref (integer_subtype__content integer_subtype)))))
(define-fun integer_subtype__ref___projection ((a integer_subtype__ref)) integer_subtype (integer_subtype__content a))
(define-fun to_rep2 ((x integer_subtype)) Int (integer_subtypeqtint x))
(declare-fun of_rep2 (Int) integer_subtype)
(assert (forall ((x integer_subtype)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer_subtype)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer_subtype))))))
(declare-fun slide ((Array Int integer_subtype) Int Int) (Array Int integer_subtype))
(assert (forall ((a (Array Int integer_subtype))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer_subtype))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer_subtype)) (a__first Int) (a__last Int) (b (Array Int integer_subtype)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep2 (select a temp___idx_155)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep2 (select a temp___idx_155)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun cast ((Array Int integer)) (Array Int integer_subtype))
(declare-fun cast__function_guard ((Array Int integer_subtype) (Array Int integer)) Bool)
(assert (forall ((input_array (Array Int integer))) (! (forall ((k Int)) (=> (and (<= 0 k) (<= k 2)) (= (to_rep2 (select (cast input_array) k)) (to_rep (select input_array k))))) :pattern ((cast input_array)))))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-const dummy3 (Array Int natural))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int natural)))))))
(declare-fun slide3 ((Array Int (Array Int natural)) Int Int) (Array Int (Array Int natural)))
(assert (forall ((a (Array Int (Array Int natural)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int natural)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int natural))) (a__first Int) (a__last Int) (b (Array Int (Array Int natural))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq2 (select a temp___idx_157) 1 100 (select b (+ (- b__first a__first) temp___idx_157)) 1 100) true)))) true false))
(assert (forall ((a (Array Int (Array Int natural))) (b (Array Int (Array Int natural)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq2 (select a temp___idx_157) 1 100 (select b (+ (- b__first a__first) temp___idx_157)) 1 100) true))))))))
(declare-const dummy4 (Array Int natural))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int natural)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int natural)))))))
(declare-fun slide4 ((Array Int (Array Int natural)) Int Int) (Array Int (Array Int natural)))
(assert (forall ((a (Array Int (Array Int natural)))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int (Array Int natural)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int (Array Int natural))) (a__first Int) (a__last Int) (b (Array Int (Array Int natural))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (bool_eq2 (select a temp___idx_158) 1 100 (select b (+ (- b__first a__first) temp___idx_158)) 1 100) true)))) true false))
(assert (forall ((a (Array Int (Array Int natural))) (b (Array Int (Array Int natural)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (bool_eq2 (select a temp___idx_158) 1 100 (select b (+ (- b__first a__first) temp___idx_158)) 1 100) true))))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__test__rec__x integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer (rec__test__rec__x a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test__rec__y integer)))))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer (rec__test__rec__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq5 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__test__rec__x (us_split_discrs1 a))) (to_rep (rec__test__rec__x (us_split_discrs1 b)))) (= (to_rep (rec__test__rec__y (us_split_fields1 a))) (to_rep (rec__test__rec__y (us_split_fields1 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const test__rec__x__first__bit Int)
(declare-const test__rec__x__last__bit Int)
(declare-const test__rec__x__position Int)
(assert (<= 0 test__rec__x__first__bit))
(assert (< test__rec__x__first__bit test__rec__x__last__bit))
(assert (<= 0 test__rec__x__position))
(declare-const test__rec__y__first__bit Int)
(declare-const test__rec__y__last__bit Int)
(declare-const test__rec__y__position Int)
(assert (<= 0 test__rec__y__first__bit))
(assert (< test__rec__y__first__bit test__rec__y__last__bit))
(assert (<= 0 test__rec__y__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content a))
(define-fun in_range4 ((rec__test__rec__x1 Int) (a us_rep)) Bool (= rec__test__rec__x1 (to_rep (rec__test__rec__x (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const test__rec__x__first__bit1 Int)
(declare-const test__rec__x__last__bit1 Int)
(declare-const test__rec__x__position1 Int)
(assert (<= 0 test__rec__x__first__bit1))
(assert (< test__rec__x__first__bit1 test__rec__x__last__bit1))
(assert (<= 0 test__rec__x__position1))
(declare-const test__rec__y__first__bit1 Int)
(declare-const test__rec__y__last__bit1 Int)
(declare-const test__rec__y__position1 Int)
(assert (<= 0 test__rec__y__first__bit1))
(assert (< test__rec__y__first__bit1 test__rec__y__last__bit1))
(assert (<= 0 test__rec__y__position1))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((rec1__ref (mk_rec1__ref (rec1__content us_rep)))))
(define-fun rec1__ref___projection ((a rec1__ref)) us_rep (rec1__content a))
(define-fun in_range5 ((rec__test__rec__x1 Int) (a us_rep)) Bool (= rec__test__rec__x1 (to_rep (rec__test__rec__x (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const test__rec__x__first__bit2 Int)
(declare-const test__rec__x__last__bit2 Int)
(declare-const test__rec__x__position2 Int)
(assert (<= 0 test__rec__x__first__bit2))
(assert (< test__rec__x__first__bit2 test__rec__x__last__bit2))
(assert (<= 0 test__rec__x__position2))
(declare-const test__rec__y__first__bit2 Int)
(declare-const test__rec__y__last__bit2 Int)
(declare-const test__rec__y__position2 Int)
(assert (<= 0 test__rec__y__first__bit2))
(assert (< test__rec__y__first__bit2 test__rec__y__last__bit2))
(assert (<= 0 test__rec__y__position2))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((rec2__ref (mk_rec2__ref (rec2__content us_rep)))))
(define-fun rec2__ref___projection ((a rec2__ref)) us_rep (rec2__content a))
(declare-sort tarr3D1 0)
(declare-fun tarr3D1qtint (tarr3D1) Int)
(assert (forall ((i tarr3D1)) (and (<= 1 (tarr3D1qtint i)) (<= (tarr3D1qtint i) 3))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq8 (tarr3D1 tarr3D1) Bool)
(declare-const dummy8 tarr3D1)
(declare-datatypes () ((tarr3D1__ref (mk_tarr3D1__ref (tarr3D1__content tarr3D1)))))
(define-fun tarr3D1__ref___projection ((a tarr3D1__ref)) tarr3D1 (tarr3D1__content a))
(declare-datatypes () ((map__ref5 (mk_map__ref5 (map__content5 (Array Int us_rep))))))
(declare-fun slide5 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide5 a first first) a) :pattern ((slide5 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide5 a old_first new_first) i))))))))
(define-fun bool_eq6 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (bool_eq5 (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq6 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (bool_eq5 (select a temp___idx_159) (select b (+ (- b__first a__first) temp___idx_159))) true))))))))
(define-fun dynamic_invariant ((temp___expr_316 (Array Int us_rep)) (temp___is_init_312 Bool) (temp___skip_constant_313 Bool) (temp___do_toplevel_314 Bool) (temp___do_typ_inv_315 Bool)) Bool (forall ((temp___317 Int)) (=> (and (<= 1 temp___317) (<= temp___317 3)) (in_range4 10 (select temp___expr_316 temp___317)))))
(define-fun default_initial_assumption ((temp___expr_319 (Array Int us_rep)) (temp___skip_top_level_320 Bool)) Bool (forall ((temp___321 Int)) (=> (and (<= 1 temp___321) (<= temp___321 3)) (= (to_rep (rec__test__rec__x (us_split_discrs1 (select temp___expr_319 temp___321)))) 10))))
(declare-datatypes () ((map__ref6 (mk_map__ref6 (map__content6 (Array Int us_rep))))))
(declare-fun slide6 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide6 a first first) a) :pattern ((slide6 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide6 a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq5 (select a temp___idx_160) (select b (+ (- b__first a__first) temp___idx_160))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq5 (select a temp___idx_160) (select b (+ (- b__first a__first) temp___idx_160))) true))))))))
(declare-sort tarr4D1 0)
(declare-fun tarr4D1qtint (tarr4D1) Int)
(assert (forall ((i tarr4D1)) (and (<= 1 (tarr4D1qtint i)) (<= (tarr4D1qtint i) 3))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (tarr4D1 tarr4D1) Bool)
(declare-const dummy9 tarr4D1)
(declare-datatypes () ((tarr4D1__ref (mk_tarr4D1__ref (tarr4D1__content tarr4D1)))))
(define-fun tarr4D1__ref___projection ((a tarr4D1__ref)) tarr4D1 (tarr4D1__content a))
(define-fun dynamic_invariant1 ((temp___expr_329 (Array Int us_rep)) (temp___is_init_325 Bool) (temp___skip_constant_326 Bool) (temp___do_toplevel_327 Bool) (temp___do_typ_inv_328 Bool)) Bool (forall ((temp___330 Int)) (=> (and (<= 1 temp___330) (<= temp___330 3)) (in_range5 10 (select temp___expr_329 temp___330)))))
(define-fun default_initial_assumption1 ((temp___expr_332 (Array Int us_rep)) (temp___skip_top_level_333 Bool)) Bool (forall ((temp___334 Int)) (=> (and (<= 1 temp___334) (<= temp___334 3)) (= (to_rep (rec__test__rec__x (us_split_discrs1 (select temp___expr_332 temp___334)))) 10))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range8 ((rec__test__rec__x1 Int) (a us_rep)) Bool (= rec__test__rec__x1 (to_rep (rec__test__rec__x (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const test__rec__x__first__bit3 Int)
(declare-const test__rec__x__last__bit3 Int)
(declare-const test__rec__x__position3 Int)
(assert (<= 0 test__rec__x__first__bit3))
(assert (< test__rec__x__first__bit3 test__rec__x__last__bit3))
(assert (<= 0 test__rec__x__position3))
(declare-const test__rec__y__first__bit3 Int)
(declare-const test__rec__y__last__bit3 Int)
(declare-const test__rec__y__position3 Int)
(assert (<= 0 test__rec__y__first__bit3))
(assert (< test__rec__y__first__bit3 test__rec__y__last__bit3))
(assert (<= 0 test__rec__y__position3))
(declare-fun user_eq10 (us_rep us_rep) Bool)
(declare-const dummy10 us_rep)
(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_rep)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_rep (t15b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun test__x__aggregate_def ((Array Int natural)) (Array Int (Array Int natural)))
(declare-fun temp_____aggregate_def_342 (Int) (Array Int natural))
(declare-fun convert ((Array Int (Array Int natural))) (Array Int (Array Int natural)))
(assert (forall ((a (Array Int (Array Int natural)))) (forall ((temp___346 Int)) (= (select a temp___346) (select (convert a) temp___346)))))
(declare-fun test__w__aggregate_def (us_rep) (Array Int us_rep))
(declare-fun convert1 ((Array Int us_rep)) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((temp___350 Int)) (= (select a temp___350) (select (convert1 a) temp___350)))))
(declare-fun test__test_array__aggregate_def (Int Int Int) (Array Int integer))
(declare-fun convert2 ((Array Int integer)) (Array Int integer_subtype))
(assert (forall ((a (Array Int integer))) (forall ((temp___360 Int)) (= (to_rep (select a temp___360)) (to_rep2 (select (convert2 a) temp___360))))))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_296 us_rep) (temp___is_init_292 Bool) (temp___skip_constant_293 Bool) (temp___do_toplevel_294 Bool) (temp___do_typ_inv_295 Bool)) Bool (=> (not (= temp___skip_constant_293 true)) (in_range4 10 temp___expr_296)))
(define-fun default_initial_assumption2 ((temp___expr_298 us_rep) (temp___skip_top_level_299 Bool)) Bool (= (to_rep (rec__test__rec__x (us_split_discrs1 temp___expr_298))) 10))
(define-fun dynamic_invariant5 ((temp___expr_306 us_rep) (temp___is_init_302 Bool) (temp___skip_constant_303 Bool) (temp___do_toplevel_304 Bool) (temp___do_typ_inv_305 Bool)) Bool (=> (not (= temp___skip_constant_303 true)) (in_range5 10 temp___expr_306)))
(define-fun default_initial_assumption3 ((temp___expr_308 us_rep) (temp___skip_top_level_309 Bool)) Bool (= (to_rep (rec__test__rec__x (us_split_discrs1 temp___expr_308))) 10))
(assert (forall ((temp___340 (Array Int natural))) (forall ((temp___341 Int)) (= (select (test__x__aggregate_def temp___340) temp___341) temp___340))))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 1))
(assert (forall ((temp___344 Int)) (=> (dynamic_invariant3 temp___344 true true true true) (forall ((temp___345 Int)) (= (select (temp_____aggregate_def_342 temp___344) temp___345) rliteral)))))
(assert (forall ((temp___348 us_rep)) (=> (dynamic_invariant4 temp___348 true true true true) (forall ((temp___349 Int)) (= (select (test__w__aggregate_def temp___348) temp___349) temp___348)))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 2))
(declare-const rliteral3 integer)
(assert (= (integerqtint rliteral3) 3))
(assert (forall ((temp___352 Int) (temp___353 Int) (temp___354 Int)) (let ((temp___351 (test__test_array__aggregate_def temp___352 temp___353 temp___354))) (=> (and (and (dynamic_invariant2 temp___352 true true true true) (dynamic_invariant2 temp___353 true true true true)) (dynamic_invariant2 temp___354 true true true true)) (and (and (= (select temp___351 0) rliteral1) (= (select temp___351 1) rliteral2)) (= (select temp___351 2) rliteral3))))))
(define-fun dynamic_invariant6 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_165)))
(declare-const rliteral4 integer)
(assert (= (integerqtint rliteral4) 10))
(declare-const x (Array Int (Array Int natural)))
(declare-const y (Array Int (Array Int natural)))
(declare-const w (Array Int us_rep))
(declare-const z (Array Int us_rep))
(declare-const test_array (Array Int integer))
(declare-const us Int)
(declare-const us1 Int)
(declare-const result (Array Int (Array Int natural)))
(declare-const x1 (Array Int (Array Int natural)))
(declare-const result1 (Array Int (Array Int natural)))
(declare-const y1 (Array Int (Array Int natural)))
(declare-const result2 (Array Int us_rep))
(declare-const w1 (Array Int us_rep))
(declare-const result3 (Array Int us_rep))
(declare-const z1 (Array Int us_rep))
(declare-const result4 (Array Int integer))
(declare-const test_array1 (Array Int integer))
(assert (and (= us 10) (in_range1 10)))
(assert (and (= us1 10) (in_range1 10)))
(assert (= result x))
(assert (= x1 (test__x__aggregate_def (temp_____aggregate_def_342 1))))
(assert (= result1 y))
(assert (= y1 (convert x1)))
(assert (= result2 w))
(assert (= w1 (test__w__aggregate_def (mk___rep (mk___split_discrs rliteral4) (mk___split_fields rliteral1)))))
(assert (dynamic_invariant w1 true false true true))
(assert (= result3 z))
(assert (= z1 (convert1 w1)))
(assert (dynamic_invariant1 z1 true false true true))
(assert (= result4 test_array))
(assert (= test_array1 (test__test_array__aggregate_def 1 2 3)))
(assert (forall ((i Int)) (=> (and (<= 1 i) (<= i 3)) (forall ((j Int)) (=> (and (<= 1 j) (<= j 100)) (= (to_rep1 (select (select y1 i) j)) 1))))))
(declare-const i Int)
(assert (<= 1 i))
(assert (<= i 3))
(assert (not (= (to_rep (rec__test__rec__y (us_split_fields1 (select z1 i)))) 1)))
(check-sat)
(exit)
