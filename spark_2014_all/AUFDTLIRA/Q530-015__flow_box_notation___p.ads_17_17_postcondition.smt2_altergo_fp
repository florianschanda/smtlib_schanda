(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type stack_capacity

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483646))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : stack_capacity, stack_capacity -> bool

logic dummy : stack_capacity

type stack_capacity__ref = { stack_capacity__content : stack_capacity
}

function stack_capacity__ref___projection(a: stack_capacity__ref) : stack_capacity =
  (a).stack_capacity__content

logic to_rep : stack_capacity -> int

logic of_rep : int -> stack_capacity

axiom inversion_axiom :
  (forall x:stack_capacity [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:stack_capacity [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type stack_extent

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483646))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : stack_extent, stack_extent -> bool

logic dummy1 : stack_extent

type stack_extent__ref = { stack_extent__content : stack_extent
}

function stack_extent__ref___projection(a: stack_extent__ref) : stack_extent =
  (a).stack_extent__content

logic to_rep1 : stack_extent -> int

logic of_rep1 : int -> stack_extent

axiom inversion_axiom1 :
  (forall x:stack_extent [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:stack_extent [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type element

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : element, element -> bool

logic dummy3 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

logic to_rep3 : element -> int

logic of_rep3 : int -> element

axiom inversion_axiom3 :
  (forall x:element [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:element [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,element) farray, int, int, (int,element) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,element) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))))))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t4s__ref = { t4s__content : integer
}

function t4s__ref___projection(a: t4s__ref) : integer = (a).t4s__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,element) farray; rt : t
}

function to_array(a: us_t) : (int,element) farray = (a).elts

function of_array(a: (int,element) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,element) farray -> int

logic value__component__size : int

logic object__component__size : (int,element) farray -> int

logic value__alignment : int

logic object__alignment : (int,element) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,element) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,element) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,element) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,element) farray

logic dummy6 : t

type t5s__ref = { t5s__content : us_t
}

function t5s__ref___projection(a: t5s__ref) : us_t = (a).t5s__content

type us_split_discrs = { rec__p__stack__capacity : stack_capacity
}

function us_split_discrs___projection(a: us_split_discrs) : stack_capacity =
  (a).rec__p__stack__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__stack__values : us_t; rec__p__stack__top :
stack_extent
}

function us_split_fields_Values__projection(a: us_split_fields) : us_t =
  (a).rec__p__stack__values

function us_split_fields_Top__projection(a: us_split_fields) : stack_extent =
  (a).rec__p__stack__top

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__p__stack__capacity) = to_rep(((b).us_split_discrs1).rec__p__stack__capacity)) and
  ((bool_eq7(((a).us_split_fields1).rec__p__stack__values,
  ((b).us_split_fields1).rec__p__stack__values) = true) and
  (to_rep1(((a).us_split_fields1).rec__p__stack__top) = to_rep1(((b).us_split_fields1).rec__p__stack__top)))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__p__stack__capacity) = to_rep(((b).us_split_discrs1).rec__p__stack__capacity)) and
  ((bool_eq7(((a).us_split_fields1).rec__p__stack__values,
  ((b).us_split_fields1).rec__p__stack__values) = true) and
  (to_rep1(((a).us_split_fields1).rec__p__stack__top) = to_rep1(((b).us_split_fields1).rec__p__stack__top))))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:stack_capacity. forall a1:(int,element) farray. forall a2:t.
  forall a3:stack_extent. (0 <= object__size1({ us_split_discrs1 = {
  rec__p__stack__capacity = a }; us_split_fields1 = { rec__p__stack__values =
  { elts = a1; rt = a2 }; rec__p__stack__top = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:stack_capacity. forall a1:(int,element) farray. forall a2:t.
  forall a3:stack_extent. (0 <= object__alignment1({ us_split_discrs1 = {
  rec__p__stack__capacity = a }; us_split_fields1 = { rec__p__stack__values =
  { elts = a1; rt = a2 }; rec__p__stack__top = a3 } })))

logic p__stack__capacity__first__bit : int

logic p__stack__capacity__last__bit : int

logic p__stack__capacity__position : int

axiom p__stack__capacity__first__bit_axiom :
  (0 <= p__stack__capacity__first__bit)

axiom p__stack__capacity__last__bit_axiom :
  (p__stack__capacity__first__bit <  p__stack__capacity__last__bit)

axiom p__stack__capacity__position_axiom :
  (0 <= p__stack__capacity__position)

logic p__stack__values__first__bit : int

logic p__stack__values__last__bit : int

logic p__stack__values__position : int

axiom p__stack__values__first__bit_axiom :
  (0 <= p__stack__values__first__bit)

axiom p__stack__values__last__bit_axiom :
  (p__stack__values__first__bit <  p__stack__values__last__bit)

axiom p__stack__values__position_axiom : (0 <= p__stack__values__position)

logic p__stack__top__first__bit : int

logic p__stack__top__last__bit : int

logic p__stack__top__position : int

axiom p__stack__top__first__bit_axiom : (0 <= p__stack__top__first__bit)

axiom p__stack__top__last__bit_axiom :
  (p__stack__top__first__bit <  p__stack__top__last__bit)

axiom p__stack__top__position_axiom : (0 <= p__stack__top__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy7 : stack_capacity

logic dummy8 : (int,element) farray

logic dummy9 : t

logic dummy10 : stack_extent

type stack__ref = { stack__content : us_rep
}

function stack__ref___projection(a: stack__ref) : us_rep = (a).stack__content

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

axiom empty__post_axiom : true

axiom empty__def_axiom :
  (forall this:stack_capacity. forall this1:(int,element) farray.
  forall this2:t. forall this3:stack_extent [empty({ us_split_discrs1 = {
  rec__p__stack__capacity = this }; us_split_fields1 = {
  rec__p__stack__values = { elts = this1; rt = this2 }; rec__p__stack__top =
  this3 } })]. ((empty({ us_split_discrs1 = { rec__p__stack__capacity = this
  }; us_split_fields1 = { rec__p__stack__values = { elts = this1; rt = this2
  }; rec__p__stack__top = this3 } }) = true) <-> (to_rep1(this3) = 0)))

logic this__split_discrs : stack_capacity

logic attr__ATTRIBUTE_ADDRESS : int

logic r3b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy11 : integer

type tT7bP1__ref = { tT7bP1__content : integer
}

function tT7bP1__ref___projection(a: tT7bP1__ref) : integer =
  (a).tT7bP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep2(first2(mk1(f, l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,element) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,element) farray = (a).elts1

function of_array1(a: (int,element) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,element) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,element) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,element) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,element) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,element) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,element) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy12 : (int,element) farray

logic dummy13 : t1

type t7b__ref = { t7b__content : us_t1
}

function t7b__ref___projection(a: t7b__ref) : us_t1 = (a).t7b__content

type us_split_fields2 = { rec__p__stack__values1 : us_t1; rec__p__stack__top1
: stack_extent
}

function us_split_fields_Values__2__projection(a: us_split_fields2) : us_t1 =
  (a).rec__p__stack__values1

function us_split_fields_Top__2__projection(a: us_split_fields2) : stack_extent =
  (a).rec__p__stack__top1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__p__stack__values =
  of_array(to_array1(((a).us_split_fields3).rec__p__stack__values1),
  first3(((a).us_split_fields3).rec__p__stack__values1),
  last3(((a).us_split_fields3).rec__p__stack__values1)); rec__p__stack__top =
  ((a).us_split_fields3).rec__p__stack__top1 } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__p__stack__values1 =
  of_array1(to_array(((r).us_split_fields1).rec__p__stack__values),
  first1(((r).us_split_fields1).rec__p__stack__values),
  last1(((r).us_split_fields1).rec__p__stack__values)); rec__p__stack__top1 =
  ((r).us_split_fields1).rec__p__stack__top } }

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((to_rep(((a).us_split_discrs2).rec__p__stack__capacity) = to_rep(((b).us_split_discrs2).rec__p__stack__capacity)) and
  ((bool_eq10(((a).us_split_fields3).rec__p__stack__values1,
  ((b).us_split_fields3).rec__p__stack__values1) = true) and
  (to_rep1(((a).us_split_fields3).rec__p__stack__top1) = to_rep1(((b).us_split_fields3).rec__p__stack__top1)))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs2).rec__p__stack__capacity) = to_rep(((b).us_split_discrs2).rec__p__stack__capacity)) and
  ((bool_eq10(((a).us_split_fields3).rec__p__stack__values1,
  ((b).us_split_fields3).rec__p__stack__values1) = true) and
  (to_rep1(((a).us_split_fields3).rec__p__stack__top1) = to_rep1(((b).us_split_fields3).rec__p__stack__top1))))) ->
  (bool_eq11(a, b) = false))))

predicate in_range4(rec__p__stack__capacity1: int, a: us_rep) =
  (rec__p__stack__capacity1 = to_rep(((a).us_split_discrs1).rec__p__stack__capacity))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:stack_capacity. forall a1:(int,element) farray. forall a2:t1.
  forall a3:stack_extent. (0 <= object__size3({ us_split_discrs2 = {
  rec__p__stack__capacity = a }; us_split_fields3 = {
  rec__p__stack__values1 = { elts1 = a1; rt1 = a2 }; rec__p__stack__top1 = a3
  } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:stack_capacity. forall a1:(int,element) farray. forall a2:t1.
  forall a3:stack_extent. (0 <= object__alignment3({ us_split_discrs2 = {
  rec__p__stack__capacity = a }; us_split_fields3 = {
  rec__p__stack__values1 = { elts1 = a1; rt1 = a2 }; rec__p__stack__top1 = a3
  } })))

logic p__stack__capacity__first__bit1 : int

logic p__stack__capacity__last__bit1 : int

logic p__stack__capacity__position1 : int

axiom p__stack__capacity__first__bit_axiom1 :
  (0 <= p__stack__capacity__first__bit1)

axiom p__stack__capacity__last__bit_axiom1 :
  (p__stack__capacity__first__bit1 <  p__stack__capacity__last__bit1)

axiom p__stack__capacity__position_axiom1 :
  (0 <= p__stack__capacity__position1)

logic p__stack__values__first__bit1 : int

logic p__stack__values__last__bit1 : int

logic p__stack__values__position1 : int

axiom p__stack__values__first__bit_axiom1 :
  (0 <= p__stack__values__first__bit1)

axiom p__stack__values__last__bit_axiom1 :
  (p__stack__values__first__bit1 <  p__stack__values__last__bit1)

axiom p__stack__values__position_axiom1 : (0 <= p__stack__values__position1)

logic p__stack__top__first__bit1 : int

logic p__stack__top__last__bit1 : int

logic p__stack__top__position1 : int

axiom p__stack__top__first__bit_axiom1 : (0 <= p__stack__top__first__bit1)

axiom p__stack__top__last__bit_axiom1 :
  (p__stack__top__first__bit1 <  p__stack__top__last__bit1)

axiom p__stack__top__position_axiom1 : (0 <= p__stack__top__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy14 : stack_capacity

logic dummy15 : (int,element) farray

logic dummy16 : t1

logic dummy17 : stack_extent

type t5b__ref = { t5b__content : us_rep1
}

function t5b__ref___projection(a: t5b__ref) : us_rep1 = (a).t5b__content

 (* File "p.adb", line 7, characters 0-0 *)
goal WP_parameter_def :
  (forall this__split_fields:(int,element) farray.
  forall this__split_fields1:t. forall this__split_fields2:stack_extent.
  forall o:stack_extent. forall o1:(int,element) farray. forall o2:t1.
  forall o3:(int,element) farray. forall o4:t1. forall o5:stack_extent.
  forall o6:stack_capacity. forall o7:(int,element) farray. forall o8:t1.
  forall o9:stack_extent. forall temp___202:stack_capacity.
  forall temp___2021:(int,element) farray. forall temp___2022:t.
  forall temp___2023:stack_extent. forall temp___204:stack_capacity.
  forall temp___2041:(int,element) farray. forall temp___2042:t.
  forall temp___2043:stack_extent. forall result:(int,element) farray.
  forall result1:t. forall result2:stack_extent.
  forall this__split_fields3:(int,element) farray.
  forall this__split_fields4:t. forall this__split_fields5:stack_extent.
  forall this__split_fields6:(int,element) farray.
  forall this__split_fields7:t. forall this__split_fields8:stack_extent.
  forall this__split_fields9:(int,element) farray.
  forall this__split_fields10:t. forall this__split_fields11:stack_extent.
  (((dynamic_property1(1, to_rep(this__split_discrs),
  to_rep2(first(this__split_fields1)),
  to_rep2(last(this__split_fields1))) and
  ((to_rep2(first(this__split_fields1)) = 1) and
  (to_rep2(last(this__split_fields1)) = to_rep(this__split_discrs)))) and
  ((((to_rep(this__split_discrs) = r3b) and in_range(r3b)) and
  (((to_rep(this__split_discrs) = r6b) and in_range(r6b)) and
  ((((((to_rep1(o) = 0) and (((o3 = o1) and (o4 = o2)) and (o = o5))) and
  ((this__split_discrs = o6) and (((o7 = o3) and (o8 = o4)) and
  (o9 = o5)))) and ({ us_split_discrs1 = { rec__p__stack__capacity =
  temp___202 }; us_split_fields1 = { rec__p__stack__values = { elts =
  temp___2021; rt = temp___2022 }; rec__p__stack__top = temp___2023 }
  } = to_base({ us_split_discrs2 = { rec__p__stack__capacity = o6 };
  us_split_fields3 = { rec__p__stack__values1 = { elts1 = o7; rt1 = o8 };
  rec__p__stack__top1 = o9 } }))) and ((temp___202 = this__split_discrs) and
  ((temp___204 = temp___202) and (((temp___2041 = temp___2021) and
  (temp___2042 = temp___2022)) and (temp___2043 = temp___2023))))) and
  (((((result = this__split_fields) and (result1 = this__split_fields1)) and
  (result2 = this__split_fields2)) and
  (((temp___2041 = this__split_fields3) and
  (temp___2042 = this__split_fields4)) and
  (temp___2043 = this__split_fields5))) and
  (this__split_discrs = temp___204))))) and
  ((((this__split_fields6 = this__split_fields3) and
  (this__split_fields7 = this__split_fields4)) and
  (this__split_fields8 = this__split_fields5)) and
  (((this__split_fields9 = this__split_fields3) and
  (this__split_fields10 = this__split_fields4)) and
  (this__split_fields11 = this__split_fields5))))) -> (empty({
  us_split_discrs1 = { rec__p__stack__capacity = this__split_discrs };
  us_split_fields1 = { rec__p__stack__values = { elts = this__split_fields6;
  rt = this__split_fields7 }; rec__p__stack__top = this__split_fields8 }
  }) = true)))
