(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__flight_manager__engine_values__x_speed :
integer; rec__flight_manager__engine_values__y_speed : integer
}

function us_split_fields_X_Speed__projection(a: us_split_fields) : integer =
  (a).rec__flight_manager__engine_values__x_speed

function us_split_fields_Y_Speed__projection(a: us_split_fields) : integer =
  (a).rec__flight_manager__engine_values__y_speed

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__flight_manager__engine_values__x_speed) = to_rep(((b).us_split_fields1).rec__flight_manager__engine_values__x_speed)) and
  (to_rep(((a).us_split_fields1).rec__flight_manager__engine_values__y_speed) = to_rep(((b).us_split_fields1).rec__flight_manager__engine_values__y_speed))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__flight_manager__engine_values__x_speed) = to_rep(((b).us_split_fields1).rec__flight_manager__engine_values__x_speed)) and
  (to_rep(((a).us_split_fields1).rec__flight_manager__engine_values__y_speed) = to_rep(((b).us_split_fields1).rec__flight_manager__engine_values__y_speed)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__flight_manager__engine_values__x_speed = a;
  rec__flight_manager__engine_values__y_speed = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__flight_manager__engine_values__x_speed = a;
  rec__flight_manager__engine_values__y_speed = a1 } })))

logic flight_manager__engine_values__x_speed__first__bit : int

logic flight_manager__engine_values__x_speed__last__bit : int

logic flight_manager__engine_values__x_speed__position : int

axiom flight_manager__engine_values__x_speed__first__bit_axiom :
  (0 <= flight_manager__engine_values__x_speed__first__bit)

axiom flight_manager__engine_values__x_speed__last__bit_axiom :
  (flight_manager__engine_values__x_speed__first__bit <  flight_manager__engine_values__x_speed__last__bit)

axiom flight_manager__engine_values__x_speed__position_axiom :
  (0 <= flight_manager__engine_values__x_speed__position)

logic flight_manager__engine_values__y_speed__first__bit : int

logic flight_manager__engine_values__y_speed__last__bit : int

logic flight_manager__engine_values__y_speed__position : int

axiom flight_manager__engine_values__y_speed__first__bit_axiom :
  (0 <= flight_manager__engine_values__y_speed__first__bit)

axiom flight_manager__engine_values__y_speed__last__bit_axiom :
  (flight_manager__engine_values__y_speed__first__bit <  flight_manager__engine_values__y_speed__last__bit)

axiom flight_manager__engine_values__y_speed__position_axiom :
  (0 <= flight_manager__engine_values__y_speed__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type engine_values__ref = { engine_values__content : us_rep
}

function engine_values__ref___projection(a: engine_values__ref) : us_rep =
  (a).engine_values__content

logic position_x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic position_y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic target_x : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic target_y : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic my_abs : int -> int

logic my_abs__function_guard : int, int -> prop

axiom my_abs__post_axiom :
  (forall i:int [my_abs(i)]. (in_range1(i) -> in_range1(my_abs(i))))

logic c4b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c7b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "flight_manager.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall result____split_fields:integer.
  forall result____split_fields1:integer. forall o:integer.
  forall o1:integer. forall o2:integer. forall temp___145:integer.
  forall temp___1451:integer. forall o3:integer. forall o4:integer.
  forall o5:integer. forall temp___143:integer. forall temp___1431:integer.
  forall o6:integer. forall o7:integer. forall o8:integer.
  forall temp___149:integer. forall temp___1491:integer. forall o9:integer.
  forall o10:integer. forall o11:integer. forall temp___147:integer.
  forall temp___1471:integer. forall o12:int.
  forall flight_manager__set_engine_speed__C4b__assume:int.
  forall result____split_fields2:integer.
  forall result____split_fields3:integer. forall result:integer.
  forall result1:integer. forall result____split_fields4:integer.
  forall result____split_fields5:integer. forall result2:integer.
  forall result3:integer. forall result____split_fields6:integer.
  forall result____split_fields7:integer. forall result4:integer.
  forall result5:integer. forall result____split_fields8:integer.
  forall result____split_fields9:integer. forall result6:integer.
  forall result7:integer. forall result____split_fields10:integer.
  forall result____split_fields11:integer. (in_range1(position_x) ->
  (in_range1(position_y) -> (in_range1(target_x) -> (in_range1(target_y) ->
  ((((target_x <  position_x) and ((((to_rep(o) = (-100)) and ((o = o1) and
  (result____split_fields1 = o2))) and ((temp___145 = o1) and
  (temp___1451 = o2))) and (((result = result____split_fields) and
  (result1 = result____split_fields1)) and
  ((temp___145 = result____split_fields4) and
  (temp___1451 = result____split_fields5))))) or
  ((not (target_x <  position_x)) and ((((position_x <  target_x) and
  ((((to_rep(o3) = 100) and ((o3 = o4) and
  (result____split_fields1 = o5))) and ((temp___143 = o4) and
  (temp___1431 = o5))) and (((result2 = result____split_fields) and
  (result3 = result____split_fields1)) and
  ((temp___143 = result____split_fields6) and
  (temp___1431 = result____split_fields7))))) or
  ((not (position_x <  target_x)) and
  (((result____split_fields = result____split_fields6) and
  (result____split_fields1 = result____split_fields7)) and
  ((result____split_fields2 = result____split_fields6) and
  (result____split_fields3 = result____split_fields7))))) and ({
  rec__flight_manager__engine_values__x_speed = result____split_fields4;
  rec__flight_manager__engine_values__y_speed = result____split_fields5 } = {
  rec__flight_manager__engine_values__x_speed = result____split_fields6;
  rec__flight_manager__engine_values__y_speed = result____split_fields7
  })))) -> ((((target_y <  position_y) and ((((to_rep(o6) = (-100)) and
  ((result____split_fields4 = o7) and (o6 = o8))) and ((temp___149 = o7) and
  (temp___1491 = o8))) and (((result4 = result____split_fields4) and
  (result5 = result____split_fields5)) and
  ((temp___149 = result____split_fields8) and
  (temp___1491 = result____split_fields9))))) or
  ((not (target_y <  position_y)) and ((((position_y <  target_y) and
  ((((to_rep(o9) = 100) and ((result____split_fields4 = o10) and
  (o9 = o11))) and ((temp___147 = o10) and (temp___1471 = o11))) and
  (((result6 = result____split_fields4) and
  (result7 = result____split_fields5)) and
  ((temp___147 = result____split_fields10) and
  (temp___1471 = result____split_fields11))))) or
  ((not (position_y <  target_y)) and ({
  rec__flight_manager__engine_values__x_speed = result____split_fields10;
  rec__flight_manager__engine_values__y_speed = result____split_fields11
  } = { rec__flight_manager__engine_values__x_speed =
  result____split_fields4; rec__flight_manager__engine_values__y_speed =
  result____split_fields5 }))) and ({
  rec__flight_manager__engine_values__x_speed = result____split_fields8;
  rec__flight_manager__engine_values__y_speed = result____split_fields9 } = {
  rec__flight_manager__engine_values__x_speed = result____split_fields10;
  rec__flight_manager__engine_values__y_speed = result____split_fields11
  })))) -> ((((((o12 = (position_x - target_x)) and
  in_range1((position_x - target_x))) and
  ((flight_manager__set_engine_speed__C4b__assume = my_abs(o12)) and
  in_range1(flight_manager__set_engine_speed__C4b__assume))) and
  (flight_manager__set_engine_speed__C4b__assume = c4b)) and
  in_range1(c4b)) -> ((c4b <  10) ->
  in_range1((to_rep(result____split_fields8) * c4b)))))))))))
