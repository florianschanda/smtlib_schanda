(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort my_int 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (my_int my_int) Bool)
(declare-const dummy my_int)
(declare-datatypes () ((my_int__ref (mk_my_int__ref (my_int__content my_int)))))
(define-fun my_int__ref___projection ((a my_int__ref)) my_int (my_int__content a))
(declare-fun to_rep (my_int) Int)
(declare-fun of_rep (Int) my_int)
(assert (forall ((x my_int)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x my_int)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun mult (Int Int) Int)
(declare-fun mult__function_guard (Int Int Int) Bool)
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 10000)) (in_range temp___expr_159)))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (let ((result (mult x y))) (and (ite (< (* x y) 10000) (= result (* x y)) (=> (<= 10000 (* x y)) (= result 10000))) (dynamic_invariant result true false true true)))) :pattern ((mult x y)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pricing__item__price my_int) (rec__pricing__item__number my_int)))))
(define-fun us_split_fields_Price__projection ((a us_split_fields)) my_int (rec__pricing__item__price a))
(define-fun us_split_fields_Number__projection ((a us_split_fields)) my_int (rec__pricing__item__number a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__pricing__item__price (us_split_fields1 a))) (to_rep (rec__pricing__item__price (us_split_fields1 b)))) (= (to_rep (rec__pricing__item__number (us_split_fields1 a))) (to_rep (rec__pricing__item__number (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const pricing__item__price__first__bit Int)
(declare-const pricing__item__price__last__bit Int)
(declare-const pricing__item__price__position Int)
(assert (<= 0 pricing__item__price__first__bit))
(assert (< pricing__item__price__first__bit pricing__item__price__last__bit))
(assert (<= 0 pricing__item__price__position))
(declare-const pricing__item__number__first__bit Int)
(declare-const pricing__item__number__last__bit Int)
(declare-const pricing__item__number__position Int)
(assert (<= 0 pricing__item__number__first__bit))
(assert (< pricing__item__number__first__bit pricing__item__number__last__bit))
(assert (<= 0 pricing__item__number__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((item__ref (mk_item__ref (item__content us_rep)))))
(define-fun item__ref___projection ((a item__ref)) us_rep (item__content a))
(declare-const it us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const pricing__price_of_item__result Int)
(declare-const o Int)
(declare-const result Int)
(declare-const pricing__price_of_item__result1 Int)
(declare-const pricing__price_of_item__result2 Int)
(declare-const pricing__price_of_item__result3 Int)
(declare-const pricing__price_of_item__result4 Int)
(declare-const pricing__price_of_item__result5 Int)
(declare-const result1 Int)
(assert (= pricing__price_of_item__result1 pricing__price_of_item__result2))
(assert (= pricing__price_of_item__result3 pricing__price_of_item__result1))
(assert (and (= o (mult (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it))))) (and (in_range o) (ite (= (< (* (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it)))) 10000) true) (= o (* (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it))))) (=> (= (>= (* (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it)))) 10000) true) (= o 10000))))))
(assert (= result pricing__price_of_item__result))
(assert (= pricing__price_of_item__result1 o))
(assert (= (mk_int__ref pricing__price_of_item__result4) (mk_int__ref pricing__price_of_item__result2)))
(assert (= pricing__price_of_item__result5 pricing__price_of_item__result3))
(assert (= result1 pricing__price_of_item__result4))
(assert (not (= pricing__price_of_item__result4 (mult (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it)))))))
(check-sat)
(exit)
