(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort small 0)
(declare-fun smallqtint (small) Int)
(assert (forall ((i small)) (and (<= 0 (smallqtint i)) (<= (smallqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (small small) Bool)
(declare-const dummy1 small)
(declare-datatypes () ((small__ref (mk_small__ref (small__content small)))))
(define-fun small__ref___projection ((a small__ref)) small (small__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (and (=> (or (= temp___is_init_155 true) (<= 0 2147483647)) (in_range1 temp___expr_159)) (=> (= temp___do_toplevel_157 true) (=> (= temp___is_init_155 true) (< (* 2 temp___expr_159) 100000)))))
(define-fun dynamic_predicate ((temp___163 Int)) Bool (< (* 2 temp___163) 100000))
(define-fun to_rep ((x small)) Int (smallqtint x))
(declare-fun of_rep (Int) small)
(assert (forall ((x small)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x small)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const i3s Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort very_small 0)
(declare-fun very_smallqtint (very_small) Int)
(assert (forall ((i very_small)) (and (<= 0 (very_smallqtint i)) (<= (very_smallqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (very_small very_small) Bool)
(declare-const dummy2 very_small)
(declare-datatypes () ((very_small__ref (mk_very_small__ref (very_small__content very_small)))))
(define-fun very_small__ref___projection ((a very_small__ref)) very_small (very_small__content a))
(define-fun dynamic_invariant1 ((temp___expr_169 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool) (temp___do_typ_inv_168 Bool)) Bool (and (=> (or (= temp___is_init_165 true) (<= 0 2147483647)) (in_range2 temp___expr_169)) (=> (= temp___do_toplevel_167 true) (=> (= temp___is_init_165 true) (< (* temp___expr_169 temp___expr_169) 100000)))))
(define-fun dynamic_predicate1 ((temp___173 Int)) Bool (< (* temp___173 temp___173) 100000))
(define-fun to_rep1 ((x very_small)) Int (very_smallqtint x))
(declare-fun of_rep1 (Int) very_small)
(assert (forall ((x very_small)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x very_small)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const i5s Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dynamic_preds_rte__small_pair__a small) (rec__dynamic_preds_rte__small_pair__b very_small)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) small (rec__dynamic_preds_rte__small_pair__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) very_small (rec__dynamic_preds_rte__small_pair__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__dynamic_preds_rte__small_pair__a (us_split_fields1 a))) (to_rep (rec__dynamic_preds_rte__small_pair__a (us_split_fields1 b)))) (= (to_rep1 (rec__dynamic_preds_rte__small_pair__b (us_split_fields1 a))) (to_rep1 (rec__dynamic_preds_rte__small_pair__b (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dynamic_preds_rte__small_pair__a__first__bit Int)
(declare-const dynamic_preds_rte__small_pair__a__last__bit Int)
(declare-const dynamic_preds_rte__small_pair__a__position Int)
(assert (<= 0 dynamic_preds_rte__small_pair__a__first__bit))
(assert (< dynamic_preds_rte__small_pair__a__first__bit dynamic_preds_rte__small_pair__a__last__bit))
(assert (<= 0 dynamic_preds_rte__small_pair__a__position))
(declare-const dynamic_preds_rte__small_pair__b__first__bit Int)
(declare-const dynamic_preds_rte__small_pair__b__last__bit Int)
(declare-const dynamic_preds_rte__small_pair__b__position Int)
(assert (<= 0 dynamic_preds_rte__small_pair__b__first__bit))
(assert (< dynamic_preds_rte__small_pair__b__first__bit dynamic_preds_rte__small_pair__b__last__bit))
(assert (<= 0 dynamic_preds_rte__small_pair__b__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((small_pair__ref (mk_small_pair__ref (small_pair__content us_rep)))))
(define-fun small_pair__ref___projection ((a small_pair__ref)) us_rep (small_pair__content a))
(define-fun dynamic_invariant2 ((temp___expr_179 us_rep) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (and (=> (= temp___is_init_175 true) (< (* 2 (to_rep (rec__dynamic_preds_rte__small_pair__a (us_split_fields1 temp___expr_179)))) 100000)) (=> (= temp___is_init_175 true) (let ((temp___181 (rec__dynamic_preds_rte__small_pair__b (us_split_fields1 temp___expr_179)))) (< (* (to_rep1 temp___181) (to_rep1 temp___181)) 100000)))))
(declare-const x us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(assert (dynamic_invariant i3s true false true true))
(assert (dynamic_invariant1 i5s true false true true))
(assert (dynamic_invariant2 x true false true true))
(assert (not (in_range (+ (to_rep (rec__dynamic_preds_rte__small_pair__a (us_split_fields1 x))) (to_rep1 (rec__dynamic_preds_rte__small_pair__b (us_split_fields1 x)))))))
(check-sat)
(exit)
