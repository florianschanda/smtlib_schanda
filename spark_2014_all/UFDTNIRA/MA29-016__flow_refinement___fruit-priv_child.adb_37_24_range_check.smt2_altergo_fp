(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic price_of_fruit_salad : int, us_private, int, int, int, int, us_private,
  int, int -> int

logic price_of_fruit_salad__function_guard : int, int, us_private, int, int,
  int, int, us_private, int, int -> prop

axiom price_of_fruit_salad__post_axiom :
  (forall fruit__apples:int. forall fruit__oranges:int.
  forall fruit__price_of_apple:int. forall fruit__price_of_orange:int.
  forall fruit__pub_child__apples_in_fruit_salad:int.
  forall fruit__pub_child__oranges_in_fruit_salad:int.
  forall fruit__priv_child__extra_cost:int.
  (forall fruit__fruits:us_private.
  forall fruit__pub_child__fruit_salad:us_private
  [price_of_fruit_salad(fruit__apples, fruit__fruits, fruit__oranges,
  fruit__price_of_apple, fruit__price_of_orange,
  fruit__pub_child__apples_in_fruit_salad, fruit__pub_child__fruit_salad,
  fruit__pub_child__oranges_in_fruit_salad, fruit__priv_child__extra_cost)].
  (((((((in_range1(fruit__apples) and in_range1(fruit__oranges)) and
  in_range1(fruit__price_of_apple)) and
  in_range1(fruit__price_of_orange)) and
  in_range1(fruit__pub_child__apples_in_fruit_salad)) and
  in_range1(fruit__pub_child__oranges_in_fruit_salad)) and
  in_range1(fruit__priv_child__extra_cost)) ->
  in_range1(price_of_fruit_salad(fruit__apples, fruit__fruits,
  fruit__oranges, fruit__price_of_apple, fruit__price_of_orange,
  fruit__pub_child__apples_in_fruit_salad, fruit__pub_child__fruit_salad,
  fruit__pub_child__oranges_in_fruit_salad, fruit__priv_child__extra_cost)))))

logic get_price_of_apple : int -> int

logic get_price_of_apple__function_guard : int, int -> prop

axiom get_price_of_apple__post_axiom :
  (forall fruit__price_of_apple:int
  [get_price_of_apple(fruit__price_of_apple)].
  (in_range1(fruit__price_of_apple) ->
  in_range1(get_price_of_apple(fruit__price_of_apple))))

axiom get_price_of_apple__def_axiom :
  (forall fruit__price_of_apple:int
  [get_price_of_apple(fruit__price_of_apple)].
  (in_range1(fruit__price_of_apple) ->
  (get_price_of_apple(fruit__price_of_apple) = fruit__price_of_apple)))

logic get_price_of_orange : int -> int

logic get_price_of_orange__function_guard : int, int -> prop

axiom get_price_of_orange__post_axiom :
  (forall fruit__price_of_orange:int
  [get_price_of_orange(fruit__price_of_orange)].
  (in_range1(fruit__price_of_orange) ->
  in_range1(get_price_of_orange(fruit__price_of_orange))))

axiom get_price_of_orange__def_axiom :
  (forall fruit__price_of_orange:int
  [get_price_of_orange(fruit__price_of_orange)].
  (in_range1(fruit__price_of_orange) ->
  (get_price_of_orange(fruit__price_of_orange) = fruit__price_of_orange)))

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall apples:int. forall oranges:int. forall price_of_apple:int.
  forall price_of_orange:int. forall apples_in_fruit_salad:int.
  forall oranges_in_fruit_salad:int. forall profit:int.
  forall extra_cost:int. forall money:int. forall fruit_salads:int.
  forall fruit_salad:us_private. forall o:int. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall o5:int. forall o6:int. forall o7:int.
  forall o8:int. forall o9:int. forall o10:int. forall o11:int.
  forall o12:int. forall o13:int. forall o14:int. forall apples1:int.
  forall oranges1:int. forall price_of_apple1:int.
  forall price_of_orange1:int. forall extra_cost1:int.
  forall fruits:us_private.
  forall fruit__pub_child__make_all_fruit_salads__fruit_salads_made:int.
  forall result:int. forall fruit_salads1:int. forall result1:int.
  forall money1:int. forall result2:int. forall money2:int.
  (((0 <= 2147483647) -> in_range1(profit)) -> (in_range1(extra_cost) ->
  (in_range1(apples) -> (in_range1(oranges) -> (in_range1(price_of_apple) ->
  (in_range1(price_of_orange) -> (in_range1(apples_in_fruit_salad) ->
  (in_range1(oranges_in_fruit_salad) -> (((0 <= 2147483647) ->
  in_range1(money)) -> (((0 <= 2147483647) -> in_range1(fruit_salads)) ->
  (((((((in_range1(fruit__pub_child__make_all_fruit_salads__fruit_salads_made) and
  in_range1(apples1)) and in_range1(oranges1)) and
  in_range1(price_of_apple1)) and in_range1(price_of_orange1)) and
  in_range1(extra_cost1)) and ((result = fruit_salads) and
  (fruit_salads1 = fruit__pub_child__make_all_fruit_salads__fruit_salads_made))) ->
  (((((((o = price_of_fruit_salad(apples1, fruits, oranges1, price_of_apple1,
  price_of_orange1, apples_in_fruit_salad, fruit_salad,
  oranges_in_fruit_salad, extra_cost1)) and in_range1(o)) and
  (o1 = (fruit_salads1 * o))) and ((o2 = o1) and in_range(o1))) and
  ((o3 = o2) and in_range1(o2))) and ((result1 = money) and
  (money1 = o3))) -> (((((((((o4 = get_price_of_apple(price_of_apple1)) and
  (in_range1(o4) and (o4 = price_of_apple1))) and (o5 = (apples1 * o4))) and
  ((o6 = o5) and in_range(o5))) and (o7 = (money1 + o6))) and ((o8 = o7) and
  in_range(o7))) and ((o9 = o8) and in_range1(o8))) and
  ((result2 = money1) and (money2 = o9))) ->
  (((((((o10 = get_price_of_orange(price_of_orange1)) and (in_range1(o10) and
  (o10 = price_of_orange1))) and (o11 = (oranges1 * o10))) and
  ((o12 = o11) and in_range(o11))) and (o13 = (money2 + o12))) and
  ((o14 = o13) and in_range(o13))) -> in_range1(o14))))))))))))))))
