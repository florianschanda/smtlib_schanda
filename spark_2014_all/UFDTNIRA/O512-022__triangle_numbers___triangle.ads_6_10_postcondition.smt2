(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content integer)))))
(define-fun t1b__ref___projection ((a t1b__ref)) integer (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const tmp Int)
(declare-const i Int)
(declare-const triangle__sum_up_to__result Int)
(declare-const temp___155 Int)
(declare-const temp___154 Int)
(declare-const o Int)
(declare-const result Int)
(declare-const tmp1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 Int)
(declare-const tmp2 Int)
(declare-const tmp3 Int)
(declare-const i2 Int)
(declare-const tmp4 Int)
(declare-const i3 Int)
(declare-const tmp5 Int)
(declare-const i4 Int)
(declare-const tmp6 Int)
(declare-const i5 Int)
(declare-const tmp7 Int)
(declare-const i6 Int)
(declare-const result3 Int)
(declare-const triangle__sum_up_to__result1 Int)
(declare-const triangle__sum_up_to__result2 Int)
(declare-const triangle__sum_up_to__result3 Int)
(declare-const tmp8 Int)
(declare-const i7 Int)
(declare-const triangle__sum_up_to__result4 Int)
(declare-const tmp9 Int)
(declare-const i8 Int)
(declare-const triangle__sum_up_to__result5 Int)
(define-fun i9 () int__ref (mk_int__ref i5))
(define-fun tmp10 () int__ref (mk_int__ref tmp6))
(declare-const result4 Int)
(assert (in_range2 n))
(assert (<= n 10000))
(assert (= (mk_int__ref result) (mk_int__ref tmp)))
(assert (= tmp1 0))
(assert (in_range2 tmp1))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= temp___155 i1)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= temp___154 tmp1)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (and (= o (+ tmp1 i1)) (in_range1 (+ tmp1 i1)))))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp1 result2)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp2 o)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp3 (div1 (* i2 (+ i2 1)) 2))))
(assert (=> (and (<= 1 i1) (<= i1 n)) (and (and (=> (<= 0 2147483647) (in_range2 tmp3)) (=> (<= 1 n) (dynamic_property 1 n i2))) (and (<= 1 i2) (<= i2 n)))))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= i2 n)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp3 tmp4)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp5 tmp3)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= i9 (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp10 (mk_int__ref tmp4))))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 n)) (= tmp7 tmp5)))
(assert (=> (not (and (<= 1 i1) (<= i1 n))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 n))) (= tmp1 tmp6)))
(assert (=> (not (and (<= 1 i1) (<= i1 n))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 n))) (= tmp7 tmp1)))
(assert (= triangle__sum_up_to__result1 triangle__sum_up_to__result2))
(assert (= triangle__sum_up_to__result3 triangle__sum_up_to__result1))
(assert (= (mk_int__ref result3) (mk_int__ref triangle__sum_up_to__result)))
(assert (= triangle__sum_up_to__result1 tmp6))
(assert (= (mk_int__ref triangle__sum_up_to__result4) (mk_int__ref triangle__sum_up_to__result2)))
(assert (= (mk_int__ref i7) i9))
(assert (= (mk_int__ref tmp8) tmp10))
(assert (= triangle__sum_up_to__result5 triangle__sum_up_to__result3))
(assert (= i8 i6))
(assert (= tmp9 tmp7))
(assert (= result4 triangle__sum_up_to__result4))
(assert (not (= triangle__sum_up_to__result4 (div1 (* n (+ n 1)) 2))))
(check-sat)
(exit)
