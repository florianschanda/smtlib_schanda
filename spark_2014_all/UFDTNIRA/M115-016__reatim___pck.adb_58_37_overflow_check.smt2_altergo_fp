(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type tuint_64B

predicate in_range1(x: int) = (((-9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tuint_64B, tuint_64B -> bool

logic dummy1 : tuint_64B

type tuint_64B__ref = { tuint_64B__content : tuint_64B
}

function tuint_64B__ref___projection(a: tuint_64B__ref) : tuint_64B =
  (a).tuint_64B__content

type uint_64

predicate in_range2(x: int) = ((0 <= x) and (x <= 9223372036854775807))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : uint_64, uint_64 -> bool

logic dummy2 : uint_64

type uint_64__ref = { uint_64__content : uint_64
}

function uint_64__ref___projection(a: uint_64__ref) : uint_64 =
  (a).uint_64__content

logic v : int

logic attr__ATTRIBUTE_ADDRESS : int

logic m : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

 (* File "pck.ads", line 2, characters 0-0 *)
goal WP_parameter_def :
  (forall v_hi:int. forall v_lo:int. forall result_hi:int.
  forall result_lo:int. forall remainder:int. forall o:int. forall o1:int.
  forall o2:int. forall o3:int. forall o4:int. forall o5:int. forall o6:int.
  forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall o12:int. forall o13:int. forall o14:int.
  forall o15:int. forall o16:int. forall o17:int. forall result:int.
  forall v_hi1:int. forall result1:int. forall v_lo1:int. forall result2:int.
  forall v_hi2:int. forall result3:int. forall v_lo2:int. forall result4:int.
  forall v_hi3:int. forall result5:int. forall v_lo3:int. forall result6:int.
  forall result_hi1:int. forall result7:int. forall remainder1:int.
  forall result8:int. forall result_hi2:int. (in_range2(v) -> (in_range(m) ->
  (in_range(d) -> ((not (d = 0)) -> ((((o = comp_div(v,4294967296)) and
  in_range2(comp_div(v,4294967296))) and ((result = v_hi) and
  (v_hi1 = o))) -> (in_range2(v_hi1) -> ((((o1 = comp_mod(v,4294967296)) and
  in_range2(comp_mod(v,4294967296))) and ((result1 = v_lo) and
  (v_lo1 = o1))) -> (in_range2(v_lo1) -> (((0 <= 9223372036854775807) ->
  in_range2(result_hi)) -> (((0 <= 9223372036854775807) ->
  in_range2(result_lo)) -> (((0 <= 9223372036854775807) ->
  in_range2(remainder)) -> (((((o2 = (v_hi1 * m)) and
  in_range1((v_hi1 * m))) and ((o3 = o2) and in_range2(o2))) and
  ((result2 = v_hi1) and (v_hi2 = o3))) -> (((((o4 = (v_lo1 * m)) and
  in_range1((v_lo1 * m))) and ((o5 = o4) and in_range2(o4))) and
  ((result3 = v_lo1) and (v_lo2 = o5))) ->
  ((((o6 = (v_hi2 + comp_div(v_lo2,4294967296))) and
  in_range1((v_hi2 + comp_div(v_lo2,4294967296)))) and ((result4 = v_hi2) and
  (v_hi3 = o6))) -> (((result5 = v_lo2) and
  (v_lo3 = comp_mod(v_lo2,4294967296))) -> ((((o7 = comp_div(v_hi3,d)) and
  in_range2(comp_div(v_hi3,d))) and ((result6 = result_hi) and
  (result_hi1 = o7))) -> ((result_hi1 <  2147483647) ->
  (((((((o8 = (result_hi1 * d)) and in_range1((result_hi1 * d))) and
  (o9 = (v_hi3 - o8))) and ((o10 = o9) and in_range1(o9))) and
  ((o11 = o10) and in_range2(o10))) and ((result7 = remainder) and
  (remainder1 = o11))) -> (((((o12 = (result_hi1 * 4294967296)) and
  in_range1((result_hi1 * 4294967296))) and ((o13 = o12) and
  in_range2(o12))) and ((result8 = result_hi1) and (result_hi2 = o13))) ->
  ((((((o14 = (remainder1 * 4294967296)) and
  in_range1((remainder1 * 4294967296))) and (o15 = (v_lo3 + o14))) and
  ((o16 = o15) and in_range1(o15))) and (o17 = (o16 + comp_div(d,2)))) ->
  in_range1(o17))))))))))))))))))))))
