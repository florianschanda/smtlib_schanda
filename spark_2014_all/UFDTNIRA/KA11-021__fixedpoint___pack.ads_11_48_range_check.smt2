(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort volt 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 1024) x) (<= x 1016)))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-const dummy volt)
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun to_fixed (volt) Int)
(declare-fun of_fixed (Int) volt)
(declare-fun user_eq (volt volt) Bool)
(define-fun pos_div_relation ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-fun fxp_mult (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (or (= x 0) (= y 0)) (= (fxp_mult x y) 0) (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation (fxp_mult x y) (* x y) 8) (pos_div_relation (- (fxp_mult x y)) (- (* x y)) 8))) :pattern ((fxp_mult x y))))))
(declare-fun fxp_div (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div x y) (* x 8) y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div x y) (* (- x) 8) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div x y)) (* (- x) 8) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div x y)) (* x 8) (- y))))))) :pattern ((fxp_div x y))))))
(declare-fun fxp_div_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int x y)) x (- y))))))) :pattern ((fxp_div_int x y))))))
(declare-fun fxp_div_result_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int x y)) x (- y))))))) :pattern ((fxp_div_result_int x y))))))
(declare-fun to_int1 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int1 x) 0) (ite (< 0 x) (pos_div_relation (to_int1 x) x 8) (pos_div_relation (- (to_int1 x)) (- x) 8))) :pattern ((to_int1 x)))))
(declare-fun of_real (Real) Int)
(assert (forall ((x volt)) (! (= (of_fixed (to_fixed x)) x) :pattern ((to_fixed x)))))
(assert (forall ((x volt)) (in_range (to_fixed x))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_fixed (of_fixed x)) x)) :pattern ((to_fixed (of_fixed x))))))
(declare-datatypes () ((volt__ref (mk_volt__ref (volt__content volt)))))
(define-fun volt__ref___projection ((a volt__ref)) volt (volt__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort money 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 999999999999999) x) (<= x 999999999999999)))
(declare-const dummy1 money)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun to_fixed1 (money) Int)
(declare-fun of_fixed1 (Int) money)
(declare-fun user_eq1 (money money) Bool)
(define-fun pos_div_relation1 ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna1 ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-fun fxp_mult1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (or (= x 0) (= y 0)) (= (fxp_mult1 x y) 0) (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation1 (fxp_mult1 x y) (* x y) 100) (pos_div_relation1 (- (fxp_mult1 x y)) (- (* x y)) 100))) :pattern ((fxp_mult1 x y))))))
(declare-fun fxp_div1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation1 (fxp_div1 x y) (* x 100) y) (ite (and (< x 0) (< y 0)) (pos_div_relation1 (fxp_div1 x y) (* (- x) 100) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation1 (- (fxp_div1 x y)) (* (- x) 100) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation1 (- (fxp_div1 x y)) (* x 100) (- y))))))) :pattern ((fxp_div1 x y))))))
(declare-fun fxp_div_int1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation1 (fxp_div_int1 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation1 (fxp_div_int1 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation1 (- (fxp_div_int1 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation1 (- (fxp_div_int1 x y)) x (- y))))))) :pattern ((fxp_div_int1 x y))))))
(declare-fun fxp_div_result_int1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna1 (fxp_div_result_int1 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna1 (fxp_div_result_int1 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna1 (- (fxp_div_result_int1 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna1 (- (fxp_div_result_int1 x y)) x (- y))))))) :pattern ((fxp_div_result_int1 x y))))))
(declare-fun to_int2 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int2 x) 0) (ite (< 0 x) (pos_div_relation1 (to_int2 x) x 100) (pos_div_relation1 (- (to_int2 x)) (- x) 100))) :pattern ((to_int2 x)))))
(declare-fun of_real1 (Real) Int)
(assert (forall ((x money)) (! (= (of_fixed1 (to_fixed1 x)) x) :pattern ((to_fixed1 x)))))
(assert (forall ((x money)) (in_range1 (to_fixed1 x))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_fixed1 (of_fixed1 x)) x)) :pattern ((to_fixed1 (of_fixed1 x))))))
(declare-datatypes () ((money__ref (mk_money__ref (money__content money)))))
(define-fun money__ref___projection ((a money__ref)) money (money__content a))
(declare-sort tmoneyB 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-const dummy2 tmoneyB)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun to_fixed2 (tmoneyB) Int)
(declare-fun of_fixed2 (Int) tmoneyB)
(declare-fun user_eq2 (tmoneyB tmoneyB) Bool)
(define-fun pos_div_relation2 ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna2 ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-fun fxp_mult2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (or (= x 0) (= y 0)) (= (fxp_mult2 x y) 0) (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation2 (fxp_mult2 x y) (* x y) 100) (pos_div_relation2 (- (fxp_mult2 x y)) (- (* x y)) 100))) :pattern ((fxp_mult2 x y))))))
(declare-fun fxp_div2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation2 (fxp_div2 x y) (* x 100) y) (ite (and (< x 0) (< y 0)) (pos_div_relation2 (fxp_div2 x y) (* (- x) 100) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation2 (- (fxp_div2 x y)) (* (- x) 100) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation2 (- (fxp_div2 x y)) (* x 100) (- y))))))) :pattern ((fxp_div2 x y))))))
(declare-fun fxp_div_int2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation2 (fxp_div_int2 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation2 (fxp_div_int2 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation2 (- (fxp_div_int2 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation2 (- (fxp_div_int2 x y)) x (- y))))))) :pattern ((fxp_div_int2 x y))))))
(declare-fun fxp_div_result_int2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna2 (fxp_div_result_int2 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna2 (fxp_div_result_int2 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna2 (- (fxp_div_result_int2 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna2 (- (fxp_div_result_int2 x y)) x (- y))))))) :pattern ((fxp_div_result_int2 x y))))))
(declare-fun to_int3 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int3 x) 0) (ite (< 0 x) (pos_div_relation2 (to_int3 x) x 100) (pos_div_relation2 (- (to_int3 x)) (- x) 100))) :pattern ((to_int3 x)))))
(declare-fun of_real2 (Real) Int)
(assert (forall ((x tmoneyB)) (! (= (of_fixed2 (to_fixed2 x)) x) :pattern ((to_fixed2 x)))))
(assert (forall ((x tmoneyB)) (in_range2 (to_fixed2 x))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_fixed2 (of_fixed2 x)) x)) :pattern ((to_fixed2 (of_fixed2 x))))))
(declare-datatypes () ((tmoneyB__ref (mk_tmoneyB__ref (tmoneyB__content tmoneyB)))))
(define-fun tmoneyB__ref___projection ((a tmoneyB__ref)) tmoneyB (tmoneyB__content a))
(declare-const first Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-const dummy3 tmoneyB)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tmoneyB tmoneyB) Bool)
(define-fun pos_div_relation3 ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna3 ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-fun fxp_mult3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (or (= x 0) (= y 0)) (= (fxp_mult3 x y) 0) (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation3 (fxp_mult3 x y) (* x y) 100) (pos_div_relation3 (- (fxp_mult3 x y)) (- (* x y)) 100))) :pattern ((fxp_mult3 x y))))))
(declare-fun fxp_div3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation3 (fxp_div3 x y) (* x 100) y) (ite (and (< x 0) (< y 0)) (pos_div_relation3 (fxp_div3 x y) (* (- x) 100) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation3 (- (fxp_div3 x y)) (* (- x) 100) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation3 (- (fxp_div3 x y)) (* x 100) (- y))))))) :pattern ((fxp_div3 x y))))))
(declare-fun fxp_div_int3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation3 (fxp_div_int3 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation3 (fxp_div_int3 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation3 (- (fxp_div_int3 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation3 (- (fxp_div_int3 x y)) x (- y))))))) :pattern ((fxp_div_int3 x y))))))
(declare-fun fxp_div_result_int3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna3 (fxp_div_result_int3 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna3 (fxp_div_result_int3 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna3 (- (fxp_div_result_int3 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna3 (- (fxp_div_result_int3 x y)) x (- y))))))) :pattern ((fxp_div_result_int3 x y))))))
(declare-fun to_int4 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int4 x) 0) (ite (< 0 x) (pos_div_relation3 (to_int4 x) x 100) (pos_div_relation3 (- (to_int4 x)) (- x) 100))) :pattern ((to_int4 x)))))
(declare-fun of_real3 (Real) Int)
(declare-datatypes () ((salary__ref (mk_salary__ref (salary__content tmoneyB)))))
(define-fun salary__ref___projection ((a salary__ref)) tmoneyB (salary__content a))
(define-fun dynamic_invariant ((temp___expr_147 tmoneyB) (temp___is_init_144 Bool) (temp___skip_constant_145 Bool) (temp___do_toplevel_146 Bool)) Bool (=> (or (= temp___is_init_144 true) (<= first 9999999999)) (dynamic_property first 9999999999 (to_fixed2 temp___expr_147))))
(assert (= first (to_fixed1 (of_fixed1 (of_real1 (- (/ 9999999999.0 100.0)))))))
(declare-const init_stash money)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const init_pocket money)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const default_salary tmoneyB)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert (= init_stash (of_fixed1 1000000)))
(assert (= init_pocket (of_fixed1 0)))
(assert (= default_salary (of_fixed2 0)))
(declare-const default_v volt)
(declare-const o volt)
(declare-const us Int)
(declare-const result volt)
(declare-const default_v1 volt)
(assert (= (to_fixed o) (- 1)))
(assert (= result default_v))
(assert (= default_v1 o))
(assert (not (dynamic_property first 9999999999 0)))
(check-sat)
(exit)
