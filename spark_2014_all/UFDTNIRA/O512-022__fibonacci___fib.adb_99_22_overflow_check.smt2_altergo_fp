(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_comm1 :
  (forall x:int. forall y:int. (((x * y) = (y * x)) ->
  (forall n:int. ((0 <= n) -> ((power(x, n) * y) = (y * power(x, n)))))))

axiom Power_comm2 :
  (forall x:int. forall y:int. (((x * y) = (y * x)) ->
  (forall n:int. ((0 <= n) -> (power((x * y), n) = (power(x, n) * power(y,
  n)))))))

axiom Power_non_neg :
  (forall x:int. forall y:int. (((0 <= x) and (0 <= y)) -> (0 <= power(x,
  y))))

axiom Power_monotonic :
  (forall x:int. forall n:int. forall m:int. (((0 <  x) and ((0 <= n) and
  (n <= m))) -> (power(x, n) <= power(x, m))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic a1 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic a2 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic n1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic n2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic p1 : int

logic p2 : int

logic b1 : int

logic b2 : int

logic k1 : int

logic k2 : int

logic temp___187 : int

logic temp___186 : int

logic temp___185 : int

logic temp___188 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic temp___193 : int

logic temp___192 : int

logic temp___191 : int

logic temp___194 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic result : int

logic p11 : int

logic result1 : int

logic b11 : int

logic result2 : int

logic k11 : int

logic p12 : int

logic b12 : int

logic k12 : int

logic temp___1881 : int

logic result3 : int

logic temp___1882 : int

logic result4 : int

logic k13 : int

logic result5 : int

logic b13 : int

logic result6 : int

logic k14 : int

logic result7 : int

logic p13 : int

logic p14 : int

logic b14 : int

logic k15 : int

logic temp___1883 : int

logic p15 : int

logic b15 : int

logic k16 : int

logic temp___1884 : int

logic p16 : int

logic b16 : int

logic k17 : int

logic p17 : int

logic b17 : int

logic k18 : int

logic p18 : int

logic b18 : int

logic k19 : int

logic p19 : int

logic b19 : int

logic k110 : int

logic result8 : int

logic p21 : int

logic result9 : int

logic b21 : int

logic result10 : int

logic k21 : int

logic p22 : int

logic b22 : int

logic k22 : int

logic temp___1941 : int

logic result11 : int

logic temp___1942 : int

logic result12 : int

logic k23 : int

logic result13 : int

logic b23 : int

logic result14 : int

logic k24 : int

logic result15 : int

logic p23 : int

logic p24 : int

logic b24 : int

logic k25 : int

logic p25 : int

logic b25 : int

logic k26 : int

logic p26 : int

logic b26 : int

logic k27 : int

logic temp___1943 : int

logic p27 : int

logic b27 : int

logic k28 : int

logic temp___1944 : int

logic p28 : int

logic b28 : int

logic k29 : int

logic temp___1945 : int

logic p29 : int

logic b29 : int

logic k210 : int

logic temp___1946 : int

logic p210 : int

logic b210 : int

logic k211 : int

logic p211 : int

logic b211 : int

logic k212 : int

logic p212 : int

logic b212 : int

logic k213 : int

logic p213 : int

logic b213 : int

logic k214 : int

logic p110 : int

logic p214 : int

logic b110 : int

logic b214 : int

logic k111 : int

logic k215 : int

logic p111 : int

logic p215 : int

logic b111 : int

logic b215 : int

logic k112 : int

logic k216 : int

axiom H : in_range1(a1)

axiom H1 : in_range1(a2)

axiom H2 : in_range2(n1)

axiom H3 : in_range2(n2)

axiom H4 : (((- 2147483648) <= 2147483647) -> in_range1(p1))

axiom H5 : (((- 2147483648) <= 2147483647) -> in_range1(p2))

axiom H6 : ((a1 = a2) and ((n1 = n2) and (((not (a1 = 0)) or
  (not (n1 = 0))) and (power(a1, n1) <  2147483647))))

axiom H7 : (((- 2147483648) <= 2147483647) -> in_range1(b1))

axiom H8 : (((- 2147483648) <= 2147483647) -> in_range1(b2))

axiom H9 : ((0 <= 2147483647) -> in_range2(k1))

axiom H10 : ((0 <= 2147483647) -> in_range2(k2))

axiom H11 : (result = p1)

axiom H12 : (p11 = 1)

axiom H13 : (result1 = b1)

axiom H14 : (b11 = a1)

axiom H15 : (result2 = k1)

axiom H16 : (k11 = n1)

axiom H17 : (0 <  k11)

axiom H18 : ((power(a1, n1) = (p12 * power(b12, k12))) and (0 <= k12))

axiom H19 : ((((((- 2147483648) <= 2147483647) -> in_range1(b12)) and
  ((0 <= 2147483647) -> in_range2(k12))) and
  (((- 2147483648) <= 2147483647) -> in_range1(p12))) and (0 <  k12))

axiom H20 : (temp___1881 = result3)

axiom H21 : (temp___1882 = k12)

axiom H22 : (comp_mod(k12,2) = 0)

axiom H23 : ((p12 * power((b12 * b12), comp_div(k12,2))) = power(a1, n1))

axiom H24 : (k12 = result4)

axiom H25 : (k13 = comp_div(k12,2))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1((b12 * b12))
