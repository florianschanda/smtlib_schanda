(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort value_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (value_type value_type) Bool)
(declare-const dummy value_type)
(declare-datatypes () ((value_type__ref (mk_value_type__ref (value_type__content value_type)))))
(define-fun value_type__ref___projection ((a value_type__ref)) value_type (value_type__content a))
(define-fun dynamic_invariant ((temp___expr_178 Int) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool)) Bool (=> (or (= temp___is_init_175 true) (<= 0 2147483647)) (in_range1 temp___expr_178)))
(declare-fun are_coprime (Int Int) Bool)
(declare-fun are_coprime__function_guard (Bool Int Int) Bool)
(assert true)
(assert (forall ((v1 Int) (v2 Int)) (! (= (= (are_coprime v1 v2) true) (and (and (< 0 v1) (< 0 v2)) (forall ((v Int)) (=> (and (<= 2 v) (<= v (ite (< v1 v2) v1 v2))) (not (and (= (mod2 v1 v) 0) (= (mod2 v2 v) 0))))))) :pattern ((are_coprime v1 v2)))))
(declare-const left Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const right Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort taS 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (taS taS) Bool)
(declare-const dummy1 taS)
(declare-datatypes () ((taS__ref (mk_taS__ref (taS__content taS)))))
(define-fun taS__ref___projection ((a taS__ref)) taS (taS__content a))
(define-fun dynamic_invariant1 ((temp___expr_206 Int) (temp___is_init_203 Bool) (temp___skip_constant_204 Bool) (temp___do_toplevel_205 Bool)) Bool (=> (or (= temp___is_init_203 true) (<= 1 2147483647)) (in_range2 temp___expr_206)))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort tbS 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tbS tbS) Bool)
(declare-const dummy2 tbS)
(declare-datatypes () ((tbS__ref (mk_tbS__ref (tbS__content tbS)))))
(define-fun tbS__ref___projection ((a tbS__ref)) tbS (tbS__content a))
(define-fun dynamic_invariant2 ((temp___expr_212 Int) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool)) Bool (=> (or (= temp___is_init_209 true) (<= 1 2147483647)) (in_range3 temp___expr_212)))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort trS 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (trS trS) Bool)
(declare-const dummy3 trS)
(declare-datatypes () ((trS__ref (mk_trS__ref (trS__content trS)))))
(define-fun trS__ref___projection ((a trS__ref)) trS (trS__content a))
(define-fun dynamic_invariant3 ((temp___expr_218 Int) (temp___is_init_215 Bool) (temp___skip_constant_216 Bool) (temp___do_toplevel_217 Bool)) Bool (=> (or (= temp___is_init_215 true) (<= 0 2147483647)) (in_range4 temp___expr_218)))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const a Int)
(declare-const b Int)
(declare-const r Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result1 Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result2 Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result3 Int)
(declare-const result Int)
(declare-const a1 Int)
(declare-const result1 Int)
(declare-const b1 Int)
(declare-const a2 Int)
(declare-const b2 Int)
(declare-const r1 Int)
(declare-const result2 Int)
(declare-const r2 Int)
(declare-const result3 Int)
(declare-const a3 Int)
(declare-const result4 Int)
(declare-const b3 Int)
(assert (in_range1 left))
(assert (in_range1 right))
(assert (and (<= 2 left) (<= 0 right)))
(assert (=> (<= 1 2147483647) (in_range2 a)))
(assert (=> (<= 1 2147483647) (in_range3 b)))
(assert (=> (<= 0 2147483647) (in_range4 r)))
(assert (not (= left 0)))
(assert (not (= right 0)))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result3 test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result3 test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result1))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result2 test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result3))
(assert (and (= o left) (in_range2 left)))
(assert (= (mk_int__ref result) (mk_int__ref a)))
(assert (= a1 o))
(assert (and (= o1 right) (in_range3 right)))
(assert (= (mk_int__ref result1) (mk_int__ref b)))
(assert (= b1 o1))
(assert (and (< 0 a2) (< 0 b2)))
(assert (not (and (= a2 1) (= b2 1))))
(assert (= (= (are_coprime a2 b2) true) (= (are_coprime left right) true)))
(assert (and (and (=> (<= 1 2147483647) (in_range3 b2)) (=> (<= 0 2147483647) (in_range4 r1))) (=> (<= 1 2147483647) (in_range2 a2))))
(assert (and (= o2 (mod2 a2 b2)) (in_range4 (mod2 a2 b2))))
(assert (= r1 result2))
(assert (= r2 o2))
(assert (not (= r2 0)))
(assert (= (= (are_coprime a2 b2) true) (= (are_coprime b2 r2) true)))
(assert (= a2 result3))
(assert (= a3 b2))
(assert (and (= o3 r2) (in_range3 r2)))
(assert (= b2 result4))
(assert (= b3 o3))
(assert (not (not (and (= a3 1) (= b3 1)))))
(check-sat)
(exit)
