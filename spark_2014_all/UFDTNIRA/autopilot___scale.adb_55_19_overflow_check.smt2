(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun inverse (Int Int) Int)
(declare-fun inverse__function_guard (Int Int Int) Bool)
(declare-sort scaledata 0)
(declare-fun scaledataqtint (scaledata) Int)
(assert (forall ((i scaledata)) (and (<= (- 100) (scaledataqtint i)) (<= (scaledataqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 100) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (scaledata scaledata) Bool)
(declare-const dummy1 scaledata)
(declare-datatypes () ((scaledata__ref (mk_scaledata__ref (scaledata__content scaledata)))))
(define-fun scaledata__ref___projection ((a scaledata__ref)) scaledata (scaledata__content a))
(define-fun dynamic_invariant1 ((temp___expr_221 Int) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool (=> (or (= temp___is_init_217 true) (<= (- 100) 100)) (in_range2 temp___expr_221)))
(declare-sort percent 0)
(declare-fun percentqtint (percent) Int)
(assert (forall ((i percent)) (and (<= 0 (percentqtint i)) (<= (percentqtint i) 100))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (percent percent) Bool)
(declare-const dummy2 percent)
(declare-datatypes () ((percent__ref (mk_percent__ref (percent__content percent)))))
(define-fun percent__ref___projection ((a percent__ref)) percent (percent__content a))
(define-fun dynamic_invariant2 ((temp___expr_235 Int) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool (=> (or (= temp___is_init_231 true) (<= 0 100)) (in_range3 temp___expr_235)))
(assert (forall ((val__ Int) (flatness Int)) (! (=> (and (and (dynamic_invariant1 val__ true true true true) (dynamic_invariant flatness true true true true)) (and (and (<= 0 val__) (< 0 flatness)) (<= flatness 100))) (dynamic_invariant2 (inverse val__ flatness) true false true true)) :pattern ((inverse val__ flatness)))))
(declare-sort controlangle 0)
(declare-fun controlangleqtint (controlangle) Int)
(assert (forall ((i controlangle)) (and (<= (- 45) (controlangleqtint i)) (<= (controlangleqtint i) 45))))
(define-fun in_range4 ((x Int)) Bool (and (<= (- 45) x) (<= x 45)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (controlangle controlangle) Bool)
(declare-const dummy3 controlangle)
(declare-datatypes () ((controlangle__ref (mk_controlangle__ref (controlangle__content controlangle)))))
(define-fun controlangle__ref___projection ((a controlangle__ref)) controlangle (controlangle__content a))
(define-fun dynamic_invariant3 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= (- 45) 45)) (in_range4 temp___expr_158)))
(declare-sort machnumber 0)
(declare-fun machnumberqtint (machnumber) Int)
(assert (forall ((i machnumber)) (and (<= 0 (machnumberqtint i)) (<= (machnumberqtint i) 100))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (machnumber machnumber) Bool)
(declare-const dummy4 machnumber)
(declare-datatypes () ((machnumber__ref (mk_machnumber__ref (machnumber__content machnumber)))))
(define-fun machnumber__ref___projection ((a machnumber__ref)) machnumber (machnumber__content a))
(define-fun dynamic_invariant4 ((temp___expr_200 Int) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (or (= temp___is_init_196 true) (<= 0 100)) (in_range5 temp___expr_200)))
(declare-const mach Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const present Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const target Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const max Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const target_angle Int)
(declare-const k1 Int)
(declare-const k2 Int)
(declare-const gap Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const gap1 Int)
(declare-const result Int)
(declare-const k11 Int)
(declare-const result1 Int)
(declare-const k21 Int)
(assert (in_range5 mach))
(assert (in_range2 present))
(assert (in_range2 target))
(assert (in_range4 max))
(assert (< 0 max))
(assert (=> (<= (- 45) 45) (in_range4 target_angle)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 k1)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 k2)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 gap)))
(assert (not (= present target)))
(assert (and (< 0 gap1) (<= gap1 100)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 gap1)))
(assert (and (= o (inverse mach 20)) (in_range3 o)))
(assert (= (mk_int__ref result) (mk_int__ref k1)))
(assert (= k11 o))
(assert (and (= o1 gap1) (in_range2 gap1)))
(assert (and (= o2 (inverse o1 20)) (in_range3 o2)))
(assert (= (mk_int__ref result1) (mk_int__ref k2)))
(assert (= k21 o2))
(assert (not (in_range1 (+ 1 k21))))
(check-sat)
(exit)
