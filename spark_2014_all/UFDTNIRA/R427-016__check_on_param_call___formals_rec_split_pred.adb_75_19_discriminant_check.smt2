(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep1 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__formals_rec_split_pred__rec__d Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__formals_rec_split_pred__rec__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__formals_rec_split_pred__rec__f integer) (rec__formals_rec_split_pred__rec__g integer) (rec__formals_rec_split_pred__rec__h natural)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) integer (rec__formals_rec_split_pred__rec__f a))
(define-fun us_split_fields_G__projection ((a us_split_fields)) integer (rec__formals_rec_split_pred__rec__g a))
(define-fun us_split_fields_H__projection ((a us_split_fields)) natural (rec__formals_rec_split_pred__rec__h a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun formals_rec_split_pred__rec__f__pred ((a us_rep)) Bool (= (ite (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a)) 1 0) 1))
(define-fun formals_rec_split_pred__rec__g__pred ((a us_rep)) Bool (= (ite (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a)) 1 0) 1))
(define-fun formals_rec_split_pred__rec__h__pred ((a us_rep)) Bool (= (ite (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a)) 1 0) 1))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a)) (rec__formals_rec_split_pred__rec__d (us_split_discrs1 b))) (and (and (=> (formals_rec_split_pred__rec__f__pred a) (= (to_rep (rec__formals_rec_split_pred__rec__f (us_split_fields1 a))) (to_rep (rec__formals_rec_split_pred__rec__f (us_split_fields1 b))))) (=> (formals_rec_split_pred__rec__g__pred a) (= (to_rep (rec__formals_rec_split_pred__rec__g (us_split_fields1 a))) (to_rep (rec__formals_rec_split_pred__rec__g (us_split_fields1 b)))))) (=> (formals_rec_split_pred__rec__h__pred a) (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 a))) (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const formals_rec_split_pred__rec__d__first__bit Int)
(declare-const formals_rec_split_pred__rec__d__last__bit Int)
(declare-const formals_rec_split_pred__rec__d__position Int)
(assert (<= 0 formals_rec_split_pred__rec__d__first__bit))
(assert (< formals_rec_split_pred__rec__d__first__bit formals_rec_split_pred__rec__d__last__bit))
(assert (<= 0 formals_rec_split_pred__rec__d__position))
(declare-const formals_rec_split_pred__rec__f__first__bit Int)
(declare-const formals_rec_split_pred__rec__f__last__bit Int)
(declare-const formals_rec_split_pred__rec__f__position Int)
(assert (<= 0 formals_rec_split_pred__rec__f__first__bit))
(assert (< formals_rec_split_pred__rec__f__first__bit formals_rec_split_pred__rec__f__last__bit))
(assert (<= 0 formals_rec_split_pred__rec__f__position))
(declare-const formals_rec_split_pred__rec__g__first__bit Int)
(declare-const formals_rec_split_pred__rec__g__last__bit Int)
(declare-const formals_rec_split_pred__rec__g__position Int)
(assert (<= 0 formals_rec_split_pred__rec__g__first__bit))
(assert (< formals_rec_split_pred__rec__g__first__bit formals_rec_split_pred__rec__g__last__bit))
(assert (<= 0 formals_rec_split_pred__rec__g__position))
(declare-const formals_rec_split_pred__rec__h__first__bit Int)
(declare-const formals_rec_split_pred__rec__h__last__bit Int)
(declare-const formals_rec_split_pred__rec__h__position Int)
(assert (<= 0 formals_rec_split_pred__rec__h__first__bit))
(assert (< formals_rec_split_pred__rec__h__first__bit formals_rec_split_pred__rec__h__last__bit))
(assert (<= 0 formals_rec_split_pred__rec__h__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content a))
(define-fun in_range3 ((rec__formals_rec_split_pred__rec__d1 Bool) (a us_rep)) Bool (= rec__formals_rec_split_pred__rec__d1 (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const formals_rec_split_pred__rec__d__first__bit1 Int)
(declare-const formals_rec_split_pred__rec__d__last__bit1 Int)
(declare-const formals_rec_split_pred__rec__d__position1 Int)
(assert (<= 0 formals_rec_split_pred__rec__d__first__bit1))
(assert (< formals_rec_split_pred__rec__d__first__bit1 formals_rec_split_pred__rec__d__last__bit1))
(assert (<= 0 formals_rec_split_pred__rec__d__position1))
(declare-const formals_rec_split_pred__rec__f__first__bit1 Int)
(declare-const formals_rec_split_pred__rec__f__last__bit1 Int)
(declare-const formals_rec_split_pred__rec__f__position1 Int)
(assert (<= 0 formals_rec_split_pred__rec__f__first__bit1))
(assert (< formals_rec_split_pred__rec__f__first__bit1 formals_rec_split_pred__rec__f__last__bit1))
(assert (<= 0 formals_rec_split_pred__rec__f__position1))
(declare-const formals_rec_split_pred__rec__g__first__bit1 Int)
(declare-const formals_rec_split_pred__rec__g__last__bit1 Int)
(declare-const formals_rec_split_pred__rec__g__position1 Int)
(assert (<= 0 formals_rec_split_pred__rec__g__first__bit1))
(assert (< formals_rec_split_pred__rec__g__first__bit1 formals_rec_split_pred__rec__g__last__bit1))
(assert (<= 0 formals_rec_split_pred__rec__g__position1))
(declare-const formals_rec_split_pred__rec__h__first__bit1 Int)
(declare-const formals_rec_split_pred__rec__h__last__bit1 Int)
(declare-const formals_rec_split_pred__rec__h__position1 Int)
(assert (<= 0 formals_rec_split_pred__rec__h__first__bit1))
(assert (< formals_rec_split_pred__rec__h__first__bit1 formals_rec_split_pred__rec__h__last__bit1))
(assert (<= 0 formals_rec_split_pred__rec__h__position1))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((constr_rec__ref (mk_constr_rec__ref (constr_rec__content us_rep)))))
(define-fun constr_rec__ref___projection ((a constr_rec__ref)) us_rep (constr_rec__content a))
(define-fun dynamic_invariant ((temp___expr_206 us_rep) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool) (temp___do_typ_inv_205 Bool)) Bool (and (=> (not (= temp___skip_constant_203 true)) (in_range3 (distinct 1 0) temp___expr_206)) (=> (= temp___do_toplevel_204 true) (=> (= temp___is_init_202 true) (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 temp___expr_206))) 0))))))
(define-fun default_initial_assumption ((temp___expr_209 us_rep) (temp___skip_top_level_210 Bool)) Bool (and (and (and (= (rec__formals_rec_split_pred__rec__d (us_split_discrs1 temp___expr_209)) (distinct 1 0)) (=> (formals_rec_split_pred__rec__f__pred temp___expr_209) (= (to_rep (rec__formals_rec_split_pred__rec__f (us_split_fields1 temp___expr_209))) 1))) (=> (formals_rec_split_pred__rec__g__pred temp___expr_209) (= (to_rep (rec__formals_rec_split_pred__rec__g (us_split_fields1 temp___expr_209))) 1))) (=> (formals_rec_split_pred__rec__h__pred temp___expr_209) (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 temp___expr_209))) 1))))
(define-fun dynamic_predicate ((temp___212 us_rep)) Bool (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 temp___212))) 0)))
(define-fun in_range4 ((rec__formals_rec_split_pred__rec__d1 Bool) (a us_rep)) Bool (= rec__formals_rec_split_pred__rec__d1 (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const formals_rec_split_pred__rec__d__first__bit2 Int)
(declare-const formals_rec_split_pred__rec__d__last__bit2 Int)
(declare-const formals_rec_split_pred__rec__d__position2 Int)
(assert (<= 0 formals_rec_split_pred__rec__d__first__bit2))
(assert (< formals_rec_split_pred__rec__d__first__bit2 formals_rec_split_pred__rec__d__last__bit2))
(assert (<= 0 formals_rec_split_pred__rec__d__position2))
(declare-const formals_rec_split_pred__rec__f__first__bit2 Int)
(declare-const formals_rec_split_pred__rec__f__last__bit2 Int)
(declare-const formals_rec_split_pred__rec__f__position2 Int)
(assert (<= 0 formals_rec_split_pred__rec__f__first__bit2))
(assert (< formals_rec_split_pred__rec__f__first__bit2 formals_rec_split_pred__rec__f__last__bit2))
(assert (<= 0 formals_rec_split_pred__rec__f__position2))
(declare-const formals_rec_split_pred__rec__g__first__bit2 Int)
(declare-const formals_rec_split_pred__rec__g__last__bit2 Int)
(declare-const formals_rec_split_pred__rec__g__position2 Int)
(assert (<= 0 formals_rec_split_pred__rec__g__first__bit2))
(assert (< formals_rec_split_pred__rec__g__first__bit2 formals_rec_split_pred__rec__g__last__bit2))
(assert (<= 0 formals_rec_split_pred__rec__g__position2))
(declare-const formals_rec_split_pred__rec__h__first__bit2 Int)
(declare-const formals_rec_split_pred__rec__h__last__bit2 Int)
(declare-const formals_rec_split_pred__rec__h__position2 Int)
(assert (<= 0 formals_rec_split_pred__rec__h__first__bit2))
(assert (< formals_rec_split_pred__rec__h__first__bit2 formals_rec_split_pred__rec__h__last__bit2))
(assert (<= 0 formals_rec_split_pred__rec__h__position2))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((constr_rec_2__ref (mk_constr_rec_2__ref (constr_rec_2__content us_rep)))))
(define-fun constr_rec_2__ref___projection ((a constr_rec_2__ref)) us_rep (constr_rec_2__content a))
(define-fun dynamic_invariant1 ((temp___expr_220 us_rep) (temp___is_init_216 Bool) (temp___skip_constant_217 Bool) (temp___do_toplevel_218 Bool) (temp___do_typ_inv_219 Bool)) Bool (and (=> (not (= temp___skip_constant_217 true)) (in_range4 (distinct 1 0) temp___expr_220)) (=> (= temp___do_toplevel_218 true) (=> (= temp___is_init_216 true) (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 temp___expr_220))) 0))))))
(define-fun default_initial_assumption1 ((temp___expr_223 us_rep) (temp___skip_top_level_224 Bool)) Bool (and (and (and (= (rec__formals_rec_split_pred__rec__d (us_split_discrs1 temp___expr_223)) (distinct 1 0)) (=> (formals_rec_split_pred__rec__f__pred temp___expr_223) (= (to_rep (rec__formals_rec_split_pred__rec__f (us_split_fields1 temp___expr_223))) 1))) (=> (formals_rec_split_pred__rec__g__pred temp___expr_223) (= (to_rep (rec__formals_rec_split_pred__rec__g (us_split_fields1 temp___expr_223))) 1))) (=> (formals_rec_split_pred__rec__h__pred temp___expr_223) (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 temp___expr_223))) 1))))
(define-fun dynamic_predicate1 ((temp___226 us_rep)) Bool (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h (us_split_fields1 temp___226))) 0)))
(define-fun in_range5 ((rec__formals_rec_split_pred__rec__d1 Bool) (a us_rep)) Bool (= rec__formals_rec_split_pred__rec__d1 (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const formals_rec_split_pred__rec__d__first__bit3 Int)
(declare-const formals_rec_split_pred__rec__d__last__bit3 Int)
(declare-const formals_rec_split_pred__rec__d__position3 Int)
(assert (<= 0 formals_rec_split_pred__rec__d__first__bit3))
(assert (< formals_rec_split_pred__rec__d__first__bit3 formals_rec_split_pred__rec__d__last__bit3))
(assert (<= 0 formals_rec_split_pred__rec__d__position3))
(declare-const formals_rec_split_pred__rec__f__first__bit3 Int)
(declare-const formals_rec_split_pred__rec__f__last__bit3 Int)
(declare-const formals_rec_split_pred__rec__f__position3 Int)
(assert (<= 0 formals_rec_split_pred__rec__f__first__bit3))
(assert (< formals_rec_split_pred__rec__f__first__bit3 formals_rec_split_pred__rec__f__last__bit3))
(assert (<= 0 formals_rec_split_pred__rec__f__position3))
(declare-const formals_rec_split_pred__rec__g__first__bit3 Int)
(declare-const formals_rec_split_pred__rec__g__last__bit3 Int)
(declare-const formals_rec_split_pred__rec__g__position3 Int)
(assert (<= 0 formals_rec_split_pred__rec__g__first__bit3))
(assert (< formals_rec_split_pred__rec__g__first__bit3 formals_rec_split_pred__rec__g__last__bit3))
(assert (<= 0 formals_rec_split_pred__rec__g__position3))
(declare-const formals_rec_split_pred__rec__h__first__bit3 Int)
(declare-const formals_rec_split_pred__rec__h__last__bit3 Int)
(declare-const formals_rec_split_pred__rec__h__position3 Int)
(assert (<= 0 formals_rec_split_pred__rec__h__first__bit3))
(assert (< formals_rec_split_pred__rec__h__first__bit3 formals_rec_split_pred__rec__h__last__bit3))
(assert (<= 0 formals_rec_split_pred__rec__h__position3))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content us_rep)))))
(define-fun t8b__ref___projection ((a t8b__ref)) us_rep (t8b__content a))
(declare-const x__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range6 ((rec__formals_rec_split_pred__rec__d1 Bool) (a us_rep)) Bool (= rec__formals_rec_split_pred__rec__d1 (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const formals_rec_split_pred__rec__d__first__bit4 Int)
(declare-const formals_rec_split_pred__rec__d__last__bit4 Int)
(declare-const formals_rec_split_pred__rec__d__position4 Int)
(assert (<= 0 formals_rec_split_pred__rec__d__first__bit4))
(assert (< formals_rec_split_pred__rec__d__first__bit4 formals_rec_split_pred__rec__d__last__bit4))
(assert (<= 0 formals_rec_split_pred__rec__d__position4))
(declare-const formals_rec_split_pred__rec__f__first__bit4 Int)
(declare-const formals_rec_split_pred__rec__f__last__bit4 Int)
(declare-const formals_rec_split_pred__rec__f__position4 Int)
(assert (<= 0 formals_rec_split_pred__rec__f__first__bit4))
(assert (< formals_rec_split_pred__rec__f__first__bit4 formals_rec_split_pred__rec__f__last__bit4))
(assert (<= 0 formals_rec_split_pred__rec__f__position4))
(declare-const formals_rec_split_pred__rec__g__first__bit4 Int)
(declare-const formals_rec_split_pred__rec__g__last__bit4 Int)
(declare-const formals_rec_split_pred__rec__g__position4 Int)
(assert (<= 0 formals_rec_split_pred__rec__g__first__bit4))
(assert (< formals_rec_split_pred__rec__g__first__bit4 formals_rec_split_pred__rec__g__last__bit4))
(assert (<= 0 formals_rec_split_pred__rec__g__position4))
(declare-const formals_rec_split_pred__rec__h__first__bit4 Int)
(declare-const formals_rec_split_pred__rec__h__last__bit4 Int)
(declare-const formals_rec_split_pred__rec__h__position4 Int)
(assert (<= 0 formals_rec_split_pred__rec__h__first__bit4))
(assert (< formals_rec_split_pred__rec__h__first__bit4 formals_rec_split_pred__rec__h__last__bit4))
(assert (<= 0 formals_rec_split_pred__rec__h__position4))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((t9b__ref (mk_t9b__ref (t9b__content us_rep)))))
(define-fun t9b__ref___projection ((a t9b__ref)) us_rep (t9b__content a))
(declare-const y__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range7 ((rec__formals_rec_split_pred__rec__d1 Bool) (a us_rep)) Bool (= rec__formals_rec_split_pred__rec__d1 (rec__formals_rec_split_pred__rec__d (us_split_discrs1 a))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const formals_rec_split_pred__rec__d__first__bit5 Int)
(declare-const formals_rec_split_pred__rec__d__last__bit5 Int)
(declare-const formals_rec_split_pred__rec__d__position5 Int)
(assert (<= 0 formals_rec_split_pred__rec__d__first__bit5))
(assert (< formals_rec_split_pred__rec__d__first__bit5 formals_rec_split_pred__rec__d__last__bit5))
(assert (<= 0 formals_rec_split_pred__rec__d__position5))
(declare-const formals_rec_split_pred__rec__f__first__bit5 Int)
(declare-const formals_rec_split_pred__rec__f__last__bit5 Int)
(declare-const formals_rec_split_pred__rec__f__position5 Int)
(assert (<= 0 formals_rec_split_pred__rec__f__first__bit5))
(assert (< formals_rec_split_pred__rec__f__first__bit5 formals_rec_split_pred__rec__f__last__bit5))
(assert (<= 0 formals_rec_split_pred__rec__f__position5))
(declare-const formals_rec_split_pred__rec__g__first__bit5 Int)
(declare-const formals_rec_split_pred__rec__g__last__bit5 Int)
(declare-const formals_rec_split_pred__rec__g__position5 Int)
(assert (<= 0 formals_rec_split_pred__rec__g__first__bit5))
(assert (< formals_rec_split_pred__rec__g__first__bit5 formals_rec_split_pred__rec__g__last__bit5))
(assert (<= 0 formals_rec_split_pred__rec__g__position5))
(declare-const formals_rec_split_pred__rec__h__first__bit5 Int)
(declare-const formals_rec_split_pred__rec__h__last__bit5 Int)
(declare-const formals_rec_split_pred__rec__h__position5 Int)
(assert (<= 0 formals_rec_split_pred__rec__h__first__bit5))
(assert (< formals_rec_split_pred__rec__h__first__bit5 formals_rec_split_pred__rec__h__last__bit5))
(assert (<= 0 formals_rec_split_pred__rec__h__position5))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((t10b__ref (mk_t10b__ref (t10b__content us_rep)))))
(define-fun t10b__ref___projection ((a t10b__ref)) us_rep (t10b__content a))
(declare-const u__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 1))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 integer)
(declare-const x__split_fields2 natural)
(declare-const y__split_fields integer)
(declare-const y__split_fields1 integer)
(declare-const y__split_fields2 natural)
(declare-const u__split_fields integer)
(declare-const u__split_fields1 integer)
(declare-const u__split_fields2 natural)
(declare-const formals_rec_split_pred__y__assume Bool)
(declare-const formals_rec_split_pred__y__assume1 integer)
(declare-const formals_rec_split_pred__y__assume2 integer)
(declare-const formals_rec_split_pred__y__assume3 natural)
(declare-const formals_rec_split_pred__u__assume Bool)
(declare-const formals_rec_split_pred__u__assume1 integer)
(declare-const formals_rec_split_pred__u__assume2 integer)
(declare-const formals_rec_split_pred__u__assume3 natural)
(declare-const formals_rec_split_pred__p__a__compl Bool)
(declare-const formals_rec_split_pred__p__a__compl1 integer)
(declare-const formals_rec_split_pred__p__a__compl2 integer)
(declare-const formals_rec_split_pred__p__a__compl3 natural)
(declare-const formals_rec_split_pred__p__a__compl4 Bool)
(declare-const formals_rec_split_pred__p__a__compl5 integer)
(declare-const formals_rec_split_pred__p__a__compl6 integer)
(declare-const formals_rec_split_pred__p__a__compl7 natural)
(declare-const result us_split_fields__ref)
(declare-const x__split_fields3 us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const y__split_fields3 us_split_fields)
(declare-const result2 us_split_fields__ref)
(declare-const u__split_fields3 us_split_fields)
(declare-const formals_rec_split_pred__p__a__fields us_split_fields)
(declare-const result3 us_split_fields__ref)
(declare-const x__split_fields4 us_split_fields)
(declare-const x__split_fields5 us_split_fields)
(declare-const formals_rec_split_pred__p__a__fields1 us_split_fields)
(declare-const result4 us_split_fields__ref)
(declare-const x__split_fields6 us_split_fields)
(assert (= result (mk___split_fields__ref (mk___split_fields x__split_fields x__split_fields1 x__split_fields2))))
(assert (= x__split_fields3 (mk___split_fields rliteral rliteral rliteral1)))
(assert (= x__split_discrs (mk___split_discrs (distinct 1 0))))
(assert (not (= (to_rep1 rliteral1) 0)))
(assert (= (distinct 1 0) formals_rec_split_pred__y__assume))
(assert (= rliteral formals_rec_split_pred__y__assume1))
(assert (= rliteral formals_rec_split_pred__y__assume2))
(assert (= rliteral1 formals_rec_split_pred__y__assume3))
(assert (= result1 (mk___split_fields__ref (mk___split_fields y__split_fields y__split_fields1 y__split_fields2))))
(assert (= y__split_fields3 (mk___split_fields formals_rec_split_pred__y__assume1 formals_rec_split_pred__y__assume2 formals_rec_split_pred__y__assume3)))
(assert (= y__split_discrs (mk___split_discrs formals_rec_split_pred__y__assume)))
(assert (and (= (distinct 1 0) (rec__formals_rec_split_pred__rec__d y__split_discrs)) (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h y__split_fields3)) 0))))
(assert (not (= (to_rep1 rliteral1) 0)))
(assert (= (distinct 1 0) formals_rec_split_pred__u__assume))
(assert (= rliteral formals_rec_split_pred__u__assume1))
(assert (= rliteral formals_rec_split_pred__u__assume2))
(assert (= rliteral1 formals_rec_split_pred__u__assume3))
(assert (= result2 (mk___split_fields__ref (mk___split_fields u__split_fields u__split_fields1 u__split_fields2))))
(assert (= u__split_fields3 (mk___split_fields formals_rec_split_pred__u__assume1 formals_rec_split_pred__u__assume2 formals_rec_split_pred__u__assume3)))
(assert (= u__split_discrs (mk___split_discrs formals_rec_split_pred__u__assume)))
(assert (and (= (distinct 1 0) (rec__formals_rec_split_pred__rec__d u__split_discrs)) (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h u__split_fields3)) 0))))
(assert (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h x__split_fields3)) 0)))
(assert (= x__split_discrs (mk___split_discrs formals_rec_split_pred__p__a__compl)))
(assert (= x__split_fields3 (mk___split_fields formals_rec_split_pred__p__a__compl1 formals_rec_split_pred__p__a__compl2 formals_rec_split_pred__p__a__compl3)))
(assert (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h formals_rec_split_pred__p__a__fields)) 0)))
(assert (= result3 (mk___split_fields__ref x__split_fields3)))
(assert (= x__split_fields4 formals_rec_split_pred__p__a__fields))
(assert (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h x__split_fields5)) 0)))
(assert (= x__split_discrs (mk___split_discrs formals_rec_split_pred__p__a__compl4)))
(assert (= x__split_fields5 (mk___split_fields formals_rec_split_pred__p__a__compl5 formals_rec_split_pred__p__a__compl6 formals_rec_split_pred__p__a__compl7)))
(assert (not (= (to_rep1 (rec__formals_rec_split_pred__rec__h formals_rec_split_pred__p__a__fields1)) 0)))
(assert (= result4 (mk___split_fields__ref x__split_fields5)))
(assert (= x__split_fields6 formals_rec_split_pred__p__a__fields1))
(assert (not (= (distinct 1 0) (rec__formals_rec_split_pred__rec__d x__split_discrs))))
(check-sat)
(exit)
