(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__assign_rec__pair__a : integer;
rec__assign_rec__pair__b : integer
}

function us_split_fields_A__projection(a: us_split_fields) : integer =
  (a).rec__assign_rec__pair__a

function us_split_fields_B__projection(a: us_split_fields) : integer =
  (a).rec__assign_rec__pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__assign_rec__pair__a) = to_rep(((b).us_split_fields1).rec__assign_rec__pair__a)) and
  (to_rep(((a).us_split_fields1).rec__assign_rec__pair__b) = to_rep(((b).us_split_fields1).rec__assign_rec__pair__b))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__assign_rec__pair__a) = to_rep(((b).us_split_fields1).rec__assign_rec__pair__a)) and
  (to_rep(((a).us_split_fields1).rec__assign_rec__pair__b) = to_rep(((b).us_split_fields1).rec__assign_rec__pair__b)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__assign_rec__pair__a = a;
  rec__assign_rec__pair__b = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__assign_rec__pair__a = a;
  rec__assign_rec__pair__b = a1 } })))

logic assign_rec__pair__a__first__bit : int

logic assign_rec__pair__a__last__bit : int

logic assign_rec__pair__a__position : int

axiom assign_rec__pair__a__first__bit_axiom :
  (0 <= assign_rec__pair__a__first__bit)

axiom assign_rec__pair__a__last__bit_axiom :
  (assign_rec__pair__a__first__bit <  assign_rec__pair__a__last__bit)

axiom assign_rec__pair__a__position_axiom :
  (0 <= assign_rec__pair__a__position)

logic assign_rec__pair__b__first__bit : int

logic assign_rec__pair__b__last__bit : int

logic assign_rec__pair__b__position : int

axiom assign_rec__pair__b__first__bit_axiom :
  (0 <= assign_rec__pair__b__first__bit)

axiom assign_rec__pair__b__last__bit_axiom :
  (assign_rec__pair__b__first__bit <  assign_rec__pair__b__last__bit)

axiom assign_rec__pair__b__position_axiom :
  (0 <= assign_rec__pair__b__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type pair__ref = { pair__content : us_rep
}

function pair__ref___projection(a: pair__ref) : us_rep = (a).pair__content

type us_split_fields2 = { rec__assign_rec__rec__c : integer;
rec__assign_rec__rec__d : us_rep
}

function us_split_fields_C__projection(a: us_split_fields2) : integer =
  (a).rec__assign_rec__rec__c

function us_split_fields_D__projection(a: us_split_fields2) : us_rep =
  (a).rec__assign_rec__rec__d

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__assign_rec__rec__c) = to_rep(((b).us_split_fields3).rec__assign_rec__rec__c)) and
  (bool_eq2(((a).us_split_fields3).rec__assign_rec__rec__d,
  ((b).us_split_fields3).rec__assign_rec__rec__d) = true)) -> (bool_eq3(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__assign_rec__rec__c) = to_rep(((b).us_split_fields3).rec__assign_rec__rec__c)) and
  (bool_eq2(((a).us_split_fields3).rec__assign_rec__rec__d,
  ((b).us_split_fields3).rec__assign_rec__rec__d) = true))) -> (bool_eq3(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer.
  (0 <= object__size1({ us_split_fields3 = { rec__assign_rec__rec__c = a;
  rec__assign_rec__rec__d = { us_split_fields1 = { rec__assign_rec__pair__a =
  a1; rec__assign_rec__pair__b = a2 } } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer.
  (0 <= object__alignment1({ us_split_fields3 = { rec__assign_rec__rec__c =
  a; rec__assign_rec__rec__d = { us_split_fields1 = {
  rec__assign_rec__pair__a = a1; rec__assign_rec__pair__b = a2 } } } })))

logic assign_rec__rec__c__first__bit : int

logic assign_rec__rec__c__last__bit : int

logic assign_rec__rec__c__position : int

axiom assign_rec__rec__c__first__bit_axiom :
  (0 <= assign_rec__rec__c__first__bit)

axiom assign_rec__rec__c__last__bit_axiom :
  (assign_rec__rec__c__first__bit <  assign_rec__rec__c__last__bit)

axiom assign_rec__rec__c__position_axiom :
  (0 <= assign_rec__rec__c__position)

logic assign_rec__rec__d__first__bit : int

logic assign_rec__rec__d__last__bit : int

logic assign_rec__rec__d__position : int

axiom assign_rec__rec__d__first__bit_axiom :
  (0 <= assign_rec__rec__d__first__bit)

axiom assign_rec__rec__d__last__bit_axiom :
  (assign_rec__rec__d__first__bit <  assign_rec__rec__d__last__bit)

axiom assign_rec__rec__d__position_axiom :
  (0 <= assign_rec__rec__d__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : integer

type rec____ref = { rec____content : us_rep1
}

function rec____ref___projection(a: rec____ref) : us_rep1 =
  (a).rec____content

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x__split_fields : integer

logic x__split_fields1 : integer

logic x__split_fields2 : integer

logic o : int

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic o4 : integer

logic temp___151 : integer

logic temp___1511 : integer

logic temp___1512 : integer

logic result : integer

logic result1 : integer

logic result2 : integer

logic x__split_fields3 : integer

logic x__split_fields4 : integer

logic x__split_fields5 : integer

axiom H : in_range(y)

axiom H1 : ((o = (y * 1000000)) and in_range((y * 1000000)))

axiom H2 : (to_rep(o1) = o)

axiom H3 : (o1 = o2)

axiom H4 : (x__split_fields1 = o3)

axiom H5 : (x__split_fields2 = o4)

axiom H6 : (temp___151 = o2)

axiom H7 : (temp___1511 = o3)

axiom H8 : (temp___1512 = o4)

axiom H9 : (result = x__split_fields)

axiom H10 : (result1 = x__split_fields1)

axiom H11 : (result2 = x__split_fields2)

axiom H12 : (x__split_fields3 = temp___151)

axiom H13 : (x__split_fields4 = temp___1511)

axiom H14 : (x__split_fields5 = temp___1512)

 (* File "bad_assign_rec.adb", line 2, characters 0-0 *)
goal WP_parameter_def : (not (1000000 = 0))
