(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall ao:int. forall an:int. forall bn:int. forall a__pgcd__result:int.
  forall temp___134:int. forall temp___133:int. forall temp___132:int.
  forall temp___135:int. forall o:int. forall o1:int. forall o2:bool.
  forall ao1:int. forall result:int. forall an1:int. forall result1:int.
  forall bn1:int. forall ao2:int. forall an2:int. forall bn2:int.
  forall temp___1351:int. forall result2:int. forall temp___1352:int.
  forall result3:int. forall ao3:int. forall result4:int. forall an3:int.
  forall result5:int. forall bn3:int. forall ao4:int. forall an4:int.
  forall bn4:int. forall ao5:int. forall an5:int. forall bn5:int.
  forall ao6:int. forall an6:int. forall bn6:int. forall ao7:int.
  forall an7:int. forall bn7:int. forall result6:int.
  forall a__pgcd__result1:int. forall a__pgcd__result2:int.
  forall a__pgcd__result3:int. forall ao8:int. forall an8:int.
  forall bn8:int. forall a__pgcd__result4:int. forall ao9:int.
  forall an9:int. forall bn9:int. forall a__pgcd__result5:int.
  forall result7:bool. (in_range1(a) -> (in_range1(b) ->
  (((not (a = (-2147483648))) and (not (b = (-2147483648)))) ->
  ((((((-2147483648) <= 2147483647) -> in_range1(ao)) and ((({ int__content =
  result } = { int__content = an }) and (an1 = a)) and (in_range1(an1) and
  ((({ int__content = result1 } = { int__content = bn }) and (bn1 = b)) and
  (in_range1(bn1) and ((((not (bn1 = 0)) and ((((temp___134 = bn1) and
  ((temp___133 = an1) and ((temp___132 = ao) and ((0 = temp___135) and
  (((((not (an2 = (-2147483648))) and (not (bn2 = (-2147483648)))) and
  ((abs_int(an2) <= abs_int(a)) or (abs_int(an2) <= abs_int(b)))) and
  ((abs_int(bn2) <= abs_int(a)) or (abs_int(bn2) <= abs_int(b)))) and
  (((((((-2147483648) <= 2147483647) -> in_range1(ao2)) and
  (((-2147483648) <= 2147483647) -> in_range1(an2))) and
  (((-2147483648) <= 2147483647) -> in_range1(bn2))) and (not (bn2 = 0))) and
  (((temp___1351 = result2) and (temp___1352 = bn2)) and
  (((ao2 = result3) and (ao3 = an2)) and (((an2 = result4) and
  (an3 = bn2)) and (((bn2 = result5) and (bn3 = comp_mod(ao3,bn2))) and
  (bn3 = 0))))))))))) and (((bn3 = bn4) and ((an3 = an4) and
  (ao3 = ao4))) and ((bn5 = bn3) and ((an5 = an3) and (ao5 = ao3))))) and
  ((({ int__content = bn6 } = { int__content = bn4 }) and (({ int__content =
  an6 } = { int__content = an4 }) and ({ int__content = ao6 } = {
  int__content = ao4 }))) and ((bn7 = bn5) and ((an7 = an5) and
  (ao7 = ao5)))))) or ((bn1 = 0) and (((bn1 = bn6) and ((an1 = an6) and ({
  int__content = ao6 } = { int__content = ao }))) and ((bn7 = bn1) and
  ((an7 = an1) and (ao7 = ao1)))))) and
  (((a__pgcd__result1 = a__pgcd__result2) and
  (a__pgcd__result3 = a__pgcd__result1)) and (((o = abs_int(an6)) and
  in_range1(abs_int(an6))) and ((result6 = a__pgcd__result) and
  (a__pgcd__result1 = o)))))))))) and ((({ int__content = a__pgcd__result4
  } = { int__content = a__pgcd__result2 }) and ((bn8 = bn6) and
  ((an8 = an6) and (ao8 = ao6)))) and
  ((a__pgcd__result5 = a__pgcd__result3) and ((bn9 = bn7) and
  ((an9 = an7) and (ao9 = ao7)))))) -> ((((a__pgcd__result4 = 0) and
  (result7 = true)) or ((not (a__pgcd__result4 = 0)) and
  ((((o1 = abs_int(a)) and in_range1(abs_int(a))) and
  (((a__pgcd__result4 <= o1) and (o2 = true)) or
  ((not (a__pgcd__result4 <= o1)) and (o2 = false)))) and
  (((1 <= a__pgcd__result4) and (result7 = o2)) or
  ((not (1 <= a__pgcd__result4)) and (result7 = false)))))) ->
  ((not (result7 = true)) -> in_range1(abs_int(b)))))))))
