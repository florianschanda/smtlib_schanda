(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort positive 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range temp___expr_46)))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x1 Int) (y1 Int)) (=> (not (= y1 0)) (= x1 (+ (* y1 (div1 x1 y1)) (mod1 x1 y1))))))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= 0 x1) (< 0 y1)) (and (<= 0 (div1 x1 y1)) (<= (div1 x1 y1) x1)))))
(assert (forall ((x1 Int) (y1 Int)) (=> (not (= y1 0)) (and (< (- (abs y1)) (mod1 x1 y1)) (< (mod1 x1 y1) (abs y1))))))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= 0 x1) (< 0 y1)) (<= 0 (div1 x1 y1)))))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= x1 0) (< 0 y1)) (<= (div1 x1 y1) 0))))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= 0 x1) (not (= y1 0))) (<= 0 (mod1 x1 y1)))))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= x1 0) (not (= y1 0))) (<= (mod1 x1 y1) 0))))
(assert (forall ((x1 Int) (y1 Int)) (=> (not (= y1 0)) (<= (abs (* (div1 x1 y1) y1)) (abs x1)))))
(assert (forall ((x1 Int)) (= (div1 x1 1) x1)))
(assert (forall ((x1 Int)) (= (mod1 x1 1) 0)))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= 0 x1) (< x1 y1)) (= (div1 x1 y1) 0))))
(assert (forall ((x1 Int) (y1 Int)) (=> (and (<= 0 x1) (< x1 y1)) (= (mod1 x1 y1) x1))))
(assert (forall ((x1 Int) (y1 Int) (z Int)) (! (=> (and (< 0 x1) (and (<= 0 y1) (<= 0 z))) (= (div1 (+ (* x1 y1) z) x1) (+ y1 (div1 z x1)))) :pattern ((div1 (+ (* x1 y1) z) x1)))))
(assert (forall ((x1 Int) (y1 Int) (z Int)) (! (=> (and (< 0 x1) (and (<= 0 y1) (<= 0 z))) (= (mod1 (+ (* x1 y1) z) x1) (mod1 z x1))) :pattern ((mod1 (+ (* x1 y1) z) x1)))))
(define-fun mod2 ((x1 Int) (y1 Int)) Int (ite (< 0 y1) (mod x1 y1) (+ (mod x1 y1) y1)))
(declare-sort integer 0)
(define-fun in_range1 ((x1 Int)) Bool (and (<= (- 2147483648) x1) (<= x1 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun prop__ (Int) Bool)
(declare-fun prop____function_guard (Bool Int) Bool)
(assert true)
(assert (forall ((x1 Int)) (! (= (= (prop__ x1) true) (not (= (mod2 10 x1) 0))) :pattern ((prop__ x1)))))
(declare-sort ttB 0)
(define-fun in_range2 ((x1 Int)) Bool (and (<= (- 2147483648) x1) (<= x1 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (ttB ttB) Bool)
(declare-const dummy2 ttB)
(declare-datatypes () ((ttB__ref (mk_ttB__ref (ttB__content ttB)))))
(define-fun ttB__ref___projection ((a ttB__ref)) ttB (ttB__content a))
(declare-fun to_rep (ttB) Int)
(declare-fun of_rep (Int) ttB)
(assert (forall ((x1 ttB)) (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)))))
(assert (forall ((x1 ttB)) (! (in_range2 (to_rep x1)) :pattern ((to_rep x1)))))
(assert (forall ((x1 Int)) (! (=> (in_range2 x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep (of_rep x1))))))
(declare-const first Int)
(declare-const last Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (ttB ttB) Bool)
(declare-const dummy3 ttB)
(declare-datatypes () ((t__ref (mk_t__ref (t__content ttB)))))
(define-fun t__ref___projection ((a t__ref)) ttB (t__content a))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (and (=> (or (= temp___is_init_155 true) (<= first last)) (dynamic_property first last temp___expr_159)) (=> (= temp___do_toplevel_157 true) (=> (= temp___is_init_155 true) (= (prop__ temp___expr_159) true)))))
(define-fun dynamic_predicate ((temp___163 Int)) Bool (= (prop__ temp___163) true))
(assert (= first x))
(assert (= last y))
(declare-const i5b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(assert (in_range x))
(assert (in_range y))
(assert (dynamic_invariant2 i5b true false false true))
(assert (not (not (= i5b 0))))
(check-sat)
(exit)
