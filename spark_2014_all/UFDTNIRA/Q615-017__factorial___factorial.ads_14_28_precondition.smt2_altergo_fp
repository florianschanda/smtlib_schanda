(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic mathematical_factorial : int -> int

logic mathematical_factorial__function_guard : int, int -> prop

axiom mathematical_factorial__def_axiom :
  (forall x:int [mathematical_factorial(x)]. (in_range1(x) -> (((x <= 1) ->
  (mathematical_factorial(x) = 1)) and ((not (x <= 1)) ->
  (mathematical_factorial(x) = (x * mathematical_factorial((x - 1))))))))

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x1:integer [to_rep(x1)]. (of_rep(to_rep(x1)) = x1))

axiom range_axiom : (forall x1:integer [to_rep(x1)]. in_range1(to_rep(x1)))

axiom coerce_axiom :
  (forall x1:int [to_rep(of_rep(x1))]. (in_range1(x1) ->
  (to_rep(of_rep(x1)) = x1)))

predicate dynamic_property(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x1:int. forall y:int [bool_eq3(x1, y)]. (((x1 = y) -> (bool_eq3(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq3(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref___projection(a: t2b__ref) : integer = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic result__ : int

logic i : int

logic factorial__fact__result : int

logic temp___133 : int

logic temp___132 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic result : int

logic result__1 : int

logic result1 : int

logic i1 : int

logic result2 : int

logic result__2 : int

logic result__3 : int

logic i2 : int

logic result3 : int

logic i3 : int

logic result4 : int

logic result__4 : int

logic result__5 : int

logic i4 : int

logic result__6 : int

logic i5 : int

logic result__7 : int

logic i6 : int

logic result__8 : int

logic i7 : int

logic result__9 : int

logic i8 : int

logic result__10 : int

logic i9 : int

logic result5 : int

logic factorial__fact__result1 : int

logic result__11 : int

logic i10 : int

logic factorial__fact__result2 : int

logic result__12 : int

logic i11 : int

logic factorial__fact__result3 : int

logic result__13 : int

logic i12 : int

logic factorial__fact__result4 : int

logic result__14 : int

logic i13 : int

logic factorial__fact__result5 : int

axiom H : in_range1(x)

axiom H1 : ((1 <= x) and (x <= 12))

axiom H2 : (factorial__fact__result1 = factorial__fact__result2)

axiom H3 : (i10 = i8)

axiom H4 : (result__11 = result__9)

axiom H5 : (factorial__fact__result3 = factorial__fact__result1)

axiom H6 : (i11 = i9)

axiom H7 : (result__12 = result__10)

axiom H8 : (((- 2147483648) <= 2147483647) -> in_range1(result__))

axiom H9 : (result = result__)

axiom H10 : (result__1 = 1)

axiom H11 : (result1 = i)

axiom H12 : (i1 = 2)

axiom H13 : (((2 <= i1) and (i1 <= x)) -> (((temp___133 = i1) and
  ((temp___132 = result__1) and ((((o = (result__1 * i1)) and
  in_range1((result__1 * i1))) and ((result__1 = result2) and
  (result__2 = o))) and ((result__3 = mathematical_factorial(i2)) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(result__3)) and
  ((2 <= x) -> dynamic_property(2, x, i2))) and ((2 <= i2) and
  (i2 <= x))) and (i2 = x)))))) and (((i2 = i6) and
  (result__3 = result__7)) and ((i7 = i2) and (result__8 = result__3)))))

axiom H14 : (((2 <= i1) and (i1 <= x)) -> (i8 = i6))

axiom H15 : (((2 <= i1) and (i1 <= x)) -> (result__9 = result__7))

axiom H16 : (((2 <= i1) and (i1 <= x)) -> (i9 = i7))

axiom H17 : (((2 <= i1) and (i1 <= x)) -> (result__10 = result__8))

axiom H18 : ((not ((2 <= i1) and (i1 <= x))) -> (i1 = i8))

axiom H19 : ((not ((2 <= i1) and (i1 <= x))) -> (result__1 = result__9))

axiom H20 : ((not ((2 <= i1) and (i1 <= x))) -> (i9 = i1))

axiom H21 : ((not ((2 <= i1) and (i1 <= x))) -> (result__10 = result__1))

axiom H22 : (result5 = factorial__fact__result)

axiom H23 : (factorial__fact__result1 = result__9)

axiom H24 : (factorial__fact__result4 = factorial__fact__result2)

axiom H25 : (i12 = i10)

axiom H26 : (result__13 = result__11)

axiom H27 : (factorial__fact__result5 = factorial__fact__result3)

axiom H28 : (i13 = i11)

axiom H29 : (result__14 = result__12)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (1 <= x)
