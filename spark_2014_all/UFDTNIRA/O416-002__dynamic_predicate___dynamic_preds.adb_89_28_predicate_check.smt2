(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-sort even 0)
(declare-fun evenqtint (even) Int)
(assert (forall ((i even)) (and (<= (- 2147483648) (evenqtint i)) (<= (evenqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (even even) Bool)
(declare-const dummy1 even)
(declare-datatypes () ((even__ref (mk_even__ref (even__content even)))))
(define-fun even__ref___projection ((a even__ref)) even (even__content a))
(define-fun to_rep ((x even)) Int (evenqtint x))
(declare-fun of_rep (Int) even)
(assert (forall ((x even)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x even)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dynamic_preds__even_pair__a even) (rec__dynamic_preds__even_pair__b even)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) even (rec__dynamic_preds__even_pair__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) even (rec__dynamic_preds__even_pair__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__dynamic_preds__even_pair__a (us_split_fields1 a))) (to_rep (rec__dynamic_preds__even_pair__a (us_split_fields1 b)))) (= (to_rep (rec__dynamic_preds__even_pair__b (us_split_fields1 a))) (to_rep (rec__dynamic_preds__even_pair__b (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dynamic_preds__even_pair__a__first__bit Int)
(declare-const dynamic_preds__even_pair__a__last__bit Int)
(declare-const dynamic_preds__even_pair__a__position Int)
(assert (<= 0 dynamic_preds__even_pair__a__first__bit))
(assert (< dynamic_preds__even_pair__a__first__bit dynamic_preds__even_pair__a__last__bit))
(assert (<= 0 dynamic_preds__even_pair__a__position))
(declare-const dynamic_preds__even_pair__b__first__bit Int)
(declare-const dynamic_preds__even_pair__b__last__bit Int)
(declare-const dynamic_preds__even_pair__b__position Int)
(assert (<= 0 dynamic_preds__even_pair__b__first__bit))
(assert (< dynamic_preds__even_pair__b__first__bit dynamic_preds__even_pair__b__last__bit))
(assert (<= 0 dynamic_preds__even_pair__b__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((even_pair__ref (mk_even_pair__ref (even_pair__content us_rep)))))
(define-fun even_pair__ref___projection ((a even_pair__ref)) us_rep (even_pair__content a))
(declare-datatypes () ((even_close_pair__ref (mk_even_close_pair__ref (even_close_pair__content us_rep)))))
(define-fun even_close_pair__ref___projection ((a even_close_pair__ref)) us_rep (even_close_pair__content a))
(define-fun dynamic_invariant1 ((temp___expr_168 us_rep) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool (and (=> (= temp___is_init_164 true) (= (mod2 (to_rep (rec__dynamic_preds__even_pair__a (us_split_fields1 temp___expr_168))) 2) 0)) (=> (= temp___is_init_164 true) (= (mod2 (to_rep (rec__dynamic_preds__even_pair__b (us_split_fields1 temp___expr_168))) 2) 0))))
(define-fun dynamic_invariant2 ((temp___expr_200 us_rep) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (and (=> (= temp___do_toplevel_198 true) (=> (= temp___is_init_196 true) (= (to_rep (rec__dynamic_preds__even_pair__b (us_split_fields1 temp___expr_200))) (+ (to_rep (rec__dynamic_preds__even_pair__a (us_split_fields1 temp___expr_200))) 2)))) (and (=> (= temp___is_init_196 true) (= (mod2 (to_rep (rec__dynamic_preds__even_pair__a (us_split_fields1 temp___expr_200))) 2) 0)) (=> (= temp___is_init_196 true) (= (mod2 (to_rep (rec__dynamic_preds__even_pair__b (us_split_fields1 temp___expr_200))) 2) 0)))))
(define-fun dynamic_predicate ((temp___208 us_rep)) Bool (= (to_rep (rec__dynamic_preds__even_pair__b (us_split_fields1 temp___208))) (+ (to_rep (rec__dynamic_preds__even_pair__a (us_split_fields1 temp___208))) 2)))
(declare-const above Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant3 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (and (=> (or (= temp___is_init_154 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_158)) (=> (= temp___do_toplevel_156 true) (=> (= temp___is_init_154 true) (= (mod2 temp___expr_158 2) 0)))))
(define-fun dynamic_predicate1 ((temp___162 Int)) Bool (= (mod2 temp___162 2) 0))
(declare-const result____split_fields even)
(declare-const result____split_fields1 even)
(declare-const temp___282 Int)
(assert (in_range above))
(assert (dynamic_invariant1 (mk___rep (mk___split_fields result____split_fields result____split_fields1)) false false true true))
(assert (not (= (mod2 above 2) 0)))
(assert (and (= temp___282 (+ above 1)) (in_range (+ above 1))))
(assert (not (= (mod2 temp___282 2) 0)))
(check-sat)
(exit)
