(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const result__ Int)
(declare-const i Int)
(declare-const j Int)
(declare-const totalsum Int)
(declare-const innersum Int)
(declare-const temp___577 Int)
(declare-const temp___576 Int)
(declare-const temp___575 Int)
(declare-const temp___574 Int)
(declare-const temp___573 Int)
(declare-const temp___572 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 Int)
(declare-const totalsum1 Int)
(declare-const result3 Int)
(declare-const innersum1 Int)
(declare-const i2 Int)
(declare-const j2 Int)
(declare-const totalsum2 Int)
(declare-const innersum2 Int)
(declare-const result4 Int)
(declare-const innersum3 Int)
(declare-const result5 Int)
(declare-const j3 Int)
(declare-const j4 Int)
(declare-const innersum4 Int)
(declare-const result6 Int)
(declare-const innersum5 Int)
(declare-const result7 Int)
(declare-const j5 Int)
(declare-const j6 Int)
(declare-const innersum6 Int)
(declare-const j7 Int)
(declare-const innersum7 Int)
(declare-const j8 Int)
(declare-const innersum8 Int)
(declare-const j9 Int)
(declare-const innersum9 Int)
(declare-const result8 Int)
(declare-const totalsum3 Int)
(declare-const result9 Int)
(declare-const i3 Int)
(declare-const i4 int__ref)
(declare-const j10 int__ref)
(declare-const totalsum4 int__ref)
(declare-const innersum10 int__ref)
(declare-const i5 Int)
(declare-const j11 Int)
(declare-const totalsum5 Int)
(declare-const innersum11 Int)
(declare-const i6 int__ref)
(declare-const j12 int__ref)
(declare-const totalsum6 int__ref)
(declare-const innersum12 int__ref)
(declare-const i7 Int)
(declare-const j13 Int)
(declare-const totalsum7 Int)
(declare-const innersum13 Int)
(define-fun innersum14 () int__ref (mk_int__ref innersum8))
(define-fun j14 () int__ref (mk_int__ref j8))
(assert (in_range3 n))
(assert (=> (<= 1 2147483647) (in_range3 result__)))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (in_range3 i1))
(assert (= (mk_int__ref result1) (mk_int__ref j)))
(assert (= j1 1))
(assert (in_range3 j1))
(assert (= (mk_int__ref result2) (mk_int__ref totalsum)))
(assert (= totalsum1 0))
(assert (in_range2 totalsum1))
(assert (= (mk_int__ref result3) (mk_int__ref innersum)))
(assert (= innersum1 0))
(assert (in_range2 innersum1))
(assert (=> (<= i1 n) (= temp___577 totalsum1)))
(assert (=> (<= i1 n) (= temp___576 j1)))
(assert (=> (<= i1 n) (= temp___575 i1)))
(assert (=> (<= i1 n) (= temp___574 innersum1)))
(assert (=> (<= i1 n) (= (* 6 totalsum2) (* (* (- i2 1) i2) (+ i2 1)))))
(assert (=> (<= i1 n) (and (and (and (and (=> (<= 0 2147483647) (in_range2 innersum2)) (=> (<= 1 2147483647) (in_range3 i2))) (=> (<= 1 2147483647) (in_range3 j2))) (=> (<= 0 2147483647) (in_range2 totalsum2))) (<= i2 n))))
(assert (=> (<= i1 n) (= innersum2 result4)))
(assert (=> (<= i1 n) (= innersum3 0)))
(assert (=> (<= i1 n) (= j2 result5)))
(assert (=> (<= i1 n) (= j3 1)))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= temp___573 j3))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= temp___572 innersum3))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= (* 2 innersum4) (* j4 (- j4 1))))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (and (and (=> (<= 0 2147483647) (in_range2 innersum4)) (=> (<= 1 2147483647) (in_range3 j4))) (<= j4 i2)))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (and (= o (+ innersum4 j4)) (in_range1 (+ innersum4 j4))))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= innersum4 result6))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= innersum5 o))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (and (= o1 (+ j4 1)) (in_range1 (+ j4 1))))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= j4 result7))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= j5 o1))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (not (<= j5 i2)))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= innersum5 innersum6))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= j5 j6))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= innersum7 innersum5))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= j7 j5))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= innersum14 (mk_int__ref innersum6)))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= j14 (mk_int__ref j6)))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= innersum9 innersum7))))
(assert (=> (<= i1 n) (=> (<= j3 i2) (= j9 j7))))
(assert (=> (<= i1 n) (=> (not (<= j3 i2)) (= innersum3 innersum8))))
(assert (=> (<= i1 n) (=> (not (<= j3 i2)) (= j3 j8))))
(assert (=> (<= i1 n) (=> (not (<= j3 i2)) (= innersum9 innersum3))))
(assert (=> (<= i1 n) (=> (not (<= j3 i2)) (= j9 j3))))
(assert (=> (<= i1 n) (= j8 (+ i2 1))))
(assert (=> (<= i1 n) (= (* 2 innersum8) (* i2 (+ i2 1)))))
(assert (=> (<= i1 n) (and (= o2 (+ totalsum2 innersum8)) (in_range1 (+ totalsum2 innersum8)))))
(assert (=> (<= i1 n) (= totalsum2 result8)))
(assert (=> (<= i1 n) (= totalsum3 o2)))
(assert (=> (<= i1 n) (and (= o3 (+ i2 1)) (in_range1 (+ i2 1)))))
(assert (=> (<= i1 n) (= i2 result9)))
(assert (=> (<= i1 n) (= i3 o3)))
(assert (=> (<= i1 n) (not (<= i3 n))))
(assert (=> (<= i1 n) (= innersum10 innersum14)))
(assert (=> (<= i1 n) (= totalsum4 (mk_int__ref totalsum3))))
(assert (=> (<= i1 n) (= j10 j14)))
(assert (=> (<= i1 n) (= i4 (mk_int__ref i3))))
(assert (=> (<= i1 n) (= innersum11 innersum9)))
(assert (=> (<= i1 n) (= totalsum5 totalsum3)))
(assert (=> (<= i1 n) (= j11 j9)))
(assert (=> (<= i1 n) (= i5 i3)))
(assert (=> (<= i1 n) (= innersum12 innersum10)))
(assert (=> (<= i1 n) (= totalsum6 totalsum4)))
(assert (=> (<= i1 n) (= j12 j10)))
(assert (=> (<= i1 n) (= i6 i4)))
(assert (=> (<= i1 n) (= innersum13 innersum11)))
(assert (=> (<= i1 n) (= totalsum7 totalsum5)))
(assert (=> (<= i1 n) (= j13 j11)))
(assert (=> (<= i1 n) (= i7 i5)))
(assert (=> (not (<= i1 n)) (= innersum12 (mk_int__ref innersum1))))
(assert (=> (not (<= i1 n)) (= totalsum6 (mk_int__ref totalsum1))))
(assert (=> (not (<= i1 n)) (= j12 (mk_int__ref j1))))
(assert (=> (not (<= i1 n)) (= i6 (mk_int__ref i1))))
(assert (=> (not (<= i1 n)) (= innersum13 innersum1)))
(assert (=> (not (<= i1 n)) (= totalsum7 totalsum1)))
(assert (=> (not (<= i1 n)) (= j13 j1)))
(assert (=> (not (<= i1 n)) (= i7 i1)))
(assert (= (* 6 (int__content totalsum6)) (* (* n (+ n 1)) (+ n 2))))
(assert (not (in_range3 (int__content totalsum6))))
(check-sat)
(exit)
