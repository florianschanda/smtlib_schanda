(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort duration 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-const dummy duration)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun to_fixed (duration) Int)
(declare-fun of_fixed (Int) duration)
(declare-fun user_eq (duration duration) Bool)
(define-fun pos_div_relation ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-fun fxp_mult (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (or (= x 0) (= y 0)) (= (fxp_mult x y) 0) (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0))) (pos_div_relation (fxp_mult x y) (* x y) 1000000000) (pos_div_relation (- (fxp_mult x y)) (- (* x y)) 1000000000))) :pattern ((fxp_mult x y))))))
(declare-fun fxp_div (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div x y) (* x 1000000000) y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div x y) (* (- x) 1000000000) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div x y)) (* (- x) 1000000000) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div x y)) (* x 1000000000) (- y))))))) :pattern ((fxp_div x y))))))
(declare-fun fxp_div_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int x y)) x (- y))))))) :pattern ((fxp_div_int x y))))))
(declare-fun fxp_div_result_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int x y)) x (- y))))))) :pattern ((fxp_div_result_int x y))))))
(declare-fun to_int1 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int1 x) 0) (ite (< 0 x) (pos_div_relation (to_int1 x) x 1000000000) (pos_div_relation (- (to_int1 x)) (- x) 1000000000))) :pattern ((to_int1 x)))))
(declare-fun of_real (Real) Int)
(assert (forall ((x duration)) (! (= (of_fixed (to_fixed x)) x) :pattern ((to_fixed x)))))
(assert (forall ((x duration)) (in_range1 (to_fixed x))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_fixed (of_fixed x)) x)) :pattern ((to_fixed (of_fixed x))))))
(declare-datatypes () ((duration__ref (mk_duration__ref (duration__content duration)))))
(define-fun duration__ref___projection ((a duration__ref)) duration (duration__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((time_span__ref (mk_time_span__ref (time_span__content us_rep)))))
(define-fun time_span__ref___projection ((a time_span__ref)) us_rep (time_span__content a))
(declare-sort tseconds_countB 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (tseconds_countB tseconds_countB) Bool)
(declare-const dummy2 tseconds_countB)
(declare-datatypes () ((tseconds_countB__ref (mk_tseconds_countB__ref (tseconds_countB__content tseconds_countB)))))
(define-fun tseconds_countB__ref___projection ((a tseconds_countB__ref)) tseconds_countB (tseconds_countB__content a))
(declare-sort seconds_count 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (seconds_count seconds_count) Bool)
(declare-const dummy3 seconds_count)
(declare-datatypes () ((seconds_count__ref (mk_seconds_count__ref (seconds_count__content seconds_count)))))
(define-fun seconds_count__ref___projection ((a seconds_count__ref)) seconds_count (seconds_count__content a))
(define-fun dynamic_invariant ((temp___expr_179 Int) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (=> (or (= temp___is_init_175 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range3 temp___expr_179)))
(declare-fun ts_fraction (us_rep) duration)
(declare-fun ts_fraction__function_guard (duration us_rep) Bool)
(declare-fun to_duration__2 (us_rep) duration)
(declare-fun to_duration__2__function_guard (duration us_rep) Bool)
(declare-fun ts_sc (us_rep) Int)
(declare-fun ts_sc__function_guard (Int us_rep) Bool)
(assert (forall ((ts us_rep)) (! (= (ts_fraction ts) (of_fixed (- (to_fixed (to_duration__2 ts)) (to_fixed (of_fixed (* (ts_sc ts) 1000000000)))))) :pattern ((ts_fraction ts)))))
(declare-fun result_sc (Int us_rep) Int)
(declare-fun result_sc__function_guard (Int Int us_rep) Bool)
(assert (forall ((sc Int)) (forall ((ts us_rep)) (! (=> (dynamic_invariant sc true true true true) (= (result_sc sc ts) (+ sc (ts_sc ts)))) :pattern ((result_sc sc ts))))))
(declare-const sc Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const ts us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert (forall ((ts1 us_rep)) (! (= (ts_sc ts1) (to_int1 (to_fixed (to_duration__2 ts1)))) :pattern ((ts_sc ts1)))))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 duration)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const o12 Bool)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Bool)
(declare-const o16 Bool)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(assert (in_range3 sc))
(assert (and (= o14 (* 3 9223372036)) (in_range2 (* 3 9223372036))))
(assert (= o15 (ite (<= sc o14) true false)))
(assert (and (= o13 (* 3 (- 9223372036))) (in_range2 (* 3 (- 9223372036)))))
(assert (= o16 (ite (<= o13 sc) true false)))
(assert (= result (ite (= o16 true) o15 false)))
(assert (= result true))
(assert (and (= o9 (+ 9223372036 1)) (in_range2 (+ 9223372036 1))))
(assert (and (= o10 (result_sc sc ts)) (and (in_range3 o10) (= o10 (+ sc (ts_sc ts))))))
(assert (= o11 (ite (<= o10 o9) true false)))
(assert (and (= o7 (result_sc sc ts)) (and (in_range3 o7) (= o7 (+ sc (ts_sc ts))))))
(assert (and (= o8 (- (- 9223372036) 1)) (in_range2 (- (- 9223372036) 1))))
(assert (= o12 (ite (<= o8 o7) true false)))
(assert (= result1 (ite (= o12 true) o11 false)))
(assert (= result1 true))
(assert (and (= o (result_sc sc ts)) (and (in_range3 o) (= o (+ sc (ts_sc ts))))))
(assert (= result2 (ite (< 0 o) true false)))
(assert (= result2 true))
(assert (and (= o5 (ts_fraction ts)) (= o5 (of_fixed (- (to_fixed (to_duration__2 ts)) (to_fixed (of_fixed (* (ts_sc ts) 1000000000))))))))
(assert (= o6 (to_fixed o5)))
(assert (and (= o1 (result_sc sc ts)) (and (in_range3 o1) (= o1 (+ sc (ts_sc ts))))))
(assert (= o2 (- o1 10)))
(assert (and (= o3 o2) (in_range2 o2)))
(assert (= o4 (* o3 1000000000)))
(assert (not (in_range1 o4)))
(check-sat)
(exit)
