(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type gender_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : gender_type, gender_type -> bool

logic dummy : gender_type

type gender_type__ref = { gender_type__content : gender_type
}

function gender_type__ref___projection(a: gender_type__ref) : gender_type =
  (a).gender_type__content

logic to_rep : gender_type -> int

logic of_rep : int -> gender_type

axiom inversion_axiom :
  (forall x:gender_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:gender_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type meal_plan_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : meal_plan_type, meal_plan_type -> bool

logic dummy1 : meal_plan_type

type meal_plan_type__ref = { meal_plan_type__content : meal_plan_type
}

function meal_plan_type__ref___projection(a: meal_plan_type__ref) : meal_plan_type =
  (a).meal_plan_type__content

logic to_rep1 : meal_plan_type -> int

logic of_rep1 : int -> meal_plan_type

axiom inversion_axiom1 :
  (forall x:meal_plan_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:meal_plan_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type gpa_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 512))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

logic dummy2 : gpa_type

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic to_fixed : gpa_type -> int

logic of_fixed : int -> gpa_type

logic user_eq2 : gpa_type, gpa_type -> bool

predicate pos_div_relation(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult : int, int -> int

axiom fxp_mult_def :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation(fxp_mult(x, y), (x * y),
  128)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0)))) ->
  pos_div_relation((-fxp_mult(x, y)), (-(x * y)), 128)))))))

logic fxp_div : int, int -> int

axiom fxp_div_def :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. (((x = 0) -> (fxp_div(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) -> pos_div_relation(fxp_div(x,
  y), (x * 128), y)) and ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and
  (y <  0)) -> pos_div_relation(fxp_div(x, y), ((-x) * 128), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation((-fxp_div(x, y)), ((-x) * 128), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation((-fxp_div(x, y)), (x * 128), (-y)))))))))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. (((x = 0) -> (fxp_div_int(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation(fxp_div_int(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x,
  y), (-x), (-y))) and ((not ((x <  0) and (y <  0))) -> ((((x <  0) and
  (0 <  y)) -> pos_div_relation((-fxp_div_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation((-fxp_div_int(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int : int, int -> int

axiom fxp_div_result_int_def :
  (forall x:int.
  (forall y:int [fxp_div_result_int(x, y)]. (((x = 0) ->
  (fxp_div_result_int(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna(fxp_div_result_int(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna(fxp_div_result_int(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), x, (-y)))))))))))))

logic to_int1 : int -> int

axiom to_int_def1 :
  (forall x:int [to_int1(x)]. (((x = 0) -> (to_int1(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation(to_int1(x), x, 128)) and
  ((not (0 <  x)) -> pos_div_relation((-to_int1(x)), (-x), 128))))))

logic of_real : real -> int

axiom inversion_axiom2 :
  (forall x:gpa_type [to_fixed(x)]. (of_fixed(to_fixed(x)) = x))

axiom range_axiom2 : (forall x:gpa_type. in_range3(to_fixed(x)))

axiom coerce_axiom2 :
  (forall x:int [to_fixed(of_fixed(x))]. (in_range3(x) ->
  (to_fixed(of_fixed(x)) = x)))

type gpa_type__ref = { gpa_type__content : gpa_type
}

function gpa_type__ref___projection(a: gpa_type__ref) : gpa_type =
  (a).gpa_type__content

type tmoney_typeB

predicate in_range4(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic dummy3 : tmoney_typeB

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic to_fixed1 : tmoney_typeB -> int

logic of_fixed1 : int -> tmoney_typeB

logic user_eq3 : tmoney_typeB, tmoney_typeB -> bool

predicate pos_div_relation1(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna1(res: int, num: int, den: int) =
  (((num = 0) -> (res = 0)) and ((not (num = 0)) ->
  (((num = (comp_div(num,den) * den)) -> (res = comp_div(num,den))) and
  ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult1 : int, int -> int

axiom fxp_mult_def1 :
  (forall x:int.
  (forall y:int [fxp_mult1(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult1(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation1(fxp_mult1(x, y), (x * y),
  128)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0)))) ->
  pos_div_relation1((-fxp_mult1(x, y)), (-(x * y)), 128)))))))

logic fxp_div1 : int, int -> int

axiom fxp_div_def1 :
  (forall x:int.
  (forall y:int [fxp_div1(x, y)]. (((x = 0) -> (fxp_div1(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation1(fxp_div1(x, y), (x * 128), y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation1(fxp_div1(x,
  y), ((-x) * 128), (-y))) and ((not ((x <  0) and (y <  0))) ->
  ((((x <  0) and (0 <  y)) -> pos_div_relation1((-fxp_div1(x, y)),
  ((-x) * 128), y)) and ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and
  (y <  0)) -> pos_div_relation1((-fxp_div1(x, y)), (x * 128),
  (-y)))))))))))))

logic fxp_div_int1 : int, int -> int

axiom fxp_div_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_int1(x, y)]. (((x = 0) -> (fxp_div_int1(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation1(fxp_div_int1(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation1(fxp_div_int1(x, y), (-x), (-y))) and ((not ((x <  0) and
  (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation1((-fxp_div_int1(x, y)), (-x), y)) and ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation1((-fxp_div_int1(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int1 : int, int -> int

axiom fxp_div_result_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_result_int1(x, y)]. (((x = 0) ->
  (fxp_div_result_int1(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna1(fxp_div_result_int1(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna1(fxp_div_result_int1(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna1((-fxp_div_result_int1(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna1((-fxp_div_result_int1(x, y)), x, (-y)))))))))))))

logic to_int2 : int -> int

axiom to_int_def2 :
  (forall x:int [to_int2(x)]. (((x = 0) -> (to_int2(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation1(to_int2(x), x, 128)) and
  ((not (0 <  x)) -> pos_div_relation1((-to_int2(x)), (-x), 128))))))

logic of_real1 : real -> int

axiom inversion_axiom3 :
  (forall x:tmoney_typeB [to_fixed1(x)]. (of_fixed1(to_fixed1(x)) = x))

axiom range_axiom3 : (forall x:tmoney_typeB. in_range4(to_fixed1(x)))

axiom coerce_axiom3 :
  (forall x:int [to_fixed1(of_fixed1(x))]. (in_range4(x) ->
  (to_fixed1(of_fixed1(x)) = x)))

type tmoney_typeB__ref = { tmoney_typeB__content : tmoney_typeB
}

function tmoney_typeB__ref___projection(a: tmoney_typeB__ref) : tmoney_typeB =
  (a).tmoney_typeB__content

type money_type

predicate in_range5(x: int) = (((-12799999) <= x) and (x <= 12799999))

logic dummy4 : money_type

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic to_fixed2 : money_type -> int

logic of_fixed2 : int -> money_type

logic user_eq4 : money_type, money_type -> bool

predicate pos_div_relation2(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna2(res: int, num: int, den: int) =
  (((num = 0) -> (res = 0)) and ((not (num = 0)) ->
  (((num = (comp_div(num,den) * den)) -> (res = comp_div(num,den))) and
  ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult2 : int, int -> int

axiom fxp_mult_def2 :
  (forall x:int.
  (forall y:int [fxp_mult2(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult2(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation2(fxp_mult2(x, y), (x * y),
  128)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0)))) ->
  pos_div_relation2((-fxp_mult2(x, y)), (-(x * y)), 128)))))))

logic fxp_div2 : int, int -> int

axiom fxp_div_def2 :
  (forall x:int.
  (forall y:int [fxp_div2(x, y)]. (((x = 0) -> (fxp_div2(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation2(fxp_div2(x, y), (x * 128), y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation2(fxp_div2(x,
  y), ((-x) * 128), (-y))) and ((not ((x <  0) and (y <  0))) ->
  ((((x <  0) and (0 <  y)) -> pos_div_relation2((-fxp_div2(x, y)),
  ((-x) * 128), y)) and ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and
  (y <  0)) -> pos_div_relation2((-fxp_div2(x, y)), (x * 128),
  (-y)))))))))))))

logic fxp_div_int2 : int, int -> int

axiom fxp_div_int_def2 :
  (forall x:int.
  (forall y:int [fxp_div_int2(x, y)]. (((x = 0) -> (fxp_div_int2(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation2(fxp_div_int2(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation2(fxp_div_int2(x, y), (-x), (-y))) and ((not ((x <  0) and
  (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation2((-fxp_div_int2(x, y)), (-x), y)) and ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation2((-fxp_div_int2(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int2 : int, int -> int

axiom fxp_div_result_int_def2 :
  (forall x:int.
  (forall y:int [fxp_div_result_int2(x, y)]. (((x = 0) ->
  (fxp_div_result_int2(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna2(fxp_div_result_int2(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna2(fxp_div_result_int2(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna2((-fxp_div_result_int2(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna2((-fxp_div_result_int2(x, y)), x, (-y)))))))))))))

logic to_int3 : int -> int

axiom to_int_def3 :
  (forall x:int [to_int3(x)]. (((x = 0) -> (to_int3(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation2(to_int3(x), x, 128)) and
  ((not (0 <  x)) -> pos_div_relation2((-to_int3(x)), (-x), 128))))))

logic of_real2 : real -> int

axiom inversion_axiom4 :
  (forall x:money_type [to_fixed2(x)]. (of_fixed2(to_fixed2(x)) = x))

axiom range_axiom4 : (forall x:money_type. in_range5(to_fixed2(x)))

axiom coerce_axiom4 :
  (forall x:int [to_fixed2(of_fixed2(x))]. (in_range5(x) ->
  (to_fixed2(of_fixed2(x)) = x)))

type money_type__ref = { money_type__content : money_type
}

function money_type__ref___projection(a: money_type__ref) : money_type =
  (a).money_type__content

type date

predicate in_range6(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : date, date -> bool

logic dummy5 : date

type date__ref = { date__content : date
}

function date__ref___projection(a: date__ref) : date = (a).date__content

logic to_rep2 : date -> int

logic of_rep2 : int -> date

axiom inversion_axiom5 :
  (forall x:date [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom5 : (forall x:date [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type student_id

predicate in_range7(x: int) = ((0 <= x) and (x <= 999999))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : student_id, student_id -> bool

logic dummy6 : student_id

type student_id__ref = { student_id__content : student_id
}

function student_id__ref___projection(a: student_id__ref) : student_id =
  (a).student_id__content

logic to_rep3 : student_id -> int

logic of_rep3 : int -> student_id

axiom inversion_axiom6 :
  (forall x:student_id [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom6 :
  (forall x:student_id [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__students__student_record__birth_date : date;
rec__students__student_record__id : student_id;
rec__students__student_record__gender : gender_type;
rec__students__student_record__gpa : gpa_type;
rec__students__student_record__part_time : bool;
rec__students__student_record__in_state : bool;
rec__students__student_record__resident : bool;
rec__students__student_record__meal_plan : meal_plan_type;
rec__students__student_record__self_insured : bool
}

function us_split_fields_Birth_Date__projection(a: us_split_fields) : date =
  (a).rec__students__student_record__birth_date

function us_split_fields_ID__projection(a: us_split_fields) : student_id =
  (a).rec__students__student_record__id

function us_split_fields_Gender__projection(a: us_split_fields) : gender_type =
  (a).rec__students__student_record__gender

function us_split_fields_GPA__projection(a: us_split_fields) : gpa_type =
  (a).rec__students__student_record__gpa

function us_split_fields_Part_Time__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__part_time

function us_split_fields_In_State__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__in_state

function us_split_fields_Resident__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__resident

function us_split_fields_Meal_Plan__projection(a: us_split_fields) : meal_plan_type =
  (a).rec__students__student_record__meal_plan

function us_split_fields_Self_Insured__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__self_insured

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((((((((to_rep2(((a).us_split_fields1).rec__students__student_record__birth_date) = to_rep2(((b).us_split_fields1).rec__students__student_record__birth_date)) and
  (to_rep3(((a).us_split_fields1).rec__students__student_record__id) = to_rep3(((b).us_split_fields1).rec__students__student_record__id))) and
  (to_rep(((a).us_split_fields1).rec__students__student_record__gender) = to_rep(((b).us_split_fields1).rec__students__student_record__gender))) and
  (to_fixed(((a).us_split_fields1).rec__students__student_record__gpa) = to_fixed(((b).us_split_fields1).rec__students__student_record__gpa))) and
  (((a).us_split_fields1).rec__students__student_record__part_time = ((b).us_split_fields1).rec__students__student_record__part_time)) and
  (((a).us_split_fields1).rec__students__student_record__in_state = ((b).us_split_fields1).rec__students__student_record__in_state)) and
  (((a).us_split_fields1).rec__students__student_record__resident = ((b).us_split_fields1).rec__students__student_record__resident)) and
  (to_rep1(((a).us_split_fields1).rec__students__student_record__meal_plan) = to_rep1(((b).us_split_fields1).rec__students__student_record__meal_plan))) and
  (((a).us_split_fields1).rec__students__student_record__self_insured = ((b).us_split_fields1).rec__students__student_record__self_insured)) ->
  (bool_eq6(a, b) = true)) and
  ((not (((((((((to_rep2(((a).us_split_fields1).rec__students__student_record__birth_date) = to_rep2(((b).us_split_fields1).rec__students__student_record__birth_date)) and
  (to_rep3(((a).us_split_fields1).rec__students__student_record__id) = to_rep3(((b).us_split_fields1).rec__students__student_record__id))) and
  (to_rep(((a).us_split_fields1).rec__students__student_record__gender) = to_rep(((b).us_split_fields1).rec__students__student_record__gender))) and
  (to_fixed(((a).us_split_fields1).rec__students__student_record__gpa) = to_fixed(((b).us_split_fields1).rec__students__student_record__gpa))) and
  (((a).us_split_fields1).rec__students__student_record__part_time = ((b).us_split_fields1).rec__students__student_record__part_time)) and
  (((a).us_split_fields1).rec__students__student_record__in_state = ((b).us_split_fields1).rec__students__student_record__in_state)) and
  (((a).us_split_fields1).rec__students__student_record__resident = ((b).us_split_fields1).rec__students__student_record__resident)) and
  (to_rep1(((a).us_split_fields1).rec__students__student_record__meal_plan) = to_rep1(((b).us_split_fields1).rec__students__student_record__meal_plan))) and
  (((a).us_split_fields1).rec__students__student_record__self_insured = ((b).us_split_fields1).rec__students__student_record__self_insured))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:date. forall a1:student_id. forall a2:gender_type.
  forall a3:gpa_type. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:meal_plan_type. forall a8:bool. (0 <= object__size({
  us_split_fields1 = { rec__students__student_record__birth_date = a;
  rec__students__student_record__id = a1;
  rec__students__student_record__gender = a2;
  rec__students__student_record__gpa = a3;
  rec__students__student_record__part_time = a4;
  rec__students__student_record__in_state = a5;
  rec__students__student_record__resident = a6;
  rec__students__student_record__meal_plan = a7;
  rec__students__student_record__self_insured = a8 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:date. forall a1:student_id. forall a2:gender_type.
  forall a3:gpa_type. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:meal_plan_type. forall a8:bool. (0 <= object__alignment({
  us_split_fields1 = { rec__students__student_record__birth_date = a;
  rec__students__student_record__id = a1;
  rec__students__student_record__gender = a2;
  rec__students__student_record__gpa = a3;
  rec__students__student_record__part_time = a4;
  rec__students__student_record__in_state = a5;
  rec__students__student_record__resident = a6;
  rec__students__student_record__meal_plan = a7;
  rec__students__student_record__self_insured = a8 } })))

logic students__student_record__birth_date__first__bit : int

logic students__student_record__birth_date__last__bit : int

logic students__student_record__birth_date__position : int

axiom students__student_record__birth_date__first__bit_axiom :
  (0 <= students__student_record__birth_date__first__bit)

axiom students__student_record__birth_date__last__bit_axiom :
  (students__student_record__birth_date__first__bit <  students__student_record__birth_date__last__bit)

axiom students__student_record__birth_date__position_axiom :
  (0 <= students__student_record__birth_date__position)

logic students__student_record__id__first__bit : int

logic students__student_record__id__last__bit : int

logic students__student_record__id__position : int

axiom students__student_record__id__first__bit_axiom :
  (0 <= students__student_record__id__first__bit)

axiom students__student_record__id__last__bit_axiom :
  (students__student_record__id__first__bit <  students__student_record__id__last__bit)

axiom students__student_record__id__position_axiom :
  (0 <= students__student_record__id__position)

logic students__student_record__gender__first__bit : int

logic students__student_record__gender__last__bit : int

logic students__student_record__gender__position : int

axiom students__student_record__gender__first__bit_axiom :
  (0 <= students__student_record__gender__first__bit)

axiom students__student_record__gender__last__bit_axiom :
  (students__student_record__gender__first__bit <  students__student_record__gender__last__bit)

axiom students__student_record__gender__position_axiom :
  (0 <= students__student_record__gender__position)

logic students__student_record__gpa__first__bit : int

logic students__student_record__gpa__last__bit : int

logic students__student_record__gpa__position : int

axiom students__student_record__gpa__first__bit_axiom :
  (0 <= students__student_record__gpa__first__bit)

axiom students__student_record__gpa__last__bit_axiom :
  (students__student_record__gpa__first__bit <  students__student_record__gpa__last__bit)

axiom students__student_record__gpa__position_axiom :
  (0 <= students__student_record__gpa__position)

logic students__student_record__part_time__first__bit : int

logic students__student_record__part_time__last__bit : int

logic students__student_record__part_time__position : int

axiom students__student_record__part_time__first__bit_axiom :
  (0 <= students__student_record__part_time__first__bit)

axiom students__student_record__part_time__last__bit_axiom :
  (students__student_record__part_time__first__bit <  students__student_record__part_time__last__bit)

axiom students__student_record__part_time__position_axiom :
  (0 <= students__student_record__part_time__position)

logic students__student_record__in_state__first__bit : int

logic students__student_record__in_state__last__bit : int

logic students__student_record__in_state__position : int

axiom students__student_record__in_state__first__bit_axiom :
  (0 <= students__student_record__in_state__first__bit)

axiom students__student_record__in_state__last__bit_axiom :
  (students__student_record__in_state__first__bit <  students__student_record__in_state__last__bit)

axiom students__student_record__in_state__position_axiom :
  (0 <= students__student_record__in_state__position)

logic students__student_record__resident__first__bit : int

logic students__student_record__resident__last__bit : int

logic students__student_record__resident__position : int

axiom students__student_record__resident__first__bit_axiom :
  (0 <= students__student_record__resident__first__bit)

axiom students__student_record__resident__last__bit_axiom :
  (students__student_record__resident__first__bit <  students__student_record__resident__last__bit)

axiom students__student_record__resident__position_axiom :
  (0 <= students__student_record__resident__position)

logic students__student_record__meal_plan__first__bit : int

logic students__student_record__meal_plan__last__bit : int

logic students__student_record__meal_plan__position : int

axiom students__student_record__meal_plan__first__bit_axiom :
  (0 <= students__student_record__meal_plan__first__bit)

axiom students__student_record__meal_plan__last__bit_axiom :
  (students__student_record__meal_plan__first__bit <  students__student_record__meal_plan__last__bit)

axiom students__student_record__meal_plan__position_axiom :
  (0 <= students__student_record__meal_plan__position)

logic students__student_record__self_insured__first__bit : int

logic students__student_record__self_insured__last__bit : int

logic students__student_record__self_insured__position : int

axiom students__student_record__self_insured__first__bit_axiom :
  (0 <= students__student_record__self_insured__first__bit)

axiom students__student_record__self_insured__last__bit_axiom :
  (students__student_record__self_insured__first__bit <  students__student_record__self_insured__last__bit)

axiom students__student_record__self_insured__position_axiom :
  (0 <= students__student_record__self_insured__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : date

logic dummy8 : student_id

logic dummy9 : gender_type

logic dummy10 : gpa_type

logic dummy11 : bool

logic dummy12 : bool

logic dummy13 : bool

logic dummy14 : meal_plan_type

logic dummy15 : bool

type student_record__ref = { student_record__content : us_rep
}

function student_record__ref___projection(a: student_record__ref) : us_rep =
  (a).student_record__content

logic student : date

logic student1 : student_id

logic student2 : gender_type

logic student3 : gpa_type

logic student4 : bool

logic student5 : bool

logic student6 : bool

logic student7 : meal_plan_type

logic student8 : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic base_tuition : money_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

 (* File "students.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall tuition:money_type. forall grants:money_type.
  forall insurance:money_type. forall o:money_type. forall o1:money_type.
  forall result:money_type. forall grants1:money_type.
  forall result1:money_type. forall insurance1:money_type.
  forall result2:money_type. forall tuition1:money_type.
  (((0 <= to_fixed2(base_tuition)) and
  (to_fixed2(base_tuition) <  2560000)) -> (((to_fixed2(o) = 0) and
  ((result = grants) and (grants1 = o))) -> (((to_fixed2(o1) = 0) and
  ((result1 = insurance) and (insurance1 = o1))) -> (((result2 = tuition) and
  (tuition1 = base_tuition)) -> ((not (student5 = true)) ->
  in_range5((to_fixed2(tuition1) + fxp_div_int1(to_fixed2(tuition1),
  2)))))))))
