(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const dividend Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const divisor Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const quotient Int)
(declare-const remainder Int)
(declare-const temp___155 Int)
(declare-const temp___154 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const quotient1 Int)
(declare-const result1 Int)
(declare-const remainder1 Int)
(declare-const quotient2 Int)
(declare-const remainder2 Int)
(declare-const result2 Int)
(declare-const quotient3 Int)
(declare-const result3 Int)
(declare-const remainder3 Int)
(declare-const quotient4 Int)
(declare-const remainder4 Int)
(declare-const quotient5 Int)
(declare-const remainder5 Int)
(declare-const quotient6 Int)
(declare-const remainder6 Int)
(declare-const quotient7 Int)
(declare-const remainder7 Int)
(declare-const quotient8 Int)
(declare-const remainder8 Int)
(declare-const quotient9 Int)
(declare-const remainder9 Int)
(define-fun remainder10 () int__ref (mk_int__ref remainder6))
(define-fun quotient10 () int__ref (mk_int__ref quotient6))
(assert (in_range1 dividend))
(assert (in_range1 divisor))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 quotient)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 remainder)))
(assert (and (< 0 divisor) (<= 0 dividend)))
(assert (= (mk_int__ref result) (mk_int__ref quotient)))
(assert (= quotient1 0))
(assert (= (mk_int__ref result1) (mk_int__ref remainder)))
(assert (= remainder1 dividend))
(assert (=> (<= divisor remainder1) (= temp___155 remainder1)))
(assert (=> (<= divisor remainder1) (= temp___154 quotient1)))
(assert (=> (<= divisor remainder1) (and (and (<= 0 remainder2) (<= 0 quotient2)) (= (+ (* divisor quotient2) remainder2) dividend))))
(assert (=> (<= divisor remainder1) (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 quotient2)) (=> (<= (- 2147483648) 2147483647) (in_range1 remainder2))) (<= divisor remainder2))))
(assert (=> (<= divisor remainder1) (and (= o (+ quotient2 1)) (in_range1 (+ quotient2 1)))))
(assert (=> (<= divisor remainder1) (= quotient2 result2)))
(assert (=> (<= divisor remainder1) (= quotient3 o)))
(assert (=> (<= divisor remainder1) (and (= o1 (- remainder2 divisor)) (in_range1 (- remainder2 divisor)))))
(assert (=> (<= divisor remainder1) (= remainder2 result3)))
(assert (=> (<= divisor remainder1) (= remainder3 o1)))
(assert (=> (<= divisor remainder1) (not (<= divisor remainder3))))
(assert (=> (<= divisor remainder1) (= remainder3 remainder4)))
(assert (=> (<= divisor remainder1) (= quotient3 quotient4)))
(assert (=> (<= divisor remainder1) (= remainder5 remainder3)))
(assert (=> (<= divisor remainder1) (= quotient5 quotient3)))
(assert (=> (<= divisor remainder1) (= remainder10 (mk_int__ref remainder4))))
(assert (=> (<= divisor remainder1) (= quotient10 (mk_int__ref quotient4))))
(assert (=> (<= divisor remainder1) (= remainder7 remainder5)))
(assert (=> (<= divisor remainder1) (= quotient7 quotient5)))
(assert (=> (not (<= divisor remainder1)) (= remainder1 remainder6)))
(assert (=> (not (<= divisor remainder1)) (= quotient1 quotient6)))
(assert (=> (not (<= divisor remainder1)) (= remainder7 remainder1)))
(assert (=> (not (<= divisor remainder1)) (= quotient7 quotient1)))
(assert (= (mk_int__ref remainder8) remainder10))
(assert (= (mk_int__ref quotient8) quotient10))
(assert (= remainder9 remainder7))
(assert (= quotient9 quotient7))
(assert (not (<= 0 quotient8)))
(check-sat)
(exit)
