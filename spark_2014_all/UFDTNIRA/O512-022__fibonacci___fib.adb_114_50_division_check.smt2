(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun power (Int Int) Int)
(assert (forall ((x Int)) (= (power x 0) 1)))
(assert (forall ((x Int) (n Int)) (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))
(assert (forall ((x Int) (n Int)) (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))
(assert (forall ((x Int)) (= (power x 1) x)))
(assert (forall ((x Int) (n Int) (m Int)) (=> (<= 0 n) (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))
(assert (forall ((x Int) (n Int) (m Int)) (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))
(assert (forall ((x Int) (y Int)) (=> (= (* x y) (* y x)) (forall ((n Int)) (=> (<= 0 n) (= (* (power x n) y) (* y (power x n))))))))
(assert (forall ((x Int) (y Int)) (=> (= (* x y) (* y x)) (forall ((n Int)) (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))
(assert (forall ((x Int) (n Int) (m Int)) (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-const a1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const n1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const n2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const p1 Int)
(declare-const p2 Int)
(declare-const b1 Int)
(declare-const b2 Int)
(declare-const k1 Int)
(declare-const k2 Int)
(declare-const temp___187 Int)
(declare-const temp___186 Int)
(declare-const temp___185 Int)
(declare-const temp___188 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const temp___193 Int)
(declare-const temp___192 Int)
(declare-const temp___191 Int)
(declare-const temp___194 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const result Int)
(declare-const p11 Int)
(declare-const result1 Int)
(declare-const b11 Int)
(declare-const result2 Int)
(declare-const k11 Int)
(declare-const p12 Int)
(declare-const b12 Int)
(declare-const k12 Int)
(declare-const temp___1881 Int)
(declare-const result3 Int)
(declare-const temp___1882 Int)
(declare-const result4 Int)
(declare-const k13 Int)
(declare-const result5 Int)
(declare-const b13 Int)
(declare-const result6 Int)
(declare-const k14 Int)
(declare-const result7 Int)
(declare-const p13 Int)
(declare-const p14 Int)
(declare-const b14 Int)
(declare-const k15 Int)
(declare-const temp___1883 Int)
(declare-const p15 Int)
(declare-const b15 Int)
(declare-const k16 Int)
(declare-const temp___1884 Int)
(declare-const p16 Int)
(declare-const b16 int__ref)
(declare-const k17 int__ref)
(declare-const p17 Int)
(declare-const b17 Int)
(declare-const k18 Int)
(declare-const p18 int__ref)
(declare-const b18 int__ref)
(declare-const k19 int__ref)
(declare-const p19 Int)
(declare-const b19 Int)
(declare-const k110 Int)
(declare-const result8 int__ref)
(declare-const p21 Int)
(declare-const result9 int__ref)
(declare-const b21 Int)
(declare-const result10 int__ref)
(declare-const k21 Int)
(declare-const p22 Int)
(declare-const b22 Int)
(declare-const k22 Int)
(declare-const temp___1941 Int)
(declare-const result11 int__ref)
(declare-const temp___1942 Int)
(declare-const result12 int__ref)
(declare-const k23 Int)
(declare-const result13 int__ref)
(declare-const b23 Int)
(declare-const result14 int__ref)
(declare-const k24 Int)
(declare-const result15 int__ref)
(declare-const p23 Int)
(declare-const p24 int__ref)
(declare-const b24 int__ref)
(declare-const k25 int__ref)
(declare-const p25 Int)
(declare-const b25 Int)
(declare-const k26 Int)
(declare-const p26 int__ref)
(declare-const b26 int__ref)
(declare-const k27 int__ref)
(declare-const temp___1943 int__ref)
(declare-const p27 Int)
(declare-const b27 Int)
(declare-const k28 Int)
(declare-const temp___1944 Int)
(declare-const p28 int__ref)
(declare-const b28 int__ref)
(declare-const k29 int__ref)
(declare-const temp___1945 int__ref)
(declare-const p29 Int)
(declare-const b29 Int)
(declare-const k210 Int)
(declare-const temp___1946 Int)
(declare-const p210 int__ref)
(declare-const b210 int__ref)
(declare-const k211 int__ref)
(declare-const p211 Int)
(declare-const b211 Int)
(declare-const k212 Int)
(declare-const p212 int__ref)
(declare-const b212 int__ref)
(declare-const k213 int__ref)
(declare-const p213 Int)
(declare-const b213 Int)
(declare-const k214 Int)
(declare-const p110 int__ref)
(declare-const p214 int__ref)
(declare-const b110 int__ref)
(declare-const b214 int__ref)
(declare-const k111 int__ref)
(declare-const k215 int__ref)
(declare-const p111 Int)
(declare-const p215 Int)
(declare-const b111 Int)
(declare-const b215 Int)
(declare-const k112 Int)
(declare-const k216 Int)
(assert (in_range1 a1))
(assert (in_range1 a2))
(assert (in_range2 n1))
(assert (in_range2 n2))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 p1)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 p2)))
(assert (and (= a1 a2) (and (= n1 n2) (and (or (not (= a1 0)) (not (= n1 0))) (< (power a1 n1) 2147483647)))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 b1)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 b2)))
(assert (=> (<= 0 2147483647) (in_range2 k1)))
(assert (=> (<= 0 2147483647) (in_range2 k2)))
(assert (= (mk_int__ref result) (mk_int__ref p1)))
(assert (= p11 1))
(assert (= (mk_int__ref result1) (mk_int__ref b1)))
(assert (= b11 a1))
(assert (= (mk_int__ref result2) (mk_int__ref k1)))
(assert (= k11 n1))
(assert (=> (< 0 k11) (and (and (= temp___187 p11) (and (= temp___186 k11) (and (= temp___185 b11) (and (= 0 temp___188) (and (and (= (power a1 n1) (* p12 (power b12 k12))) (<= 0 k12)) (and (and (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 b12)) (=> (<= 0 2147483647) (in_range2 k12))) (=> (<= (- 2147483648) 2147483647) (in_range1 p12))) (< 0 k12)) (and (and (= temp___1881 result3) (= temp___1882 k12)) (and (ite (= (mod1 k12 2) 0) (and (and (= (* p12 (power (* b12 b12) (div1 k12 2))) (power a1 n1)) (and (and (= k12 result4) (= k13 (div1 k12 2))) (and (and (= o (* b12 b12)) (in_range1 (* b12 b12))) (and (= b12 result5) (= b13 o))))) (= p13 p12)) (and (and (= (* (* p12 b12) (power b12 (- k12 1))) (power a1 n1)) (and (and (and (= o2 (- k12 1)) (in_range2 (- k12 1))) (and (= k12 result6) (= k14 o2))) (and (and (= o3 (* b12 p12)) (in_range1 (* b12 p12))) (and (= p12 result7) (= p13 o3))))) (and (= k13 k14) (= b13 b12)))) (not (< 0 k13)))))))))) (and (and (= k17 (mk_int__ref k13)) (and (= b16 (mk_int__ref b13)) (= p13 p16))) (and (= k18 k13) (and (= b17 b13) (= p17 p13)))))))
(assert (=> (< 0 k11) (= k19 k17)))
(assert (=> (< 0 k11) (= b18 b16)))
(assert (=> (< 0 k11) (= p18 (mk_int__ref p16))))
(assert (=> (< 0 k11) (= k110 k18)))
(assert (=> (< 0 k11) (= b19 b17)))
(assert (=> (< 0 k11) (= p19 p17)))
(assert (=> (not (< 0 k11)) (= k19 (mk_int__ref k11))))
(assert (=> (not (< 0 k11)) (= b18 (mk_int__ref b11))))
(assert (=> (not (< 0 k11)) (= p18 (mk_int__ref p11))))
(assert (=> (not (< 0 k11)) (= k110 k11)))
(assert (=> (not (< 0 k11)) (= b19 b11)))
(assert (=> (not (< 0 k11)) (= p19 p11)))
(assert (= result8 (mk_int__ref p2)))
(assert (= p21 1))
(assert (= result9 (mk_int__ref b2)))
(assert (= b21 a2))
(assert (= result10 (mk_int__ref k2)))
(assert (= k21 n2))
(assert (< 0 k21))
(assert (and (and (and (= (power a2 n2) (* p22 (power b22 k22))) (<= 0 (int__content k19))) (<= p22 (power a2 n2))) (<= b22 (power a2 n2))))
(assert (and (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 p22)) (=> (<= (- 2147483648) 2147483647) (in_range1 b22))) (=> (<= 0 2147483647) (in_range2 k22))) (< 0 k22)))
(assert (= result11 (mk_int__ref temp___1941)))
(assert (= temp___1942 k22))
(assert (= (mod1 k22 2) 0))
(assert (not (not (= 2 0))))
(check-sat)
(exit)
