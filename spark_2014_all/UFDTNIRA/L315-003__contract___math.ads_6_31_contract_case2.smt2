(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const res Int)
(declare-const math__sqrt__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const temp___156 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Bool)
(declare-const result Int)
(declare-const res1 Int)
(declare-const result1 Bool)
(declare-const res2 Int)
(declare-const result2 Int)
(declare-const res3 Int)
(declare-const result3 Bool)
(declare-const res4 Int)
(declare-const res5 Int)
(declare-const res6 Int)
(declare-const res7 Int)
(declare-const result4 Int)
(declare-const math__sqrt__result1 Int)
(declare-const math__sqrt__result2 Int)
(declare-const math__sqrt__result3 Int)
(declare-const res8 Int)
(declare-const math__sqrt__result4 Int)
(declare-const res9 Int)
(declare-const math__sqrt__result5 Int)
(define-fun res10 () int__ref (mk_int__ref res6))
(assert (in_range1 x))
(assert (<= 0 x))
(assert (= (mk_int__ref result) (mk_int__ref res)))
(assert (= res1 0))
(assert (in_range1 res1))
(assert (and (= o (+ res1 1)) (in_range1 (+ res1 1))))
(assert (and (= o1 (+ res1 1)) (in_range1 (+ res1 1))))
(assert (= o2 (* o1 o)))
(assert (and (= o3 o2) (in_range1 o2)))
(assert (= result1 (ite (<= o3 x) true false)))
(assert (=> (= result1 true) (= temp___156 res1)))
(assert (=> (= result1 true) (and (=> (<= (- 2147483648) 2147483647) (in_range1 res2)) (<= (* (+ res2 1) (+ res2 1)) x))))
(assert (=> (= result1 true) (and (= o4 (+ res2 1)) (in_range1 (+ res2 1)))))
(assert (=> (= result1 true) (= res2 result2)))
(assert (=> (= result1 true) (= res3 o4)))
(assert (=> (= result1 true) (and (= o5 (+ res3 1)) (in_range1 (+ res3 1)))))
(assert (=> (= result1 true) (and (= o6 (+ res3 1)) (in_range1 (+ res3 1)))))
(assert (=> (= result1 true) (= o7 (* o6 o5))))
(assert (=> (= result1 true) (and (= o8 o7) (in_range1 o7))))
(assert (=> (= result1 true) (= o9 (ite (<= o8 x) true false))))
(assert (=> (= result1 true) (= result3 (ite (not (= o9 true)) true false))))
(assert (=> (= result1 true) (= result3 true)))
(assert (=> (= result1 true) (= res3 res4)))
(assert (=> (= result1 true) (= res5 res3)))
(assert (=> (= result1 true) (= res10 (mk_int__ref res4))))
(assert (=> (= result1 true) (= res7 res5)))
(assert (=> (not (= result1 true)) (= res1 res6)))
(assert (=> (not (= result1 true)) (= res7 res1)))
(assert (= math__sqrt__result1 math__sqrt__result2))
(assert (= math__sqrt__result3 math__sqrt__result1))
(assert (= (mk_int__ref result4) (mk_int__ref math__sqrt__result)))
(assert (= math__sqrt__result1 res6))
(assert (= (mk_int__ref math__sqrt__result4) (mk_int__ref math__sqrt__result2)))
(assert (= (mk_int__ref res8) res10))
(assert (= math__sqrt__result5 math__sqrt__result3))
(assert (= res9 res7))
(assert (= (= x 0) true))
(assert (not (= math__sqrt__result4 0)))
(check-sat)
(exit)
