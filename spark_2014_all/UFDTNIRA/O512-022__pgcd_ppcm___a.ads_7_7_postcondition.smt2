(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const ao Int)
(declare-const an Int)
(declare-const bn Int)
(declare-const a__pgcd__result Int)
(declare-const temp___134 Int)
(declare-const temp___133 Int)
(declare-const temp___132 Int)
(declare-const temp___135 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const ao1 Int)
(declare-const result Int)
(declare-const an1 Int)
(declare-const result1 Int)
(declare-const bn1 Int)
(declare-const ao2 Int)
(declare-const an2 Int)
(declare-const bn2 Int)
(declare-const temp___1351 Int)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Int)
(declare-const temp___1352 Int)
(declare-const result6 Int)
(declare-const ao3 Int)
(declare-const result7 Int)
(declare-const an3 Int)
(declare-const result8 Int)
(declare-const bn3 Int)
(declare-const ao4 Int)
(declare-const an4 Int)
(declare-const bn4 Int)
(declare-const temp___1353 Int)
(declare-const ao5 Int)
(declare-const an5 Int)
(declare-const bn5 Int)
(declare-const temp___1354 Int)
(declare-const ao6 Int)
(declare-const an6 Int)
(declare-const bn6 Int)
(declare-const ao7 Int)
(declare-const an7 Int)
(declare-const bn7 Int)
(declare-const ao8 Int)
(declare-const an8 Int)
(declare-const bn8 Int)
(declare-const ao9 Int)
(declare-const an9 Int)
(declare-const bn9 Int)
(declare-const result9 int__ref)
(declare-const a__pgcd__result1 Int)
(declare-const a__pgcd__result2 int__ref)
(declare-const a__pgcd__result3 Int)
(declare-const ao10 int__ref)
(declare-const an10 int__ref)
(declare-const bn10 int__ref)
(declare-const a__pgcd__result4 int__ref)
(declare-const ao11 Int)
(declare-const an11 Int)
(declare-const bn11 Int)
(declare-const a__pgcd__result5 Int)
(declare-const result10 Bool)
(declare-const result11 Int)
(assert (in_range1 a))
(assert (in_range1 b))
(assert (and (not (= a (- 2147483648))) (not (= b (- 2147483648)))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 ao)))
(assert (= (mk_int__ref result) (mk_int__ref an)))
(assert (= an1 a))
(assert (in_range1 an1))
(assert (= (mk_int__ref result1) (mk_int__ref bn)))
(assert (= bn1 b))
(assert (in_range1 bn1))
(assert (=> (not (= bn1 0)) (and (and (= temp___134 bn1) (and (= temp___133 an1) (and (= temp___132 ao) (and (= 0 temp___135) (and (and (and (and (not (= an2 (- 2147483648))) (not (= bn2 (- 2147483648)))) (or (<= (abs an2) (abs a)) (<= (abs an2) (abs b)))) (or (<= (abs bn2) (abs a)) (<= (abs bn2) (abs b)))) (and (and (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 ao2)) (=> (<= (- 2147483648) 2147483647) (in_range1 an2))) (=> (<= (- 2147483648) 2147483647) (in_range1 bn2))) (not (= bn2 0))) (and (and (= temp___1351 result5) (= temp___1352 bn2)) (and (and (= ao2 result6) (= ao3 an2)) (and (and (= an2 result7) (= an3 bn2)) (and (and (= bn2 result8) (= bn3 (mod1 ao3 bn2))) (= bn3 0))))))))))) (and (and (= bn3 bn6) (and (= an3 an6) (= ao3 ao6))) (and (= bn7 bn3) (and (= an7 an3) (= ao7 ao3)))))))
(assert (=> (not (= bn1 0)) (= (mk_int__ref bn8) (mk_int__ref bn6))))
(assert (=> (not (= bn1 0)) (= (mk_int__ref an8) (mk_int__ref an6))))
(assert (=> (not (= bn1 0)) (= (mk_int__ref ao8) (mk_int__ref ao6))))
(assert (=> (not (= bn1 0)) (= bn9 bn7)))
(assert (=> (not (= bn1 0)) (= an9 an7)))
(assert (=> (not (= bn1 0)) (= ao9 ao7)))
(assert (=> (= bn1 0) (= bn1 bn8)))
(assert (=> (= bn1 0) (= an1 an8)))
(assert (=> (= bn1 0) (= (mk_int__ref ao8) (mk_int__ref ao))))
(assert (=> (= bn1 0) (= bn9 bn1)))
(assert (=> (= bn1 0) (= an9 an1)))
(assert (=> (= bn1 0) (= ao9 ao1)))
(assert (= a__pgcd__result2 (mk_int__ref a__pgcd__result1)))
(assert (= a__pgcd__result3 a__pgcd__result1))
(assert (and (= o8 (abs an8)) (in_range1 (abs an8))))
(assert (= result9 (mk_int__ref a__pgcd__result)))
(assert (= a__pgcd__result1 o8))
(assert (= a__pgcd__result4 a__pgcd__result2))
(assert (= bn10 (mk_int__ref bn8)))
(assert (= an10 (mk_int__ref an8)))
(assert (= ao10 (mk_int__ref ao8)))
(assert (= a__pgcd__result5 a__pgcd__result3))
(assert (= bn11 bn9))
(assert (= an11 an9))
(assert (= ao11 ao9))
(assert (= result11 (int__content a__pgcd__result4)))
(assert (not (or (or (= (int__content a__pgcd__result4) 0) (and (<= 1 (int__content a__pgcd__result4)) (<= (int__content a__pgcd__result4) (abs a)))) (and (<= 1 (int__content a__pgcd__result4)) (<= (int__content a__pgcd__result4) (abs b))))))
(check-sat)
(exit)
