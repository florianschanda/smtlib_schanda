(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort yearst 0)
(declare-fun yearstqtint (yearst) Int)
(assert (forall ((i yearst)) (and (<= 1901 (yearstqtint i)) (<= (yearstqtint i) 2099))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (yearst yearst) Bool)
(declare-const dummy yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(define-fun to_rep ((x yearst)) Int (yearstqtint x))
(declare-fun of_rep (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x yearst)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort monthst 0)
(declare-fun monthstqtint (monthst) Int)
(assert (forall ((i monthst)) (and (<= 1 (monthstqtint i)) (<= (monthstqtint i) 12))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (monthst monthst) Bool)
(declare-const dummy1 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(define-fun to_rep1 ((x monthst)) Int (monthstqtint x))
(declare-fun of_rep1 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x monthst)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort dayst 0)
(declare-fun daystqtint (dayst) Int)
(assert (forall ((i dayst)) (and (<= 1 (daystqtint i)) (<= (daystqtint i) 31))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (dayst dayst) Bool)
(declare-const dummy2 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(define-fun to_rep2 ((x dayst)) Int (daystqtint x))
(declare-fun of_rep2 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x dayst)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort millisecst 0)
(declare-fun millisecstqtint (millisecst) Int)
(assert (forall ((i millisecst)) (and (<= 0 (millisecstqtint i)) (<= (millisecstqtint i) 86399999))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (millisecst millisecst) Bool)
(declare-const dummy3 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(define-fun to_rep3 ((x millisecst)) Int (millisecstqtint x))
(declare-fun of_rep3 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x millisecst)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep (rec__clock__timet__year (us_split_fields1 a))) (to_rep (rec__clock__timet__year (us_split_fields1 b)))) (= (to_rep1 (rec__clock__timet__month (us_split_fields1 a))) (to_rep1 (rec__clock__timet__month (us_split_fields1 b))))) (= (to_rep2 (rec__clock__timet__day (us_split_fields1 a))) (to_rep2 (rec__clock__timet__day (us_split_fields1 b))))) (= (to_rep3 (rec__clock__timet__millisec (us_split_fields1 a))) (to_rep3 (rec__clock__timet__millisec (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep (timet__content a))
(declare-fun isvalidtime (us_rep) Bool)
(declare-fun isvalidtime__function_guard (Bool us_rep) Bool)
(declare-sort unsigned32t 0)
(declare-fun unsigned32tqtint (unsigned32t) Int)
(assert (forall ((i unsigned32t)) (and (<= 0 (unsigned32tqtint i)) (<= (unsigned32tqtint i) 4294967295))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (unsigned32t unsigned32t) Bool)
(declare-const dummy5 unsigned32t)
(declare-datatypes () ((unsigned32t__ref (mk_unsigned32t__ref (unsigned32t__content unsigned32t)))))
(define-fun unsigned32t__ref___projection ((a unsigned32t__ref)) unsigned32t (unsigned32t__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 4294967295)) (in_range5 temp___expr_159)))
(declare-sort tmillisecstB 0)
(declare-fun tmillisecstBqtint (tmillisecstB) Int)
(assert (forall ((i tmillisecstB)) (and (<= (- 2147483648) (tmillisecstBqtint i)) (<= (tmillisecstBqtint i) 2147483647))))
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tmillisecstB tmillisecstB) Bool)
(declare-const dummy6 tmillisecstB)
(declare-datatypes () ((tmillisecstB__ref (mk_tmillisecstB__ref (tmillisecstB__content tmillisecstB)))))
(define-fun tmillisecstB__ref___projection ((a tmillisecstB__ref)) tmillisecstB (tmillisecstB__content a))
(declare-const zerotime us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const year Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const month Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const day Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const hour Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const min Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant1 ((temp___expr_368 Int) (temp___is_init_364 Bool) (temp___skip_constant_365 Bool) (temp___do_toplevel_366 Bool) (temp___do_typ_inv_367 Bool)) Bool (=> (or (= temp___is_init_364 true) (<= 1901 2099)) (in_range1 temp___expr_368)))
(define-fun dynamic_invariant2 ((temp___expr_375 Int) (temp___is_init_371 Bool) (temp___skip_constant_372 Bool) (temp___do_toplevel_373 Bool) (temp___do_typ_inv_374 Bool)) Bool (=> (or (= temp___is_init_371 true) (<= 1 12)) (in_range2 temp___expr_375)))
(define-fun dynamic_invariant3 ((temp___expr_382 Int) (temp___is_init_378 Bool) (temp___skip_constant_379 Bool) (temp___do_toplevel_380 Bool) (temp___do_typ_inv_381 Bool)) Bool (=> (or (= temp___is_init_378 true) (<= 1 31)) (in_range3 temp___expr_382)))
(define-fun dynamic_invariant4 ((temp___expr_414 Int) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool (=> (or (= temp___is_init_410 true) (<= 0 86399999)) (in_range4 temp___expr_414)))
(declare-const rliteral yearst)
(assert (= (yearstqtint rliteral) 1901))
(declare-const rliteral1 monthst)
(assert (= (monthstqtint rliteral1) 1))
(declare-const rliteral2 dayst)
(assert (= (daystqtint rliteral2) 1))
(declare-const rliteral3 millisecst)
(assert (= (millisecstqtint rliteral3) 0))
(assert (= zerotime (mk___rep (mk___split_fields rliteral rliteral1 rliteral2 rliteral3))))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 millisecst)
(declare-const o11 dayst)
(assert (= (mk___rep (mk___split_fields rliteral rliteral1 rliteral2 rliteral3)) zerotime))
(assert (in_range5 year))
(assert (in_range5 month))
(assert (in_range5 day))
(assert (in_range5 hour))
(assert (in_range5 min))
(assert (<= 1901 year))
(assert (<= year 2099))
(assert (<= 1 month))
(assert (<= month 12))
(assert (<= 1 day))
(assert (<= day 31))
(assert (<= 0 hour))
(assert (<= hour 23))
(assert (<= 0 min))
(assert (<= min 59))
(assert (and (= o3 min) (in_range4 min)))
(assert (= o4 (* o3 60000)))
(assert (and (= o5 o4) (in_range6 o4)))
(assert (and (= o1 hour) (in_range4 hour)))
(assert (= o2 (* o1 3600000)))
(assert (and (= o6 o2) (in_range6 o2)))
(assert (= o7 (+ o6 o5)))
(assert (and (= o8 o7) (in_range6 o7)))
(assert (and (= o9 o8) (in_range4 o8)))
(assert (= (to_rep3 o10) o9))
(assert (and (= o day) (in_range3 day)))
(assert (= (to_rep2 o11) o))
(assert (not (in_range2 month)))
(check-sat)
(exit)
