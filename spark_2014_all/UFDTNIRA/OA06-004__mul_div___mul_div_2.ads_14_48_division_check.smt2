(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort long_long_integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (long_long_integer long_long_integer) Bool)
(declare-const dummy long_long_integer)
(declare-datatypes () ((long_long_integer__ref (mk_long_long_integer__ref (long_long_integer__content long_long_integer)))))
(define-fun long_long_integer__ref___projection ((a long_long_integer__ref)) long_long_integer (long_long_integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-sort lli 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (lli lli) Bool)
(declare-const dummy3 lli)
(declare-datatypes () ((lli__ref (mk_lli__ref (lli__content lli)))))
(define-fun lli__ref___projection ((a lli__ref)) lli (lli__content a))
(define-fun dynamic_invariant2 ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range4 temp___expr_135)))
(declare-const v Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const m Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const d Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const v_hi Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const v_lo Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant3 ((temp___expr_27 Int) (temp___is_init_24 Bool) (temp___skip_constant_25 Bool) (temp___do_toplevel_26 Bool)) Bool (=> (or (= temp___is_init_24 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range1 temp___expr_27)))
(assert (= v_hi (div1 v 4294967296)))
(assert (= v_lo (mod1 v 4294967296)))
(declare-const v_m_hi Int)
(declare-const v_m_lo Int)
(declare-const result_hi Int)
(declare-const result_lo Int)
(declare-const remainder Int)
(declare-const mul_div_2__mul_div__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const result Int)
(declare-const v_m_lo1 Int)
(declare-const result1 Int)
(declare-const v_m_hi1 Int)
(declare-const result2 Int)
(declare-const v_m_lo2 Int)
(declare-const result3 Int)
(declare-const result_hi1 Int)
(declare-const result4 Int)
(declare-const remainder1 Int)
(declare-const result5 Int)
(declare-const result_hi2 Int)
(declare-const result6 Int)
(declare-const result_lo1 Int)
(declare-const result7 Int)
(declare-const mul_div_2__mul_div__result1 Int)
(declare-const mul_div_2__mul_div__result2 Int)
(declare-const mul_div_2__mul_div__result3 Int)
(declare-const v_m_hi2 Int)
(declare-const v_m_lo3 Int)
(declare-const result_hi3 Int)
(declare-const result_lo2 Int)
(declare-const remainder2 Int)
(declare-const mul_div_2__mul_div__result4 Int)
(declare-const v_m_hi3 Int)
(declare-const v_m_lo4 Int)
(declare-const result_hi4 Int)
(declare-const result_lo3 Int)
(declare-const remainder3 Int)
(declare-const mul_div_2__mul_div__result5 Int)
(assert (in_range4 v))
(assert (in_range2 m))
(assert (in_range3 d))
(assert (ite (<= 0 v) (<= (div1 (+ (* v m) (div1 d 2)) d) 9223372036854775807) (<= (- 9223372036854775808) (- (div1 (+ (* (- v) m) (div1 d 2)) d)))))
(assert (= (div1 v 4294967296) v_hi))
(assert (in_range4 v_hi))
(assert (= (mod1 v 4294967296) v_lo))
(assert (in_range4 v_lo))
(assert (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range4 v_m_hi)))
(assert (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range4 v_m_lo)))
(assert (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range4 result_hi)))
(assert (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range4 result_lo)))
(assert (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range4 remainder)))
(assert (=> (<= 0 v) (= o 1)))
(assert (=> (not (<= 0 v)) (= o (- 1))))
(assert (= o1 (* o (div1 d 2))))
(assert (and (= o2 o1) (in_range1 o1)))
(assert (and (= o3 (* v_lo m)) (in_range1 (* v_lo m))))
(assert (= o4 (+ o3 o2)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (= (mk_int__ref result) (mk_int__ref v_m_lo)))
(assert (= v_m_lo1 o5))
(assert (and (= o6 (* v_hi m)) (in_range1 (* v_hi m))))
(assert (= o7 (+ o6 (div1 v_m_lo1 4294967296))))
(assert (and (= o8 o7) (in_range1 o7)))
(assert (= (mk_int__ref result1) (mk_int__ref v_m_hi)))
(assert (= v_m_hi1 o8))
(assert (= v_m_lo1 result2))
(assert (= v_m_lo2 (mod1 v_m_lo1 4294967296)))
(assert (= (mk_int__ref result3) (mk_int__ref result_hi)))
(assert (= result_hi1 (div1 v_m_hi1 d)))
(assert (<= (- 2147483648) result_hi1))
(assert (<= result_hi1 2147483647))
(assert (= (mk_int__ref result4) (mk_int__ref remainder)))
(assert (= remainder1 (mod1 v_m_hi1 d)))
(assert (and (= o9 (* result_hi1 4294967296)) (in_range1 (* result_hi1 4294967296))))
(assert (= result_hi1 result5))
(assert (= result_hi2 o9))
(assert (and (= o10 (* remainder1 4294967296)) (in_range1 (* remainder1 4294967296))))
(assert (= o11 (+ v_m_lo2 o10)))
(assert (and (= o12 o11) (in_range1 o11)))
(assert (= o13 (div1 o12 d)))
(assert (= (mk_int__ref result6) (mk_int__ref result_lo)))
(assert (= result_lo1 o13))
(assert (= mul_div_2__mul_div__result1 mul_div_2__mul_div__result2))
(assert (= mul_div_2__mul_div__result3 mul_div_2__mul_div__result1))
(assert (and (= o14 (+ result_hi2 result_lo1)) (in_range1 (+ result_hi2 result_lo1))))
(assert (= (mk_int__ref result7) (mk_int__ref mul_div_2__mul_div__result)))
(assert (= mul_div_2__mul_div__result1 o14))
(assert (= (mk_int__ref mul_div_2__mul_div__result4) (mk_int__ref mul_div_2__mul_div__result2)))
(assert (= remainder1 remainder2))
(assert (= result_lo1 result_lo2))
(assert (= result_hi2 result_hi3))
(assert (= v_m_lo2 v_m_lo3))
(assert (= v_m_hi1 v_m_hi2))
(assert (= mul_div_2__mul_div__result5 mul_div_2__mul_div__result3))
(assert (= remainder3 remainder1))
(assert (= result_lo3 result_lo1))
(assert (= result_hi4 result_hi2))
(assert (= v_m_lo4 v_m_lo2))
(assert (= v_m_hi3 v_m_hi1))
(assert (not (<= 0 v)))
(assert (not (not (= 2 0))))
(check-sat)
(exit)
