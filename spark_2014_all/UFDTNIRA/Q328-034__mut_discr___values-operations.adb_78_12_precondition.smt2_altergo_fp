(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__types__value__e : integer
}

function us_split_fields_E__projection(a: us_split_fields) : integer =
  (a).rec__types__value__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep(((a).us_split_fields1).rec__types__value__e) = to_rep(((b).us_split_fields1).rec__types__value__e)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__types__value__e) = to_rep(((b).us_split_fields1).rec__types__value__e))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. (0 <= object__size({ us_split_fields1 = {
  rec__types__value__e = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. (0 <= object__alignment({ us_split_fields1 = {
  rec__types__value__e = a } })))

logic types__value__e__first__bit : int

logic types__value__e__last__bit : int

logic types__value__e__position : int

axiom types__value__e__first__bit_axiom : (0 <= types__value__e__first__bit)

axiom types__value__e__last__bit_axiom :
  (types__value__e__first__bit <  types__value__e__last__bit)

axiom types__value__e__position_axiom : (0 <= types__value__e__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

type value__ref = { value__content : us_rep
}

function value__ref___projection(a: value__ref) : us_rep = (a).value__content

logic attr__ATTRIBUTE_ADDRESS : int

logic size : int -> int

logic size__function_guard : int, int -> prop

type tlastS

predicate in_range2(x: int) = ((0 <= x) and (x <= 200))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tlastS, tlastS -> bool

logic dummy2 : tlastS

type tlastS__ref = { tlastS__content : tlastS
}

function tlastS__ref___projection(a: tlastS__ref) : tlastS =
  (a).tlastS__content

axiom size__post_axiom :
  (forall stack__last:int [size(stack__last)]. (in_range2(stack__last) ->
  in_range1(size(stack__last))))

axiom size__def_axiom :
  (forall stack__last:int [size(stack__last)]. (in_range2(stack__last) ->
  (size(stack__last) = stack__last)))

logic full : int -> bool

logic full__function_guard : bool, int -> prop

logic empty : int -> bool

logic empty__function_guard : bool, int -> prop

type operation

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : operation, operation -> bool

logic dummy3 : operation

type operation__ref = { operation__content : operation
}

function operation__ref___projection(a: operation__ref) : operation =
  (a).operation__content

logic op : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom empty__post_axiom : true

axiom empty__def_axiom :
  (forall stack__last:int [empty(stack__last)].
  ((empty(stack__last) = true) <-> (stack__last <  1)))

axiom full__post_axiom : true

axiom full__def_axiom :
  (forall stack__last:int [full(stack__last)].
  ((full(stack__last) = true) <-> (200 <= stack__last)))

logic last : int

logic result__ : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : integer

logic o5 : integer

logic o6 : integer

logic last1 : int

logic v2__split_fields : integer

logic last2 : int

logic v1__split_fields : integer

logic result : int

logic result__1 : int

logic result1 : int

logic result__2 : int

logic result2 : int

logic result__3 : int

logic result3 : int

logic result__4 : int

logic last3 : int

axiom H : in_range3(op)

axiom H1 : in_range2(last)

axiom H2 : (2 <= size(last))

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(result__))

axiom H4 : ((size(last1) = (size(last) - 1)) and in_range2(last1))

axiom H5 : ((size(last2) = (size(last1) - 1)) and in_range2(last2))

axiom H6 : (((op = 0) or (op = 3)) ->
  ((- 1073741823) <= to_rep(v1__split_fields)))

axiom H7 : (((op = 0) or (op = 3)) ->
  (to_rep(v1__split_fields) <= 1073741822))

axiom H8 : (((op = 0) or (op = 3)) ->
  ((- 1073741823) <= to_rep(v2__split_fields)))

axiom H9 : (((op = 0) or (op = 3)) ->
  (to_rep(v2__split_fields) <= 1073741822))

axiom H10 : ((not ((op = 0) or (op = 3))) -> ((op = 1) ->
  (not (to_rep(v2__split_fields) = 0))))

axiom H11 : ((op = 0) ->
  ((o = (to_rep(v1__split_fields) + to_rep(v2__split_fields))) and
  in_range1((to_rep(v1__split_fields) + to_rep(v2__split_fields)))))

axiom H12 : ((op = 0) -> (result = result__))

axiom H13 : ((op = 0) -> (result__1 = o))

axiom H14 : ((not (op = 0)) -> ((op = 1) ->
  ((o1 = comp_div(to_rep(v1__split_fields),to_rep(v2__split_fields))) and
  in_range1(comp_div(to_rep(v1__split_fields),to_rep(v2__split_fields))))))

axiom H15 : ((not (op = 0)) -> ((op = 1) -> (result1 = result__)))

axiom H16 : ((not (op = 0)) -> ((op = 1) -> (result__2 = o1)))

axiom H17 : ((not (op = 0)) -> ((not (op = 1)) -> ((op = 2) ->
  ((o2 = (to_rep(v1__split_fields) * to_rep(v2__split_fields))) and
  in_range1((to_rep(v1__split_fields) * to_rep(v2__split_fields)))))))

axiom H18 : ((not (op = 0)) -> ((not (op = 1)) -> ((op = 2) ->
  (result2 = result__))))

axiom H19 : ((not (op = 0)) -> ((not (op = 1)) -> ((op = 2) ->
  (result__3 = o2))))

axiom H20 : ((not (op = 0)) -> ((not (op = 1)) -> ((not (op = 2)) ->
  ((o3 = (to_rep(v1__split_fields) - to_rep(v2__split_fields))) and
  in_range1((to_rep(v1__split_fields) - to_rep(v2__split_fields)))))))

axiom H21 : ((not (op = 0)) -> ((not (op = 1)) -> ((not (op = 2)) ->
  (result3 = result__))))

axiom H22 : ((not (op = 0)) -> ((not (op = 1)) -> ((not (op = 2)) ->
  (result__4 = o3))))

axiom H23 : ((not (op = 0)) -> ((not (op = 1)) -> ((not (op = 2)) ->
  (result__3 = result__4))))

axiom H24 : ((not (op = 0)) -> ((not (op = 1)) -> (result__2 = result__3)))

axiom H25 : ((not (op = 0)) -> (result__1 = result__2))

axiom H26 : (to_rep(o4) = result__1)

axiom H27 : (o4 = o5)

axiom H28 : (o6 = o5)

 (* File "values-operations.ads", line 22, characters 0-0 *)
goal WP_parameter_def : (not (full(last2) = true))
