(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic divides : int, int -> bool

logic divides__function_guard : bool, int, int -> prop

axiom divides__post_axiom : true

axiom divides__def_axiom :
  (forall a:int. forall b:int [divides(a, b)]. ((divides(a, b) = true) <->
  (mod(b, a) = 0)))

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic an : int

logic bn : int

logic c : int

logic math_euclid__gcd__result : int

logic o : int

logic temp___134 : int

logic temp___133 : int

logic temp___132 : int

logic o1 : int

logic o2 : int

logic x : int

logic o3 : int

logic o4 : int

logic o5 : int

logic x1 : int

logic o6 : int

logic o7 : int

logic o8 : bool

logic x2 : int

logic o9 : int

logic o10 : int

logic o11 : bool

logic c1 : int

logic result : int

logic an1 : int

logic result1 : int

logic bn1 : int

logic result2 : int

logic c2 : int

logic result3 : int

logic an2 : int

logic result4 : int

logic bn2 : int

logic an3 : int

logic bn3 : int

logic c3 : int

logic result5 : int

logic c4 : int

logic result6 : int

logic an4 : int

logic result7 : int

logic bn4 : int

logic an5 : int

logic bn5 : int

logic c5 : int

logic an6 : int

logic bn6 : int

logic c6 : int

logic an7 : int

logic bn7 : int

logic c7 : int

logic an8 : int

logic bn8 : int

logic c8 : int

logic an9 : int

logic bn9 : int

logic c9 : int

logic an10 : int

logic bn10 : int

logic c10 : int

logic result8 : int

logic math_euclid__gcd__result1 : int

logic math_euclid__gcd__result2 : int

logic math_euclid__gcd__result3 : int

logic an11 : int

logic bn11 : int

logic c11 : int

logic math_euclid__gcd__result4 : int

logic an12 : int

logic bn12 : int

logic c12 : int

logic math_euclid__gcd__result5 : int

logic result9 : bool

logic result10 : bool

axiom H : in_range2(a)

axiom H1 : in_range2(b)

axiom H2 : (result = an)

axiom H3 : (an1 = a)

axiom H4 : in_range2(an1)

axiom H5 : ((o = b) and in_range1(b))

axiom H6 : (result1 = bn)

axiom H7 : (bn1 = o)

axiom H8 : in_range1(bn1)

axiom H9 : ((1 <= 2147483647) -> in_range2(c))

axiom H10 : ((not (bn1 = 0)) -> (((temp___134 = c) and
  ((temp___133 = bn1) and ((temp___132 = an1) and (((result2 = c) and
  (c2 = an1)) and ((((o1 = bn1) and in_range2(bn1)) and ((an1 = result3) and
  (an2 = o1))) and ((((o2 = mod(c2, bn1)) and in_range1(mod(c2, bn1))) and
  ((bn1 = result4) and (bn2 = o2))) and
  ((forall x3:int. (((1 <= x3) and (x3 <= 2147483647)) -> (((divides(x3,
   c2) = true) and (divides(x3, an2) = true)) <-> ((divides(x3,
   an2) = true) and ((divides(an2, c2) = true) or (divides(x3, mod(c2,
   an2)) = true)))))) and
  ((forall x3:int. (((1 <= x3) and (x3 <= 2147483647)) -> (((divides(x3,
   a) = true) and (divides(x3, b) = true)) <-> ((divides(x3, an3) = true) and
   ((bn3 = 0) or (divides(x3, bn3) = true)))))) and (((((1 <= 2147483647) ->
  in_range2(an3)) and ((0 <= 2147483647) -> in_range1(bn3))) and
  ((1 <= 2147483647) -> in_range2(c3))) and (bn3 = 0)))))))))) and
  (((c3 = c7) and ((bn3 = bn7) and (an3 = an7))) and ((c8 = c3) and
  ((bn8 = bn3) and (an8 = an3))))))

axiom H11 : ((not (bn1 = 0)) -> (c9 = c7))

axiom H12 : ((not (bn1 = 0)) -> (bn9 = bn7))

axiom H13 : ((not (bn1 = 0)) -> (an9 = an7))

axiom H14 : ((not (bn1 = 0)) -> (c10 = c8))

axiom H15 : ((not (bn1 = 0)) -> (bn10 = bn8))

axiom H16 : ((not (bn1 = 0)) -> (an10 = an8))

axiom H17 : ((bn1 = 0) -> (c9 = c))

axiom H18 : ((bn1 = 0) -> (bn1 = bn9))

axiom H19 : ((bn1 = 0) -> (an1 = an9))

axiom H20 : ((bn1 = 0) -> (c10 = c1))

axiom H21 : ((bn1 = 0) -> (bn10 = bn1))

axiom H22 : ((bn1 = 0) -> (an10 = an1))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (divides(an9, an9) = true)
