(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_15)))
(declare-fun divides (Int Int) Bool)
(declare-fun divides__function_guard (Bool Int Int) Bool)
(assert true)
(assert (forall ((a Int) (b Int)) (! (= (= (divides a b) true) (= (mod2 b a) 0)) :pattern ((divides a b)))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r4b Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content integer)))))
(define-fun t5b__ref___projection ((a1 t5b__ref)) integer (t5b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c Int)
(declare-const j Int)
(declare-const math_simple_half__gcd__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___132 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const x Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const temp___135 Int)
(declare-const x1 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Bool)
(declare-const o11 Int)
(declare-const x2 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Bool)
(declare-const j1 Int)
(declare-const result Int)
(declare-const c1 Int)
(declare-const result1 Int)
(declare-const math_simple_half__gcd__result1 Int)
(declare-const result2 Int)
(declare-const c2 Int)
(declare-const result3 Int)
(declare-const j2 Int)
(declare-const j3 Int)
(declare-const result4 Int)
(declare-const j4 Int)
(declare-const j5 Int)
(declare-const j6 Int)
(declare-const j7 Int)
(declare-const j8 Int)
(declare-const j9 Int)
(declare-const j10 Int)
(declare-const c3 Int)
(declare-const result5 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(declare-const c12 Int)
(declare-const result6 Int)
(declare-const math_simple_half__gcd__result2 Int)
(declare-const c13 Int)
(declare-const j11 Int)
(declare-const math_simple_half__gcd__result3 Int)
(declare-const c14 Int)
(declare-const j12 Int)
(declare-const math_simple_half__gcd__result4 Int)
(declare-const c15 int__ref)
(declare-const j13 int__ref)
(declare-const math_simple_half__gcd__result5 int__ref)
(declare-const c16 Int)
(declare-const j14 Int)
(declare-const math_simple_half__gcd__result6 Int)
(declare-const c17 int__ref)
(declare-const j15 int__ref)
(declare-const math_simple_half__gcd__result7 int__ref)
(declare-const c18 Int)
(declare-const j16 Int)
(declare-const math_simple_half__gcd__result8 Int)
(declare-const c19 int__ref)
(declare-const j17 int__ref)
(declare-const math_simple_half__gcd__result9 int__ref)
(declare-const c20 Int)
(declare-const j18 Int)
(declare-const math_simple_half__gcd__result10 Int)
(declare-const result7 Bool)
(declare-const result8 Bool)
(assert (in_range1 a))
(assert (in_range1 b))
(assert (and (= o (ite (< a b) a b)) (in_range1 (ite (< a b) a b))))
(assert (= (mk_int__ref result) (mk_int__ref c)))
(assert (= c1 o))
(assert (in_range1 c1))
(assert (not (and (= (mod2 a c1) 0) (= (mod2 b c1) 0))))
(assert (and (= o1 (div1 c1 2)) (in_range1 (div1 c1 2))))
(assert (= c1 result2))
(assert (= c2 o1))
(assert (= (+ c2 1) r4b))
(assert (in_range2 r4b))
(assert (= (mk_int__ref result3) (mk_int__ref j)))
(assert (= j2 r4b))
(assert (=> (and (<= r4b j2) (<= j2 (- (ite (< a b) a b) 1))) (and (and (= temp___132 j2) (and (and (and (= o3 (ite (< a b) a b)) (in_range1 (ite (< a b) a b))) (and (and (= o2 j2) (in_range1 j2)) (not (= (divides o2 o3) true)))) (and (forall ((x3 Int)) (=> (and (<= (+ c2 1) x3) (<= x3 j3)) (not (= (divides x3 (ite (< a b) a b)) true)))) (and (and (=> (<= r4b (- (ite (< a b) a b) 1)) (dynamic_property r4b (- (ite (< a b) a b) 1) j3)) (and (<= r4b j3) (<= j3 (- (ite (< a b) a b) 1)))) (= j3 (- (ite (< a b) a b) 1)))))) (and (= j3 j7) (= j8 j3)))))
(assert (=> (and (<= r4b j2) (<= j2 (- (ite (< a b) a b) 1))) (= (mk_int__ref j9) (mk_int__ref j7))))
(assert (=> (and (<= r4b j2) (<= j2 (- (ite (< a b) a b) 1))) (= j10 j8)))
(assert (=> (not (and (<= r4b j2) (<= j2 (- (ite (< a b) a b) 1)))) (= j2 j9)))
(assert (=> (not (and (<= r4b j2) (<= j2 (- (ite (< a b) a b) 1)))) (= j10 j2)))
(assert (< 1 c2))
(assert (not (and (= (mod2 a c2) 0) (= (mod2 b c2) 0))))
(assert (not (< 1 c2)))
(check-sat)
(exit)
