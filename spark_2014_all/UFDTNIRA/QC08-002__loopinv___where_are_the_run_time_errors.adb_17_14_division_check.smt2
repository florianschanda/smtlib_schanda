(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const input Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const x Int)
(declare-const y Int)
(declare-const k Int)
(declare-const o Int)
(declare-const temp___134 Int)
(declare-const temp___133 Int)
(declare-const temp___132 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const result Int)
(declare-const k1 Int)
(declare-const result1 Int)
(declare-const x1 Int)
(declare-const result2 Int)
(declare-const y1 Int)
(declare-const result3 Int)
(declare-const y2 Int)
(declare-const result4 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-const y3 Int)
(declare-const result5 Int)
(declare-const y4 Int)
(declare-const result6 Int)
(declare-const x4 Int)
(declare-const x5 Int)
(declare-const y5 Int)
(declare-const x6 Int)
(declare-const y6 Int)
(declare-const x7 Int)
(declare-const y7 Int)
(declare-const x8 Int)
(declare-const y8 Int)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const y9 Int)
(assert (in_range input))
(assert (=> (<= (- 2147483648) 2147483647) (in_range x)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range y)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range k)))
(assert (= result k))
(assert (= k1 (div1 input 100)))
(assert (= result1 x))
(assert (= x1 2))
(assert (and (= o (+ k1 5)) (in_range (+ k1 5))))
(assert (= result2 y))
(assert (= y1 o))
(assert (=> (< x1 10) (= temp___134 y1)))
(assert (=> (< x1 10) (= temp___133 y1)))
(assert (=> (< x1 10) (= temp___132 x1)))
(assert (=> (< x1 10) (and (= o1 (+ y1 3)) (in_range (+ y1 3)))))
(assert (=> (< x1 10) (= y1 result3)))
(assert (=> (< x1 10) (= y2 o1)))
(assert (=> (< x1 10) (and (= o2 (+ x1 1)) (in_range (+ x1 1)))))
(assert (=> (< x1 10) (= x1 result4)))
(assert (=> (< x1 10) (= x2 o2)))
(assert (=> (< x1 10) (= y3 (+ temp___134 (* 3 (- x3 2))))))
(assert (=> (< x1 10) (<= 3 x3)))
(assert (=> (< x1 10) (and (=> (<= (- 2147483648) 2147483647) (in_range x3)) (=> (<= (- 2147483648) 2147483647) (in_range y3)))))
(assert (=> (< x1 10) (not (< x3 10))))
(assert (=> (< x1 10) (= y3 y5)))
(assert (=> (< x1 10) (= x3 x5)))
(assert (=> (< x1 10) (= y6 y3)))
(assert (=> (< x1 10) (= x6 x3)))
(assert (=> (< x1 10) (= (mk_int__ref y7) (mk_int__ref y5))))
(assert (=> (< x1 10) (= (mk_int__ref x7) (mk_int__ref x5))))
(assert (=> (< x1 10) (= y8 y6)))
(assert (=> (< x1 10) (= x8 x6)))
(assert (=> (not (< x1 10)) (= y1 y7)))
(assert (=> (not (< x1 10)) (= x1 x7)))
(assert (=> (not (< x1 10)) (= y8 y1)))
(assert (=> (not (< x1 10)) (= x8 x1)))
(assert (and (= o10 (* 3 k1)) (in_range (* 3 k1))))
(assert (= o11 (+ o10 100)))
(assert (and (= o12 o11) (in_range o11)))
(assert (= result7 (ite (< 43 o12) true false)))
(assert (= result7 true))
(assert (and (= o13 (+ y7 1)) (in_range (+ y7 1))))
(assert (= result8 y7))
(assert (= y9 o13))
(assert (and (= o14 (- x7 y9)) (in_range (- x7 y9))))
(assert (not (not (= o14 0))))
(check-sat)
(exit)
