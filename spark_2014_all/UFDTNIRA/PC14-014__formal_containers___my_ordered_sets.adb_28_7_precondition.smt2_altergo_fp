(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_ordered_sets__m__set__capacity : count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__my_ordered_sets__m__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_ordered_sets__m__set : us_main_type
}

function us_split_fields_Set__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_ordered_sets__m__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__my_ordered_sets__m__set__capacity) = to_rep(((b).us_split_discrs1).rec__my_ordered_sets__m__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_ordered_sets__m__set,
  ((b).us_split_fields1).rec__my_ordered_sets__m__set) = true)) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__my_ordered_sets__m__set__capacity) = to_rep(((b).us_split_discrs1).rec__my_ordered_sets__m__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_ordered_sets__m__set,
  ((b).us_split_fields1).rec__my_ordered_sets__m__set) = true))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__m__set = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__m__set = a1 } })))

logic my_ordered_sets__m__set__capacity__first__bit : int

logic my_ordered_sets__m__set__capacity__last__bit : int

logic my_ordered_sets__m__set__capacity__position : int

axiom my_ordered_sets__m__set__capacity__first__bit_axiom :
  (0 <= my_ordered_sets__m__set__capacity__first__bit)

axiom my_ordered_sets__m__set__capacity__last__bit_axiom :
  (my_ordered_sets__m__set__capacity__first__bit <  my_ordered_sets__m__set__capacity__last__bit)

axiom my_ordered_sets__m__set__capacity__position_axiom :
  (0 <= my_ordered_sets__m__set__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : count_type

logic dummy2 : us_main_type

type set__ref = { set__content : us_rep
}

function set__ref___projection(a: set__ref) : us_rep = (a).set__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq1({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } })]. (user_eq1({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } })))

type us_split_fields2 = { rec__my_ordered_sets__m__cursor__node : count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__my_ordered_sets__m__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  (((to_rep(((a).us_split_fields3).rec__my_ordered_sets__m__cursor__node) = to_rep(((b).us_split_fields3).rec__my_ordered_sets__m__cursor__node)) ->
  (bool_eq4(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__my_ordered_sets__m__cursor__node) = to_rep(((b).us_split_fields3).rec__my_ordered_sets__m__cursor__node))) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = a } })))

logic my_ordered_sets__m__cursor__node__first__bit : int

logic my_ordered_sets__m__cursor__node__last__bit : int

logic my_ordered_sets__m__cursor__node__position : int

axiom my_ordered_sets__m__cursor__node__first__bit_axiom :
  (0 <= my_ordered_sets__m__cursor__node__first__bit)

axiom my_ordered_sets__m__cursor__node__last__bit_axiom :
  (my_ordered_sets__m__cursor__node__first__bit <  my_ordered_sets__m__cursor__node__last__bit)

axiom my_ordered_sets__m__cursor__node__position_axiom :
  (0 <= my_ordered_sets__m__cursor__node__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })].
  ((length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }) <= to_rep(container)) and in_range1(length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })].
  in_range1(length1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type map__ref = { map__content : us_rep2
}

function map__ref___projection(a: map__ref) : us_rep2 = (a).map__content

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic get : us_rep2, us_rep1 -> int

logic get__function_guard : int, us_rep2, us_rep1 -> prop

type element_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy5 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___4__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic has_key : us_rep2, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep2, us_rep1 -> prop

logic witness : us_rep2, us_rep1 -> int

logic witness__function_guard : int, us_rep2, us_rep1 -> prop

logic w_get : us_rep2, int -> int

logic w_get__function_guard : int, us_rep2, int -> prop

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [get(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  }) = true) -> (((of_int(0) = true) -> ((get(container, { us_split_fields3 =
  { rec__my_ordered_sets__m__cursor__node = key } }) = w_get(container,
  witness(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = k } }) = true) -> ((bool_eq4({
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = k } }, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  }) = true) <-> (witness(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = witness(container, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = k } }))))))) and
  in_range2(get(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }))))))

logic positions : us_rep -> us_rep2

logic positions__function_guard : us_rep2, us_rep -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })].
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = no_element } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = true) ->
  (((1 <= get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } })) and (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = j } }) = true) -> ((get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) = get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = j } })) -> (bool_eq4({
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i } }, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = j }
  }) = true)))))))))

type extended_index

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq8 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy7 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref___projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic get1 : us_rep3, int -> int

logic get__function_guard1 : int, us_rep3, int -> prop

logic length3 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic last__function_guard : int, us_rep3 -> prop

logic iter_has_element__function_guard : bool, us_rep3, int -> prop

logic elements : us_rep -> us_rep3

logic elements__function_guard : us_rep3, us_rep -> prop

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic find : us_rep3, int -> int

logic find__function_guard : int, us_rep3, int -> prop

logic e_elements_included__function_guard : bool, us_rep3, us_rep3 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })]. (((oeq({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }) = true) ->
  (((bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })), length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 }
  }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }))))) ->
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), n) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }), n))))) and
  (not (bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })), length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 }
  }))) = false)))) and ((not (oeq({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }) = true)) ->
  ((not (forall i:int. (((1 <= i) and (i <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
        us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } })))) ->
        ((0 <  find(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 =
        { rec__my_ordered_sets__m__set = right1 } }), get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
        us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
        i))) and (get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 =
        { rec__my_ordered_sets__m__set = right1 } }), find(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right
        }; us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
        get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
        rec__my_ordered_sets__m__set = left1 } }), i))) = get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
        us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
        i)))))) or
  (not (forall i:int. (((1 <= i) and (i <= length3(elements({
       us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
       us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })))) ->
       ((0 <  find(elements({ us_split_discrs1 = {
       rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
       rec__my_ordered_sets__m__set = left1 } }), get1(elements({
       us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
       us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
       i))) and (get1(elements({ us_split_discrs1 = {
       rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
       rec__my_ordered_sets__m__set = left1 } }), find(elements({
       us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
       us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
       get1(elements({ us_split_discrs1 = {
       rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
       rec__my_ordered_sets__m__set = right1 } }), i))) = get1(elements({
       us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
       us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
       i))))))))))

axiom oeq__post__dispatch_axiom : true

logic equivalent_sets : us_rep, us_rep -> bool

logic equivalent_sets__function_guard : bool, us_rep, us_rep -> prop

logic equivalent_sets1 : int, us_rep, us_rep -> bool

logic equivalent_sets__function_guard1 : bool, int, us_rep, us_rep -> prop

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq9 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq7 : us_rep4, us_rep4 -> bool

logic dummy8 : us_rep4

type set__ref1 = { set__content1 : us_rep4
}

function set__ref___2__projection(a: set__ref1) : us_rep4 = (a).set__content1

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard3 : bool, us_rep4, us_rep4 -> prop

logic model__ : us_rep -> us_rep4

logic model____function_guard : us_rep4, us_rep -> prop

axiom equivalent_sets__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [equivalent_sets({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })].
  ((equivalent_sets({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }) = true) <-> (oeq2(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })) = true)))

axiom equivalent_sets__post__dispatch_axiom : true

logic is_empty1 : us_rep -> bool

logic is_empty__function_guard1 : bool, us_rep -> prop

logic is_empty2 : int, us_rep -> bool

logic is_empty__function_guard2 : bool, int, us_rep -> prop

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_empty1({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })].
  ((is_empty1({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }) = true) <-> (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) = 0)))

axiom is_empty__post__dispatch_axiom : true

logic assign__specific_post : int, us_split_fields, us_split_discrs, us_rep,
  us_split_fields -> prop

logic contains : us_rep4, int -> bool

logic contains__function_guard : bool, us_rep4, int -> prop

logic included_except : us_rep4, us_rep4, int -> bool

logic included_except__function_guard : bool, us_rep4, us_rep4, int -> prop

logic oeq3 : us_rep2, us_rep2 -> bool

logic oeq__function_guard4 : bool, us_rep2, us_rep2 -> prop

logic mapping_preserved_except : us_rep3, us_rep3, us_rep2, us_rep2,
  us_rep1 -> bool

logic mapping_preserved_except__function_guard : bool, us_rep3, us_rep3,
  us_rep2, us_rep2, us_rep1 -> prop

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

logic element__function_guard : int, us_rep, us_rep1 -> prop

logic element : int, us_rep, us_rep1 -> int

logic element__function_guard1 : int, int, us_rep, us_rep1 -> prop

logic replace_element__specific_post : int, us_split_fields, us_split_discrs,
  us_rep1, int, us_split_fields -> prop

logic move__specific_post : int, us_split_fields, us_split_discrs,
  us_split_fields, us_split_discrs, us_split_fields, us_split_fields -> prop

logic contains__function_guard1 : bool, us_rep, int -> prop

logic contains1 : int, us_rep, int -> bool

logic contains__function_guard2 : bool, int, us_rep, int -> prop

type element_type1

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : element_type1, element_type1 -> bool

logic dummy9 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom contains__post__dispatch_axiom : true

logic equivalent_elements__function_guard : bool, int, int -> prop

logic ole : us_rep4, us_rep4 -> bool

logic ole__function_guard : bool, us_rep4, us_rep4 -> prop

logic range_equal__function_guard : bool, us_rep3, us_rep3, int, int -> prop

logic range_shifted__function_guard : bool, us_rep3, us_rep3, int, int,
  int -> prop

logic e_bigger_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

logic e_smaller_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

logic e_is_find__function_guard : bool, us_rep3, int, int -> prop

logic p_positions_shifted : us_rep2, us_rep2, int, int -> bool

logic p_positions_shifted__function_guard : bool, us_rep2, us_rep2, int,
  int -> prop

logic insert__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields2, bool, us_split_fields, us_split_fields2, bool -> prop

logic insert__2__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic equal_except__function_guard : bool, us_rep3, us_rep3, int -> prop

logic include__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic replace__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic exclude__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic delete__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic delete__2__specific_post : int, us_split_fields, us_split_discrs,
  us_split_fields2, us_split_fields, us_split_fields2 -> prop

logic first_element : us_rep -> int

logic first_element__function_guard : int, us_rep -> prop

logic first_element1 : int, us_rep -> int

logic first_element__function_guard1 : int, int, us_rep -> prop

logic delete_first__specific_post : int, us_split_fields, us_split_discrs,
  us_split_fields -> prop

logic ole1 : us_rep2, us_rep2 -> bool

logic ole__function_guard1 : bool, us_rep2, us_rep2 -> prop

logic last_element : us_rep -> int

logic last_element__function_guard : int, us_rep -> prop

logic last_element1 : int, us_rep -> int

logic last_element__function_guard1 : int, int, us_rep -> prop

logic delete_last__specific_post : int, us_split_fields, us_split_discrs,
  us_split_fields -> prop

logic intersection__2 : us_rep, us_rep -> us_rep

logic intersection__2__function_guard : us_rep, us_rep, us_rep -> prop

logic intersection__21 : int, us_rep, us_rep -> us_rep

logic intersection__2__function_guard1 : us_rep, int, us_rep, us_rep -> prop

logic includes_intersection : us_rep4, us_rep4, us_rep4 -> bool

logic includes_intersection__function_guard : bool, us_rep4, us_rep4,
  us_rep4 -> prop

logic num_overlaps : us_rep4, us_rep4 -> int

logic num_overlaps__function_guard : int, us_rep4, us_rep4 -> prop

logic e_elements_included__2__function_guard : bool, us_rep3, us_rep4,
  us_rep3 -> prop

axiom intersection__2__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [intersection__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })].
  ((((((length(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = num_overlaps(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }))) and
  (ole(model__(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })) = true)) and
  (ole(model__(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true)) and
  (includes_intersection(model__(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true)) and
  (forall i:int. (((1 <= i) and (i <= length3(elements(intersection__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }))))) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), get1(elements(intersection__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })), i))) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  i))) = get1(elements(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })))) -> ((contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i)) = true) ->
  ((0 <  find(elements(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), i))) and
  (get1(elements(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  find(elements(intersection__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  i))) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i))))))))

axiom intersection__2__post__dispatch_axiom : true

logic included_in_union : us_rep4, us_rep4, us_rep4 -> bool

logic included_in_union__function_guard : bool, us_rep4, us_rep4,
  us_rep4 -> prop

logic e_elements_included__3__function_guard : bool, us_rep3, us_rep4,
  us_rep3, us_rep3 -> prop

logic mapping_preserved : us_rep3, us_rep3, us_rep2, us_rep2 -> bool

logic mapping_preserved__function_guard : bool, us_rep3, us_rep3, us_rep2,
  us_rep2 -> prop

logic union__specific_post : int, us_split_fields, us_split_discrs, us_rep,
  us_split_fields -> prop

logic union__2 : us_rep, us_rep -> us_rep

logic union__2__function_guard : us_rep, us_rep, us_rep -> prop

logic union__21 : int, us_rep, us_rep -> us_rep

logic union__2__function_guard1 : us_rep, int, us_rep, us_rep -> prop

axiom union__2__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })].
  ((length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  left }; us_split_fields1 = { rec__my_ordered_sets__m__set = left1 }
  }) <= (2147483647 - length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }))) -> (((((((length(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 }
  })) = ((length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }) - num_overlaps(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 }
  }))) + length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }))) and (ole(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  model__(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }))) = true)) and (ole(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  model__(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }))) = true)) and
  (included_in_union(model__(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true)) and
  (forall i:int. (((1 <= i) and (i <= length3(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }))))) ->
  (((contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), get1(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  i)) = true) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), get1(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })), i))) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  i))) = get1(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)))) and
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), get1(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  i)) = true)) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), get1(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })), i))) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  get1(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  i))) = get1(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)))))))) and
  (forall i:int. (((1 <= i) and (i <= length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })))) -> ((contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i)) = true) ->
  ((0 <  find(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), i))) and
  (get1(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), find(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i))) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), i))))))) and
  (forall i:int. (((1 <= i) and (i <= length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })))) -> (((contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), i)) = true) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }), i))) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), i))) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }), i)))) and
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  i)) = true)) -> ((0 <  find(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }), i))) and
  (get1(elements(union__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), find(elements(union__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), i))) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }), i))))))))))

axiom union__2__post__dispatch_axiom : true

logic intersection__specific_post : int, us_split_fields, us_split_discrs,
  us_rep, us_split_fields -> prop

logic no_overlap : us_rep4, us_rep4 -> bool

logic no_overlap__function_guard : bool, us_rep4, us_rep4 -> prop

logic difference__specific_post : int, us_split_fields, us_split_discrs,
  us_rep, us_split_fields -> prop

logic difference__2 : us_rep, us_rep -> us_rep

logic difference__2__function_guard : us_rep, us_rep, us_rep -> prop

logic difference__21 : int, us_rep, us_rep -> us_rep

logic difference__2__function_guard1 : us_rep, int, us_rep, us_rep -> prop

axiom difference__2__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })].
  ((((((length(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = (length({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }) - num_overlaps(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })))) and
  (ole(model__(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })) = true)) and
  (no_overlap(model__(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true)) and
  (included_in_union(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), model__(difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 }
  })) = true)) and
  (forall i:int. (((1 <= i) and (i <= length3(elements(difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }))))) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), get1(elements(difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })), i))) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  i))) = get1(elements(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })))) ->
  ((contains(model__(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  i)) = true) -> ((0 <  find(elements(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), i))) and
  (get1(elements(difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), find(elements(difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i))) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), i))))))))

axiom difference__2__post__dispatch_axiom : true

logic not_in_both : us_rep4, us_rep4, us_rep4 -> bool

logic not_in_both__function_guard : bool, us_rep4, us_rep4, us_rep4 -> prop

logic symmetric_difference__specific_post : int, us_split_fields,
  us_split_discrs, us_rep, us_split_fields -> prop

logic symmetric_difference__2 : us_rep, us_rep -> us_rep

logic symmetric_difference__2__function_guard : us_rep, us_rep,
  us_rep -> prop

logic symmetric_difference__21 : int, us_rep, us_rep -> us_rep

logic symmetric_difference__2__function_guard1 : us_rep, int, us_rep,
  us_rep -> prop

axiom symmetric_difference__2__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type
  [symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })]. ((length({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }) <= (2147483647 - length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }))) ->
  (((((((length(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = ((length({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }) - (2 * num_overlaps(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 }
  })))) + length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }))) and
  (not_in_both(model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true)) and
  (included_in_union(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }),
  model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true)) and
  (included_in_union(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }),
  model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })) = true)) and
  (forall i:int. (((1 <= i) and
  (i <= length3(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }))))) -> (((contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)) = true) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i))) and (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  i))) = get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)))) and
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }),
  get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)) = true)) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }),
  get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i))) and (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }),
  get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  i))) = get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), i)))))))) and
  (forall i:int. (((1 <= i) and (i <= length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } })))) ->
  ((contains(model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  i)) = true) -> ((0 <  find(elements(symmetric_difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i))) and
  (get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  find(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }),
  i))) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), i))))))) and
  (forall i:int. (((1 <= i) and (i <= length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })))) ->
  ((contains(model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  i)) = true) -> ((0 <  find(elements(symmetric_difference__2({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), i))) and
  (get1(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })),
  find(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }),
  i))) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } }), i)))))))))

axiom symmetric_difference__2__post__dispatch_axiom : true

logic overlap : us_rep, us_rep -> bool

logic overlap__function_guard : bool, us_rep, us_rep -> prop

logic overlap1 : int, us_rep, us_rep -> bool

logic overlap__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom overlap__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [overlap({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } })].
  ((overlap({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  left }; us_split_fields1 = { rec__my_ordered_sets__m__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__m__set = right1 } }) = true) <->
  (not (no_overlap(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = left1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = right1 } })) = true))))

axiom overlap__post__dispatch_axiom : true

logic is_subset : us_rep, us_rep -> bool

logic is_subset__function_guard : bool, us_rep, us_rep -> prop

logic is_subset1 : int, us_rep, us_rep -> bool

logic is_subset__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom is_subset__post_axiom :
  (forall subset:count_type. forall subset1:us_main_type.
  forall of_set:count_type. forall of_set1:us_main_type [is_subset({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = subset };
  us_split_fields1 = { rec__my_ordered_sets__m__set = subset1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = of_set };
  us_split_fields1 = { rec__my_ordered_sets__m__set = of_set1 } })].
  ((is_subset({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  subset }; us_split_fields1 = { rec__my_ordered_sets__m__set = subset1 } },
  { us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = of_set };
  us_split_fields1 = { rec__my_ordered_sets__m__set = of_set1 }
  }) = true) <-> (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = subset }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = subset1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = of_set }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = of_set1 } })) = true)))

axiom is_subset__post__dispatch_axiom : true

logic first : us_rep -> us_rep1

logic first__function_guard : us_rep1, us_rep -> prop

logic first1 : int, us_rep -> us_rep1

logic first__function_guard1 : us_rep1, int, us_rep -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:us_main_type [first({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })].
  (((length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }) = 0) -> (bool_eq4(first({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = no_element } }) = true)) and
  ((not (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) = 0)) ->
  ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), first({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } })) = true) and
  (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), first({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } })) = 1)))))

axiom first__post__dispatch_axiom : true

logic next : us_rep, us_rep1 -> us_rep1

logic next__function_guard : us_rep1, us_rep, us_rep1 -> prop

logic next1 : int, us_rep, us_rep1 -> us_rep1

logic next__function_guard1 : us_rep1, int, us_rep, us_rep1 -> prop

axiom next__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [next({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } })].
  (((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } }) = true) or
  (bool_eq4({ us_split_fields3 = { rec__my_ordered_sets__m__cursor__node =
  position } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = no_element } }) = true)) ->
  ((((bool_eq4({ us_split_fields3 = { rec__my_ordered_sets__m__cursor__node =
  position } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = no_element } }) = true) or
  (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } }) = length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }))) ->
  (bool_eq4(next({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } }), { us_split_fields3 =
  { rec__my_ordered_sets__m__cursor__node = no_element } }) = true)) and
  ((not ((bool_eq4({ us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } }, { us_split_fields3 =
  { rec__my_ordered_sets__m__cursor__node = no_element } }) = true) or
  (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } }) = length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })))) ->
  ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), next({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } })) = true) and
  (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), next({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } })) = (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = position }
  }) + 1))))))))

axiom next__post__dispatch_axiom : true

logic find1 : us_rep, int -> us_rep1

logic find__function_guard1 : us_rep1, us_rep, int -> prop

logic find2 : int, us_rep, int -> us_rep1

logic find__function_guard2 : us_rep1, int, us_rep, int -> prop

axiom find__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall item:int [find1({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, item)]. (in_range4(item) ->
  (((not (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), item) = true)) ->
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } }, item)) = true)) and
  (bool_eq4(find1({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, item), { us_split_fields3 =
  { rec__my_ordered_sets__m__cursor__node = no_element } }) = true))) and
  ((contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), item) = true) ->
  (((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } }, item)) = true) and
  (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } }, item)) = find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  item))) and ((not (bool_lt(get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  find1({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item))), item) = true)) and ((bool_lt(get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } }, item))), item) = false) ->
  (not (bool_lt(item, get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  find1({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)))) = true))))))))))

axiom find__post__dispatch_axiom : true

logic floor : us_rep, int -> us_rep1

logic floor__function_guard : us_rep1, us_rep, int -> prop

logic floor1 : int, us_rep, int -> us_rep1

logic floor__function_guard1 : us_rep1, int, us_rep, int -> prop

axiom floor__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall item:int [floor({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, item)]. (in_range4(item) ->
  ((((length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }) = 0) or (item <  first_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) -> (bool_eq4(floor({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }, item),
  { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = no_element }
  }) = true)) and ((not ((length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) = 0) or
  (item <  first_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (((has_key(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) = true) and (not (item <  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)))))) and (((0 <  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), floor({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } }, item))) ->
  (((forall i:int. (((1 <= i) and (i <= (get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), floor({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) - 1))) -> (get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i) <  item))) ->
  (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), floor({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } },
  item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), floor({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } })))) ->
    (item <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } }, item)) + 1) <= i) and (i <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } })))) -> (item <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (match_bool(true, false, false) = true)))) and ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(true,
  of_int(1), false) = true)))) and
  ((not (forall i:int. (((1 <= i) and (i <= (get(positions({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } }), floor({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
        item)) - 1))) -> (get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i) <  item)))) ->
  (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), floor({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } },
  item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), floor({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } })))) ->
    (item <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } }, item)) + 1) <= i) and (i <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } })))) -> (item <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (match_bool(false, false, false) = true)))) and ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(false,
  of_int(1), false) = true)))))) and ((not (0 <  get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)))) -> (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), floor({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
  { rec__my_ordered_sets__m__set = container1 } },
  item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), floor({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } })))) ->
    (item <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } }, item)) + 1) <= i) and (i <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } })))) -> (item <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (match_bool(of_int(1), false, false) = true)))) and ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  floor({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true)))))))))))

axiom floor__post__dispatch_axiom : true

logic ceiling : us_rep, int -> us_rep1

logic ceiling__function_guard : us_rep1, us_rep, int -> prop

logic ceiling1 : int, us_rep, int -> us_rep1

logic ceiling__function_guard1 : us_rep1, int, us_rep, int -> prop

axiom ceiling__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall item:int [ceiling({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, item)]. (in_range4(item) ->
  ((((length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }) = 0) or (last_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) <  item)) ->
  (bool_eq4(ceiling({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, item), { us_split_fields3 =
  { rec__my_ordered_sets__m__cursor__node = no_element } }) = true)) and
  ((not ((length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) = 0) or (last_element({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
  }) <  item))) -> (((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), ceiling({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
  item)) = true) and (not (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  ceiling({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item))) <  item))) and (((0 <  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), ceiling({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
  item))) ->
  (((forall i:int. (((1 <= i) and (i <= (get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), ceiling({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) - 1))) -> (get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i) <  item))) ->
  (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), ceiling({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
  item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), ceiling({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } })))) ->
    (item <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        ceiling({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
        item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
        })))) -> (item <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (match_bool(true, false, false) = true)))) and ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  ceiling({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(true,
  of_int(1), false) = true)))) and
  ((not (forall i:int. (((1 <= i) and (i <= (get(positions({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } }), ceiling({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
        item)) - 1))) -> (get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i) <  item)))) ->
  (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), ceiling({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
  item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), ceiling({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } })))) ->
    (item <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        ceiling({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
        item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
        })))) -> (item <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (match_bool(false, false, false) = true)))) and ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  ceiling({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(false,
  of_int(1), false) = true)))))) and ((not (0 <  get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  ceiling({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)))) -> (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), ceiling({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
  item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), ceiling({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
    item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } })))) ->
    (item <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        ceiling({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } },
        item)) + 1) <= i) and (i <= length3(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
        })))) -> (item <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (match_bool(of_int(1), false, false) = true)))) and ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  ceiling({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }, item)) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true)))))))))))

axiom ceiling__post__dispatch_axiom : true

predicate in_range5(rec__my_ordered_sets__m__set__capacity1: int,
  a: us_rep) =
  (rec__my_ordered_sets__m__set__capacity1 = to_rep(((a).us_split_discrs1).rec__my_ordered_sets__m__set__capacity))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size5({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__m__set = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment5({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__m__set = a1 } })))

logic my_ordered_sets__m__set__capacity__first__bit1 : int

logic my_ordered_sets__m__set__capacity__last__bit1 : int

logic my_ordered_sets__m__set__capacity__position1 : int

axiom my_ordered_sets__m__set__capacity__first__bit_axiom1 :
  (0 <= my_ordered_sets__m__set__capacity__first__bit1)

axiom my_ordered_sets__m__set__capacity__last__bit_axiom1 :
  (my_ordered_sets__m__set__capacity__first__bit1 <  my_ordered_sets__m__set__capacity__last__bit1)

axiom my_ordered_sets__m__set__capacity__position_axiom1 :
  (0 <= my_ordered_sets__m__set__capacity__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy10 : count_type

logic dummy11 : us_main_type

type tlS__ref = { tlS__content : us_rep
}

function tlS__ref___projection(a: tlS__ref) : us_rep = (a).tlS__content

axiom user_eq__def_axiom1 :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq9({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } })]. (user_eq9({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } })))

logic l__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range6(rec__my_ordered_sets__m__set__capacity1: int,
  a: us_rep) =
  (rec__my_ordered_sets__m__set__capacity1 = to_rep(((a).us_split_discrs1).rec__my_ordered_sets__m__set__capacity))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size6({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__m__set = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment6({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__m__set = a1 } })))

logic my_ordered_sets__m__set__capacity__first__bit2 : int

logic my_ordered_sets__m__set__capacity__last__bit2 : int

logic my_ordered_sets__m__set__capacity__position2 : int

axiom my_ordered_sets__m__set__capacity__first__bit_axiom2 :
  (0 <= my_ordered_sets__m__set__capacity__first__bit2)

axiom my_ordered_sets__m__set__capacity__last__bit_axiom2 :
  (my_ordered_sets__m__set__capacity__first__bit2 <  my_ordered_sets__m__set__capacity__last__bit2)

axiom my_ordered_sets__m__set__capacity__position_axiom2 :
  (0 <= my_ordered_sets__m__set__capacity__position2)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy12 : count_type

logic dummy13 : us_main_type

type tkS__ref = { tkS__content : us_rep
}

function tkS__ref___projection(a: tkS__ref) : us_rep = (a).tkS__content

axiom user_eq__def_axiom2 :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq10({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } })]. (user_eq10({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = b1 } })))

logic k__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic m__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS5 : int

logic m__split_discrs1 : count_type

logic attr__ATTRIBUTE_ADDRESS6 : int

logic m__split_discrs2 : count_type

logic attr__ATTRIBUTE_ADDRESS7 : int

logic m__split_discrs3 : count_type

logic attr__ATTRIBUTE_ADDRESS8 : int

axiom no_element__def_axiom : (no_element = of_rep(0))

type positive_count_type

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : positive_count_type, positive_count_type -> bool

logic dummy14 : positive_count_type

type positive_count_type__ref = { positive_count_type__content :
positive_count_type
}

function positive_count_type__ref___projection(a: positive_count_type__ref) : positive_count_type =
  (a).positive_count_type__content

axiom user_eq__def_axiom3 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length3(a)))) -> (get1(a,
    n) = get1(b, n)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length3(a), length3(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length3(a)))) -> (get1(a,
        n) = get1(b, n))))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length3(a), length3(b)), false,
  false)))))

axiom find__post_axiom1 :
  (forall container:us_rep3.
  (forall item:int [find(container, item)]. (in_range4(item) ->
  (((0 <  find(container, item)) -> ((find(container,
  item) <= length3(container)) and ((not (bool_lt(item, get1(container,
  find(container, item))) = true)) and ((bool_lt(item, get1(container,
  find(container, item))) = false) -> (not (bool_lt(get1(container,
  find(container, item)), item) = true)))))) and in_range1(find(container,
  item))))))

logic keys_included : us_rep2, us_rep2 -> bool

logic keys_included__function_guard : bool, us_rep2, us_rep2 -> prop

axiom p_positions_shifted__post_axiom :
  (forall small:us_rep2. forall big:us_rep2.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((in_range7(cut1) and in_range1(count)) ->
  (((p_positions_shifted(small, big, cut1, count) = true) ->
  (((keys_included(small, big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = true) -> (((get(small, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) <  cut1) -> (get(big, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = get(small, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i } }))) and
  ((not (get(small, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) <  cut1)) -> ((get(big, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) - count) = get(small, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = true) -> ((has_key(small,
  { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) = true) or (((cut1 - count) <= (get(big, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) - count)) and ((get(big, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) - count) <= (cut1 - 1)))))))) and ((((keys_included(small,
  big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = true) -> (((get(small, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) <  cut1) and (get(big, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = get(small, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i } }))) or
  ((not (get(small, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) <  cut1)) and ((get(big, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) - count) = get(small, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) = true) -> ((has_key(small,
  { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) = true) or (((cut1 - count) <= (get(big, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = i } }) - count)) and ((get(big, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = i }
  }) - count) <= (cut1 - 1))))))) -> (p_positions_shifted(small, big, cut1,
  count) = true))))))

axiom mapping_preserved__post_axiom :
  (forall e_left:us_rep3. forall e_right:us_rep3.
  (forall p_left:us_rep2. forall p_right:us_rep2 [mapping_preserved(e_left,
  e_right, p_left, p_right)]. ((mapping_preserved(e_left, e_right, p_left,
  p_right) = true) -> (((keys_included(p_left, p_right) = true) and
  (forall i:int. (((1 <= i) and (i <= length3(e_left))) ->
  ((0 <  find(e_right, get1(e_left, i))) and (get1(e_right, find(e_right,
  get1(e_left, i))) = get1(e_left, i)))))) and
  (forall c:count_type. ((has_key(p_left, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = c } }) = true) -> (get1(e_left,
  get(p_left, { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node =
  c } })) = get1(e_right, get(p_right, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = c } })))))))))

axiom mapping_preserved_except__post_axiom :
  (forall e_left:us_rep3. forall e_right:us_rep3.
  (forall p_left:us_rep2. forall p_right:us_rep2.
  (forall position:count_type [mapping_preserved_except(e_left, e_right,
  p_left, p_right, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } })].
  ((mapping_preserved_except(e_left, e_right, p_left, p_right, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = position }
  }) = true) -> ((keys_included(p_left, p_right) = true) and
  (forall c:count_type. ((has_key(p_left, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = c } }) = true) -> ((not (bool_eq4({
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = c } }, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = position }
  }) = true)) -> (get1(e_left, get(p_left, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = c } })) = get1(e_right,
  get(p_right, { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node =
  c } })))))))))))

logic is_empty3 : us_rep4 -> bool

logic is_empty__function_guard3 : bool, us_rep4 -> prop

logic length4 : us_rep4 -> int

logic length__function_guard4 : int, us_rep4 -> prop

axiom model____post_axiom :
  (forall container:count_type. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })].
  (length4(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })) = length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })))

type element_type2

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : element_type2, element_type2 -> bool

logic dummy15 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___2__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

axiom elements__post_axiom :
  (forall container:count_type. forall container1:us_main_type [elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })].
  ((((length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })) = length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } })) and
  (forall temp___428:int. ((in_range3(temp___428) and ((1 <= temp___428) and
  (temp___428 <= (0 + length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))))) -> (contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), temp___428)) = true)))) and
  (forall item:int. ((in_range8(item) and (contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  item) = true)) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), item)) and
  ((not (bool_lt(get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  item)), item) = true)) and ((bool_lt(get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  item)), item) = false) -> (not (bool_lt(item, get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), item))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) -> ((find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get1(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
    i1) <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i)))) ->
  (((i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
    })))) -> (get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i) <  get1(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
    i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } })))) -> (get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i) <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i1))))) ->
  (match_bool(true, false, false) = true)))) and
  ((not (i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(true,
  of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } }), i1) <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i))))) ->
  (((i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
    })))) -> (get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i) <  get1(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
    i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } })))) -> (get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i) <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i1))))) ->
  (match_bool(false, false, false) = true)))) and
  ((not (i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(false,
  of_int(1), false) = true)))))) and ((not (0 <  i)) ->
  (((i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
    })))) -> (get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 =
    { rec__my_ordered_sets__m__set = container1 } }), i) <  get1(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container
    }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
    i1)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        container }; us_split_fields1 = { rec__my_ordered_sets__m__set =
        container1 } })))) -> (get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i) <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = container };
        us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
        i1))))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true))))))))))

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [element(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } })].
  in_range4(element(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = position } })))))

axiom first_element__post_axiom :
  (forall container:count_type. forall container1:us_main_type
  [first_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })]. ((not (is_empty1({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
  }) = true)) -> (((first_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  1)) and
  (forall i:int. (((2 <= i) and (i <= length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))) -> (first_element({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
  }) <  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }), i))))) and
  in_range4(first_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))))

axiom first_element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [first_element1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })].
  in_range4(first_element1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))))

axiom last_element__post_axiom :
  (forall container:count_type. forall container1:us_main_type
  [last_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })]. ((not (is_empty1({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 }
  }) = true)) -> (((last_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__m__set = container1
  } }))) and
  (forall i:int. (((1 <= i) and (i <= (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }) - 1))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__m__set = container1 } }),
  i) <  last_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))))) and
  in_range4(last_element({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })))))

axiom last_element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [last_element1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } })].
  in_range4(last_element1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__m__set = container1 } }))))

axiom has_element__post__dispatch_axiom : true

axiom contains__post_axiom :
  (forall container:us_rep4.
  (forall item:int [contains(container, item)]. (in_range8(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range8(e) and (contains(container, e) = true)) and
   ((bool_lt(e, item) = false) and (bool_lt(item, e) = false)))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom1 :
  (forall container:us_rep4 [length4(container)].
  in_range1(length4(container)))

axiom ole__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range8(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep4 [is_empty3(container)].
  (((is_empty3(container) = true) <->
  (forall item:int. (not (in_range8(item) and (contains(container,
  item) = true))))) and ((is_empty3(container) = true) <->
  (length4(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall item:int [included_except(left, right, item)]. (in_range8(item) ->
  (((included_except(left, right, item) = true) ->
  (forall e:int. ((in_range8(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or ((not (bool_lt(e, item) = true)) and
  ((bool_lt(e, item) = false) -> (not (bool_lt(item, e) = true)))))))) and
  ((forall e:int. ((in_range8(e) and (contains(left, e) = true)) ->
   ((contains(right, e) = true) or ((bool_lt(e, item) = false) and
   (bool_lt(item, e) = false))))) ->
  (included_except(left, right, item) = true))))))

axiom includes_intersection__post_axiom :
  (forall container:us_rep4. forall left:us_rep4. forall right:us_rep4
  [includes_intersection(container, left, right)].
  ((includes_intersection(container, left, right) = true) <->
  (forall item:int. ((in_range8(item) and (contains(left, item) = true)) ->
  ((contains(right, item) = true) -> (contains(container, item) = true))))))

axiom included_in_union__post_axiom :
  (forall container:us_rep4. forall left:us_rep4. forall right:us_rep4
  [included_in_union(container, left, right)]. ((included_in_union(container,
  left, right) = true) <->
  (forall item:int. ((in_range8(item) and (contains(container,
  item) = true)) -> ((contains(left, item) = true) or (contains(right,
  item) = true))))))

axiom not_in_both__post_axiom :
  (forall container:us_rep4. forall left:us_rep4. forall right:us_rep4
  [not_in_both(container, left, right)]. ((not_in_both(container, left,
  right) = true) <->
  (forall item:int. ((in_range8(item) and (contains(container,
  item) = true)) -> ((not (contains(left, item) = true)) or
  (not (contains(right, item) = true)))))))

axiom no_overlap__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [no_overlap(left, right)].
  ((no_overlap(left, right) = true) <->
  (forall item:int. ((in_range8(item) and (contains(left, item) = true)) ->
  (not (contains(right, item) = true))))))

logic intersection : us_rep4, us_rep4 -> us_rep4

logic intersection__function_guard : us_rep4, us_rep4, us_rep4 -> prop

axiom num_overlaps__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [num_overlaps(left, right)].
  (((((num_overlaps(left, right) = length4(intersection(left, right))) and
  (((ole(left, right) = true) -> (num_overlaps(left,
  right) = length4(left))) and ((not (ole(left, right) = true)) ->
  (num_overlaps(left, right) <  length4(left))))) and (((ole(right,
  left) = true) -> (num_overlaps(left, right) = length4(right))) and
  ((not (ole(right, left) = true)) -> (num_overlaps(left,
  right) <  length4(right))))) and ((num_overlaps(left, right) = 0) <->
  (no_overlap(left, right) = true))) and in_range1(num_overlaps(left,
  right))))

axiom intersection__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [intersection(left, right)].
  (((ole(intersection(left, right), left) = true) and (ole(intersection(left,
  right), right) = true)) and (includes_intersection(intersection(left,
  right), left, right) = true)))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length3(container)].
  (((0 + length3(container)) <= 2147483647) and
  in_range1(length3(container))))

type element_type3

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq13 : element_type3, element_type3 -> bool

logic dummy16 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___3__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall position:int [get1(container, position)]. ((in_range3(position) and
  ((1 <= position) and (position <= (0 + length3(container))))) ->
  in_range9(get1(container, position)))))

axiom has_key__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [has_key(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } })]. ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields3 = {
   rec__my_ordered_sets__m__cursor__node = k } }) = true) and (bool_eq4({
   us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = k } }, {
   us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
   }) = true))) ->
  (has_key(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = true)))))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length2(container)].
  in_range1(length2(container)))

axiom ole__post_axiom1 :
  (forall left:us_rep2. forall right:us_rep2 [ole1(left, right)].
  ((ole1(left, right) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = true) ->
  ((has_key(right, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = true) and (get(right, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  }) = get(left, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } })))))))

axiom oeq__post_axiom2 :
  (forall left:us_rep2. forall right:us_rep2 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key:count_type. ((has_key(left, { us_split_fields3 = {
   rec__my_ordered_sets__m__cursor__node = key } }) = true) ->
   ((has_key(right, { us_split_fields3 = {
   rec__my_ordered_sets__m__cursor__node = key } }) = true) and (get(right, {
   us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
   }) = get(left, { us_split_fields3 = {
   rec__my_ordered_sets__m__cursor__node = key } }))))) and
  (forall key:count_type. ((has_key(right, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = true) -> (has_key(left,
  { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  }) = true))))))

axiom is_empty__post_axiom2 :
  (forall container:us_rep2 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = true)))))

axiom keys_included__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }) = true) -> (has_key(right,
  { us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  }) = true)))))

logic has_witness : us_rep2, int -> bool

logic has_witness__function_guard : bool, us_rep2, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [witness(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  }) = true) -> ((has_witness(container, witness(container, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = key }
  })) = true) and in_range1(witness(container, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep2.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range1(witness1) and (has_witness(container, witness1) = true)) ->
  in_range2(w_get(container, witness1)))))

 (* File "my_ordered_sets.adb", line 189, characters 0-0 *)
goal WP_parameter_def :
  (forall l__split_fields:us_main_type. forall k__split_fields:us_main_type.
  forall c__split_fields:count_type. forall o:count_type.
  forall o1:count_type. forall temp___1145:count_type. forall us:int.
  forall us1:int. forall temp___1122:count_type.
  forall temp___1123:count_type. forall result:us_split_fields__ref1.
  forall c__split_fields1:us_split_fields2.
  forall result1:us_split_fields__ref1.
  forall c__split_fields2:us_split_fields2.
  forall my_ordered_sets__m__insert__2__container__fields:us_split_fields.
  forall result2:us_split_fields__ref.
  forall l__split_fields1:us_split_fields.
  forall my_ordered_sets__m__insert__2__container__fields1:us_split_fields.
  forall result3:us_split_fields__ref.
  forall l__split_fields2:us_split_fields.
  forall c__split_fields3:us_split_fields2. forall b:bool.
  forall my_ordered_sets__m__insert__container__fields:us_split_fields.
  forall result4:us_split_fields__ref.
  forall l__split_fields3:us_split_fields.
  forall my_ordered_sets__m__replace_element__container__fields:us_split_fields.
  forall result5:us_split_fields__ref.
  forall l__split_fields4:us_split_fields.
  forall my_ordered_sets__m__replace__container__fields:us_split_fields.
  forall result6:us_split_fields__ref.
  forall l__split_fields5:us_split_fields.
  forall my_ordered_sets__m__assign__target__fields:us_split_fields.
  forall result7:us_split_fields__ref.
  forall k__split_fields1:us_split_fields.
  forall my_ordered_sets__m__move__source__fields:us_split_fields.
  forall my_ordered_sets__m__move__target__fields:us_split_fields.
  forall result8:us_split_fields__ref.
  forall l__split_fields6:us_split_fields.
  forall result9:us_split_fields__ref.
  forall k__split_fields2:us_split_fields.
  forall my_ordered_sets__m__assign__target__fields1:us_split_fields.
  forall result10:us_split_fields__ref.
  forall k__split_fields3:us_split_fields. (((((to_rep(o) = 0) and
  (o = o1)) and (temp___1145 = o1)) and (temp___1145 = no_element)) ->
  (((us = 10) and in_range1(10)) -> (((to_rep(l__split_discrs) = 10) and
  (is_empty1({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_ordered_sets__m__set =
  l__split_fields } }) = true)) -> ((10 = to_rep(l__split_discrs)) ->
  (((us1 = 10) and in_range1(10)) -> (((to_rep(k__split_discrs) = 10) and
  (is_empty1({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 = { rec__my_ordered_sets__m__set =
  k__split_fields } }) = true)) -> ((10 = to_rep(k__split_discrs)) ->
  ((is_empty1({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_ordered_sets__m__set =
  l__split_fields } }) = true) -> (((({ us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = temp___1122 } } = first({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_ordered_sets__m__set =
  l__split_fields } })) and (((bool_eq1(length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
  0) = true) and (bool_eq4({ us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = temp___1122 } }, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = no_element }
  }) = true)) or ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
  0) = true)) and ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = temp___1122 }
  }) = true) and (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = temp___1122 }
  }) = 1))))) and ((result = { us_split_fields__content1 = {
  rec__my_ordered_sets__m__cursor__node = c__split_fields } }) and
  (c__split_fields1 = { rec__my_ordered_sets__m__cursor__node = temp___1122
  }))) -> (((({ us_split_fields3 = { rec__my_ordered_sets__m__cursor__node =
  temp___1123 } } = next({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }, {
  us_split_fields3 = c__split_fields1 })) and (((match_bool(bool_eq4({
  us_split_fields3 = c__split_fields1 }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = no_element } }), true,
  bool_eq1(get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = c__split_fields1 }), length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields }
  }))) = true) and (bool_eq4({ us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = temp___1123 } }, {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = no_element }
  }) = true)) or ((not (match_bool(bool_eq4({ us_split_fields3 =
  c__split_fields1 }, { us_split_fields3 = {
  rec__my_ordered_sets__m__cursor__node = no_element } }), true,
  bool_eq1(get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = c__split_fields1 }), length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields }
  }))) = true)) and ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = temp___1123 }
  }) = true) and (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = { rec__my_ordered_sets__m__cursor__node = temp___1123 }
  }) = (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }), {
  us_split_fields3 = c__split_fields1 }) + 1)))))) and ((result1 = {
  us_split_fields__content1 = c__split_fields1 }) and (c__split_fields2 = {
  rec__my_ordered_sets__m__cursor__node = temp___1123 }))) ->
  ((((((((((length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields
  }) = (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields }
  }) + 1)) and (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  1) = true)) and (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  1)) = 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
  model__({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__2__container__fields })) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  model__({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_ordered_sets__m__set =
  l__split_fields } }), 1) = true)) and
  (forall i:int. (((1 <= i) and (i <= (find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  1) - 1))) -> (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
  i) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  i))))) and
  ((forall i:int. (((find(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
   1) <= i) and (i <= length({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields }
   }))) -> (get1(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
   i) = get1(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
   (i + 1))))) and
  (forall i:int. ((((find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  1) + 1) <= i) and (i <= (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields }
  }) + 1))) -> (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
  (i - 1)) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields }),
  i)))))) and (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_ordered_sets__m__set = l__split_fields } }),
  positions({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__2__container__fields }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__2__container__fields }), 1), 1) = true)) and
  ((result2 = { us_split_fields__content = { rec__my_ordered_sets__m__set =
  l__split_fields } }) and
  (l__split_fields1 = my_ordered_sets__m__insert__2__container__fields))) ->
  ((((((((((length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1
  }) = (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields1 }) + 1)) and (contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__2__container__fields1 }), 2) = true)) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  2)) = 2)) and (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields1 }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1
  })) = true)) and (included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  model__({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields1 }), 2) = true)) and
  (forall i:int. (((1 <= i) and (i <= (find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  2) - 1))) -> (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields1 }), i) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__2__container__fields1 }), i))))) and
  ((forall i:int. (((find(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
   2) <= i) and (i <= length({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields1 }))) -> (get1(elements({
   us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields1 }),
   i) = get1(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
   (i + 1))))) and
  (forall i:int. ((((find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  2) + 1) <= i) and (i <= (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields1 }) + 1))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields1 }),
  (i - 1)) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  i)))))) and (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields1 }), positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__2__container__fields1 }),
  2), 1) = true)) and ((result3 = { us_split_fields__content =
  l__split_fields1 }) and
  (l__split_fields2 = my_ordered_sets__m__insert__2__container__fields1))) ->
  (((((((contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  1) = true) and (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }) = true)) and
  ((bool_lt(get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 })), 1) = false) and (bool_lt(1,
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }))) = false))) and
  (((0 <  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 })) and
  (((forall i:int. (((1 <= i) and (i <= (get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
    us_split_fields3 = c__split_fields3 }) - 1))) -> (get1(elements({
    us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
    l__split_discrs }; us_split_fields1 =
    my_ordered_sets__m__insert__container__fields }), i) <  1))) and
  (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }) <  length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }))) and
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
    us_split_fields3 = c__split_fields3 }) + 1) <= i) and
    (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields })))) ->
    (1 <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
    i)))) and
  (match_bool(true, true, false) = true)) or
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
        { us_split_fields3 = c__split_fields3 }) + 1) <= i) and
        (i <= length3(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields
        })))) -> (1 <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
        i))))) and
  (match_bool(true, false, false) = true)))) or ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 }) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields })))) and
  (match_bool(true, of_int(1), false) = true)))) or
  ((not (forall i:int. (((1 <= i) and (i <= (get(positions({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        l__split_discrs }; us_split_fields1 =
        my_ordered_sets__m__insert__container__fields }), {
        us_split_fields3 = c__split_fields3 }) - 1))) -> (get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
        l__split_discrs }; us_split_fields1 =
        my_ordered_sets__m__insert__container__fields }), i) <  1)))) and
  (((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }) <  length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }))) and
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
    us_split_fields3 = c__split_fields3 }) + 1) <= i) and
    (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields })))) ->
    (1 <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
    i)))) and
  (match_bool(false, true, false) = true)) or
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
        { us_split_fields3 = c__split_fields3 }) + 1) <= i) and
        (i <= length3(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields
        })))) -> (1 <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
        i))))) and
  (match_bool(false, false, false) = true)))) or ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 }) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields })))) and
  (match_bool(false, of_int(1), false) = true)))))) or
  ((not (0 <  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }))) and (((get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 }) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }))) and
  (((forall i:int. ((((get(positions({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
    us_split_fields3 = c__split_fields3 }) + 1) <= i) and
    (i <= length3(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields })))) ->
    (1 <  get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__m__set__capacity = l__split_discrs };
    us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
    i)))) and
  (match_bool(of_int(1), true, false) = true)) or
  ((not (forall i:int. ((((get(positions({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
        { us_split_fields3 = c__split_fields3 }) + 1) <= i) and
        (i <= length3(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields
        })))) -> (1 <  get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__m__set__capacity = l__split_discrs };
        us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
        i))))) and
  (match_bool(of_int(1), false, false) = true)))) or ((not (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 }) <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields })))) and
  (match_bool(of_int(1), of_int(1), false) = true)))))) and
  (((contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), 1) = true) and
  ((((not (b = true)) and (oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  model__({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 })) = true)) and
  ((bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields })),
  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }))))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), n) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }), n)))))) and
  (oeq3(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  positions({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 })) = true))) or
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), 1) = true)) and
  ((((((((b = true) and (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields
  }) = (length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }) + 1))) and (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 })) = 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields
  })) = true)) and (included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  model__({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }), 1) = true)) and
  (forall i:int. (((1 <= i) and (i <= (get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }) - 1))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }),
  i) = get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), i))))) and
  ((forall i:int. (((get(positions({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
   us_split_fields3 = c__split_fields3 }) <= i) and (i <= length({
   us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields2 }))) ->
   (get1(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), i) = get1(elements({
   us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
   l__split_discrs }; us_split_fields1 =
   my_ordered_sets__m__insert__container__fields }), (i + 1))))) and
  (forall i:int. ((((get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }) + 1) <= i) and (i <= (length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }) + 1))) ->
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), (i - 1)) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__insert__container__fields }), i)))))) and
  (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }),
  get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }), 1) = true))))) and ((result4 = {
  us_split_fields__content = l__split_fields2 }) and
  (l__split_fields3 = my_ordered_sets__m__insert__container__fields))) ->
  ((not (b = true)) -> (((((((((length({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace_element__container__fields
  }) = length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 })) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace_element__container__fields
  }), get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace_element__container__fields
  }), { us_split_fields3 = c__split_fields3 })) = 1)) and (contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__replace_element__container__fields }), 1) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace_element__container__fields
  }), get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), get(positions({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 =
  c__split_fields3 }))) = true)) and (included_except(model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__replace_element__container__fields }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 }), 1) = true)) and
  (mapping_preserved_except(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace_element__container__fields
  }), positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace_element__container__fields
  }), { us_split_fields3 = c__split_fields3 }) = true)) and (oeq3(positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__replace_element__container__fields }), positions({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 })) = true)) and
  ((result5 = { us_split_fields__content = l__split_fields3 }) and
  (l__split_fields4 = my_ordered_sets__m__replace_element__container__fields))) ->
  ((((((oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields4 }), model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace__container__fields
  })) = true) and (oeq3(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace__container__fields }),
  positions({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields4 })) = true)) and
  (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace__container__fields }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace__container__fields }),
  1)) = 1)) and ((bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields4 })), length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__replace__container__fields }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields4 }))))) ->
  ((not (i = find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__replace__container__fields }),
  1))) -> (get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields4 }), i) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__replace__container__fields }), i))))))) and
  ((result6 = { us_split_fields__content = l__split_fields4 }) and
  (l__split_fields5 = my_ordered_sets__m__replace__container__fields))) ->
  ((forall temp___433:int. ((in_range3(temp___433) and ((1 <= temp___433) and
   (temp___433 <= (0 + length3(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields5 })))))) ->
   (exists i:us_rep1. ((has_key(positions({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields5 }), i) = true) and (get1(elements({
   us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields5 }), get(positions({
   us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields5 }),
   i)) = get1(elements({ us_split_discrs1 = {
   rec__my_ordered_sets__m__set__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields5 }), temp___433)))))) ->
  (((((oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = k__split_discrs };
  us_split_fields1 = my_ordered_sets__m__assign__target__fields }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields5 })) = true) and
  ((bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = k__split_discrs };
  us_split_fields1 = my_ordered_sets__m__assign__target__fields })),
  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields5 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__assign__target__fields }))))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__assign__target__fields }), n) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields5 }), n)))))) and
  (length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__assign__target__fields }) = length({ us_split_discrs1 =
  { rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields5 }))) and ((result7 = {
  us_split_fields__content = { rec__my_ordered_sets__m__set = k__split_fields
  } }) and
  (k__split_fields1 = my_ordered_sets__m__assign__target__fields))) ->
  ((((((oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__move__target__fields }), model__({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields1 })) = true) and
  ((bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = my_ordered_sets__m__move__target__fields })),
  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields1 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__move__target__fields }))))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__move__target__fields }), n) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields1 }), n)))))) and
  (length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields1 }) = length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__move__target__fields }))) and (length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__move__source__fields }) = 0)) and (((result8 = {
  us_split_fields__content = l__split_fields5 }) and
  (l__split_fields6 = my_ordered_sets__m__move__target__fields)) and
  ((result9 = { us_split_fields__content = k__split_fields1 }) and
  (k__split_fields2 = my_ordered_sets__m__move__source__fields)))) ->
  (((((oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = k__split_discrs };
  us_split_fields1 = my_ordered_sets__m__assign__target__fields1 }),
  model__({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields6 })) = true) and
  ((bool_eq1(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = k__split_discrs };
  us_split_fields1 = my_ordered_sets__m__assign__target__fields1 })),
  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields6 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__assign__target__fields1 }))))) -> (get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__assign__target__fields1 }), n) = get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields6 }), n)))))) and
  (length({ us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  k__split_discrs }; us_split_fields1 =
  my_ordered_sets__m__assign__target__fields1 }) = length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields6 }))) and
  ((result10 = { us_split_fields__content = k__split_fields2 }) and
  (k__split_fields3 = my_ordered_sets__m__assign__target__fields1))) ->
  ((contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields6 }), 1) = true) -> ((length({
  us_split_discrs1 = { rec__my_ordered_sets__m__set__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields6
  }) <  to_rep(l__split_discrs)) or (contains(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__m__set__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields6 }), 1) = true))))))))))))))))))))))))
