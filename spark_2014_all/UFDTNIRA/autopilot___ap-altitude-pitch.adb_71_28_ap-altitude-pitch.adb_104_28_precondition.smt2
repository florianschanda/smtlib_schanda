(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort feet 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 50000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (feet feet) Bool)
(declare-const dummy feet)
(declare-datatypes () ((feet__ref (mk_feet__ref (feet__content feet)))))
(define-fun feet__ref___projection ((a feet__ref)) feet (feet__content a))
(define-fun dynamic_invariant ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= 0 50000)) (in_range1 temp___expr_135)))
(declare-sort feetpermin 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 6000) x) (<= x 6000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (feetpermin feetpermin) Bool)
(declare-const dummy1 feetpermin)
(declare-datatypes () ((feetpermin__ref (mk_feetpermin__ref (feetpermin__content feetpermin)))))
(define-fun feetpermin__ref___projection ((a feetpermin__ref)) feetpermin (feetpermin__content a))
(define-fun dynamic_invariant1 ((temp___expr_153 Int) (temp___is_init_150 Bool) (temp___skip_constant_151 Bool) (temp___do_toplevel_152 Bool)) Bool (=> (or (= temp___is_init_150 true) (<= (- 6000) 6000)) (in_range2 temp___expr_153)))
(declare-sort machnumber 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (machnumber machnumber) Bool)
(declare-const dummy2 machnumber)
(declare-datatypes () ((machnumber__ref (mk_machnumber__ref (machnumber__content machnumber)))))
(define-fun machnumber__ref___projection ((a machnumber__ref)) machnumber (machnumber__content a))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 0 100)) (in_range3 temp___expr_159)))
(declare-sort pitchangle 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 10) x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (pitchangle pitchangle) Bool)
(declare-const dummy3 pitchangle)
(declare-datatypes () ((pitchangle__ref (mk_pitchangle__ref (pitchangle__content pitchangle)))))
(define-fun pitchangle__ref___projection ((a pitchangle__ref)) pitchangle (pitchangle__content a))
(define-fun dynamic_invariant3 ((temp___expr_165 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= (- 10) 20)) (in_range4 temp___expr_165)))
(declare-sort controlangle 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 45) x) (<= x 45)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (controlangle controlangle) Bool)
(declare-const dummy4 controlangle)
(declare-datatypes () ((controlangle__ref (mk_controlangle__ref (controlangle__content controlangle)))))
(define-fun controlangle__ref___projection ((a controlangle__ref)) controlangle (controlangle__content a))
(define-fun dynamic_invariant4 ((temp___expr_177 Int) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool)) Bool (=> (or (= temp___is_init_174 true) (<= (- 45) 45)) (in_range5 temp___expr_177)))
(declare-sort scaledata 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 100) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (scaledata scaledata) Bool)
(declare-const dummy5 scaledata)
(declare-datatypes () ((scaledata__ref (mk_scaledata__ref (scaledata__content scaledata)))))
(define-fun scaledata__ref___projection ((a scaledata__ref)) scaledata (scaledata__content a))
(define-fun dynamic_invariant5 ((temp___expr_189 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= (- 100) 100)) (in_range6 temp___expr_189)))
(declare-fun scale_movement (Int Int Int Int) Int)
(declare-fun scale_movement__function_guard (Int Int Int Int Int) Bool)
(assert (forall ((mach Int) (present Int) (target Int) (max Int)) (! (=> (and (and (and (and (dynamic_invariant2 mach true true true) (dynamic_invariant5 present true true true)) (dynamic_invariant5 target true true true)) (dynamic_invariant4 max true true true)) (< 0 max)) (let ((result (scale_movement mach present target max))) (and (and (<= (- max) result) (<= result max)) (dynamic_invariant4 result true false true)))) :pattern ((scale_movement mach present target max)))))
(declare-const present_altitude Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const target_altitude Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const mach Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const climb_rate Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const the_pitch Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort degreespersec 0)
(define-fun in_range7 ((x Int)) Bool (and (<= (- 180) x) (<= x 180)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (degreespersec degreespersec) Bool)
(declare-const dummy6 degreespersec)
(declare-datatypes () ((degreespersec__ref (mk_degreespersec__ref (degreespersec__content degreespersec)))))
(define-fun degreespersec__ref___projection ((a degreespersec__ref)) degreespersec (degreespersec__content a))
(define-fun dynamic_invariant6 ((temp___expr_183 Int) (temp___is_init_180 Bool) (temp___skip_constant_181 Bool) (temp___do_toplevel_182 Bool)) Bool (=> (or (= temp___is_init_180 true) (<= (- 180) 180)) (in_range7 temp___expr_183)))
(declare-sort floorfpm 0)
(define-fun in_range8 ((x Int)) Bool (and (<= (- 1000) x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq7 (floorfpm floorfpm) Bool)
(declare-const dummy7 floorfpm)
(declare-datatypes () ((floorfpm__ref (mk_floorfpm__ref (floorfpm__content floorfpm)))))
(define-fun floorfpm__ref___projection ((a floorfpm__ref)) floorfpm (floorfpm__content a))
(define-fun dynamic_invariant7 ((temp___expr_201 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= (- 1000) 1000)) (in_range8 temp___expr_201)))
(declare-sort degreespersec1 0)
(define-fun in_range9 ((x Int)) Bool (and (<= (- 180) x) (<= x 180)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq8 (degreespersec1 degreespersec1) Bool)
(declare-const dummy8 degreespersec1)
(declare-datatypes () ((degreespersec__ref1 (mk_degreespersec__ref1 (degreespersec__content1 degreespersec1)))))
(define-fun degreespersec__ref___2__projection ((a degreespersec__ref1)) degreespersec1 (degreespersec__content1 a))
(define-fun dynamic_invariant8 ((temp___expr_207 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= (- 180) 180)) (in_range9 temp___expr_207)))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const c11b Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const c12b Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const c13b Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const c16b Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const c17b Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const c20b Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const c21b Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const c22b Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const present_pitchrate Int)
(declare-const target_pitchrate Int)
(declare-const elevator_movement Int)
(declare-const target_climb_rate Int)
(declare-const floor_climb_rate Int)
(declare-const result__ Int)
(declare-const result__1 Int)
(declare-const target_angle Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const ap__altitude__pitch__rate__calc_pitchrate__present_pitchrate Int)
(declare-const result Int)
(declare-const present_pitchrate1 Int)
(declare-const result1 Int)
(declare-const result__2 Int)
(declare-const result2 Int)
(declare-const result__3 Int)
(declare-const result3 Int)
(declare-const result__4 Int)
(declare-const result4 Int)
(declare-const target_climb_rate1 Int)
(declare-const result5 Int)
(declare-const floor_climb_rate1 Int)
(declare-const result6 Int)
(declare-const floor_climb_rate2 Int)
(declare-const result7 Int)
(declare-const floor_climb_rate3 Int)
(declare-const result8 Int)
(declare-const result__5 Int)
(declare-const result9 Int)
(declare-const result__6 Int)
(declare-const result10 Int)
(declare-const result__7 Int)
(declare-const result11 Int)
(declare-const target_pitchrate1 Int)
(assert (in_range1 present_altitude))
(assert (in_range1 target_altitude))
(assert (in_range3 mach))
(assert (in_range2 climb_rate))
(assert (in_range4 the_pitch))
(assert (=> (<= (- 180) 180) (in_range9 present_pitchrate)))
(assert (=> (<= (- 180) 180) (in_range9 target_pitchrate)))
(assert (=> (<= (- 45) 45) (in_range5 elevator_movement)))
(assert (in_range7 ap__altitude__pitch__rate__calc_pitchrate__present_pitchrate))
(assert (= result present_pitchrate))
(assert (= present_pitchrate1 ap__altitude__pitch__rate__calc_pitchrate__present_pitchrate))
(assert (= present_altitude c11b))
(assert (in_range1 c11b))
(assert (= target_altitude c12b))
(assert (in_range1 c12b))
(assert (= climb_rate c13b))
(assert (in_range2 c13b))
(assert (=> (<= (- 1000) 1000) (in_range8 target_climb_rate)))
(assert (=> (<= (- 1000) 1000) (in_range8 floor_climb_rate)))
(assert (=> (<= (- 180) 180) (in_range9 result__)))
(assert (and (in_range8 floor_climb_rate1) (in_range8 target_climb_rate1)))
(assert (=> (<= (- 1000) 1000) (in_range8 target_climb_rate1)))
(assert (=> (<= (- 1000) 1000) (in_range8 floor_climb_rate1)))
(assert (= result8 result__))
(assert (= result__5 (div1 (- target_climb_rate1 floor_climb_rate1) 12)))
(assert (=> (< 10 result__5) (= result9 result__5)))
(assert (=> (< 10 result__5) (= result__6 10)))
(assert (=> (not (< 10 result__5)) (=> (< result__5 (- 10)) (= result10 result__5))))
(assert (=> (not (< 10 result__5)) (=> (< result__5 (- 10)) (= result__7 (- 10)))))
(assert (=> (not (< 10 result__5)) (=> (not (< result__5 (- 10))) (= result__7 result__5))))
(assert (=> (not (< 10 result__5)) (= result__6 result__7)))
(assert (= result11 target_pitchrate))
(assert (= target_pitchrate1 result__6))
(assert (= present_pitchrate1 c20b))
(assert (in_range9 c20b))
(assert (= target_pitchrate1 c21b))
(assert (in_range9 c21b))
(assert (= mach c22b))
(assert (in_range3 c22b))
(assert (=> (<= (- 45) 45) (in_range5 target_angle)))
(assert (not (< 0 30)))
(check-sat)
(exit)
