(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__flight_manager__engine_values__x_speed integer) (rec__flight_manager__engine_values__y_speed integer)))))
(define-fun us_split_fields_X_Speed__projection ((a us_split_fields)) integer (rec__flight_manager__engine_values__x_speed a))
(define-fun us_split_fields_Y_Speed__projection ((a us_split_fields)) integer (rec__flight_manager__engine_values__y_speed a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__flight_manager__engine_values__x_speed (us_split_fields1 a))) (to_rep (rec__flight_manager__engine_values__x_speed (us_split_fields1 b)))) (= (to_rep (rec__flight_manager__engine_values__y_speed (us_split_fields1 a))) (to_rep (rec__flight_manager__engine_values__y_speed (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const flight_manager__engine_values__x_speed__first__bit Int)
(declare-const flight_manager__engine_values__x_speed__last__bit Int)
(declare-const flight_manager__engine_values__x_speed__position Int)
(assert (<= 0 flight_manager__engine_values__x_speed__first__bit))
(assert (< flight_manager__engine_values__x_speed__first__bit flight_manager__engine_values__x_speed__last__bit))
(assert (<= 0 flight_manager__engine_values__x_speed__position))
(declare-const flight_manager__engine_values__y_speed__first__bit Int)
(declare-const flight_manager__engine_values__y_speed__last__bit Int)
(declare-const flight_manager__engine_values__y_speed__position Int)
(assert (<= 0 flight_manager__engine_values__y_speed__first__bit))
(assert (< flight_manager__engine_values__y_speed__first__bit flight_manager__engine_values__y_speed__last__bit))
(assert (<= 0 flight_manager__engine_values__y_speed__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((engine_values__ref (mk_engine_values__ref (engine_values__content us_rep)))))
(define-fun engine_values__ref___projection ((a engine_values__ref)) us_rep (engine_values__content a))
(declare-fun my_abs (Int) Int)
(declare-fun my_abs__function_guard (Int Int) Bool)
(assert (forall ((i Int)) (! (=> (dynamic_invariant i true true true true) (dynamic_invariant (my_abs i) true false true true)) :pattern ((my_abs i)))))
(declare-const position_x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const position_y Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const target_x Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const target_y Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c4b Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const c7b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) (- 100)))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 100))
(declare-const result____split_fields integer)
(declare-const result____split_fields1 integer)
(declare-const o Int)
(declare-const flight_manager__set_engine_speed__C4b__assume Int)
(declare-const result____split_fields2 integer)
(declare-const result____split_fields3 integer)
(declare-const result integer)
(declare-const result1 integer)
(declare-const result____split_fields4 integer)
(declare-const result____split_fields5 integer)
(declare-const result2 integer)
(declare-const result3 integer)
(declare-const result____split_fields6 integer)
(declare-const result____split_fields7 integer)
(declare-const result4 integer)
(declare-const result5 integer)
(declare-const result____split_fields8 integer)
(declare-const result____split_fields9 integer)
(declare-const result6 us_split_fields__ref)
(declare-const result____split_fields10 us_split_fields)
(define-fun result____split_fields11 () us_split_fields (mk___split_fields result____split_fields6 result____split_fields7))
(define-fun result____split_fields12 () us_split_fields (mk___split_fields result____split_fields4 result____split_fields5))
(define-fun result____split_fields13 () us_split_fields__ref (mk___split_fields__ref (mk___split_fields result____split_fields result____split_fields1)))
(assert (in_range1 position_x))
(assert (in_range1 position_y))
(assert (in_range1 target_x))
(assert (in_range1 target_y))
(assert (=> (< target_x position_x) (= (mk___split_fields__ref (mk___split_fields result result1)) result____split_fields13)))
(assert (=> (< target_x position_x) (= rliteral result____split_fields4)))
(assert (=> (< target_x position_x) (= result____split_fields1 result____split_fields5)))
(assert (=> (not (< target_x position_x)) (=> (< position_x target_x) (= (mk___split_fields__ref (mk___split_fields result2 result3)) result____split_fields13))))
(assert (=> (not (< target_x position_x)) (=> (< position_x target_x) (= rliteral1 result____split_fields6))))
(assert (=> (not (< target_x position_x)) (=> (< position_x target_x) (= result____split_fields1 result____split_fields7))))
(assert (=> (not (< target_x position_x)) (=> (not (< position_x target_x)) (= result____split_fields result____split_fields6))))
(assert (=> (not (< target_x position_x)) (=> (not (< position_x target_x)) (= result____split_fields1 result____split_fields7))))
(assert (=> (not (< target_x position_x)) (=> (not (< position_x target_x)) (= result____split_fields11 (mk___split_fields result____split_fields2 result____split_fields3)))))
(assert (=> (not (< target_x position_x)) (= result____split_fields12 result____split_fields11)))
(assert (=> (< target_y position_y) (= result4 result____split_fields4)))
(assert (=> (< target_y position_y) (= result5 result____split_fields5)))
(assert (=> (< target_y position_y) (= result____split_fields4 result____split_fields8)))
(assert (=> (< target_y position_y) (= rliteral result____split_fields9)))
(assert (=> (not (< target_y position_y)) (=> (< position_y target_y) (= result6 (mk___split_fields__ref result____split_fields12)))))
(assert (=> (not (< target_y position_y)) (=> (< position_y target_y) (= result____split_fields10 (mk___split_fields result____split_fields4 rliteral1)))))
(assert (=> (not (< target_y position_y)) (=> (not (< position_y target_y)) (= result____split_fields10 result____split_fields12))))
(assert (=> (not (< target_y position_y)) (= (mk___split_fields result____split_fields8 result____split_fields9) result____split_fields10)))
(assert (and (= o (- position_x target_x)) (in_range1 (- position_x target_x))))
(assert (and (= flight_manager__set_engine_speed__C4b__assume (my_abs o)) (in_range1 flight_manager__set_engine_speed__C4b__assume)))
(assert (= flight_manager__set_engine_speed__C4b__assume c4b))
(assert (in_range1 c4b))
(assert (< c4b 10))
(assert (not (in_range1 (* (to_rep result____split_fields8) c4b))))
(check-sat)
(exit)
