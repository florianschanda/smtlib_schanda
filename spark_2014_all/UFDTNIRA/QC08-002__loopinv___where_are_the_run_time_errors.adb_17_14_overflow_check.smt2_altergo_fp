(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic input : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic x : int

logic y : int

logic k : int

logic o : int

logic temp___134 : int

logic temp___133 : int

logic temp___132 : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic result : int

logic k1 : int

logic result1 : int

logic x1 : int

logic result2 : int

logic y1 : int

logic result3 : int

logic y2 : int

logic result4 : int

logic x2 : int

logic x3 : int

logic y3 : int

logic result5 : int

logic y4 : int

logic result6 : int

logic x4 : int

logic x5 : int

logic y5 : int

logic x6 : int

logic y6 : int

logic x7 : int

logic y7 : int

logic x8 : int

logic y8 : int

logic result7 : bool

logic result8 : int

logic y9 : int

axiom H : in_range(input)

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range(x))

axiom H2 : (((- 2147483648) <= 2147483647) -> in_range(y))

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range(k))

axiom H4 : (result = k)

axiom H5 : (k1 = comp_div(input,100))

axiom H6 : (result1 = x)

axiom H7 : (x1 = 2)

axiom H8 : ((o = (k1 + 5)) and in_range((k1 + 5)))

axiom H9 : (result2 = y)

axiom H10 : (y1 = o)

axiom H11 : ((x1 <  10) -> (temp___134 = y1))

axiom H12 : ((x1 <  10) -> (temp___133 = y1))

axiom H13 : ((x1 <  10) -> (temp___132 = x1))

axiom H14 : ((x1 <  10) -> ((o1 = (y1 + 3)) and in_range((y1 + 3))))

axiom H15 : ((x1 <  10) -> (y1 = result3))

axiom H16 : ((x1 <  10) -> (y2 = o1))

axiom H17 : ((x1 <  10) -> ((o2 = (x1 + 1)) and in_range((x1 + 1))))

axiom H18 : ((x1 <  10) -> (x1 = result4))

axiom H19 : ((x1 <  10) -> (x2 = o2))

axiom H20 : ((x1 <  10) -> (y3 = (temp___134 + (3 * (x3 - 2)))))

axiom H21 : ((x1 <  10) -> (3 <= x3))

axiom H22 : ((x1 <  10) -> ((((- 2147483648) <= 2147483647) ->
  in_range(x3)) and (((- 2147483648) <= 2147483647) -> in_range(y3))))

axiom H23 : ((x1 <  10) -> (not (x3 <  10)))

axiom H24 : ((x1 <  10) -> (y3 = y5))

axiom H25 : ((x1 <  10) -> (x3 = x5))

axiom H26 : ((x1 <  10) -> (y6 = y3))

axiom H27 : ((x1 <  10) -> (x6 = x3))

axiom H28 : ((x1 <  10) -> (y7 = y5))

axiom H29 : ((x1 <  10) -> (x7 = x5))

axiom H30 : ((x1 <  10) -> (y8 = y6))

axiom H31 : ((x1 <  10) -> (x8 = x6))

axiom H32 : ((not (x1 <  10)) -> (y1 = y7))

axiom H33 : ((not (x1 <  10)) -> (x1 = x7))

axiom H34 : ((not (x1 <  10)) -> (y8 = y1))

axiom H35 : ((not (x1 <  10)) -> (x8 = x1))

axiom H36 : ((o10 = (3 * k1)) and in_range((3 * k1)))

axiom H37 : (o11 = (o10 + 100))

axiom H38 : ((o12 = o11) and in_range(o11))

axiom H39 : (((43 <  o12) -> (result7 = true)) and ((not (43 <  o12)) ->
  (result7 = false)))

axiom H40 : (result7 = true)

axiom H41 : ((o13 = (y7 + 1)) and in_range((y7 + 1)))

axiom H42 : (result8 = y7)

axiom H43 : (y9 = o13)

axiom H44 : ((o14 = (x7 - y9)) and in_range((x7 - y9)))

axiom H45 : (o15 = comp_div(x7,o14))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range(o15)
