(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type tfixedB

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

logic dummy : tfixedB

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic to_fixed : tfixedB -> int

logic of_fixed : int -> tfixedB

logic user_eq : tfixedB, tfixedB -> bool

predicate pos_div_relation(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult : int, int -> int

axiom fxp_mult_def :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation(fxp_mult(x, y), (x * y),
  1048576)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and
  (y <  0)))) -> pos_div_relation((-fxp_mult(x, y)), (-(x * y)),
  1048576)))))))

logic fxp_div : int, int -> int

axiom fxp_div_def :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. (((x = 0) -> (fxp_div(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) -> pos_div_relation(fxp_div(x,
  y), (x * 1048576), y)) and ((not ((0 <  x) and (0 <  y))) ->
  ((((x <  0) and (y <  0)) -> pos_div_relation(fxp_div(x, y),
  ((-x) * 1048576), (-y))) and ((not ((x <  0) and (y <  0))) ->
  ((((x <  0) and (0 <  y)) -> pos_div_relation((-fxp_div(x, y)),
  ((-x) * 1048576), y)) and ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and
  (y <  0)) -> pos_div_relation((-fxp_div(x, y)), (x * 1048576),
  (-y)))))))))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. (((x = 0) -> (fxp_div_int(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation(fxp_div_int(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x,
  y), (-x), (-y))) and ((not ((x <  0) and (y <  0))) -> ((((x <  0) and
  (0 <  y)) -> pos_div_relation((-fxp_div_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation((-fxp_div_int(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int : int, int -> int

axiom fxp_div_result_int_def :
  (forall x:int.
  (forall y:int [fxp_div_result_int(x, y)]. (((x = 0) ->
  (fxp_div_result_int(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna(fxp_div_result_int(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna(fxp_div_result_int(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), x, (-y)))))))))))))

logic to_int : int -> int

axiom to_int_def :
  (forall x:int [to_int(x)]. (((x = 0) -> (to_int(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation(to_int(x), x,
  1048576)) and ((not (0 <  x)) -> pos_div_relation((-to_int(x)), (-x),
  1048576))))))

logic of_real : real -> int

axiom inversion_axiom :
  (forall x:tfixedB [to_fixed(x)]. (of_fixed(to_fixed(x)) = x))

axiom range_axiom : (forall x:tfixedB. in_range(to_fixed(x)))

axiom coerce_axiom :
  (forall x:int [to_fixed(of_fixed(x))]. (in_range(x) ->
  (to_fixed(of_fixed(x)) = x)))

type tfixedB__ref = { tfixedB__content : tfixedB
}

function tfixedB__ref___projection(a: tfixedB__ref) : tfixedB =
  (a).tfixedB__content

type fixed

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2146435072))

logic dummy1 : fixed

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic to_fixed1 : fixed -> int

logic of_fixed1 : int -> fixed

logic user_eq1 : fixed, fixed -> bool

predicate pos_div_relation1(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna1(res: int, num: int, den: int) =
  (((num = 0) -> (res = 0)) and ((not (num = 0)) ->
  (((num = (comp_div(num,den) * den)) -> (res = comp_div(num,den))) and
  ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult1 : int, int -> int

axiom fxp_mult_def1 :
  (forall x:int.
  (forall y:int [fxp_mult1(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult1(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation1(fxp_mult1(x, y), (x * y),
  1048576)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and
  (y <  0)))) -> pos_div_relation1((-fxp_mult1(x, y)), (-(x * y)),
  1048576)))))))

logic fxp_div1 : int, int -> int

axiom fxp_div_def1 :
  (forall x:int.
  (forall y:int [fxp_div1(x, y)]. (((x = 0) -> (fxp_div1(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation1(fxp_div1(x, y), (x * 1048576), y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation1(fxp_div1(x, y), ((-x) * 1048576), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation1((-fxp_div1(x, y)), ((-x) * 1048576), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation1((-fxp_div1(x, y)), (x * 1048576), (-y)))))))))))))

logic fxp_div_int1 : int, int -> int

axiom fxp_div_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_int1(x, y)]. (((x = 0) -> (fxp_div_int1(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation1(fxp_div_int1(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation1(fxp_div_int1(x, y), (-x), (-y))) and ((not ((x <  0) and
  (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation1((-fxp_div_int1(x, y)), (-x), y)) and ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation1((-fxp_div_int1(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int1 : int, int -> int

axiom fxp_div_result_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_result_int1(x, y)]. (((x = 0) ->
  (fxp_div_result_int1(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna1(fxp_div_result_int1(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna1(fxp_div_result_int1(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna1((-fxp_div_result_int1(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna1((-fxp_div_result_int1(x, y)), x, (-y)))))))))))))

logic to_int1 : int -> int

axiom to_int_def1 :
  (forall x:int [to_int1(x)]. (((x = 0) -> (to_int1(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation1(to_int1(x), x,
  1048576)) and ((not (0 <  x)) -> pos_div_relation1((-to_int1(x)), (-x),
  1048576))))))

logic of_real1 : real -> int

axiom inversion_axiom1 :
  (forall x:fixed [to_fixed1(x)]. (of_fixed1(to_fixed1(x)) = x))

axiom range_axiom1 : (forall x:fixed. in_range1(to_fixed1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_fixed1(of_fixed1(x))]. (in_range1(x) ->
  (to_fixed1(of_fixed1(x)) = x)))

type fixed__ref = { fixed__content : fixed
}

function fixed__ref___projection(a: fixed__ref) : fixed = (a).fixed__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic t1 : fixed

logic t2 : fixed

logic t3 : fixed

logic t4 : fixed

logic t5 : fixed

logic t6 : fixed

logic t7 : fixed

logic t8 : fixed

logic t9 : fixed

logic t10 : fixed

logic res : fixed

logic pi_compute__leibniz_fixed__result : fixed

logic o : fixed

logic o1 : fixed

logic o2 : fixed

logic o3 : fixed

logic o4 : fixed

logic o5 : fixed

logic o6 : fixed

logic o7 : fixed

logic o8 : fixed

logic o9 : fixed

logic o10 : fixed

logic result : fixed

logic t11 : fixed

logic result1 : fixed

logic t21 : fixed

logic result2 : fixed

logic t31 : fixed

logic result3 : fixed

logic t41 : fixed

logic result4 : fixed

logic t51 : fixed

logic result5 : fixed

logic t61 : fixed

logic result6 : fixed

logic t71 : fixed

logic result7 : fixed

logic t81 : fixed

logic result8 : fixed

logic t91 : fixed

logic result9 : fixed

logic t101 : fixed

logic result10 : fixed

logic res1 : fixed

logic result11 : fixed

logic pi_compute__leibniz_fixed__result1 : fixed

logic pi_compute__leibniz_fixed__result2 : fixed

logic pi_compute__leibniz_fixed__result3 : fixed

logic t12 : fixed

logic t22 : fixed

logic t32 : fixed

logic t42 : fixed

logic t52 : fixed

logic t62 : fixed

logic t72 : fixed

logic t82 : fixed

logic t92 : fixed

logic t102 : fixed

logic res2 : fixed

logic pi_compute__leibniz_fixed__result4 : fixed

logic t13 : fixed

logic t23 : fixed

logic t33 : fixed

logic t43 : fixed

logic t53 : fixed

logic t63 : fixed

logic t73 : fixed

logic t83 : fixed

logic t93 : fixed

logic t103 : fixed

logic res3 : fixed

logic pi_compute__leibniz_fixed__result5 : fixed

axiom H : (to_fixed1(o) = 1048576)

axiom H1 : (result = t1)

axiom H2 : (t11 = o)

axiom H3 : (to_fixed1(o1) = 349525)

axiom H4 : (result1 = t2)

axiom H5 : (t21 = o1)

axiom H6 : (to_fixed1(o2) = 209715)

axiom H7 : (result2 = t3)

axiom H8 : (t31 = o2)

axiom H9 : (to_fixed1(o3) = 149796)

axiom H10 : (result3 = t4)

axiom H11 : (t41 = o3)

axiom H12 : (to_fixed1(o4) = 116508)

axiom H13 : (result4 = t5)

axiom H14 : (t51 = o4)

axiom H15 : (to_fixed1(o5) = 95325)

axiom H16 : (result5 = t6)

axiom H17 : (t61 = o5)

axiom H18 : (to_fixed1(o6) = 80659)

axiom H19 : (result6 = t7)

axiom H20 : (t71 = o6)

axiom H21 : (to_fixed1(o7) = 69905)

axiom H22 : (result7 = t8)

axiom H23 : (t81 = o7)

axiom H24 : (to_fixed1(o8) = 61680)

axiom H25 : (result8 = t9)

axiom H26 : (t91 = o8)

axiom H27 : (to_fixed1(o9) = 55188)

axiom H28 : (result9 = t10)

axiom H29 : (t101 = o9)

 (* File "pi_compute.adb", line 7, characters 0-0 *)
goal WP_parameter_def :
  in_range((((to_fixed1(t11) - to_fixed1(t21)) + to_fixed1(t31)) - to_fixed1(t41)))
