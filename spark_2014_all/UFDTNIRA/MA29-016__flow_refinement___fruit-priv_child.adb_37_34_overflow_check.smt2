(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun price_of_fruit_salad (Int us_private Int Int Int Int us_private Int Int) Int)
(declare-fun price_of_fruit_salad__function_guard (Int Int us_private Int Int Int Int us_private Int Int) Bool)
(assert (forall ((fruit__apples Int) (fruit__oranges Int) (fruit__price_of_apple Int) (fruit__price_of_orange Int) (fruit__pub_child__apples_in_fruit_salad Int) (fruit__pub_child__oranges_in_fruit_salad Int) (fruit__priv_child__extra_cost Int)) (forall ((fruit__fruits us_private) (fruit__pub_child__fruit_salad us_private)) (! (=> (and (and (and (and (and (and (dynamic_invariant fruit__apples true true true) (dynamic_invariant fruit__oranges true true true)) (dynamic_invariant fruit__price_of_apple true true true)) (dynamic_invariant fruit__price_of_orange true true true)) (dynamic_invariant fruit__pub_child__apples_in_fruit_salad true true true)) (dynamic_invariant fruit__pub_child__oranges_in_fruit_salad true true true)) (dynamic_invariant fruit__priv_child__extra_cost true true true)) (dynamic_invariant (price_of_fruit_salad fruit__apples fruit__fruits fruit__oranges fruit__price_of_apple fruit__price_of_orange fruit__pub_child__apples_in_fruit_salad fruit__pub_child__fruit_salad fruit__pub_child__oranges_in_fruit_salad fruit__priv_child__extra_cost) true false true)) :pattern ((price_of_fruit_salad fruit__apples fruit__fruits fruit__oranges fruit__price_of_apple fruit__price_of_orange fruit__pub_child__apples_in_fruit_salad fruit__pub_child__fruit_salad fruit__pub_child__oranges_in_fruit_salad fruit__priv_child__extra_cost))))))
(declare-fun get_price_of_apple (Int) Int)
(declare-fun get_price_of_apple__function_guard (Int Int) Bool)
(assert (forall ((fruit__price_of_apple Int)) (! (=> (dynamic_invariant fruit__price_of_apple true true true) (dynamic_invariant (get_price_of_apple fruit__price_of_apple) true false true)) :pattern ((get_price_of_apple fruit__price_of_apple)))))
(assert (forall ((fruit__price_of_apple Int)) (! (=> (dynamic_invariant fruit__price_of_apple true true true) (= (get_price_of_apple fruit__price_of_apple) fruit__price_of_apple)) :pattern ((get_price_of_apple fruit__price_of_apple)))))
(declare-fun get_price_of_orange (Int) Int)
(declare-fun get_price_of_orange__function_guard (Int Int) Bool)
(assert (forall ((fruit__price_of_orange Int)) (! (=> (dynamic_invariant fruit__price_of_orange true true true) (dynamic_invariant (get_price_of_orange fruit__price_of_orange) true false true)) :pattern ((get_price_of_orange fruit__price_of_orange)))))
(assert (forall ((fruit__price_of_orange Int)) (! (=> (dynamic_invariant fruit__price_of_orange true true true) (= (get_price_of_orange fruit__price_of_orange) fruit__price_of_orange)) :pattern ((get_price_of_orange fruit__price_of_orange)))))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const apples Int)
(declare-const oranges Int)
(declare-const price_of_apple Int)
(declare-const price_of_orange Int)
(declare-const apples_in_fruit_salad Int)
(declare-const oranges_in_fruit_salad Int)
(declare-const profit Int)
(declare-const extra_cost Int)
(declare-const money Int)
(declare-const fruit_salads Int)
(declare-const fruit_salad us_private)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const apples1 Int)
(declare-const oranges1 Int)
(declare-const price_of_apple1 Int)
(declare-const price_of_orange1 Int)
(declare-const extra_cost1 Int)
(declare-const fruits us_private)
(declare-const fruit__pub_child__make_all_fruit_salads__fruit_salads_made Int)
(declare-const result Int)
(declare-const fruit_salads1 Int)
(declare-const result1 Int)
(declare-const money1 Int)
(declare-const result2 Int)
(declare-const money2 Int)
(assert (=> (<= 0 2147483647) (in_range1 profit)))
(assert (in_range1 extra_cost))
(assert (in_range1 apples))
(assert (in_range1 oranges))
(assert (in_range1 price_of_apple))
(assert (in_range1 price_of_orange))
(assert (in_range1 apples_in_fruit_salad))
(assert (in_range1 oranges_in_fruit_salad))
(assert (=> (<= 0 2147483647) (in_range1 money)))
(assert (=> (<= 0 2147483647) (in_range1 fruit_salads)))
(assert (and (and (and (and (and (in_range1 fruit__pub_child__make_all_fruit_salads__fruit_salads_made) (in_range1 apples1)) (in_range1 oranges1)) (in_range1 price_of_apple1)) (in_range1 price_of_orange1)) (in_range1 extra_cost1)))
(assert (= result fruit_salads))
(assert (= fruit_salads1 fruit__pub_child__make_all_fruit_salads__fruit_salads_made))
(assert (and (= o (price_of_fruit_salad apples1 fruits oranges1 price_of_apple1 price_of_orange1 apples_in_fruit_salad fruit_salad oranges_in_fruit_salad extra_cost1)) (in_range1 o)))
(assert (= o1 (* fruit_salads1 o)))
(assert (and (= o2 o1) (in_range o1)))
(assert (and (= o3 o2) (in_range1 o2)))
(assert (= result1 money))
(assert (= money1 o3))
(assert (and (= o4 (get_price_of_apple price_of_apple1)) (and (in_range1 o4) (= o4 price_of_apple1))))
(assert (= o5 (* apples1 o4)))
(assert (and (= o6 o5) (in_range o5)))
(assert (= o7 (+ money1 o6)))
(assert (and (= o8 o7) (in_range o7)))
(assert (and (= o9 o8) (in_range1 o8)))
(assert (= result2 money1))
(assert (= money2 o9))
(assert (and (= o10 (get_price_of_orange price_of_orange1)) (and (in_range1 o10) (= o10 price_of_orange1))))
(assert (= o11 (* oranges1 o10)))
(assert (not (in_range o11)))
(check-sat)
(exit)
