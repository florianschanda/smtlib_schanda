(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(declare-fun divides (Int Int) Bool)
(declare-fun divides__function_guard (Bool Int Int) Bool)
(assert true)
(assert (forall ((a Int) (b Int)) (! (= (= (divides a b) true) (= (mod2 b a) 0)) :pattern ((divides a b)))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const an Int)
(declare-const bn Int)
(declare-const c Int)
(declare-const math_euclid__gcd__result Int)
(declare-const o Int)
(declare-const temp___134 Int)
(declare-const temp___133 Int)
(declare-const temp___132 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const x Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const x1 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Bool)
(declare-const x2 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const c1 Int)
(declare-const result Int)
(declare-const an1 Int)
(declare-const result1 Int)
(declare-const bn1 Int)
(declare-const result2 Int)
(declare-const c2 Int)
(declare-const result3 Int)
(declare-const an2 Int)
(declare-const result4 Int)
(declare-const bn2 Int)
(declare-const an3 Int)
(declare-const bn3 Int)
(declare-const c3 Int)
(declare-const result5 Int)
(declare-const c4 Int)
(declare-const result6 Int)
(declare-const an4 Int)
(declare-const result7 Int)
(declare-const bn4 Int)
(declare-const an5 Int)
(declare-const bn5 Int)
(declare-const c5 Int)
(declare-const an6 Int)
(declare-const bn6 Int)
(declare-const c6 Int)
(declare-const an7 Int)
(declare-const bn7 Int)
(declare-const c7 Int)
(declare-const an8 Int)
(declare-const bn8 Int)
(declare-const c8 Int)
(declare-const an9 Int)
(declare-const bn9 Int)
(declare-const c9 Int)
(declare-const an10 Int)
(declare-const bn10 Int)
(declare-const c10 Int)
(declare-const result8 int__ref)
(declare-const math_euclid__gcd__result1 Int)
(declare-const math_euclid__gcd__result2 int__ref)
(declare-const math_euclid__gcd__result3 Int)
(declare-const an11 int__ref)
(declare-const bn11 int__ref)
(declare-const c11 int__ref)
(declare-const math_euclid__gcd__result4 int__ref)
(declare-const an12 Int)
(declare-const bn12 Int)
(declare-const c12 Int)
(declare-const math_euclid__gcd__result5 Int)
(declare-const result9 Bool)
(declare-const result10 Bool)
(declare-const result11 Int)
(assert (in_range2 a))
(assert (in_range2 b))
(assert (and (and (and (= (mk_int__ref result) (mk_int__ref an)) (= an1 a)) (and (in_range2 an1) (and (and (and (= o b) (in_range1 b)) (and (= (mk_int__ref result1) (mk_int__ref bn)) (= bn1 o))) (and (in_range1 bn1) (and (=> (<= 1 2147483647) (in_range2 c)) (and (ite (not (= bn1 0)) (and (and (and (= temp___134 c) (and (= temp___133 bn1) (and (= temp___132 an1) (and (and (= (mk_int__ref result2) (mk_int__ref c)) (= c2 an1)) (and (and (and (= o1 bn1) (in_range2 bn1)) (and (= an1 result3) (= an2 o1))) (and (and (and (= o2 (mod2 c2 bn1)) (in_range1 (mod2 c2 bn1))) (and (= bn1 result4) (= bn2 o2))) (and (forall ((x3 Int)) (=> (and (<= 1 x3) (<= x3 2147483647)) (= (and (= (divides x3 c2) true) (= (divides x3 an2) true)) (and (= (divides x3 an2) true) (or (= (divides an2 c2) true) (= (divides x3 (mod2 c2 an2)) true)))))) (and (forall ((x3 Int)) (=> (and (<= 1 x3) (<= x3 2147483647)) (= (and (= (divides x3 a) true) (= (divides x3 b) true)) (and (= (divides x3 an3) true) (or (= bn3 0) (= (divides x3 bn3) true)))))) (and (and (and (=> (<= 1 2147483647) (in_range2 an3)) (=> (<= 0 2147483647) (in_range1 bn3))) (=> (<= 1 2147483647) (in_range2 c3))) (= bn3 0)))))))))) (and (and (= c3 c7) (and (= bn3 bn7) (= an3 an7))) (and (= c8 c3) (and (= bn8 bn3) (= an8 an3))))) (and (and (= (mk_int__ref c9) (mk_int__ref c7)) (and (= (mk_int__ref bn9) (mk_int__ref bn7)) (= (mk_int__ref an9) (mk_int__ref an7)))) (and (= c10 c8) (and (= bn10 bn8) (= an10 an8))))) (and (and (= (mk_int__ref c9) (mk_int__ref c)) (and (= bn1 bn9) (= an1 an9))) (and (= c10 c1) (and (= bn10 bn1) (= an10 an1))))) (and (= (divides an9 an9) true) (and (= (divides an9 a) true) (and (= (divides an9 b) true) (and (forall ((x3 Int)) (=> (and (<= (+ an9 1) x3) (<= x3 (ite (< a b) a b))) (not (and (= (divides x3 a) true) (= (divides x3 b) true))))) (and (and (= math_euclid__gcd__result2 (mk_int__ref math_euclid__gcd__result1)) (= math_euclid__gcd__result3 math_euclid__gcd__result1)) (and (= result8 (mk_int__ref math_euclid__gcd__result)) (= math_euclid__gcd__result1 an9))))))))))))) (and (and (= math_euclid__gcd__result4 math_euclid__gcd__result2) (and (= c11 (mk_int__ref c9)) (and (= bn11 (mk_int__ref bn9)) (= an11 (mk_int__ref an9))))) (and (= math_euclid__gcd__result5 math_euclid__gcd__result3) (and (= c12 c10) (and (= bn12 bn10) (= an12 an10)))))))
(assert (= result11 (int__content math_euclid__gcd__result4)))
(assert (not (= (divides (int__content math_euclid__gcd__result4) a) true)))
(check-sat)
(exit)
