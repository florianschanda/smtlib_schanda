(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const p Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const c Int)
(declare-const d Int)
(declare-const q Int)
(declare-const r Int)
(declare-const w Int)
(declare-const x Int)
(declare-const y Int)
(declare-const temp___159 Int)
(declare-const temp___158 Int)
(declare-const temp___157 Int)
(declare-const temp___156 Int)
(declare-const temp___155 Int)
(declare-const temp___154 Int)
(declare-const temp___153 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const q1 Int)
(declare-const r1 Int)
(declare-const w1 Int)
(declare-const result Int)
(declare-const c1 Int)
(declare-const result1 Int)
(declare-const d1 Int)
(declare-const result2 Int)
(declare-const x1 Int)
(declare-const result3 Int)
(declare-const y1 Int)
(declare-const c2 Int)
(declare-const d2 Int)
(declare-const q2 Int)
(declare-const r2 Int)
(declare-const w2 Int)
(declare-const x2 Int)
(declare-const y2 Int)
(declare-const result4 Int)
(declare-const q3 Int)
(declare-const result5 Int)
(declare-const r3 Int)
(declare-const result6 Int)
(declare-const w3 Int)
(declare-const result7 Int)
(declare-const c3 Int)
(declare-const result8 Int)
(declare-const d3 Int)
(declare-const result9 Int)
(declare-const x3 Int)
(declare-const result10 Int)
(declare-const y3 Int)
(declare-const c4 int__ref)
(declare-const d4 int__ref)
(declare-const q4 int__ref)
(declare-const r4 int__ref)
(declare-const w4 int__ref)
(declare-const x4 int__ref)
(declare-const y4 int__ref)
(declare-const c5 Int)
(declare-const d5 Int)
(declare-const q5 Int)
(declare-const r5 Int)
(declare-const w5 Int)
(declare-const x5 Int)
(declare-const y5 Int)
(declare-const c6 int__ref)
(declare-const d6 int__ref)
(declare-const q6 int__ref)
(declare-const r6 int__ref)
(declare-const w6 int__ref)
(declare-const x6 int__ref)
(declare-const y6 int__ref)
(declare-const c7 Int)
(declare-const d7 Int)
(declare-const q7 Int)
(declare-const r7 Int)
(declare-const w7 Int)
(declare-const x7 Int)
(declare-const y7 Int)
(assert (in_range1 b))
(assert (in_range1 p))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 d)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 q)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 r)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 w)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 x)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 y)))
(assert (= result c))
(assert (= c1 p))
(assert (= result1 d))
(assert (= d1 b))
(assert (= result2 x))
(assert (= x1 0))
(assert (= result3 y))
(assert (= y1 1))
(assert (not (= d1 1)))
(assert (and (and (and (and (and (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 x2)) (=> (<= (- 2147483648) 2147483647) (in_range1 y2))) (=> (<= (- 2147483648) 2147483647) (in_range1 c2))) (=> (<= (- 2147483648) 2147483647) (in_range1 d2))) (=> (<= (- 2147483648) 2147483647) (in_range1 q2))) (=> (<= (- 2147483648) 2147483647) (in_range1 r2))) (=> (<= (- 2147483648) 2147483647) (in_range1 w2))) (not (= d2 1))))
(assert (not (in_range1 (div1 c2 d2))))
(check-sat)
(exit)
