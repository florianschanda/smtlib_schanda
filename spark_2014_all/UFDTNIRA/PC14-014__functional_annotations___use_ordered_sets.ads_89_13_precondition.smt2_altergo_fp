(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tcount_typeB

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type count_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type telement_typeB

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : telement_typeB, telement_typeB -> bool

logic dummy2 : telement_typeB

type telement_typeB__ref = { telement_typeB__content : telement_typeB
}

function telement_typeB__ref___projection(a: telement_typeB__ref) : telement_typeB =
  (a).telement_typeB__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__use_ordered_sets__my_sets__set__capacity :
count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__use_ordered_sets__my_sets__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__use_ordered_sets__my_sets__set : us_main_type
}

function us_split_fields_Set__projection(a: us_split_fields) : us_main_type =
  (a).rec__use_ordered_sets__my_sets__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__use_ordered_sets__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__use_ordered_sets__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__use_ordered_sets__my_sets__set,
  ((b).us_split_fields1).rec__use_ordered_sets__my_sets__set) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__use_ordered_sets__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__use_ordered_sets__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__use_ordered_sets__my_sets__set,
  ((b).us_split_fields1).rec__use_ordered_sets__my_sets__set) = true))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = a };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = a };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = a1 } })))

logic use_ordered_sets__my_sets__set__capacity__first__bit : int

logic use_ordered_sets__my_sets__set__capacity__last__bit : int

logic use_ordered_sets__my_sets__set__capacity__position : int

axiom use_ordered_sets__my_sets__set__capacity__first__bit_axiom :
  (0 <= use_ordered_sets__my_sets__set__capacity__first__bit)

axiom use_ordered_sets__my_sets__set__capacity__last__bit_axiom :
  (use_ordered_sets__my_sets__set__capacity__first__bit <  use_ordered_sets__my_sets__set__capacity__last__bit)

axiom use_ordered_sets__my_sets__set__capacity__position_axiom :
  (0 <= use_ordered_sets__my_sets__set__capacity__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : count_type

logic dummy4 : us_main_type

type set__ref = { set__content : us_rep
}

function set__ref___projection(a: set__ref) : us_rep = (a).set__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq3({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = a }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = a1 } }, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = b }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = b1 } })]. (user_eq3({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = a };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = a1 } }, {
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = b };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = b1 } }) = oeq({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = a };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = a1 } }, {
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = b };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = b1 } })))

type us_split_fields2 = { rec__use_ordered_sets__my_sets__cursor__node :
count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__use_ordered_sets__my_sets__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((to_rep(((a).us_split_fields3).rec__use_ordered_sets__my_sets__cursor__node) = to_rep(((b).us_split_fields3).rec__use_ordered_sets__my_sets__cursor__node)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__use_ordered_sets__my_sets__cursor__node) = to_rep(((b).us_split_fields3).rec__use_ordered_sets__my_sets__cursor__node))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = a } })))

logic use_ordered_sets__my_sets__cursor__node__first__bit : int

logic use_ordered_sets__my_sets__cursor__node__last__bit : int

logic use_ordered_sets__my_sets__cursor__node__position : int

axiom use_ordered_sets__my_sets__cursor__node__first__bit_axiom :
  (0 <= use_ordered_sets__my_sets__cursor__node__first__bit)

axiom use_ordered_sets__my_sets__cursor__node__last__bit_axiom :
  (use_ordered_sets__my_sets__cursor__node__first__bit <  use_ordered_sets__my_sets__cursor__node__last__bit)

axiom use_ordered_sets__my_sets__cursor__node__position_axiom :
  (0 <= use_ordered_sets__my_sets__cursor__node__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } })]. ((length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }) <= to_rep(container)) and in_range2(length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length1(attr__tag, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })]. in_range2(length1(attr__tag, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))))

type extended_index

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

type element_type

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy8 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___4__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length2(a), length2(b)), false,
  false)))))

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)]. ((in_range4(position) and
  ((1 <= position) and (position <= (0 + length2(container))))) ->
  in_range5(get(container, position)))))

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq10 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy9 : us_rep3

type map__ref = { map__content : us_rep3
}

function map__ref___projection(a: map__ref) : us_rep3 = (a).map__content

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic get1 : us_rep3, us_rep1 -> int

logic get__function_guard1 : int, us_rep3, us_rep1 -> prop

type element_type1

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type1, element_type1 -> bool

logic dummy10 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___5__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic length3 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

logic has_key : us_rep3, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep3, us_rep1 -> prop

logic witness : us_rep3, us_rep1 -> int

logic witness__function_guard : int, us_rep3, us_rep1 -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key:count_type [get1(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } })].
  ((has_key(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) ->
  (((of_int(0) = true) -> ((get1(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = w_get(container,
  witness(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = k } }) = true) ->
  ((bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = k } }, { us_split_fields3 =
  { rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) <->
  (witness(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key }
  }) = witness(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = k } }))))))) and
  in_range6(get1(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }))))))

logic elements : us_rep -> us_rep2

logic elements__function_guard : us_rep2, us_rep -> prop

logic equivalent_elements__function_guard : bool, int, int -> prop

type element_type2

predicate in_range7(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : element_type2, element_type2 -> bool

logic dummy11 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq13 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq11 : us_rep4, us_rep4 -> bool

logic dummy12 : us_rep4

type set__ref1 = { set__content1 : us_rep4
}

function set__ref___2__projection(a: set__ref1) : us_rep4 = (a).set__content1

logic contains : us_rep4, int -> bool

logic contains__function_guard : bool, us_rep4, int -> prop

logic e_bigger_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic e_smaller_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic e_is_find__function_guard : bool, us_rep2, int, int -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

logic model__ : us_rep -> us_rep4

logic model____function_guard : us_rep4, us_rep -> prop

axiom elements__post_axiom :
  (forall container:count_type. forall container1:us_main_type [elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } })]. ((((length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })) = length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })) and
  (forall temp___393:int. ((in_range4(temp___393) and ((1 <= temp___393) and
  (temp___393 <= (0 + length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })))))) -> (contains(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  temp___393)) = true)))) and
  (forall item:int. ((in_range7(item) and (contains(model__({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } }), item) = true)) -> ((0 <  find(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } }), item)) and ((not (bool_lt(get(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } }), find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  item)), item) = true)) and ((bool_lt(get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  item)), item) = false) -> (not (bool_lt(item, get(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } }), find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  item))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))) -> ((find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get(elements({
    us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
    container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
    container1 } }), i1) <  get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i)))) ->
  (((i <  length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
    us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
    container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
    container1 } })))) -> (get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i) <  get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
        us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
        container }; us_split_fields1 = {
        rec__use_ordered_sets__my_sets__set = container1 } })))) ->
        (get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i) <  get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i1))))) ->
  (match_bool(true, false, false) = true)))) and
  ((not (i <  length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })))) -> (match_bool(true, of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get(elements({
        us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
        container }; us_split_fields1 = {
        rec__use_ordered_sets__my_sets__set = container1 } }),
        i1) <  get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i))))) ->
  (((i <  length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
    us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
    container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
    container1 } })))) -> (get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i) <  get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
        us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
        container }; us_split_fields1 = {
        rec__use_ordered_sets__my_sets__set = container1 } })))) ->
        (get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i) <  get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i1))))) ->
  (match_bool(false, false, false) = true)))) and
  ((not (i <  length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })))) -> (match_bool(false, of_int(1), false) = true)))))) and
  ((not (0 <  i)) -> (((i <  length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
    us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
    container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
    container1 } })))) -> (get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i) <  get(elements({ us_split_discrs1 = {
    rec__use_ordered_sets__my_sets__set__capacity = container };
    us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
    }), i1)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
        us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
        container }; us_split_fields1 = {
        rec__use_ordered_sets__my_sets__set = container1 } })))) ->
        (get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i) <  get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = container };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1
        } }), i1))))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })))) -> (match_bool(of_int(1), of_int(1), false) = true))))))))))

logic positions : us_rep -> us_rep3

logic positions__function_guard : us_rep3, us_rep -> prop

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } })]. ((not (has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = i }
  }) = true) -> (((1 <= get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = i }
  })) and (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = j }
  }) = true) -> ((get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = i }
  }) = get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = j }
  })) -> (bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }, { us_split_fields3 =
  { rec__use_ordered_sets__my_sets__cursor__node = j } }) = true)))))))))

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

axiom has_element__post__dispatch_axiom : true

logic element__function_guard : int, us_rep, us_rep1 -> prop

logic element : int, us_rep, us_rep1 -> int

logic element__function_guard1 : int, int, us_rep, us_rep1 -> prop

type element_type3

predicate in_range8(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : element_type3, element_type3 -> bool

logic dummy13 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___2__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [element(attr__tag, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } },
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } })]. in_range8(element(attr__tag, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } },
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } })))))

logic contains__function_guard1 : bool, us_rep, int -> prop

logic contains1 : int, us_rep, int -> bool

logic contains__function_guard2 : bool, int, us_rep, int -> prop

axiom contains__post__dispatch_axiom : true

logic ole : us_rep4, us_rep4 -> bool

logic ole__function_guard : bool, us_rep4, us_rep4 -> prop

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard3 : bool, us_rep4, us_rep4 -> prop

logic included_except : us_rep4, us_rep4, int -> bool

logic included_except__function_guard : bool, us_rep4, us_rep4, int -> prop

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic range_equal__function_guard : bool, us_rep2, us_rep2, int, int -> prop

logic range_shifted__function_guard : bool, us_rep2, us_rep2, int, int,
  int -> prop

logic oeq3 : us_rep3, us_rep3 -> bool

logic oeq__function_guard4 : bool, us_rep3, us_rep3 -> prop

logic p_positions_shifted : us_rep3, us_rep3, int, int -> bool

logic p_positions_shifted__function_guard : bool, us_rep3, us_rep3, int,
  int -> prop

logic include__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic first : us_rep -> us_rep1

logic first__function_guard : us_rep1, us_rep -> prop

logic first1 : int, us_rep -> us_rep1

logic first__function_guard1 : us_rep1, int, us_rep -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:us_main_type [first({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } })]. (((length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }) = 0) -> (bool_eq6(first({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }) = true)) and ((not (length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }) = 0)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  first({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  first({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })) = 1)))))

axiom first__post__dispatch_axiom : true

logic next : us_rep, us_rep1 -> us_rep1

logic next__function_guard : us_rep1, us_rep, us_rep1 -> prop

logic next1 : int, us_rep, us_rep1 -> us_rep1

logic next__function_guard1 : us_rep1, int, us_rep, us_rep1 -> prop

axiom next__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [next({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } },
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } })]. (((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } }) = true) or (bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = position } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }) = true)) -> ((((bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = position } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } }) = length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  }))) -> (bool_eq6(next({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } },
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } }), { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = no_element } }) = true)) and
  ((not ((bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = position } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } }) = length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })))) -> ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  next({ us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } }, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = position } })) = true) and
  (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  next({ us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } }, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = position }
  })) = (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 } }),
  { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  position } }) + 1))))))))

axiom next__post__dispatch_axiom : true

logic s__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom no_element__def_axiom : (no_element = of_rep(0))

type positive_count_type

predicate in_range9(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : positive_count_type, positive_count_type -> bool

logic dummy14 : positive_count_type

type positive_count_type__ref = { positive_count_type__content :
positive_count_type
}

function positive_count_type__ref___projection(a: positive_count_type__ref) : positive_count_type =
  (a).positive_count_type__content

axiom find__post_axiom :
  (forall container:us_rep2.
  (forall item:int [find(container, item)]. (in_range8(item) ->
  (((0 <  find(container, item)) -> ((find(container,
  item) <= length2(container)) and ((not (bool_lt(item, get(container,
  find(container, item))) = true)) and ((bool_lt(item, get(container,
  find(container, item))) = false) -> (not (bool_lt(get(container,
  find(container, item)), item) = true)))))) and in_range2(find(container,
  item))))))

logic e_elements_included__function_guard : bool, us_rep2, us_rep2 -> prop

logic keys_included : us_rep3, us_rep3 -> bool

logic keys_included__function_guard : bool, us_rep3, us_rep3 -> prop

axiom p_positions_shifted__post_axiom :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((in_range9(cut1) and in_range2(count)) ->
  (((p_positions_shifted(small, big, cut1, count) = true) ->
  (((keys_included(small, big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = true) ->
  (((get1(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) <  cut1) ->
  (get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = get1(small, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = i }
  }))) and ((not (get1(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) <  cut1)) ->
  ((get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i }
  }) - count) = get1(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = true) ->
  ((has_key(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = true) or
  (((cut1 - count) <= (get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) - count)) and
  ((get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i }
  }) - count) <= (cut1 - 1)))))))) and ((((keys_included(small,
  big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = true) ->
  (((get1(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) <  cut1) and
  (get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = get1(small, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = i }
  }))) or ((not (get1(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) <  cut1)) and
  ((get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i }
  }) - count) = get1(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = true) ->
  ((has_key(small, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) = true) or
  (((cut1 - count) <= (get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i } }) - count)) and
  ((get1(big, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = i }
  }) - count) <= (cut1 - 1))))))) -> (p_positions_shifted(small, big, cut1,
  count) = true))))))

logic is_empty1 : us_rep4 -> bool

logic is_empty__function_guard1 : bool, us_rep4 -> prop

logic length4 : us_rep4 -> int

logic length__function_guard4 : int, us_rep4 -> prop

axiom model____post_axiom :
  (forall container:count_type. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
  container1 } })]. (length4(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })) = length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = container };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = container1 }
  })))

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = left
  }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 } }, {
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = right
  }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 } })].
  (((oeq({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = left }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = left1 } }, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = right }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = right1 } }) = true) ->
  (((bool_eq1(length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = left }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = left1 } })), length2(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = right
  }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
  }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length2(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = left
  }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 }
  }))))) -> (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = left }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = left1 } }), n) = get(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = right
  }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 } }),
  n))))) and (not (bool_eq1(length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = left }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = left1 } })), length2(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity = right
  }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
  }))) = false)))) and ((not (oeq({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = left }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = left1 } }, { us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = right }; us_split_fields1 =
  { rec__use_ordered_sets__my_sets__set = right1 } }) = true)) ->
  ((not (forall i:int. (((1 <= i) and (i <= length2(elements({
        us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
        left }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
        left1 } })))) -> ((0 <  find(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = right };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
        }), get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = left };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 }
        }), i))) and (get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = right };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
        }), find(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = right };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
        }), get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = left };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 }
        }), i))) = get(elements({ us_split_discrs1 = {
        rec__use_ordered_sets__my_sets__set__capacity = left };
        us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 }
        }), i)))))) or
  (not (forall i:int. (((1 <= i) and (i <= length2(elements({
       us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
       right }; us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
       right1 } })))) -> ((0 <  find(elements({ us_split_discrs1 = {
       rec__use_ordered_sets__my_sets__set__capacity = left };
       us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 } }),
       get(elements({ us_split_discrs1 = {
       rec__use_ordered_sets__my_sets__set__capacity = right };
       us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
       }), i))) and (get(elements({ us_split_discrs1 = {
       rec__use_ordered_sets__my_sets__set__capacity = left };
       us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 } }),
       find(elements({ us_split_discrs1 = {
       rec__use_ordered_sets__my_sets__set__capacity = left };
       us_split_fields1 = { rec__use_ordered_sets__my_sets__set = left1 } }),
       get(elements({ us_split_discrs1 = {
       rec__use_ordered_sets__my_sets__set__capacity = right };
       us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
       }), i))) = get(elements({ us_split_discrs1 = {
       rec__use_ordered_sets__my_sets__set__capacity = right };
       us_split_fields1 = { rec__use_ordered_sets__my_sets__set = right1 }
       }), i))))))))))

axiom oeq__post__dispatch_axiom : true

axiom contains__post_axiom :
  (forall container:us_rep4.
  (forall item:int [contains(container, item)]. (in_range7(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range7(e) and (contains(container, e) = true)) and
   ((bool_lt(e, item) = false) and (bool_lt(item, e) = false)))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom1 :
  (forall container:us_rep4 [length4(container)].
  in_range2(length4(container)))

axiom ole__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range7(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

axiom is_empty__post_axiom :
  (forall container:us_rep4 [is_empty1(container)].
  (((is_empty1(container) = true) <->
  (forall item:int. (not (in_range7(item) and (contains(container,
  item) = true))))) and ((is_empty1(container) = true) <->
  (length4(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall item:int [included_except(left, right, item)]. (in_range7(item) ->
  (((included_except(left, right, item) = true) ->
  (forall e:int. ((in_range7(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or ((not (bool_lt(e, item) = true)) and
  ((bool_lt(e, item) = false) -> (not (bool_lt(item, e) = true)))))))) and
  ((forall e:int. ((in_range7(e) and (contains(left, e) = true)) ->
   ((contains(right, e) = true) or ((bool_lt(e, item) = false) and
   (bool_lt(item, e) = false))))) ->
  (included_except(left, right, item) = true))))))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length2(container)].
  (((0 + length2(container)) <= 2147483647) and
  in_range2(length2(container))))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [has_key(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } })].
  ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields3 = {
   rec__use_ordered_sets__my_sets__cursor__node = k } }) = true) and
   (bool_eq6({ us_split_fields3 = {
   rec__use_ordered_sets__my_sets__cursor__node = k } }, { us_split_fields3 =
   { rec__use_ordered_sets__my_sets__cursor__node = key } }) = true))) ->
  (has_key(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true)))))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length3(container)].
  in_range2(length3(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key:count_type. ((has_key(left, { us_split_fields3 = {
   rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) ->
   ((has_key(right, { us_split_fields3 = {
   rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) and
   (get1(right, { us_split_fields3 = {
   rec__use_ordered_sets__my_sets__cursor__node = key } }) = get1(left, {
   us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = key }
   }))))) and
  (forall key:count_type. ((has_key(right, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) ->
  (has_key(left, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true)))))

axiom keys_included__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) ->
  (has_key(right, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true)))))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [witness(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } })].
  ((has_key(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }) = true) ->
  ((has_witness(container, witness(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } })) = true) and
  in_range2(witness(container, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range2(witness1) and (has_witness(container, witness1) = true)) ->
  in_range6(w_get(container, witness1)))))

 (* File "use_ordered_sets.ads", line 71, characters 0-0 *)
goal WP_parameter_def :
  (forall s__split_fields:us_main_type. forall cu__split_fields:count_type.
  forall n:int. forall use_ordered_sets__double_size__cu__assume:count_type.
  forall temp___797:int. forall temp___792:count_type.
  forall temp___795:us_rep2. forall temp___793:int.
  forall temp___796:us_rep2. forall temp___798:us_rep2.
  forall temp___794:us_rep2. forall temp___791:count_type.
  forall temp___7911:us_main_type. forall temp___790:int. forall o:int.
  forall o1:int. forall o2:int. forall o3:count_type.
  forall temp___789:count_type. forall o4:int. forall o5:bool. forall i:int.
  forall s__split_fields1:us_main_type. forall result:count_type.
  forall cu__split_fields1:count_type. forall result1:int. forall n1:int.
  forall result2:bool. forall s__split_fields2:us_main_type.
  forall cu__split_fields2:count_type. forall n2:int.
  forall s__split_fields3:us_main_type. forall result3:count_type.
  forall cu__split_fields3:count_type. forall result4:int. forall n3:int.
  forall result5:bool. forall s__split_fields4:us_main_type.
  forall cu__split_fields4:count_type. forall n4:int.
  forall s__split_fields5:us_main_type. forall cu__split_fields5:count_type.
  forall n5:int. forall s__split_fields6:us_main_type.
  forall cu__split_fields6:count_type. forall n6:int.
  forall s__split_fields7:us_main_type. forall cu__split_fields7:count_type.
  forall n7:int. forall s__split_fields8:us_split_fields__ref.
  forall cu__split_fields8:us_split_fields__ref1. forall n8:int__ref.
  forall s__split_fields9:us_split_fields.
  forall cu__split_fields9:us_split_fields2. forall n9:int. (((length({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields }
  }) <= comp_div(to_rep(s__split_discrs),2)) and
  (forall temp___809:int. ((in_range4(temp___809) and ((1 <= temp___809) and
  (temp___809 <= (0 + length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })))))) -> (mod(get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }), temp___809), 2) = 0)))) -> (((((({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node =
  use_ordered_sets__double_size__cu__assume } } = first({ us_split_discrs1 =
  { rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })) and (((bool_eq1(length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }), 0) = true) and (bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node =
  use_ordered_sets__double_size__cu__assume } }, { us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = no_element } }) = true)) or
  ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }), 0) = true)) and ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  use_ordered_sets__double_size__cu__assume } }) = true) and
  (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  use_ordered_sets__double_size__cu__assume } }) = 1))))) and (({
  us_split_fields__content1 = {
  rec__use_ordered_sets__my_sets__cursor__node = result } } = {
  us_split_fields__content1 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields } }) and
  (use_ordered_sets__double_size__cu__assume = cu__split_fields1))) and ((({
  int__content = result1 } = { int__content = n }) and (n1 = 0)) and
  (in_range2(n1) and (((result2 = has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields1 } })) and ((result2 = true) <-> (has_key(positions({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields } }), {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields1 } }) = true))) and (((result2 = true) and
  ((((temp___797 = length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })) and ((temp___792 = cu__split_fields1) and ((temp___795 = elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields } })) and
  ((temp___793 = length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })) and ((temp___796 = elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })) and ((temp___798 = elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })) and ((temp___794 = elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } })) and (((s__split_discrs = temp___791) and
  (s__split_fields = temp___7911)) and ((temp___790 = n1) and (((length({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields2 }
  }) = (temp___793 + n2)) and
  ((forall i1:int. (((1 <= i1) and (i1 <= n2)) -> ((get(elements({
   us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
   s__split_discrs }; us_split_fields1 = {
   rec__use_ordered_sets__my_sets__set = s__split_fields2 } }),
   (2 * i1)) = (get(temp___794, i1) + 1)) and (get(elements({
   us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
   s__split_discrs }; us_split_fields1 = {
   rec__use_ordered_sets__my_sets__set = s__split_fields2 } }),
   ((2 * i1) - 1)) = get(temp___795, i1))))) and
  ((forall i1:int. (((((2 * n2) + 1) <= i1) and (i1 <= length({
   us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
   s__split_discrs }; us_split_fields1 = {
   rec__use_ordered_sets__my_sets__set = s__split_fields2 } }))) ->
   (get(elements({ us_split_discrs1 = {
   rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
   us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
   s__split_fields2 } }), i1) = get(temp___796, (i1 - n2))))) and
  ((forall i1:int. ((((n2 + 1) <= i1) and (i1 <= temp___797)) ->
   (get(elements({ us_split_discrs1 = {
   rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
   us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
   s__split_fields2 } }), (i1 + n2)) = get(temp___798, i1)))) and
  (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } }) = ((2 * n2) + 1)))))) and (((0 <= 2147483647) ->
  in_range2(n2)) and ((not (contains(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } })) + 1)) = true)) and ((((((o = get(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields2 } }),
  get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } }))) and (in_range8(o) and (o = get(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields2 } }),
  get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } }))))) and (o1 = (o + 1))) and ((o2 = o1) and
  in_range3(o1))) and ((contains(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2) = true) and (((contains(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), o2) = true) and ((((oeq2(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } })) = true) and (oeq3(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } })) = true)) and (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2)) = o2)) and ((bool_eq1(length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } })), length2(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }))) = true) and
  (forall i1:int. (((1 <= i1) and (i1 <= (0 + length2(elements({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields2 } }))))) ->
  ((not (i1 = find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2))) -> (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), i1) = get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), i1)))))))) or ((not (contains(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), o2) = true)) and (((((((length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }) = (length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }) + 1)) and (ole(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } })) = true)) and (included_except(model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), model__({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), o2) = true)) and (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2)) = o2)) and
  (forall i1:int. (((1 <= i1) and (i1 <= (find(elements({ us_split_discrs1 =
  { rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2) - 1))) -> (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), i1) = get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), i1))))) and
  ((forall i1:int. (((find(elements({ us_split_discrs1 = {
   rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
   us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
   s__split_fields3 } }), o2) <= i1) and (i1 <= length({ us_split_discrs1 = {
   rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
   us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
   s__split_fields2 } }))) -> (get(elements({ us_split_discrs1 = {
   rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
   us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
   s__split_fields2 } }), i1) = get(elements({ us_split_discrs1 = {
   rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
   us_split_fields1 = { rec__use_ordered_sets__my_sets__set =
   s__split_fields3 } }), (i1 + 1))))) and
  (forall i1:int. ((((find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2) + 1) <= i1) and (i1 <= (length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }) + 1))) -> (get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), (i1 - 1)) = get(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), i1)))))) and (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields2
  } }), positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), find(elements({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), o2), 1) = true)))))) and ((((({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = o3 } } = next({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields3 } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } })) and (((match_bool(bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields2 } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } }), length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }))) = true) and (bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = o3 } }, { us_split_fields3 =
  { rec__use_ordered_sets__my_sets__cursor__node = no_element }
  }) = true)) or ((not (match_bool(bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields2 } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } }), length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }))) = true)) and ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  o3 } }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  o3 } }) = (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields2 } }) + 1)))))) and (({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = temp___789 } } = next({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields3 } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node = o3 }
  })) and (((match_bool(bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = o3 } }, { us_split_fields3 =
  { rec__use_ordered_sets__my_sets__cursor__node = no_element } }), true,
  bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  o3 } }), length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }))) = true) and (bool_eq6({ us_split_fields3 = {
  rec__use_ordered_sets__my_sets__cursor__node = temp___789 } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }) = true)) or ((not (match_bool(bool_eq6({ us_split_fields3 =
  { rec__use_ordered_sets__my_sets__cursor__node = o3 } }, {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  no_element } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  o3 } }), length({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }))) = true)) and ((has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  temp___789 } }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  temp___789 } }) = (get1(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  o3 } }) + 1))))))) and ((result3 = cu__split_fields2) and
  (temp___789 = cu__split_fields3))) and ((((o4 = (n2 + 1)) and
  in_range1((n2 + 1))) and ((result4 = n2) and (n3 = o4))) and
  ((((o5 = has_key(positions({ us_split_discrs1 = {
  rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields3
  } }), { us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields3 } })) and ((o5 = true) <-> (has_key(positions({
  us_split_discrs1 = { rec__use_ordered_sets__my_sets__set__capacity =
  s__split_discrs }; us_split_fields1 = {
  rec__use_ordered_sets__my_sets__set = s__split_fields3 } }), {
  us_split_fields3 = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields3 } }) = true))) and (((not (o5 = true)) and
  (result5 = true)) or ((o5 = true) and (result5 = false)))) and
  (result5 = true))))))))))))))))) and (((n3 = n4) and
  ((cu__split_fields4 = cu__split_fields3) and
  (s__split_fields4 = s__split_fields3))) and ((n5 = n3) and (({
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields5 } = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields3 }) and ({
  rec__use_ordered_sets__my_sets__set = s__split_fields5 } = {
  rec__use_ordered_sets__my_sets__set = s__split_fields3 }))))) and ((({
  int__content = n6 } = { int__content = n4 }) and (({
  us_split_fields__content1 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields6 } } = {
  us_split_fields__content1 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields4 } }) and
  ({ us_split_fields__content = { rec__use_ordered_sets__my_sets__set =
  s__split_fields6 } } = { us_split_fields__content = {
  rec__use_ordered_sets__my_sets__set = s__split_fields4 } }))) and
  ((n7 = n5) and (({ rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields7 } = { rec__use_ordered_sets__my_sets__cursor__node =
  cu__split_fields5 }) and ({ rec__use_ordered_sets__my_sets__set =
  s__split_fields7 } = { rec__use_ordered_sets__my_sets__set =
  s__split_fields5 })))))) or ((not (result2 = true)) and (((n1 = n6) and
  ((cu__split_fields6 = cu__split_fields1) and ({ us_split_fields__content =
  { rec__use_ordered_sets__my_sets__set = s__split_fields6 } } = {
  us_split_fields__content = { rec__use_ordered_sets__my_sets__set =
  s__split_fields } }))) and ((n7 = n1) and (({
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields7 } = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields1 }) and ({
  rec__use_ordered_sets__my_sets__set = s__split_fields7 } = {
  rec__use_ordered_sets__my_sets__set = s__split_fields1 })))))))))) and
  (((n8 = { int__content = n6 }) and ((cu__split_fields8 = {
  us_split_fields__content1 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields6 } }) and
  (s__split_fields8 = { us_split_fields__content = {
  rec__use_ordered_sets__my_sets__set = s__split_fields6 } }))) and
  ((n9 = n7) and ((cu__split_fields9 = {
  rec__use_ordered_sets__my_sets__cursor__node = cu__split_fields7 }) and
  (s__split_fields9 = { rec__use_ordered_sets__my_sets__set =
  s__split_fields7 }))))) -> (((1 <= i) and (i <= length({ us_split_discrs1 =
  { rec__use_ordered_sets__my_sets__set__capacity = s__split_discrs };
  us_split_fields1 = { rec__use_ordered_sets__my_sets__set = s__split_fields
  } }))) -> (1 <= i)))))
