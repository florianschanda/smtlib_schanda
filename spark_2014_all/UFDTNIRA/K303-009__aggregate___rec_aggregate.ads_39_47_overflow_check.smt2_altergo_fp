(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__rec_aggregate__r2__x : integer;
rec__rec_aggregate__r2__y : integer
}

function us_split_fields_X__2__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

logic rec_aggregate__r2__x__first__bit : int

logic rec_aggregate__r2__x__last__bit : int

logic rec_aggregate__r2__x__position : int

axiom rec_aggregate__r2__x__first__bit_axiom :
  (0 <= rec_aggregate__r2__x__first__bit)

axiom rec_aggregate__r2__x__last__bit_axiom :
  (rec_aggregate__r2__x__first__bit <  rec_aggregate__r2__x__last__bit)

axiom rec_aggregate__r2__x__position_axiom :
  (0 <= rec_aggregate__r2__x__position)

logic rec_aggregate__r2__y__first__bit : int

logic rec_aggregate__r2__y__last__bit : int

logic rec_aggregate__r2__y__position : int

axiom rec_aggregate__r2__y__first__bit_axiom :
  (0 <= rec_aggregate__r2__y__first__bit)

axiom rec_aggregate__r2__y__last__bit_axiom :
  (rec_aggregate__r2__y__first__bit <  rec_aggregate__r2__y__last__bit)

axiom rec_aggregate__r2__y__position_axiom :
  (0 <= rec_aggregate__r2__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type r2__ref = { r2__content : us_rep
}

function r2__ref___projection(a: r2__ref) : us_rep = (a).r2__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic one : int

logic r__split_fields : integer

logic r__split_fields1 : integer

logic o : integer

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic temp___172 : integer

logic temp___1721 : integer

logic o4 : integer

logic o5 : integer

logic o6 : integer

logic o7 : integer

logic temp___173 : integer

logic temp___1731 : integer

logic o8 : integer

logic o9 : integer

logic o10 : integer

logic o11 : integer

logic temp___174 : integer

logic temp___1741 : integer

logic o12 : integer

logic o13 : integer

logic o14 : integer

logic o15 : integer

logic temp___175 : integer

logic temp___1751 : integer

logic o16 : integer

logic o17 : integer

logic o18 : integer

logic o19 : integer

logic temp___176 : integer

logic temp___1761 : integer

logic o20 : int

logic result : integer

logic result1 : integer

logic r__split_fields2 : integer

logic r__split_fields3 : integer

logic result2 : integer

logic result3 : integer

logic r__split_fields4 : integer

logic r__split_fields5 : integer

logic result4 : integer

logic result5 : integer

logic r__split_fields6 : integer

logic r__split_fields7 : integer

logic result6 : integer

logic result7 : integer

logic r__split_fields8 : integer

logic r__split_fields9 : integer

logic result8 : integer

logic result9 : integer

logic r__split_fields10 : integer

logic r__split_fields11 : integer

logic r__split_fields12 : integer

logic r__split_fields13 : integer

logic r__split_fields14 : integer

logic r__split_fields15 : integer

axiom H : in_range(one)

axiom H1 : in_range(b)

axiom H2 : (one = 1)

axiom H3 : ((b = 1) -> (to_rep(o) = 2))

axiom H4 : ((b = 1) -> (to_rep(o1) = one))

axiom H5 : ((b = 1) -> (o1 = o2))

axiom H6 : ((b = 1) -> (o = o3))

axiom H7 : ((b = 1) -> (temp___172 = o2))

axiom H8 : ((b = 1) -> (temp___1721 = o3))

axiom H9 : ((b = 1) -> ((result = r__split_fields) and
  (result1 = r__split_fields1)))

axiom H10 : ((b = 1) -> (temp___172 = r__split_fields2))

axiom H11 : ((b = 1) -> (temp___1721 = r__split_fields3))

axiom H12 : ((not (b = 1)) -> ((b = 2) -> (to_rep(o4) = one)))

axiom H13 : ((not (b = 1)) -> ((b = 2) -> (to_rep(o5) = one)))

axiom H14 : ((not (b = 1)) -> ((b = 2) -> (o5 = o6)))

axiom H15 : ((not (b = 1)) -> ((b = 2) -> (o4 = o7)))

axiom H16 : ((not (b = 1)) -> ((b = 2) -> (temp___173 = o6)))

axiom H17 : ((not (b = 1)) -> ((b = 2) -> (temp___1731 = o7)))

axiom H18 : ((not (b = 1)) -> ((b = 2) -> ((result2 = r__split_fields) and
  (result3 = r__split_fields1))))

axiom H19 : ((not (b = 1)) -> ((b = 2) ->
  ((r__split_fields4 = temp___173) and (r__split_fields5 = temp___1731))))

axiom H20 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (to_rep(o8) = one))))

axiom H21 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (to_rep(o9) = one))))

axiom H22 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) -> (o9 = o10))))

axiom H23 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) -> (o8 = o11))))

axiom H24 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (temp___174 = o10))))

axiom H25 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (temp___1741 = o11))))

axiom H26 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  ((result4 = r__split_fields) and (result5 = r__split_fields1)))))

axiom H27 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  ((r__split_fields6 = temp___174) and (r__split_fields7 = temp___1741)))))

axiom H28 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (to_rep(o12) = one)))))

axiom H29 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (to_rep(o13) = 2)))))

axiom H30 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (o13 = o14)))))

axiom H31 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (o12 = o15)))))

axiom H32 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (temp___175 = o14)))))

axiom H33 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (temp___1751 = o15)))))

axiom H34 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((result6 = r__split_fields) and (result7 = r__split_fields1))))))

axiom H35 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((r__split_fields8 = temp___175) and (r__split_fields9 = temp___1751))))))

axiom H36 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (to_rep(o16) = 2)))))

axiom H37 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (to_rep(o17) = one)))))

axiom H38 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (o17 = o18)))))

axiom H39 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (o16 = o19)))))

axiom H40 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (temp___176 = o18)))))

axiom H41 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (temp___1761 = o19)))))

axiom H42 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((result8 = r__split_fields) and
  (result9 = r__split_fields1))))))

axiom H43 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((r__split_fields10 = temp___176) and
  (r__split_fields11 = temp___1761))))))

axiom H44 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((r__split_fields8 = r__split_fields10) and
  (r__split_fields9 = r__split_fields11))))))

axiom H45 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((r__split_fields6 = r__split_fields8) and
  (r__split_fields7 = r__split_fields9)))))

axiom H46 : ((not (b = 1)) -> ((not (b = 2)) ->
  ((r__split_fields4 = r__split_fields6) and
  (r__split_fields5 = r__split_fields7))))

axiom H47 : ((not (b = 1)) -> ((r__split_fields2 = r__split_fields4) and
  (r__split_fields3 = r__split_fields5)))

axiom H48 : ((r__split_fields12 = r__split_fields2) and
  (r__split_fields13 = r__split_fields3))

axiom H49 : ((r__split_fields14 = r__split_fields2) and
  (r__split_fields15 = r__split_fields3))

axiom H50 : (b = 1)

 (* File "rec_aggregate.ads", line 3, characters 0-0 *)
goal WP_parameter_def : in_range((2 * one))
