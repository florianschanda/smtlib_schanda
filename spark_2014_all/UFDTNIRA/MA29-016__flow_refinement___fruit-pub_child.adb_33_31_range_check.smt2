(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-fun get_price_of_apple (Int) Int)
(declare-fun get_price_of_apple__function_guard (Int Int) Bool)
(assert (forall ((fruit__price_of_apple Int)) (! (=> (dynamic_invariant fruit__price_of_apple true true true) (dynamic_invariant (get_price_of_apple fruit__price_of_apple) true false true)) :pattern ((get_price_of_apple fruit__price_of_apple)))))
(assert (forall ((fruit__price_of_apple Int)) (! (=> (dynamic_invariant fruit__price_of_apple true true true) (= (get_price_of_apple fruit__price_of_apple) fruit__price_of_apple)) :pattern ((get_price_of_apple fruit__price_of_apple)))))
(declare-fun get_price_of_orange (Int) Int)
(declare-fun get_price_of_orange__function_guard (Int Int) Bool)
(assert (forall ((fruit__price_of_orange Int)) (! (=> (dynamic_invariant fruit__price_of_orange true true true) (dynamic_invariant (get_price_of_orange fruit__price_of_orange) true false true)) :pattern ((get_price_of_orange fruit__price_of_orange)))))
(assert (forall ((fruit__price_of_orange Int)) (! (=> (dynamic_invariant fruit__price_of_orange true true true) (= (get_price_of_orange fruit__price_of_orange) fruit__price_of_orange)) :pattern ((get_price_of_orange fruit__price_of_orange)))))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const apples Int)
(declare-const oranges Int)
(declare-const price_of_apple Int)
(declare-const price_of_orange Int)
(declare-const apples_in_fruit_salad Int)
(declare-const oranges_in_fruit_salad Int)
(declare-const extra_cost Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const result Bool)
(assert (in_range1 apples_in_fruit_salad))
(assert (in_range1 oranges_in_fruit_salad))
(assert (in_range1 apples))
(assert (in_range1 oranges))
(assert (in_range1 price_of_apple))
(assert (in_range1 price_of_orange))
(assert (in_range1 extra_cost))
(assert (and (= o (get_price_of_orange price_of_orange)) (and (in_range1 o) (= o price_of_orange))))
(assert (and (= o1 (get_price_of_apple price_of_apple)) (and (in_range1 o1) (= o1 price_of_apple))))
(assert (= result (ite (<= o o1) true false)))
(assert (= result true))
(assert (and (= o2 (+ apples_in_fruit_salad oranges_in_fruit_salad)) (in_range (+ apples_in_fruit_salad oranges_in_fruit_salad))))
(assert (and (= o3 (get_price_of_apple price_of_apple)) (and (in_range1 o3) (= o3 price_of_apple))))
(assert (= o4 (* o3 o2)))
(assert (and (= o5 o4) (in_range o4)))
(assert (not (in_range1 o5)))
(check-sat)
(exit)
