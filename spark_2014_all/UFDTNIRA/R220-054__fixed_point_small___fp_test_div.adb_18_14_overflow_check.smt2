(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tfp1B 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun pos_div_relation ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-const dummy tfp1B)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun to_fixed (tfp1B) Int)
(declare-fun of_fixed (Int) tfp1B)
(declare-fun user_eq (tfp1B tfp1B) Bool)
(declare-fun fxp_div_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int x y)) x (- y))))))) :pattern ((fxp_div_int x y))))))
(declare-fun fxp_div_result_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int x y)) x (- y))))))) :pattern ((fxp_div_result_int x y))))))
(declare-fun to_int1 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int1 x) 0) (ite (< 0 x) (pos_div_relation (to_int1 x) (* x 1) 3) (pos_div_relation (- (to_int1 x)) (* (- x) 1) 3))) :pattern ((to_int1 x)))))
(declare-fun of_int (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int x) 0) (ite (< 0 x) (pos_div_relation (of_int x) (* x 3) 1) (pos_div_relation (- (of_int x)) (* (- x) 3) 1))) :pattern ((of_int x)))))
(assert (forall ((x tfp1B)) (! (= (of_fixed (to_fixed x)) x) :pattern ((to_fixed x)))))
(assert (forall ((x tfp1B)) (in_range1 (to_fixed x))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_fixed (of_fixed x)) x)) :pattern ((to_fixed (of_fixed x))))))
(declare-datatypes () ((tfp1B__ref (mk_tfp1B__ref (tfp1B__content tfp1B)))))
(define-fun tfp1B__ref___projection ((a tfp1B__ref)) tfp1B (tfp1B__content a))
(declare-sort fp1 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 30) x) (<= x 30)))
(declare-const dummy1 fp1)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun to_fixed1 (fp1) Int)
(declare-fun of_fixed1 (Int) fp1)
(declare-fun user_eq1 (fp1 fp1) Bool)
(declare-fun fxp_div_int1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int1 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int1 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int1 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int1 x y)) x (- y))))))) :pattern ((fxp_div_int1 x y))))))
(declare-fun fxp_div_result_int1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int1 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int1 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int1 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int1 x y)) x (- y))))))) :pattern ((fxp_div_result_int1 x y))))))
(declare-fun to_int2 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int2 x) 0) (ite (< 0 x) (pos_div_relation (to_int2 x) (* x 1) 3) (pos_div_relation (- (to_int2 x)) (* (- x) 1) 3))) :pattern ((to_int2 x)))))
(declare-fun of_int1 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int1 x) 0) (ite (< 0 x) (pos_div_relation (of_int1 x) (* x 3) 1) (pos_div_relation (- (of_int1 x)) (* (- x) 3) 1))) :pattern ((of_int1 x)))))
(assert (forall ((x fp1)) (! (= (of_fixed1 (to_fixed1 x)) x) :pattern ((to_fixed1 x)))))
(assert (forall ((x fp1)) (in_range2 (to_fixed1 x))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_fixed1 (of_fixed1 x)) x)) :pattern ((to_fixed1 (of_fixed1 x))))))
(declare-datatypes () ((fp1__ref (mk_fp1__ref (fp1__content fp1)))))
(define-fun fp1__ref___projection ((a fp1__ref)) fp1 (fp1__content a))
(declare-sort tfp2B 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-const dummy2 tfp2B)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun to_fixed2 (tfp2B) Int)
(declare-fun of_fixed2 (Int) tfp2B)
(declare-fun user_eq2 (tfp2B tfp2B) Bool)
(declare-fun fxp_div_int2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int2 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int2 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int2 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int2 x y)) x (- y))))))) :pattern ((fxp_div_int2 x y))))))
(declare-fun fxp_div_result_int2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int2 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int2 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int2 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int2 x y)) x (- y))))))) :pattern ((fxp_div_result_int2 x y))))))
(declare-fun to_int3 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int3 x) 0) (ite (< 0 x) (pos_div_relation (to_int3 x) (* x 1) 5) (pos_div_relation (- (to_int3 x)) (* (- x) 1) 5))) :pattern ((to_int3 x)))))
(declare-fun of_int2 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int2 x) 0) (ite (< 0 x) (pos_div_relation (of_int2 x) (* x 5) 1) (pos_div_relation (- (of_int2 x)) (* (- x) 5) 1))) :pattern ((of_int2 x)))))
(assert (forall ((x tfp2B)) (! (= (of_fixed2 (to_fixed2 x)) x) :pattern ((to_fixed2 x)))))
(assert (forall ((x tfp2B)) (in_range3 (to_fixed2 x))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_fixed2 (of_fixed2 x)) x)) :pattern ((to_fixed2 (of_fixed2 x))))))
(declare-datatypes () ((tfp2B__ref (mk_tfp2B__ref (tfp2B__content tfp2B)))))
(define-fun tfp2B__ref___projection ((a tfp2B__ref)) tfp2B (tfp2B__content a))
(declare-sort fp2 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 5 x) (<= x 50)))
(declare-const dummy3 fp2)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun to_fixed3 (fp2) Int)
(declare-fun of_fixed3 (Int) fp2)
(declare-fun user_eq3 (fp2 fp2) Bool)
(declare-fun fxp_div_int3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int3 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int3 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int3 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int3 x y)) x (- y))))))) :pattern ((fxp_div_int3 x y))))))
(declare-fun fxp_div_result_int3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int3 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int3 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int3 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int3 x y)) x (- y))))))) :pattern ((fxp_div_result_int3 x y))))))
(declare-fun to_int4 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int4 x) 0) (ite (< 0 x) (pos_div_relation (to_int4 x) (* x 1) 5) (pos_div_relation (- (to_int4 x)) (* (- x) 1) 5))) :pattern ((to_int4 x)))))
(declare-fun of_int3 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int3 x) 0) (ite (< 0 x) (pos_div_relation (of_int3 x) (* x 5) 1) (pos_div_relation (- (of_int3 x)) (* (- x) 5) 1))) :pattern ((of_int3 x)))))
(assert (forall ((x fp2)) (! (= (of_fixed3 (to_fixed3 x)) x) :pattern ((to_fixed3 x)))))
(assert (forall ((x fp2)) (in_range4 (to_fixed3 x))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_fixed3 (of_fixed3 x)) x)) :pattern ((to_fixed3 (of_fixed3 x))))))
(declare-datatypes () ((fp2__ref (mk_fp2__ref (fp2__content fp2)))))
(define-fun fp2__ref___projection ((a fp2__ref)) fp2 (fp2__content a))
(declare-sort tfp3B 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(declare-const dummy4 tfp3B)
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun to_fixed4 (tfp3B) Int)
(declare-fun of_fixed4 (Int) tfp3B)
(declare-fun user_eq4 (tfp3B tfp3B) Bool)
(declare-fun fxp_div_int4 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int4 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int4 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int4 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int4 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int4 x y)) x (- y))))))) :pattern ((fxp_div_int4 x y))))))
(declare-fun fxp_div_result_int4 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int4 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int4 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int4 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int4 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int4 x y)) x (- y))))))) :pattern ((fxp_div_result_int4 x y))))))
(declare-fun to_int5 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int5 x) 0) (ite (< 0 x) (pos_div_relation (to_int5 x) (* x 1) 15) (pos_div_relation (- (to_int5 x)) (* (- x) 1) 15))) :pattern ((to_int5 x)))))
(declare-fun of_int4 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int4 x) 0) (ite (< 0 x) (pos_div_relation (of_int4 x) (* x 15) 1) (pos_div_relation (- (of_int4 x)) (* (- x) 15) 1))) :pattern ((of_int4 x)))))
(assert (forall ((x tfp3B)) (! (= (of_fixed4 (to_fixed4 x)) x) :pattern ((to_fixed4 x)))))
(assert (forall ((x tfp3B)) (in_range5 (to_fixed4 x))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_fixed4 (of_fixed4 x)) x)) :pattern ((to_fixed4 (of_fixed4 x))))))
(declare-datatypes () ((tfp3B__ref (mk_tfp3B__ref (tfp3B__content tfp3B)))))
(define-fun tfp3B__ref___projection ((a tfp3B__ref)) tfp3B (tfp3B__content a))
(declare-sort fp3 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 150) x) (<= x 150)))
(declare-const dummy5 fp3)
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun to_fixed5 (fp3) Int)
(declare-fun of_fixed5 (Int) fp3)
(declare-fun user_eq5 (fp3 fp3) Bool)
(declare-fun fxp_div_int5 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int5 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int5 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int5 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int5 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int5 x y)) x (- y))))))) :pattern ((fxp_div_int5 x y))))))
(declare-fun fxp_div_result_int5 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int5 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int5 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int5 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int5 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int5 x y)) x (- y))))))) :pattern ((fxp_div_result_int5 x y))))))
(declare-fun to_int6 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int6 x) 0) (ite (< 0 x) (pos_div_relation (to_int6 x) (* x 1) 15) (pos_div_relation (- (to_int6 x)) (* (- x) 1) 15))) :pattern ((to_int6 x)))))
(declare-fun of_int5 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int5 x) 0) (ite (< 0 x) (pos_div_relation (of_int5 x) (* x 15) 1) (pos_div_relation (- (of_int5 x)) (* (- x) 15) 1))) :pattern ((of_int5 x)))))
(assert (forall ((x fp3)) (! (= (of_fixed5 (to_fixed5 x)) x) :pattern ((to_fixed5 x)))))
(assert (forall ((x fp3)) (in_range6 (to_fixed5 x))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_fixed5 (of_fixed5 x)) x)) :pattern ((to_fixed5 (of_fixed5 x))))))
(declare-datatypes () ((fp3__ref (mk_fp3__ref (fp3__content fp3)))))
(define-fun fp3__ref___projection ((a fp3__ref)) fp3 (fp3__content a))
(declare-sort tfp4B 0)
(define-fun in_range7 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(declare-const dummy6 tfp4B)
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun to_fixed6 (tfp4B) Int)
(declare-fun of_fixed6 (Int) tfp4B)
(declare-fun user_eq6 (tfp4B tfp4B) Bool)
(declare-fun fxp_div_int6 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int6 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int6 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int6 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int6 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int6 x y)) x (- y))))))) :pattern ((fxp_div_int6 x y))))))
(declare-fun fxp_div_result_int6 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int6 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int6 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int6 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int6 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int6 x y)) x (- y))))))) :pattern ((fxp_div_result_int6 x y))))))
(declare-fun to_int7 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int7 x) 0) (ite (< 0 x) (pos_div_relation (to_int7 x) (* x 1) 30) (pos_div_relation (- (to_int7 x)) (* (- x) 1) 30))) :pattern ((to_int7 x)))))
(declare-fun of_int6 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int6 x) 0) (ite (< 0 x) (pos_div_relation (of_int6 x) (* x 30) 1) (pos_div_relation (- (of_int6 x)) (* (- x) 30) 1))) :pattern ((of_int6 x)))))
(assert (forall ((x tfp4B)) (! (= (of_fixed6 (to_fixed6 x)) x) :pattern ((to_fixed6 x)))))
(assert (forall ((x tfp4B)) (in_range7 (to_fixed6 x))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_fixed6 (of_fixed6 x)) x)) :pattern ((to_fixed6 (of_fixed6 x))))))
(declare-datatypes () ((tfp4B__ref (mk_tfp4B__ref (tfp4B__content tfp4B)))))
(define-fun tfp4B__ref___projection ((a tfp4B__ref)) tfp4B (tfp4B__content a))
(declare-sort fp4 0)
(define-fun in_range8 ((x Int)) Bool (and (<= (- 300) x) (<= x 300)))
(declare-const dummy7 fp4)
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun to_fixed7 (fp4) Int)
(declare-fun of_fixed7 (Int) fp4)
(declare-fun user_eq7 (fp4 fp4) Bool)
(declare-fun fxp_div_int7 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int7 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int7 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int7 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int7 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int7 x y)) x (- y))))))) :pattern ((fxp_div_int7 x y))))))
(declare-fun fxp_div_result_int7 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int7 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int7 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int7 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int7 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int7 x y)) x (- y))))))) :pattern ((fxp_div_result_int7 x y))))))
(declare-fun to_int8 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int8 x) 0) (ite (< 0 x) (pos_div_relation (to_int8 x) (* x 1) 30) (pos_div_relation (- (to_int8 x)) (* (- x) 1) 30))) :pattern ((to_int8 x)))))
(declare-fun of_int7 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int7 x) 0) (ite (< 0 x) (pos_div_relation (of_int7 x) (* x 30) 1) (pos_div_relation (- (of_int7 x)) (* (- x) 30) 1))) :pattern ((of_int7 x)))))
(assert (forall ((x fp4)) (! (= (of_fixed7 (to_fixed7 x)) x) :pattern ((to_fixed7 x)))))
(assert (forall ((x fp4)) (in_range8 (to_fixed7 x))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_fixed7 (of_fixed7 x)) x)) :pattern ((to_fixed7 (of_fixed7 x))))))
(declare-datatypes () ((fp4__ref (mk_fp4__ref (fp4__content fp4)))))
(define-fun fp4__ref___projection ((a fp4__ref)) fp4 (fp4__content a))
(declare-const x fp1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y fp2)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun fxp_mult (Int Int) Int)
(assert (forall ((x1 Int)) (forall ((y1 Int)) (! (ite (or (= x1 0) (= y1 0)) (= (fxp_mult x1 y1) 0) (ite (or (and (< 0 x1) (< 0 y1)) (and (< x1 0) (< y1 0))) (pos_div_relation (fxp_mult x1 y1) (* (* (* (* x1 y1) 1) 1) 15) (* (* 3 5) 1)) (pos_div_relation (- (fxp_mult x1 y1)) (- (* (* (* (* x1 y1) 1) 1) 15)) (* (* 3 5) 1)))) :pattern ((fxp_mult x1 y1))))))
(declare-fun fxp_div (Int Int) Int)
(assert (forall ((x1 Int)) (forall ((y1 Int)) (! (ite (= x1 0) (= (fxp_div x1 y1) 0) (ite (and (< 0 x1) (< 0 y1)) (pos_div_relation (fxp_div x1 y1) (* (* (* x1 1) 5) 15) (* (* (* y1 3) 1) 1)) (ite (and (< x1 0) (< y1 0)) (pos_div_relation (fxp_div x1 y1) (* (* (* (- x1) 1) 5) 15) (* (* (* (- y1) 3) 1) 1)) (ite (and (< x1 0) (< 0 y1)) (pos_div_relation (- (fxp_div x1 y1)) (* (* (* (- x1) 1) 5) 15) (* (* (* y1 3) 1) 1)) (=> (and (< 0 x1) (< y1 0)) (pos_div_relation (- (fxp_div x1 y1)) (* (* (* x1 1) 5) 15) (* (* (* (- y1) 3) 1) 1))))))) :pattern ((fxp_div x1 y1))))))
(declare-fun fxp_mult1 (Int Int) Int)
(assert (forall ((x1 Int)) (forall ((y1 Int)) (! (ite (or (= x1 0) (= y1 0)) (= (fxp_mult1 x1 y1) 0) (ite (or (and (< 0 x1) (< 0 y1)) (and (< x1 0) (< y1 0))) (pos_div_relation (fxp_mult1 x1 y1) (* (* (* (* x1 y1) 1) 1) 30) (* (* 3 5) 1)) (pos_div_relation (- (fxp_mult1 x1 y1)) (- (* (* (* (* x1 y1) 1) 1) 30)) (* (* 3 5) 1)))) :pattern ((fxp_mult1 x1 y1))))))
(declare-fun fxp_div1 (Int Int) Int)
(assert (forall ((x1 Int)) (forall ((y1 Int)) (! (ite (= x1 0) (= (fxp_div1 x1 y1) 0) (ite (and (< 0 x1) (< 0 y1)) (pos_div_relation (fxp_div1 x1 y1) (* (* (* x1 1) 5) 30) (* (* (* y1 3) 1) 1)) (ite (and (< x1 0) (< y1 0)) (pos_div_relation (fxp_div1 x1 y1) (* (* (* (- x1) 1) 5) 30) (* (* (* (- y1) 3) 1) 1)) (ite (and (< x1 0) (< 0 y1)) (pos_div_relation (- (fxp_div1 x1 y1)) (* (* (* (- x1) 1) 5) 30) (* (* (* y1 3) 1) 1)) (=> (and (< 0 x1) (< y1 0)) (pos_div_relation (- (fxp_div1 x1 y1)) (* (* (* x1 1) 5) 30) (* (* (* (- y1) 3) 1) 1))))))) :pattern ((fxp_div1 x1 y1))))))
(assert (and (<= (abs (to_fixed1 x)) 24) (<= (abs (to_fixed3 y)) 10)))
(assert (not (in_range5 (fxp_div (to_fixed1 x) (to_fixed3 y)))))
(check-sat)
(exit)
