(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range temp___expr_33)))
(declare-fun gcd (Int Int) Int)
(declare-fun gcd__function_guard (Int Int Int) Bool)
(assert (forall ((a Int) (b Int)) (! (=> (and (dynamic_invariant a true true true) (dynamic_invariant b true true true)) (dynamic_invariant (gcd a b) true false true)) :pattern ((gcd a b)))))
(declare-const m Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const g Int)
(declare-const c Int)
(declare-const d Int)
(declare-const r Int)
(declare-const temp___134 Int)
(declare-const temp___133 Int)
(declare-const temp___132 Int)
(declare-const result Int)
(declare-const c1 Int)
(declare-const result1 Int)
(declare-const d1 Int)
(declare-const c2 Int)
(declare-const d2 Int)
(declare-const r1 Int)
(declare-const c3 Int)
(declare-const d3 Int)
(declare-const r2 Int)
(declare-const c4 Int)
(declare-const d4 Int)
(declare-const r3 Int)
(declare-const c5 Int)
(declare-const d5 Int)
(declare-const r4 Int)
(declare-const c6 Int)
(declare-const d6 Int)
(declare-const r5 Int)
(declare-const c7 Int)
(declare-const d7 Int)
(declare-const r6 Int)
(declare-const c8 Int)
(declare-const d8 Int)
(declare-const r7 Int)
(declare-const result2 int__ref)
(declare-const g1 Int)
(declare-const g2 int__ref)
(declare-const c9 int__ref)
(declare-const d9 int__ref)
(declare-const r8 int__ref)
(declare-const g3 Int)
(declare-const c10 Int)
(declare-const d10 Int)
(declare-const r9 Int)
(define-fun r10 () int__ref (mk_int__ref r6))
(define-fun d11 () int__ref (mk_int__ref d7))
(define-fun c11 () int__ref (mk_int__ref c7))
(define-fun r11 () int__ref (mk_int__ref r4))
(define-fun d12 () int__ref (mk_int__ref d5))
(define-fun c12 () int__ref (mk_int__ref c5))
(assert (in_range m))
(assert (in_range n))
(assert (=> (<= 0 2147483647) (in_range g)))
(assert (=> (<= 0 2147483647) (in_range c)))
(assert (=> (<= 0 2147483647) (in_range d)))
(assert (=> (<= 0 2147483647) (in_range r)))
(assert (= (mk_int__ref result) (mk_int__ref c)))
(assert (= c1 m))
(assert (= (mk_int__ref result1) (mk_int__ref d)))
(assert (= d1 n))
(assert (= temp___134 r))
(assert (= temp___133 d1))
(assert (= temp___132 c1))
(assert (= (gcd c2 d2) (gcd m n)))
(assert (and (and (=> (<= 0 2147483647) (in_range c2)) (=> (<= 0 2147483647) (in_range d2))) (=> (<= 0 2147483647) (in_range r1))))
(assert (= r1 r2))
(assert (= d2 d3))
(assert (= c2 c3))
(assert (= r3 r1))
(assert (= d4 d2))
(assert (= c4 c2))
(assert (= d2 0))
(assert (= r11 (mk_int__ref r2)))
(assert (= d12 (mk_int__ref d3)))
(assert (= c12 (mk_int__ref c3)))
(assert (= r5 r3))
(assert (= d6 d4))
(assert (= c6 c4))
(assert (= r10 r11))
(assert (= d11 d12))
(assert (= c11 c12))
(assert (= r7 r5))
(assert (= d8 d6))
(assert (= c8 c6))
(assert (= result2 (mk_int__ref g)))
(assert (= g1 c7))
(assert (= r8 r10))
(assert (= d9 d11))
(assert (= c9 c11))
(assert (= g2 (mk_int__ref g1)))
(assert (= r9 r7))
(assert (= d10 d8))
(assert (= c10 c8))
(assert (= g3 g1))
(assert (not (= (int__content g2) (gcd m n))))
(check-sat)
(exit)
