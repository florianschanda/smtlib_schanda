(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic b : int

logic attr__ATTRIBUTE_ADDRESS : int

logic p : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic c : int

logic d : int

logic q : int

logic r : int

logic w : int

logic x : int

logic y : int

logic temp___159 : int

logic temp___158 : int

logic temp___157 : int

logic temp___156 : int

logic temp___155 : int

logic temp___154 : int

logic temp___153 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic q1 : int

logic r1 : int

logic w1 : int

logic result : int

logic c1 : int

logic result1 : int

logic d1 : int

logic result2 : int

logic x1 : int

logic result3 : int

logic y1 : int

logic c2 : int

logic d2 : int

logic q2 : int

logic r2 : int

logic w2 : int

logic x2 : int

logic y2 : int

logic result4 : int

logic q3 : int

logic result5 : int

logic r3 : int

logic result6 : int

logic w3 : int

logic result7 : int

logic c3 : int

logic result8 : int

logic d3 : int

logic result9 : int

logic x3 : int

logic result10 : int

logic y3 : int

logic c4 : int

logic d4 : int

logic q4 : int

logic r4 : int

logic w4 : int

logic x4 : int

logic y4 : int

logic c5 : int

logic d5 : int

logic q5 : int

logic r5 : int

logic w5 : int

logic x5 : int

logic y5 : int

logic c6 : int

logic d6 : int

logic q6 : int

logic r6 : int

logic w6 : int

logic x6 : int

logic y6 : int

logic c7 : int

logic d7 : int

logic q7 : int

logic r7 : int

logic w7 : int

logic x7 : int

logic y7 : int

axiom H : in_range1(b)

axiom H1 : in_range1(p)

axiom H2 : (((- 2147483648) <= 2147483647) -> in_range1(c))

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(d))

axiom H4 : (((- 2147483648) <= 2147483647) -> in_range1(q))

axiom H5 : (((- 2147483648) <= 2147483647) -> in_range1(r))

axiom H6 : (((- 2147483648) <= 2147483647) -> in_range1(w))

axiom H7 : (((- 2147483648) <= 2147483647) -> in_range1(x))

axiom H8 : (((- 2147483648) <= 2147483647) -> in_range1(y))

axiom H9 : (result = c)

axiom H10 : (c1 = p)

axiom H11 : (result1 = d)

axiom H12 : (d1 = b)

axiom H13 : (result2 = x)

axiom H14 : (x1 = 0)

axiom H15 : (result3 = y)

axiom H16 : (y1 = 1)

axiom H17 : ((not (d1 = 1)) -> (temp___159 = w))

axiom H18 : ((not (d1 = 1)) -> (temp___158 = r))

axiom H19 : ((not (d1 = 1)) -> (temp___157 = q))

axiom H20 : ((not (d1 = 1)) -> (temp___156 = d1))

axiom H21 : ((not (d1 = 1)) -> (temp___155 = c1))

axiom H22 : ((not (d1 = 1)) -> (temp___154 = y1))

axiom H23 : ((not (d1 = 1)) -> (temp___153 = x1))

axiom H24 : ((not (d1 = 1)) -> ((((((((((- 2147483648) <= 2147483647) ->
  in_range1(x2)) and (((- 2147483648) <= 2147483647) -> in_range1(y2))) and
  (((- 2147483648) <= 2147483647) -> in_range1(c2))) and
  (((- 2147483648) <= 2147483647) -> in_range1(d2))) and
  (((- 2147483648) <= 2147483647) -> in_range1(q2))) and
  (((- 2147483648) <= 2147483647) -> in_range1(r2))) and
  (((- 2147483648) <= 2147483647) -> in_range1(w2))) and (not (d2 = 1))))

axiom H25 : ((not (d1 = 1)) -> ((o = comp_div(c2,d2)) and
  in_range1(comp_div(c2,d2))))

axiom H26 : ((not (d1 = 1)) -> (q2 = result4))

axiom H27 : ((not (d1 = 1)) -> (q3 = o))

axiom H28 : ((not (d1 = 1)) -> (r2 = result5))

axiom H29 : ((not (d1 = 1)) -> (r3 = mod(c2, d2)))

axiom H30 : ((not (d1 = 1)) -> ((o1 = (q3 * y2)) and in_range1((q3 * y2))))

axiom H31 : ((not (d1 = 1)) -> (o2 = (x2 - o1)))

axiom H32 : ((not (d1 = 1)) -> ((o3 = o2) and in_range1(o2)))

axiom H33 : ((not (d1 = 1)) -> (result6 = w2))

axiom H34 : ((not (d1 = 1)) -> (w3 = o3))

axiom H35 : ((not (d1 = 1)) -> (result7 = c2))

axiom H36 : ((not (d1 = 1)) -> (c3 = d2))

axiom H37 : ((not (d1 = 1)) -> (result8 = d2))

axiom H38 : ((not (d1 = 1)) -> (d3 = r3))

axiom H39 : ((not (d1 = 1)) -> (result9 = x2))

axiom H40 : ((not (d1 = 1)) -> (x3 = y2))

axiom H41 : ((not (d1 = 1)) -> (result10 = y2))

axiom H42 : ((not (d1 = 1)) -> (y3 = w3))

axiom H43 : ((not (d1 = 1)) -> (d3 = 1))

axiom H44 : ((not (d1 = 1)) -> (y4 = y3))

axiom H45 : ((not (d1 = 1)) -> (x4 = x3))

axiom H46 : ((not (d1 = 1)) -> (w4 = w3))

axiom H47 : ((not (d1 = 1)) -> (r4 = r3))

axiom H48 : ((not (d1 = 1)) -> (q4 = q3))

axiom H49 : ((not (d1 = 1)) -> (d4 = d3))

axiom H50 : ((not (d1 = 1)) -> (c4 = c3))

axiom H51 : ((not (d1 = 1)) -> (y5 = y3))

axiom H52 : ((not (d1 = 1)) -> (x5 = x3))

axiom H53 : ((not (d1 = 1)) -> (w5 = w3))

axiom H54 : ((not (d1 = 1)) -> (r5 = r3))

axiom H55 : ((not (d1 = 1)) -> (q5 = q3))

axiom H56 : ((not (d1 = 1)) -> (d5 = d3))

axiom H57 : ((not (d1 = 1)) -> (c5 = c3))

axiom H58 : ((not (d1 = 1)) -> (y6 = y4))

axiom H59 : ((not (d1 = 1)) -> (x6 = x4))

axiom H60 : ((not (d1 = 1)) -> (w6 = w4))

axiom H61 : ((not (d1 = 1)) -> (r6 = r4))

axiom H62 : ((not (d1 = 1)) -> (q6 = q4))

axiom H63 : ((not (d1 = 1)) -> (d6 = d4))

axiom H64 : ((not (d1 = 1)) -> (c6 = c4))

axiom H65 : ((not (d1 = 1)) -> (y7 = y5))

axiom H66 : ((not (d1 = 1)) -> (x7 = x5))

axiom H67 : ((not (d1 = 1)) -> (w7 = w5))

axiom H68 : ((not (d1 = 1)) -> (r7 = r5))

axiom H69 : ((not (d1 = 1)) -> (q7 = q5))

axiom H70 : ((not (d1 = 1)) -> (d7 = d5))

axiom H71 : ((not (d1 = 1)) -> (c7 = c5))

axiom H72 : ((d1 = 1) -> (y6 = y1))

axiom H73 : ((d1 = 1) -> (x6 = x1))

axiom H74 : ((d1 = 1) -> (w6 = w))

axiom H75 : ((d1 = 1) -> (r6 = r))

axiom H76 : ((d1 = 1) -> (q6 = q))

axiom H77 : ((d1 = 1) -> (d6 = d1))

axiom H78 : ((d1 = 1) -> (c6 = c1))

axiom H79 : ((d1 = 1) -> (y7 = y1))

axiom H80 : ((d1 = 1) -> (x7 = x1))

axiom H81 : ((d1 = 1) -> (w7 = w1))

axiom H82 : ((d1 = 1) -> (r7 = r1))

axiom H83 : ((d1 = 1) -> (q7 = q1))

axiom H84 : ((d1 = 1) -> (d7 = d1))

axiom H85 : ((d1 = 1) -> (c7 = c1))

axiom H86 : (y6 <  0)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1((y6 + p))
