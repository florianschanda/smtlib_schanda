(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const maximum_root Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert (= maximum_root 46341))
(declare-const lower Int)
(declare-const upper Int)
(declare-const middle Int)
(declare-const loop_tutorial__isqrt__result Int)
(declare-const o Int)
(declare-const temp___156 Int)
(declare-const temp___155 Int)
(declare-const temp___154 Int)
(declare-const temp___158 Int)
(declare-const temp___157 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const result Int)
(declare-const lower1 Int)
(declare-const result1 Int)
(declare-const upper1 Int)
(declare-const result2 Int)
(declare-const upper2 Int)
(declare-const lower2 Int)
(declare-const upper3 Int)
(declare-const middle1 Int)
(declare-const temp___1581 Int)
(declare-const temp___1571 Int)
(declare-const result3 Int)
(declare-const temp___1582 Int)
(declare-const result4 Int)
(declare-const temp___1572 Int)
(declare-const result5 Bool)
(declare-const lower3 Int)
(declare-const upper4 Int)
(declare-const middle2 Int)
(declare-const lower4 Int)
(declare-const upper5 Int)
(declare-const middle3 Int)
(declare-const lower5 int__ref)
(declare-const upper6 int__ref)
(declare-const middle4 int__ref)
(declare-const lower6 Int)
(declare-const upper7 Int)
(declare-const middle5 Int)
(declare-const lower7 int__ref)
(declare-const upper8 int__ref)
(declare-const middle6 int__ref)
(declare-const lower8 Int)
(declare-const upper9 Int)
(declare-const middle7 Int)
(declare-const result6 int__ref)
(declare-const loop_tutorial__isqrt__result1 Int)
(declare-const loop_tutorial__isqrt__result2 int__ref)
(declare-const loop_tutorial__isqrt__result3 Int)
(declare-const lower9 int__ref)
(declare-const upper10 int__ref)
(declare-const middle8 int__ref)
(declare-const loop_tutorial__isqrt__result4 int__ref)
(declare-const lower10 Int)
(declare-const upper11 Int)
(declare-const middle9 Int)
(declare-const loop_tutorial__isqrt__result5 Int)
(define-fun upper12 () int__ref (mk_int__ref upper))
(assert (in_range2 n))
(assert (=> (<= 0 2147483647) (in_range2 lower)))
(assert (=> (<= 0 2147483647) (in_range2 upper)))
(assert (=> (<= 0 2147483647) (in_range2 middle)))
(assert (in_range2 maximum_root))
(assert (= (mk_int__ref result) (mk_int__ref lower)))
(assert (= lower1 0))
(assert (=> (<= 46341 n) (= (mk_int__ref result1) upper12)))
(assert (=> (<= 46341 n) (= upper1 46341)))
(assert (=> (not (<= 46341 n)) (and (= o (+ n 1)) (in_range1 (+ n 1)))))
(assert (=> (not (<= 46341 n)) (= (mk_int__ref result2) upper12)))
(assert (=> (not (<= 46341 n)) (= upper2 o)))
(assert (=> (not (<= 46341 n)) (= upper1 upper2)))
(assert (= temp___156 upper1))
(assert (= temp___155 lower1))
(assert (= temp___154 middle))
(assert (= 0 temp___158))
(assert (= 0 temp___157))
(assert (and (and (and (and (<= 0 lower2) (<= upper3 46341)) (< lower2 upper3)) (< n (* upper3 upper3))) (<= (* lower2 lower2) n)))
(assert (and (and (=> (<= 0 2147483647) (in_range2 middle1)) (=> (<= 0 2147483647) (in_range2 lower2))) (=> (<= 0 2147483647) (in_range2 upper3))))
(assert (= temp___1581 result3))
(assert (= temp___1582 lower2))
(assert (= temp___1571 result4))
(assert (= temp___1572 upper3))
(assert (= middle1 middle2))
(assert (= upper3 upper4))
(assert (= lower2 lower3))
(assert (= middle3 middle1))
(assert (= upper5 upper3))
(assert (= lower4 lower2))
(assert (and (= o1 (+ lower2 1)) (in_range1 (+ lower2 1))))
(assert (= result5 (ite (= o1 upper3) true false)))
(assert (= result5 true))
(assert (= middle4 (mk_int__ref middle2)))
(assert (= upper6 (mk_int__ref upper4)))
(assert (= lower5 (mk_int__ref lower3)))
(assert (= middle5 middle3))
(assert (= upper7 upper5))
(assert (= lower6 lower4))
(assert (= middle6 middle4))
(assert (= upper8 upper6))
(assert (= lower7 lower5))
(assert (= middle7 middle5))
(assert (= upper9 upper7))
(assert (= lower8 lower6))
(assert (= loop_tutorial__isqrt__result2 (mk_int__ref loop_tutorial__isqrt__result1)))
(assert (= loop_tutorial__isqrt__result3 loop_tutorial__isqrt__result1))
(assert (= result6 (mk_int__ref loop_tutorial__isqrt__result)))
(assert (= loop_tutorial__isqrt__result1 (int__content lower7)))
(assert (= loop_tutorial__isqrt__result4 loop_tutorial__isqrt__result2))
(assert (= middle8 middle6))
(assert (= upper10 upper8))
(assert (= lower9 lower7))
(assert (= loop_tutorial__isqrt__result5 loop_tutorial__isqrt__result3))
(assert (= middle9 middle7))
(assert (= upper11 upper9))
(assert (= lower10 lower8))
(assert (and (= o2 (+ (int__content loop_tutorial__isqrt__result4) 1)) (in_range1 (+ (int__content loop_tutorial__isqrt__result4) 1))))
(assert (not (in_range1 (+ (int__content loop_tutorial__isqrt__result4) 1))))
(check-sat)
(exit)
