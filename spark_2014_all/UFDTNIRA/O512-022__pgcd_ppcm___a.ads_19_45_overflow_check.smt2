(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort long_long_integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x) (<= x 9223372036854775807)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (long_long_integer long_long_integer) Bool)
(declare-const dummy1 long_long_integer)
(declare-datatypes () ((long_long_integer__ref (mk_long_long_integer__ref (long_long_integer__content long_long_integer)))))
(define-fun long_long_integer__ref___projection ((a long_long_integer__ref)) long_long_integer (long_long_integer__content a))
(declare-fun pgcd (Int Int) Int)
(declare-fun pgcd__function_guard (Int Int Int) Bool)
(assert (forall ((a Int) (b Int)) (! (=> (and (and (dynamic_invariant a true true true true) (dynamic_invariant b true true true true)) (and (not (= a (- 2147483648))) (not (= b (- 2147483648))))) (let ((result (pgcd a b))) (and (or (or (= result 0) (and (<= 1 result) (<= result (abs a)))) (and (<= 1 result) (<= result (abs b)))) (dynamic_invariant result true false true true)))) :pattern ((pgcd a b)))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_32 Int) (temp___is_init_28 Bool) (temp___skip_constant_29 Bool) (temp___do_toplevel_30 Bool) (temp___do_typ_inv_31 Bool)) Bool (=> (or (= temp___is_init_28 true) (<= (- 9223372036854775808) 9223372036854775807)) (in_range2 temp___expr_32)))
(declare-const r Int)
(declare-const a__ppcm__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const result Int)
(declare-const r1 Int)
(declare-const result1 Int)
(declare-const r2 Int)
(declare-const result2 Int)
(declare-const a__ppcm__result1 Int)
(declare-const a__ppcm__result2 Int)
(declare-const a__ppcm__result3 Int)
(declare-const r3 Int)
(declare-const a__ppcm__result4 Int)
(declare-const r4 Int)
(declare-const a__ppcm__result5 Int)
(declare-const result3 Bool)
(assert (in_range1 a))
(assert (in_range1 b))
(assert (and (not (= a (- 2147483648))) (and (not (= b (- 2147483648))) (<= (abs (* a b)) 2147483647))))
(assert (and (= o (pgcd a b)) (and (in_range1 o) (or (or (= o 0) (and (<= 1 o) (<= o (abs a)))) (and (<= 1 o) (<= o (abs b)))))))
(assert (= (mk_int__ref result) (mk_int__ref r)))
(assert (= r1 o))
(assert (in_range1 r1))
(assert (=> (not (= r1 0)) (and (= o1 (* a b)) (in_range1 (* a b)))))
(assert (=> (not (= r1 0)) (= o2 (div1 o1 r1))))
(assert (=> (not (= r1 0)) (and (= o3 o2) (in_range1 o2))))
(assert (=> (not (= r1 0)) (= r1 result1)))
(assert (=> (not (= r1 0)) (= r2 o3)))
(assert (=> (not (not (= r1 0))) (= r2 r1)))
(assert (= a__ppcm__result1 a__ppcm__result2))
(assert (= a__ppcm__result3 a__ppcm__result1))
(assert (and (= o4 (abs r2)) (in_range1 (abs r2))))
(assert (= (mk_int__ref result2) (mk_int__ref a__ppcm__result)))
(assert (= a__ppcm__result1 o4))
(assert (= (mk_int__ref a__ppcm__result4) (mk_int__ref a__ppcm__result2)))
(assert (= r2 r3))
(assert (= a__ppcm__result5 a__ppcm__result3))
(assert (= r4 r2))
(assert (=> (= a__ppcm__result4 0) (= result3 true)))
(assert (=> (not (= a__ppcm__result4 0)) (and (= o6 (* a b)) (in_range1 (* a b)))))
(assert (=> (not (= a__ppcm__result4 0)) (= o7 (abs o6))))
(assert (=> (not (= a__ppcm__result4 0)) (and (= o8 o7) (in_range1 o7))))
(assert (=> (not (= a__ppcm__result4 0)) (= o9 (ite (<= a__ppcm__result4 o8) true false))))
(assert (=> (not (= a__ppcm__result4 0)) (and (= o5 (abs a)) (in_range1 (abs a)))))
(assert (=> (not (= a__ppcm__result4 0)) (= o10 (ite (<= o5 a__ppcm__result4) true false))))
(assert (=> (not (= a__ppcm__result4 0)) (= result3 (ite (= o10 true) o9 false))))
(assert (not (= result3 true)))
(assert (not (in_range1 (* a b))))
(check-sat)
(exit)
