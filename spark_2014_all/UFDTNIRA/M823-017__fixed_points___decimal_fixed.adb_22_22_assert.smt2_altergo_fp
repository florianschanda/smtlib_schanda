(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type ttB

predicate in_range1(x: int) = (((-32768) <= x) and (x <= 32767))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

logic dummy : ttB

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic to_fixed : ttB -> int

logic of_fixed : int -> ttB

logic user_eq : ttB, ttB -> bool

predicate pos_div_relation(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult : int, int -> int

axiom fxp_mult_def :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation(fxp_mult(x, y), (x * y),
  16)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0)))) ->
  pos_div_relation((-fxp_mult(x, y)), (-(x * y)), 16)))))))

logic fxp_div : int, int -> int

axiom fxp_div_def :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. (((x = 0) -> (fxp_div(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) -> pos_div_relation(fxp_div(x,
  y), (x * 16), y)) and ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and
  (y <  0)) -> pos_div_relation(fxp_div(x, y), ((-x) * 16), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation((-fxp_div(x, y)), ((-x) * 16), y)) and ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) -> pos_div_relation((-fxp_div(x,
  y)), (x * 16), (-y)))))))))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. (((x = 0) -> (fxp_div_int(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation(fxp_div_int(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x,
  y), (-x), (-y))) and ((not ((x <  0) and (y <  0))) -> ((((x <  0) and
  (0 <  y)) -> pos_div_relation((-fxp_div_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation((-fxp_div_int(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int : int, int -> int

axiom fxp_div_result_int_def :
  (forall x:int.
  (forall y:int [fxp_div_result_int(x, y)]. (((x = 0) ->
  (fxp_div_result_int(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna(fxp_div_result_int(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna(fxp_div_result_int(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna((-fxp_div_result_int(x, y)), x, (-y)))))))))))))

logic to_int1 : int -> int

axiom to_int_def1 :
  (forall x:int [to_int1(x)]. (((x = 0) -> (to_int1(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation(to_int1(x), x, 16)) and
  ((not (0 <  x)) -> pos_div_relation((-to_int1(x)), (-x), 16))))))

logic of_real : real -> int

axiom inversion_axiom :
  (forall x:ttB [to_fixed(x)]. (of_fixed(to_fixed(x)) = x))

axiom range_axiom : (forall x:ttB. in_range1(to_fixed(x)))

axiom coerce_axiom :
  (forall x:int [to_fixed(of_fixed(x))]. (in_range1(x) ->
  (to_fixed(of_fixed(x)) = x)))

type ttB__ref = { ttB__content : ttB
}

function ttB__ref___projection(a: ttB__ref) : ttB = (a).ttB__content

type t

predicate in_range2(x: int) = (((-160) <= x) and (x <= 160))

logic dummy1 : t

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic to_fixed1 : t -> int

logic of_fixed1 : int -> t

logic user_eq1 : t, t -> bool

predicate pos_div_relation1(res: int, num: int, den: int) = (((num = 0) ->
  (res = 0)) and ((not (num = 0)) -> (((num = (comp_div(num,den) * den)) ->
  (res = comp_div(num,den))) and ((not (num = (comp_div(num,den) * den))) ->
  ((comp_div(num,den) <= res) and (res <= (comp_div(num,den) + 1)))))))

predicate pos_div_relation_rna1(res: int, num: int, den: int) =
  (((num = 0) -> (res = 0)) and ((not (num = 0)) ->
  (((num = (comp_div(num,den) * den)) -> (res = comp_div(num,den))) and
  ((not (num = (comp_div(num,den) * den))) ->
  ((((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num)) ->
  (res = comp_div(num,den))) and
  ((not ((num - (comp_div(num,den) * den)) <  (((comp_div(num,den) + 1) * den) - num))) ->
  (res = (comp_div(num,den) + 1))))))))

logic fxp_mult1 : int, int -> int

axiom fxp_mult_def1 :
  (forall x:int.
  (forall y:int [fxp_mult1(x, y)]. ((((x = 0) or (y = 0)) -> (fxp_mult1(x,
  y) = 0)) and ((not ((x = 0) or (y = 0))) -> (((((0 <  x) and (0 <  y)) or
  ((x <  0) and (y <  0))) -> pos_div_relation1(fxp_mult1(x, y), (x * y),
  16)) and ((not (((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0)))) ->
  pos_div_relation1((-fxp_mult1(x, y)), (-(x * y)), 16)))))))

logic fxp_div1 : int, int -> int

axiom fxp_div_def1 :
  (forall x:int.
  (forall y:int [fxp_div1(x, y)]. (((x = 0) -> (fxp_div1(x, y) = 0)) and
  ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation1(fxp_div1(x, y), (x * 16), y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) -> pos_div_relation1(fxp_div1(x,
  y), ((-x) * 16), (-y))) and ((not ((x <  0) and (y <  0))) ->
  ((((x <  0) and (0 <  y)) -> pos_div_relation1((-fxp_div1(x, y)),
  ((-x) * 16), y)) and ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and
  (y <  0)) -> pos_div_relation1((-fxp_div1(x, y)), (x * 16), (-y)))))))))))))

logic fxp_div_int1 : int, int -> int

axiom fxp_div_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_int1(x, y)]. (((x = 0) -> (fxp_div_int1(x,
  y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and (0 <  y)) ->
  pos_div_relation1(fxp_div_int1(x, y), x, y)) and ((not ((0 <  x) and
  (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation1(fxp_div_int1(x, y), (-x), (-y))) and ((not ((x <  0) and
  (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation1((-fxp_div_int1(x, y)), (-x), y)) and ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation1((-fxp_div_int1(x, y)), x, (-y)))))))))))))

logic fxp_div_result_int1 : int, int -> int

axiom fxp_div_result_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_result_int1(x, y)]. (((x = 0) ->
  (fxp_div_result_int1(x, y) = 0)) and ((not (x = 0)) -> ((((0 <  x) and
  (0 <  y)) -> pos_div_relation_rna1(fxp_div_result_int1(x, y), x, y)) and
  ((not ((0 <  x) and (0 <  y))) -> ((((x <  0) and (y <  0)) ->
  pos_div_relation_rna1(fxp_div_result_int1(x, y), (-x), (-y))) and
  ((not ((x <  0) and (y <  0))) -> ((((x <  0) and (0 <  y)) ->
  pos_div_relation_rna1((-fxp_div_result_int1(x, y)), (-x), y)) and
  ((not ((x <  0) and (0 <  y))) -> (((0 <  x) and (y <  0)) ->
  pos_div_relation_rna1((-fxp_div_result_int1(x, y)), x, (-y)))))))))))))

logic to_int2 : int -> int

axiom to_int_def2 :
  (forall x:int [to_int2(x)]. (((x = 0) -> (to_int2(x) = 0)) and
  ((not (x = 0)) -> (((0 <  x) -> pos_div_relation1(to_int2(x), x, 16)) and
  ((not (0 <  x)) -> pos_div_relation1((-to_int2(x)), (-x), 16))))))

logic of_real1 : real -> int

axiom inversion_axiom1 :
  (forall x:t [to_fixed1(x)]. (of_fixed1(to_fixed1(x)) = x))

axiom range_axiom1 : (forall x:t. in_range2(to_fixed1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_fixed1(of_fixed1(x))]. (in_range2(x) ->
  (to_fixed1(of_fixed1(x)) = x)))

type t__ref = { t__content : t
}

function t__ref___projection(a: t__ref) : t = (a).t__content

logic x : t

logic attr__ATTRIBUTE_ADDRESS : int

logic y : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom y__def_axiom : (y = of_fixed1(80))

 (* File "decimal_fixed.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall z:t. forall o:t. forall o1:t. forall o2:t. forall result:t.
  forall z1:t. forall result1:t. forall z2:t. forall result2:t. forall z3:t.
  ((((-80) <= to_fixed1(x)) and (to_fixed1(x) <= 80)) ->
  (((to_fixed1(o) = (to_fixed1(x) + to_fixed1(x))) and ((result = z) and
  (z1 = o))) -> ((((0 <  to_fixed1(x)) and
  (to_fixed1(x) <  to_fixed1(z1))) or ((not (0 <  to_fixed1(x))) and
  (((to_fixed1(x) <  0) and (to_fixed1(z1) <  to_fixed1(x))) or
  ((not (to_fixed1(x) <  0)) and (to_fixed1(z1) = to_fixed1(x)))))) ->
  (((to_fixed1(o1) = (to_fixed1(x) + 80)) and ((result1 = z1) and
  (z2 = o1))) -> ((to_fixed1(x) <  to_fixed1(z2)) ->
  (((to_fixed1(o2) = 112) and ((result2 = z2) and (z3 = o2))) ->
  (to_fixed1(z3) = 112))))))))
