(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 25) x) (<= x 25)))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun pos_div_relation ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (and (<= exact res) (<= res (+ exact 1)))))))
(define-fun pos_div_relation_rna ((res Int) (num Int) (den Int)) Bool (let ((exact (div1 num den))) (ite (= num 0) (= res 0) (ite (= num (* exact den)) (= res exact) (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num)) (= res exact) (= res (+ exact 1)))))))
(declare-const dummy t)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun to_fixed (t) Int)
(declare-fun of_fixed (Int) t)
(declare-fun user_eq (t t) Bool)
(declare-fun fxp_div_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int x y)) x (- y))))))) :pattern ((fxp_div_int x y))))))
(declare-fun fxp_div_result_int (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int x y)) x (- y))))))) :pattern ((fxp_div_result_int x y))))))
(declare-fun to_int1 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int1 x) 0) (ite (< 0 x) (pos_div_relation (to_int1 x) (* x 2) 5) (pos_div_relation (- (to_int1 x)) (* (- x) 2) 5))) :pattern ((to_int1 x)))))
(declare-fun of_int (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int x) 0) (ite (< 0 x) (pos_div_relation (of_int x) (* x 5) 2) (pos_div_relation (- (of_int x)) (* (- x) 5) 2))) :pattern ((of_int x)))))
(assert (forall ((x t)) (! (= (of_fixed (to_fixed x)) x) :pattern ((to_fixed x)))))
(assert (forall ((x t)) (in_range1 (to_fixed x))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_fixed (of_fixed x)) x)) :pattern ((to_fixed (of_fixed x))))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(declare-sort t2 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 250) x) (<= x 250)))
(declare-const dummy1 t2)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun to_fixed1 (t2) Int)
(declare-fun of_fixed1 (Int) t2)
(declare-fun user_eq1 (t2 t2) Bool)
(declare-fun fxp_div_int1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int1 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int1 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int1 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int1 x y)) x (- y))))))) :pattern ((fxp_div_int1 x y))))))
(declare-fun fxp_div_result_int1 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int1 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int1 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int1 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int1 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int1 x y)) x (- y))))))) :pattern ((fxp_div_result_int1 x y))))))
(declare-fun to_int2 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int2 x) 0) (ite (< 0 x) (pos_div_relation (to_int2 x) (* x 1) 25) (pos_div_relation (- (to_int2 x)) (* (- x) 1) 25))) :pattern ((to_int2 x)))))
(declare-fun of_int1 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int1 x) 0) (ite (< 0 x) (pos_div_relation (of_int1 x) (* x 25) 1) (pos_div_relation (- (of_int1 x)) (* (- x) 25) 1))) :pattern ((of_int1 x)))))
(assert (forall ((x t2)) (! (= (of_fixed1 (to_fixed1 x)) x) :pattern ((to_fixed1 x)))))
(assert (forall ((x t2)) (in_range2 (to_fixed1 x))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_fixed1 (of_fixed1 x)) x)) :pattern ((to_fixed1 (of_fixed1 x))))))
(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content t2)))))
(define-fun t2__ref___projection ((a t2__ref)) t2 (t2__content a))
(declare-sort t3 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))
(declare-const dummy2 t3)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun to_fixed2 (t3) Int)
(declare-fun of_fixed2 (Int) t3)
(declare-fun user_eq2 (t3 t3) Bool)
(declare-fun fxp_div_int2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int2 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int2 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int2 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int2 x y)) x (- y))))))) :pattern ((fxp_div_int2 x y))))))
(declare-fun fxp_div_result_int2 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int2 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int2 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int2 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int2 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int2 x y)) x (- y))))))) :pattern ((fxp_div_result_int2 x y))))))
(declare-fun to_int3 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int3 x) 0) (ite (< 0 x) (pos_div_relation (to_int3 x) (* x 1) 1) (pos_div_relation (- (to_int3 x)) (* (- x) 1) 1))) :pattern ((to_int3 x)))))
(declare-fun of_int2 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int2 x) 0) (ite (< 0 x) (pos_div_relation (of_int2 x) (* x 1) 1) (pos_div_relation (- (of_int2 x)) (* (- x) 1) 1))) :pattern ((of_int2 x)))))
(assert (forall ((x t3)) (! (= (of_fixed2 (to_fixed2 x)) x) :pattern ((to_fixed2 x)))))
(assert (forall ((x t3)) (in_range3 (to_fixed2 x))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_fixed2 (of_fixed2 x)) x)) :pattern ((to_fixed2 (of_fixed2 x))))))
(declare-datatypes () ((t3__ref (mk_t3__ref (t3__content t3)))))
(define-fun t3__ref___projection ((a t3__ref)) t3 (t3__content a))
(declare-sort t4 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 5) x) (<= x 5)))
(declare-const dummy3 t4)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun to_fixed3 (t4) Int)
(declare-fun of_fixed3 (Int) t4)
(declare-fun user_eq3 (t4 t4) Bool)
(declare-fun fxp_div_int3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_int3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation (fxp_div_int3 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation (fxp_div_int3 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation (- (fxp_div_int3 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation (- (fxp_div_int3 x y)) x (- y))))))) :pattern ((fxp_div_int3 x y))))))
(declare-fun fxp_div_result_int3 (Int Int) Int)
(assert (forall ((x Int)) (forall ((y Int)) (! (ite (= x 0) (= (fxp_div_result_int3 x y) 0) (ite (and (< 0 x) (< 0 y)) (pos_div_relation_rna (fxp_div_result_int3 x y) x y) (ite (and (< x 0) (< y 0)) (pos_div_relation_rna (fxp_div_result_int3 x y) (- x) (- y)) (ite (and (< x 0) (< 0 y)) (pos_div_relation_rna (- (fxp_div_result_int3 x y)) (- x) y) (=> (and (< 0 x) (< y 0)) (pos_div_relation_rna (- (fxp_div_result_int3 x y)) x (- y))))))) :pattern ((fxp_div_result_int3 x y))))))
(declare-fun to_int4 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (to_int4 x) 0) (ite (< 0 x) (pos_div_relation (to_int4 x) (* x 2) 1) (pos_div_relation (- (to_int4 x)) (* (- x) 2) 1))) :pattern ((to_int4 x)))))
(declare-fun of_int3 (Int) Int)
(assert (forall ((x Int)) (! (ite (= x 0) (= (of_int3 x) 0) (ite (< 0 x) (pos_div_relation (of_int3 x) (* x 1) 2) (pos_div_relation (- (of_int3 x)) (* (- x) 1) 2))) :pattern ((of_int3 x)))))
(assert (forall ((x t4)) (! (= (of_fixed3 (to_fixed3 x)) x) :pattern ((to_fixed3 x)))))
(assert (forall ((x t4)) (in_range4 (to_fixed3 x))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_fixed3 (of_fixed3 x)) x)) :pattern ((to_fixed3 (of_fixed3 x))))))
(declare-datatypes () ((t4__ref (mk_t4__ref (t4__content t4)))))
(define-fun t4__ref___projection ((a t4__ref)) t4 (t4__content a))
(declare-const x t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x2 t2)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x3 t3)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x4 t4)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun fxp_mult (Int Int) Int)
(assert (forall ((x1 Int)) (forall ((y Int)) (! (ite (or (= x1 0) (= y 0)) (= (fxp_mult x1 y) 0) (ite (or (and (< 0 x1) (< 0 y)) (and (< x1 0) (< y 0))) (pos_div_relation (fxp_mult x1 y) (* (* (* (* x1 y) 2) 1) 5) (* (* 1 1) 2)) (pos_div_relation (- (fxp_mult x1 y)) (- (* (* (* (* x1 y) 2) 1) 5)) (* (* 1 1) 2)))) :pattern ((fxp_mult x1 y))))))
(declare-fun fxp_div (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (= x5 0) (= (fxp_div x5 y) 0) (ite (and (< 0 x5) (< 0 y)) (pos_div_relation (fxp_div x5 y) (* (* (* x5 2) 1) 5) (* (* (* y 1) 1) 2)) (ite (and (< x5 0) (< y 0)) (pos_div_relation (fxp_div x5 y) (* (* (* (- x5) 2) 1) 5) (* (* (* (- y) 1) 1) 2)) (ite (and (< x5 0) (< 0 y)) (pos_div_relation (- (fxp_div x5 y)) (* (* (* (- x5) 2) 1) 5) (* (* (* y 1) 1) 2)) (=> (and (< 0 x5) (< y 0)) (pos_div_relation (- (fxp_div x5 y)) (* (* (* x5 2) 1) 5) (* (* (* (- y) 1) 1) 2))))))) :pattern ((fxp_div x5 y))))))
(declare-fun fxp_mult1 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (or (= x5 0) (= y 0)) (= (fxp_mult1 x5 y) 0) (ite (or (and (< 0 x5) (< 0 y)) (and (< x5 0) (< y 0))) (pos_div_relation (fxp_mult1 x5 y) (* (* (* (* x5 y) 1) 1) 25) (* (* 1 1) 1)) (pos_div_relation (- (fxp_mult1 x5 y)) (- (* (* (* (* x5 y) 1) 1) 25)) (* (* 1 1) 1)))) :pattern ((fxp_mult1 x5 y))))))
(declare-fun fxp_div1 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (= x5 0) (= (fxp_div1 x5 y) 0) (ite (and (< 0 x5) (< 0 y)) (pos_div_relation (fxp_div1 x5 y) (* (* (* x5 1) 1) 25) (* (* (* y 1) 1) 1)) (ite (and (< x5 0) (< y 0)) (pos_div_relation (fxp_div1 x5 y) (* (* (* (- x5) 1) 1) 25) (* (* (* (- y) 1) 1) 1)) (ite (and (< x5 0) (< 0 y)) (pos_div_relation (- (fxp_div1 x5 y)) (* (* (* (- x5) 1) 1) 25) (* (* (* y 1) 1) 1)) (=> (and (< 0 x5) (< y 0)) (pos_div_relation (- (fxp_div1 x5 y)) (* (* (* x5 1) 1) 25) (* (* (* (- y) 1) 1) 1))))))) :pattern ((fxp_div1 x5 y))))))
(declare-fun fxp_mult2 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (or (= x5 0) (= y 0)) (= (fxp_mult2 x5 y) 0) (ite (or (and (< 0 x5) (< 0 y)) (and (< x5 0) (< y 0))) (pos_div_relation (fxp_mult2 x5 y) (* (* (* (* x5 y) 1) 1) 1) (* (* 25 1) 1)) (pos_div_relation (- (fxp_mult2 x5 y)) (- (* (* (* (* x5 y) 1) 1) 1)) (* (* 25 1) 1)))) :pattern ((fxp_mult2 x5 y))))))
(declare-fun fxp_div2 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (= x5 0) (= (fxp_div2 x5 y) 0) (ite (and (< 0 x5) (< 0 y)) (pos_div_relation (fxp_div2 x5 y) (* (* (* x5 1) 1) 1) (* (* (* y 25) 1) 1)) (ite (and (< x5 0) (< y 0)) (pos_div_relation (fxp_div2 x5 y) (* (* (* (- x5) 1) 1) 1) (* (* (* (- y) 25) 1) 1)) (ite (and (< x5 0) (< 0 y)) (pos_div_relation (- (fxp_div2 x5 y)) (* (* (* (- x5) 1) 1) 1) (* (* (* y 25) 1) 1)) (=> (and (< 0 x5) (< y 0)) (pos_div_relation (- (fxp_div2 x5 y)) (* (* (* x5 1) 1) 1) (* (* (* (- y) 25) 1) 1))))))) :pattern ((fxp_div2 x5 y))))))
(declare-fun fxp_mult3 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (or (= x5 0) (= y 0)) (= (fxp_mult3 x5 y) 0) (ite (or (and (< 0 x5) (< 0 y)) (and (< x5 0) (< y 0))) (pos_div_relation (fxp_mult3 x5 y) (* (* (* (* x5 y) 2) 1) 1) (* (* 1 1) 1)) (pos_div_relation (- (fxp_mult3 x5 y)) (- (* (* (* (* x5 y) 2) 1) 1)) (* (* 1 1) 1)))) :pattern ((fxp_mult3 x5 y))))))
(declare-fun fxp_div3 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (= x5 0) (= (fxp_div3 x5 y) 0) (ite (and (< 0 x5) (< 0 y)) (pos_div_relation (fxp_div3 x5 y) (* (* (* x5 2) 1) 1) (* (* (* y 1) 1) 1)) (ite (and (< x5 0) (< y 0)) (pos_div_relation (fxp_div3 x5 y) (* (* (* (- x5) 2) 1) 1) (* (* (* (- y) 1) 1) 1)) (ite (and (< x5 0) (< 0 y)) (pos_div_relation (- (fxp_div3 x5 y)) (* (* (* (- x5) 2) 1) 1) (* (* (* y 1) 1) 1)) (=> (and (< 0 x5) (< y 0)) (pos_div_relation (- (fxp_div3 x5 y)) (* (* (* x5 2) 1) 1) (* (* (* (- y) 1) 1) 1))))))) :pattern ((fxp_div3 x5 y))))))
(declare-fun fxp_mult4 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (or (= x5 0) (= y 0)) (= (fxp_mult4 x5 y) 0) (ite (or (and (< 0 x5) (< 0 y)) (and (< x5 0) (< y 0))) (pos_div_relation (fxp_mult4 x5 y) (* (* (* (* x5 y) 2) 1) 1) (* (* 5 1) 2)) (pos_div_relation (- (fxp_mult4 x5 y)) (- (* (* (* (* x5 y) 2) 1) 1)) (* (* 5 1) 2)))) :pattern ((fxp_mult4 x5 y))))))
(declare-fun fxp_div4 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (= x5 0) (= (fxp_div4 x5 y) 0) (ite (and (< 0 x5) (< 0 y)) (pos_div_relation (fxp_div4 x5 y) (* (* (* x5 2) 1) 1) (* (* (* y 5) 1) 2)) (ite (and (< x5 0) (< y 0)) (pos_div_relation (fxp_div4 x5 y) (* (* (* (- x5) 2) 1) 1) (* (* (* (- y) 5) 1) 2)) (ite (and (< x5 0) (< 0 y)) (pos_div_relation (- (fxp_div4 x5 y)) (* (* (* (- x5) 2) 1) 1) (* (* (* y 5) 1) 2)) (=> (and (< 0 x5) (< y 0)) (pos_div_relation (- (fxp_div4 x5 y)) (* (* (* x5 2) 1) 1) (* (* (* (- y) 5) 1) 2))))))) :pattern ((fxp_div4 x5 y))))))
(declare-fun fxp_mult5 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (or (= x5 0) (= y 0)) (= (fxp_mult5 x5 y) 0) (ite (or (and (< 0 x5) (< 0 y)) (and (< x5 0) (< y 0))) (pos_div_relation (fxp_mult5 x5 y) (* (* (* (* x5 y) 1) 1) 1) (* (* 1 1) 2)) (pos_div_relation (- (fxp_mult5 x5 y)) (- (* (* (* (* x5 y) 1) 1) 1)) (* (* 1 1) 2)))) :pattern ((fxp_mult5 x5 y))))))
(declare-fun fxp_div5 (Int Int) Int)
(assert (forall ((x5 Int)) (forall ((y Int)) (! (ite (= x5 0) (= (fxp_div5 x5 y) 0) (ite (and (< 0 x5) (< 0 y)) (pos_div_relation (fxp_div5 x5 y) (* (* (* x5 1) 1) 1) (* (* (* y 1) 1) 2)) (ite (and (< x5 0) (< y 0)) (pos_div_relation (fxp_div5 x5 y) (* (* (* (- x5) 1) 1) 1) (* (* (* (- y) 1) 1) 2)) (ite (and (< x5 0) (< 0 y)) (pos_div_relation (- (fxp_div5 x5 y)) (* (* (* (- x5) 1) 1) 1) (* (* (* y 1) 1) 2)) (=> (and (< 0 x5) (< y 0)) (pos_div_relation (- (fxp_div5 x5 y)) (* (* (* x5 1) 1) 1) (* (* (* (- y) 1) 1) 2))))))) :pattern ((fxp_div5 x5 y))))))
(declare-const y t)
(declare-const y2 t2)
(declare-const o t)
(declare-const o1 t2)
(declare-const result t)
(declare-const y1 t)
(declare-const result1 t2)
(declare-const y21 t2)
(assert (= (to_fixed o) (fxp_mult (to_fixed3 x4) 1)))
(assert (= result y))
(assert (= y1 o))
(assert (=> (= (to_fixed3 x4) (- 5)) (= (to_fixed y1) (- 25))))
(assert (=> (= (to_fixed3 x4) 1) (= (to_fixed y1) 5)))
(assert (=> (= (to_fixed3 x4) 2) (= (to_fixed y1) 10)))
(assert (= (to_fixed1 o1) (fxp_mult1 (to_fixed2 x3) 1)))
(assert (= result1 y2))
(assert (= y21 o1))
(assert (=> (= (to_fixed2 x3) (- 10)) (= (to_fixed1 y21) (- 250))))
(assert (=> (= (to_fixed2 x3) 2) (= (to_fixed1 y21) 50)))
(assert (= (to_fixed2 x3) 4))
(assert (not (= (to_fixed1 y21) 100)))
(check-sat)
(exit)
