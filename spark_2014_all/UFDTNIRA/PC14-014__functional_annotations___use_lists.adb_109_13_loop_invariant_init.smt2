(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tcount_typeB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)
(declare-const dummy tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort count_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 2147483647)) (in_range2 temp___expr_141)))
(declare-fun to_rep (count_type) Int)
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_lists__my_lists__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__use_lists__my_lists__list__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_lists__my_lists__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type (rec__use_lists__my_lists__list a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__use_lists__my_lists__list__capacity (us_split_discrs1 a))) (to_rep (rec__use_lists__my_lists__list__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__use_lists__my_lists__list (us_split_fields1 a)) (rec__use_lists__my_lists__list (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const use_lists__my_lists__list__capacity__first__bit Int)
(declare-const use_lists__my_lists__list__capacity__last__bit Int)
(declare-const use_lists__my_lists__list__capacity__position Int)
(assert (<= 0 use_lists__my_lists__list__capacity__first__bit))
(assert (< use_lists__my_lists__list__capacity__first__bit use_lists__my_lists__list__capacity__last__bit))
(assert (<= 0 use_lists__my_lists__list__capacity__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_lists__my_lists__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__use_lists__my_lists__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep (rec__use_lists__my_lists__cursor__node (us_split_fields3 a))) (to_rep (rec__use_lists__my_lists__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const use_lists__my_lists__cursor__node__first__bit Int)
(declare-const use_lists__my_lists__cursor__node__last__bit Int)
(declare-const use_lists__my_lists__cursor__node__position Int)
(assert (<= 0 use_lists__my_lists__cursor__node__first__bit))
(assert (< use_lists__my_lists__cursor__node__first__bit use_lists__my_lists__cursor__node__last__bit))
(assert (<= 0 use_lists__my_lists__cursor__node__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content a))
(define-fun default_initial_assumption ((temp___expr_201 us_rep1) (temp___skip_top_level_202 Bool)) Bool (= (to_rep (rec__use_lists__my_lists__cursor__node (us_split_fields3 temp___expr_201))) 0))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__use_lists__my_lists__list__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true))) :pattern ((length container)))))
(declare-sort extended_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (extended_index extended_index) Bool)
(declare-const dummy4 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(declare-sort element_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (element_type element_type) Bool)
(declare-const dummy6 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_220 Int) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool)) Bool (=> (or (= temp___is_init_217 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_220)))
(define-fun dynamic_invariant2 ((temp___expr_226 Int) (temp___is_init_223 Bool) (temp___skip_constant_224 Bool) (temp___do_toplevel_225 Bool)) Bool (=> (or (= temp___is_init_223 true) (<= 0 2147483647)) (in_range3 temp___expr_226)))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(define-fun oeq ((left us_rep2) (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_233 us_rep2) (temp___skip_top_level_234 Bool)) Bool (=> (not (= temp___skip_top_level_234 true)) (= (length1 temp___expr_233) 0)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant2 position true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant1 (get container position) true false true)) :pattern ((get container position))))))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq7 (us_rep3 us_rep3) Bool)
(declare-const dummy7 us_rep3)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep1 (key_type__content a))
(declare-fun get1 (us_rep3 us_rep1) Int)
(declare-fun get__function_guard1 (Int us_rep3 us_rep1) Bool)
(declare-sort element_type1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (element_type1 element_type1) Bool)
(declare-const dummy8 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___4__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant3 ((temp___expr_245 Int) (temp___is_init_242 Bool) (temp___skip_constant_243 Bool) (temp___do_toplevel_244 Bool)) Bool (=> (or (= temp___is_init_242 true) (<= 1 2147483647)) (in_range5 temp___expr_245)))
(declare-fun length2 (us_rep3) Int)
(declare-fun length__function_guard2 (Int us_rep3) Bool)
(declare-fun is_empty (us_rep3) Bool)
(declare-fun is_empty__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption2 ((temp___expr_252 us_rep3) (temp___skip_top_level_253 Bool)) Bool (=> (not (= temp___skip_top_level_253 true)) (and (= (is_empty temp___expr_252) true) (= (length2 temp___expr_252) 0))))
(declare-fun has_key (us_rep3 us_rep1) Bool)
(declare-fun has_key__function_guard (Bool us_rep3 us_rep1) Bool)
(declare-fun witness (us_rep3 us_rep1) Int)
(declare-fun witness__function_guard (Int us_rep3 us_rep1) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(define-fun default_initial_assumption3 ((temp___expr_240 us_rep1) (temp___skip_top_level_241 Bool)) Bool (= (to_rep (rec__use_lists__my_lists__cursor__node (us_split_fields3 temp___expr_240))) 0))
(assert (forall ((container us_rep3)) (forall ((key us_rep1)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (of_int 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep1)) (=> (= (has_key container k) true) (= (= (bool_eq1 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant3 result true false true)))) :pattern ((get1 container key))))))
(declare-fun model__ (us_rep) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep) Bool)
(assert (forall ((container us_rep)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-fun positions (us_rep) us_rep3)
(declare-fun positions__function_guard (us_rep3 us_rep) Bool)
(declare-const no_element us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep1)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep1)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern ((positions container)))))
(define-fun has_element ((container us_rep) (position us_rep1)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(declare-sort element_type2 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (element_type2 element_type2) Bool)
(declare-const dummy9 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant4 ((temp___expr_189 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= (- 2147483648) 2147483647)) (in_range6 temp___expr_189)))
(define-fun element ((container us_rep) (position us_rep1)) Int (get (model__ container) (get1 (positions container) position)))
(declare-fun element__function_guard (Int us_rep us_rep1) Bool)
(define-fun ole ((left us_rep2) (right us_rep2)) Bool (and (<= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun range_equal ((left us_rep2) (right us_rep2) (fst Int) (lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right i)))) true false))
(declare-fun range_equal__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(define-fun range_shifted ((left us_rep2) (right us_rep2) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right (+ i offset))))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (get left (- i offset)) (get right i)))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep2 us_rep2 Int Int Int) Bool)
(declare-fun ole1 (us_rep3 us_rep3) Bool)
(declare-fun ole__function_guard1 (Bool us_rep3 us_rep3) Bool)
(declare-fun keys_included_except (us_rep3 us_rep3 us_rep1) Bool)
(declare-fun keys_included_except__function_guard (Bool us_rep3 us_rep3 us_rep1) Bool)
(declare-fun p_positions_shifted (us_rep3 us_rep3 Int Int) Bool)
(declare-fun p_positions_shifted__function_guard (Bool us_rep3 us_rep3 Int Int) Bool)
(declare-fun last1 (us_rep) us_rep1)
(declare-fun last__function_guard1 (us_rep1 us_rep) Bool)
(declare-fun first (us_rep) us_rep1)
(declare-fun first__function_guard (us_rep1 us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (first container))) (ite (= (length container) 0) (= (bool_eq1 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) 1)))) :pattern ((first container)))))
(declare-const l__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))
(declare-sort positive_count_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq10 (positive_count_type positive_count_type) Bool)
(declare-const dummy10 positive_count_type)
(declare-datatypes () ((positive_count_type__ref (mk_positive_count_type__ref (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type (positive_count_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_208 Int) (temp___is_init_205 Bool) (temp___skip_constant_206 Bool) (temp___do_toplevel_207 Bool)) Bool (=> (or (= temp___is_init_205 true) (<= 1 2147483647)) (in_range7 temp___expr_208)))
(declare-fun keys_included (us_rep3 us_rep3) Bool)
(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)
(assert (forall ((small us_rep3) (big us_rep3)) (forall ((cut Int) (count Int)) (! (=> (and (dynamic_invariant5 cut true true true) (dynamic_invariant count true true true)) (= (= (p_positions_shifted small big cut count) true) (and (and (= (keys_included small big) true) (forall ((i us_rep1)) (=> (= (has_key small i) true) (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i)) (= (- (get1 big i) count) (get1 small i)))))) (forall ((i us_rep1)) (=> (= (has_key big i) true) (or (= (has_key small i) true) (and (<= (- cut count) (- (get1 big i) count)) (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted small big cut count))))))
(assert (forall ((container us_rep)) (! (let ((result (last1 container))) (ite (= (length container) 0) (= (bool_eq1 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (length container))))) :pattern ((last1 container)))))
(assert (forall ((container us_rep2)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true))) :pattern ((length1 container)))))
(assert (forall ((container us_rep3)) (forall ((key us_rep1)) (! (=> (= (of_int 0) true) (=> (exists ((k us_rep1)) (and (= (has_key container k) true) (= (bool_eq1 k key) true))) (= (has_key container key) true))) :pattern ((has_key container key))))))
(assert (forall ((container us_rep3)) (! (dynamic_invariant (length2 container) true false true) :pattern ((length2 container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (ole1 left right) true) (forall ((key us_rep1)) (=> (= (has_key left key) true) (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))) :pattern ((ole1 left right)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty container) true) (forall ((key us_rep1)) (not (= (has_key container key) true)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (keys_included left right) true) (forall ((key us_rep1)) (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep3) (right us_rep3)) (forall ((new_key us_rep1)) (! (= (= (keys_included_except left right new_key) true) (forall ((key us_rep1)) (=> (= (has_key left key) true) (=> (not (= (bool_eq1 key new_key) true)) (= (has_key right key) true))))) :pattern ((keys_included_except left right new_key))))))
(declare-fun has_witness (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container us_rep3)) (forall ((key us_rep1)) (! (=> (= (has_key container key) true) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant result true false true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep3)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant witness1 true true true) (= (has_witness container witness1) true)) (dynamic_invariant3 (w_get container witness1) true false true)) :pattern ((w_get container witness1))))))
(declare-const l__split_fields us_main_type)
(declare-const cu__split_fields count_type)
(declare-const n Int)
(declare-const use_lists__double_size_2__cu__assume count_type)
(declare-const result count_type)
(declare-const cu__split_fields1 count_type)
(declare-const result1 Int)
(declare-const n1 Int)
(declare-const result2 Bool)
(define-fun cu__split_fields2 () us_split_fields2 (mk___split_fields1 cu__split_fields1))
(define-fun use_lists__double_size_2__cu__assume1 () us_rep1 (mk___rep1 (mk___split_fields1 use_lists__double_size_2__cu__assume)))
(assert (<= (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (div1 (to_rep (rec__use_lists__my_lists__list__capacity l__split_discrs)) 2)))
(assert (and (= use_lists__double_size_2__cu__assume1 (first (mk___rep l__split_discrs (mk___split_fields l__split_fields)))) (ite (= (= (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 0) true) (= (bool_eq1 use_lists__double_size_2__cu__assume1 no_element) true) (and (= (has_key (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) use_lists__double_size_2__cu__assume1) true) (= (get1 (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) use_lists__double_size_2__cu__assume1) 1)))))
(assert (= (mk___split_fields__ref1 (mk___split_fields1 result)) (mk___split_fields__ref1 (mk___split_fields1 cu__split_fields))))
(assert (= use_lists__double_size_2__cu__assume cu__split_fields1))
(assert (= (mk_int__ref result1) (mk_int__ref n)))
(assert (= n1 0))
(assert (in_range2 n1))
(assert (and (= result2 (has_key (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (mk___rep1 cu__split_fields2))) (= (= result2 true) (= (has_key (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (mk___rep1 cu__split_fields2)) true))))
(assert (= result2 true))
(declare-const i Int)
(assert (<= 1 i))
(assert (<= i n1))
(assert (not (= (get (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (* 2 i)) (get (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) i))))
(check-sat)
(exit)
