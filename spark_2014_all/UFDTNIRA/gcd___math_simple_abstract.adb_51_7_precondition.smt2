(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(declare-fun divides (Int Int) Bool)
(declare-fun divides__function_guard (Bool Int Int) Bool)
(assert true)
(assert (forall ((a Int) (b Int)) (! (= (= (divides a b) true) (exists ((c Int)) (and (and (<= 1 c) (<= c 2147483647)) (= (* a c) b)))) :pattern ((divides a b)))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c Int)
(declare-const math_simple_abstract__gcd__result Int)
(declare-const o Int)
(declare-const temp___132 Int)
(declare-const x Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Bool)
(declare-const o4 Int)
(declare-const x1 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Bool)
(declare-const result Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const result1 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(declare-const result2 Int)
(declare-const math_simple_abstract__gcd__result1 Int)
(declare-const math_simple_abstract__gcd__result2 Int)
(declare-const math_simple_abstract__gcd__result3 Int)
(declare-const c12 Int)
(declare-const math_simple_abstract__gcd__result4 Int)
(declare-const c13 Int)
(declare-const math_simple_abstract__gcd__result5 Int)
(declare-const result3 Bool)
(declare-const result4 Bool)
(assert (in_range1 a))
(assert (in_range1 b))
(assert (and (= o (ite (< a b) a b)) (in_range1 (ite (< a b) a b))))
(assert (= (mk_int__ref result) (mk_int__ref c)))
(assert (= c1 o))
(assert (in_range1 c1))
(assert (=> (< 1 c1) (and (and (= temp___132 c1) (or (and (and (= c1 c6) (= c7 c1)) (and (= (mod2 a c1) 0) (= (mod2 b c1) 0))) (and (not (and (= (mod2 a c1) 0) (= (mod2 b c1) 0))) (and (and (= c3 c6) (= c7 c3)) (and (ite (not (= (mod2 a c1) 0)) (not (= (divides c1 a) true)) (not (= (divides c1 b) true))) (and (forall ((x2 Int)) (=> (and (<= c2 x2) (<= x2 (ite (< a b) a b))) (not (and (= (divides x2 a) true) (= (divides x2 b) true))))) (and (=> (<= 1 2147483647) (in_range1 c2)) (and (and (and (= o4 (- c2 1)) (in_range1 (- c2 1))) (and (= c2 result1) (= c3 o4))) (or (not (< 1 c3)) (and (< 1 c3) (and (= (mod2 a c3) 0) (= (mod2 b c3) 0)))))))))))) (and (= (mk_int__ref c8) (mk_int__ref c6)) (= c9 c7)))))
(assert (=> (< 1 c1) (= (mk_int__ref c10) (mk_int__ref c8))))
(assert (=> (< 1 c1) (= c11 c9)))
(assert (=> (not (< 1 c1)) (= c1 c10)))
(assert (=> (not (< 1 c1)) (= c11 c1)))
(assert (not (= (mod2 a c10) 0)))
(check-sat)
(exit)
